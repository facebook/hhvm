// Autogenerated by Thrift for thrift/compiler/test/fixtures/go-service/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"
    "sync"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = sync.OnceFunc
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__


type GetEntity interface {
    GetEntity(ctx context.Context, r *GetEntityRequest) (*GetEntityResponse, error)
    GetBool(ctx context.Context) (bool, error)
    GetByte(ctx context.Context) (int8, error)
    GetI16(ctx context.Context) (int16, error)
    GetI32(ctx context.Context) (int32, error)
    GetI64(ctx context.Context) (int64, error)
    GetDouble(ctx context.Context) (float64, error)
    GetString(ctx context.Context) (string, error)
    GetBinary(ctx context.Context) ([]byte, error)
    GetMap(ctx context.Context) (map[string]string, error)
    GetSet(ctx context.Context) ([]string, error)
    GetList(ctx context.Context) ([]string, error)
    GetLegacyStuff(ctx context.Context, numPos int64, numNeg1 int64, numNeg2 int64) (int32, error)
    GetCtxCollision(ctx1 context.Context, ctx int64) (int32, error)
    GetCtx1Collision(ctx2 context.Context, ctx int64, ctx1 int64) (int32, error)
    GetContextCollision(ctx context.Context, context_ int64) (int32, error)
    GetOutCollision(ctx context.Context, out int64) (int32, error)
    GetOut1Collision(ctx context.Context, out int64, out1 int64) (int32, error)
    GetInCollision(ctx context.Context, in int64) (int32, error)
    GetIn1Collision(ctx context.Context, in int64, in1 int64) (int32, error)
    GetErrCollision(ctx context.Context, err int64) (int32, error)
    GetErr1Collision(ctx context.Context, err int64, err1 int64) (int32, error)
    MyMethodWithConflictingParamAccessors(ctx context.Context, setFoo bool, foo string) (error)
}

type GetEntityClient interface {
    io.Closer
    GetEntity(ctx context.Context, r *GetEntityRequest) (*GetEntityResponse, error)
    GetBool(ctx context.Context) (bool, error)
    GetByte(ctx context.Context) (int8, error)
    GetI16(ctx context.Context) (int16, error)
    GetI32(ctx context.Context) (int32, error)
    GetI64(ctx context.Context) (int64, error)
    GetDouble(ctx context.Context) (float64, error)
    GetString(ctx context.Context) (string, error)
    GetBinary(ctx context.Context) ([]byte, error)
    GetMap(ctx context.Context) (map[string]string, error)
    GetSet(ctx context.Context) ([]string, error)
    GetList(ctx context.Context) ([]string, error)
    GetLegacyStuff(ctx context.Context, numPos int64, numNeg1 int64, numNeg2 int64) (int32, error)
    GetCtxCollision(ctx1 context.Context, ctx int64) (int32, error)
    GetCtx1Collision(ctx2 context.Context, ctx int64, ctx1 int64) (int32, error)
    GetContextCollision(ctx context.Context, context_ int64) (int32, error)
    GetOutCollision(ctx context.Context, out int64) (int32, error)
    GetOut1Collision(ctx context.Context, out int64, out1 int64) (int32, error)
    GetInCollision(ctx context.Context, in int64) (int32, error)
    GetIn1Collision(ctx context.Context, in int64, in1 int64) (int32, error)
    GetErrCollision(ctx context.Context, err int64) (int32, error)
    GetErr1Collision(ctx context.Context, err int64, err1 int64) (int32, error)
    MyMethodWithConflictingParamAccessors(ctx context.Context, setFoo bool, foo string) (error)
}

type getEntityClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ GetEntityClient = (*getEntityClientImpl)(nil)

func NewGetEntityChannelClient(channel thrift.RequestChannel) GetEntityClient {
    return &getEntityClientImpl{
        ch: channel,
    }
}

func (c *getEntityClientImpl) Close() error {
    return c.ch.Close()
}

func (c *getEntityClientImpl) GetEntity(ctx context.Context, r *GetEntityRequest) (*GetEntityResponse, error) {
    fbthriftReq := &reqGetEntityGetEntity{
        R: r,
    }
    fbthriftResp := newRespGetEntityGetEntity()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getEntity", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetBool(ctx context.Context) (bool, error) {
    fbthriftReq := &reqGetEntityGetBool{
    }
    fbthriftResp := newRespGetEntityGetBool()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getBool", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return false, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return false, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetByte(ctx context.Context) (int8, error) {
    fbthriftReq := &reqGetEntityGetByte{
    }
    fbthriftResp := newRespGetEntityGetByte()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getByte", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetI16(ctx context.Context) (int16, error) {
    fbthriftReq := &reqGetEntityGetI16{
    }
    fbthriftResp := newRespGetEntityGetI16()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getI16", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetI32(ctx context.Context) (int32, error) {
    fbthriftReq := &reqGetEntityGetI32{
    }
    fbthriftResp := newRespGetEntityGetI32()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getI32", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetI64(ctx context.Context) (int64, error) {
    fbthriftReq := &reqGetEntityGetI64{
    }
    fbthriftResp := newRespGetEntityGetI64()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getI64", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetDouble(ctx context.Context) (float64, error) {
    fbthriftReq := &reqGetEntityGetDouble{
    }
    fbthriftResp := newRespGetEntityGetDouble()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getDouble", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0.0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0.0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetString(ctx context.Context) (string, error) {
    fbthriftReq := &reqGetEntityGetString{
    }
    fbthriftResp := newRespGetEntityGetString()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getString", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return "", fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return "", fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetBinary(ctx context.Context) ([]byte, error) {
    fbthriftReq := &reqGetEntityGetBinary{
    }
    fbthriftResp := newRespGetEntityGetBinary()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getBinary", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetMap(ctx context.Context) (map[string]string, error) {
    fbthriftReq := &reqGetEntityGetMap{
    }
    fbthriftResp := newRespGetEntityGetMap()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getMap", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetSet(ctx context.Context) ([]string, error) {
    fbthriftReq := &reqGetEntityGetSet{
    }
    fbthriftResp := newRespGetEntityGetSet()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getSet", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetList(ctx context.Context) ([]string, error) {
    fbthriftReq := &reqGetEntityGetList{
    }
    fbthriftResp := newRespGetEntityGetList()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getList", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return nil, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return nil, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetLegacyStuff(ctx context.Context, numPos int64, numNeg1 int64, numNeg2 int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetLegacyStuff{
        NumPos: numPos,
        NumNeg1: numNeg1,
        NumNeg2: numNeg2,
    }
    fbthriftResp := newRespGetEntityGetLegacyStuff()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getLegacyStuff", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetCtxCollision(ctx1 context.Context, ctx int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetCtxCollision{
        Ctx: ctx,
    }
    fbthriftResp := newRespGetEntityGetCtxCollision()
    fbthriftErr := c.ch.SendRequestResponse(ctx1, "getCtxCollision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetCtx1Collision(ctx2 context.Context, ctx int64, ctx1 int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetCtx1Collision{
        Ctx: ctx,
        Ctx1: ctx1,
    }
    fbthriftResp := newRespGetEntityGetCtx1Collision()
    fbthriftErr := c.ch.SendRequestResponse(ctx2, "getCtx1Collision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetContextCollision(ctx context.Context, context_ int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetContextCollision{
        Context: context_,
    }
    fbthriftResp := newRespGetEntityGetContextCollision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getContextCollision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetOutCollision(ctx context.Context, out int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetOutCollision{
        Out: out,
    }
    fbthriftResp := newRespGetEntityGetOutCollision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getOutCollision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetOut1Collision(ctx context.Context, out int64, out1 int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetOut1Collision{
        Out: out,
        Out1: out1,
    }
    fbthriftResp := newRespGetEntityGetOut1Collision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getOut1Collision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetInCollision(ctx context.Context, in int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetInCollision{
        In: in,
    }
    fbthriftResp := newRespGetEntityGetInCollision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getInCollision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetIn1Collision(ctx context.Context, in int64, in1 int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetIn1Collision{
        In: in,
        In1: in1,
    }
    fbthriftResp := newRespGetEntityGetIn1Collision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getIn1Collision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetErrCollision(ctx context.Context, err int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetErrCollision{
        Err: err,
    }
    fbthriftResp := newRespGetEntityGetErrCollision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getErrCollision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) GetErr1Collision(ctx context.Context, err int64, err1 int64) (int32, error) {
    fbthriftReq := &reqGetEntityGetErr1Collision{
        Err: err,
        Err1: err1,
    }
    fbthriftResp := newRespGetEntityGetErr1Collision()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getErr1Collision", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *getEntityClientImpl) MyMethodWithConflictingParamAccessors(ctx context.Context, setFoo bool, foo string) (error) {
    fbthriftReq := &reqGetEntityMyMethodWithConflictingParamAccessors{
        SetFoo: setFoo,
        Foo: foo,
    }
    fbthriftResp := newRespGetEntityMyMethodWithConflictingParamAccessors()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "myMethodWithConflictingParamAccessors", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type GetEntityProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              GetEntity
}

func NewGetEntityProcessor(handler GetEntity) *GetEntityProcessor {
    p := &GetEntityProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("getEntity", &procFuncGetEntityGetEntity{handler: handler})
    p.AddToProcessorFunctionMap("getBool", &procFuncGetEntityGetBool{handler: handler})
    p.AddToProcessorFunctionMap("getByte", &procFuncGetEntityGetByte{handler: handler})
    p.AddToProcessorFunctionMap("getI16", &procFuncGetEntityGetI16{handler: handler})
    p.AddToProcessorFunctionMap("getI32", &procFuncGetEntityGetI32{handler: handler})
    p.AddToProcessorFunctionMap("getI64", &procFuncGetEntityGetI64{handler: handler})
    p.AddToProcessorFunctionMap("getDouble", &procFuncGetEntityGetDouble{handler: handler})
    p.AddToProcessorFunctionMap("getString", &procFuncGetEntityGetString{handler: handler})
    p.AddToProcessorFunctionMap("getBinary", &procFuncGetEntityGetBinary{handler: handler})
    p.AddToProcessorFunctionMap("getMap", &procFuncGetEntityGetMap{handler: handler})
    p.AddToProcessorFunctionMap("getSet", &procFuncGetEntityGetSet{handler: handler})
    p.AddToProcessorFunctionMap("getList", &procFuncGetEntityGetList{handler: handler})
    p.AddToProcessorFunctionMap("getLegacyStuff", &procFuncGetEntityGetLegacyStuff{handler: handler})
    p.AddToProcessorFunctionMap("getCtxCollision", &procFuncGetEntityGetCtxCollision{handler: handler})
    p.AddToProcessorFunctionMap("getCtx1Collision", &procFuncGetEntityGetCtx1Collision{handler: handler})
    p.AddToProcessorFunctionMap("getContextCollision", &procFuncGetEntityGetContextCollision{handler: handler})
    p.AddToProcessorFunctionMap("getOutCollision", &procFuncGetEntityGetOutCollision{handler: handler})
    p.AddToProcessorFunctionMap("getOut1Collision", &procFuncGetEntityGetOut1Collision{handler: handler})
    p.AddToProcessorFunctionMap("getInCollision", &procFuncGetEntityGetInCollision{handler: handler})
    p.AddToProcessorFunctionMap("getIn1Collision", &procFuncGetEntityGetIn1Collision{handler: handler})
    p.AddToProcessorFunctionMap("getErrCollision", &procFuncGetEntityGetErrCollision{handler: handler})
    p.AddToProcessorFunctionMap("getErr1Collision", &procFuncGetEntityGetErr1Collision{handler: handler})
    p.AddToProcessorFunctionMap("myMethodWithConflictingParamAccessors", &procFuncGetEntityMyMethodWithConflictingParamAccessors{handler: handler})
    p.AddToFunctionServiceMap("getEntity", "GetEntity")
    p.AddToFunctionServiceMap("getBool", "GetEntity")
    p.AddToFunctionServiceMap("getByte", "GetEntity")
    p.AddToFunctionServiceMap("getI16", "GetEntity")
    p.AddToFunctionServiceMap("getI32", "GetEntity")
    p.AddToFunctionServiceMap("getI64", "GetEntity")
    p.AddToFunctionServiceMap("getDouble", "GetEntity")
    p.AddToFunctionServiceMap("getString", "GetEntity")
    p.AddToFunctionServiceMap("getBinary", "GetEntity")
    p.AddToFunctionServiceMap("getMap", "GetEntity")
    p.AddToFunctionServiceMap("getSet", "GetEntity")
    p.AddToFunctionServiceMap("getList", "GetEntity")
    p.AddToFunctionServiceMap("getLegacyStuff", "GetEntity")
    p.AddToFunctionServiceMap("getCtxCollision", "GetEntity")
    p.AddToFunctionServiceMap("getCtx1Collision", "GetEntity")
    p.AddToFunctionServiceMap("getContextCollision", "GetEntity")
    p.AddToFunctionServiceMap("getOutCollision", "GetEntity")
    p.AddToFunctionServiceMap("getOut1Collision", "GetEntity")
    p.AddToFunctionServiceMap("getInCollision", "GetEntity")
    p.AddToFunctionServiceMap("getIn1Collision", "GetEntity")
    p.AddToFunctionServiceMap("getErrCollision", "GetEntity")
    p.AddToFunctionServiceMap("getErr1Collision", "GetEntity")
    p.AddToFunctionServiceMap("myMethodWithConflictingParamAccessors", "GetEntity")

    return p
}

func (p *GetEntityProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *GetEntityProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *GetEntityProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *GetEntityProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *GetEntityProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *GetEntityProcessor) PackageName() string {
    return "module"
}

func (p *GetEntityProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.GetEntity")
}


type procFuncGetEntityGetEntity struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetEntity)(nil)

func (p *procFuncGetEntityGetEntity) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetEntity()
}

func (p *procFuncGetEntityGetEntity) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetEntity)
    result := newRespGetEntityGetEntity()
    retval, err := p.handler.GetEntity(ctx, args.R)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetEntity: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

type procFuncGetEntityGetBool struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetBool)(nil)

func (p *procFuncGetEntityGetBool) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetBool()
}

func (p *procFuncGetEntityGetBool) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetBool()
    retval, err := p.handler.GetBool(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetBool: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetByte struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetByte)(nil)

func (p *procFuncGetEntityGetByte) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetByte()
}

func (p *procFuncGetEntityGetByte) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetByte()
    retval, err := p.handler.GetByte(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetByte: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetI16 struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetI16)(nil)

func (p *procFuncGetEntityGetI16) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetI16()
}

func (p *procFuncGetEntityGetI16) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetI16()
    retval, err := p.handler.GetI16(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetI16: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetI32 struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetI32)(nil)

func (p *procFuncGetEntityGetI32) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetI32()
}

func (p *procFuncGetEntityGetI32) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetI32()
    retval, err := p.handler.GetI32(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetI32: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetI64 struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetI64)(nil)

func (p *procFuncGetEntityGetI64) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetI64()
}

func (p *procFuncGetEntityGetI64) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetI64()
    retval, err := p.handler.GetI64(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetI64: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetDouble struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetDouble)(nil)

func (p *procFuncGetEntityGetDouble) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetDouble()
}

func (p *procFuncGetEntityGetDouble) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetDouble()
    retval, err := p.handler.GetDouble(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetDouble: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetString struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetString)(nil)

func (p *procFuncGetEntityGetString) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetString()
}

func (p *procFuncGetEntityGetString) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetString()
    retval, err := p.handler.GetString(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetString: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetBinary struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetBinary)(nil)

func (p *procFuncGetEntityGetBinary) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetBinary()
}

func (p *procFuncGetEntityGetBinary) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetBinary()
    retval, err := p.handler.GetBinary(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetBinary: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

type procFuncGetEntityGetMap struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetMap)(nil)

func (p *procFuncGetEntityGetMap) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetMap()
}

func (p *procFuncGetEntityGetMap) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetMap()
    retval, err := p.handler.GetMap(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetMap: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

type procFuncGetEntityGetSet struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetSet)(nil)

func (p *procFuncGetEntityGetSet) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetSet()
}

func (p *procFuncGetEntityGetSet) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetSet()
    retval, err := p.handler.GetSet(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetSet: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

type procFuncGetEntityGetList struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetList)(nil)

func (p *procFuncGetEntityGetList) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetList()
}

func (p *procFuncGetEntityGetList) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    result := newRespGetEntityGetList()
    retval, err := p.handler.GetList(ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetList: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = retval
    return result, nil
}

type procFuncGetEntityGetLegacyStuff struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetLegacyStuff)(nil)

func (p *procFuncGetEntityGetLegacyStuff) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetLegacyStuff()
}

func (p *procFuncGetEntityGetLegacyStuff) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetLegacyStuff)
    result := newRespGetEntityGetLegacyStuff()
    retval, err := p.handler.GetLegacyStuff(ctx, args.NumPos, args.NumNeg1, args.NumNeg2)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetLegacyStuff: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetCtxCollision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetCtxCollision)(nil)

func (p *procFuncGetEntityGetCtxCollision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetCtxCollision()
}

func (p *procFuncGetEntityGetCtxCollision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetCtxCollision)
    result := newRespGetEntityGetCtxCollision()
    retval, err := p.handler.GetCtxCollision(ctx, args.Ctx)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetCtxCollision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetCtx1Collision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetCtx1Collision)(nil)

func (p *procFuncGetEntityGetCtx1Collision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetCtx1Collision()
}

func (p *procFuncGetEntityGetCtx1Collision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetCtx1Collision)
    result := newRespGetEntityGetCtx1Collision()
    retval, err := p.handler.GetCtx1Collision(ctx, args.Ctx, args.Ctx1)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetCtx1Collision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetContextCollision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetContextCollision)(nil)

func (p *procFuncGetEntityGetContextCollision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetContextCollision()
}

func (p *procFuncGetEntityGetContextCollision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetContextCollision)
    result := newRespGetEntityGetContextCollision()
    retval, err := p.handler.GetContextCollision(ctx, args.Context)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetContextCollision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetOutCollision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetOutCollision)(nil)

func (p *procFuncGetEntityGetOutCollision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetOutCollision()
}

func (p *procFuncGetEntityGetOutCollision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetOutCollision)
    result := newRespGetEntityGetOutCollision()
    retval, err := p.handler.GetOutCollision(ctx, args.Out)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetOutCollision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetOut1Collision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetOut1Collision)(nil)

func (p *procFuncGetEntityGetOut1Collision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetOut1Collision()
}

func (p *procFuncGetEntityGetOut1Collision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetOut1Collision)
    result := newRespGetEntityGetOut1Collision()
    retval, err := p.handler.GetOut1Collision(ctx, args.Out, args.Out1)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetOut1Collision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetInCollision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetInCollision)(nil)

func (p *procFuncGetEntityGetInCollision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetInCollision()
}

func (p *procFuncGetEntityGetInCollision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetInCollision)
    result := newRespGetEntityGetInCollision()
    retval, err := p.handler.GetInCollision(ctx, args.In)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetInCollision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetIn1Collision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetIn1Collision)(nil)

func (p *procFuncGetEntityGetIn1Collision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetIn1Collision()
}

func (p *procFuncGetEntityGetIn1Collision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetIn1Collision)
    result := newRespGetEntityGetIn1Collision()
    retval, err := p.handler.GetIn1Collision(ctx, args.In, args.In1)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetIn1Collision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetErrCollision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetErrCollision)(nil)

func (p *procFuncGetEntityGetErrCollision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetErrCollision()
}

func (p *procFuncGetEntityGetErrCollision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetErrCollision)
    result := newRespGetEntityGetErrCollision()
    retval, err := p.handler.GetErrCollision(ctx, args.Err)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetErrCollision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityGetErr1Collision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityGetErr1Collision)(nil)

func (p *procFuncGetEntityGetErr1Collision) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityGetErr1Collision()
}

func (p *procFuncGetEntityGetErr1Collision) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityGetErr1Collision)
    result := newRespGetEntityGetErr1Collision()
    retval, err := p.handler.GetErr1Collision(ctx, args.Err, args.Err1)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing GetErr1Collision: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}

type procFuncGetEntityMyMethodWithConflictingParamAccessors struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncGetEntityMyMethodWithConflictingParamAccessors)(nil)

func (p *procFuncGetEntityMyMethodWithConflictingParamAccessors) NewReqArgs() thrift.ReadableStruct {
    return newReqGetEntityMyMethodWithConflictingParamAccessors()
}

func (p *procFuncGetEntityMyMethodWithConflictingParamAccessors) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqGetEntityMyMethodWithConflictingParamAccessors)
    result := newRespGetEntityMyMethodWithConflictingParamAccessors()
    err := p.handler.MyMethodWithConflictingParamAccessors(ctx, args.SetFoo, args.Foo)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing MyMethodWithConflictingParamAccessors: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    return result, nil
}

