/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/service-schema/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/PrimitivesServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/extend_types.h"
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/include_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace facebook::thrift::test {
class PrimitivesService;
class PrimitivesServiceAsyncProcessor;

class PrimitivesServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace facebook::thrift::test

namespace apache::thrift {
template <>
class ServiceHandler<::facebook::thrift::test::PrimitivesService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::facebook::thrift::test::PrimitivesService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "PrimitivesService"; }

  static std::string_view __fbthrift_thrift_uri() {
    return "facebook.com/thrift/test/PrimitivesService";
  }

  typedef ::facebook::thrift::test::PrimitivesServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  #if defined(THRIFT_SCHEMA_AVAILABLE)
  std::optional<schema::DefinitionsSchema> getServiceSchema() override;
  std::vector<folly::not_null<const syntax_graph::ServiceNode*>> getServiceSchemaNodes() override;
  #endif
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual ::std::int64_t sync_init(::std::int64_t /*param0*/, ::std::int64_t /*param1*/);
  [[deprecated("Use sync_init instead")]] virtual ::std::int64_t init(::std::int64_t /*param0*/, ::std::int64_t /*param1*/);
  virtual folly::Future<::std::int64_t> future_init(::std::int64_t p_param0, ::std::int64_t p_param1);
  virtual folly::SemiFuture<::std::int64_t> semifuture_init(::std::int64_t p_param0, ::std::int64_t p_param1);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int64_t> co_init(::std::int64_t p_param0, ::std::int64_t p_param1);
  virtual folly::coro::Task<::std::int64_t> co_init(apache::thrift::RequestParams params, ::std::int64_t p_param0, ::std::int64_t p_param1);
#endif
  virtual void async_tm_init(apache::thrift::HandlerCallbackPtr<::std::int64_t> callback, ::std::int64_t p_param0, ::std::int64_t p_param1);
  virtual ::facebook::thrift::test::Result sync_method_that_throws();
  [[deprecated("Use sync_method_that_throws instead")]] virtual ::facebook::thrift::test::Result method_that_throws();
  virtual folly::Future<::facebook::thrift::test::Result> future_method_that_throws();
  virtual folly::SemiFuture<::facebook::thrift::test::Result> semifuture_method_that_throws();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::facebook::thrift::test::Result> co_method_that_throws();
  virtual folly::coro::Task<::facebook::thrift::test::Result> co_method_that_throws(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_method_that_throws(apache::thrift::HandlerCallbackPtr<::facebook::thrift::test::Result> callback);
  virtual void sync_return_void_method(::std::int64_t /*id*/, std::unique_ptr<::cpp2::I> /*i*/);
  [[deprecated("Use sync_return_void_method instead")]] virtual void return_void_method(::std::int64_t /*id*/, std::unique_ptr<::cpp2::I> /*i*/);
  virtual folly::Future<folly::Unit> future_return_void_method(::std::int64_t p_id, std::unique_ptr<::cpp2::I> p_i);
  virtual folly::SemiFuture<folly::Unit> semifuture_return_void_method(::std::int64_t p_id, std::unique_ptr<::cpp2::I> p_i);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_return_void_method(::std::int64_t p_id, std::unique_ptr<::cpp2::I> p_i);
  virtual folly::coro::Task<void> co_return_void_method(apache::thrift::RequestParams params, ::std::int64_t p_id, std::unique_ptr<::cpp2::I> p_i);
#endif
  virtual void async_tm_return_void_method(apache::thrift::HandlerCallbackPtr<void> callback, ::std::int64_t p_id, std::unique_ptr<::cpp2::I> p_i);
 private:
  static ::facebook::thrift::test::PrimitivesServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_init{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_method_that_throws{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_return_void_method{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_init(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int64_t>::type /*p_param0*/, apache::thrift::detail::DecoratorArgType<::std::int64_t>::type /*p_param1*/) {}
  virtual void fbthrift_execute_decorators_after_init(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::int64_t>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_init(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::int64_t>::type result) {
    static_cast<ServiceHandler<::facebook::thrift::test::PrimitivesService>*>(iface)->fbthrift_execute_decorators_after_init(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_method_that_throws(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_method_that_throws(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::facebook::thrift::test::Result>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_method_that_throws(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::facebook::thrift::test::Result>::type result) {
    static_cast<ServiceHandler<::facebook::thrift::test::PrimitivesService>*>(iface)->fbthrift_execute_decorators_after_method_that_throws(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_return_void_method(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int64_t>::type /*p_id*/, apache::thrift::detail::DecoratorArgType<::cpp2::I>::type /*p_i*/) {}
  virtual void fbthrift_execute_decorators_after_return_void_method(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_return_void_method(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::facebook::thrift::test::PrimitivesService>*>(iface)->fbthrift_execute_decorators_after_return_void_method(*ctx);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::facebook::thrift::test::PrimitivesService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -4897237288056697529;
  static constexpr ::std::string_view definitionKey = {"\x8a\x6f\xcf\x1a\xc4\x7f\xef\xe9\xfc\xd0\xb5\xce\x3b\x5e\x14\xb4", 16};
};
}
} // namespace apache::thrift

namespace facebook::thrift::test {
using PrimitivesServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<PrimitivesService> instead")]] = ::apache::thrift::ServiceHandler<PrimitivesService>;
} // namespace facebook::thrift::test

namespace facebook::thrift::test {
class PrimitivesServiceSvNull : public ::apache::thrift::ServiceHandler<PrimitivesService> {
 public:
  ::std::int64_t init(::std::int64_t /*param0*/, ::std::int64_t /*param1*/) override;
  ::facebook::thrift::test::Result method_that_throws() override;
  void return_void_method(::std::int64_t /*id*/, std::unique_ptr<::cpp2::I> /*i*/) override;
};

class PrimitivesServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::facebook::thrift::test::PrimitivesService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<PrimitivesServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const PrimitivesServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const PrimitivesServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'init'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_init(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_init(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_init(
      apache::thrift::ContextStack* ctx,
      ::std::int64_t const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_init(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'init'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'method_that_throws'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_method_that_throws(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_method_that_throws(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_method_that_throws(
      apache::thrift::ContextStack* ctx,
      ::facebook::thrift::test::Result const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_method_that_throws(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'method_that_throws'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'return_void_method'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_return_void_method(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_return_void_method(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_return_void_method(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_return_void_method(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'return_void_method'
  //

  //
  // End of Service Methods
  //
 public:
  PrimitivesServiceAsyncProcessor(::apache::thrift::ServiceHandler<::facebook::thrift::test::PrimitivesService>* iface) :
      iface_(iface) {}
  ~PrimitivesServiceAsyncProcessor() override {}
};

} // namespace facebook::thrift::test
