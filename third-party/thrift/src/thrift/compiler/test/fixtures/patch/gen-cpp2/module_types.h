/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/annotation/gen-cpp2/thrift_types.h"
#include "thrift/lib/thrift/gen-cpp2/patch_types.h"
#include "thrift/lib/thrift/gen-cpp2/standard_types.h"

namespace apache {
namespace thrift {
namespace ident {
struct data1;
struct data2;
struct data1;
struct data2;
struct innerOption;
struct option1;
struct option2;
struct option3;
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct enumVal;
struct structVal;
struct unionVal;
struct lateStructVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct optEnumVal;
struct optStructVal;
struct optLateStructVal;
struct optListVal;
struct optSetVal;
struct optMapVal;
struct listMap;
struct mapMap;
struct i32WithCustomDefault;
struct structWithCustomDefault;
struct structWithFieldCustomDefault;
struct nodes;
struct loop;
struct bar;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct data1;
struct data2;
struct data1;
struct data2;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct data1;
struct data2;
struct data1;
struct data2;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct innerOption;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct option1;
struct option2;
struct option3;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct assign;
struct clear;
struct assign;
struct clear;
struct assign;
struct clear;
struct patch;
struct remove;
struct prepend;
struct append;
struct assign;
struct clear;
struct remove;
struct add;
struct assign;
struct clear;
struct patchPrior;
struct add;
struct patch;
struct remove;
struct put;
struct assign;
struct clear;
struct patch;
struct remove;
struct prepend;
struct append;
struct assign;
struct clear;
struct patchPrior;
struct add;
struct patch;
struct remove;
struct put;
struct assign;
struct clear;
struct patchPrior;
struct add;
struct patch;
struct remove;
struct put;
struct assign;
struct clear;
struct patchPrior;
struct add;
struct patch;
struct remove;
struct put;
struct structWithCustomDefault;
struct i32WithCustomDefault;
struct mapMap;
struct listMap;
struct optMapVal;
struct optSetVal;
struct optListVal;
struct optLateStructVal;
struct optStructVal;
struct optEnumVal;
struct optBinaryVal;
struct optStringVal;
struct optDoubleVal;
struct optFloatVal;
struct optI64Val;
struct optI32Val;
struct optI16Val;
struct optByteVal;
struct optBoolVal;
struct lateStructVal;
struct unionVal;
struct structVal;
struct enumVal;
struct binaryVal;
struct stringVal;
struct doubleVal;
struct floatVal;
struct i64Val;
struct i32Val;
struct i16Val;
struct byteVal;
struct boolVal;
struct structWithFieldCustomDefault;
struct structWithCustomDefault;
struct i32WithCustomDefault;
struct mapMap;
struct listMap;
struct optMapVal;
struct optSetVal;
struct optListVal;
struct optLateStructVal;
struct optStructVal;
struct optEnumVal;
struct optBinaryVal;
struct optStringVal;
struct optDoubleVal;
struct optFloatVal;
struct optI64Val;
struct optI32Val;
struct optI16Val;
struct optByteVal;
struct optBoolVal;
struct lateStructVal;
struct unionVal;
struct structVal;
struct enumVal;
struct binaryVal;
struct stringVal;
struct doubleVal;
struct floatVal;
struct i64Val;
struct i32Val;
struct i16Val;
struct byteVal;
struct boolVal;
struct structWithFieldCustomDefault;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct assign;
struct clear;
struct nodes;
struct nodes;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct loop;
struct loop;
struct assign;
struct clear;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_innerOption
#define APACHE_THRIFT_ACCESSOR_innerOption
APACHE_THRIFT_DEFINE_ACCESSOR(innerOption);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option1
#define APACHE_THRIFT_ACCESSOR_option1
APACHE_THRIFT_DEFINE_ACCESSOR(option1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option2
#define APACHE_THRIFT_ACCESSOR_option2
APACHE_THRIFT_DEFINE_ACCESSOR(option2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option3
#define APACHE_THRIFT_ACCESSOR_option3
APACHE_THRIFT_DEFINE_ACCESSOR(option3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumVal
#define APACHE_THRIFT_ACCESSOR_enumVal
APACHE_THRIFT_DEFINE_ACCESSOR(enumVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionVal
#define APACHE_THRIFT_ACCESSOR_unionVal
APACHE_THRIFT_DEFINE_ACCESSOR(unionVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lateStructVal
#define APACHE_THRIFT_ACCESSOR_lateStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(lateStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optEnumVal
#define APACHE_THRIFT_ACCESSOR_optEnumVal
APACHE_THRIFT_DEFINE_ACCESSOR(optEnumVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optLateStructVal
#define APACHE_THRIFT_ACCESSOR_optLateStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optLateStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listMap
#define APACHE_THRIFT_ACCESSOR_listMap
APACHE_THRIFT_DEFINE_ACCESSOR(listMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapMap
#define APACHE_THRIFT_ACCESSOR_mapMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32WithCustomDefault
#define APACHE_THRIFT_ACCESSOR_i32WithCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(i32WithCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structWithCustomDefault
#define APACHE_THRIFT_ACCESSOR_structWithCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(structWithCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structWithFieldCustomDefault
#define APACHE_THRIFT_ACCESSOR_structWithFieldCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(structWithFieldCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nodes
#define APACHE_THRIFT_ACCESSOR_nodes
APACHE_THRIFT_DEFINE_ACCESSOR(nodes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_loop
#define APACHE_THRIFT_ACCESSOR_loop
APACHE_THRIFT_DEFINE_ACCESSOR(loop);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bar
#define APACHE_THRIFT_ACCESSOR_bar
APACHE_THRIFT_DEFINE_ACCESSOR(bar);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_innerOption
#define APACHE_THRIFT_ACCESSOR_innerOption
APACHE_THRIFT_DEFINE_ACCESSOR(innerOption);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option1
#define APACHE_THRIFT_ACCESSOR_option1
APACHE_THRIFT_DEFINE_ACCESSOR(option1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option2
#define APACHE_THRIFT_ACCESSOR_option2
APACHE_THRIFT_DEFINE_ACCESSOR(option2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option3
#define APACHE_THRIFT_ACCESSOR_option3
APACHE_THRIFT_DEFINE_ACCESSOR(option3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_prepend
#define APACHE_THRIFT_ACCESSOR_prepend
APACHE_THRIFT_DEFINE_ACCESSOR(prepend);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_append
#define APACHE_THRIFT_ACCESSOR_append
APACHE_THRIFT_DEFINE_ACCESSOR(append);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_prepend
#define APACHE_THRIFT_ACCESSOR_prepend
APACHE_THRIFT_DEFINE_ACCESSOR(prepend);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_append
#define APACHE_THRIFT_ACCESSOR_append
APACHE_THRIFT_DEFINE_ACCESSOR(append);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structWithCustomDefault
#define APACHE_THRIFT_ACCESSOR_structWithCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(structWithCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32WithCustomDefault
#define APACHE_THRIFT_ACCESSOR_i32WithCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(i32WithCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapMap
#define APACHE_THRIFT_ACCESSOR_mapMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listMap
#define APACHE_THRIFT_ACCESSOR_listMap
APACHE_THRIFT_DEFINE_ACCESSOR(listMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optLateStructVal
#define APACHE_THRIFT_ACCESSOR_optLateStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optLateStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optEnumVal
#define APACHE_THRIFT_ACCESSOR_optEnumVal
APACHE_THRIFT_DEFINE_ACCESSOR(optEnumVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lateStructVal
#define APACHE_THRIFT_ACCESSOR_lateStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(lateStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionVal
#define APACHE_THRIFT_ACCESSOR_unionVal
APACHE_THRIFT_DEFINE_ACCESSOR(unionVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumVal
#define APACHE_THRIFT_ACCESSOR_enumVal
APACHE_THRIFT_DEFINE_ACCESSOR(enumVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structWithFieldCustomDefault
#define APACHE_THRIFT_ACCESSOR_structWithFieldCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(structWithFieldCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structWithCustomDefault
#define APACHE_THRIFT_ACCESSOR_structWithCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(structWithCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32WithCustomDefault
#define APACHE_THRIFT_ACCESSOR_i32WithCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(i32WithCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapMap
#define APACHE_THRIFT_ACCESSOR_mapMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listMap
#define APACHE_THRIFT_ACCESSOR_listMap
APACHE_THRIFT_DEFINE_ACCESSOR(listMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optLateStructVal
#define APACHE_THRIFT_ACCESSOR_optLateStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optLateStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optEnumVal
#define APACHE_THRIFT_ACCESSOR_optEnumVal
APACHE_THRIFT_DEFINE_ACCESSOR(optEnumVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lateStructVal
#define APACHE_THRIFT_ACCESSOR_lateStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(lateStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionVal
#define APACHE_THRIFT_ACCESSOR_unionVal
APACHE_THRIFT_DEFINE_ACCESSOR(unionVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumVal
#define APACHE_THRIFT_ACCESSOR_enumVal
APACHE_THRIFT_DEFINE_ACCESSOR(enumVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structWithFieldCustomDefault
#define APACHE_THRIFT_ACCESSOR_structWithFieldCustomDefault
APACHE_THRIFT_DEFINE_ACCESSOR(structWithFieldCustomDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nodes
#define APACHE_THRIFT_ACCESSOR_nodes
APACHE_THRIFT_DEFINE_ACCESSOR(nodes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nodes
#define APACHE_THRIFT_ACCESSOR_nodes
APACHE_THRIFT_DEFINE_ACCESSOR(nodes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_loop
#define APACHE_THRIFT_ACCESSOR_loop
APACHE_THRIFT_DEFINE_ACCESSOR(loop);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_loop
#define APACHE_THRIFT_ACCESSOR_loop
APACHE_THRIFT_DEFINE_ACCESSOR(loop);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace test { namespace fixtures { namespace patch {

enum class MyEnum {
  MyValue0 = 0,
};



}}} // test::fixtures::patch

namespace std {
template<> struct hash<::test::fixtures::patch::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::patch::MyEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::test::fixtures::patch::MyEnum>;

template <> struct TEnumTraits<::test::fixtures::patch::MyEnum> {
  using type = ::test::fixtures::patch::MyEnum;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue0; }
  static constexpr type max() { return type::MyValue0; }
};


}} // apache::thrift

namespace test { namespace fixtures { namespace patch {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
#endif
}}} // test::fixtures::patch

// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace patch {
class MyData;
class MyDataWithCustomDefault;
class InnerUnion;
class MyUnion;
class MyStruct;
class LateDefStruct;
class Recursive;
class Bar;
class Loop;
class MyDataPatchStruct;
class MyDataFieldPatchStruct;
class MyDataEnsureStruct;
class MyDataWithCustomDefaultPatchStruct;
class MyDataWithCustomDefaultFieldPatchStruct;
class MyDataWithCustomDefaultEnsureStruct;
class InnerUnionPatchStruct;
class InnerUnionFieldPatchStruct;
class MyUnionPatchStruct;
class MyUnionFieldPatchStruct;
class MyStructPatchStruct;
class MyStructField10PatchStruct;
class MyStructField23PatchStruct;
class MyStructField26PatchStruct;
class MyStructField27PatchStruct;
class MyStructField28PatchStruct;
class MyStructField29PatchStruct;
class MyStructField29Patch1Struct;
class MyStructField30PatchStruct;
class MyStructField30Patch1Struct;
class MyStructFieldPatchStruct;
class MyStructEnsureStruct;
class LateDefStructPatchStruct;
class LateDefStructFieldPatchStruct;
class LateDefStructEnsureStruct;
class RecursivePatchStruct;
class RecursiveField1PatchStruct;
class RecursiveFieldPatchStruct;
class RecursiveEnsureStruct;
class BarPatchStruct;
class BarFieldPatchStruct;
class BarEnsureStruct;
class LoopPatchStruct;
}}} // test::fixtures::patch
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace patch {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class MyData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = MyDataPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::data1,
    ::apache::thrift::ident::data2
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyData() :
      __fbthrift_field_data2() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg);

  MyData(MyData&&) noexcept;

  MyData(const MyData& src);


  MyData& operator=(MyData&&) noexcept;
  MyData& operator=(const MyData& src);
 private:
  ::std::string __fbthrift_field_data1;
 private:
  ::std::int32_t __fbthrift_field_data2;

 public:

  bool operator==(const MyData&) const;
  bool operator<(const MyData&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data1_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data1_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data1_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data1_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data1() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data1() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data1() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data1() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data2_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data2_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data2_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data2_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data2() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data2() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data2() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data2() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2)};
  }

  const ::std::string& get_data1() const& {
    return __fbthrift_field_data1;
  }

  ::std::string get_data1() && {
    return std::move(__fbthrift_field_data1);
  }

  template <typename T_MyData_data1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.data1_ref() = BAR;` instead of `FOO.set_data1(BAR);`")]]
  ::std::string& set_data1(T_MyData_data1_struct_setter&& data1_) {
    data1_ref() = std::forward<T_MyData_data1_struct_setter>(data1_);
    return __fbthrift_field_data1;
  }

  ::std::int32_t get_data2() const {
    return __fbthrift_field_data2;
  }

  [[deprecated("Use `FOO.data2_ref() = BAR;` instead of `FOO.set_data2(BAR);`")]]
  ::std::int32_t& set_data2(::std::int32_t data2_) {
    data2_ref() = data2_;
    return __fbthrift_field_data2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyData>;
  friend void swap(MyData& a, MyData& b);
};

template <class Protocol_>
unsigned long MyData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyDataWithCustomDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = MyDataWithCustomDefaultPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::data1,
    ::apache::thrift::ident::data2
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataWithCustomDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataWithCustomDefault() :
      __fbthrift_field_data1(apache::thrift::StringTraits<std::string>::fromStringLiteral("1")),
      __fbthrift_field_data2(static_cast<::std::int32_t>(2)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataWithCustomDefault(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg);

  MyDataWithCustomDefault(MyDataWithCustomDefault&&) noexcept;

  MyDataWithCustomDefault(const MyDataWithCustomDefault& src);


  MyDataWithCustomDefault& operator=(MyDataWithCustomDefault&&) noexcept;
  MyDataWithCustomDefault& operator=(const MyDataWithCustomDefault& src);
 private:
  ::std::string __fbthrift_field_data1;
 private:
  ::std::int32_t __fbthrift_field_data2;

 public:

  bool operator==(const MyDataWithCustomDefault&) const;
  bool operator<(const MyDataWithCustomDefault&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data1_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data1_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data1_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data1_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data1() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data1() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data1() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data1() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data2_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data2_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data2_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data2_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data2() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data2() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data2() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data2() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2)};
  }

  const ::std::string& get_data1() const& {
    return __fbthrift_field_data1;
  }

  ::std::string get_data1() && {
    return std::move(__fbthrift_field_data1);
  }

  template <typename T_MyDataWithCustomDefault_data1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.data1_ref() = BAR;` instead of `FOO.set_data1(BAR);`")]]
  ::std::string& set_data1(T_MyDataWithCustomDefault_data1_struct_setter&& data1_) {
    data1_ref() = std::forward<T_MyDataWithCustomDefault_data1_struct_setter>(data1_);
    return __fbthrift_field_data1;
  }

  ::std::int32_t get_data2() const {
    return __fbthrift_field_data2;
  }

  [[deprecated("Use `FOO.data2_ref() = BAR;` instead of `FOO.set_data2(BAR);`")]]
  ::std::int32_t& set_data2(::std::int32_t data2_) {
    data2_ref() = data2_;
    return __fbthrift_field_data2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataWithCustomDefault>;
  friend void swap(MyDataWithCustomDefault& a, MyDataWithCustomDefault& b);
};

template <class Protocol_>
unsigned long MyDataWithCustomDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class InnerUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = InnerUnionPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::innerOption
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::binary_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InnerUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    innerOption = 1,
  } ;

  InnerUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  InnerUnion(InnerUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::innerOption:
      {
        set_innerOption(std::move(rhs.value_.innerOption));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  InnerUnion(const InnerUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::innerOption:
      {
        set_innerOption(rhs.value_.innerOption);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  InnerUnion& operator=(InnerUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::innerOption:
      {
        set_innerOption(std::move(rhs.value_.innerOption));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  InnerUnion& operator=(const InnerUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::innerOption:
      {
        set_innerOption(rhs.value_.innerOption);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~InnerUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::std::string innerOption;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const InnerUnion&) const;
  bool operator<(const InnerUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_innerOption(::std::string const &t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::innerOption);
    ::new (std::addressof(value_.innerOption)) T(t);
    return value_.innerOption;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_innerOption(::std::string&& t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::innerOption);
    ::new (std::addressof(value_.innerOption)) T(std::move(t));
    return value_.innerOption;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_innerOption(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::innerOption);
    ::new (std::addressof(value_.innerOption)) ::std::string(std::forward<T>(t)...);
    return value_.innerOption;
  }

  ::std::string const& get_innerOption() const {
    if (getType() != Type::innerOption) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.innerOption;
  }

  ::std::string& mutable_innerOption() {
    assert(getType() == Type::innerOption);
    return value_.innerOption;
  }

  ::std::string move_innerOption() {
    assert(getType() == Type::innerOption);
    return std::move(value_.innerOption);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> innerOption_ref() const& {
    return {value_.innerOption, type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> innerOption_ref() const&& {
    return {std::move(value_.innerOption), type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> innerOption_ref() & {
    return {value_.innerOption, type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> innerOption_ref() && {
    return {std::move(value_.innerOption), type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InnerUnion>;
  friend void swap(InnerUnion& a, InnerUnion& b);
};

template <class Protocol_>
unsigned long InnerUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = MyUnionPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::option1,
    ::apache::thrift::ident::option2,
    ::apache::thrift::ident::option3
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    option1 = 1,
    option2 = 2,
    option3 = 3,
  } ;

  MyUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::option1:
      {
        set_option1(std::move(rhs.value_.option1));
        break;
      }
      case Type::option2:
      {
        set_option2(std::move(rhs.value_.option2));
        break;
      }
      case Type::option3:
      {
        set_option3(std::move(rhs.value_.option3));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::option1:
      {
        set_option1(rhs.value_.option1);
        break;
      }
      case Type::option2:
      {
        set_option2(rhs.value_.option2);
        break;
      }
      case Type::option3:
      {
        set_option3(rhs.value_.option3);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::option1:
      {
        set_option1(std::move(rhs.value_.option1));
        break;
      }
      case Type::option2:
      {
        set_option2(std::move(rhs.value_.option2));
        break;
      }
      case Type::option3:
      {
        set_option3(std::move(rhs.value_.option3));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::option1:
      {
        set_option1(rhs.value_.option1);
        break;
      }
      case Type::option2:
      {
        set_option2(rhs.value_.option2);
        break;
      }
      case Type::option3:
      {
        set_option3(rhs.value_.option3);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~MyUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::std::string option1;
    ::std::int32_t option2;
    ::test::fixtures::patch::InnerUnion option3;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_option1(::std::string const &t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option1);
    ::new (std::addressof(value_.option1)) T(t);
    return value_.option1;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_option1(::std::string&& t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option1);
    ::new (std::addressof(value_.option1)) T(std::move(t));
    return value_.option1;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_option1(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option1);
    ::new (std::addressof(value_.option1)) ::std::string(std::forward<T>(t)...);
    return value_.option1;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::int32_t& set_option2(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option2);
    ::new (std::addressof(value_.option2)) T(t);
    return value_.option2;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::patch::InnerUnion& set_option3(::test::fixtures::patch::InnerUnion const &t) {
    using T0 = ::test::fixtures::patch::InnerUnion;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option3);
    ::new (std::addressof(value_.option3)) T(t);
    return value_.option3;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::patch::InnerUnion& set_option3(::test::fixtures::patch::InnerUnion&& t) {
    using T0 = ::test::fixtures::patch::InnerUnion;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option3);
    ::new (std::addressof(value_.option3)) T(std::move(t));
    return value_.option3;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::patch::InnerUnion, T...>> ::test::fixtures::patch::InnerUnion& set_option3(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option3);
    ::new (std::addressof(value_.option3)) ::test::fixtures::patch::InnerUnion(std::forward<T>(t)...);
    return value_.option3;
  }

  ::std::string const& get_option1() const {
    if (getType() != Type::option1) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.option1;
  }

  ::std::int32_t const& get_option2() const {
    if (getType() != Type::option2) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.option2;
  }

  ::test::fixtures::patch::InnerUnion const& get_option3() const {
    if (getType() != Type::option3) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.option3;
  }

  ::std::string& mutable_option1() {
    assert(getType() == Type::option1);
    return value_.option1;
  }

  ::std::int32_t& mutable_option2() {
    assert(getType() == Type::option2);
    return value_.option2;
  }

  ::test::fixtures::patch::InnerUnion& mutable_option3() {
    assert(getType() == Type::option3);
    return value_.option3;
  }

  ::std::string move_option1() {
    assert(getType() == Type::option1);
    return std::move(value_.option1);
  }

  ::std::int32_t move_option2() {
    assert(getType() == Type::option2);
    return std::move(value_.option2);
  }

  ::test::fixtures::patch::InnerUnion move_option3() {
    assert(getType() == Type::option3);
    return std::move(value_.option3);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> option1_ref() const& {
    return {value_.option1, type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> option1_ref() const&& {
    return {std::move(value_.option1), type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> option1_ref() & {
    return {value_.option1, type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> option1_ref() && {
    return {std::move(value_.option1), type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> option2_ref() const& {
    return {value_.option2, type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> option2_ref() const&& {
    return {std::move(value_.option2), type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> option2_ref() & {
    return {value_.option2, type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> option2_ref() && {
    return {std::move(value_.option2), type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> option3_ref() const& {
    return {value_.option3, type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> option3_ref() const&& {
    return {std::move(value_.option3), type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> option3_ref() & {
    return {value_.option3, type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> option3_ref() && {
    return {std::move(value_.option3), type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class LateDefStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = LateDefStructPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LateDefStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LateDefStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LateDefStruct(apache::thrift::FragileConstructor);

  LateDefStruct(LateDefStruct&&) = default;

  LateDefStruct(const LateDefStruct&) = default;


  LateDefStruct& operator=(LateDefStruct&&) = default;

  LateDefStruct& operator=(const LateDefStruct&) = default;

 public:

  bool operator==(const LateDefStruct&) const;
  bool operator<(const LateDefStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LateDefStruct>;
  friend void swap(LateDefStruct& a, LateDefStruct& b);
};

template <class Protocol_>
unsigned long LateDefStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = MyStructPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::boolVal,
    ::apache::thrift::ident::byteVal,
    ::apache::thrift::ident::i16Val,
    ::apache::thrift::ident::i32Val,
    ::apache::thrift::ident::i64Val,
    ::apache::thrift::ident::floatVal,
    ::apache::thrift::ident::doubleVal,
    ::apache::thrift::ident::stringVal,
    ::apache::thrift::ident::binaryVal,
    ::apache::thrift::ident::enumVal,
    ::apache::thrift::ident::structVal,
    ::apache::thrift::ident::unionVal,
    ::apache::thrift::ident::lateStructVal,
    ::apache::thrift::ident::optBoolVal,
    ::apache::thrift::ident::optByteVal,
    ::apache::thrift::ident::optI16Val,
    ::apache::thrift::ident::optI32Val,
    ::apache::thrift::ident::optI64Val,
    ::apache::thrift::ident::optFloatVal,
    ::apache::thrift::ident::optDoubleVal,
    ::apache::thrift::ident::optStringVal,
    ::apache::thrift::ident::optBinaryVal,
    ::apache::thrift::ident::optEnumVal,
    ::apache::thrift::ident::optStructVal,
    ::apache::thrift::ident::optLateStructVal,
    ::apache::thrift::ident::optListVal,
    ::apache::thrift::ident::optSetVal,
    ::apache::thrift::ident::optMapVal,
    ::apache::thrift::ident::listMap,
    ::apache::thrift::ident::mapMap,
    ::apache::thrift::ident::i32WithCustomDefault,
    ::apache::thrift::ident::structWithCustomDefault,
    ::apache::thrift::ident::structWithFieldCustomDefault
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
    ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefault>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 33;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, folly::IOBuf binaryVal__arg, ::test::fixtures::patch::MyEnum enumVal__arg, ::test::fixtures::patch::MyData structVal__arg, ::test::fixtures::patch::MyUnion unionVal__arg, ::test::fixtures::patch::LateDefStruct lateStructVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, folly::IOBuf optBinaryVal__arg, ::test::fixtures::patch::MyEnum optEnumVal__arg, ::test::fixtures::patch::MyData optStructVal__arg, ::test::fixtures::patch::LateDefStruct optLateStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> listMap__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> mapMap__arg, ::std::int32_t i32WithCustomDefault__arg, ::test::fixtures::patch::MyDataWithCustomDefault structWithCustomDefault__arg, ::test::fixtures::patch::MyData structWithFieldCustomDefault__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  bool __fbthrift_field_boolVal;
 private:
  ::std::int8_t __fbthrift_field_byteVal;
 private:
  ::std::int16_t __fbthrift_field_i16Val;
 private:
  ::std::int32_t __fbthrift_field_i32Val;
 private:
  ::std::int64_t __fbthrift_field_i64Val;
 private:
  float __fbthrift_field_floatVal;
 private:
  double __fbthrift_field_doubleVal;
 private:
  ::std::string __fbthrift_field_stringVal;
 private:
  folly::IOBuf __fbthrift_field_binaryVal;
 private:
  ::test::fixtures::patch::MyEnum __fbthrift_field_enumVal;
 private:
  ::test::fixtures::patch::MyData __fbthrift_field_structVal;
 private:
  ::test::fixtures::patch::MyUnion __fbthrift_field_unionVal;
 private:
  ::test::fixtures::patch::LateDefStruct __fbthrift_field_lateStructVal;
 private:
  bool __fbthrift_field_optBoolVal;
 private:
  ::std::int8_t __fbthrift_field_optByteVal;
 private:
  ::std::int16_t __fbthrift_field_optI16Val;
 private:
  ::std::int32_t __fbthrift_field_optI32Val;
 private:
  ::std::int64_t __fbthrift_field_optI64Val;
 private:
  float __fbthrift_field_optFloatVal;
 private:
  double __fbthrift_field_optDoubleVal;
 private:
  ::std::string __fbthrift_field_optStringVal;
 private:
  folly::IOBuf __fbthrift_field_optBinaryVal;
 private:
  ::test::fixtures::patch::MyEnum __fbthrift_field_optEnumVal;
 private:
  ::test::fixtures::patch::MyData __fbthrift_field_optStructVal;
 private:
  ::test::fixtures::patch::LateDefStruct __fbthrift_field_optLateStructVal;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_optListVal;
 private:
  ::std::set<::std::string> __fbthrift_field_optSetVal;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_optMapVal;
 private:
  ::std::vector<::std::map<::std::string, ::std::int32_t>> __fbthrift_field_listMap;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> __fbthrift_field_mapMap;
 private:
  ::std::int32_t __fbthrift_field_i32WithCustomDefault;
 private:
  ::test::fixtures::patch::MyDataWithCustomDefault __fbthrift_field_structWithCustomDefault;
 private:
  ::test::fixtures::patch::MyData __fbthrift_field_structWithFieldCustomDefault;
 private:
  apache::thrift::detail::isset_bitset<15, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> boolVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> boolVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> boolVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> boolVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> boolVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> boolVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> boolVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> boolVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byteVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byteVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byteVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byteVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byteVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byteVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byteVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byteVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i16Val_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i16Val_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i16Val_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i16Val_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i16Val() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i16Val() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i16Val() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i16Val() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i32Val_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i32Val_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i32Val_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i32Val_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i32Val() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i32Val() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i32Val() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i32Val() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i64Val_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i64Val_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i64Val_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i64Val_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i64Val() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i64Val() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i64Val() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i64Val() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> floatVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> floatVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> floatVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> floatVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> floatVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> floatVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> floatVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> floatVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> doubleVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> doubleVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> doubleVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> doubleVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> doubleVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> doubleVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> doubleVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> doubleVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> stringVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> stringVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> stringVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> stringVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> stringVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> stringVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> stringVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> stringVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binaryVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binaryVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binaryVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binaryVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binaryVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binaryVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binaryVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binaryVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> enumVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_enumVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> enumVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enumVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> enumVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_enumVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> enumVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enumVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> enumVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_enumVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> enumVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enumVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> enumVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_enumVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> enumVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enumVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> unionVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> unionVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> unionVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> unionVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> unionVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> unionVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> unionVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> unionVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> lateStructVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> lateStructVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> lateStructVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> lateStructVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> lateStructVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> lateStructVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> lateStructVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> lateStructVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optEnumVal_ref() const& {
    return {this->__fbthrift_field_optEnumVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optEnumVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optEnumVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optEnumVal_ref() & {
    return {this->__fbthrift_field_optEnumVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optEnumVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optEnumVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optEnumVal() const& {
    return {this->__fbthrift_field_optEnumVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optEnumVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optEnumVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optEnumVal() & {
    return {this->__fbthrift_field_optEnumVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optEnumVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optEnumVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStructVal_ref() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStructVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStructVal_ref() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStructVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStructVal() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStructVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStructVal() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStructVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optLateStructVal_ref() const& {
    return {this->__fbthrift_field_optLateStructVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optLateStructVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optLateStructVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optLateStructVal_ref() & {
    return {this->__fbthrift_field_optLateStructVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optLateStructVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optLateStructVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optLateStructVal() const& {
    return {this->__fbthrift_field_optLateStructVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optLateStructVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optLateStructVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optLateStructVal() & {
    return {this->__fbthrift_field_optLateStructVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optLateStructVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optLateStructVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal_ref() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal_ref() & {
    return {this->__fbthrift_field_optListVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal() & {
    return {this->__fbthrift_field_optListVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal_ref() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal_ref() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal_ref() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal_ref() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> listMap_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_listMap};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> listMap_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_listMap)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> listMap_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_listMap};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> listMap_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_listMap)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> listMap() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_listMap};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> listMap() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_listMap)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> listMap() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_listMap};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> listMap() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_listMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> mapMap_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_mapMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> mapMap_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_mapMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> mapMap_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_mapMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> mapMap_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_mapMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> mapMap() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_mapMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> mapMap() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_mapMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> mapMap() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_mapMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> mapMap() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_mapMap)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i32WithCustomDefault_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i32WithCustomDefault};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i32WithCustomDefault_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32WithCustomDefault)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i32WithCustomDefault_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i32WithCustomDefault};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i32WithCustomDefault_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32WithCustomDefault)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i32WithCustomDefault() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i32WithCustomDefault};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i32WithCustomDefault() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32WithCustomDefault)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i32WithCustomDefault() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i32WithCustomDefault};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i32WithCustomDefault() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32WithCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structWithCustomDefault_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structWithCustomDefault_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structWithCustomDefault_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structWithCustomDefault_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structWithCustomDefault() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structWithCustomDefault() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structWithCustomDefault() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structWithCustomDefault() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structWithFieldCustomDefault_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structWithFieldCustomDefault_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structWithFieldCustomDefault_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structWithFieldCustomDefault_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structWithFieldCustomDefault() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structWithFieldCustomDefault() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structWithFieldCustomDefault() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structWithFieldCustomDefault() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  bool get_boolVal() const {
    return __fbthrift_field_boolVal;
  }

  [[deprecated("Use `FOO.boolVal_ref() = BAR;` instead of `FOO.set_boolVal(BAR);`")]]
  bool& set_boolVal(bool boolVal_) {
    boolVal_ref() = boolVal_;
    return __fbthrift_field_boolVal;
  }

  ::std::int8_t get_byteVal() const {
    return __fbthrift_field_byteVal;
  }

  [[deprecated("Use `FOO.byteVal_ref() = BAR;` instead of `FOO.set_byteVal(BAR);`")]]
  ::std::int8_t& set_byteVal(::std::int8_t byteVal_) {
    byteVal_ref() = byteVal_;
    return __fbthrift_field_byteVal;
  }

  ::std::int16_t get_i16Val() const {
    return __fbthrift_field_i16Val;
  }

  [[deprecated("Use `FOO.i16Val_ref() = BAR;` instead of `FOO.set_i16Val(BAR);`")]]
  ::std::int16_t& set_i16Val(::std::int16_t i16Val_) {
    i16Val_ref() = i16Val_;
    return __fbthrift_field_i16Val;
  }

  ::std::int32_t get_i32Val() const {
    return __fbthrift_field_i32Val;
  }

  [[deprecated("Use `FOO.i32Val_ref() = BAR;` instead of `FOO.set_i32Val(BAR);`")]]
  ::std::int32_t& set_i32Val(::std::int32_t i32Val_) {
    i32Val_ref() = i32Val_;
    return __fbthrift_field_i32Val;
  }

  ::std::int64_t get_i64Val() const {
    return __fbthrift_field_i64Val;
  }

  [[deprecated("Use `FOO.i64Val_ref() = BAR;` instead of `FOO.set_i64Val(BAR);`")]]
  ::std::int64_t& set_i64Val(::std::int64_t i64Val_) {
    i64Val_ref() = i64Val_;
    return __fbthrift_field_i64Val;
  }

  float get_floatVal() const {
    return __fbthrift_field_floatVal;
  }

  [[deprecated("Use `FOO.floatVal_ref() = BAR;` instead of `FOO.set_floatVal(BAR);`")]]
  float& set_floatVal(float floatVal_) {
    floatVal_ref() = floatVal_;
    return __fbthrift_field_floatVal;
  }

  double get_doubleVal() const {
    return __fbthrift_field_doubleVal;
  }

  [[deprecated("Use `FOO.doubleVal_ref() = BAR;` instead of `FOO.set_doubleVal(BAR);`")]]
  double& set_doubleVal(double doubleVal_) {
    doubleVal_ref() = doubleVal_;
    return __fbthrift_field_doubleVal;
  }

  const ::std::string& get_stringVal() const& {
    return __fbthrift_field_stringVal;
  }

  ::std::string get_stringVal() && {
    return std::move(__fbthrift_field_stringVal);
  }

  template <typename T_MyStruct_stringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringVal_ref() = BAR;` instead of `FOO.set_stringVal(BAR);`")]]
  ::std::string& set_stringVal(T_MyStruct_stringVal_struct_setter&& stringVal_) {
    stringVal_ref() = std::forward<T_MyStruct_stringVal_struct_setter>(stringVal_);
    return __fbthrift_field_stringVal;
  }

  const folly::IOBuf& get_binaryVal() const& {
    return __fbthrift_field_binaryVal;
  }

  folly::IOBuf get_binaryVal() && {
    return std::move(__fbthrift_field_binaryVal);
  }

  template <typename T_MyStruct_binaryVal_struct_setter = folly::IOBuf>
  [[deprecated("Use `FOO.binaryVal_ref() = BAR;` instead of `FOO.set_binaryVal(BAR);`")]]
  folly::IOBuf& set_binaryVal(T_MyStruct_binaryVal_struct_setter&& binaryVal_) {
    binaryVal_ref() = std::forward<T_MyStruct_binaryVal_struct_setter>(binaryVal_);
    return __fbthrift_field_binaryVal;
  }

  ::test::fixtures::patch::MyEnum get_enumVal() const {
    return __fbthrift_field_enumVal;
  }

  [[deprecated("Use `FOO.enumVal_ref() = BAR;` instead of `FOO.set_enumVal(BAR);`")]]
  ::test::fixtures::patch::MyEnum& set_enumVal(::test::fixtures::patch::MyEnum enumVal_) {
    enumVal_ref() = enumVal_;
    return __fbthrift_field_enumVal;
  }
  const ::test::fixtures::patch::MyData& get_structVal() const&;
  ::test::fixtures::patch::MyData get_structVal() &&;

  template <typename T_MyStruct_structVal_struct_setter = ::test::fixtures::patch::MyData>
  [[deprecated("Use `FOO.structVal_ref() = BAR;` instead of `FOO.set_structVal(BAR);`")]]
  ::test::fixtures::patch::MyData& set_structVal(T_MyStruct_structVal_struct_setter&& structVal_) {
    structVal_ref() = std::forward<T_MyStruct_structVal_struct_setter>(structVal_);
    return __fbthrift_field_structVal;
  }
  const ::test::fixtures::patch::MyUnion& get_unionVal() const&;
  ::test::fixtures::patch::MyUnion get_unionVal() &&;

  template <typename T_MyStruct_unionVal_struct_setter = ::test::fixtures::patch::MyUnion>
  [[deprecated("Use `FOO.unionVal_ref() = BAR;` instead of `FOO.set_unionVal(BAR);`")]]
  ::test::fixtures::patch::MyUnion& set_unionVal(T_MyStruct_unionVal_struct_setter&& unionVal_) {
    unionVal_ref() = std::forward<T_MyStruct_unionVal_struct_setter>(unionVal_);
    return __fbthrift_field_unionVal;
  }
  const ::test::fixtures::patch::LateDefStruct& get_lateStructVal() const&;
  ::test::fixtures::patch::LateDefStruct get_lateStructVal() &&;

  template <typename T_MyStruct_lateStructVal_struct_setter = ::test::fixtures::patch::LateDefStruct>
  [[deprecated("Use `FOO.lateStructVal_ref() = BAR;` instead of `FOO.set_lateStructVal(BAR);`")]]
  ::test::fixtures::patch::LateDefStruct& set_lateStructVal(T_MyStruct_lateStructVal_struct_setter&& lateStructVal_) {
    lateStructVal_ref() = std::forward<T_MyStruct_lateStructVal_struct_setter>(lateStructVal_);
    return __fbthrift_field_lateStructVal;
  }

  const bool* get_optBoolVal() const& {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }

  bool* get_optBoolVal() & {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }
  bool* get_optBoolVal() && = delete;

  [[deprecated("Use `FOO.optBoolVal_ref() = BAR;` instead of `FOO.set_optBoolVal(BAR);`")]]
  bool& set_optBoolVal(bool optBoolVal_) {
    optBoolVal_ref() = optBoolVal_;
    return __fbthrift_field_optBoolVal;
  }

  const ::std::int8_t* get_optByteVal() const& {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }

  ::std::int8_t* get_optByteVal() & {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }
  ::std::int8_t* get_optByteVal() && = delete;

  [[deprecated("Use `FOO.optByteVal_ref() = BAR;` instead of `FOO.set_optByteVal(BAR);`")]]
  ::std::int8_t& set_optByteVal(::std::int8_t optByteVal_) {
    optByteVal_ref() = optByteVal_;
    return __fbthrift_field_optByteVal;
  }

  const ::std::int16_t* get_optI16Val() const& {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }

  ::std::int16_t* get_optI16Val() & {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }
  ::std::int16_t* get_optI16Val() && = delete;

  [[deprecated("Use `FOO.optI16Val_ref() = BAR;` instead of `FOO.set_optI16Val(BAR);`")]]
  ::std::int16_t& set_optI16Val(::std::int16_t optI16Val_) {
    optI16Val_ref() = optI16Val_;
    return __fbthrift_field_optI16Val;
  }

  const ::std::int32_t* get_optI32Val() const& {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }

  ::std::int32_t* get_optI32Val() & {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }
  ::std::int32_t* get_optI32Val() && = delete;

  [[deprecated("Use `FOO.optI32Val_ref() = BAR;` instead of `FOO.set_optI32Val(BAR);`")]]
  ::std::int32_t& set_optI32Val(::std::int32_t optI32Val_) {
    optI32Val_ref() = optI32Val_;
    return __fbthrift_field_optI32Val;
  }

  const ::std::int64_t* get_optI64Val() const& {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }

  ::std::int64_t* get_optI64Val() & {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }
  ::std::int64_t* get_optI64Val() && = delete;

  [[deprecated("Use `FOO.optI64Val_ref() = BAR;` instead of `FOO.set_optI64Val(BAR);`")]]
  ::std::int64_t& set_optI64Val(::std::int64_t optI64Val_) {
    optI64Val_ref() = optI64Val_;
    return __fbthrift_field_optI64Val;
  }

  const float* get_optFloatVal() const& {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }

  float* get_optFloatVal() & {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }
  float* get_optFloatVal() && = delete;

  [[deprecated("Use `FOO.optFloatVal_ref() = BAR;` instead of `FOO.set_optFloatVal(BAR);`")]]
  float& set_optFloatVal(float optFloatVal_) {
    optFloatVal_ref() = optFloatVal_;
    return __fbthrift_field_optFloatVal;
  }

  const double* get_optDoubleVal() const& {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }

  double* get_optDoubleVal() & {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }
  double* get_optDoubleVal() && = delete;

  [[deprecated("Use `FOO.optDoubleVal_ref() = BAR;` instead of `FOO.set_optDoubleVal(BAR);`")]]
  double& set_optDoubleVal(double optDoubleVal_) {
    optDoubleVal_ref() = optDoubleVal_;
    return __fbthrift_field_optDoubleVal;
  }

  const ::std::string* get_optStringVal() const& {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }

  ::std::string* get_optStringVal() & {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }
  ::std::string* get_optStringVal() && = delete;

  template <typename T_MyStruct_optStringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.optStringVal_ref() = BAR;` instead of `FOO.set_optStringVal(BAR);`")]]
  ::std::string& set_optStringVal(T_MyStruct_optStringVal_struct_setter&& optStringVal_) {
    optStringVal_ref() = std::forward<T_MyStruct_optStringVal_struct_setter>(optStringVal_);
    return __fbthrift_field_optStringVal;
  }

  const folly::IOBuf* get_optBinaryVal() const& {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }

  folly::IOBuf* get_optBinaryVal() & {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }
  folly::IOBuf* get_optBinaryVal() && = delete;

  template <typename T_MyStruct_optBinaryVal_struct_setter = folly::IOBuf>
  [[deprecated("Use `FOO.optBinaryVal_ref() = BAR;` instead of `FOO.set_optBinaryVal(BAR);`")]]
  folly::IOBuf& set_optBinaryVal(T_MyStruct_optBinaryVal_struct_setter&& optBinaryVal_) {
    optBinaryVal_ref() = std::forward<T_MyStruct_optBinaryVal_struct_setter>(optBinaryVal_);
    return __fbthrift_field_optBinaryVal;
  }

  const ::test::fixtures::patch::MyEnum* get_optEnumVal() const& {
    return optEnumVal_ref() ? std::addressof(__fbthrift_field_optEnumVal) : nullptr;
  }

  ::test::fixtures::patch::MyEnum* get_optEnumVal() & {
    return optEnumVal_ref() ? std::addressof(__fbthrift_field_optEnumVal) : nullptr;
  }
  ::test::fixtures::patch::MyEnum* get_optEnumVal() && = delete;

  [[deprecated("Use `FOO.optEnumVal_ref() = BAR;` instead of `FOO.set_optEnumVal(BAR);`")]]
  ::test::fixtures::patch::MyEnum& set_optEnumVal(::test::fixtures::patch::MyEnum optEnumVal_) {
    optEnumVal_ref() = optEnumVal_;
    return __fbthrift_field_optEnumVal;
  }
  const ::test::fixtures::patch::MyData* get_optStructVal() const&;
  ::test::fixtures::patch::MyData* get_optStructVal() &;
  ::test::fixtures::patch::MyData* get_optStructVal() && = delete;

  template <typename T_MyStruct_optStructVal_struct_setter = ::test::fixtures::patch::MyData>
  [[deprecated("Use `FOO.optStructVal_ref() = BAR;` instead of `FOO.set_optStructVal(BAR);`")]]
  ::test::fixtures::patch::MyData& set_optStructVal(T_MyStruct_optStructVal_struct_setter&& optStructVal_) {
    optStructVal_ref() = std::forward<T_MyStruct_optStructVal_struct_setter>(optStructVal_);
    return __fbthrift_field_optStructVal;
  }
  const ::test::fixtures::patch::LateDefStruct* get_optLateStructVal() const&;
  ::test::fixtures::patch::LateDefStruct* get_optLateStructVal() &;
  ::test::fixtures::patch::LateDefStruct* get_optLateStructVal() && = delete;

  template <typename T_MyStruct_optLateStructVal_struct_setter = ::test::fixtures::patch::LateDefStruct>
  [[deprecated("Use `FOO.optLateStructVal_ref() = BAR;` instead of `FOO.set_optLateStructVal(BAR);`")]]
  ::test::fixtures::patch::LateDefStruct& set_optLateStructVal(T_MyStruct_optLateStructVal_struct_setter&& optLateStructVal_) {
    optLateStructVal_ref() = std::forward<T_MyStruct_optLateStructVal_struct_setter>(optLateStructVal_);
    return __fbthrift_field_optLateStructVal;
  }
  const ::std::vector<::std::int16_t>* get_optListVal() const&;
  ::std::vector<::std::int16_t>* get_optListVal() &;
  ::std::vector<::std::int16_t>* get_optListVal() && = delete;

  template <typename T_MyStruct_optListVal_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.optListVal_ref() = BAR;` instead of `FOO.set_optListVal(BAR);`")]]
  ::std::vector<::std::int16_t>& set_optListVal(T_MyStruct_optListVal_struct_setter&& optListVal_) {
    optListVal_ref() = std::forward<T_MyStruct_optListVal_struct_setter>(optListVal_);
    return __fbthrift_field_optListVal;
  }
  const ::std::set<::std::string>* get_optSetVal() const&;
  ::std::set<::std::string>* get_optSetVal() &;
  ::std::set<::std::string>* get_optSetVal() && = delete;

  template <typename T_MyStruct_optSetVal_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.optSetVal_ref() = BAR;` instead of `FOO.set_optSetVal(BAR);`")]]
  ::std::set<::std::string>& set_optSetVal(T_MyStruct_optSetVal_struct_setter&& optSetVal_) {
    optSetVal_ref() = std::forward<T_MyStruct_optSetVal_struct_setter>(optSetVal_);
    return __fbthrift_field_optSetVal;
  }
  const ::std::map<::std::string, ::std::string>* get_optMapVal() const&;
  ::std::map<::std::string, ::std::string>* get_optMapVal() &;
  ::std::map<::std::string, ::std::string>* get_optMapVal() && = delete;

  template <typename T_MyStruct_optMapVal_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.optMapVal_ref() = BAR;` instead of `FOO.set_optMapVal(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_optMapVal(T_MyStruct_optMapVal_struct_setter&& optMapVal_) {
    optMapVal_ref() = std::forward<T_MyStruct_optMapVal_struct_setter>(optMapVal_);
    return __fbthrift_field_optMapVal;
  }
  const ::std::vector<::std::map<::std::string, ::std::int32_t>>& get_listMap() const&;
  ::std::vector<::std::map<::std::string, ::std::int32_t>> get_listMap() &&;

  template <typename T_MyStruct_listMap_struct_setter = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.listMap_ref() = BAR;` instead of `FOO.set_listMap(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::int32_t>>& set_listMap(T_MyStruct_listMap_struct_setter&& listMap_) {
    listMap_ref() = std::forward<T_MyStruct_listMap_struct_setter>(listMap_);
    return __fbthrift_field_listMap;
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& get_mapMap() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> get_mapMap() &&;

  template <typename T_MyStruct_mapMap_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.mapMap_ref() = BAR;` instead of `FOO.set_mapMap(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& set_mapMap(T_MyStruct_mapMap_struct_setter&& mapMap_) {
    mapMap_ref() = std::forward<T_MyStruct_mapMap_struct_setter>(mapMap_);
    return __fbthrift_field_mapMap;
  }

  ::std::int32_t get_i32WithCustomDefault() const {
    return __fbthrift_field_i32WithCustomDefault;
  }

  [[deprecated("Use `FOO.i32WithCustomDefault_ref() = BAR;` instead of `FOO.set_i32WithCustomDefault(BAR);`")]]
  ::std::int32_t& set_i32WithCustomDefault(::std::int32_t i32WithCustomDefault_) {
    i32WithCustomDefault_ref() = i32WithCustomDefault_;
    return __fbthrift_field_i32WithCustomDefault;
  }
  const ::test::fixtures::patch::MyDataWithCustomDefault& get_structWithCustomDefault() const&;
  ::test::fixtures::patch::MyDataWithCustomDefault get_structWithCustomDefault() &&;

  template <typename T_MyStruct_structWithCustomDefault_struct_setter = ::test::fixtures::patch::MyDataWithCustomDefault>
  [[deprecated("Use `FOO.structWithCustomDefault_ref() = BAR;` instead of `FOO.set_structWithCustomDefault(BAR);`")]]
  ::test::fixtures::patch::MyDataWithCustomDefault& set_structWithCustomDefault(T_MyStruct_structWithCustomDefault_struct_setter&& structWithCustomDefault_) {
    structWithCustomDefault_ref() = std::forward<T_MyStruct_structWithCustomDefault_struct_setter>(structWithCustomDefault_);
    return __fbthrift_field_structWithCustomDefault;
  }
  const ::test::fixtures::patch::MyData& get_structWithFieldCustomDefault() const&;
  ::test::fixtures::patch::MyData get_structWithFieldCustomDefault() &&;

  template <typename T_MyStruct_structWithFieldCustomDefault_struct_setter = ::test::fixtures::patch::MyData>
  [[deprecated("Use `FOO.structWithFieldCustomDefault_ref() = BAR;` instead of `FOO.set_structWithFieldCustomDefault(BAR);`")]]
  ::test::fixtures::patch::MyData& set_structWithFieldCustomDefault(T_MyStruct_structWithFieldCustomDefault_struct_setter&& structWithFieldCustomDefault_) {
    structWithFieldCustomDefault_ref() = std::forward<T_MyStruct_structWithFieldCustomDefault_struct_setter>(structWithFieldCustomDefault_);
    return __fbthrift_field_structWithFieldCustomDefault;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Recursive final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = RecursivePatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::nodes
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::test::fixtures::patch::Recursive>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Recursive;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Recursive() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Recursive(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> nodes__arg);

  Recursive(Recursive&&) noexcept;

  Recursive(const Recursive& src);


  Recursive& operator=(Recursive&&) noexcept;
  Recursive& operator=(const Recursive& src);
 private:
  ::std::map<::std::string, ::test::fixtures::patch::Recursive> __fbthrift_field_nodes;

 public:

  bool operator==(const Recursive&) const;
  bool operator<(const Recursive&) const;

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> nodes_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_nodes};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> nodes_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_nodes)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> nodes_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_nodes};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> nodes_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_nodes)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> nodes() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_nodes};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> nodes() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_nodes)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> nodes() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_nodes};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> nodes() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_nodes)};
  }
  const ::std::map<::std::string, ::test::fixtures::patch::Recursive>& get_nodes() const&;
  ::std::map<::std::string, ::test::fixtures::patch::Recursive> get_nodes() &&;

  template <typename T_Recursive_nodes_struct_setter = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  [[deprecated("Use `FOO.nodes_ref() = BAR;` instead of `FOO.set_nodes(BAR);`")]]
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>& set_nodes(T_Recursive_nodes_struct_setter&& nodes_) {
    nodes_ref() = std::forward<T_Recursive_nodes_struct_setter>(nodes_);
    return __fbthrift_field_nodes;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Recursive>;
  friend void swap(Recursive& a, Recursive& b);
};

template <class Protocol_>
unsigned long Recursive::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Bar final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = BarPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::loop
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::Loop>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Bar;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Bar() :
      __fbthrift_field_loop(std::make_unique<::test::fixtures::patch::Loop>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Bar(apache::thrift::FragileConstructor, ::std::unique_ptr<::test::fixtures::patch::Loop> loop__arg);

  Bar(Bar&&) noexcept;
  Bar(const Bar& src);


  Bar& operator=(Bar&&) noexcept;
  Bar& operator=(const Bar& src);
 private:
  ::std::unique_ptr<::test::fixtures::patch::Loop> __fbthrift_field_loop;

 public:

  bool operator==(const Bar&) const;
  bool operator<(const Bar&) const;
  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE T& loop_ref() & {
    return __fbthrift_field_loop;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE const T& loop_ref() const& {
    return __fbthrift_field_loop;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE T&& loop_ref() && {
    return static_cast<T&&>(__fbthrift_field_loop);
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE const T&& loop_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_loop);
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE T& loop() & {
    return __fbthrift_field_loop;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE const T& loop() const& {
    return __fbthrift_field_loop;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE T&& loop() && {
    return static_cast<T&&>(__fbthrift_field_loop);
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE const T&& loop() const&& {
    return static_cast<const T&&>(__fbthrift_field_loop);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Bar>;
  friend void swap(Bar& a, Bar& b);
};

template <class Protocol_>
unsigned long Bar::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Loop final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = LoopPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::bar
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::Bar>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Loop;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Loop() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Loop(apache::thrift::FragileConstructor, ::test::fixtures::patch::Bar bar__arg);

  Loop(Loop&&) noexcept;

  Loop(const Loop& src);


  Loop& operator=(Loop&&) noexcept;
  Loop& operator=(const Loop& src);
 private:
  ::test::fixtures::patch::Bar __fbthrift_field_bar;

 public:

  bool operator==(const Loop&) const;
  bool operator<(const Loop&) const;

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> bar_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_bar};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> bar_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bar)};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> bar_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_bar};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> bar_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bar)};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> bar() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_bar};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> bar() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bar)};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> bar() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_bar};
  }

  template <typename..., typename T = ::test::fixtures::patch::Bar>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> bar() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bar)};
  }
  const ::test::fixtures::patch::Bar& get_bar() const&;
  ::test::fixtures::patch::Bar get_bar() &&;

  template <typename T_Loop_bar_struct_setter = ::test::fixtures::patch::Bar>
  [[deprecated("Use `FOO.bar_ref() = BAR;` instead of `FOO.set_bar(BAR);`")]]
  ::test::fixtures::patch::Bar& set_bar(T_Loop_bar_struct_setter&& bar_) {
    bar_ref() = std::forward<T_Loop_bar_struct_setter>(bar_);
    return __fbthrift_field_bar;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Loop>;
  friend void swap(Loop& a, Loop& b);
};

template <class Protocol_>
unsigned long Loop::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyDataFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::data1,
    ::apache::thrift::ident::data2
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataFieldPatchStruct() :
      __fbthrift_field_data1(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_data2(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> data1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> data2__arg);

  MyDataFieldPatchStruct(MyDataFieldPatchStruct&&) noexcept;
  MyDataFieldPatchStruct(const MyDataFieldPatchStruct& src);


  MyDataFieldPatchStruct& operator=(MyDataFieldPatchStruct&&) noexcept;
  MyDataFieldPatchStruct& operator=(const MyDataFieldPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_data1;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> __fbthrift_field_data2;

 public:

  bool operator==(const MyDataFieldPatchStruct&) const;
  bool operator<(const MyDataFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data1_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data1_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data1_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data1_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data1() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data1() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data1() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data1() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data2_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data2_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data2_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data2_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data2() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data2() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data2() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data2() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataFieldPatchStruct>;
  friend void swap(MyDataFieldPatchStruct& a, MyDataFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, ::test::fixtures::patch::MyDataFieldPatchStruct>;


class MyDataEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::data1,
    ::apache::thrift::ident::data2
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataEnsureStruct() :
      __fbthrift_field_data2() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataEnsureStruct(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg);

  MyDataEnsureStruct(MyDataEnsureStruct&&) noexcept;

  MyDataEnsureStruct(const MyDataEnsureStruct& src);


  MyDataEnsureStruct& operator=(MyDataEnsureStruct&&) noexcept;
  MyDataEnsureStruct& operator=(const MyDataEnsureStruct& src);
 private:
  ::std::string __fbthrift_field_data1;
 private:
  ::std::int32_t __fbthrift_field_data2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataEnsureStruct&) const;
  bool operator<(const MyDataEnsureStruct&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data1_ref() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data1_ref() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data1() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data1() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data1() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data2_ref() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data2_ref() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data2() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data2() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data2() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string* get_data1() const& {
    return data1_ref() ? std::addressof(__fbthrift_field_data1) : nullptr;
  }

  ::std::string* get_data1() & {
    return data1_ref() ? std::addressof(__fbthrift_field_data1) : nullptr;
  }
  ::std::string* get_data1() && = delete;

  template <typename T_MyDataEnsureStruct_data1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.data1_ref() = BAR;` instead of `FOO.set_data1(BAR);`")]]
  ::std::string& set_data1(T_MyDataEnsureStruct_data1_struct_setter&& data1_) {
    data1_ref() = std::forward<T_MyDataEnsureStruct_data1_struct_setter>(data1_);
    return __fbthrift_field_data1;
  }

  const ::std::int32_t* get_data2() const& {
    return data2_ref() ? std::addressof(__fbthrift_field_data2) : nullptr;
  }

  ::std::int32_t* get_data2() & {
    return data2_ref() ? std::addressof(__fbthrift_field_data2) : nullptr;
  }
  ::std::int32_t* get_data2() && = delete;

  [[deprecated("Use `FOO.data2_ref() = BAR;` instead of `FOO.set_data2(BAR);`")]]
  ::std::int32_t& set_data2(::std::int32_t data2_) {
    data2_ref() = data2_;
    return __fbthrift_field_data2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataEnsureStruct>;
  friend void swap(MyDataEnsureStruct& a, MyDataEnsureStruct& b);
};

template <class Protocol_>
unsigned long MyDataEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyDataPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataFieldPatch patchPrior__arg, ::test::fixtures::patch::MyDataEnsureStruct ensure__arg, ::test::fixtures::patch::MyDataFieldPatch patch__arg);

  MyDataPatchStruct(MyDataPatchStruct&&) noexcept;
  MyDataPatchStruct(const MyDataPatchStruct& src);


  MyDataPatchStruct& operator=(MyDataPatchStruct&&) noexcept;
  MyDataPatchStruct& operator=(const MyDataPatchStruct& src);

  ~MyDataPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyDataFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::MyDataEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyDataFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const MyDataPatchStruct&) const;
  bool operator<(const MyDataPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::MyDataEnsureStruct& get_ensure() const&;
  ::test::fixtures::patch::MyDataEnsureStruct get_ensure() &&;

  template <typename T_MyDataPatchStruct_ensure_struct_setter = ::test::fixtures::patch::MyDataEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::MyDataEnsureStruct& set_ensure(T_MyDataPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyDataPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataPatchStruct>;
  friend void swap(MyDataPatchStruct& a, MyDataPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::test::fixtures::patch::MyDataPatchStruct>;


class MyDataWithCustomDefaultFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::data1,
    ::apache::thrift::ident::data2
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataWithCustomDefaultFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataWithCustomDefaultFieldPatchStruct() :
      __fbthrift_field_data1(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_data2(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataWithCustomDefaultFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> data1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> data2__arg);

  MyDataWithCustomDefaultFieldPatchStruct(MyDataWithCustomDefaultFieldPatchStruct&&) noexcept;
  MyDataWithCustomDefaultFieldPatchStruct(const MyDataWithCustomDefaultFieldPatchStruct& src);


  MyDataWithCustomDefaultFieldPatchStruct& operator=(MyDataWithCustomDefaultFieldPatchStruct&&) noexcept;
  MyDataWithCustomDefaultFieldPatchStruct& operator=(const MyDataWithCustomDefaultFieldPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_data1;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> __fbthrift_field_data2;

 public:

  bool operator==(const MyDataWithCustomDefaultFieldPatchStruct&) const;
  bool operator<(const MyDataWithCustomDefaultFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data1_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data1_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data1_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data1_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data1() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data1() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data1() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data1() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data2_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data2_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data2_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data2_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> data2() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> data2() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> data2() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_data2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> data2() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataWithCustomDefaultFieldPatchStruct>;
  friend void swap(MyDataWithCustomDefaultFieldPatchStruct& a, MyDataWithCustomDefaultFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataWithCustomDefaultFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataWithCustomDefaultFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>;


class MyDataWithCustomDefaultEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::data1,
    ::apache::thrift::ident::data2
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataWithCustomDefaultEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataWithCustomDefaultEnsureStruct() :
      __fbthrift_field_data2() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataWithCustomDefaultEnsureStruct(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg);

  MyDataWithCustomDefaultEnsureStruct(MyDataWithCustomDefaultEnsureStruct&&) noexcept;

  MyDataWithCustomDefaultEnsureStruct(const MyDataWithCustomDefaultEnsureStruct& src);


  MyDataWithCustomDefaultEnsureStruct& operator=(MyDataWithCustomDefaultEnsureStruct&&) noexcept;
  MyDataWithCustomDefaultEnsureStruct& operator=(const MyDataWithCustomDefaultEnsureStruct& src);
 private:
  ::std::string __fbthrift_field_data1;
 private:
  ::std::int32_t __fbthrift_field_data2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataWithCustomDefaultEnsureStruct&) const;
  bool operator<(const MyDataWithCustomDefaultEnsureStruct&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data1_ref() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data1_ref() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data1() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data1() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data1() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data2_ref() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data2_ref() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> data2() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> data2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> data2() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> data2() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string* get_data1() const& {
    return data1_ref() ? std::addressof(__fbthrift_field_data1) : nullptr;
  }

  ::std::string* get_data1() & {
    return data1_ref() ? std::addressof(__fbthrift_field_data1) : nullptr;
  }
  ::std::string* get_data1() && = delete;

  template <typename T_MyDataWithCustomDefaultEnsureStruct_data1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.data1_ref() = BAR;` instead of `FOO.set_data1(BAR);`")]]
  ::std::string& set_data1(T_MyDataWithCustomDefaultEnsureStruct_data1_struct_setter&& data1_) {
    data1_ref() = std::forward<T_MyDataWithCustomDefaultEnsureStruct_data1_struct_setter>(data1_);
    return __fbthrift_field_data1;
  }

  const ::std::int32_t* get_data2() const& {
    return data2_ref() ? std::addressof(__fbthrift_field_data2) : nullptr;
  }

  ::std::int32_t* get_data2() & {
    return data2_ref() ? std::addressof(__fbthrift_field_data2) : nullptr;
  }
  ::std::int32_t* get_data2() && = delete;

  [[deprecated("Use `FOO.data2_ref() = BAR;` instead of `FOO.set_data2(BAR);`")]]
  ::std::int32_t& set_data2(::std::int32_t data2_) {
    data2_ref() = data2_;
    return __fbthrift_field_data2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataWithCustomDefaultEnsureStruct>;
  friend void swap(MyDataWithCustomDefaultEnsureStruct& a, MyDataWithCustomDefaultEnsureStruct& b);
};

template <class Protocol_>
unsigned long MyDataWithCustomDefaultEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyDataWithCustomDefaultPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefault>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataWithCustomDefaultPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataWithCustomDefaultPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataWithCustomDefaultPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch patchPrior__arg, ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct ensure__arg, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch patch__arg);

  MyDataWithCustomDefaultPatchStruct(MyDataWithCustomDefaultPatchStruct&&) noexcept;
  MyDataWithCustomDefaultPatchStruct(const MyDataWithCustomDefaultPatchStruct& src);


  MyDataWithCustomDefaultPatchStruct& operator=(MyDataWithCustomDefaultPatchStruct&&) noexcept;
  MyDataWithCustomDefaultPatchStruct& operator=(const MyDataWithCustomDefaultPatchStruct& src);

  ~MyDataWithCustomDefaultPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const MyDataWithCustomDefaultPatchStruct&) const;
  bool operator<(const MyDataWithCustomDefaultPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& get_ensure() const&;
  ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct get_ensure() &&;

  template <typename T_MyDataWithCustomDefaultPatchStruct_ensure_struct_setter = ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& set_ensure(T_MyDataWithCustomDefaultPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyDataWithCustomDefaultPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataWithCustomDefaultPatchStruct>;
  friend void swap(MyDataWithCustomDefaultPatchStruct& a, MyDataWithCustomDefaultPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataWithCustomDefaultPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataWithCustomDefaultPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>;


class InnerUnionFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::innerOption
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InnerUnionFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  InnerUnionFieldPatchStruct() :
      __fbthrift_field_innerOption(::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>())) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InnerUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> innerOption__arg);

  InnerUnionFieldPatchStruct(InnerUnionFieldPatchStruct&&) noexcept;
  InnerUnionFieldPatchStruct(const InnerUnionFieldPatchStruct& src);


  InnerUnionFieldPatchStruct& operator=(InnerUnionFieldPatchStruct&&) noexcept;
  InnerUnionFieldPatchStruct& operator=(const InnerUnionFieldPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> __fbthrift_field_innerOption;

 public:

  bool operator==(const InnerUnionFieldPatchStruct&) const;
  bool operator<(const InnerUnionFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> innerOption_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_innerOption, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> innerOption_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_innerOption), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> innerOption_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_innerOption, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> innerOption_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_innerOption), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> innerOption() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_innerOption, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> innerOption() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_innerOption), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> innerOption() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_innerOption, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> innerOption() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_innerOption), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InnerUnionFieldPatchStruct>;
  friend void swap(InnerUnionFieldPatchStruct& a, InnerUnionFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long InnerUnionFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using InnerUnionFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, ::test::fixtures::patch::InnerUnionFieldPatchStruct>;


class InnerUnionPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>,
    ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InnerUnionPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  InnerUnionPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InnerUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> assign__arg, bool clear__arg, ::test::fixtures::patch::InnerUnionFieldPatch patchPrior__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion> ensure__arg, ::test::fixtures::patch::InnerUnionFieldPatch patch__arg);

  InnerUnionPatchStruct(InnerUnionPatchStruct&&) noexcept;
  InnerUnionPatchStruct(const InnerUnionPatchStruct& src);


  InnerUnionPatchStruct& operator=(InnerUnionPatchStruct&&) noexcept;
  InnerUnionPatchStruct& operator=(const InnerUnionPatchStruct& src);

  ~InnerUnionPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::InnerUnionFieldPatch __fbthrift_field_patchPrior;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::InnerUnionFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const InnerUnionPatchStruct&) const;
  bool operator<(const InnerUnionPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InnerUnionPatchStruct>;
  friend void swap(InnerUnionPatchStruct& a, InnerUnionPatchStruct& b);
};

template <class Protocol_>
unsigned long InnerUnionPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using InnerUnionPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::test::fixtures::patch::InnerUnionPatchStruct>;


class MyUnionFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::option1,
    ::apache::thrift::ident::option2,
    ::apache::thrift::ident::option3
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnionFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyUnionFieldPatchStruct() :
      __fbthrift_field_option1(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_option2(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())),
      __fbthrift_field_option3(::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>())) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> option1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> option2__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch> option3__arg);

  MyUnionFieldPatchStruct(MyUnionFieldPatchStruct&&) noexcept;
  MyUnionFieldPatchStruct(const MyUnionFieldPatchStruct& src);


  MyUnionFieldPatchStruct& operator=(MyUnionFieldPatchStruct&&) noexcept;
  MyUnionFieldPatchStruct& operator=(const MyUnionFieldPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_option1;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> __fbthrift_field_option2;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch> __fbthrift_field_option3;

 public:

  bool operator==(const MyUnionFieldPatchStruct&) const;
  bool operator<(const MyUnionFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> option1_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_option1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> option1_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_option1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> option1_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_option1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> option1_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_option1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> option1() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_option1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> option1() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_option1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> option1() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_option1, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> option1() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_option1), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> option2_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_option2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> option2_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_option2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> option2_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_option2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> option2_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_option2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> option2() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_option2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> option2() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_option2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> option2() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_option2, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> option2() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_option2), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> option3_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_option3, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> option3_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_option3), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> option3_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_option3, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> option3_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_option3), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> option3() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_option3, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> option3() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_option3), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> option3() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_option3, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> option3() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_option3), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnionFieldPatchStruct>;
  friend void swap(MyUnionFieldPatchStruct& a, MyUnionFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyUnionFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyUnionFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, ::test::fixtures::patch::MyUnionFieldPatchStruct>;


class MyUnionPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>,
    ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnionPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyUnionPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> assign__arg, bool clear__arg, ::test::fixtures::patch::MyUnionFieldPatch patchPrior__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion> ensure__arg, ::test::fixtures::patch::MyUnionFieldPatch patch__arg);

  MyUnionPatchStruct(MyUnionPatchStruct&&) noexcept;
  MyUnionPatchStruct(const MyUnionPatchStruct& src);


  MyUnionPatchStruct& operator=(MyUnionPatchStruct&&) noexcept;
  MyUnionPatchStruct& operator=(const MyUnionPatchStruct& src);

  ~MyUnionPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyUnionFieldPatch __fbthrift_field_patchPrior;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyUnionFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const MyUnionPatchStruct&) const;
  bool operator<(const MyUnionPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_ensure, ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure), ::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnionPatchStruct>;
  friend void swap(MyUnionPatchStruct& a, MyUnionPatchStruct& b);
};

template <class Protocol_>
unsigned long MyUnionPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyUnionPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::test::fixtures::patch::MyUnionPatchStruct>;


class MyStructField10PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>,
    ::apache::thrift::type::bool_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField10PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField10PatchStruct() :
      __fbthrift_field_assign(),
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField10PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyEnum assign__arg, bool clear__arg);

  MyStructField10PatchStruct(MyStructField10PatchStruct&&) = default;

  MyStructField10PatchStruct(const MyStructField10PatchStruct&) = default;


  MyStructField10PatchStruct& operator=(MyStructField10PatchStruct&&) = default;

  MyStructField10PatchStruct& operator=(const MyStructField10PatchStruct&) = default;
 private:
  ::test::fixtures::patch::MyEnum __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField10PatchStruct&) const;
  bool operator<(const MyStructField10PatchStruct&) const;

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  const ::test::fixtures::patch::MyEnum* get_assign() const& {
    return assign_ref() ? std::addressof(__fbthrift_field_assign) : nullptr;
  }

  ::test::fixtures::patch::MyEnum* get_assign() & {
    return assign_ref() ? std::addressof(__fbthrift_field_assign) : nullptr;
  }
  ::test::fixtures::patch::MyEnum* get_assign() && = delete;

  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::test::fixtures::patch::MyEnum& set_assign(::test::fixtures::patch::MyEnum assign_) {
    assign_ref() = assign_;
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField10PatchStruct>;
  friend void swap(MyStructField10PatchStruct& a, MyStructField10PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField10PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField10Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::test::fixtures::patch::MyStructField10PatchStruct>;


class MyStructField23PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>,
    ::apache::thrift::type::bool_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField23PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField23PatchStruct() :
      __fbthrift_field_assign(),
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField23PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyEnum assign__arg, bool clear__arg);

  MyStructField23PatchStruct(MyStructField23PatchStruct&&) = default;

  MyStructField23PatchStruct(const MyStructField23PatchStruct&) = default;


  MyStructField23PatchStruct& operator=(MyStructField23PatchStruct&&) = default;

  MyStructField23PatchStruct& operator=(const MyStructField23PatchStruct&) = default;
 private:
  ::test::fixtures::patch::MyEnum __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField23PatchStruct&) const;
  bool operator<(const MyStructField23PatchStruct&) const;

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  const ::test::fixtures::patch::MyEnum* get_assign() const& {
    return assign_ref() ? std::addressof(__fbthrift_field_assign) : nullptr;
  }

  ::test::fixtures::patch::MyEnum* get_assign() & {
    return assign_ref() ? std::addressof(__fbthrift_field_assign) : nullptr;
  }
  ::test::fixtures::patch::MyEnum* get_assign() && = delete;

  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::test::fixtures::patch::MyEnum& set_assign(::test::fixtures::patch::MyEnum assign_) {
    assign_ref() = assign_;
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField23PatchStruct>;
  friend void swap(MyStructField23PatchStruct& a, MyStructField23PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField23PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField23Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::test::fixtures::patch::MyStructField23PatchStruct>;


class MyStructField26PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::prepend,
    ::apache::thrift::ident::append
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,7,8,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>, ::apache::thrift::type::map<::apache::thrift::type::adapted<::apache::thrift::InlineAdapter<::apache::thrift::op::detail::ListPatchIndex>, ::apache::thrift::type::i32_t>, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField26PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField26PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField26PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch> patch__arg, ::std::vector<::std::int16_t> remove__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg);

  MyStructField26PatchStruct(MyStructField26PatchStruct&&) noexcept;

  MyStructField26PatchStruct(const MyStructField26PatchStruct& src);


  MyStructField26PatchStruct& operator=(MyStructField26PatchStruct&&) noexcept;
  MyStructField26PatchStruct& operator=(const MyStructField26PatchStruct& src);

  ~MyStructField26PatchStruct();

 private:
  ::std::vector<::std::int16_t> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch> __fbthrift_field_patch;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_remove;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_prepend;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_append;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField26PatchStruct&) const;
  bool operator<(const MyStructField26PatchStruct&) const;

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> prepend_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> prepend_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> prepend_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> prepend_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> prepend() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> prepend() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> prepend() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> prepend() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> append_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> append_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> append_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> append_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> append() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> append() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> append() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> append() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_append)};
  }
  const ::std::vector<::std::int16_t>* get_assign() const&;
  ::std::vector<::std::int16_t>* get_assign() &;
  ::std::vector<::std::int16_t>* get_assign() && = delete;

  template <typename T_MyStructField26PatchStruct_assign_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::vector<::std::int16_t>& set_assign(T_MyStructField26PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField26PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>& get_patch() const&;
  ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch> get_patch() &&;

  template <typename T_MyStructField26PatchStruct_patch_struct_setter = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::apache::thrift::op::I16Patch>& set_patch(T_MyStructField26PatchStruct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField26PatchStruct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::vector<::std::int16_t>& get_remove() const&;
  ::std::vector<::std::int16_t> get_remove() &&;

  template <typename T_MyStructField26PatchStruct_remove_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::vector<::std::int16_t>& set_remove(T_MyStructField26PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField26PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::vector<::std::int16_t>& get_prepend() const&;
  ::std::vector<::std::int16_t> get_prepend() &&;

  template <typename T_MyStructField26PatchStruct_prepend_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.prepend_ref() = BAR;` instead of `FOO.set_prepend(BAR);`")]]
  ::std::vector<::std::int16_t>& set_prepend(T_MyStructField26PatchStruct_prepend_struct_setter&& prepend_) {
    prepend_ref() = std::forward<T_MyStructField26PatchStruct_prepend_struct_setter>(prepend_);
    return __fbthrift_field_prepend;
  }
  const ::std::vector<::std::int16_t>& get_append() const&;
  ::std::vector<::std::int16_t> get_append() &&;

  template <typename T_MyStructField26PatchStruct_append_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.append_ref() = BAR;` instead of `FOO.set_append(BAR);`")]]
  ::std::vector<::std::int16_t>& set_append(T_MyStructField26PatchStruct_append_struct_setter&& append_) {
    append_ref() = std::forward<T_MyStructField26PatchStruct_append_struct_setter>(append_);
    return __fbthrift_field_append;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField26PatchStruct>;
  friend void swap(MyStructField26PatchStruct& a, MyStructField26PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField26PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField26Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::test::fixtures::patch::MyStructField26PatchStruct>;


class MyStructField27PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::add
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField27PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField27PatchStruct() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField27PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg);

  MyStructField27PatchStruct(MyStructField27PatchStruct&&) noexcept;

  MyStructField27PatchStruct(const MyStructField27PatchStruct& src);


  MyStructField27PatchStruct& operator=(MyStructField27PatchStruct&&) noexcept;
  MyStructField27PatchStruct& operator=(const MyStructField27PatchStruct& src);
 private:
  ::std::set<::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::set<::std::string> __fbthrift_field_remove;
 private:
  ::std::set<::std::string> __fbthrift_field_add;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField27PatchStruct&) const;
  bool operator<(const MyStructField27PatchStruct&) const;

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }
  const ::std::set<::std::string>* get_assign() const&;
  ::std::set<::std::string>* get_assign() &;
  ::std::set<::std::string>* get_assign() && = delete;

  template <typename T_MyStructField27PatchStruct_assign_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::set<::std::string>& set_assign(T_MyStructField27PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField27PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::set<::std::string>& get_remove() const&;
  ::std::set<::std::string> get_remove() &&;

  template <typename T_MyStructField27PatchStruct_remove_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::set<::std::string>& set_remove(T_MyStructField27PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField27PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::set<::std::string>& get_add() const&;
  ::std::set<::std::string> get_add() &&;

  template <typename T_MyStructField27PatchStruct_add_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::set<::std::string>& set_add(T_MyStructField27PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField27PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField27PatchStruct>;
  friend void swap(MyStructField27PatchStruct& a, MyStructField27PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField27PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField27Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::test::fixtures::patch::MyStructField27PatchStruct>;


class MyStructField28PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::add,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::put
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>,
    ::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField28PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField28PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField28PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patchPrior__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::string> put__arg);

  MyStructField28PatchStruct(MyStructField28PatchStruct&&) noexcept;

  MyStructField28PatchStruct(const MyStructField28PatchStruct& src);


  MyStructField28PatchStruct& operator=(MyStructField28PatchStruct&&) noexcept;
  MyStructField28PatchStruct& operator=(const MyStructField28PatchStruct& src);

  ~MyStructField28PatchStruct();

 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> __fbthrift_field_patchPrior;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_add;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> __fbthrift_field_patch;
 private:
  ::std::unordered_set<::std::string> __fbthrift_field_remove;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField28PatchStruct&) const;
  bool operator<(const MyStructField28PatchStruct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }
  const ::std::map<::std::string, ::std::string>* get_assign() const&;
  ::std::map<::std::string, ::std::string>* get_assign() &;
  ::std::map<::std::string, ::std::string>* get_assign() && = delete;

  template <typename T_MyStructField28PatchStruct_assign_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_assign(T_MyStructField28PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField28PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& get_patchPrior() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> get_patchPrior() &&;

  template <typename T_MyStructField28PatchStruct_patchPrior_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  [[deprecated("Use `FOO.patchPrior_ref() = BAR;` instead of `FOO.set_patchPrior(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& set_patchPrior(T_MyStructField28PatchStruct_patchPrior_struct_setter&& patchPrior_) {
    patchPrior_ref() = std::forward<T_MyStructField28PatchStruct_patchPrior_struct_setter>(patchPrior_);
    return __fbthrift_field_patchPrior;
  }
  const ::std::map<::std::string, ::std::string>& get_add() const&;
  ::std::map<::std::string, ::std::string> get_add() &&;

  template <typename T_MyStructField28PatchStruct_add_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_add(T_MyStructField28PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField28PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& get_patch() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> get_patch() &&;

  template <typename T_MyStructField28PatchStruct_patch_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& set_patch(T_MyStructField28PatchStruct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField28PatchStruct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::unordered_set<::std::string>& get_remove() const&;
  ::std::unordered_set<::std::string> get_remove() &&;

  template <typename T_MyStructField28PatchStruct_remove_struct_setter = ::std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::unordered_set<::std::string>& set_remove(T_MyStructField28PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField28PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::map<::std::string, ::std::string>& get_put() const&;
  ::std::map<::std::string, ::std::string> get_put() &&;

  template <typename T_MyStructField28PatchStruct_put_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_put(T_MyStructField28PatchStruct_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField28PatchStruct_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField28PatchStruct>;
  friend void swap(MyStructField28PatchStruct& a, MyStructField28PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField28PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField28Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::test::fixtures::patch::MyStructField28PatchStruct>;


class MyStructField29Patch1Struct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::add,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::put
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>>,
    ::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField29Patch1Struct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField29Patch1Struct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField29Patch1Struct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::int32_t> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patchPrior__arg, ::std::map<::std::string, ::std::int32_t> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::int32_t> put__arg);

  MyStructField29Patch1Struct(MyStructField29Patch1Struct&&) noexcept;

  MyStructField29Patch1Struct(const MyStructField29Patch1Struct& src);


  MyStructField29Patch1Struct& operator=(MyStructField29Patch1Struct&&) noexcept;
  MyStructField29Patch1Struct& operator=(const MyStructField29Patch1Struct& src);

  ~MyStructField29Patch1Struct();

 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> __fbthrift_field_patchPrior;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_add;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> __fbthrift_field_patch;
 private:
  ::std::unordered_set<::std::string> __fbthrift_field_remove;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField29Patch1Struct&) const;
  bool operator<(const MyStructField29Patch1Struct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }
  const ::std::map<::std::string, ::std::int32_t>* get_assign() const&;
  ::std::map<::std::string, ::std::int32_t>* get_assign() &;
  ::std::map<::std::string, ::std::int32_t>* get_assign() && = delete;

  template <typename T_MyStructField29Patch1Struct_assign_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_assign(T_MyStructField29Patch1Struct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField29Patch1Struct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& get_patchPrior() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> get_patchPrior() &&;

  template <typename T_MyStructField29Patch1Struct_patchPrior_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  [[deprecated("Use `FOO.patchPrior_ref() = BAR;` instead of `FOO.set_patchPrior(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& set_patchPrior(T_MyStructField29Patch1Struct_patchPrior_struct_setter&& patchPrior_) {
    patchPrior_ref() = std::forward<T_MyStructField29Patch1Struct_patchPrior_struct_setter>(patchPrior_);
    return __fbthrift_field_patchPrior;
  }
  const ::std::map<::std::string, ::std::int32_t>& get_add() const&;
  ::std::map<::std::string, ::std::int32_t> get_add() &&;

  template <typename T_MyStructField29Patch1Struct_add_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_add(T_MyStructField29Patch1Struct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField29Patch1Struct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& get_patch() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> get_patch() &&;

  template <typename T_MyStructField29Patch1Struct_patch_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& set_patch(T_MyStructField29Patch1Struct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField29Patch1Struct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::unordered_set<::std::string>& get_remove() const&;
  ::std::unordered_set<::std::string> get_remove() &&;

  template <typename T_MyStructField29Patch1Struct_remove_struct_setter = ::std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::unordered_set<::std::string>& set_remove(T_MyStructField29Patch1Struct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField29Patch1Struct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::map<::std::string, ::std::int32_t>& get_put() const&;
  ::std::map<::std::string, ::std::int32_t> get_put() &&;

  template <typename T_MyStructField29Patch1Struct_put_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_put(T_MyStructField29Patch1Struct_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField29Patch1Struct_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField29Patch1Struct>;
  friend void swap(MyStructField29Patch1Struct& a, MyStructField29Patch1Struct& b);
};

template <class Protocol_>
unsigned long MyStructField29Patch1Struct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField29Patch1 = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField29Patch1Struct>, ::test::fixtures::patch::MyStructField29Patch1Struct>;


class MyStructField29PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::prepend,
    ::apache::thrift::ident::append
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,7,8,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>, ::apache::thrift::type::map<::apache::thrift::type::adapted<::apache::thrift::InlineAdapter<::apache::thrift::op::detail::ListPatchIndex>, ::apache::thrift::type::i32_t>, ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField29Patch1Struct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29Patch1Struct>>>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField29PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField29PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField29PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::map<::std::string, ::std::int32_t>> assign__arg, bool clear__arg, ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1> patch__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> remove__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> prepend__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> append__arg);

  MyStructField29PatchStruct(MyStructField29PatchStruct&&) noexcept;

  MyStructField29PatchStruct(const MyStructField29PatchStruct& src);


  MyStructField29PatchStruct& operator=(MyStructField29PatchStruct&&) noexcept;
  MyStructField29PatchStruct& operator=(const MyStructField29PatchStruct& src);

  ~MyStructField29PatchStruct();

 private:
  ::std::vector<::std::map<::std::string, ::std::int32_t>> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1> __fbthrift_field_patch;
 private:
  ::std::vector<::std::map<::std::string, ::std::int32_t>> __fbthrift_field_remove;
 private:
  ::std::vector<::std::map<::std::string, ::std::int32_t>> __fbthrift_field_prepend;
 private:
  ::std::vector<::std::map<::std::string, ::std::int32_t>> __fbthrift_field_append;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField29PatchStruct&) const;
  bool operator<(const MyStructField29PatchStruct&) const;

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> prepend_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> prepend_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> prepend_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> prepend_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> prepend() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> prepend() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> prepend() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> prepend() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> append_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> append_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> append_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> append_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> append() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> append() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> append() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> append() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_append)};
  }
  const ::std::vector<::std::map<::std::string, ::std::int32_t>>* get_assign() const&;
  ::std::vector<::std::map<::std::string, ::std::int32_t>>* get_assign() &;
  ::std::vector<::std::map<::std::string, ::std::int32_t>>* get_assign() && = delete;

  template <typename T_MyStructField29PatchStruct_assign_struct_setter = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::int32_t>>& set_assign(T_MyStructField29PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField29PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>& get_patch() const&;
  ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1> get_patch() &&;

  template <typename T_MyStructField29PatchStruct_patch_struct_setter = ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::apache::thrift::op::ListPatchIndex, ::test::fixtures::patch::MyStructField29Patch1>& set_patch(T_MyStructField29PatchStruct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField29PatchStruct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::vector<::std::map<::std::string, ::std::int32_t>>& get_remove() const&;
  ::std::vector<::std::map<::std::string, ::std::int32_t>> get_remove() &&;

  template <typename T_MyStructField29PatchStruct_remove_struct_setter = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::int32_t>>& set_remove(T_MyStructField29PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField29PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::vector<::std::map<::std::string, ::std::int32_t>>& get_prepend() const&;
  ::std::vector<::std::map<::std::string, ::std::int32_t>> get_prepend() &&;

  template <typename T_MyStructField29PatchStruct_prepend_struct_setter = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.prepend_ref() = BAR;` instead of `FOO.set_prepend(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::int32_t>>& set_prepend(T_MyStructField29PatchStruct_prepend_struct_setter&& prepend_) {
    prepend_ref() = std::forward<T_MyStructField29PatchStruct_prepend_struct_setter>(prepend_);
    return __fbthrift_field_prepend;
  }
  const ::std::vector<::std::map<::std::string, ::std::int32_t>>& get_append() const&;
  ::std::vector<::std::map<::std::string, ::std::int32_t>> get_append() &&;

  template <typename T_MyStructField29PatchStruct_append_struct_setter = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.append_ref() = BAR;` instead of `FOO.set_append(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::int32_t>>& set_append(T_MyStructField29PatchStruct_append_struct_setter&& append_) {
    append_ref() = std::forward<T_MyStructField29PatchStruct_append_struct_setter>(append_);
    return __fbthrift_field_append;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField29PatchStruct>;
  friend void swap(MyStructField29PatchStruct& a, MyStructField29PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField29PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField29Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::test::fixtures::patch::MyStructField29PatchStruct>;


class MyStructField30Patch1Struct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::add,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::put
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>>,
    ::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField30Patch1Struct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField30Patch1Struct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField30Patch1Struct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::int32_t> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patchPrior__arg, ::std::map<::std::string, ::std::int32_t> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::int32_t> put__arg);

  MyStructField30Patch1Struct(MyStructField30Patch1Struct&&) noexcept;

  MyStructField30Patch1Struct(const MyStructField30Patch1Struct& src);


  MyStructField30Patch1Struct& operator=(MyStructField30Patch1Struct&&) noexcept;
  MyStructField30Patch1Struct& operator=(const MyStructField30Patch1Struct& src);

  ~MyStructField30Patch1Struct();

 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> __fbthrift_field_patchPrior;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_add;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> __fbthrift_field_patch;
 private:
  ::std::unordered_set<::std::string> __fbthrift_field_remove;
 private:
  ::std::map<::std::string, ::std::int32_t> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField30Patch1Struct&) const;
  bool operator<(const MyStructField30Patch1Struct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }
  const ::std::map<::std::string, ::std::int32_t>* get_assign() const&;
  ::std::map<::std::string, ::std::int32_t>* get_assign() &;
  ::std::map<::std::string, ::std::int32_t>* get_assign() && = delete;

  template <typename T_MyStructField30Patch1Struct_assign_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_assign(T_MyStructField30Patch1Struct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField30Patch1Struct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& get_patchPrior() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> get_patchPrior() &&;

  template <typename T_MyStructField30Patch1Struct_patchPrior_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  [[deprecated("Use `FOO.patchPrior_ref() = BAR;` instead of `FOO.set_patchPrior(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& set_patchPrior(T_MyStructField30Patch1Struct_patchPrior_struct_setter&& patchPrior_) {
    patchPrior_ref() = std::forward<T_MyStructField30Patch1Struct_patchPrior_struct_setter>(patchPrior_);
    return __fbthrift_field_patchPrior;
  }
  const ::std::map<::std::string, ::std::int32_t>& get_add() const&;
  ::std::map<::std::string, ::std::int32_t> get_add() &&;

  template <typename T_MyStructField30Patch1Struct_add_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_add(T_MyStructField30Patch1Struct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField30Patch1Struct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& get_patch() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> get_patch() &&;

  template <typename T_MyStructField30Patch1Struct_patch_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& set_patch(T_MyStructField30Patch1Struct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField30Patch1Struct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::unordered_set<::std::string>& get_remove() const&;
  ::std::unordered_set<::std::string> get_remove() &&;

  template <typename T_MyStructField30Patch1Struct_remove_struct_setter = ::std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::unordered_set<::std::string>& set_remove(T_MyStructField30Patch1Struct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField30Patch1Struct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::map<::std::string, ::std::int32_t>& get_put() const&;
  ::std::map<::std::string, ::std::int32_t> get_put() &&;

  template <typename T_MyStructField30Patch1Struct_put_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_put(T_MyStructField30Patch1Struct_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField30Patch1Struct_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField30Patch1Struct>;
  friend void swap(MyStructField30Patch1Struct& a, MyStructField30Patch1Struct& b);
};

template <class Protocol_>
unsigned long MyStructField30Patch1Struct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField30Patch1 = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>, ::test::fixtures::patch::MyStructField30Patch1Struct>;


class MyStructField30PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::add,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::put
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30Patch1Struct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30Patch1Struct>>>>,
    ::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField30PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField30PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField30PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> patchPrior__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> add__arg, ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> put__arg);

  MyStructField30PatchStruct(MyStructField30PatchStruct&&) noexcept;

  MyStructField30PatchStruct(const MyStructField30PatchStruct& src);


  MyStructField30PatchStruct& operator=(MyStructField30PatchStruct&&) noexcept;
  MyStructField30PatchStruct& operator=(const MyStructField30PatchStruct& src);

  ~MyStructField30PatchStruct();

 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> __fbthrift_field_patchPrior;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> __fbthrift_field_add;
 private:
  ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> __fbthrift_field_patch;
 private:
  ::std::unordered_set<::std::string> __fbthrift_field_remove;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField30PatchStruct&) const;
  bool operator<(const MyStructField30PatchStruct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* get_assign() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* get_assign() &;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* get_assign() && = delete;

  template <typename T_MyStructField30PatchStruct_assign_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& set_assign(T_MyStructField30PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField30PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>& get_patchPrior() const&;
  ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> get_patchPrior() &&;

  template <typename T_MyStructField30PatchStruct_patchPrior_struct_setter = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  [[deprecated("Use `FOO.patchPrior_ref() = BAR;` instead of `FOO.set_patchPrior(BAR);`")]]
  ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>& set_patchPrior(T_MyStructField30PatchStruct_patchPrior_struct_setter&& patchPrior_) {
    patchPrior_ref() = std::forward<T_MyStructField30PatchStruct_patchPrior_struct_setter>(patchPrior_);
    return __fbthrift_field_patchPrior;
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& get_add() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> get_add() &&;

  template <typename T_MyStructField30PatchStruct_add_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& set_add(T_MyStructField30PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField30PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }
  const ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>& get_patch() const&;
  ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> get_patch() &&;

  template <typename T_MyStructField30PatchStruct_patch_struct_setter = ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>& set_patch(T_MyStructField30PatchStruct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField30PatchStruct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::unordered_set<::std::string>& get_remove() const&;
  ::std::unordered_set<::std::string> get_remove() &&;

  template <typename T_MyStructField30PatchStruct_remove_struct_setter = ::std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::unordered_set<::std::string>& set_remove(T_MyStructField30PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField30PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& get_put() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> get_put() &&;

  template <typename T_MyStructField30PatchStruct_put_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& set_put(T_MyStructField30PatchStruct_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField30PatchStruct_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField30PatchStruct>;
  friend void swap(MyStructField30PatchStruct& a, MyStructField30PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField30PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField30Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::test::fixtures::patch::MyStructField30PatchStruct>;


class LateDefStructFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LateDefStructFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LateDefStructFieldPatchStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LateDefStructFieldPatchStruct(apache::thrift::FragileConstructor);

  LateDefStructFieldPatchStruct(LateDefStructFieldPatchStruct&&) = default;

  LateDefStructFieldPatchStruct(const LateDefStructFieldPatchStruct&) = default;


  LateDefStructFieldPatchStruct& operator=(LateDefStructFieldPatchStruct&&) = default;

  LateDefStructFieldPatchStruct& operator=(const LateDefStructFieldPatchStruct&) = default;

 public:

  bool operator==(const LateDefStructFieldPatchStruct&) const;
  bool operator<(const LateDefStructFieldPatchStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LateDefStructFieldPatchStruct>;
  friend void swap(LateDefStructFieldPatchStruct& a, LateDefStructFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long LateDefStructFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using LateDefStructFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, ::test::fixtures::patch::LateDefStructFieldPatchStruct>;


class LateDefStructEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LateDefStructEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LateDefStructEnsureStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LateDefStructEnsureStruct(apache::thrift::FragileConstructor);

  LateDefStructEnsureStruct(LateDefStructEnsureStruct&&) = default;

  LateDefStructEnsureStruct(const LateDefStructEnsureStruct&) = default;


  LateDefStructEnsureStruct& operator=(LateDefStructEnsureStruct&&) = default;

  LateDefStructEnsureStruct& operator=(const LateDefStructEnsureStruct&) = default;

 public:

  bool operator==(const LateDefStructEnsureStruct&) const;
  bool operator<(const LateDefStructEnsureStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LateDefStructEnsureStruct>;
  friend void swap(LateDefStructEnsureStruct& a, LateDefStructEnsureStruct& b);
};

template <class Protocol_>
unsigned long LateDefStructEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class LateDefStructPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LateDefStructPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LateDefStructPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LateDefStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::LateDefStructFieldPatch patchPrior__arg, ::test::fixtures::patch::LateDefStructEnsureStruct ensure__arg, ::test::fixtures::patch::LateDefStructFieldPatch patch__arg);

  LateDefStructPatchStruct(LateDefStructPatchStruct&&) noexcept;
  LateDefStructPatchStruct(const LateDefStructPatchStruct& src);


  LateDefStructPatchStruct& operator=(LateDefStructPatchStruct&&) noexcept;
  LateDefStructPatchStruct& operator=(const LateDefStructPatchStruct& src);

  ~LateDefStructPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::LateDefStructFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::LateDefStructEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::LateDefStructFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const LateDefStructPatchStruct&) const;
  bool operator<(const LateDefStructPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::LateDefStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::LateDefStructEnsureStruct& get_ensure() const&;
  ::test::fixtures::patch::LateDefStructEnsureStruct get_ensure() &&;

  template <typename T_LateDefStructPatchStruct_ensure_struct_setter = ::test::fixtures::patch::LateDefStructEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::LateDefStructEnsureStruct& set_ensure(T_LateDefStructPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_LateDefStructPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LateDefStructPatchStruct>;
  friend void swap(LateDefStructPatchStruct& a, LateDefStructPatchStruct& b);
};

template <class Protocol_>
unsigned long LateDefStructPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using LateDefStructPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::test::fixtures::patch::LateDefStructPatchStruct>;


class MyStructFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::structWithCustomDefault,
    ::apache::thrift::ident::i32WithCustomDefault,
    ::apache::thrift::ident::mapMap,
    ::apache::thrift::ident::listMap,
    ::apache::thrift::ident::optMapVal,
    ::apache::thrift::ident::optSetVal,
    ::apache::thrift::ident::optListVal,
    ::apache::thrift::ident::optLateStructVal,
    ::apache::thrift::ident::optStructVal,
    ::apache::thrift::ident::optEnumVal,
    ::apache::thrift::ident::optBinaryVal,
    ::apache::thrift::ident::optStringVal,
    ::apache::thrift::ident::optDoubleVal,
    ::apache::thrift::ident::optFloatVal,
    ::apache::thrift::ident::optI64Val,
    ::apache::thrift::ident::optI32Val,
    ::apache::thrift::ident::optI16Val,
    ::apache::thrift::ident::optByteVal,
    ::apache::thrift::ident::optBoolVal,
    ::apache::thrift::ident::lateStructVal,
    ::apache::thrift::ident::unionVal,
    ::apache::thrift::ident::structVal,
    ::apache::thrift::ident::enumVal,
    ::apache::thrift::ident::binaryVal,
    ::apache::thrift::ident::stringVal,
    ::apache::thrift::ident::doubleVal,
    ::apache::thrift::ident::floatVal,
    ::apache::thrift::ident::i64Val,
    ::apache::thrift::ident::i32Val,
    ::apache::thrift::ident::i16Val,
    ::apache::thrift::ident::byteVal,
    ::apache::thrift::ident::boolVal,
    ::apache::thrift::ident::structWithFieldCustomDefault
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 33;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructFieldPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch> structWithCustomDefault__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> i32WithCustomDefault__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch> mapMap__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch> listMap__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch> optMapVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch> optSetVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch> optListVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch> optLateStructVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> optStructVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch> optEnumVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> optBinaryVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> optStringVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch> optDoubleVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch> optFloatVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> optI64Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> optI32Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch> optI16Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch> optByteVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> optBoolVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch> lateStructVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch> unionVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> structVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch> enumVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> binaryVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> stringVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch> doubleVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch> floatVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> i64Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> i32Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch> i16Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch> byteVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> boolVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> structWithFieldCustomDefault__arg);

  MyStructFieldPatchStruct(MyStructFieldPatchStruct&&) noexcept;
  MyStructFieldPatchStruct(const MyStructFieldPatchStruct& src);


  MyStructFieldPatchStruct& operator=(MyStructFieldPatchStruct&&) noexcept;
  MyStructFieldPatchStruct& operator=(const MyStructFieldPatchStruct& src);

  ~MyStructFieldPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch> __fbthrift_field_structWithCustomDefault;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> __fbthrift_field_i32WithCustomDefault;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch> __fbthrift_field_mapMap;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch> __fbthrift_field_listMap;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch> __fbthrift_field_optMapVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch> __fbthrift_field_optSetVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch> __fbthrift_field_optListVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch> __fbthrift_field_optLateStructVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> __fbthrift_field_optStructVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch> __fbthrift_field_optEnumVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> __fbthrift_field_optBinaryVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_optStringVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch> __fbthrift_field_optDoubleVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch> __fbthrift_field_optFloatVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> __fbthrift_field_optI64Val;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> __fbthrift_field_optI32Val;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch> __fbthrift_field_optI16Val;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch> __fbthrift_field_optByteVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> __fbthrift_field_optBoolVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch> __fbthrift_field_lateStructVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch> __fbthrift_field_unionVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> __fbthrift_field_structVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch> __fbthrift_field_enumVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> __fbthrift_field_binaryVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_stringVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch> __fbthrift_field_doubleVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch> __fbthrift_field_floatVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> __fbthrift_field_i64Val;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> __fbthrift_field_i32Val;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch> __fbthrift_field_i16Val;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch> __fbthrift_field_byteVal;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> __fbthrift_field_boolVal;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> __fbthrift_field_structWithFieldCustomDefault;

 public:

  bool operator==(const MyStructFieldPatchStruct&) const;
  bool operator<(const MyStructFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> structWithCustomDefault_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_structWithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> structWithCustomDefault_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> structWithCustomDefault_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_structWithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> structWithCustomDefault_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> structWithCustomDefault() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_structWithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> structWithCustomDefault() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> structWithCustomDefault() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_structWithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> structWithCustomDefault() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i32WithCustomDefault_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i32WithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i32WithCustomDefault_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32WithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i32WithCustomDefault_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i32WithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i32WithCustomDefault_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32WithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i32WithCustomDefault() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i32WithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i32WithCustomDefault() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32WithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i32WithCustomDefault() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i32WithCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i32WithCustomDefault() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32WithCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> mapMap_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_mapMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> mapMap_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_mapMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> mapMap_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_mapMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> mapMap_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_mapMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> mapMap() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_mapMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> mapMap() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_mapMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> mapMap() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_mapMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> mapMap() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_mapMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> listMap_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_listMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> listMap_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_listMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> listMap_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_listMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> listMap_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_listMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> listMap() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_listMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> listMap() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_listMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> listMap() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_listMap, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> listMap() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_listMap), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optMapVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optMapVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optMapVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optMapVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optMapVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optMapVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optMapVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optMapVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optMapVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optMapVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optMapVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optMapVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optMapVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optMapVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optMapVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optMapVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optSetVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optSetVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optSetVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optSetVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optSetVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optSetVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optSetVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optSetVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optSetVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optSetVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optSetVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optSetVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optSetVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optSetVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optSetVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optSetVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optListVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optListVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optListVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optListVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optListVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optListVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optListVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optListVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optListVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optListVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optListVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optListVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optListVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optListVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optListVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optListVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optLateStructVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optLateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optLateStructVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optLateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optLateStructVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optLateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optLateStructVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optLateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optLateStructVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optLateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optLateStructVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optLateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optLateStructVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optLateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optLateStructVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optLateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optStructVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optStructVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optStructVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optStructVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optStructVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optStructVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optStructVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optStructVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optEnumVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optEnumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optEnumVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optEnumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optEnumVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optEnumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optEnumVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optEnumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optEnumVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optEnumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optEnumVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optEnumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optEnumVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optEnumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optEnumVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optEnumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optBinaryVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optBinaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optBinaryVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optBinaryVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optBinaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optBinaryVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optBinaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optBinaryVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optBinaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optBinaryVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optBinaryVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optBinaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optBinaryVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optBinaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optStringVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optStringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optStringVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optStringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optStringVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optStringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optStringVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optStringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optStringVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optStringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optStringVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optStringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optStringVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optStringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optStringVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optStringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optDoubleVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optDoubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optDoubleVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optDoubleVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optDoubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optDoubleVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optDoubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optDoubleVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optDoubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optDoubleVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optDoubleVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optDoubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optDoubleVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optDoubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optFloatVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optFloatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optFloatVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optFloatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optFloatVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optFloatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optFloatVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optFloatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optFloatVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optFloatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optFloatVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optFloatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optFloatVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optFloatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optFloatVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optFloatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optI64Val_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optI64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optI64Val_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optI64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optI64Val_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optI64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optI64Val_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optI64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optI64Val() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optI64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optI64Val() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optI64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optI64Val() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optI64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optI64Val() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optI64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optI32Val_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optI32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optI32Val_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optI32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optI32Val_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optI32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optI32Val_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optI32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optI32Val() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optI32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optI32Val() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optI32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optI32Val() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optI32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optI32Val() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optI32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optI16Val_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optI16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optI16Val_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optI16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optI16Val_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optI16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optI16Val_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optI16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optI16Val() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optI16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optI16Val() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optI16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optI16Val() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optI16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optI16Val() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optI16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optByteVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optByteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optByteVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optByteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optByteVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optByteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optByteVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optByteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optByteVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optByteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optByteVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optByteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optByteVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optByteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optByteVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optByteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optBoolVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optBoolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optBoolVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optBoolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optBoolVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optBoolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optBoolVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optBoolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> optBoolVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_optBoolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> optBoolVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optBoolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> optBoolVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_optBoolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> optBoolVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optBoolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> lateStructVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_lateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> lateStructVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> lateStructVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_lateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> lateStructVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> lateStructVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_lateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> lateStructVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> lateStructVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_lateStructVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> lateStructVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lateStructVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> unionVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_unionVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> unionVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> unionVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_unionVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> unionVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> unionVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_unionVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> unionVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> unionVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_unionVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> unionVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> structVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_structVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> structVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> structVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_structVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> structVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> structVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_structVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> structVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> structVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_structVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> structVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> enumVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_enumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> enumVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> enumVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_enumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> enumVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> enumVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_enumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> enumVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> enumVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_enumVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> enumVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enumVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> binaryVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_binaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> binaryVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> binaryVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_binaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> binaryVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> binaryVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_binaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> binaryVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> binaryVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_binaryVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> binaryVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binaryVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> stringVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_stringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> stringVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> stringVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_stringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> stringVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> stringVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_stringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> stringVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> stringVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_stringVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> stringVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> doubleVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_doubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> doubleVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_doubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> doubleVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_doubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> doubleVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_doubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> doubleVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_doubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> doubleVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_doubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> doubleVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_doubleVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> doubleVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_doubleVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> floatVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_floatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> floatVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> floatVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_floatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> floatVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> floatVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_floatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> floatVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> floatVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_floatVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> floatVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i64Val_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i64Val_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i64Val_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i64Val_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i64Val() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i64Val() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i64Val() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i64Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i64Val() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i64Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i32Val_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i32Val_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i32Val_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i32Val_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i32Val() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i32Val() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i32Val() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i32Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i32Val() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i16Val_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i16Val_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i16Val_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i16Val_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> i16Val() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_i16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> i16Val() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> i16Val() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_i16Val, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> i16Val() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i16Val), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> byteVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_byteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> byteVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> byteVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_byteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> byteVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> byteVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_byteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> byteVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> byteVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_byteVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> byteVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byteVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> boolVal_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_boolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> boolVal_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_boolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> boolVal_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_boolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> boolVal_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_boolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> boolVal() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_boolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> boolVal() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_boolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> boolVal() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_boolVal, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> boolVal() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_boolVal), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> structWithFieldCustomDefault_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_structWithFieldCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> structWithFieldCustomDefault_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithFieldCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> structWithFieldCustomDefault_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_structWithFieldCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> structWithFieldCustomDefault_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithFieldCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> structWithFieldCustomDefault() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_structWithFieldCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> structWithFieldCustomDefault() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithFieldCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> structWithFieldCustomDefault() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_structWithFieldCustomDefault, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> structWithFieldCustomDefault() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithFieldCustomDefault), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructFieldPatchStruct>;
  friend void swap(MyStructFieldPatchStruct& a, MyStructFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, ::test::fixtures::patch::MyStructFieldPatchStruct>;


class MyStructEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::structWithCustomDefault,
    ::apache::thrift::ident::i32WithCustomDefault,
    ::apache::thrift::ident::mapMap,
    ::apache::thrift::ident::listMap,
    ::apache::thrift::ident::optMapVal,
    ::apache::thrift::ident::optSetVal,
    ::apache::thrift::ident::optListVal,
    ::apache::thrift::ident::optLateStructVal,
    ::apache::thrift::ident::optStructVal,
    ::apache::thrift::ident::optEnumVal,
    ::apache::thrift::ident::optBinaryVal,
    ::apache::thrift::ident::optStringVal,
    ::apache::thrift::ident::optDoubleVal,
    ::apache::thrift::ident::optFloatVal,
    ::apache::thrift::ident::optI64Val,
    ::apache::thrift::ident::optI32Val,
    ::apache::thrift::ident::optI16Val,
    ::apache::thrift::ident::optByteVal,
    ::apache::thrift::ident::optBoolVal,
    ::apache::thrift::ident::lateStructVal,
    ::apache::thrift::ident::unionVal,
    ::apache::thrift::ident::structVal,
    ::apache::thrift::ident::enumVal,
    ::apache::thrift::ident::binaryVal,
    ::apache::thrift::ident::stringVal,
    ::apache::thrift::ident::doubleVal,
    ::apache::thrift::ident::floatVal,
    ::apache::thrift::ident::i64Val,
    ::apache::thrift::ident::i32Val,
    ::apache::thrift::ident::i16Val,
    ::apache::thrift::ident::byteVal,
    ::apache::thrift::ident::boolVal,
    ::apache::thrift::ident::structWithFieldCustomDefault
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefault>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
    ::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>,
    ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
    ::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i16_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 33;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructEnsureStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructEnsureStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault> structWithCustomDefault__arg, ::std::int32_t i32WithCustomDefault__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> mapMap__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> listMap__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> optLateStructVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> optStructVal__arg, ::test::fixtures::patch::MyEnum optEnumVal__arg, folly::IOBuf optBinaryVal__arg, ::std::string optStringVal__arg, double optDoubleVal__arg, float optFloatVal__arg, ::std::int64_t optI64Val__arg, ::std::int32_t optI32Val__arg, ::std::int16_t optI16Val__arg, ::std::int8_t optByteVal__arg, bool optBoolVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> lateStructVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> unionVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> structVal__arg, ::test::fixtures::patch::MyEnum enumVal__arg, folly::IOBuf binaryVal__arg, ::std::string stringVal__arg, double doubleVal__arg, float floatVal__arg, ::std::int64_t i64Val__arg, ::std::int32_t i32Val__arg, ::std::int16_t i16Val__arg, ::std::int8_t byteVal__arg, bool boolVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> structWithFieldCustomDefault__arg);

  MyStructEnsureStruct(MyStructEnsureStruct&&) noexcept;

  MyStructEnsureStruct(const MyStructEnsureStruct& src);


  MyStructEnsureStruct& operator=(MyStructEnsureStruct&&) noexcept;
  MyStructEnsureStruct& operator=(const MyStructEnsureStruct& src);

  ~MyStructEnsureStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault> __fbthrift_field_structWithCustomDefault;
 private:
  ::std::int32_t __fbthrift_field_i32WithCustomDefault;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> __fbthrift_field_mapMap;
 private:
  ::std::vector<::std::map<::std::string, ::std::int32_t>> __fbthrift_field_listMap;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_optMapVal;
 private:
  ::std::set<::std::string> __fbthrift_field_optSetVal;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_optListVal;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> __fbthrift_field_optLateStructVal;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> __fbthrift_field_optStructVal;
 private:
  ::test::fixtures::patch::MyEnum __fbthrift_field_optEnumVal;
 private:
  folly::IOBuf __fbthrift_field_optBinaryVal;
 private:
  ::std::string __fbthrift_field_optStringVal;
 private:
  double __fbthrift_field_optDoubleVal;
 private:
  float __fbthrift_field_optFloatVal;
 private:
  ::std::int64_t __fbthrift_field_optI64Val;
 private:
  ::std::int32_t __fbthrift_field_optI32Val;
 private:
  ::std::int16_t __fbthrift_field_optI16Val;
 private:
  ::std::int8_t __fbthrift_field_optByteVal;
 private:
  bool __fbthrift_field_optBoolVal;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> __fbthrift_field_lateStructVal;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> __fbthrift_field_unionVal;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> __fbthrift_field_structVal;
 private:
  ::test::fixtures::patch::MyEnum __fbthrift_field_enumVal;
 private:
  folly::IOBuf __fbthrift_field_binaryVal;
 private:
  ::std::string __fbthrift_field_stringVal;
 private:
  double __fbthrift_field_doubleVal;
 private:
  float __fbthrift_field_floatVal;
 private:
  ::std::int64_t __fbthrift_field_i64Val;
 private:
  ::std::int32_t __fbthrift_field_i32Val;
 private:
  ::std::int16_t __fbthrift_field_i16Val;
 private:
  ::std::int8_t __fbthrift_field_byteVal;
 private:
  bool __fbthrift_field_boolVal;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> __fbthrift_field_structWithFieldCustomDefault;
 private:
  apache::thrift::detail::isset_bitset<26, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructEnsureStruct&) const;
  bool operator<(const MyStructEnsureStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> structWithCustomDefault_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> structWithCustomDefault_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> structWithCustomDefault_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> structWithCustomDefault_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> structWithCustomDefault() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> structWithCustomDefault() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> structWithCustomDefault() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_structWithCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> structWithCustomDefault() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithCustomDefault)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i32WithCustomDefault_ref() const& {
    return {this->__fbthrift_field_i32WithCustomDefault, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i32WithCustomDefault_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32WithCustomDefault), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i32WithCustomDefault_ref() & {
    return {this->__fbthrift_field_i32WithCustomDefault, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i32WithCustomDefault_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32WithCustomDefault), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i32WithCustomDefault() const& {
    return {this->__fbthrift_field_i32WithCustomDefault, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i32WithCustomDefault() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32WithCustomDefault), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i32WithCustomDefault() & {
    return {this->__fbthrift_field_i32WithCustomDefault, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i32WithCustomDefault() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32WithCustomDefault), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> mapMap_ref() const& {
    return {this->__fbthrift_field_mapMap, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> mapMap_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mapMap), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> mapMap_ref() & {
    return {this->__fbthrift_field_mapMap, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> mapMap_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_mapMap), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> mapMap() const& {
    return {this->__fbthrift_field_mapMap, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> mapMap() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mapMap), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> mapMap() & {
    return {this->__fbthrift_field_mapMap, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> mapMap() && {
    return {static_cast<T&&>(this->__fbthrift_field_mapMap), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> listMap_ref() const& {
    return {this->__fbthrift_field_listMap, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> listMap_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_listMap), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> listMap_ref() & {
    return {this->__fbthrift_field_listMap, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> listMap_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_listMap), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> listMap() const& {
    return {this->__fbthrift_field_listMap, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> listMap() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_listMap), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> listMap() & {
    return {this->__fbthrift_field_listMap, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> listMap() && {
    return {static_cast<T&&>(this->__fbthrift_field_listMap), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal_ref() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal_ref() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal_ref() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal_ref() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal_ref() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal_ref() & {
    return {this->__fbthrift_field_optListVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal() & {
    return {this->__fbthrift_field_optListVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> optLateStructVal_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_optLateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> optLateStructVal_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optLateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> optLateStructVal_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_optLateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> optLateStructVal_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optLateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> optLateStructVal() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_optLateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> optLateStructVal() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optLateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> optLateStructVal() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_optLateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> optLateStructVal() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optLateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> optStructVal_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_optStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> optStructVal_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> optStructVal_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_optStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> optStructVal_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> optStructVal() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_optStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> optStructVal() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_optStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> optStructVal() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_optStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> optStructVal() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_optStructVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optEnumVal_ref() const& {
    return {this->__fbthrift_field_optEnumVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optEnumVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optEnumVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optEnumVal_ref() & {
    return {this->__fbthrift_field_optEnumVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optEnumVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optEnumVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optEnumVal() const& {
    return {this->__fbthrift_field_optEnumVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optEnumVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optEnumVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optEnumVal() & {
    return {this->__fbthrift_field_optEnumVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optEnumVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optEnumVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> lateStructVal_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> lateStructVal_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> lateStructVal_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> lateStructVal_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> lateStructVal() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> lateStructVal() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> lateStructVal() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_lateStructVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> lateStructVal() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_lateStructVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> unionVal_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> unionVal_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> unionVal_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> unionVal_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> unionVal() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> unionVal() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> unionVal() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> unionVal() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> structVal_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> structVal_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> structVal_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> structVal_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> structVal() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> structVal() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> structVal() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> structVal() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> enumVal_ref() const& {
    return {this->__fbthrift_field_enumVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> enumVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enumVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> enumVal_ref() & {
    return {this->__fbthrift_field_enumVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> enumVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_enumVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> enumVal() const& {
    return {this->__fbthrift_field_enumVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> enumVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enumVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> enumVal() & {
    return {this->__fbthrift_field_enumVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> enumVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_enumVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> binaryVal_ref() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> binaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> binaryVal_ref() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> binaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> binaryVal() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> binaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> binaryVal() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> binaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> stringVal_ref() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> stringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> stringVal_ref() & {
    return {this->__fbthrift_field_stringVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> stringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> stringVal() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> stringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> stringVal() & {
    return {this->__fbthrift_field_stringVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> stringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> doubleVal_ref() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> doubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> doubleVal_ref() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> doubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> doubleVal() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> doubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> doubleVal() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> doubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> floatVal_ref() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> floatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> floatVal_ref() & {
    return {this->__fbthrift_field_floatVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> floatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> floatVal() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> floatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> floatVal() & {
    return {this->__fbthrift_field_floatVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> floatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i64Val_ref() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i64Val_ref() & {
    return {this->__fbthrift_field_i64Val, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i64Val() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i64Val() & {
    return {this->__fbthrift_field_i64Val, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i32Val_ref() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i32Val_ref() & {
    return {this->__fbthrift_field_i32Val, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i32Val() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i32Val() & {
    return {this->__fbthrift_field_i32Val, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i16Val_ref() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i16Val_ref() & {
    return {this->__fbthrift_field_i16Val, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> i16Val() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> i16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> i16Val() & {
    return {this->__fbthrift_field_i16Val, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> i16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> byteVal_ref() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> byteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> byteVal_ref() & {
    return {this->__fbthrift_field_byteVal, __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> byteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> byteVal() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> byteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> byteVal() & {
    return {this->__fbthrift_field_byteVal, __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> byteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(24), __isset.bit(24)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> boolVal_ref() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> boolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> boolVal_ref() & {
    return {this->__fbthrift_field_boolVal, __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> boolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> boolVal() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> boolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> boolVal() & {
    return {this->__fbthrift_field_boolVal, __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> boolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(25), __isset.bit(25)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> structWithFieldCustomDefault_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> structWithFieldCustomDefault_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> structWithFieldCustomDefault_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> structWithFieldCustomDefault_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> structWithFieldCustomDefault() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> structWithFieldCustomDefault() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> structWithFieldCustomDefault() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_structWithFieldCustomDefault};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> structWithFieldCustomDefault() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structWithFieldCustomDefault)};
  }

  const ::std::int32_t* get_i32WithCustomDefault() const& {
    return i32WithCustomDefault_ref() ? std::addressof(__fbthrift_field_i32WithCustomDefault) : nullptr;
  }

  ::std::int32_t* get_i32WithCustomDefault() & {
    return i32WithCustomDefault_ref() ? std::addressof(__fbthrift_field_i32WithCustomDefault) : nullptr;
  }
  ::std::int32_t* get_i32WithCustomDefault() && = delete;

  [[deprecated("Use `FOO.i32WithCustomDefault_ref() = BAR;` instead of `FOO.set_i32WithCustomDefault(BAR);`")]]
  ::std::int32_t& set_i32WithCustomDefault(::std::int32_t i32WithCustomDefault_) {
    i32WithCustomDefault_ref() = i32WithCustomDefault_;
    return __fbthrift_field_i32WithCustomDefault;
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* get_mapMap() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* get_mapMap() &;
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* get_mapMap() && = delete;

  template <typename T_MyStructEnsureStruct_mapMap_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.mapMap_ref() = BAR;` instead of `FOO.set_mapMap(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& set_mapMap(T_MyStructEnsureStruct_mapMap_struct_setter&& mapMap_) {
    mapMap_ref() = std::forward<T_MyStructEnsureStruct_mapMap_struct_setter>(mapMap_);
    return __fbthrift_field_mapMap;
  }
  const ::std::vector<::std::map<::std::string, ::std::int32_t>>* get_listMap() const&;
  ::std::vector<::std::map<::std::string, ::std::int32_t>>* get_listMap() &;
  ::std::vector<::std::map<::std::string, ::std::int32_t>>* get_listMap() && = delete;

  template <typename T_MyStructEnsureStruct_listMap_struct_setter = ::std::vector<::std::map<::std::string, ::std::int32_t>>>
  [[deprecated("Use `FOO.listMap_ref() = BAR;` instead of `FOO.set_listMap(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::int32_t>>& set_listMap(T_MyStructEnsureStruct_listMap_struct_setter&& listMap_) {
    listMap_ref() = std::forward<T_MyStructEnsureStruct_listMap_struct_setter>(listMap_);
    return __fbthrift_field_listMap;
  }
  const ::std::map<::std::string, ::std::string>* get_optMapVal() const&;
  ::std::map<::std::string, ::std::string>* get_optMapVal() &;
  ::std::map<::std::string, ::std::string>* get_optMapVal() && = delete;

  template <typename T_MyStructEnsureStruct_optMapVal_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.optMapVal_ref() = BAR;` instead of `FOO.set_optMapVal(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_optMapVal(T_MyStructEnsureStruct_optMapVal_struct_setter&& optMapVal_) {
    optMapVal_ref() = std::forward<T_MyStructEnsureStruct_optMapVal_struct_setter>(optMapVal_);
    return __fbthrift_field_optMapVal;
  }
  const ::std::set<::std::string>* get_optSetVal() const&;
  ::std::set<::std::string>* get_optSetVal() &;
  ::std::set<::std::string>* get_optSetVal() && = delete;

  template <typename T_MyStructEnsureStruct_optSetVal_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.optSetVal_ref() = BAR;` instead of `FOO.set_optSetVal(BAR);`")]]
  ::std::set<::std::string>& set_optSetVal(T_MyStructEnsureStruct_optSetVal_struct_setter&& optSetVal_) {
    optSetVal_ref() = std::forward<T_MyStructEnsureStruct_optSetVal_struct_setter>(optSetVal_);
    return __fbthrift_field_optSetVal;
  }
  const ::std::vector<::std::int16_t>* get_optListVal() const&;
  ::std::vector<::std::int16_t>* get_optListVal() &;
  ::std::vector<::std::int16_t>* get_optListVal() && = delete;

  template <typename T_MyStructEnsureStruct_optListVal_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.optListVal_ref() = BAR;` instead of `FOO.set_optListVal(BAR);`")]]
  ::std::vector<::std::int16_t>& set_optListVal(T_MyStructEnsureStruct_optListVal_struct_setter&& optListVal_) {
    optListVal_ref() = std::forward<T_MyStructEnsureStruct_optListVal_struct_setter>(optListVal_);
    return __fbthrift_field_optListVal;
  }

  const ::test::fixtures::patch::MyEnum* get_optEnumVal() const& {
    return optEnumVal_ref() ? std::addressof(__fbthrift_field_optEnumVal) : nullptr;
  }

  ::test::fixtures::patch::MyEnum* get_optEnumVal() & {
    return optEnumVal_ref() ? std::addressof(__fbthrift_field_optEnumVal) : nullptr;
  }
  ::test::fixtures::patch::MyEnum* get_optEnumVal() && = delete;

  [[deprecated("Use `FOO.optEnumVal_ref() = BAR;` instead of `FOO.set_optEnumVal(BAR);`")]]
  ::test::fixtures::patch::MyEnum& set_optEnumVal(::test::fixtures::patch::MyEnum optEnumVal_) {
    optEnumVal_ref() = optEnumVal_;
    return __fbthrift_field_optEnumVal;
  }

  const folly::IOBuf* get_optBinaryVal() const& {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }

  folly::IOBuf* get_optBinaryVal() & {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }
  folly::IOBuf* get_optBinaryVal() && = delete;

  template <typename T_MyStructEnsureStruct_optBinaryVal_struct_setter = folly::IOBuf>
  [[deprecated("Use `FOO.optBinaryVal_ref() = BAR;` instead of `FOO.set_optBinaryVal(BAR);`")]]
  folly::IOBuf& set_optBinaryVal(T_MyStructEnsureStruct_optBinaryVal_struct_setter&& optBinaryVal_) {
    optBinaryVal_ref() = std::forward<T_MyStructEnsureStruct_optBinaryVal_struct_setter>(optBinaryVal_);
    return __fbthrift_field_optBinaryVal;
  }

  const ::std::string* get_optStringVal() const& {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }

  ::std::string* get_optStringVal() & {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }
  ::std::string* get_optStringVal() && = delete;

  template <typename T_MyStructEnsureStruct_optStringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.optStringVal_ref() = BAR;` instead of `FOO.set_optStringVal(BAR);`")]]
  ::std::string& set_optStringVal(T_MyStructEnsureStruct_optStringVal_struct_setter&& optStringVal_) {
    optStringVal_ref() = std::forward<T_MyStructEnsureStruct_optStringVal_struct_setter>(optStringVal_);
    return __fbthrift_field_optStringVal;
  }

  const double* get_optDoubleVal() const& {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }

  double* get_optDoubleVal() & {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }
  double* get_optDoubleVal() && = delete;

  [[deprecated("Use `FOO.optDoubleVal_ref() = BAR;` instead of `FOO.set_optDoubleVal(BAR);`")]]
  double& set_optDoubleVal(double optDoubleVal_) {
    optDoubleVal_ref() = optDoubleVal_;
    return __fbthrift_field_optDoubleVal;
  }

  const float* get_optFloatVal() const& {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }

  float* get_optFloatVal() & {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }
  float* get_optFloatVal() && = delete;

  [[deprecated("Use `FOO.optFloatVal_ref() = BAR;` instead of `FOO.set_optFloatVal(BAR);`")]]
  float& set_optFloatVal(float optFloatVal_) {
    optFloatVal_ref() = optFloatVal_;
    return __fbthrift_field_optFloatVal;
  }

  const ::std::int64_t* get_optI64Val() const& {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }

  ::std::int64_t* get_optI64Val() & {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }
  ::std::int64_t* get_optI64Val() && = delete;

  [[deprecated("Use `FOO.optI64Val_ref() = BAR;` instead of `FOO.set_optI64Val(BAR);`")]]
  ::std::int64_t& set_optI64Val(::std::int64_t optI64Val_) {
    optI64Val_ref() = optI64Val_;
    return __fbthrift_field_optI64Val;
  }

  const ::std::int32_t* get_optI32Val() const& {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }

  ::std::int32_t* get_optI32Val() & {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }
  ::std::int32_t* get_optI32Val() && = delete;

  [[deprecated("Use `FOO.optI32Val_ref() = BAR;` instead of `FOO.set_optI32Val(BAR);`")]]
  ::std::int32_t& set_optI32Val(::std::int32_t optI32Val_) {
    optI32Val_ref() = optI32Val_;
    return __fbthrift_field_optI32Val;
  }

  const ::std::int16_t* get_optI16Val() const& {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }

  ::std::int16_t* get_optI16Val() & {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }
  ::std::int16_t* get_optI16Val() && = delete;

  [[deprecated("Use `FOO.optI16Val_ref() = BAR;` instead of `FOO.set_optI16Val(BAR);`")]]
  ::std::int16_t& set_optI16Val(::std::int16_t optI16Val_) {
    optI16Val_ref() = optI16Val_;
    return __fbthrift_field_optI16Val;
  }

  const ::std::int8_t* get_optByteVal() const& {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }

  ::std::int8_t* get_optByteVal() & {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }
  ::std::int8_t* get_optByteVal() && = delete;

  [[deprecated("Use `FOO.optByteVal_ref() = BAR;` instead of `FOO.set_optByteVal(BAR);`")]]
  ::std::int8_t& set_optByteVal(::std::int8_t optByteVal_) {
    optByteVal_ref() = optByteVal_;
    return __fbthrift_field_optByteVal;
  }

  const bool* get_optBoolVal() const& {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }

  bool* get_optBoolVal() & {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }
  bool* get_optBoolVal() && = delete;

  [[deprecated("Use `FOO.optBoolVal_ref() = BAR;` instead of `FOO.set_optBoolVal(BAR);`")]]
  bool& set_optBoolVal(bool optBoolVal_) {
    optBoolVal_ref() = optBoolVal_;
    return __fbthrift_field_optBoolVal;
  }

  const ::test::fixtures::patch::MyEnum* get_enumVal() const& {
    return enumVal_ref() ? std::addressof(__fbthrift_field_enumVal) : nullptr;
  }

  ::test::fixtures::patch::MyEnum* get_enumVal() & {
    return enumVal_ref() ? std::addressof(__fbthrift_field_enumVal) : nullptr;
  }
  ::test::fixtures::patch::MyEnum* get_enumVal() && = delete;

  [[deprecated("Use `FOO.enumVal_ref() = BAR;` instead of `FOO.set_enumVal(BAR);`")]]
  ::test::fixtures::patch::MyEnum& set_enumVal(::test::fixtures::patch::MyEnum enumVal_) {
    enumVal_ref() = enumVal_;
    return __fbthrift_field_enumVal;
  }

  const folly::IOBuf* get_binaryVal() const& {
    return binaryVal_ref() ? std::addressof(__fbthrift_field_binaryVal) : nullptr;
  }

  folly::IOBuf* get_binaryVal() & {
    return binaryVal_ref() ? std::addressof(__fbthrift_field_binaryVal) : nullptr;
  }
  folly::IOBuf* get_binaryVal() && = delete;

  template <typename T_MyStructEnsureStruct_binaryVal_struct_setter = folly::IOBuf>
  [[deprecated("Use `FOO.binaryVal_ref() = BAR;` instead of `FOO.set_binaryVal(BAR);`")]]
  folly::IOBuf& set_binaryVal(T_MyStructEnsureStruct_binaryVal_struct_setter&& binaryVal_) {
    binaryVal_ref() = std::forward<T_MyStructEnsureStruct_binaryVal_struct_setter>(binaryVal_);
    return __fbthrift_field_binaryVal;
  }

  const ::std::string* get_stringVal() const& {
    return stringVal_ref() ? std::addressof(__fbthrift_field_stringVal) : nullptr;
  }

  ::std::string* get_stringVal() & {
    return stringVal_ref() ? std::addressof(__fbthrift_field_stringVal) : nullptr;
  }
  ::std::string* get_stringVal() && = delete;

  template <typename T_MyStructEnsureStruct_stringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringVal_ref() = BAR;` instead of `FOO.set_stringVal(BAR);`")]]
  ::std::string& set_stringVal(T_MyStructEnsureStruct_stringVal_struct_setter&& stringVal_) {
    stringVal_ref() = std::forward<T_MyStructEnsureStruct_stringVal_struct_setter>(stringVal_);
    return __fbthrift_field_stringVal;
  }

  const double* get_doubleVal() const& {
    return doubleVal_ref() ? std::addressof(__fbthrift_field_doubleVal) : nullptr;
  }

  double* get_doubleVal() & {
    return doubleVal_ref() ? std::addressof(__fbthrift_field_doubleVal) : nullptr;
  }
  double* get_doubleVal() && = delete;

  [[deprecated("Use `FOO.doubleVal_ref() = BAR;` instead of `FOO.set_doubleVal(BAR);`")]]
  double& set_doubleVal(double doubleVal_) {
    doubleVal_ref() = doubleVal_;
    return __fbthrift_field_doubleVal;
  }

  const float* get_floatVal() const& {
    return floatVal_ref() ? std::addressof(__fbthrift_field_floatVal) : nullptr;
  }

  float* get_floatVal() & {
    return floatVal_ref() ? std::addressof(__fbthrift_field_floatVal) : nullptr;
  }
  float* get_floatVal() && = delete;

  [[deprecated("Use `FOO.floatVal_ref() = BAR;` instead of `FOO.set_floatVal(BAR);`")]]
  float& set_floatVal(float floatVal_) {
    floatVal_ref() = floatVal_;
    return __fbthrift_field_floatVal;
  }

  const ::std::int64_t* get_i64Val() const& {
    return i64Val_ref() ? std::addressof(__fbthrift_field_i64Val) : nullptr;
  }

  ::std::int64_t* get_i64Val() & {
    return i64Val_ref() ? std::addressof(__fbthrift_field_i64Val) : nullptr;
  }
  ::std::int64_t* get_i64Val() && = delete;

  [[deprecated("Use `FOO.i64Val_ref() = BAR;` instead of `FOO.set_i64Val(BAR);`")]]
  ::std::int64_t& set_i64Val(::std::int64_t i64Val_) {
    i64Val_ref() = i64Val_;
    return __fbthrift_field_i64Val;
  }

  const ::std::int32_t* get_i32Val() const& {
    return i32Val_ref() ? std::addressof(__fbthrift_field_i32Val) : nullptr;
  }

  ::std::int32_t* get_i32Val() & {
    return i32Val_ref() ? std::addressof(__fbthrift_field_i32Val) : nullptr;
  }
  ::std::int32_t* get_i32Val() && = delete;

  [[deprecated("Use `FOO.i32Val_ref() = BAR;` instead of `FOO.set_i32Val(BAR);`")]]
  ::std::int32_t& set_i32Val(::std::int32_t i32Val_) {
    i32Val_ref() = i32Val_;
    return __fbthrift_field_i32Val;
  }

  const ::std::int16_t* get_i16Val() const& {
    return i16Val_ref() ? std::addressof(__fbthrift_field_i16Val) : nullptr;
  }

  ::std::int16_t* get_i16Val() & {
    return i16Val_ref() ? std::addressof(__fbthrift_field_i16Val) : nullptr;
  }
  ::std::int16_t* get_i16Val() && = delete;

  [[deprecated("Use `FOO.i16Val_ref() = BAR;` instead of `FOO.set_i16Val(BAR);`")]]
  ::std::int16_t& set_i16Val(::std::int16_t i16Val_) {
    i16Val_ref() = i16Val_;
    return __fbthrift_field_i16Val;
  }

  const ::std::int8_t* get_byteVal() const& {
    return byteVal_ref() ? std::addressof(__fbthrift_field_byteVal) : nullptr;
  }

  ::std::int8_t* get_byteVal() & {
    return byteVal_ref() ? std::addressof(__fbthrift_field_byteVal) : nullptr;
  }
  ::std::int8_t* get_byteVal() && = delete;

  [[deprecated("Use `FOO.byteVal_ref() = BAR;` instead of `FOO.set_byteVal(BAR);`")]]
  ::std::int8_t& set_byteVal(::std::int8_t byteVal_) {
    byteVal_ref() = byteVal_;
    return __fbthrift_field_byteVal;
  }

  const bool* get_boolVal() const& {
    return boolVal_ref() ? std::addressof(__fbthrift_field_boolVal) : nullptr;
  }

  bool* get_boolVal() & {
    return boolVal_ref() ? std::addressof(__fbthrift_field_boolVal) : nullptr;
  }
  bool* get_boolVal() && = delete;

  [[deprecated("Use `FOO.boolVal_ref() = BAR;` instead of `FOO.set_boolVal(BAR);`")]]
  bool& set_boolVal(bool boolVal_) {
    boolVal_ref() = boolVal_;
    return __fbthrift_field_boolVal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructEnsureStruct>;
  friend void swap(MyStructEnsureStruct& a, MyStructEnsureStruct& b);
};

template <class Protocol_>
unsigned long MyStructEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStructPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::MyStructFieldPatch patchPrior__arg, ::test::fixtures::patch::MyStructEnsureStruct ensure__arg, ::test::fixtures::patch::MyStructFieldPatch patch__arg);

  MyStructPatchStruct(MyStructPatchStruct&&) noexcept;
  MyStructPatchStruct(const MyStructPatchStruct& src);


  MyStructPatchStruct& operator=(MyStructPatchStruct&&) noexcept;
  MyStructPatchStruct& operator=(const MyStructPatchStruct& src);

  ~MyStructPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyStructFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::MyStructEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyStructFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const MyStructPatchStruct&) const;
  bool operator<(const MyStructPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::MyStructEnsureStruct& get_ensure() const&;
  ::test::fixtures::patch::MyStructEnsureStruct get_ensure() &&;

  template <typename T_MyStructPatchStruct_ensure_struct_setter = ::test::fixtures::patch::MyStructEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::MyStructEnsureStruct& set_ensure(T_MyStructPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyStructPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructPatchStruct>;
  friend void swap(MyStructPatchStruct& a, MyStructPatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyStructPatchStruct>, ::test::fixtures::patch::MyStructPatchStruct>;


class RecursiveField1PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::test::fixtures::patch::Recursive>>,
    ::apache::thrift::type::bool_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RecursiveField1PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  RecursiveField1PatchStruct() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursiveField1PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> assign__arg, bool clear__arg);

  RecursiveField1PatchStruct(RecursiveField1PatchStruct&&) noexcept;

  RecursiveField1PatchStruct(const RecursiveField1PatchStruct& src);


  RecursiveField1PatchStruct& operator=(RecursiveField1PatchStruct&&) noexcept;
  RecursiveField1PatchStruct& operator=(const RecursiveField1PatchStruct& src);
 private:
  ::std::map<::std::string, ::test::fixtures::patch::Recursive> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RecursiveField1PatchStruct&) const;
  bool operator<(const RecursiveField1PatchStruct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }
  const ::std::map<::std::string, ::test::fixtures::patch::Recursive>* get_assign() const&;
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>* get_assign() &;
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>* get_assign() && = delete;

  template <typename T_RecursiveField1PatchStruct_assign_struct_setter = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>& set_assign(T_RecursiveField1PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_RecursiveField1PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RecursiveField1PatchStruct>;
  friend void swap(RecursiveField1PatchStruct& a, RecursiveField1PatchStruct& b);
};

template <class Protocol_>
unsigned long RecursiveField1PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using RecursiveField1Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::test::fixtures::patch::RecursiveField1PatchStruct>;


class RecursiveFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::nodes
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RecursiveFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  RecursiveFieldPatchStruct() :
      __fbthrift_field_nodes(::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>())) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursiveFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch> nodes__arg);

  RecursiveFieldPatchStruct(RecursiveFieldPatchStruct&&) noexcept;
  RecursiveFieldPatchStruct(const RecursiveFieldPatchStruct& src);


  RecursiveFieldPatchStruct& operator=(RecursiveFieldPatchStruct&&) noexcept;
  RecursiveFieldPatchStruct& operator=(const RecursiveFieldPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch> __fbthrift_field_nodes;

 public:

  bool operator==(const RecursiveFieldPatchStruct&) const;
  bool operator<(const RecursiveFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> nodes_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_nodes, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> nodes_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_nodes), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> nodes_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_nodes, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> nodes_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_nodes), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> nodes() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_nodes, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> nodes() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_nodes), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> nodes() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_nodes, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> nodes() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_nodes), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RecursiveFieldPatchStruct>;
  friend void swap(RecursiveFieldPatchStruct& a, RecursiveFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long RecursiveFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using RecursiveFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, ::test::fixtures::patch::RecursiveFieldPatchStruct>;


class RecursiveEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::nodes
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::test::fixtures::patch::Recursive>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RecursiveEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  RecursiveEnsureStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursiveEnsureStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> nodes__arg);

  RecursiveEnsureStruct(RecursiveEnsureStruct&&) noexcept;

  RecursiveEnsureStruct(const RecursiveEnsureStruct& src);


  RecursiveEnsureStruct& operator=(RecursiveEnsureStruct&&) noexcept;
  RecursiveEnsureStruct& operator=(const RecursiveEnsureStruct& src);
 private:
  ::std::map<::std::string, ::test::fixtures::patch::Recursive> __fbthrift_field_nodes;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RecursiveEnsureStruct&) const;
  bool operator<(const RecursiveEnsureStruct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> nodes_ref() const& {
    return {this->__fbthrift_field_nodes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> nodes_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_nodes), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> nodes_ref() & {
    return {this->__fbthrift_field_nodes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> nodes_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_nodes), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> nodes() const& {
    return {this->__fbthrift_field_nodes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> nodes() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_nodes), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> nodes() & {
    return {this->__fbthrift_field_nodes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> nodes() && {
    return {static_cast<T&&>(this->__fbthrift_field_nodes), __isset.at(0), __isset.bit(0)};
  }
  const ::std::map<::std::string, ::test::fixtures::patch::Recursive>* get_nodes() const&;
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>* get_nodes() &;
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>* get_nodes() && = delete;

  template <typename T_RecursiveEnsureStruct_nodes_struct_setter = ::std::map<::std::string, ::test::fixtures::patch::Recursive>>
  [[deprecated("Use `FOO.nodes_ref() = BAR;` instead of `FOO.set_nodes(BAR);`")]]
  ::std::map<::std::string, ::test::fixtures::patch::Recursive>& set_nodes(T_RecursiveEnsureStruct_nodes_struct_setter&& nodes_) {
    nodes_ref() = std::forward<T_RecursiveEnsureStruct_nodes_struct_setter>(nodes_);
    return __fbthrift_field_nodes;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RecursiveEnsureStruct>;
  friend void swap(RecursiveEnsureStruct& a, RecursiveEnsureStruct& b);
};

template <class Protocol_>
unsigned long RecursiveEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class RecursivePatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::Recursive>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RecursivePatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  RecursivePatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursivePatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive> assign__arg, bool clear__arg, ::test::fixtures::patch::RecursiveFieldPatch patchPrior__arg, ::test::fixtures::patch::RecursiveEnsureStruct ensure__arg, ::test::fixtures::patch::RecursiveFieldPatch patch__arg);

  RecursivePatchStruct(RecursivePatchStruct&&) noexcept;
  RecursivePatchStruct(const RecursivePatchStruct& src);


  RecursivePatchStruct& operator=(RecursivePatchStruct&&) noexcept;
  RecursivePatchStruct& operator=(const RecursivePatchStruct& src);

  ~RecursivePatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::RecursiveFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::RecursiveEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::RecursiveFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const RecursivePatchStruct&) const;
  bool operator<(const RecursivePatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::RecursiveFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::RecursiveEnsureStruct& get_ensure() const&;
  ::test::fixtures::patch::RecursiveEnsureStruct get_ensure() &&;

  template <typename T_RecursivePatchStruct_ensure_struct_setter = ::test::fixtures::patch::RecursiveEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::RecursiveEnsureStruct& set_ensure(T_RecursivePatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_RecursivePatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RecursivePatchStruct>;
  friend void swap(RecursivePatchStruct& a, RecursivePatchStruct& b);
};

template <class Protocol_>
unsigned long RecursivePatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using RecursivePatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::RecursivePatchStruct>, ::test::fixtures::patch::RecursivePatchStruct>;


class LoopPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::Loop>,
    ::apache::thrift::type::bool_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LoopPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  LoopPatchStruct() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LoopPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> assign__arg, bool clear__arg);

  LoopPatchStruct(LoopPatchStruct&&) noexcept;

  LoopPatchStruct(const LoopPatchStruct& src);


  LoopPatchStruct& operator=(LoopPatchStruct&&) noexcept;
  LoopPatchStruct& operator=(const LoopPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;

 public:

  bool operator==(const LoopPatchStruct&) const;
  bool operator<(const LoopPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LoopPatchStruct>;
  friend void swap(LoopPatchStruct& a, LoopPatchStruct& b);
};

template <class Protocol_>
unsigned long LoopPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using LoopPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::test::fixtures::patch::LoopPatchStruct>;


class BarFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::loop
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BarFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BarFieldPatchStruct() :
      __fbthrift_field_loop(::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>())) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BarFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch> loop__arg);

  BarFieldPatchStruct(BarFieldPatchStruct&&) noexcept;
  BarFieldPatchStruct(const BarFieldPatchStruct& src);


  BarFieldPatchStruct& operator=(BarFieldPatchStruct&&) noexcept;
  BarFieldPatchStruct& operator=(const BarFieldPatchStruct& src);
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch> __fbthrift_field_loop;

 public:

  bool operator==(const BarFieldPatchStruct&) const;
  bool operator<(const BarFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> loop_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_loop, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> loop_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_loop), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> loop_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_loop, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> loop_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_loop), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> loop() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_loop, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> loop() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_loop), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> loop() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_loop, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> loop() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_loop), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BarFieldPatchStruct>;
  friend void swap(BarFieldPatchStruct& a, BarFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long BarFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using BarFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, ::test::fixtures::patch::BarFieldPatchStruct>;


class BarEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::loop
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,-1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::Loop>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BarEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BarEnsureStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BarEnsureStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> loop__arg);

  BarEnsureStruct(BarEnsureStruct&&) noexcept;

  BarEnsureStruct(const BarEnsureStruct& src);


  BarEnsureStruct& operator=(BarEnsureStruct&&) noexcept;
  BarEnsureStruct& operator=(const BarEnsureStruct& src);
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> __fbthrift_field_loop;

 public:

  bool operator==(const BarEnsureStruct&) const;
  bool operator<(const BarEnsureStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> loop_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_loop};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> loop_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_loop)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> loop_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_loop};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> loop_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_loop)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> loop() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_loop};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> loop() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_loop)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> loop() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_loop};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> loop() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_loop)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BarEnsureStruct>;
  friend void swap(BarEnsureStruct& a, BarEnsureStruct& b);
};

template <class Protocol_>
unsigned long BarEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class BarPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::patch::Bar>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::BarFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::patch::BarEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::BarFieldPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = BarPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BarPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BarPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar> assign__arg, bool clear__arg, ::test::fixtures::patch::BarFieldPatch patchPrior__arg, ::test::fixtures::patch::BarEnsureStruct ensure__arg, ::test::fixtures::patch::BarFieldPatch patch__arg);

  BarPatchStruct(BarPatchStruct&&) noexcept;
  BarPatchStruct(const BarPatchStruct& src);


  BarPatchStruct& operator=(BarPatchStruct&&) noexcept;
  BarPatchStruct& operator=(const BarPatchStruct& src);

  ~BarPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::BarFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::BarEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::BarFieldPatch __fbthrift_field_patch;

 public:

  bool operator==(const BarPatchStruct&) const;
  bool operator<(const BarPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::patch::BarFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::BarEnsureStruct& get_ensure() const&;
  ::test::fixtures::patch::BarEnsureStruct get_ensure() &&;

  template <typename T_BarPatchStruct_ensure_struct_setter = ::test::fixtures::patch::BarEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::BarEnsureStruct& set_ensure(T_BarPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_BarPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BarPatchStruct>;
  friend void swap(BarPatchStruct& a, BarPatchStruct& b);
};

template <class Protocol_>
unsigned long BarPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using BarPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::BarPatchStruct>, ::test::fixtures::patch::BarPatchStruct>;


}}} // test::fixtures::patch

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::patch::InnerUnion::Type> {
  using type = ::test::fixtures::patch::InnerUnion::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};

template <> struct TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::patch::MyUnion::Type> {
  using type = ::test::fixtures::patch::MyUnion::Type;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
