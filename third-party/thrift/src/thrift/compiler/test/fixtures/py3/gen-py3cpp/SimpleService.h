/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/py3/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/SimpleServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_types.h"
#include "thrift/annotation/gen-py3cpp/cpp_types.h"
#include "thrift/annotation/gen-py3cpp/meta_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace py3 { namespace simple {
class SimpleService;
class SimpleServiceAsyncProcessor;

class SimpleServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
}} // py3::simple

namespace apache::thrift {
template <>
class ServiceHandler<::py3::simple::SimpleService> : public apache::thrift::ServerInterface {
 public:
  std::string_view getGeneratedName() const override { return "SimpleService"; }

  typedef ::py3::simple::SimpleServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual ::std::int32_t sync_get_five();
  [[deprecated("Use sync_get_five instead")]] virtual ::std::int32_t get_five();
  virtual folly::Future<::std::int32_t> future_get_five();
  virtual folly::SemiFuture<::std::int32_t> semifuture_get_five();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_get_five();
  virtual folly::coro::Task<::std::int32_t> co_get_five(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_get_five(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback);
  virtual ::std::int32_t sync_add_five(::std::int32_t /*num*/);
  [[deprecated("Use sync_add_five instead")]] virtual ::std::int32_t add_five(::std::int32_t /*num*/);
  virtual folly::Future<::std::int32_t> future_add_five(::std::int32_t p_num);
  virtual folly::SemiFuture<::std::int32_t> semifuture_add_five(::std::int32_t p_num);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_add_five(::std::int32_t p_num);
  virtual folly::coro::Task<::std::int32_t> co_add_five(apache::thrift::RequestParams params, ::std::int32_t p_num);
#endif
  virtual void async_tm_add_five(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, ::std::int32_t p_num);
  virtual void sync_do_nothing();
  [[deprecated("Use sync_do_nothing instead")]] virtual void do_nothing();
  virtual folly::Future<folly::Unit> future_do_nothing();
  virtual folly::SemiFuture<folly::Unit> semifuture_do_nothing();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_do_nothing();
  virtual folly::coro::Task<void> co_do_nothing(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_do_nothing(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback);
  virtual void sync_concat(::std::string& /*_return*/, std::unique_ptr<::std::string> /*first*/, std::unique_ptr<::std::string> /*second*/);
  [[deprecated("Use sync_concat instead")]] virtual void concat(::std::string& /*_return*/, std::unique_ptr<::std::string> /*first*/, std::unique_ptr<::std::string> /*second*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_concat(std::unique_ptr<::std::string> p_first, std::unique_ptr<::std::string> p_second);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_concat(std::unique_ptr<::std::string> p_first, std::unique_ptr<::std::string> p_second);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_concat(std::unique_ptr<::std::string> p_first, std::unique_ptr<::std::string> p_second);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_concat(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_first, std::unique_ptr<::std::string> p_second);
#endif
  virtual void async_tm_concat(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>> callback, std::unique_ptr<::std::string> p_first, std::unique_ptr<::std::string> p_second);
  virtual ::std::int32_t sync_get_value(std::unique_ptr<::py3::simple::SimpleStruct> /*simple_struct*/);
  [[deprecated("Use sync_get_value instead")]] virtual ::std::int32_t get_value(std::unique_ptr<::py3::simple::SimpleStruct> /*simple_struct*/);
  virtual folly::Future<::std::int32_t> future_get_value(std::unique_ptr<::py3::simple::SimpleStruct> p_simple_struct);
  virtual folly::SemiFuture<::std::int32_t> semifuture_get_value(std::unique_ptr<::py3::simple::SimpleStruct> p_simple_struct);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_get_value(std::unique_ptr<::py3::simple::SimpleStruct> p_simple_struct);
  virtual folly::coro::Task<::std::int32_t> co_get_value(apache::thrift::RequestParams params, std::unique_ptr<::py3::simple::SimpleStruct> p_simple_struct);
#endif
  virtual void async_tm_get_value(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::py3::simple::SimpleStruct> p_simple_struct);
  virtual bool sync_negate(bool /*input*/);
  [[deprecated("Use sync_negate instead")]] virtual bool negate(bool /*input*/);
  virtual folly::Future<bool> future_negate(bool p_input);
  virtual folly::SemiFuture<bool> semifuture_negate(bool p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<bool> co_negate(bool p_input);
  virtual folly::coro::Task<bool> co_negate(apache::thrift::RequestParams params, bool p_input);
#endif
  virtual void async_tm_negate(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, bool p_input);
  virtual ::std::int8_t sync_tiny(::std::int8_t /*input*/);
  [[deprecated("Use sync_tiny instead")]] virtual ::std::int8_t tiny(::std::int8_t /*input*/);
  virtual folly::Future<::std::int8_t> future_tiny(::std::int8_t p_input);
  virtual folly::SemiFuture<::std::int8_t> semifuture_tiny(::std::int8_t p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int8_t> co_tiny(::std::int8_t p_input);
  virtual folly::coro::Task<::std::int8_t> co_tiny(apache::thrift::RequestParams params, ::std::int8_t p_input);
#endif
  virtual void async_tm_tiny(std::unique_ptr<apache::thrift::HandlerCallback<::std::int8_t>> callback, ::std::int8_t p_input);
  virtual ::std::int16_t sync_small(::std::int16_t /*input*/);
  [[deprecated("Use sync_small instead")]] virtual ::std::int16_t small(::std::int16_t /*input*/);
  virtual folly::Future<::std::int16_t> future_small(::std::int16_t p_input);
  virtual folly::SemiFuture<::std::int16_t> semifuture_small(::std::int16_t p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int16_t> co_small(::std::int16_t p_input);
  virtual folly::coro::Task<::std::int16_t> co_small(apache::thrift::RequestParams params, ::std::int16_t p_input);
#endif
  virtual void async_tm_small(std::unique_ptr<apache::thrift::HandlerCallback<::std::int16_t>> callback, ::std::int16_t p_input);
  virtual ::std::int64_t sync_big(::std::int64_t /*input*/);
  [[deprecated("Use sync_big instead")]] virtual ::std::int64_t big(::std::int64_t /*input*/);
  virtual folly::Future<::std::int64_t> future_big(::std::int64_t p_input);
  virtual folly::SemiFuture<::std::int64_t> semifuture_big(::std::int64_t p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int64_t> co_big(::std::int64_t p_input);
  virtual folly::coro::Task<::std::int64_t> co_big(apache::thrift::RequestParams params, ::std::int64_t p_input);
#endif
  virtual void async_tm_big(std::unique_ptr<apache::thrift::HandlerCallback<::std::int64_t>> callback, ::std::int64_t p_input);
  virtual double sync_two(double /*input*/);
  [[deprecated("Use sync_two instead")]] virtual double two(double /*input*/);
  virtual folly::Future<double> future_two(double p_input);
  virtual folly::SemiFuture<double> semifuture_two(double p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<double> co_two(double p_input);
  virtual folly::coro::Task<double> co_two(apache::thrift::RequestParams params, double p_input);
#endif
  virtual void async_tm_two(std::unique_ptr<apache::thrift::HandlerCallback<double>> callback, double p_input);
  virtual void sync_expected_exception();
  [[deprecated("Use sync_expected_exception instead")]] virtual void expected_exception();
  virtual folly::Future<folly::Unit> future_expected_exception();
  virtual folly::SemiFuture<folly::Unit> semifuture_expected_exception();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_expected_exception();
  virtual folly::coro::Task<void> co_expected_exception(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_expected_exception(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback);
  virtual ::std::int32_t sync_unexpected_exception();
  [[deprecated("Use sync_unexpected_exception instead")]] virtual ::std::int32_t unexpected_exception();
  virtual folly::Future<::std::int32_t> future_unexpected_exception();
  virtual folly::SemiFuture<::std::int32_t> semifuture_unexpected_exception();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_unexpected_exception();
  virtual folly::coro::Task<::std::int32_t> co_unexpected_exception(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_unexpected_exception(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback);
  virtual ::std::int32_t sync_sum_i16_list(std::unique_ptr<::std::vector<::std::int16_t>> /*numbers*/);
  [[deprecated("Use sync_sum_i16_list instead")]] virtual ::std::int32_t sum_i16_list(std::unique_ptr<::std::vector<::std::int16_t>> /*numbers*/);
  virtual folly::Future<::std::int32_t> future_sum_i16_list(std::unique_ptr<::std::vector<::std::int16_t>> p_numbers);
  virtual folly::SemiFuture<::std::int32_t> semifuture_sum_i16_list(std::unique_ptr<::std::vector<::std::int16_t>> p_numbers);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_sum_i16_list(std::unique_ptr<::std::vector<::std::int16_t>> p_numbers);
  virtual folly::coro::Task<::std::int32_t> co_sum_i16_list(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::int16_t>> p_numbers);
#endif
  virtual void async_tm_sum_i16_list(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::std::vector<::std::int16_t>> p_numbers);
  virtual ::std::int32_t sync_sum_i32_list(std::unique_ptr<::std::vector<::std::int32_t>> /*numbers*/);
  [[deprecated("Use sync_sum_i32_list instead")]] virtual ::std::int32_t sum_i32_list(std::unique_ptr<::std::vector<::std::int32_t>> /*numbers*/);
  virtual folly::Future<::std::int32_t> future_sum_i32_list(std::unique_ptr<::std::vector<::std::int32_t>> p_numbers);
  virtual folly::SemiFuture<::std::int32_t> semifuture_sum_i32_list(std::unique_ptr<::std::vector<::std::int32_t>> p_numbers);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_sum_i32_list(std::unique_ptr<::std::vector<::std::int32_t>> p_numbers);
  virtual folly::coro::Task<::std::int32_t> co_sum_i32_list(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::int32_t>> p_numbers);
#endif
  virtual void async_tm_sum_i32_list(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::std::vector<::std::int32_t>> p_numbers);
  virtual ::std::int32_t sync_sum_i64_list(std::unique_ptr<::std::vector<::std::int64_t>> /*numbers*/);
  [[deprecated("Use sync_sum_i64_list instead")]] virtual ::std::int32_t sum_i64_list(std::unique_ptr<::std::vector<::std::int64_t>> /*numbers*/);
  virtual folly::Future<::std::int32_t> future_sum_i64_list(std::unique_ptr<::std::vector<::std::int64_t>> p_numbers);
  virtual folly::SemiFuture<::std::int32_t> semifuture_sum_i64_list(std::unique_ptr<::std::vector<::std::int64_t>> p_numbers);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_sum_i64_list(std::unique_ptr<::std::vector<::std::int64_t>> p_numbers);
  virtual folly::coro::Task<::std::int32_t> co_sum_i64_list(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::int64_t>> p_numbers);
#endif
  virtual void async_tm_sum_i64_list(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::std::vector<::std::int64_t>> p_numbers);
  virtual void sync_concat_many(::std::string& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/);
  [[deprecated("Use sync_concat_many instead")]] virtual void concat_many(::std::string& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_concat_many(std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_concat_many(std::unique_ptr<::std::vector<::std::string>> p_words);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_concat_many(std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_concat_many(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::string>> p_words);
#endif
  virtual void async_tm_concat_many(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>> callback, std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual ::std::int32_t sync_count_structs(std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> /*items*/);
  [[deprecated("Use sync_count_structs instead")]] virtual ::std::int32_t count_structs(std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> /*items*/);
  virtual folly::Future<::std::int32_t> future_count_structs(std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> p_items);
  virtual folly::SemiFuture<::std::int32_t> semifuture_count_structs(std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> p_items);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_count_structs(std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> p_items);
  virtual folly::coro::Task<::std::int32_t> co_count_structs(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> p_items);
#endif
  virtual void async_tm_count_structs(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> p_items);
  virtual ::std::int32_t sync_sum_set(std::unique_ptr<::std::set<::std::int32_t>> /*numbers*/);
  [[deprecated("Use sync_sum_set instead")]] virtual ::std::int32_t sum_set(std::unique_ptr<::std::set<::std::int32_t>> /*numbers*/);
  virtual folly::Future<::std::int32_t> future_sum_set(std::unique_ptr<::std::set<::std::int32_t>> p_numbers);
  virtual folly::SemiFuture<::std::int32_t> semifuture_sum_set(std::unique_ptr<::std::set<::std::int32_t>> p_numbers);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_sum_set(std::unique_ptr<::std::set<::std::int32_t>> p_numbers);
  virtual folly::coro::Task<::std::int32_t> co_sum_set(apache::thrift::RequestParams params, std::unique_ptr<::std::set<::std::int32_t>> p_numbers);
#endif
  virtual void async_tm_sum_set(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::std::set<::std::int32_t>> p_numbers);
  virtual bool sync_contains_word(std::unique_ptr<::std::set<::std::string>> /*words*/, std::unique_ptr<::std::string> /*word*/);
  [[deprecated("Use sync_contains_word instead")]] virtual bool contains_word(std::unique_ptr<::std::set<::std::string>> /*words*/, std::unique_ptr<::std::string> /*word*/);
  virtual folly::Future<bool> future_contains_word(std::unique_ptr<::std::set<::std::string>> p_words, std::unique_ptr<::std::string> p_word);
  virtual folly::SemiFuture<bool> semifuture_contains_word(std::unique_ptr<::std::set<::std::string>> p_words, std::unique_ptr<::std::string> p_word);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<bool> co_contains_word(std::unique_ptr<::std::set<::std::string>> p_words, std::unique_ptr<::std::string> p_word);
  virtual folly::coro::Task<bool> co_contains_word(apache::thrift::RequestParams params, std::unique_ptr<::std::set<::std::string>> p_words, std::unique_ptr<::std::string> p_word);
#endif
  virtual void async_tm_contains_word(std::unique_ptr<apache::thrift::HandlerCallback<bool>> callback, std::unique_ptr<::std::set<::std::string>> p_words, std::unique_ptr<::std::string> p_word);
  virtual void sync_get_map_value(::std::string& /*_return*/, std::unique_ptr<::std::map<::std::string, ::std::string>> /*words*/, std::unique_ptr<::std::string> /*key*/);
  [[deprecated("Use sync_get_map_value instead")]] virtual void get_map_value(::std::string& /*_return*/, std::unique_ptr<::std::map<::std::string, ::std::string>> /*words*/, std::unique_ptr<::std::string> /*key*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_get_map_value(std::unique_ptr<::std::map<::std::string, ::std::string>> p_words, std::unique_ptr<::std::string> p_key);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_get_map_value(std::unique_ptr<::std::map<::std::string, ::std::string>> p_words, std::unique_ptr<::std::string> p_key);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_get_map_value(std::unique_ptr<::std::map<::std::string, ::std::string>> p_words, std::unique_ptr<::std::string> p_key);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_get_map_value(apache::thrift::RequestParams params, std::unique_ptr<::std::map<::std::string, ::std::string>> p_words, std::unique_ptr<::std::string> p_key);
#endif
  virtual void async_tm_get_map_value(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>> callback, std::unique_ptr<::std::map<::std::string, ::std::string>> p_words, std::unique_ptr<::std::string> p_key);
  virtual ::std::int16_t sync_map_length(std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> /*items*/);
  [[deprecated("Use sync_map_length instead")]] virtual ::std::int16_t map_length(std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> /*items*/);
  virtual folly::Future<::std::int16_t> future_map_length(std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> p_items);
  virtual folly::SemiFuture<::std::int16_t> semifuture_map_length(std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> p_items);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int16_t> co_map_length(std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> p_items);
  virtual folly::coro::Task<::std::int16_t> co_map_length(apache::thrift::RequestParams params, std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> p_items);
#endif
  virtual void async_tm_map_length(std::unique_ptr<apache::thrift::HandlerCallback<::std::int16_t>> callback, std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> p_items);
  virtual ::std::int16_t sync_sum_map_values(std::unique_ptr<::std::map<::std::string, ::std::int16_t>> /*items*/);
  [[deprecated("Use sync_sum_map_values instead")]] virtual ::std::int16_t sum_map_values(std::unique_ptr<::std::map<::std::string, ::std::int16_t>> /*items*/);
  virtual folly::Future<::std::int16_t> future_sum_map_values(std::unique_ptr<::std::map<::std::string, ::std::int16_t>> p_items);
  virtual folly::SemiFuture<::std::int16_t> semifuture_sum_map_values(std::unique_ptr<::std::map<::std::string, ::std::int16_t>> p_items);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int16_t> co_sum_map_values(std::unique_ptr<::std::map<::std::string, ::std::int16_t>> p_items);
  virtual folly::coro::Task<::std::int16_t> co_sum_map_values(apache::thrift::RequestParams params, std::unique_ptr<::std::map<::std::string, ::std::int16_t>> p_items);
#endif
  virtual void async_tm_sum_map_values(std::unique_ptr<apache::thrift::HandlerCallback<::std::int16_t>> callback, std::unique_ptr<::std::map<::std::string, ::std::int16_t>> p_items);
  virtual ::std::int32_t sync_complex_sum_i32(std::unique_ptr<::py3::simple::ComplexStruct> /*counter*/);
  [[deprecated("Use sync_complex_sum_i32 instead")]] virtual ::std::int32_t complex_sum_i32(std::unique_ptr<::py3::simple::ComplexStruct> /*counter*/);
  virtual folly::Future<::std::int32_t> future_complex_sum_i32(std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
  virtual folly::SemiFuture<::std::int32_t> semifuture_complex_sum_i32(std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_complex_sum_i32(std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
  virtual folly::coro::Task<::std::int32_t> co_complex_sum_i32(apache::thrift::RequestParams params, std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
#endif
  virtual void async_tm_complex_sum_i32(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
  virtual void sync_repeat_name(::std::string& /*_return*/, std::unique_ptr<::py3::simple::ComplexStruct> /*counter*/);
  [[deprecated("Use sync_repeat_name instead")]] virtual void repeat_name(::std::string& /*_return*/, std::unique_ptr<::py3::simple::ComplexStruct> /*counter*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_repeat_name(std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_repeat_name(std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_repeat_name(std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_repeat_name(apache::thrift::RequestParams params, std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
#endif
  virtual void async_tm_repeat_name(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>> callback, std::unique_ptr<::py3::simple::ComplexStruct> p_counter);
  virtual void sync_get_struct(::py3::simple::SimpleStruct& /*_return*/);
  [[deprecated("Use sync_get_struct instead")]] virtual void get_struct(::py3::simple::SimpleStruct& /*_return*/);
  virtual folly::Future<std::unique_ptr<::py3::simple::SimpleStruct>> future_get_struct();
  virtual folly::SemiFuture<std::unique_ptr<::py3::simple::SimpleStruct>> semifuture_get_struct();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::py3::simple::SimpleStruct>> co_get_struct();
  virtual folly::coro::Task<std::unique_ptr<::py3::simple::SimpleStruct>> co_get_struct(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_get_struct(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::py3::simple::SimpleStruct>>> callback);
  virtual void sync_fib(::std::vector<::std::int32_t>& /*_return*/, ::std::int16_t /*n*/);
  [[deprecated("Use sync_fib instead")]] virtual void fib(::std::vector<::std::int32_t>& /*_return*/, ::std::int16_t /*n*/);
  virtual folly::Future<std::unique_ptr<::std::vector<::std::int32_t>>> future_fib(::std::int16_t p_n);
  virtual folly::SemiFuture<std::unique_ptr<::std::vector<::std::int32_t>>> semifuture_fib(::std::int16_t p_n);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::std::int32_t>>> co_fib(::std::int16_t p_n);
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::std::int32_t>>> co_fib(apache::thrift::RequestParams params, ::std::int16_t p_n);
#endif
  virtual void async_tm_fib(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::vector<::std::int32_t>>>> callback, ::std::int16_t p_n);
  virtual void sync_unique_words(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/);
  [[deprecated("Use sync_unique_words instead")]] virtual void unique_words(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/);
  virtual folly::Future<std::unique_ptr<::std::set<::std::string>>> future_unique_words(std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual folly::SemiFuture<std::unique_ptr<::std::set<::std::string>>> semifuture_unique_words(std::unique_ptr<::std::vector<::std::string>> p_words);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::string>>> co_unique_words(std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::string>>> co_unique_words(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::string>> p_words);
#endif
  virtual void async_tm_unique_words(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::set<::std::string>>>> callback, std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual void sync_words_count(::std::map<::std::string, ::std::int16_t>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/);
  [[deprecated("Use sync_words_count instead")]] virtual void words_count(::std::map<::std::string, ::std::int16_t>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/);
  virtual folly::Future<std::unique_ptr<::std::map<::std::string, ::std::int16_t>>> future_words_count(std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual folly::SemiFuture<std::unique_ptr<::std::map<::std::string, ::std::int16_t>>> semifuture_words_count(std::unique_ptr<::std::vector<::std::string>> p_words);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::string, ::std::int16_t>>> co_words_count(std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::string, ::std::int16_t>>> co_words_count(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::string>> p_words);
#endif
  virtual void async_tm_words_count(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::map<::std::string, ::std::int16_t>>>> callback, std::unique_ptr<::std::vector<::std::string>> p_words);
  virtual ::py3::simple::AnEnum sync_set_enum(::py3::simple::AnEnum /*in_enum*/);
  [[deprecated("Use sync_set_enum instead")]] virtual ::py3::simple::AnEnum set_enum(::py3::simple::AnEnum /*in_enum*/);
  virtual folly::Future<::py3::simple::AnEnum> future_set_enum(::py3::simple::AnEnum p_in_enum);
  virtual folly::SemiFuture<::py3::simple::AnEnum> semifuture_set_enum(::py3::simple::AnEnum p_in_enum);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::py3::simple::AnEnum> co_set_enum(::py3::simple::AnEnum p_in_enum);
  virtual folly::coro::Task<::py3::simple::AnEnum> co_set_enum(apache::thrift::RequestParams params, ::py3::simple::AnEnum p_in_enum);
#endif
  virtual void async_tm_set_enum(std::unique_ptr<apache::thrift::HandlerCallback<::py3::simple::AnEnum>> callback, ::py3::simple::AnEnum p_in_enum);
  virtual void sync_list_of_lists(::std::vector<::std::vector<::std::int32_t>>& /*_return*/, ::std::int16_t /*num_lists*/, ::std::int16_t /*num_items*/);
  [[deprecated("Use sync_list_of_lists instead")]] virtual void list_of_lists(::std::vector<::std::vector<::std::int32_t>>& /*_return*/, ::std::int16_t /*num_lists*/, ::std::int16_t /*num_items*/);
  virtual folly::Future<std::unique_ptr<::std::vector<::std::vector<::std::int32_t>>>> future_list_of_lists(::std::int16_t p_num_lists, ::std::int16_t p_num_items);
  virtual folly::SemiFuture<std::unique_ptr<::std::vector<::std::vector<::std::int32_t>>>> semifuture_list_of_lists(::std::int16_t p_num_lists, ::std::int16_t p_num_items);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::std::vector<::std::int32_t>>>> co_list_of_lists(::std::int16_t p_num_lists, ::std::int16_t p_num_items);
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::std::vector<::std::int32_t>>>> co_list_of_lists(apache::thrift::RequestParams params, ::std::int16_t p_num_lists, ::std::int16_t p_num_items);
#endif
  virtual void async_tm_list_of_lists(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::vector<::std::vector<::std::int32_t>>>>> callback, ::std::int16_t p_num_lists, ::std::int16_t p_num_items);
  virtual void sync_word_character_frequency(::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& /*_return*/, std::unique_ptr<::std::string> /*sentence*/);
  [[deprecated("Use sync_word_character_frequency instead")]] virtual void word_character_frequency(::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& /*_return*/, std::unique_ptr<::std::string> /*sentence*/);
  virtual folly::Future<std::unique_ptr<::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>> future_word_character_frequency(std::unique_ptr<::std::string> p_sentence);
  virtual folly::SemiFuture<std::unique_ptr<::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>> semifuture_word_character_frequency(std::unique_ptr<::std::string> p_sentence);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>> co_word_character_frequency(std::unique_ptr<::std::string> p_sentence);
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>> co_word_character_frequency(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_sentence);
#endif
  virtual void async_tm_word_character_frequency(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>> callback, std::unique_ptr<::std::string> p_sentence);
  virtual void sync_list_of_sets(::std::vector<::std::set<::std::string>>& /*_return*/, std::unique_ptr<::std::string> /*some_words*/);
  [[deprecated("Use sync_list_of_sets instead")]] virtual void list_of_sets(::std::vector<::std::set<::std::string>>& /*_return*/, std::unique_ptr<::std::string> /*some_words*/);
  virtual folly::Future<std::unique_ptr<::std::vector<::std::set<::std::string>>>> future_list_of_sets(std::unique_ptr<::std::string> p_some_words);
  virtual folly::SemiFuture<std::unique_ptr<::std::vector<::std::set<::std::string>>>> semifuture_list_of_sets(std::unique_ptr<::std::string> p_some_words);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::std::set<::std::string>>>> co_list_of_sets(std::unique_ptr<::std::string> p_some_words);
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::std::set<::std::string>>>> co_list_of_sets(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_some_words);
#endif
  virtual void async_tm_list_of_sets(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::vector<::std::set<::std::string>>>>> callback, std::unique_ptr<::std::string> p_some_words);
  virtual ::std::int32_t sync_nested_map_argument(std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> /*struct_map*/);
  [[deprecated("Use sync_nested_map_argument instead")]] virtual ::std::int32_t nested_map_argument(std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> /*struct_map*/);
  virtual folly::Future<::std::int32_t> future_nested_map_argument(std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> p_struct_map);
  virtual folly::SemiFuture<::std::int32_t> semifuture_nested_map_argument(std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> p_struct_map);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_nested_map_argument(std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> p_struct_map);
  virtual folly::coro::Task<::std::int32_t> co_nested_map_argument(apache::thrift::RequestParams params, std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> p_struct_map);
#endif
  virtual void async_tm_nested_map_argument(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback, std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> p_struct_map);
  virtual void sync_make_sentence(::std::string& /*_return*/, std::unique_ptr<::std::vector<::std::vector<::std::string>>> /*word_chars*/);
  [[deprecated("Use sync_make_sentence instead")]] virtual void make_sentence(::std::string& /*_return*/, std::unique_ptr<::std::vector<::std::vector<::std::string>>> /*word_chars*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_make_sentence(std::unique_ptr<::std::vector<::std::vector<::std::string>>> p_word_chars);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_make_sentence(std::unique_ptr<::std::vector<::std::vector<::std::string>>> p_word_chars);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_make_sentence(std::unique_ptr<::std::vector<::std::vector<::std::string>>> p_word_chars);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_make_sentence(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::vector<::std::string>>> p_word_chars);
#endif
  virtual void async_tm_make_sentence(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>> callback, std::unique_ptr<::std::vector<::std::vector<::std::string>>> p_word_chars);
  virtual void sync_get_union(::std::set<::std::int32_t>& /*_return*/, std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> /*sets*/);
  [[deprecated("Use sync_get_union instead")]] virtual void get_union(::std::set<::std::int32_t>& /*_return*/, std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> /*sets*/);
  virtual folly::Future<std::unique_ptr<::std::set<::std::int32_t>>> future_get_union(std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> p_sets);
  virtual folly::SemiFuture<std::unique_ptr<::std::set<::std::int32_t>>> semifuture_get_union(std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> p_sets);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::int32_t>>> co_get_union(std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> p_sets);
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::int32_t>>> co_get_union(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> p_sets);
#endif
  virtual void async_tm_get_union(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::set<::std::int32_t>>>> callback, std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> p_sets);
  virtual void sync_get_keys(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> /*string_map*/);
  [[deprecated("Use sync_get_keys instead")]] virtual void get_keys(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> /*string_map*/);
  virtual folly::Future<std::unique_ptr<::std::set<::std::string>>> future_get_keys(std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> p_string_map);
  virtual folly::SemiFuture<std::unique_ptr<::std::set<::std::string>>> semifuture_get_keys(std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> p_string_map);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::string>>> co_get_keys(std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> p_string_map);
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::string>>> co_get_keys(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> p_string_map);
#endif
  virtual void async_tm_get_keys(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::set<::std::string>>>> callback, std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> p_string_map);
  virtual double sync_lookup_double(::std::int32_t /*key*/);
  [[deprecated("Use sync_lookup_double instead")]] virtual double lookup_double(::std::int32_t /*key*/);
  virtual folly::Future<double> future_lookup_double(::std::int32_t p_key);
  virtual folly::SemiFuture<double> semifuture_lookup_double(::std::int32_t p_key);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<double> co_lookup_double(::std::int32_t p_key);
  virtual folly::coro::Task<double> co_lookup_double(apache::thrift::RequestParams params, ::std::int32_t p_key);
#endif
  virtual void async_tm_lookup_double(std::unique_ptr<apache::thrift::HandlerCallback<double>> callback, ::std::int32_t p_key);
  virtual void sync_retrieve_binary(::std::string& /*_return*/, std::unique_ptr<::std::string> /*something*/);
  [[deprecated("Use sync_retrieve_binary instead")]] virtual void retrieve_binary(::std::string& /*_return*/, std::unique_ptr<::std::string> /*something*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_retrieve_binary(std::unique_ptr<::std::string> p_something);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_retrieve_binary(std::unique_ptr<::std::string> p_something);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_retrieve_binary(std::unique_ptr<::std::string> p_something);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_retrieve_binary(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_something);
#endif
  virtual void async_tm_retrieve_binary(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::string>>> callback, std::unique_ptr<::std::string> p_something);
  virtual void sync_contain_binary(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*binaries*/);
  [[deprecated("Use sync_contain_binary instead")]] virtual void contain_binary(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*binaries*/);
  virtual folly::Future<std::unique_ptr<::std::set<::std::string>>> future_contain_binary(std::unique_ptr<::std::vector<::std::string>> p_binaries);
  virtual folly::SemiFuture<std::unique_ptr<::std::set<::std::string>>> semifuture_contain_binary(std::unique_ptr<::std::vector<::std::string>> p_binaries);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::string>>> co_contain_binary(std::unique_ptr<::std::vector<::std::string>> p_binaries);
  virtual folly::coro::Task<std::unique_ptr<::std::set<::std::string>>> co_contain_binary(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::string>> p_binaries);
#endif
  virtual void async_tm_contain_binary(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::set<::std::string>>>> callback, std::unique_ptr<::std::vector<::std::string>> p_binaries);
  virtual void sync_contain_enum(::std::vector<::py3::simple::AnEnum>& /*_return*/, std::unique_ptr<::std::vector<::py3::simple::AnEnum>> /*the_enum*/);
  [[deprecated("Use sync_contain_enum instead")]] virtual void contain_enum(::std::vector<::py3::simple::AnEnum>& /*_return*/, std::unique_ptr<::std::vector<::py3::simple::AnEnum>> /*the_enum*/);
  virtual folly::Future<std::unique_ptr<::std::vector<::py3::simple::AnEnum>>> future_contain_enum(std::unique_ptr<::std::vector<::py3::simple::AnEnum>> p_the_enum);
  virtual folly::SemiFuture<std::unique_ptr<::std::vector<::py3::simple::AnEnum>>> semifuture_contain_enum(std::unique_ptr<::std::vector<::py3::simple::AnEnum>> p_the_enum);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::py3::simple::AnEnum>>> co_contain_enum(std::unique_ptr<::std::vector<::py3::simple::AnEnum>> p_the_enum);
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::py3::simple::AnEnum>>> co_contain_enum(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::py3::simple::AnEnum>> p_the_enum);
#endif
  virtual void async_tm_contain_enum(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::vector<::py3::simple::AnEnum>>>> callback, std::unique_ptr<::std::vector<::py3::simple::AnEnum>> p_the_enum);
  virtual void sync_get_binary_union_struct(::py3::simple::BinaryUnionStruct& /*_return*/, std::unique_ptr<::py3::simple::BinaryUnion> /*u*/);
  [[deprecated("Use sync_get_binary_union_struct instead")]] virtual void get_binary_union_struct(::py3::simple::BinaryUnionStruct& /*_return*/, std::unique_ptr<::py3::simple::BinaryUnion> /*u*/);
  virtual folly::Future<std::unique_ptr<::py3::simple::BinaryUnionStruct>> future_get_binary_union_struct(std::unique_ptr<::py3::simple::BinaryUnion> p_u);
  virtual folly::SemiFuture<std::unique_ptr<::py3::simple::BinaryUnionStruct>> semifuture_get_binary_union_struct(std::unique_ptr<::py3::simple::BinaryUnion> p_u);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::py3::simple::BinaryUnionStruct>> co_get_binary_union_struct(std::unique_ptr<::py3::simple::BinaryUnion> p_u);
  virtual folly::coro::Task<std::unique_ptr<::py3::simple::BinaryUnionStruct>> co_get_binary_union_struct(apache::thrift::RequestParams params, std::unique_ptr<::py3::simple::BinaryUnion> p_u);
#endif
  virtual void async_tm_get_binary_union_struct(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::py3::simple::BinaryUnionStruct>>> callback, std::unique_ptr<::py3::simple::BinaryUnion> p_u);
  virtual void sync_get_struct_hidden(::py3::simple::SimpleStruct& /*_return*/);
  [[deprecated("Use sync_get_struct_hidden instead")]] virtual void get_struct_hidden(::py3::simple::SimpleStruct& /*_return*/);
  virtual folly::Future<std::unique_ptr<::py3::simple::SimpleStruct>> future_get_struct_hidden();
  virtual folly::SemiFuture<std::unique_ptr<::py3::simple::SimpleStruct>> semifuture_get_struct_hidden();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::py3::simple::SimpleStruct>> co_get_struct_hidden();
  virtual folly::coro::Task<std::unique_ptr<::py3::simple::SimpleStruct>> co_get_struct_hidden(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_get_struct_hidden(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::py3::simple::SimpleStruct>>> callback);
 private:
  static ::py3::simple::SimpleServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_five{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_add_five{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_do_nothing{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_concat{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_value{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_negate{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_tiny{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_small{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_big{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_two{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_expected_exception{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_unexpected_exception{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum_i16_list{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum_i32_list{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum_i64_list{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_concat_many{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_count_structs{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum_set{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_contains_word{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_map_value{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_map_length{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum_map_values{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_complex_sum_i32{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_repeat_name{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_struct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_fib{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_unique_words{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_words_count{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_set_enum{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_list_of_lists{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_word_character_frequency{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_list_of_sets{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_nested_map_argument{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_make_sentence{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_union{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_keys{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_lookup_double{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_retrieve_binary{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_contain_binary{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_contain_enum{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_binary_union_struct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_get_struct_hidden{apache::thrift::detail::si::InvocationType::AsyncTm};
};

} // namespace apache::thrift

namespace py3 { namespace simple {
using SimpleServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<SimpleService> instead")]] = ::apache::thrift::ServiceHandler<SimpleService>;
}} // py3::simple
namespace py3 { namespace simple {
class SimpleServiceSvNull : public ::apache::thrift::ServiceHandler<SimpleService> {
 public:
  ::std::int32_t get_five() override;
  ::std::int32_t add_five(::std::int32_t /*num*/) override;
  void do_nothing() override;
  void concat(::std::string& /*_return*/, std::unique_ptr<::std::string> /*first*/, std::unique_ptr<::std::string> /*second*/) override;
  ::std::int32_t get_value(std::unique_ptr<::py3::simple::SimpleStruct> /*simple_struct*/) override;
  bool negate(bool /*input*/) override;
  ::std::int8_t tiny(::std::int8_t /*input*/) override;
  ::std::int16_t small(::std::int16_t /*input*/) override;
  ::std::int64_t big(::std::int64_t /*input*/) override;
  double two(double /*input*/) override;
  void expected_exception() override;
  ::std::int32_t unexpected_exception() override;
  ::std::int32_t sum_i16_list(std::unique_ptr<::std::vector<::std::int16_t>> /*numbers*/) override;
  ::std::int32_t sum_i32_list(std::unique_ptr<::std::vector<::std::int32_t>> /*numbers*/) override;
  ::std::int32_t sum_i64_list(std::unique_ptr<::std::vector<::std::int64_t>> /*numbers*/) override;
  void concat_many(::std::string& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/) override;
  ::std::int32_t count_structs(std::unique_ptr<::std::vector<::py3::simple::SimpleStruct>> /*items*/) override;
  ::std::int32_t sum_set(std::unique_ptr<::std::set<::std::int32_t>> /*numbers*/) override;
  bool contains_word(std::unique_ptr<::std::set<::std::string>> /*words*/, std::unique_ptr<::std::string> /*word*/) override;
  void get_map_value(::std::string& /*_return*/, std::unique_ptr<::std::map<::std::string, ::std::string>> /*words*/, std::unique_ptr<::std::string> /*key*/) override;
  ::std::int16_t map_length(std::unique_ptr<::std::map<::std::string, ::py3::simple::SimpleStruct>> /*items*/) override;
  ::std::int16_t sum_map_values(std::unique_ptr<::std::map<::std::string, ::std::int16_t>> /*items*/) override;
  ::std::int32_t complex_sum_i32(std::unique_ptr<::py3::simple::ComplexStruct> /*counter*/) override;
  void repeat_name(::std::string& /*_return*/, std::unique_ptr<::py3::simple::ComplexStruct> /*counter*/) override;
  void get_struct(::py3::simple::SimpleStruct& /*_return*/) override;
  void fib(::std::vector<::std::int32_t>& /*_return*/, ::std::int16_t /*n*/) override;
  void unique_words(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/) override;
  void words_count(::std::map<::std::string, ::std::int16_t>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*words*/) override;
  ::py3::simple::AnEnum set_enum(::py3::simple::AnEnum /*in_enum*/) override;
  void list_of_lists(::std::vector<::std::vector<::std::int32_t>>& /*_return*/, ::std::int16_t /*num_lists*/, ::std::int16_t /*num_items*/) override;
  void word_character_frequency(::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& /*_return*/, std::unique_ptr<::std::string> /*sentence*/) override;
  void list_of_sets(::std::vector<::std::set<::std::string>>& /*_return*/, std::unique_ptr<::std::string> /*some_words*/) override;
  ::std::int32_t nested_map_argument(std::unique_ptr<::std::map<::std::string, ::std::vector<::py3::simple::SimpleStruct>>> /*struct_map*/) override;
  void make_sentence(::std::string& /*_return*/, std::unique_ptr<::std::vector<::std::vector<::std::string>>> /*word_chars*/) override;
  void get_union(::std::set<::std::int32_t>& /*_return*/, std::unique_ptr<::std::vector<::std::set<::std::int32_t>>> /*sets*/) override;
  void get_keys(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::map<::std::string, ::std::string>>> /*string_map*/) override;
  double lookup_double(::std::int32_t /*key*/) override;
  void retrieve_binary(::std::string& /*_return*/, std::unique_ptr<::std::string> /*something*/) override;
  void contain_binary(::std::set<::std::string>& /*_return*/, std::unique_ptr<::std::vector<::std::string>> /*binaries*/) override;
  void contain_enum(::std::vector<::py3::simple::AnEnum>& /*_return*/, std::unique_ptr<::std::vector<::py3::simple::AnEnum>> /*the_enum*/) override;
  void get_binary_union_struct(::py3::simple::BinaryUnionStruct& /*_return*/, std::unique_ptr<::py3::simple::BinaryUnion> /*u*/) override;
  void get_struct_hidden(::py3::simple::SimpleStruct& /*_return*/) override;
};

class SimpleServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  const char* getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::py3::simple::SimpleService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<SimpleServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const SimpleServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const SimpleServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_five(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_five(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_five(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_five(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_add_five(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_add_five(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_add_five(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_add_five(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_do_nothing(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_do_nothing(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_do_nothing(apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_do_nothing(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_concat(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_concat(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_concat(apache::thrift::ContextStack* ctx, ::std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_concat(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_value(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_value(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_value(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_value(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_negate(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_negate(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_negate(apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_negate(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_tiny(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_tiny(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_tiny(apache::thrift::ContextStack* ctx, ::std::int8_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_tiny(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_small(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_small(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_small(apache::thrift::ContextStack* ctx, ::std::int16_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_small(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_big(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_big(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_big(apache::thrift::ContextStack* ctx, ::std::int64_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_big(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_two(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_two(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_two(apache::thrift::ContextStack* ctx, double const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_two(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_expected_exception(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_expected_exception(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_expected_exception(apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_expected_exception(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_unexpected_exception(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_unexpected_exception(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_unexpected_exception(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_unexpected_exception(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum_i16_list(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum_i16_list(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum_i16_list(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum_i16_list(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum_i32_list(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum_i32_list(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum_i32_list(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum_i32_list(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum_i64_list(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum_i64_list(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum_i64_list(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum_i64_list(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_concat_many(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_concat_many(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_concat_many(apache::thrift::ContextStack* ctx, ::std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_concat_many(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_count_structs(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_count_structs(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_count_structs(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_count_structs(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum_set(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum_set(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum_set(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum_set(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_contains_word(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_contains_word(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_contains_word(apache::thrift::ContextStack* ctx, bool const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_contains_word(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_map_value(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_map_value(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_map_value(apache::thrift::ContextStack* ctx, ::std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_map_value(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_map_length(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_map_length(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_map_length(apache::thrift::ContextStack* ctx, ::std::int16_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_map_length(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum_map_values(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum_map_values(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum_map_values(apache::thrift::ContextStack* ctx, ::std::int16_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum_map_values(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_complex_sum_i32(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_complex_sum_i32(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_complex_sum_i32(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_complex_sum_i32(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_repeat_name(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_repeat_name(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_repeat_name(apache::thrift::ContextStack* ctx, ::std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_repeat_name(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_struct(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_struct(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_struct(apache::thrift::ContextStack* ctx, ::py3::simple::SimpleStruct const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_struct(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_fib(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_fib(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_fib(apache::thrift::ContextStack* ctx, ::std::vector<::std::int32_t> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_fib(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_unique_words(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_unique_words(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_unique_words(apache::thrift::ContextStack* ctx, ::std::set<::std::string> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_unique_words(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_words_count(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_words_count(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_words_count(apache::thrift::ContextStack* ctx, ::std::map<::std::string, ::std::int16_t> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_words_count(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_set_enum(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_set_enum(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_set_enum(apache::thrift::ContextStack* ctx, ::py3::simple::AnEnum const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_set_enum(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_list_of_lists(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_list_of_lists(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_list_of_lists(apache::thrift::ContextStack* ctx, ::std::vector<::std::vector<::std::int32_t>> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_list_of_lists(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_word_character_frequency(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_word_character_frequency(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_word_character_frequency(apache::thrift::ContextStack* ctx, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_word_character_frequency(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_list_of_sets(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_list_of_sets(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_list_of_sets(apache::thrift::ContextStack* ctx, ::std::vector<::std::set<::std::string>> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_list_of_sets(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_nested_map_argument(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_nested_map_argument(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_nested_map_argument(apache::thrift::ContextStack* ctx, ::std::int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_nested_map_argument(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_make_sentence(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_make_sentence(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_make_sentence(apache::thrift::ContextStack* ctx, ::std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_make_sentence(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_union(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_union(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_union(apache::thrift::ContextStack* ctx, ::std::set<::std::int32_t> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_union(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_keys(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_keys(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_keys(apache::thrift::ContextStack* ctx, ::std::set<::std::string> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_keys(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_lookup_double(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_lookup_double(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_lookup_double(apache::thrift::ContextStack* ctx, double const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_lookup_double(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_retrieve_binary(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_retrieve_binary(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_retrieve_binary(apache::thrift::ContextStack* ctx, ::std::string const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_retrieve_binary(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_contain_binary(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_contain_binary(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_contain_binary(apache::thrift::ContextStack* ctx, ::std::set<::std::string> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_contain_binary(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_contain_enum(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_contain_enum(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_contain_enum(apache::thrift::ContextStack* ctx, ::std::vector<::py3::simple::AnEnum> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_contain_enum(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_binary_union_struct(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_binary_union_struct(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_binary_union_struct(apache::thrift::ContextStack* ctx, ::py3::simple::BinaryUnionStruct const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_binary_union_struct(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get_struct_hidden(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_get_struct_hidden(apache::thrift::ServerRequest&& serverRequest);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_get_struct_hidden(apache::thrift::ContextStack* ctx, ::py3::simple::SimpleStruct const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get_struct_hidden(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  SimpleServiceAsyncProcessor(::apache::thrift::ServiceHandler<::py3::simple::SimpleService>* iface) :
      iface_(iface) {}
  ~SimpleServiceAsyncProcessor() override {}
};

}} // py3::simple
