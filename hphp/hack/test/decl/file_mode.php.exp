Parsed decls:

{ Direct_decl_parser.classes =
  { "\\MyPartialClass" ->
    { Shallow_decl_defs.sc_mode = Mpartial; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([3:7-21], "\\MyPartialClass"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> } };
  funs =
  { "\\my_partial_function" ->
    { fe_pos = [5:10-29];
      fe_type =
      (Rwitness (root|file_mode.php line 5, characters 10-28),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = []; ft_params = [];
            ft_implicit_params =
            { capability =
              (Rhint (root|file_mode.php line 5, characters 10-28),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|file_mode.php line 5, characters 33-36),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Nonreactive }));
      fe_deprecated = None;  } };
  typedefs =
  { "\\MyPartialType" ->
    { td_pos = [7:6-19]; td_vis = Transparent; td_tparams = [];
      td_constraint = None;
      td_type =
      (Rhint (root|file_mode.php line 7, characters 22-27), (Tprim Tstring))
      } };
  consts =
  { "\\MY_PARTIAL_CONST" ->
    (Rhint (root|file_mode.php line 9, characters 7-19),
     (Tapply (([9:7-20], "\\MyPartialType"), []))) }
  }

They matched!
