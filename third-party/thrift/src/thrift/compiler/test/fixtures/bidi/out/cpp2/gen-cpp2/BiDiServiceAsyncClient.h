/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/bidi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/client_h.h>

#include "thrift/compiler/test/fixtures/bidi/gen-cpp2/module_types.h"
#include <thrift/lib/cpp2/async/ClientSinkBridge.h>
#include <thrift/lib/cpp2/async/Sink.h>
#include <thrift/lib/cpp2/async/ClientBufferedStream.h>

namespace apache { namespace thrift {
  class Cpp2RequestContext;
  namespace detail { namespace ac { struct ClientRequestContext; }}
  namespace transport { class THeader; }
}}

namespace cpp2 {
class BiDiService;
} // namespace cpp2
namespace apache::thrift {

namespace detail {

template<>
struct ServiceMethodTypesFootprint<::cpp2::BiDiService> {
  // The types that appear in the definitions of service methods.
  // e.g. if it appears as a type of an input, output, exception sink or stream
  // parameter of a client stub, it appears here,
  using TypesInMethods = folly::tag_t<
  void,
  ::std::int32_t,
  ::std::int16_t,
  ::std::string>;
};
} // namespace detail

template <>
class Client<::cpp2::BiDiService> : public apache::thrift::GeneratedAsyncClient {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::BiDiService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  std::string_view getServiceName() const noexcept override {
    return "BiDiService";
  }


 protected:
  void fbthrift_serialize_and_send_simple(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::BiDiClientCallback* callback, bool stealRpcOptions = false);
 public:
#if FOLLY_HAS_COROUTINES
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "simple"} */
  folly::coro::Task<apache::thrift::ClientBufferedStream<::std::int16_t>> co_simple();
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "simple"} */
  folly::coro::Task<apache::thrift::ClientBufferedStream<::std::int16_t>> co_simple(apache::thrift::RpcOptions& rpcOptions);
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "simple"} */
  static folly::exception_wrapper recv_wrapped_simple(apache::thrift::ClientBufferedStream<::std::int16_t>& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "simple"} */
  static apache::thrift::ClientBufferedStream<::std::int16_t> recv_simple(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "simple"} */
  virtual apache::thrift::ClientBufferedStream<::std::int16_t> recv_instance_simple(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "simple"} */
  virtual folly::exception_wrapper recv_instance_wrapped_simple(apache::thrift::ClientBufferedStream<::std::int16_t>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_simple(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_simple(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::BiDiClientCallback* callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> simpleCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
 protected:
  void fbthrift_serialize_and_send_response(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::BiDiClientCallback* callback, bool stealRpcOptions = false);
 public:
#if FOLLY_HAS_COROUTINES
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "response"} */
  folly::coro::Task<apache::thrift::ResponseAndClientBufferedStream<::std::string,::std::int16_t>> co_response();
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "response"} */
  folly::coro::Task<apache::thrift::ResponseAndClientBufferedStream<::std::string,::std::int16_t>> co_response(apache::thrift::RpcOptions& rpcOptions);
#endif // FOLLY_HAS_COROUTINES

  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "response"} */
  static folly::exception_wrapper recv_wrapped_response(apache::thrift::ResponseAndClientBufferedStream<::std::string,::std::int16_t>& _return, ::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "response"} */
  static apache::thrift::ResponseAndClientBufferedStream<::std::string,::std::int16_t> recv_response(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "response"} */
  virtual apache::thrift::ResponseAndClientBufferedStream<::std::string,::std::int16_t> recv_instance_response(::apache::thrift::ClientReceiveState& state);
  /** Glean {"file": "thrift/compiler/test/fixtures/bidi/src/module.thrift", "service": "BiDiService", "function": "response"} */
  virtual folly::exception_wrapper recv_instance_wrapped_response(apache::thrift::ResponseAndClientBufferedStream<::std::string,::std::int16_t>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  apache::thrift::SerializedRequest fbthrift_serialize_response(const RpcOptions& rpcOptions, apache::thrift::transport::THeader& header, apache::thrift::ContextStack* contextStack);
  template <typename RpcOptions>
  void fbthrift_send_response(apache::thrift::SerializedRequest&& request, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::BiDiClientCallback* callback, std::unique_ptr<folly::IOBuf> interceptorFrameworkMetadata);
  std::pair<::apache::thrift::ContextStack::UniquePtr, std::shared_ptr<::apache::thrift::transport::THeader>> responseCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
};

} // namespace apache::thrift

namespace cpp2 {
using BiDiServiceAsyncClient [[deprecated("Use apache::thrift::Client<BiDiService> instead")]] = ::apache::thrift::Client<BiDiService>;
} // namespace cpp2
