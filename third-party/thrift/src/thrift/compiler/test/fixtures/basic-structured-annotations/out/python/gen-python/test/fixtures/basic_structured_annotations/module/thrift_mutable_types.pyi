#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import typing as _typing
import builtins


import enum

import folly.iobuf as _fbthrift_iobuf
import test.fixtures.basic_structured_annotations.module.thrift_abstract_types as _fbthrift_python_abstract_types
import thrift.python.types as _fbthrift_python_types
import thrift.python.mutable_types as _fbthrift_python_mutable_types
import thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers

import included.thrift_mutable_types as _fbthrift__included__thrift_mutable_types

import namespaced.thrift_mutable_types as _fbthrift__namespaced__thrift_mutable_types

from test.fixtures.basic_structured_annotations.module.thrift_enums import (
    MyEnum as _fbthrift_MyEnum,
)
MyEnum = _fbthrift_MyEnum


@_typing.final
class runtime_annotation(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.runtime_annotation):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.runtime_annotation": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.runtime_annotation": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.runtime_annotation": ...  # type: ignore
_fbthrift_runtime_annotation = runtime_annotation

@_typing.final
class structured_annotation_inline(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.structured_annotation_inline):
    @property
    def count(self) -> builtins.int: ...
    @count.setter
    def count(self, value: builtins.int) -> None: ...

    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        count: _typing.Optional[builtins.int]=...,
        name: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        count: _typing.Optional[builtins.int]=...,
        name: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.str]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.structured_annotation_inline": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.structured_annotation_inline": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.structured_annotation_inline": ...  # type: ignore
_fbthrift_structured_annotation_inline = structured_annotation_inline

@_typing.final
class structured_annotation_with_default(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.structured_annotation_with_default):
    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        name: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        name: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.structured_annotation_with_default": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.structured_annotation_with_default": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.structured_annotation_with_default": ...  # type: ignore
_fbthrift_structured_annotation_with_default = structured_annotation_with_default

@_typing.final
class structured_annotation_recursive(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.structured_annotation_recursive):
    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...

    @property
    def recurse(self) -> _typing.Optional[_fbthrift_structured_annotation_recursive]: ...
    @recurse.setter
    def recurse(self, value: _typing.Optional[_fbthrift_structured_annotation_recursive]) -> None: ...

    @property
    def forward(self) -> _fbthrift_structured_annotation_forward: ...
    @forward.setter
    def forward(self, value: _fbthrift_structured_annotation_forward) -> None: ...

    def __init__(
        self, *,
        name: _typing.Optional[builtins.str]=...,
        recurse: _typing.Optional[_fbthrift_structured_annotation_recursive]=...,
        forward: _typing.Optional[_fbthrift_structured_annotation_forward]=...
    ) -> None: ...

    def __call__(
        self, *,
        name: _typing.Optional[builtins.str]=...,
        recurse: _typing.Optional[_fbthrift_structured_annotation_recursive]=...,
        forward: _typing.Optional[_fbthrift_structured_annotation_forward]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str, _fbthrift_structured_annotation_recursive, _fbthrift_structured_annotation_forward]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.structured_annotation_recursive": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.structured_annotation_recursive": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.structured_annotation_recursive": ...  # type: ignore
_fbthrift_structured_annotation_recursive = structured_annotation_recursive

@_typing.final
class structured_annotation_forward(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.structured_annotation_forward):
    @property
    def count(self) -> builtins.int: ...
    @count.setter
    def count(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        count: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        count: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.structured_annotation_forward": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.structured_annotation_forward": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.structured_annotation_forward": ...  # type: ignore
_fbthrift_structured_annotation_forward = structured_annotation_forward

@_typing.final
class structured_annotation_nested(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.structured_annotation_nested):
    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...

    @property
    def nest(self) -> _fbthrift_structured_annotation_with_default: ...
    @nest.setter
    def nest(self, value: _fbthrift_structured_annotation_with_default) -> None: ...

    def __init__(
        self, *,
        name: _typing.Optional[builtins.str]=...,
        nest: _typing.Optional[_fbthrift_structured_annotation_with_default]=...
    ) -> None: ...

    def __call__(
        self, *,
        name: _typing.Optional[builtins.str]=...,
        nest: _typing.Optional[_fbthrift_structured_annotation_with_default]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str, _fbthrift_structured_annotation_with_default]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.structured_annotation_nested": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.structured_annotation_nested": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.structured_annotation_nested": ...  # type: ignore
_fbthrift_structured_annotation_nested = structured_annotation_nested

@_typing.final
class MyStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.MyStruct):
    @property
    def annotated_field(self) -> builtins.int: ...
    @annotated_field.setter
    def annotated_field(self, value: builtins.int) -> None: ...

    @property
    def annotated_type(self) -> builtins.str: ...
    @annotated_type.setter
    def annotated_type(self, value: builtins.str) -> None: ...

    @property
    def annotated_recursive(self) -> builtins.str: ...
    @annotated_recursive.setter
    def annotated_recursive(self, value: builtins.str) -> None: ...

    @property
    def annotated_nested(self) -> builtins.int: ...
    @annotated_nested.setter
    def annotated_nested(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        annotated_field: _typing.Optional[builtins.int]=...,
        annotated_type: _typing.Optional[builtins.str]=...,
        annotated_recursive: _typing.Optional[builtins.str]=...,
        annotated_nested: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        annotated_field: _typing.Optional[builtins.int]=...,
        annotated_type: _typing.Optional[builtins.str]=...,
        annotated_recursive: _typing.Optional[builtins.str]=...,
        annotated_nested: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.str, builtins.str, builtins.int]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.MyStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.MyStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStruct": ...  # type: ignore
_fbthrift_MyStruct = MyStruct

@_typing.final
class MyException(_fbthrift_python_mutable_exceptions.MutableGeneratedError, _fbthrift_python_abstract_types.MyException):
    @property
    def context(self) -> builtins.str: ...
    @context.setter
    def context(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        context: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.MyException": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.MyException": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyException": ...  # type: ignore
_fbthrift_MyException = MyException

@_typing.final
class MyUnion(_fbthrift_python_mutable_types.MutableUnion, _fbthrift_python_abstract_types.MyUnion):
    @property
    def first(self) -> builtins.str: ...
    @first.setter
    def first(self, value: builtins.str) -> None: ...

    @property
    def second(self) -> builtins.int: ...
    @second.setter
    def second(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        first: _typing.Optional[builtins.str]=...,
        second: _typing.Optional[builtins.int]=...
    ) -> None: ...



    class FbThriftUnionFieldEnum(enum.Enum):
        EMPTY: MyUnion.FbThriftUnionFieldEnum = ...
        first: MyUnion.FbThriftUnionFieldEnum = ...
        second: MyUnion.FbThriftUnionFieldEnum = ...

    fbthrift_current_value: _typing.Final[_typing.Union[None, builtins.str, builtins.int]]
    # pyre-ignore[15]: `fbthrift_current_field` overrides attribute defined in `_fbthrift_python_abstract_types.MyUnion` inconsistently. Type `MyUnion.FbThriftUnionFieldEnum` is not a subtype of the overridden attribute `_fbthrift_python_abstract_types.MyUnion.FbThriftUnionFieldEnum`
    fbthrift_current_field: _typing.Final[FbThriftUnionFieldEnum]
    def get_type(self) -> FbThriftUnionFieldEnum: ...
    def _to_python(self) -> "test.fixtures.basic_structured_annotations.module.thrift_types.MyUnion": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.basic_structured_annotations.module.types.MyUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyUnion": ...  # type: ignore
_fbthrift_MyUnion = MyUnion


MyConst: _typing.Mapping[builtins.str, builtins.str] = ...

annotated_with_default_string = builtins.str
annotated_inline_string = builtins.str
annotated_inline_i64 = builtins.int


class _fbthrift_MyService_first_args(_fbthrift_python_mutable_types.MutableStruct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_MyService_first_result(_fbthrift_python_mutable_types.MutableStruct):
    success: _typing.Final[builtins.str]

    def __init__(
        self, *, success: _typing.Optional[builtins.str] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.str,
        ]]]: ...


class _fbthrift_MyService_second_args(_fbthrift_python_mutable_types.MutableStruct):
    count: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        count: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_MyService_second_result(_fbthrift_python_mutable_types.MutableStruct):
    success: _typing.Final[builtins.bool]

    def __init__(
        self, *, success: _typing.Optional[builtins.bool] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.bool,
        ]]]: ...
