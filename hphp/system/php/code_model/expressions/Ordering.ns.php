<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  expression [order]
 */
class Ordering /*implements IOrdering*/ {
  use QueryClause;
  use Node;

  private /*?IExpression*/ $expression;
  private /*?Order*/ $order;

  /**
   *  expression [order]
   */
  public function getExpression() /*: IExpression*/ {
    if ($this->expression === null) {
      throw new \Exception("Expression is not initialized");
    }
    return $this->expression;
  }
  /**
   *  expression [order]
   */
  public function setExpression(/*IExpression*/ $value) /*: this*/ {
    $this->expression = $value;
    return $this;
  }

  /**
   *  expression [order]
   */
  public function getOrder() /*: Order*/ {
    if ($this->order === null) {
      throw new \Exception("Order is not initialized");
    }
    return $this->order;
  }
  /**
   *  expression [order]
   */
  public function setOrder(/*Order*/ $value) /*: this*/ {
    $this->order = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitOrdering($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitOrdering")) {
      // UNSAFE
      return $visitor->visitOrdering($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->expression !== null) {
      yield $this->expression;
    }
  }
}
}
