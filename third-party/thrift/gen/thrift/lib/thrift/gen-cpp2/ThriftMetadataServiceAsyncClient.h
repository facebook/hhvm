/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/client_h.h>

#include "thrift/lib/thrift/gen-cpp2/metadata_types.h"

namespace apache { namespace thrift {
  class Cpp2RequestContext;
  namespace detail { namespace ac { struct ClientRequestContext; }}
  namespace transport { class THeader; }
}}

namespace apache { namespace thrift { namespace metadata {

class ThriftMetadataServiceAsyncClient : public apache::thrift::GeneratedAsyncClient {
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  char const* getServiceName() const noexcept override {
    return "ThriftMetadataService";
  }

  virtual void getRpcMetadata(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void getRpcMetadata(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
 private:
  void getRpcMetadataImpl(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback);
 public:
  virtual void sync_getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& _return);
  virtual void sync_getRpcMetadata(apache::thrift::RpcOptions& rpcOptions,  ::apache::thrift::metadata::ThriftMetadata& _return);
  virtual folly::Future< ::apache::thrift::metadata::ThriftMetadata> future_getRpcMetadata();
  virtual folly::SemiFuture< ::apache::thrift::metadata::ThriftMetadata> semifuture_getRpcMetadata();
  virtual folly::Future< ::apache::thrift::metadata::ThriftMetadata> future_getRpcMetadata(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::SemiFuture< ::apache::thrift::metadata::ThriftMetadata> semifuture_getRpcMetadata(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<std::pair< ::apache::thrift::metadata::ThriftMetadata, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getRpcMetadata(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::SemiFuture<std::pair< ::apache::thrift::metadata::ThriftMetadata, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getRpcMetadata(apache::thrift::RpcOptions& rpcOptions);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::apache::thrift::metadata::ThriftMetadata> co_getRpcMetadata() {
    co_return co_await semifuture_getRpcMetadata();
  }
#endif // FOLLY_HAS_COROUTINES
  virtual void getRpcMetadata(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback);
  static folly::exception_wrapper recv_wrapped_getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getRpcMetadataT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback);
 public:
};

}}} // apache::thrift::metadata
