<?hh
namespace fZdhGv { use mDRZAje ; require_once "double string" ; << bRpFeJtxS >> class hRh < dUNZuryHX > extends sPh implements iZXwgw { use uTpOfql ; } require_once 'single string' ; namespace { use xQez as pHvLc , tE ; require_once "double string" ; } namespace mXPE { << aBthoTvQV >> class uDNy < iXwMugJOQ > extends tDu { } << fZSDcd >> abstract class aMw < cIRn > extends iQPaba implements bZDTp { } trait lCFNcRsLx < aHRkauaLA , yCjtV , + cXmcKl > { use tYiMPEdG ; use pTonzDLIW ; use sKxqRWk < fRdmuL , aRqx , zYSTWULn , uWpMWq , fL , tSzW > ; } } namespace mFVe { enum nBIPrmmEs : string { } require "heredoc" ; << eVBWIf , uLdUuO >> async function xXhQutBOl ( ... ) : float { } << nX ( $qGFzw &= shape ( ) ) >> class vUbjDRv implements kXB { use cWaX < qERmUsxl > ; use aOTfKfBp < eVgesJQfV , bQDPqqT , aIf > ; } } require_once 'single string' ; enum cU : int as num { } use eNnu ; trait oUxpCNP { } << yXpPdnrEH >> async function tUNOVd < + iFhd > ( mixed $eMMYrIVk = $jIVPBXa /= function ( ) { for ( 42.42 ; ; 0123 ) ; continue ; for ( 0x16 ; ; 0x16 ) ; foreach ( ( new $yMnvGbHQ ( $xHPrJeSQm ) ) as $vPs ) switch ( $bOkypmfw ) { default : ; } } ) : self :: vMGvC { } use nPpadcH , qLInJbs , lNshGTspT , aFDipqtU , wENclrs as cU , qCc ; }
