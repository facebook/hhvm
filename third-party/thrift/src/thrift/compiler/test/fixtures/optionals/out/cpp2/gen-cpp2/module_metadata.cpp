/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/optionals/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/optionals/gen-cpp2/module_metadata.h"

// some of these functions can be so large that the compiler gives up optimizing
// them - and issues a warning which may be treated as an error!
//
// these functions are so rarely called that it is probably okay for them not to
// be optimized in practice
FOLLY_CLANG_DISABLE_WARNING("-Wignored-optimization-argument")

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::cpp2::Animal>::gen(ThriftMetadata& metadata) {
  auto res = genEnumMetadata<::cpp2::Animal>(metadata);
  if (res.preExists) {
    return;
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::Color>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::Color>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_Color = res.metadata;
  module_Color.is_union() = false;
  static const auto* const
  module_Color_fields = new std::array<EncodedThriftField, 4>{ {
    { 1, "red", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 2, "green", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "blue", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "alpha", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_Color_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_Color.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::Vehicle>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::Vehicle>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_Vehicle = res.metadata;
  module_Vehicle.is_union() = false;
  static const auto* const
  module_Vehicle_fields = new std::array<EncodedThriftField, 5>{ {
    { 1, "color", false, std::make_unique<Struct<::cpp2::Color>>("module.Color"), std::vector<ThriftConstStruct>{ }},    { 2, "licensePlate", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "description", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "name", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "hasAC", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{ *cvStruct("thrift.AllowUnsafeOptionalCustomDefaultValue", {  }).cv_struct(), }},  }};
  for (const auto& f : *module_Vehicle_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_Vehicle.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::Person>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::Person>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_Person = res.metadata;
  module_Person.is_union() = false;
  static const auto* const
  module_Person_fields = new std::array<EncodedThriftField, 10>{ {
    { 1, "id", false, std::make_unique<Typedef>("module.PersonID", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{  }), std::vector<ThriftConstStruct>{ }},    { 2, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 3, "age", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{ }},    { 4, "address", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},    { 5, "favoriteColor", true, std::make_unique<Struct<::cpp2::Color>>("module.Color"), std::vector<ThriftConstStruct>{ }},    { 6, "friends", true, std::make_unique<Set>(std::make_unique<Typedef>("module.PersonID", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{  })), std::vector<ThriftConstStruct>{ }},    { 7, "bestFriend", true, std::make_unique<Typedef>("module.PersonID", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{  }), std::vector<ThriftConstStruct>{ }},    { 8, "petNames", true, std::make_unique<Map>(std::make_unique<Enum<::cpp2::Animal>>("module.Animal"), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{ }},    { 9, "afraidOfAnimal", true, std::make_unique<Enum<::cpp2::Animal>>("module.Animal"), std::vector<ThriftConstStruct>{ }},    { 10, "vehicles", true, std::make_unique<List>(std::make_unique<Struct<::cpp2::Vehicle>>("module.Vehicle")), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_Person_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_Person.fields()->push_back(std::move(field));
  }
  return res.metadata;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
