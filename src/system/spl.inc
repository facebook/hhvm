// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"spl_classes", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.spl-classes.php )\n *\n * This function returns an array with the current available SPL classes.\n *\n * @return     map     Returns an array containing the currently available\n *                     SPL classes.\n */", 
"spl_object_hash", T(String), S(0), "obj", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.spl-object-hash.php )\n *\n * This function returns a unique identifier for the object. This id can\n * be used as a hash key for storing objects or for identifying an object.\n *\n * @obj        object  Any object.\n *\n * @return     string  A string that is unique for each currently existing\n *                     object and is always the same for each object.\n */", 
"hphp_object_pointer", T(Int64), S(0), "obj", T(Object), NULL, NULL, S(0), NULL, S(4210688), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-object-pointer.php\n * )\n *\n * This function returns low level raw pointer the object. Used by closure\n * and internal purposes.\n *\n * @obj        object  Any object.\n *\n * @return     int     Low level ObjectData pointer.\n */", 
"hphp_get_this", T(Variant), S(0), NULL, S(4210688), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-get-this.php )\n *\n * This function returns this object if present, or NULL.\n *\n * @return     mixed   This object.\n */", 
"class_implements", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "autoload", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.class-implements.php )\n *\n * This function returns an array with the names of the interfaces that\n * the given class and its parents implement.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */", 
"class_parents", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "autoload", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.class-parents.php )\n *\n * This function returns an array with the name of the parent classes of\n * the given class.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */", 
"iterator_apply", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "func", T(Variant), NULL, NULL, S(0), "params", T(Array), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-apply.php )\n *\n * Calls a function for every element in an iterator.\n *\n * @obj        mixed   The class to iterate over.\n * @func       mixed   The callback function to call on every element. The\n *                     function must return TRUE in order to continue\n *                     iterating over the iterator.\n * @params     map     Arguments to pass to the callback function.\n *\n * @return     mixed   Returns the iteration count.\n */", 
"iterator_count", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-count.php )\n *\n * Count the elements in an iterator.\n *\n * @obj        mixed   The iterator being counted.\n *\n * @return     mixed   The number of elements in iterator.\n */", 
"iterator_to_array", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "use_keys", T(Boolean), "b:1;", "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-to-array.php )\n *\n * Copy the elements of an iterator into an array.\n *\n * @obj        mixed   The iterator being copied.\n * @use_keys   bool    Whether to use the iterator element keys as index.\n *\n * @return     mixed   An array containing the elements of the iterator.\n */", 
"spl_autoload_call", T(Void), S(0), "class_name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.spl-autoload-call.php )\n *\n * This function can be used to manually search for a class or interface\n * using the registered __autoload functions.\n *\n * @class_name string  The class name being searched.\n *\n * @return     mixed   No value is returned.\n */", 
"spl_autoload_extensions", T(String), S(0), "file_extensions", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-extensions.php )\n *\n * This function can modify and check the file extensions that the built in\n * __autoload() fallback function spl_autoload() will be using.\n *\n * @file_extensions\n *             string  When calling without an argument, it simply returns\n *                     the current list of extensions each separated by\n *                     comma. To modify the list of file extensions, simply\n *                     invoke the functions with the new list of file\n *                     extensions to use in a single string with each\n *                     extensions separated by comma.\n *\n * @return     string  A comma delimited list of default file extensions\n *                     for spl_autoload().\n */", 
"spl_autoload_functions", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-functions.php )\n *\n * Get all registered __autoload() functions.\n *\n * @return     mixed   An array of all registered __autoload functions. If\n *                     the autoload stack is not activated then the return\n *                     value is FALSE. If no function is registered the\n *                     return value will be an empty array.\n */", 
"spl_autoload_register", T(Boolean), S(0), "autoload_function", T(Variant), "N;", "null", S(0), "throws", T(Boolean), "b:1;", "true", S(0), "prepend", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-register.php )\n *\n * Register a function with the spl provided __autoload stack. If the stack\n * is not yet activated it will be activated.\n *\n * If your code has an existing __autoload function then this function must\n * be explicitly registered on the __autoload stack. This is because\n * spl_autoload_register() will effectively replace the engine cache for\n * the __autoload function by either spl_autoload() or spl_autoload_call().\n *\n * If there must be multiple autoload functions, spl_autoload_register()\n * allows for this. It effectively creates a queue of autoload functions,\n * and runs through each of them in the order they are defined. By\n * contrast, __autoload() may only be defined once.\n *\n * @autoload_function\n *             mixed   The autoload function being registered. If no\n *                     parameter is provided, then the default\n *                     implementation of spl_autoload() will be registered.\n * @throws     bool    This parameter specifies whether\n *                     spl_autoload_register() should throw exceptions on\n *                     error.\n * @prepend    bool    If true, spl_autoload_register() will prepend the\n *                     autoloader on the autoload stack instead of\n *                     appending it.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"spl_autoload_unregister", T(Boolean), S(0), "autoload_function", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-unregister.php )\n *\n * Unregister a function from the spl provided __autoload stack. If the\n * stack is activated and empty after unregistering the given function then\n * it will be deactivated.\n *\n * When this function results in the autoload stack being deactivated, any\n * __autoload function that previously existed will not be reactivated.\n *\n * @autoload_function\n *             mixed   The autoload function being unregistered.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"spl_autoload", T(Void), S(0), "class_name", T(String), NULL, NULL, S(0), "file_extensions", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.spl-autoload.php )\n *\n * This function is intended to be used as a default implementation for\n * __autoload(). If nothing else is specified and spl_autoload_register()\n * is called without any parameters then this functions will be used for\n * any later call to __autoload().\n *\n * @class_name string\n * @file_extensions\n *             string  By default it checks all include paths to contain\n *                     filenames built up by the lowercase class name\n *                     appended by the filename extensions .inc and .php.\n *\n * @return     mixed   No value is returned.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
