#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/py3/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr
from libcpp.optional cimport optional as __optional
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
from thrift.py3.types import _IsSet as _fbthrift_IsSet
from thrift.py3.types cimport make_unique
cimport thrift.py3.types
cimport thrift.py3.exceptions
cimport thrift.python.exceptions
import thrift.python.converter
from thrift.python.types import EnumMeta as __EnumMeta
from thrift.python.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.python.types cimport BadEnum as __BadEnum
from thrift.py3.types cimport (
    richcmp as __richcmp,
    init_unicode_from_cpp as __init_unicode_from_cpp,
    set_iter as __set_iter,
    map_iter as __map_iter,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    const_pointer_cast,
    make_const_shared,
    constant_shared_ptr,
)
from thrift.py3.types cimport _ensure_py3_or_raise, _ensure_py3_container_or_raise
cimport thrift.py3.serializer as serializer
from thrift.python.protocol cimport Protocol as __Protocol
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
import importlib

import module.thrift_types as _fbthrift_python_types
from module.thrift_enums import (
    AnEnum,
    AnEnumRenamed,
    Flags,
)
from module.types_impl_FBTHRIFT_ONLY_DO_NOT_USE import (
    __BinaryUnionType,
)

from module.containers_FBTHRIFT_ONLY_DO_NOT_USE import (
    List__i16,
    List__i32,
    List__i64,
    List__string,
    List__SimpleStruct,
    Set__i32,
    Set__string,
    Map__string_string,
    Map__string_SimpleStruct,
    Map__string_i16,
    List__List__i32,
    Map__string_i32,
    Map__string_Map__string_i32,
    List__Set__string,
    Map__string_List__SimpleStruct,
    List__List__string,
    List__Set__i32,
    List__Map__string_string,
    List__binary,
    Set__binary,
    List__AnEnum,
    _std_unordered_map__Map__i32_i32,
    _MyType__List__i32,
    _MyType__Set__i32,
    _MyType__Map__i32_i32,
    _py3_simple_AdaptedList__List__i32,
    _py3_simple_AdaptedSet__Set__i32,
    _py3_simple_AdaptedMap__Map__i32_i32,
    Map__i32_double,
    List__Map__i32_double,
    Map__AnEnumRenamed_i32,
)

_fbthrift__module_name__ = "module.types"

cdef object get_types_reflection():
    return importlib.import_module(
        "module.types_reflection"
    )

@__cython.auto_pickle(False)
@__cython.final
cdef class SimpleException(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__

    def __init__(SimpleException self, *args, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSimpleException]()
        self._fields_setter = _fbthrift_types_fields.__SimpleException_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__( *args, **kwargs)

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("SimpleException", {
          "err_code": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).err_code_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cSimpleException] cpp_obj):
        __fbthrift_inst = <SimpleException>SimpleException.__new__(SimpleException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
        return __fbthrift_inst

    cdef inline err_code_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).err_code_ref().value()

    @property
    def err_code(self):
        return self.err_code_impl()


    def __hash__(SimpleException self):
        return super().__hash__()

    def __repr__(SimpleException self):
        return super().__repr__()

    def __str__(SimpleException self):
        return super().__str__()


    def __copy__(SimpleException self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cSimpleException](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<SimpleException>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__SimpleException()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.ExceptionMetadata[_module_cbindings.cSimpleException].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.SimpleException"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cSimpleException](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(SimpleException self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cSimpleException](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(SimpleException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSimpleException]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cSimpleException](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.SimpleException,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.SimpleException, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class OptionalRefStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(OptionalRefStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cOptionalRefStruct]()
        self._fields_setter = _fbthrift_types_fields.__OptionalRefStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(OptionalRefStruct self, **kwargs):
        if not kwargs:
            return self
        cdef OptionalRefStruct __fbthrift_inst = OptionalRefStruct.__new__(OptionalRefStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cOptionalRefStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__OptionalRefStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("OptionalRefStruct", {
          "optional_blob": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).optional_blob_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cOptionalRefStruct] cpp_obj):
        __fbthrift_inst = <OptionalRefStruct>OptionalRefStruct.__new__(OptionalRefStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline optional_blob_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).optional_blob_ref().has_value():
            return None
        if self.__fbthrift_cached_optional_blob is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).optional_blob_ref().value_unchecked():
                return None
            self.__fbthrift_cached_optional_blob = _fbthrift_iobuf.IOBuf.create(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).optional_blob_ref().value_unchecked().get(), self)
        return self.__fbthrift_cached_optional_blob

    @property
    def optional_blob(self):
        return self.optional_blob_impl()


    def __hash__(OptionalRefStruct self):
        return super().__hash__()

    def __repr__(OptionalRefStruct self):
        return super().__repr__()

    def __str__(OptionalRefStruct self):
        return super().__str__()


    def __copy__(OptionalRefStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cOptionalRefStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<OptionalRefStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__OptionalRefStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cOptionalRefStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.OptionalRefStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cOptionalRefStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(OptionalRefStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cOptionalRefStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(OptionalRefStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cOptionalRefStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cOptionalRefStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.OptionalRefStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.OptionalRefStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class SimpleStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(SimpleStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSimpleStruct]()
        self._fields_setter = _fbthrift_types_fields.__SimpleStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(SimpleStruct self, **kwargs):
        if not kwargs:
            return self
        cdef SimpleStruct __fbthrift_inst = SimpleStruct.__new__(SimpleStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSimpleStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SimpleStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("SimpleStruct", {
          "is_on": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).is_on_ref().has_value(),
          "tiny_int": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).tiny_int_ref().has_value(),
          "small_int": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).small_int_ref().has_value(),
          "nice_sized_int": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).nice_sized_int_ref().has_value(),
          "big_int": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).big_int_ref().has_value(),
          "real": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).real_ref().has_value(),
          "smaller_real": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).smaller_real_ref().has_value(),
          "something": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).something_ref().has_value(),
          "opt_default_int": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_default_int_ref().has_value(),
          "opt_default_str": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_default_str_ref().has_value(),
          "opt_default_enum": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_default_enum_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cSimpleStruct] cpp_obj):
        __fbthrift_inst = <SimpleStruct>SimpleStruct.__new__(SimpleStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline is_on_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).is_on_ref().value()

    @property
    def is_on(self):
        return self.is_on_impl()

    cdef inline tiny_int_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).tiny_int_ref().value()

    @property
    def tiny_int(self):
        return self.tiny_int_impl()

    cdef inline small_int_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).small_int_ref().value()

    @property
    def small_int(self):
        return self.small_int_impl()

    cdef inline nice_sized_int_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).nice_sized_int_ref().value()

    @property
    def nice_sized_int(self):
        return self.nice_sized_int_impl()

    cdef inline big_int_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).big_int_ref().value()

    @property
    def big_int(self):
        return self.big_int_impl()

    cdef inline real_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).real_ref().value()

    @property
    def real(self):
        return self.real_impl()

    cdef inline smaller_real_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).smaller_real_ref().value()

    @property
    def smaller_real(self):
        return self.smaller_real_impl()

    cdef inline something_impl(self):
        if self.__fbthrift_cached_something is None:
            self.__fbthrift_cached_something = _std_unordered_map__Map__i32_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).something_ref().ref())
        return self.__fbthrift_cached_something

    @property
    def something(self):
        return self.something_impl()

    cdef inline opt_default_int_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_default_int_ref().value_unchecked()

    @property
    def opt_default_int(self):
        return self.opt_default_int_impl()

    cdef inline opt_default_str_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_default_str_ref().value_unchecked()).decode('UTF-8')

    @property
    def opt_default_str(self):
        return self.opt_default_str_impl()

    cdef inline opt_default_enum_impl(self):
        if self.__fbthrift_cached_opt_default_enum is None:
            self.__fbthrift_cached_opt_default_enum = translate_cpp_enum_to_python(AnEnum, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_default_enum_ref().value_unchecked()))
        return self.__fbthrift_cached_opt_default_enum

    @property
    def opt_default_enum(self):
        return self.opt_default_enum_impl()


    def __hash__(SimpleStruct self):
        return super().__hash__()

    def __repr__(SimpleStruct self):
        return super().__repr__()

    def __str__(SimpleStruct self):
        return super().__str__()


    def __copy__(SimpleStruct self):
        return self

    def __eq__(SimpleStruct self, other):
        if not isinstance(other, SimpleStruct):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<SimpleStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(SimpleStruct self, other):
        if not isinstance(other, SimpleStruct):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<SimpleStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__SimpleStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cSimpleStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.SimpleStruct"

    __fbthrift_field_name_list = [
        'is_on',
        'tiny_int',
        'small_int',
        'nice_sized_int',
        'big_int',
        'real',
        'smaller_real',
        'something',
        'opt_default_int',
        'opt_default_str',
        'opt_default_enum',
    ]

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return cls.__fbthrift_field_name_list[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 11

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(SimpleStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cSimpleStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(SimpleStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSimpleStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cSimpleStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.SimpleStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.SimpleStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class HiddenTypeFieldsStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(HiddenTypeFieldsStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cHiddenTypeFieldsStruct]()
        self._fields_setter = _fbthrift_types_fields.__HiddenTypeFieldsStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(HiddenTypeFieldsStruct self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("HiddenTypeFieldsStruct", {
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cHiddenTypeFieldsStruct] cpp_obj):
        __fbthrift_inst = <HiddenTypeFieldsStruct>HiddenTypeFieldsStruct.__new__(HiddenTypeFieldsStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(HiddenTypeFieldsStruct self):
        return super().__hash__()

    def __repr__(HiddenTypeFieldsStruct self):
        return super().__repr__()

    def __str__(HiddenTypeFieldsStruct self):
        return super().__str__()


    def __copy__(HiddenTypeFieldsStruct self):
        return self

    def __eq__(HiddenTypeFieldsStruct self, other):
        if not isinstance(other, HiddenTypeFieldsStruct):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<HiddenTypeFieldsStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(HiddenTypeFieldsStruct self, other):
        if not isinstance(other, HiddenTypeFieldsStruct):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<HiddenTypeFieldsStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__HiddenTypeFieldsStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cHiddenTypeFieldsStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.HiddenTypeFieldsStruct"

    __fbthrift_field_name_list = [
    ]

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return cls.__fbthrift_field_name_list[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(HiddenTypeFieldsStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cHiddenTypeFieldsStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(HiddenTypeFieldsStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cHiddenTypeFieldsStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cHiddenTypeFieldsStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.HiddenTypeFieldsStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.HiddenTypeFieldsStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class ComplexStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(ComplexStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexStruct]()
        self._fields_setter = _fbthrift_types_fields.__ComplexStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(ComplexStruct self, **kwargs):
        if not kwargs:
            return self
        cdef ComplexStruct __fbthrift_inst = ComplexStruct.__new__(ComplexStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ComplexStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ComplexStruct", {
          "structOne": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).structOne_ref().has_value(),
          "structTwo": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).structTwo_ref().has_value(),
          "an_integer": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).an_integer_ref().has_value(),
          "name": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).name_ref().has_value(),
          "an_enum": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).an_enum_ref().has_value(),
          "some_bytes": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).some_bytes_ref().has_value(),
          "sender": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).sender_ref().has_value(),
          "cdef_": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).cdef__ref().has_value(),
          "bytes_with_cpp_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bytes_with_cpp_type_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cComplexStruct] cpp_obj):
        __fbthrift_inst = <ComplexStruct>ComplexStruct.__new__(ComplexStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline structOne_impl(self):
        if self.__fbthrift_cached_structOne is None:
            self.__fbthrift_cached_structOne = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).structOne_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_structOne

    @property
    def structOne(self):
        return self.structOne_impl()

    cdef inline structTwo_impl(self):
        if self.__fbthrift_cached_structTwo is None:
            self.__fbthrift_cached_structTwo = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).structTwo_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_structTwo

    @property
    def structTwo(self):
        return self.structTwo_impl()

    cdef inline an_integer_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).an_integer_ref().value()

    @property
    def an_integer(self):
        return self.an_integer_impl()

    cdef inline name_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).name_ref().value()).decode('UTF-8')

    @property
    def name(self):
        return self.name_impl()

    cdef inline an_enum_impl(self):
        if self.__fbthrift_cached_an_enum is None:
            self.__fbthrift_cached_an_enum = translate_cpp_enum_to_python(AnEnum, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).an_enum_ref().value()))
        return self.__fbthrift_cached_an_enum

    @property
    def an_enum(self):
        return self.an_enum_impl()

    cdef inline some_bytes_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).some_bytes_ref().value()

    @property
    def some_bytes(self):
        return self.some_bytes_impl()

    cdef inline sender_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).sender_ref().value()).decode('UTF-8')

    @property
    def sender(self):
        return self.sender_impl()

    cdef inline cdef__impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).cdef__ref().value()).decode('UTF-8')

    @property
    def cdef_(self):
        return self.cdef__impl()

    cdef inline bytes_with_cpp_type_impl(self):
        return (<const char*>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bytes_with_cpp_type_ref().value().data())[:deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bytes_with_cpp_type_ref().value().size()]

    @property
    def bytes_with_cpp_type(self):
        return self.bytes_with_cpp_type_impl()


    def __hash__(ComplexStruct self):
        return super().__hash__()

    def __repr__(ComplexStruct self):
        return super().__repr__()

    def __str__(ComplexStruct self):
        return super().__str__()


    def __copy__(ComplexStruct self):
        return self

    def __eq__(ComplexStruct self, other):
        if not isinstance(other, ComplexStruct):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<ComplexStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(ComplexStruct self, other):
        if not isinstance(other, ComplexStruct):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<ComplexStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__ComplexStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cComplexStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ComplexStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cComplexStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 9

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ComplexStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cComplexStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ComplexStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cComplexStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.ComplexStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ComplexStruct, self)



@__cython.auto_pickle(False)
@__cython.final
cdef class BinaryUnion(thrift.py3.types.Union):
    __module__ = _fbthrift__module_name__
    Type = __BinaryUnionType

    def __init__(
        self, *,
        _fbthrift_iobuf.IOBuf iobuf_val=None
    ):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = __to_shared_ptr(cmove(BinaryUnion._make_instance(
          NULL,
          iobuf_val,
        )))
        self._initialize_py()

    @staticmethod
    def fromValue(value):
        if value is None:
            return BinaryUnion()
        if isinstance(value, _fbthrift_iobuf.IOBuf):
            return BinaryUnion(iobuf_val=value)
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[_module_cbindings.cBinaryUnion] _make_instance(
        _module_cbindings.cBinaryUnion* base_instance,
        _fbthrift_iobuf.IOBuf iobuf_val
    ) except *:
        cdef unique_ptr[_module_cbindings.cBinaryUnion] c_inst = make_unique[_module_cbindings.cBinaryUnion]()
        cdef bint any_set = False
        if iobuf_val is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_iobuf_val(deref((<_fbthrift_iobuf.IOBuf?>iobuf_val)._this)) 
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cBinaryUnion] cpp_obj):
        __fbthrift_inst = <BinaryUnion>BinaryUnion.__new__(BinaryUnion)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        __fbthrift_inst._initialize_py()
        return __fbthrift_inst

    @property
    def iobuf_val(BinaryUnion self not None):
        if self.type_int != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not iobuf_val')
        return self.value


    def __hash__(BinaryUnion self):
        return  super().__hash__()

    @property
    def type(BinaryUnion self not None):
        if self.py_type is None:
            self.py_type = BinaryUnion.Type(self.type_int)
        return self.py_type

    @property
    def value(BinaryUnion self not None):
        if self.py_value is not None or self.type_int == 0:
            return self.py_value
        elif self.type_int == 1:
            self.py_value =  _fbthrift_iobuf.from_unique_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_iobuf_val().clone())
        return self.py_value

    cdef _initialize_py(BinaryUnion self):
        self.py_type = None
        self.type_int = int(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).getType())
        self.py_value = None

    def __copy__(BinaryUnion self):
        return self

    def __eq__(BinaryUnion self, other):
        return isinstance(other, BinaryUnion) and self._fbthrift_noncomparable_eq(other)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__BinaryUnion()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cBinaryUnion].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.BinaryUnion"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cBinaryUnion](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(BinaryUnion self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cBinaryUnion](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(BinaryUnion self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cBinaryUnion]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cBinaryUnion](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        # clear cache reload since the underlying data's changed
        self._initialize_py()
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.BinaryUnion,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.BinaryUnion, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class BinaryUnionStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(BinaryUnionStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cBinaryUnionStruct]()
        self._fields_setter = _fbthrift_types_fields.__BinaryUnionStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(BinaryUnionStruct self, **kwargs):
        if not kwargs:
            return self
        cdef BinaryUnionStruct __fbthrift_inst = BinaryUnionStruct.__new__(BinaryUnionStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cBinaryUnionStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__BinaryUnionStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("BinaryUnionStruct", {
          "u": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).u_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cBinaryUnionStruct] cpp_obj):
        __fbthrift_inst = <BinaryUnionStruct>BinaryUnionStruct.__new__(BinaryUnionStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline u_impl(self):
        if self.__fbthrift_cached_u is None:
            self.__fbthrift_cached_u = BinaryUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).u_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_u

    @property
    def u(self):
        return self.u_impl()


    def __hash__(BinaryUnionStruct self):
        return super().__hash__()

    def __repr__(BinaryUnionStruct self):
        return super().__repr__()

    def __str__(BinaryUnionStruct self):
        return super().__str__()


    def __copy__(BinaryUnionStruct self):
        return self

    def __eq__(BinaryUnionStruct self, other):
        return isinstance(other, BinaryUnionStruct) and self._fbthrift_noncomparable_eq(other)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__BinaryUnionStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cBinaryUnionStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.BinaryUnionStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cBinaryUnionStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(BinaryUnionStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cBinaryUnionStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(BinaryUnionStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cBinaryUnionStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cBinaryUnionStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.BinaryUnionStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.BinaryUnionStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class CustomFields(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(CustomFields self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cCustomFields]()
        self._fields_setter = _fbthrift_types_fields.__CustomFields_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(CustomFields self, **kwargs):
        if not kwargs:
            return self
        cdef CustomFields __fbthrift_inst = CustomFields.__new__(CustomFields)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cCustomFields](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__CustomFields_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CustomFields", {
          "bool_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bool_field_ref().has_value(),
          "integer_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).integer_field_ref().has_value(),
          "double_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).double_field_ref().has_value(),
          "string_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).string_field_ref().has_value(),
          "binary_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().has_value(),
          "list_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_field_ref().has_value(),
          "set_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_field_ref().has_value(),
          "map_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_field_ref().has_value(),
          "struct_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_field_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cCustomFields] cpp_obj):
        __fbthrift_inst = <CustomFields>CustomFields.__new__(CustomFields)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline bool_field_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bool_field_ref().value()

    @property
    def bool_field(self):
        return self.bool_field_impl()

    cdef inline integer_field_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).integer_field_ref().value()

    @property
    def integer_field(self):
        return self.integer_field_impl()

    cdef inline double_field_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).double_field_ref().value()

    @property
    def double_field(self):
        return self.double_field_impl()

    cdef inline string_field_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).string_field_ref().value()).decode('UTF-8')

    @property
    def string_field(self):
        return self.string_field_impl()

    cdef inline binary_field_impl(self):
        return (<const char*>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().value().data())[:deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().value().size()]

    @property
    def binary_field(self):
        return self.binary_field_impl()

    cdef inline list_field_impl(self):
        if self.__fbthrift_cached_list_field is None:
            self.__fbthrift_cached_list_field = _MyType__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_field_ref().ref())
        return self.__fbthrift_cached_list_field

    @property
    def list_field(self):
        return self.list_field_impl()

    cdef inline set_field_impl(self):
        if self.__fbthrift_cached_set_field is None:
            self.__fbthrift_cached_set_field = _MyType__Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_field_ref().ref())
        return self.__fbthrift_cached_set_field

    @property
    def set_field(self):
        return self.set_field_impl()

    cdef inline map_field_impl(self):
        if self.__fbthrift_cached_map_field is None:
            self.__fbthrift_cached_map_field = _MyType__Map__i32_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_field_ref().ref())
        return self.__fbthrift_cached_map_field

    @property
    def map_field(self):
        return self.map_field_impl()

    cdef inline struct_field_impl(self):
        if self.__fbthrift_cached_struct_field is None:
            self.__fbthrift_cached_struct_field = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_field_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_struct_field

    @property
    def struct_field(self):
        return self.struct_field_impl()


    def __hash__(CustomFields self):
        return super().__hash__()

    def __repr__(CustomFields self):
        return super().__repr__()

    def __str__(CustomFields self):
        return super().__str__()


    def __copy__(CustomFields self):
        return self

    def __eq__(CustomFields self, other):
        if not isinstance(other, CustomFields):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<CustomFields>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(CustomFields self, other):
        if not isinstance(other, CustomFields):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<CustomFields>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__CustomFields()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cCustomFields].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CustomFields"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cCustomFields](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 9

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CustomFields self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cCustomFields](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CustomFields self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cCustomFields]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cCustomFields](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.CustomFields,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CustomFields, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class CustomTypedefFields(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(CustomTypedefFields self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cCustomTypedefFields]()
        self._fields_setter = _fbthrift_types_fields.__CustomTypedefFields_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(CustomTypedefFields self, **kwargs):
        if not kwargs:
            return self
        cdef CustomTypedefFields __fbthrift_inst = CustomTypedefFields.__new__(CustomTypedefFields)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cCustomTypedefFields](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__CustomTypedefFields_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CustomTypedefFields", {
          "bool_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bool_field_ref().has_value(),
          "integer_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).integer_field_ref().has_value(),
          "double_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).double_field_ref().has_value(),
          "string_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).string_field_ref().has_value(),
          "binary_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().has_value(),
          "list_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_field_ref().has_value(),
          "set_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_field_ref().has_value(),
          "map_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_field_ref().has_value(),
          "struct_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_field_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cCustomTypedefFields] cpp_obj):
        __fbthrift_inst = <CustomTypedefFields>CustomTypedefFields.__new__(CustomTypedefFields)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline bool_field_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bool_field_ref().value()

    @property
    def bool_field(self):
        return self.bool_field_impl()

    cdef inline integer_field_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).integer_field_ref().value()

    @property
    def integer_field(self):
        return self.integer_field_impl()

    cdef inline double_field_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).double_field_ref().value()

    @property
    def double_field(self):
        return self.double_field_impl()

    cdef inline string_field_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).string_field_ref().value()).decode('UTF-8')

    @property
    def string_field(self):
        return self.string_field_impl()

    cdef inline binary_field_impl(self):
        return (<const char*>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().value().data())[:deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().value().size()]

    @property
    def binary_field(self):
        return self.binary_field_impl()

    cdef inline list_field_impl(self):
        if self.__fbthrift_cached_list_field is None:
            self.__fbthrift_cached_list_field = _MyType__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_field_ref().ref())
        return self.__fbthrift_cached_list_field

    @property
    def list_field(self):
        return self.list_field_impl()

    cdef inline set_field_impl(self):
        if self.__fbthrift_cached_set_field is None:
            self.__fbthrift_cached_set_field = _MyType__Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_field_ref().ref())
        return self.__fbthrift_cached_set_field

    @property
    def set_field(self):
        return self.set_field_impl()

    cdef inline map_field_impl(self):
        if self.__fbthrift_cached_map_field is None:
            self.__fbthrift_cached_map_field = _MyType__Map__i32_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_field_ref().ref())
        return self.__fbthrift_cached_map_field

    @property
    def map_field(self):
        return self.map_field_impl()

    cdef inline struct_field_impl(self):
        if self.__fbthrift_cached_struct_field is None:
            self.__fbthrift_cached_struct_field = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_field_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_struct_field

    @property
    def struct_field(self):
        return self.struct_field_impl()


    def __hash__(CustomTypedefFields self):
        return super().__hash__()

    def __repr__(CustomTypedefFields self):
        return super().__repr__()

    def __str__(CustomTypedefFields self):
        return super().__str__()


    def __copy__(CustomTypedefFields self):
        return self

    def __eq__(CustomTypedefFields self, other):
        if not isinstance(other, CustomTypedefFields):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<CustomTypedefFields>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(CustomTypedefFields self, other):
        if not isinstance(other, CustomTypedefFields):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<CustomTypedefFields>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__CustomTypedefFields()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cCustomTypedefFields].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CustomTypedefFields"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cCustomTypedefFields](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 9

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CustomTypedefFields self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cCustomTypedefFields](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CustomTypedefFields self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cCustomTypedefFields]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cCustomTypedefFields](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.CustomTypedefFields,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CustomTypedefFields, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class AdaptedTypedefFields(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(AdaptedTypedefFields self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAdaptedTypedefFields]()
        self._fields_setter = _fbthrift_types_fields.__AdaptedTypedefFields_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(AdaptedTypedefFields self, **kwargs):
        if not kwargs:
            return self
        cdef AdaptedTypedefFields __fbthrift_inst = AdaptedTypedefFields.__new__(AdaptedTypedefFields)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAdaptedTypedefFields](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__AdaptedTypedefFields_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AdaptedTypedefFields", {
          "bool_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bool_field_ref().has_value(),
          "integer_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).integer_field_ref().has_value(),
          "double_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).double_field_ref().has_value(),
          "string_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).string_field_ref().has_value(),
          "binary_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().has_value(),
          "list_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_field_ref().has_value(),
          "set_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_field_ref().has_value(),
          "map_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_field_ref().has_value(),
          "struct_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_field_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cAdaptedTypedefFields] cpp_obj):
        __fbthrift_inst = <AdaptedTypedefFields>AdaptedTypedefFields.__new__(AdaptedTypedefFields)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline bool_field_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).bool_field_ref().value()

    @property
    def bool_field(self):
        return self.bool_field_impl()

    cdef inline integer_field_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).integer_field_ref().value()

    @property
    def integer_field(self):
        return self.integer_field_impl()

    cdef inline double_field_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).double_field_ref().value()

    @property
    def double_field(self):
        return self.double_field_impl()

    cdef inline string_field_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).string_field_ref().value()).decode('UTF-8')

    @property
    def string_field(self):
        return self.string_field_impl()

    cdef inline binary_field_impl(self):
        return (<const char*>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().value().data())[:deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).binary_field_ref().value().size()]

    @property
    def binary_field(self):
        return self.binary_field_impl()

    cdef inline list_field_impl(self):
        if self.__fbthrift_cached_list_field is None:
            self.__fbthrift_cached_list_field = _py3_simple_AdaptedList__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_field_ref().ref())
        return self.__fbthrift_cached_list_field

    @property
    def list_field(self):
        return self.list_field_impl()

    cdef inline set_field_impl(self):
        if self.__fbthrift_cached_set_field is None:
            self.__fbthrift_cached_set_field = _py3_simple_AdaptedSet__Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_field_ref().ref())
        return self.__fbthrift_cached_set_field

    @property
    def set_field(self):
        return self.set_field_impl()

    cdef inline map_field_impl(self):
        if self.__fbthrift_cached_map_field is None:
            self.__fbthrift_cached_map_field = _py3_simple_AdaptedMap__Map__i32_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_field_ref().ref())
        return self.__fbthrift_cached_map_field

    @property
    def map_field(self):
        return self.map_field_impl()

    cdef inline struct_field_impl(self):
        if self.__fbthrift_cached_struct_field is None:
            self.__fbthrift_cached_struct_field = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_field_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_struct_field

    @property
    def struct_field(self):
        return self.struct_field_impl()


    def __hash__(AdaptedTypedefFields self):
        return super().__hash__()

    def __repr__(AdaptedTypedefFields self):
        return super().__repr__()

    def __str__(AdaptedTypedefFields self):
        return super().__str__()


    def __copy__(AdaptedTypedefFields self):
        return self

    def __eq__(AdaptedTypedefFields self, other):
        if not isinstance(other, AdaptedTypedefFields):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<AdaptedTypedefFields>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(AdaptedTypedefFields self, other):
        if not isinstance(other, AdaptedTypedefFields):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<AdaptedTypedefFields>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__AdaptedTypedefFields()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cAdaptedTypedefFields].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AdaptedTypedefFields"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cAdaptedTypedefFields](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 9

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AdaptedTypedefFields self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cAdaptedTypedefFields](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AdaptedTypedefFields self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAdaptedTypedefFields]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cAdaptedTypedefFields](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.AdaptedTypedefFields,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AdaptedTypedefFields, self)

cdef vector[cint16_t] List__i16__make_instance(object items) except *:
    cdef vector[cint16_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint16_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__i16__from_cpp(const vector[cint16_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__i16(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[cint32_t] List__i32__make_instance(object items) except *:
    cdef vector[cint32_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__i32__from_cpp(const vector[cint32_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[cint64_t] List__i64__make_instance(object items) except *:
    cdef vector[cint64_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint64_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__i64__from_cpp(const vector[cint64_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__i64(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[string] List__string__make_instance(object items) except *:
    cdef vector[string] c_inst
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_inst.push_back(item.encode('UTF-8'))
    return cmove(c_inst)

cdef object List__string__from_cpp(const vector[string]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(__init_unicode_from_cpp(c_vec[idx]))
    return List__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[_module_cbindings.cSimpleStruct] List__SimpleStruct__make_instance(object items) except *:
    cdef vector[_module_cbindings.cSimpleStruct] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, SimpleStruct):
            raise TypeError(f"{item!r} is not of type SimpleStruct")
        c_inst.push_back(deref((<SimpleStruct>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
    return cmove(c_inst)

cdef object List__SimpleStruct__from_cpp(const vector[_module_cbindings.cSimpleStruct]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cSimpleStruct](c_vec[idx])))
    return List__SimpleStruct(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[cint32_t] Set__i32__make_instance(object items) except *:
    cdef cset[cint32_t] c_inst
    cdef cint32_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint32_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__i32__from_cpp(const cset[cint32_t]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cint32_t]] iter = __set_iter[cset[cint32_t]](c_set)
    cdef cint32_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[string] Set__string__make_instance(object items) except *:
    cdef cset[string] c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_item = item.encode('UTF-8')
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__string__from_cpp(const cset[string]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[string]] iter = __set_iter[cset[string]](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(__init_unicode_from_cpp(citem))
    return Set__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cmap[string,string] Map__string_string__make_instance(object items) except *:
    cdef cmap[string,string] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__string_string__from_cpp(const cmap[string,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,string]] iter = __map_iter[cmap[string,string]](c_map)
    cdef string ckey
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = __init_unicode_from_cpp(cval)
    return Map__string_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,_module_cbindings.cSimpleStruct] Map__string_SimpleStruct__make_instance(object items) except *:
    cdef cmap[string,_module_cbindings.cSimpleStruct] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, SimpleStruct):
            raise TypeError(f"{item!r} is not of type SimpleStruct")

        c_inst[c_key] = deref((<SimpleStruct>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)
    return cmove(c_inst)

cdef object Map__string_SimpleStruct__from_cpp(const cmap[string,_module_cbindings.cSimpleStruct]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,_module_cbindings.cSimpleStruct]] iter = __map_iter[cmap[string,_module_cbindings.cSimpleStruct]](c_map)
    cdef string ckey
    cdef shared_ptr[_module_cbindings.cSimpleStruct] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(cmove(cval))
    return Map__string_SimpleStruct(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,cint16_t] Map__string_i16__make_instance(object items) except *:
    cdef cmap[string,cint16_t] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint16_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_i16__from_cpp(const cmap[string,cint16_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cint16_t]] iter = __map_iter[cmap[string,cint16_t]](c_map)
    cdef string ckey
    cdef cint16_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_i16(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[vector[cint32_t]] List__List__i32__make_instance(object items) except *:
    cdef vector[vector[cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)
        c_inst.push_back(List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__i32__from_cpp(const vector[vector[cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__i32__from_cpp(c_vec[idx]))
    return List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,cint32_t] Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cint32_t] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_i32__from_cpp(const cmap[string,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cint32_t]] iter = __map_iter[cmap[string,cint32_t]](c_map)
    cdef string ckey
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,cmap[string,cint32_t]] Map__string_Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cmap[string,cint32_t]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[str, int]")
        if not isinstance(item, Map__string_i32):
            item = Map__string_i32(item)

        c_inst[c_key] = Map__string_i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_Map__string_i32__from_cpp(const cmap[string,cmap[string,cint32_t]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cmap[string,cint32_t]]] iter = __map_iter[cmap[string,cmap[string,cint32_t]]](c_map)
    cdef string ckey
    cdef cmap[string,cint32_t] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = Map__string_i32__from_cpp(cval)
    return Map__string_Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cset[string]] List__Set__string__make_instance(object items) except *:
    cdef vector[cset[string]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[str]")
        if not isinstance(item, Set__string):
            item = Set__string(item)
        c_inst.push_back(Set__string__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__string__from_cpp(const vector[cset[string]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__string__from_cpp(c_vec[idx]))
    return List__Set__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,vector[_module_cbindings.cSimpleStruct]] Map__string_List__SimpleStruct__make_instance(object items) except *:
    cdef cmap[string,vector[_module_cbindings.cSimpleStruct]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[SimpleStruct]")
        if not isinstance(item, List__SimpleStruct):
            item = List__SimpleStruct(item)

        c_inst[c_key] = List__SimpleStruct__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_List__SimpleStruct__from_cpp(const cmap[string,vector[_module_cbindings.cSimpleStruct]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,vector[_module_cbindings.cSimpleStruct]]] iter = __map_iter[cmap[string,vector[_module_cbindings.cSimpleStruct]]](c_map)
    cdef string ckey
    cdef vector[_module_cbindings.cSimpleStruct] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = List__SimpleStruct__from_cpp(cval)
    return Map__string_List__SimpleStruct(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[vector[string]] List__List__string__make_instance(object items) except *:
    cdef vector[vector[string]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[str]")
        if not isinstance(item, List__string):
            item = List__string(item)
        c_inst.push_back(List__string__make_instance(item))
    return cmove(c_inst)

cdef object List__List__string__from_cpp(const vector[vector[string]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__string__from_cpp(c_vec[idx]))
    return List__List__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[cset[cint32_t]] List__Set__i32__make_instance(object items) except *:
    cdef vector[cset[cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[int]")
        if not isinstance(item, Set__i32):
            item = Set__i32(item)
        c_inst.push_back(Set__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__i32__from_cpp(const vector[cset[cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__i32__from_cpp(c_vec[idx]))
    return List__Set__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[cmap[string,string]] List__Map__string_string__make_instance(object items) except *:
    cdef vector[cmap[string,string]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Mapping[str, str]")
        if not isinstance(item, Map__string_string):
            item = Map__string_string(item)
        c_inst.push_back(Map__string_string__make_instance(item))
    return cmove(c_inst)

cdef object List__Map__string_string__from_cpp(const vector[cmap[string,string]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Map__string_string__from_cpp(c_vec[idx]))
    return List__Map__string_string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[string] List__binary__make_instance(object items) except *:
    cdef vector[string] c_inst
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.Sequence[bytes] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, bytes):
            raise TypeError(f"{item!r} is not of type bytes")
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__binary__from_cpp(const vector[string]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(bytes(<string>c_vec[idx]))
    return List__binary(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[string] Set__binary__make_instance(object items) except *:
    cdef cset[string] c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[bytes] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, bytes):
            raise TypeError(f"{item!r} is not of type bytes")
        c_item = item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__binary__from_cpp(const cset[string]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[string]] iter = __set_iter[cset[string]](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(bytes(<string>citem))
    return Set__binary(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef vector[_module_cbindings.cAnEnum] List__AnEnum__make_instance(object items) except *:
    cdef vector[_module_cbindings.cAnEnum] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, AnEnum):
            raise TypeError(f"{item!r} is not of type AnEnum")
        c_inst.push_back(<_module_cbindings.cAnEnum><int>item)
    return cmove(c_inst)

cdef object List__AnEnum__from_cpp(const vector[_module_cbindings.cAnEnum]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(translate_cpp_enum_to_python(AnEnum, <int> c_vec[idx]))
    return List__AnEnum(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef _module_cbindings._std_unordered_map[cint32_t,cint32_t] _std_unordered_map__Map__i32_i32__make_instance(object items) except *:
    cdef _module_cbindings._std_unordered_map[cint32_t,cint32_t] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object _std_unordered_map__Map__i32_i32__from_cpp(const _module_cbindings._std_unordered_map[cint32_t,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[_module_cbindings._std_unordered_map[cint32_t,cint32_t]] iter = __map_iter[_module_cbindings._std_unordered_map[cint32_t,cint32_t]](c_map)
    cdef cint32_t ckey = 0
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return _std_unordered_map__Map__i32_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef _module_cbindings._MyType _MyType__List__i32__make_instance(object items) except *:
    cdef _module_cbindings._MyType c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object _MyType__List__i32__from_cpp(const _module_cbindings._MyType& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return _MyType__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef _module_cbindings._MyType _MyType__Set__i32__make_instance(object items) except *:
    cdef _module_cbindings._MyType c_inst
    cdef cint32_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint32_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object _MyType__Set__i32__from_cpp(const _module_cbindings._MyType& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[_module_cbindings._MyType] iter = __set_iter[_module_cbindings._MyType](c_set)
    cdef cint32_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return _MyType__Set__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef _module_cbindings._MyType _MyType__Map__i32_i32__make_instance(object items) except *:
    cdef _module_cbindings._MyType c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object _MyType__Map__i32_i32__from_cpp(const _module_cbindings._MyType& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[_module_cbindings._MyType] iter = __map_iter[_module_cbindings._MyType](c_map)
    cdef cint32_t ckey = 0
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return _MyType__Map__i32_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef _module_cbindings._py3_simple_AdaptedList _py3_simple_AdaptedList__List__i32__make_instance(object items) except *:
    cdef _module_cbindings._py3_simple_AdaptedList c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object _py3_simple_AdaptedList__List__i32__from_cpp(const _module_cbindings._py3_simple_AdaptedList& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return _py3_simple_AdaptedList__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef _module_cbindings._py3_simple_AdaptedSet _py3_simple_AdaptedSet__Set__i32__make_instance(object items) except *:
    cdef _module_cbindings._py3_simple_AdaptedSet c_inst
    cdef cint32_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint32_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object _py3_simple_AdaptedSet__Set__i32__from_cpp(const _module_cbindings._py3_simple_AdaptedSet& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[_module_cbindings._py3_simple_AdaptedSet] iter = __set_iter[_module_cbindings._py3_simple_AdaptedSet](c_set)
    cdef cint32_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return _py3_simple_AdaptedSet__Set__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef _module_cbindings._py3_simple_AdaptedMap _py3_simple_AdaptedMap__Map__i32_i32__make_instance(object items) except *:
    cdef _module_cbindings._py3_simple_AdaptedMap c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object _py3_simple_AdaptedMap__Map__i32_i32__from_cpp(const _module_cbindings._py3_simple_AdaptedMap& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[_module_cbindings._py3_simple_AdaptedMap] iter = __map_iter[_module_cbindings._py3_simple_AdaptedMap](c_map)
    cdef cint32_t ckey = 0
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return _py3_simple_AdaptedMap__Map__i32_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[cint32_t,double] Map__i32_double__make_instance(object items) except *:
    cdef cmap[cint32_t,double] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, (float, int)):
            raise TypeError(f"{item!r} is not of type float")

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__i32_double__from_cpp(const cmap[cint32_t,double]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint32_t,double]] iter = __map_iter[cmap[cint32_t,double]](c_map)
    cdef cint32_t ckey = 0
    cdef double cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return Map__i32_double(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cmap[cint32_t,double]] List__Map__i32_double__make_instance(object items) except *:
    cdef vector[cmap[cint32_t,double]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Mapping[int, float]")
        if not isinstance(item, Map__i32_double):
            item = Map__i32_double(item)
        c_inst.push_back(Map__i32_double__make_instance(item))
    return cmove(c_inst)

cdef object List__Map__i32_double__from_cpp(const vector[cmap[cint32_t,double]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Map__i32_double__from_cpp(c_vec[idx]))
    return List__Map__i32_double(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[_module_cbindings.cAnEnumRenamed,cint32_t] Map__AnEnumRenamed_i32__make_instance(object items) except *:
    cdef cmap[_module_cbindings.cAnEnumRenamed,cint32_t] c_inst
    cdef _module_cbindings.cAnEnumRenamed c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, AnEnumRenamed):
            raise TypeError(f"{key!r} is not of type AnEnumRenamed")
        c_key = <_module_cbindings.cAnEnumRenamed><int>key
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__AnEnumRenamed_i32__from_cpp(const cmap[_module_cbindings.cAnEnumRenamed,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[_module_cbindings.cAnEnumRenamed,cint32_t]] iter = __map_iter[cmap[_module_cbindings.cAnEnumRenamed,cint32_t]](c_map)
    cdef _module_cbindings.cAnEnumRenamed ckey
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[translate_cpp_enum_to_python(AnEnumRenamed, <int> ckey)] = cval
    return Map__AnEnumRenamed_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)


A_BOOL = True
A_BYTE = 8
THE_ANSWER = 42
A_NUMBER = 84
A_BIG_NUMBER = 102
A_REAL_NUMBER = 3.14
A_FAKE_NUMBER = 3.0
A_WORD = "Good word"
SOME_BYTES = b"bytes"
A_STRUCT = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cA_STRUCT()))
EMPTY = SimpleStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cEMPTY()))
WORD_LIST = List__string__from_cpp(_module_cbindings.cWORD_LIST())
SOME_MAP = List__Map__i32_double__from_cpp(_module_cbindings.cSOME_MAP())
DIGITS = Set__i32__from_cpp(_module_cbindings.cDIGITS())
A_CONST_MAP = Map__string_SimpleStruct__from_cpp(_module_cbindings.cA_CONST_MAP())
ANOTHER_CONST_MAP = Map__AnEnumRenamed_i32__from_cpp(_module_cbindings.cANOTHER_CONST_MAP())
IOBufPtr = _fbthrift_iobuf.IOBuf
IOBuf = _fbthrift_iobuf.IOBuf
AdaptedTypeDef = SimpleStruct
foo_bar = bytes
CustomBool = bool
CustomInteger = int
CustomDouble = float
CustomString = str
CustomBinary = bytes
CustomList = _MyType__List__i32
CustomSet = _MyType__Set__i32
CustomMap = _MyType__Map__i32_i32
CustomStruct = SimpleStruct
AdaptedBool = bool
AdaptedInteger = int
AdaptedDouble = float
AdaptedString = str
AdaptedBinary = bytes
AdaptedList = _py3_simple_AdaptedList__List__i32
AdaptedSet = _py3_simple_AdaptedSet__Set__i32
AdaptedMap = _py3_simple_AdaptedMap__Map__i32_i32
AdaptedStruct = SimpleStruct
