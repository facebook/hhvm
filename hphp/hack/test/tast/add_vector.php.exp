[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([32:37-41], (Hprim Tvoid)));
      f_name = ([32:10-14], "\\test"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params =
      [{ Aast.AnnotatedAST.param_annotation = ([32:32-34], MyPhonyVector<X>);
         param_hint =
         (Some ([32:15-31],
                (Happly (([32:15-28], "\\MyPhonyVector"),
                   [([32:29-30], (Happly (([32:29-30], "\\X"), [])))]))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [32:32-34]; param_name = "$v"; param_expr = None;
         param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([33:3-27], MyPhonyVector),
                (Binop ((Eq None),
                   (([33:3-5], MyPhonyVector), (Lvar ([33:3-5], $x))),
                   (([33:8-27], MyPhonyVector),
                    (New (
                       (([33:12-25], MyPhonyVector<[unresolved]>),
                        (CI (([33:12-25], "\\MyPhonyVector"), []))),
                       [], [])))
                   ))));
             (Expr
                (([34:3-19], void),
                 (Call (Cnormal,
                    (([34:3-10], (function(X $x): void)),
                     (Obj_get (
                        (([34:3-5], MyPhonyVector), (Lvar ([34:3-5], $x))),
                        (([34:7-10], (function(X $x): void)),
                         (Id ([34:7-10], "add"))),
                        OG_nullthrows))),
                    [],
                    [(([34:11-18], B),
                      (New (
                         (([34:15-16], B), (CI (([34:15-16], "\\B"), []))),
                         [], [])))
                      ],
                    []))));
             (Expr
                (([35:3-19], void),
                 (Call (Cnormal,
                    (([35:3-10], (function(X $x): void)),
                     (Obj_get (
                        (([35:3-5], MyPhonyVector), (Lvar ([35:3-5], $x))),
                        (([35:7-10], (function(X $x): void)),
                         (Id ([35:7-10], "add"))),
                        OG_nullthrows))),
                    [],
                    [(([35:11-18], A),
                      (New (
                         (([35:15-16], A), (CI (([35:15-16], "\\A"), []))),
                         [], [])))
                      ],
                    []))));
             (Expr
                (([36:3-11], void),
                 (Call (Cnormal,
                    (([36:3-7], (function(MyPhonyVector<X> $v): void)),
                     (Id ([36:3-7], "\\test"))),
                    [],
                    [(([36:8-10], MyPhonyVector), (Lvar ([36:8-10], $x)))],
                    []))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false;
      f_external = false });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([12:7-20], "\\MyPhonyVector"); c_tparams = <opaque>;
       c_extends = []; c_uses = []; c_xhp_attr_uses = [];
       c_xhp_category = []; c_req_extends = []; c_req_implements = [];
       c_implements = []; c_consts = []; c_typeconsts = [];
       c_static_vars = [];
       c_vars =
       [{ Aast.AnnotatedAST.cv_final = false; cv_is_xhp = false;
          cv_visibility = Private;
          cv_type =
          (Some ([13:11-20],
                 (Happly (([13:11-17], "\\Vector"),
                    [([13:18-19], (Habstr "T"))]))));
          cv_id = ([13:21-23], "x"); cv_expr = None; cv_user_attributes = []
          }
         ];
       c_constructor =
       (Some { Aast.AnnotatedAST.m_annotation = (); m_final = false;
               m_abstract = false; m_visibility = Public;
               m_name = ([15:19-30], "__construct"); m_tparams = [];
               m_where_constraints = []; m_variadic = FVnonVariadic;
               m_params = [];
               m_body =
               (NamedBody
                  { Aast.AnnotatedAST.fnb_nast =
                    [(Expr
                        (([16:5-25], Vector<T>),
                         (Binop ((Eq None),
                            (([16:5-13], Vector<T>),
                             (Obj_get ((([16:5-10], <static>), This),
                                (([16:12-13], Vector<T>),
                                 (Id ([16:12-13], "x"))),
                                OG_nullthrows))),
                            (([16:16-25], Vector<T>),
                             (ValCollection (<vc_kind>, [])))
                            ))))
                      ];
                    fnb_unsafe = false });
               m_fun_kind = FSync; m_user_attributes = [];
               m_ret =
               (Some ([15:19-30], (Happly (([15:19-30], "void"), []))));
               m_ret_by_ref = false; m_external = false });
       c_static_methods = [];
       c_methods =
       [{ Aast.AnnotatedAST.m_annotation = (); m_final = false;
          m_abstract = false; m_visibility = Public;
          m_name = ([19:19-22], "add"); m_tparams = [];
          m_where_constraints = []; m_variadic = FVnonVariadic;
          m_params =
          [{ Aast.AnnotatedAST.param_annotation = ([19:25-27], T);
             param_hint = (Some ([19:23-24], (Habstr "T")));
             param_is_reference = false; param_is_variadic = false;
             param_pos = [19:25-27]; param_name = "$x"; param_expr = None;
             param_callconv = None; param_user_attributes = [] }
            ];
          m_body =
          (NamedBody
             { Aast.AnnotatedAST.fnb_nast =
               [(Expr
                   (([20:5-20], T),
                    (Binop ((Eq None),
                       (([20:5-15], T),
                        (Array_get (
                           (([20:5-13], Vector<T>),
                            (Obj_get ((([20:5-10], <static>), This),
                               (([20:12-13], Vector<T>),
                                (Id ([20:12-13], "x"))),
                               OG_nullthrows))),
                           None))),
                       (([20:18-20], T), (Lvar ([20:18-20], $x)))))))
                 ];
               fnb_unsafe = false });
          m_fun_kind = FSync; m_user_attributes = [];
          m_ret = (Some ([19:30-34], (Hprim Tvoid))); m_ret_by_ref = false;
          m_external = false };
         { Aast.AnnotatedAST.m_annotation = (); m_final = false;
           m_abstract = false; m_visibility = Public;
           m_name = ([23:19-22], "get"); m_tparams = [];
           m_where_constraints = []; m_variadic = FVnonVariadic;
           m_params =
           [{ Aast.AnnotatedAST.param_annotation = ([23:27-29], int);
              param_hint = (Some ([23:23-26], (Hprim Tint)));
              param_is_reference = false; param_is_variadic = false;
              param_pos = [23:27-29]; param_name = "$x"; param_expr = None;
              param_callconv = None; param_user_attributes = [] }
             ];
           m_body =
           (NamedBody
              { Aast.AnnotatedAST.fnb_nast =
                [(Return ([24:5-24],
                    (Some (([24:12-23], T),
                           (Array_get (
                              (([24:12-20], Vector<T>),
                               (Obj_get ((([24:12-17], <static>), This),
                                  (([24:19-20], Vector<T>),
                                   (Id ([24:19-20], "x"))),
                                  OG_nullthrows))),
                              (Some (([24:21-22], int), (Int "0")))))))
                    ))
                  ];
                fnb_unsafe = false });
           m_fun_kind = FSync; m_user_attributes = [];
           m_ret = (Some ([23:32-33], (Habstr "T"))); m_ret_by_ref = false;
           m_external = false }
         ];
       c_user_attributes = []; c_enum = None });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([28:7-8], "\\X"); c_tparams = <opaque>; c_extends = [];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = []; c_implements = [];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([29:7-8], "\\A"); c_tparams = <opaque>;
       c_extends = [([29:17-18], (Happly (([29:17-18], "\\X"), [])))];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = []; c_implements = [];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([30:7-8], "\\B"); c_tparams = <opaque>;
       c_extends = [([30:17-18], (Happly (([30:17-18], "\\X"), [])))];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = []; c_implements = [];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None })
  ]
