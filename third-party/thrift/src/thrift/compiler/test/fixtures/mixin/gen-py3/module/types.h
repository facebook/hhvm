/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "src/gen-cpp2/module_data.h"
#include "src/gen-cpp2/module_types.h"
#include "src/gen-cpp2/module_metadata.h"
namespace thrift {
namespace py3 {



template<>
void reset_field<::cpp2::Mixin1>(
    ::cpp2::Mixin1& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field1_ref().copy_from(default_inst<::cpp2::Mixin1>().field1_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::Mixin2>(
    ::cpp2::Mixin2& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.m1_ref().copy_from(default_inst<::cpp2::Mixin2>().m1_ref());
      return;
    case 1:
      obj.field2_ref().copy_from(default_inst<::cpp2::Mixin2>().field2_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::Mixin3Base>(
    ::cpp2::Mixin3Base& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field3_ref().copy_from(default_inst<::cpp2::Mixin3Base>().field3_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::Foo>(
    ::cpp2::Foo& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.field4_ref().copy_from(default_inst<::cpp2::Foo>().field4_ref());
      return;
    case 1:
      obj.m2_ref().copy_from(default_inst<::cpp2::Foo>().m2_ref());
      return;
    case 2:
      obj.m3_ref().copy_from(default_inst<::cpp2::Foo>().m3_ref());
      return;
  }
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::Mixin1>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::Mixin2>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::Mixin3Base>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::Foo>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
