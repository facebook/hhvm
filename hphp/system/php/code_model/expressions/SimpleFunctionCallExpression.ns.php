<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  functionName(arguments)
 *  ${functionExpression}(arguments)
 */
class SimpleFunctionCallExpression /*implements ISimpleFunctionCallExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?string*/ $functionName;
  private /*?IExpression*/ $functionExpression;
  private /*?Vector<IExpression>*/ $arguments;

  /**
   *  functionName(arguments)
   *  ${functionExpression}(arguments)
   */
  public function getFunctionName() /*: ?string*/ {
    return $this->functionName;
  }
  /**
   *  functionName(arguments)
   *  ${functionExpression}(arguments)
   */
  public function setFunctionName(/*?string*/ $value) /*: this*/ {
    $this->functionName = $value;
    return $this;
  }

  /**
   *  functionName(arguments)
   *  ${functionExpression}(arguments)
   */
  public function getFunctionExpression() /*: ?IExpression*/ {
    return $this->functionExpression;
  }
  /**
   *  functionName(arguments)
   *  ${functionExpression}(arguments)
   */
  public function setFunctionExpression(/*?IExpression*/ $value) /*: this*/ {
    $this->functionExpression = $value;
    return $this;
  }

  /**
   *  functionName(arguments)
   *  ${functionExpression}(arguments)
   */
  public function getArguments() /*: Vector<IExpression>*/ {
    if ($this->arguments === null) {
      $this->arguments = Vector {};
    }
    return $this->arguments;
  }
  /**
   *  functionName(arguments)
   *  ${functionExpression}(arguments)
   */
  public function setArguments(/*Vector<IExpression>*/ $value) /*: this*/ {
    $this->arguments = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitSimpleFunctionCallExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitSimpleFunctionCallExpression")) {
      // UNSAFE
      return $visitor->visitSimpleFunctionCallExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->functionExpression !== null) {
      yield $this->functionExpression;
    }
    if ($this->arguments !== null) {
      foreach ($this->arguments as $elem) {
        yield $elem;
      }
    }
  }
}
}
