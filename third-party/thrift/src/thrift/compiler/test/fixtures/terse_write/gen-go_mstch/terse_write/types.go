// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package terse_write // [[[ program thrift source path ]]]

import (
    "fmt"

    cpp "thrift/annotation/cpp"
    hack "thrift/annotation/hack"
    thrift0 "thrift/annotation/thrift"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = cpp.GoUnusedProtection__
var _ = hack.GoUnusedProtection__
var _ = thrift0.GoUnusedProtection__

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type MyInteger = int32

func NewMyInteger() MyInteger {
  return 0
}

func WriteMyInteger(item MyInteger, p thrift.Protocol) error {
  if err := p.WriteI32(item); err != nil {
    return err
}
  return nil
}

func ReadMyInteger(p thrift.Protocol) (MyInteger, error) {
  var decodeResult MyInteger
  decodeErr := func() error {
    result, err := p.ReadI32()
if err != nil {
    return err
}
    decodeResult = result
    return nil
  }()
  return decodeResult, decodeErr
}

type MyEnum int32

const (
    MyEnum_ME0 MyEnum = 0
    MyEnum_ME1 MyEnum = 1
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_ME0: "ME0",
        MyEnum_ME1: "ME1",
    }

    MyEnumToValue = map[string]MyEnum {
        "ME0": MyEnum_ME0,
        "ME1": MyEnum_ME1,
    }

    MyEnumNames = []string{
        "ME0",
        "ME1",
    }

    MyEnumValues = []MyEnum{
        MyEnum_ME0,
        MyEnum_ME1,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

// Deprecated: Use MyEnum.Ptr() instead.
func MyEnumPtr(v MyEnum) *MyEnum {
    return &v
}


type MyStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStruct{}


func NewMyStruct() *MyStruct {
    return (&MyStruct{})
}

func (x *MyStruct) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use MyStruct.Set* methods instead or set the fields directly.
type MyStructBuilder struct {
    obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder {
    return &MyStructBuilder{
        obj: NewMyStruct(),
    }
}

func (x *MyStructBuilder) Emit() *MyStruct {
    var objCopy MyStruct = *x.obj
    return &objCopy
}

func (x *MyStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type MyUnion struct {
    BoolField *bool `thrift:"bool_field,1" json:"bool_field" db:"bool_field"`
    ByteField *byte `thrift:"byte_field,2" json:"byte_field" db:"byte_field"`
    ShortField *int16 `thrift:"short_field,3" json:"short_field" db:"short_field"`
    IntField *int32 `thrift:"int_field,4" json:"int_field" db:"int_field"`
    LongField *int64 `thrift:"long_field,5" json:"long_field" db:"long_field"`
    FloatField *float32 `thrift:"float_field,6" json:"float_field" db:"float_field"`
    DoubleField *float64 `thrift:"double_field,7" json:"double_field" db:"double_field"`
    StringField *string `thrift:"string_field,8" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,9" json:"binary_field" db:"binary_field"`
    EnumField *MyEnum `thrift:"enum_field,10" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,11" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,12" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,13" json:"map_field" db:"map_field"`
    StructField *MyStruct `thrift:"struct_field,14" json:"struct_field" db:"struct_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnion{}


func NewMyUnion() *MyUnion {
    return (&MyUnion{})
}

// Deprecated: Use NewMyUnion().BoolField instead.
var MyUnion_BoolField_DEFAULT = NewMyUnion().BoolField

// Deprecated: Use NewMyUnion().ByteField instead.
var MyUnion_ByteField_DEFAULT = NewMyUnion().ByteField

// Deprecated: Use NewMyUnion().ShortField instead.
var MyUnion_ShortField_DEFAULT = NewMyUnion().ShortField

// Deprecated: Use NewMyUnion().IntField instead.
var MyUnion_IntField_DEFAULT = NewMyUnion().IntField

// Deprecated: Use NewMyUnion().LongField instead.
var MyUnion_LongField_DEFAULT = NewMyUnion().LongField

// Deprecated: Use NewMyUnion().FloatField instead.
var MyUnion_FloatField_DEFAULT = NewMyUnion().FloatField

// Deprecated: Use NewMyUnion().DoubleField instead.
var MyUnion_DoubleField_DEFAULT = NewMyUnion().DoubleField

// Deprecated: Use NewMyUnion().StringField instead.
var MyUnion_StringField_DEFAULT = NewMyUnion().StringField

// Deprecated: Use NewMyUnion().EnumField instead.
var MyUnion_EnumField_DEFAULT = NewMyUnion().EnumField

// Deprecated: Use NewMyUnion().StructField instead.
var MyUnion_StructField_DEFAULT = NewMyUnion().StructField

func (x *MyUnion) GetBoolFieldNonCompat() *bool {
    return x.BoolField
}

func (x *MyUnion) GetBoolField() bool {
    if !x.IsSetBoolField() {
      return false
    }

    return *x.BoolField
}

func (x *MyUnion) GetByteFieldNonCompat() *byte {
    return x.ByteField
}

func (x *MyUnion) GetByteField() byte {
    if !x.IsSetByteField() {
      return 0
    }

    return *x.ByteField
}

func (x *MyUnion) GetShortFieldNonCompat() *int16 {
    return x.ShortField
}

func (x *MyUnion) GetShortField() int16 {
    if !x.IsSetShortField() {
      return 0
    }

    return *x.ShortField
}

func (x *MyUnion) GetIntFieldNonCompat() *int32 {
    return x.IntField
}

func (x *MyUnion) GetIntField() int32 {
    if !x.IsSetIntField() {
      return 0
    }

    return *x.IntField
}

func (x *MyUnion) GetLongFieldNonCompat() *int64 {
    return x.LongField
}

func (x *MyUnion) GetLongField() int64 {
    if !x.IsSetLongField() {
      return 0
    }

    return *x.LongField
}

func (x *MyUnion) GetFloatFieldNonCompat() *float32 {
    return x.FloatField
}

func (x *MyUnion) GetFloatField() float32 {
    if !x.IsSetFloatField() {
      return 0.0
    }

    return *x.FloatField
}

func (x *MyUnion) GetDoubleFieldNonCompat() *float64 {
    return x.DoubleField
}

func (x *MyUnion) GetDoubleField() float64 {
    if !x.IsSetDoubleField() {
      return 0.0
    }

    return *x.DoubleField
}

func (x *MyUnion) GetStringFieldNonCompat() *string {
    return x.StringField
}

func (x *MyUnion) GetStringField() string {
    if !x.IsSetStringField() {
      return ""
    }

    return *x.StringField
}

func (x *MyUnion) GetBinaryFieldNonCompat() []byte {
    return x.BinaryField
}

func (x *MyUnion) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
      return []byte("")
    }

    return x.BinaryField
}

func (x *MyUnion) GetEnumFieldNonCompat() *MyEnum {
    return x.EnumField
}

func (x *MyUnion) GetEnumField() MyEnum {
    if !x.IsSetEnumField() {
      return 0
    }

    return *x.EnumField
}

func (x *MyUnion) GetListFieldNonCompat() []int16 {
    return x.ListField
}

func (x *MyUnion) GetListField() []int16 {
    if !x.IsSetListField() {
      return nil
    }

    return x.ListField
}

func (x *MyUnion) GetSetFieldNonCompat() []int16 {
    return x.SetField
}

func (x *MyUnion) GetSetField() []int16 {
    if !x.IsSetSetField() {
      return nil
    }

    return x.SetField
}

func (x *MyUnion) GetMapFieldNonCompat() map[int16]int16 {
    return x.MapField
}

func (x *MyUnion) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
      return nil
    }

    return x.MapField
}

func (x *MyUnion) GetStructFieldNonCompat() *MyStruct {
    return x.StructField
}

func (x *MyUnion) GetStructField() *MyStruct {
    if !x.IsSetStructField() {
      return NewMyStruct()
    }

    return x.StructField
}

func (x *MyUnion) SetBoolField(value bool) *MyUnion {
    x.BoolField = &value
    return x
}

func (x *MyUnion) SetByteField(value byte) *MyUnion {
    x.ByteField = &value
    return x
}

func (x *MyUnion) SetShortField(value int16) *MyUnion {
    x.ShortField = &value
    return x
}

func (x *MyUnion) SetIntField(value int32) *MyUnion {
    x.IntField = &value
    return x
}

func (x *MyUnion) SetLongField(value int64) *MyUnion {
    x.LongField = &value
    return x
}

func (x *MyUnion) SetFloatField(value float32) *MyUnion {
    x.FloatField = &value
    return x
}

func (x *MyUnion) SetDoubleField(value float64) *MyUnion {
    x.DoubleField = &value
    return x
}

func (x *MyUnion) SetStringField(value string) *MyUnion {
    x.StringField = &value
    return x
}

func (x *MyUnion) SetBinaryField(value []byte) *MyUnion {
    x.BinaryField = value
    return x
}

func (x *MyUnion) SetEnumField(value MyEnum) *MyUnion {
    x.EnumField = &value
    return x
}

func (x *MyUnion) SetListField(value []int16) *MyUnion {
    x.ListField = value
    return x
}

func (x *MyUnion) SetSetField(value []int16) *MyUnion {
    x.SetField = value
    return x
}

func (x *MyUnion) SetMapField(value map[int16]int16) *MyUnion {
    x.MapField = value
    return x
}

func (x *MyUnion) SetStructField(value MyStruct) *MyUnion {
    x.StructField = &value
    return x
}

func (x *MyUnion) IsSetBoolField() bool {
    return x.BoolField != nil
}

func (x *MyUnion) IsSetByteField() bool {
    return x.ByteField != nil
}

func (x *MyUnion) IsSetShortField() bool {
    return x.ShortField != nil
}

func (x *MyUnion) IsSetIntField() bool {
    return x.IntField != nil
}

func (x *MyUnion) IsSetLongField() bool {
    return x.LongField != nil
}

func (x *MyUnion) IsSetFloatField() bool {
    return x.FloatField != nil
}

func (x *MyUnion) IsSetDoubleField() bool {
    return x.DoubleField != nil
}

func (x *MyUnion) IsSetStringField() bool {
    return x.StringField != nil
}

func (x *MyUnion) IsSetBinaryField() bool {
    return x.BinaryField != nil
}

func (x *MyUnion) IsSetEnumField() bool {
    return x.EnumField != nil
}

func (x *MyUnion) IsSetListField() bool {
    return x.ListField != nil
}

func (x *MyUnion) IsSetSetField() bool {
    return x.SetField != nil
}

func (x *MyUnion) IsSetMapField() bool {
    return x.MapField != nil
}

func (x *MyUnion) IsSetStructField() bool {
    return x.StructField != nil
}

func (x *MyUnion) writeField1(p thrift.Protocol) error {  // BoolField
    if !x.IsSetBoolField() {
        return nil
    }

    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBoolFieldNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Protocol) error {  // ByteField
    if !x.IsSetByteField() {
        return nil
    }

    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetByteFieldNonCompat()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Protocol) error {  // ShortField
    if !x.IsSetShortField() {
        return nil
    }

    if err := p.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetShortFieldNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField4(p thrift.Protocol) error {  // IntField
    if !x.IsSetIntField() {
        return nil
    }

    if err := p.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetIntFieldNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField5(p thrift.Protocol) error {  // LongField
    if !x.IsSetLongField() {
        return nil
    }

    if err := p.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLongFieldNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField6(p thrift.Protocol) error {  // FloatField
    if !x.IsSetFloatField() {
        return nil
    }

    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetFloatFieldNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField7(p thrift.Protocol) error {  // DoubleField
    if !x.IsSetDoubleField() {
        return nil
    }

    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDoubleFieldNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField8(p thrift.Protocol) error {  // StringField
    if !x.IsSetStringField() {
        return nil
    }

    if err := p.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStringFieldNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField9(p thrift.Protocol) error {  // BinaryField
    if !x.IsSetBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("binary_field", thrift.BINARY, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryFieldNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField10(p thrift.Protocol) error {  // EnumField
    if !x.IsSetEnumField() {
        return nil
    }

    if err := p.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnumFieldNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField11(p thrift.Protocol) error {  // ListField
    if !x.IsSetListField() {
        return nil
    }

    if err := p.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListFieldNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField12(p thrift.Protocol) error {  // SetField
    if !x.IsSetSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSetFieldNonCompat()
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField13(p thrift.Protocol) error {  // MapField
    if !x.IsSetMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapFieldNonCompat()
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField14(p thrift.Protocol) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Protocol) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolField(result)
    return nil
}

func (x *MyUnion) readField2(p thrift.Protocol) error {  // ByteField
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetByteField(result)
    return nil
}

func (x *MyUnion) readField3(p thrift.Protocol) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetShortField(result)
    return nil
}

func (x *MyUnion) readField4(p thrift.Protocol) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetIntField(result)
    return nil
}

func (x *MyUnion) readField5(p thrift.Protocol) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetLongField(result)
    return nil
}

func (x *MyUnion) readField6(p thrift.Protocol) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatField(result)
    return nil
}

func (x *MyUnion) readField7(p thrift.Protocol) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleField(result)
    return nil
}

func (x *MyUnion) readField8(p thrift.Protocol) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringField(result)
    return nil
}

func (x *MyUnion) readField9(p thrift.Protocol) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryField(result)
    return nil
}

func (x *MyUnion) readField10(p thrift.Protocol) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumField(result)
    return nil
}

func (x *MyUnion) readField11(p thrift.Protocol) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListField(result)
    return nil
}

func (x *MyUnion) readField12(p thrift.Protocol) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetSetField(result)
    return nil
}

func (x *MyUnion) readField13(p thrift.Protocol) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapField(result)
    return nil
}

func (x *MyUnion) readField14(p thrift.Protocol) error {  // StructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructField(result)
    return nil
}

func (x *MyUnion) String() string {
    return fmt.Sprintf("%+v", x)
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetBoolField()) {
        count++
    }
    if (x.IsSetByteField()) {
        count++
    }
    if (x.IsSetShortField()) {
        count++
    }
    if (x.IsSetIntField()) {
        count++
    }
    if (x.IsSetLongField()) {
        count++
    }
    if (x.IsSetFloatField()) {
        count++
    }
    if (x.IsSetDoubleField()) {
        count++
    }
    if (x.IsSetStringField()) {
        count++
    }
    if (x.IsSetBinaryField()) {
        count++
    }
    if (x.IsSetEnumField()) {
        count++
    }
    if (x.IsSetListField()) {
        count++
    }
    if (x.IsSetSetField()) {
        count++
    }
    if (x.IsSetMapField()) {
        count++
    }
    if (x.IsSetStructField()) {
        count++
    }
    return count
}


// Deprecated: Use MyUnion.Set* methods instead or set the fields directly.
type MyUnionBuilder struct {
    obj *MyUnion
}

func NewMyUnionBuilder() *MyUnionBuilder {
    return &MyUnionBuilder{
        obj: NewMyUnion(),
    }
}

func (x *MyUnionBuilder) BoolField(value *bool) *MyUnionBuilder {
    x.obj.BoolField = value
    return x
}

func (x *MyUnionBuilder) ByteField(value *byte) *MyUnionBuilder {
    x.obj.ByteField = value
    return x
}

func (x *MyUnionBuilder) ShortField(value *int16) *MyUnionBuilder {
    x.obj.ShortField = value
    return x
}

func (x *MyUnionBuilder) IntField(value *int32) *MyUnionBuilder {
    x.obj.IntField = value
    return x
}

func (x *MyUnionBuilder) LongField(value *int64) *MyUnionBuilder {
    x.obj.LongField = value
    return x
}

func (x *MyUnionBuilder) FloatField(value *float32) *MyUnionBuilder {
    x.obj.FloatField = value
    return x
}

func (x *MyUnionBuilder) DoubleField(value *float64) *MyUnionBuilder {
    x.obj.DoubleField = value
    return x
}

func (x *MyUnionBuilder) StringField(value *string) *MyUnionBuilder {
    x.obj.StringField = value
    return x
}

func (x *MyUnionBuilder) BinaryField(value []byte) *MyUnionBuilder {
    x.obj.BinaryField = value
    return x
}

func (x *MyUnionBuilder) EnumField(value *MyEnum) *MyUnionBuilder {
    x.obj.EnumField = value
    return x
}

func (x *MyUnionBuilder) ListField(value []int16) *MyUnionBuilder {
    x.obj.ListField = value
    return x
}

func (x *MyUnionBuilder) SetField(value []int16) *MyUnionBuilder {
    x.obj.SetField = value
    return x
}

func (x *MyUnionBuilder) MapField(value map[int16]int16) *MyUnionBuilder {
    x.obj.MapField = value
    return x
}

func (x *MyUnionBuilder) StructField(value *MyStruct) *MyUnionBuilder {
    x.obj.StructField = value
    return x
}

func (x *MyUnionBuilder) Emit() *MyUnion {
    var objCopy MyUnion = *x.obj
    return &objCopy
}

func (x *MyUnion) Write(p thrift.Protocol) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case 10:  // enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case 11:  // list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case 12:  // set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case 13:  // map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case 14:  // struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type MyStructWithCustomDefault struct {
    Field1 int64 `thrift:"field1,1" json:"field1" db:"field1"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructWithCustomDefault{}


func NewMyStructWithCustomDefault() *MyStructWithCustomDefault {
    return (&MyStructWithCustomDefault{}).
        SetField1(1)
}

func (x *MyStructWithCustomDefault) GetField1NonCompat() int64 {
    return x.Field1
}

func (x *MyStructWithCustomDefault) GetField1() int64 {
    return x.Field1
}

func (x *MyStructWithCustomDefault) SetField1(value int64) *MyStructWithCustomDefault {
    x.Field1 = value
    return x
}


func (x *MyStructWithCustomDefault) writeField1(p thrift.Protocol) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetField1NonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructWithCustomDefault) readField1(p thrift.Protocol) error {  // Field1
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetField1(result)
    return nil
}

func (x *MyStructWithCustomDefault) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use MyStructWithCustomDefault.Set* methods instead or set the fields directly.
type MyStructWithCustomDefaultBuilder struct {
    obj *MyStructWithCustomDefault
}

func NewMyStructWithCustomDefaultBuilder() *MyStructWithCustomDefaultBuilder {
    return &MyStructWithCustomDefaultBuilder{
        obj: NewMyStructWithCustomDefault(),
    }
}

func (x *MyStructWithCustomDefaultBuilder) Field1(value int64) *MyStructWithCustomDefaultBuilder {
    x.obj.Field1 = value
    return x
}

func (x *MyStructWithCustomDefaultBuilder) Emit() *MyStructWithCustomDefault {
    var objCopy MyStructWithCustomDefault = *x.obj
    return &objCopy
}

func (x *MyStructWithCustomDefault) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructWithCustomDefault) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // field1
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type StructLevelTerseStruct struct {
    BoolField bool `thrift:"bool_field,1" json:"bool_field" db:"bool_field"`
    ByteField byte `thrift:"byte_field,2" json:"byte_field" db:"byte_field"`
    ShortField int16 `thrift:"short_field,3" json:"short_field" db:"short_field"`
    IntField int32 `thrift:"int_field,4" json:"int_field" db:"int_field"`
    LongField int64 `thrift:"long_field,5" json:"long_field" db:"long_field"`
    FloatField float32 `thrift:"float_field,6" json:"float_field" db:"float_field"`
    DoubleField float64 `thrift:"double_field,7" json:"double_field" db:"double_field"`
    StringField string `thrift:"string_field,8" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,9" json:"binary_field" db:"binary_field"`
    EnumField MyEnum `thrift:"enum_field,10" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,11" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,12" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,13" json:"map_field" db:"map_field"`
    StructField *MyStruct `thrift:"struct_field,14" json:"struct_field" db:"struct_field"`
    UnionField *MyUnion `thrift:"union_field,15" json:"union_field" db:"union_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = &StructLevelTerseStruct{}


func NewStructLevelTerseStruct() *StructLevelTerseStruct {
    return (&StructLevelTerseStruct{})
}

// Deprecated: Use NewStructLevelTerseStruct().StructField instead.
var StructLevelTerseStruct_StructField_DEFAULT = NewStructLevelTerseStruct().StructField

// Deprecated: Use NewStructLevelTerseStruct().UnionField instead.
var StructLevelTerseStruct_UnionField_DEFAULT = NewStructLevelTerseStruct().UnionField

func (x *StructLevelTerseStruct) GetBoolFieldNonCompat() bool {
    return x.BoolField
}

func (x *StructLevelTerseStruct) GetBoolField() bool {
    return x.BoolField
}

func (x *StructLevelTerseStruct) GetByteFieldNonCompat() byte {
    return x.ByteField
}

func (x *StructLevelTerseStruct) GetByteField() byte {
    return x.ByteField
}

func (x *StructLevelTerseStruct) GetShortFieldNonCompat() int16 {
    return x.ShortField
}

func (x *StructLevelTerseStruct) GetShortField() int16 {
    return x.ShortField
}

func (x *StructLevelTerseStruct) GetIntFieldNonCompat() int32 {
    return x.IntField
}

func (x *StructLevelTerseStruct) GetIntField() int32 {
    return x.IntField
}

func (x *StructLevelTerseStruct) GetLongFieldNonCompat() int64 {
    return x.LongField
}

func (x *StructLevelTerseStruct) GetLongField() int64 {
    return x.LongField
}

func (x *StructLevelTerseStruct) GetFloatFieldNonCompat() float32 {
    return x.FloatField
}

func (x *StructLevelTerseStruct) GetFloatField() float32 {
    return x.FloatField
}

func (x *StructLevelTerseStruct) GetDoubleFieldNonCompat() float64 {
    return x.DoubleField
}

func (x *StructLevelTerseStruct) GetDoubleField() float64 {
    return x.DoubleField
}

func (x *StructLevelTerseStruct) GetStringFieldNonCompat() string {
    return x.StringField
}

func (x *StructLevelTerseStruct) GetStringField() string {
    return x.StringField
}

func (x *StructLevelTerseStruct) GetBinaryFieldNonCompat() []byte {
    return x.BinaryField
}

func (x *StructLevelTerseStruct) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
      return []byte("")
    }

    return x.BinaryField
}

func (x *StructLevelTerseStruct) GetEnumFieldNonCompat() MyEnum {
    return x.EnumField
}

func (x *StructLevelTerseStruct) GetEnumField() MyEnum {
    return x.EnumField
}

func (x *StructLevelTerseStruct) GetListFieldNonCompat() []int16 {
    return x.ListField
}

func (x *StructLevelTerseStruct) GetListField() []int16 {
    if !x.IsSetListField() {
      return nil
    }

    return x.ListField
}

func (x *StructLevelTerseStruct) GetSetFieldNonCompat() []int16 {
    return x.SetField
}

func (x *StructLevelTerseStruct) GetSetField() []int16 {
    if !x.IsSetSetField() {
      return nil
    }

    return x.SetField
}

func (x *StructLevelTerseStruct) GetMapFieldNonCompat() map[int16]int16 {
    return x.MapField
}

func (x *StructLevelTerseStruct) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
      return nil
    }

    return x.MapField
}

func (x *StructLevelTerseStruct) GetStructFieldNonCompat() *MyStruct {
    return x.StructField
}

func (x *StructLevelTerseStruct) GetStructField() *MyStruct {
    if !x.IsSetStructField() {
      return NewMyStruct()
    }

    return x.StructField
}

func (x *StructLevelTerseStruct) GetUnionFieldNonCompat() *MyUnion {
    return x.UnionField
}

func (x *StructLevelTerseStruct) GetUnionField() *MyUnion {
    if !x.IsSetUnionField() {
      return NewMyUnion()
    }

    return x.UnionField
}

func (x *StructLevelTerseStruct) SetBoolField(value bool) *StructLevelTerseStruct {
    x.BoolField = value
    return x
}

func (x *StructLevelTerseStruct) SetByteField(value byte) *StructLevelTerseStruct {
    x.ByteField = value
    return x
}

func (x *StructLevelTerseStruct) SetShortField(value int16) *StructLevelTerseStruct {
    x.ShortField = value
    return x
}

func (x *StructLevelTerseStruct) SetIntField(value int32) *StructLevelTerseStruct {
    x.IntField = value
    return x
}

func (x *StructLevelTerseStruct) SetLongField(value int64) *StructLevelTerseStruct {
    x.LongField = value
    return x
}

func (x *StructLevelTerseStruct) SetFloatField(value float32) *StructLevelTerseStruct {
    x.FloatField = value
    return x
}

func (x *StructLevelTerseStruct) SetDoubleField(value float64) *StructLevelTerseStruct {
    x.DoubleField = value
    return x
}

func (x *StructLevelTerseStruct) SetStringField(value string) *StructLevelTerseStruct {
    x.StringField = value
    return x
}

func (x *StructLevelTerseStruct) SetBinaryField(value []byte) *StructLevelTerseStruct {
    x.BinaryField = value
    return x
}

func (x *StructLevelTerseStruct) SetEnumField(value MyEnum) *StructLevelTerseStruct {
    x.EnumField = value
    return x
}

func (x *StructLevelTerseStruct) SetListField(value []int16) *StructLevelTerseStruct {
    x.ListField = value
    return x
}

func (x *StructLevelTerseStruct) SetSetField(value []int16) *StructLevelTerseStruct {
    x.SetField = value
    return x
}

func (x *StructLevelTerseStruct) SetMapField(value map[int16]int16) *StructLevelTerseStruct {
    x.MapField = value
    return x
}

func (x *StructLevelTerseStruct) SetStructField(value MyStruct) *StructLevelTerseStruct {
    x.StructField = &value
    return x
}

func (x *StructLevelTerseStruct) SetUnionField(value MyUnion) *StructLevelTerseStruct {
    x.UnionField = &value
    return x
}









func (x *StructLevelTerseStruct) IsSetBinaryField() bool {
    return x.BinaryField != nil
}


func (x *StructLevelTerseStruct) IsSetListField() bool {
    return x.ListField != nil
}

func (x *StructLevelTerseStruct) IsSetSetField() bool {
    return x.SetField != nil
}

func (x *StructLevelTerseStruct) IsSetMapField() bool {
    return x.MapField != nil
}

func (x *StructLevelTerseStruct) IsSetStructField() bool {
    return x.StructField != nil
}

func (x *StructLevelTerseStruct) IsSetUnionField() bool {
    return x.UnionField != nil
}

func (x *StructLevelTerseStruct) writeField1(p thrift.Protocol) error {  // BoolField
    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBoolFieldNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField2(p thrift.Protocol) error {  // ByteField
    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetByteFieldNonCompat()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField3(p thrift.Protocol) error {  // ShortField
    if err := p.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetShortFieldNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField4(p thrift.Protocol) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIntFieldNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField5(p thrift.Protocol) error {  // LongField
    if err := p.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLongFieldNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField6(p thrift.Protocol) error {  // FloatField
    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFloatFieldNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField7(p thrift.Protocol) error {  // DoubleField
    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDoubleFieldNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField8(p thrift.Protocol) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStringFieldNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField9(p thrift.Protocol) error {  // BinaryField
    if !x.IsSetBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("binary_field", thrift.BINARY, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryFieldNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField10(p thrift.Protocol) error {  // EnumField
    if err := p.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumFieldNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField11(p thrift.Protocol) error {  // ListField
    if !x.IsSetListField() {
        return nil
    }

    if err := p.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListFieldNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField12(p thrift.Protocol) error {  // SetField
    if !x.IsSetSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSetFieldNonCompat()
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField13(p thrift.Protocol) error {  // MapField
    if !x.IsSetMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapFieldNonCompat()
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField14(p thrift.Protocol) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField15(p thrift.Protocol) error {  // UnionField
    if !x.IsSetUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("union_field", thrift.STRUCT, 15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnionFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) readField1(p thrift.Protocol) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField2(p thrift.Protocol) error {  // ByteField
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetByteField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField3(p thrift.Protocol) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetShortField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField4(p thrift.Protocol) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetIntField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField5(p thrift.Protocol) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetLongField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField6(p thrift.Protocol) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField7(p thrift.Protocol) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField8(p thrift.Protocol) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField9(p thrift.Protocol) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField10(p thrift.Protocol) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField11(p thrift.Protocol) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField12(p thrift.Protocol) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetSetField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField13(p thrift.Protocol) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField14(p thrift.Protocol) error {  // StructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructField(result)
    return nil
}

func (x *StructLevelTerseStruct) readField15(p thrift.Protocol) error {  // UnionField
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionField(result)
    return nil
}

func (x *StructLevelTerseStruct) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use StructLevelTerseStruct.Set* methods instead or set the fields directly.
type StructLevelTerseStructBuilder struct {
    obj *StructLevelTerseStruct
}

func NewStructLevelTerseStructBuilder() *StructLevelTerseStructBuilder {
    return &StructLevelTerseStructBuilder{
        obj: NewStructLevelTerseStruct(),
    }
}

func (x *StructLevelTerseStructBuilder) BoolField(value bool) *StructLevelTerseStructBuilder {
    x.obj.BoolField = value
    return x
}

func (x *StructLevelTerseStructBuilder) ByteField(value byte) *StructLevelTerseStructBuilder {
    x.obj.ByteField = value
    return x
}

func (x *StructLevelTerseStructBuilder) ShortField(value int16) *StructLevelTerseStructBuilder {
    x.obj.ShortField = value
    return x
}

func (x *StructLevelTerseStructBuilder) IntField(value int32) *StructLevelTerseStructBuilder {
    x.obj.IntField = value
    return x
}

func (x *StructLevelTerseStructBuilder) LongField(value int64) *StructLevelTerseStructBuilder {
    x.obj.LongField = value
    return x
}

func (x *StructLevelTerseStructBuilder) FloatField(value float32) *StructLevelTerseStructBuilder {
    x.obj.FloatField = value
    return x
}

func (x *StructLevelTerseStructBuilder) DoubleField(value float64) *StructLevelTerseStructBuilder {
    x.obj.DoubleField = value
    return x
}

func (x *StructLevelTerseStructBuilder) StringField(value string) *StructLevelTerseStructBuilder {
    x.obj.StringField = value
    return x
}

func (x *StructLevelTerseStructBuilder) BinaryField(value []byte) *StructLevelTerseStructBuilder {
    x.obj.BinaryField = value
    return x
}

func (x *StructLevelTerseStructBuilder) EnumField(value MyEnum) *StructLevelTerseStructBuilder {
    x.obj.EnumField = value
    return x
}

func (x *StructLevelTerseStructBuilder) ListField(value []int16) *StructLevelTerseStructBuilder {
    x.obj.ListField = value
    return x
}

func (x *StructLevelTerseStructBuilder) SetField(value []int16) *StructLevelTerseStructBuilder {
    x.obj.SetField = value
    return x
}

func (x *StructLevelTerseStructBuilder) MapField(value map[int16]int16) *StructLevelTerseStructBuilder {
    x.obj.MapField = value
    return x
}

func (x *StructLevelTerseStructBuilder) StructField(value *MyStruct) *StructLevelTerseStructBuilder {
    x.obj.StructField = value
    return x
}

func (x *StructLevelTerseStructBuilder) UnionField(value *MyUnion) *StructLevelTerseStructBuilder {
    x.obj.UnionField = value
    return x
}

func (x *StructLevelTerseStructBuilder) Emit() *StructLevelTerseStruct {
    var objCopy StructLevelTerseStruct = *x.obj
    return &objCopy
}

func (x *StructLevelTerseStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("StructLevelTerseStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := x.writeField15(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case 10:  // enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case 11:  // list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case 12:  // set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case 13:  // map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case 14:  // struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        case 15:  // union_field
            if err := x.readField15(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type FieldLevelTerseStruct struct {
    TerseBoolField bool `thrift:"terse_bool_field,1" json:"terse_bool_field" db:"terse_bool_field"`
    TerseByteField byte `thrift:"terse_byte_field,2" json:"terse_byte_field" db:"terse_byte_field"`
    TerseShortField int16 `thrift:"terse_short_field,3" json:"terse_short_field" db:"terse_short_field"`
    TerseIntField int32 `thrift:"terse_int_field,4" json:"terse_int_field" db:"terse_int_field"`
    TerseLongField int64 `thrift:"terse_long_field,5" json:"terse_long_field" db:"terse_long_field"`
    TerseFloatField float32 `thrift:"terse_float_field,6" json:"terse_float_field" db:"terse_float_field"`
    TerseDoubleField float64 `thrift:"terse_double_field,7" json:"terse_double_field" db:"terse_double_field"`
    TerseStringField string `thrift:"terse_string_field,8" json:"terse_string_field" db:"terse_string_field"`
    TerseBinaryField []byte `thrift:"terse_binary_field,9" json:"terse_binary_field" db:"terse_binary_field"`
    TerseEnumField MyEnum `thrift:"terse_enum_field,10" json:"terse_enum_field" db:"terse_enum_field"`
    TerseListField []int16 `thrift:"terse_list_field,11" json:"terse_list_field" db:"terse_list_field"`
    TerseSetField []int16 `thrift:"terse_set_field,12" json:"terse_set_field" db:"terse_set_field"`
    TerseMapField map[int16]int16 `thrift:"terse_map_field,13" json:"terse_map_field" db:"terse_map_field"`
    TerseStructField *MyStruct `thrift:"terse_struct_field,14" json:"terse_struct_field" db:"terse_struct_field"`
    TerseUnionField *MyUnion `thrift:"terse_union_field,29" json:"terse_union_field" db:"terse_union_field"`
    BoolField bool `thrift:"bool_field,15" json:"bool_field" db:"bool_field"`
    ByteField byte `thrift:"byte_field,16" json:"byte_field" db:"byte_field"`
    ShortField int16 `thrift:"short_field,17" json:"short_field" db:"short_field"`
    IntField int32 `thrift:"int_field,18" json:"int_field" db:"int_field"`
    LongField int64 `thrift:"long_field,19" json:"long_field" db:"long_field"`
    FloatField float32 `thrift:"float_field,20" json:"float_field" db:"float_field"`
    DoubleField float64 `thrift:"double_field,21" json:"double_field" db:"double_field"`
    StringField string `thrift:"string_field,22" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,23" json:"binary_field" db:"binary_field"`
    EnumField MyEnum `thrift:"enum_field,24" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,25" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,26" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,27" json:"map_field" db:"map_field"`
    StructField *MyStruct `thrift:"struct_field,28" json:"struct_field" db:"struct_field"`
    UnionField *MyUnion `thrift:"union_field,30" json:"union_field" db:"union_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = &FieldLevelTerseStruct{}


func NewFieldLevelTerseStruct() *FieldLevelTerseStruct {
    return (&FieldLevelTerseStruct{})
}

// Deprecated: Use NewFieldLevelTerseStruct().TerseStructField instead.
var FieldLevelTerseStruct_TerseStructField_DEFAULT = NewFieldLevelTerseStruct().TerseStructField

// Deprecated: Use NewFieldLevelTerseStruct().TerseUnionField instead.
var FieldLevelTerseStruct_TerseUnionField_DEFAULT = NewFieldLevelTerseStruct().TerseUnionField

// Deprecated: Use NewFieldLevelTerseStruct().StructField instead.
var FieldLevelTerseStruct_StructField_DEFAULT = NewFieldLevelTerseStruct().StructField

// Deprecated: Use NewFieldLevelTerseStruct().UnionField instead.
var FieldLevelTerseStruct_UnionField_DEFAULT = NewFieldLevelTerseStruct().UnionField

func (x *FieldLevelTerseStruct) GetTerseBoolFieldNonCompat() bool {
    return x.TerseBoolField
}

func (x *FieldLevelTerseStruct) GetTerseBoolField() bool {
    return x.TerseBoolField
}

func (x *FieldLevelTerseStruct) GetTerseByteFieldNonCompat() byte {
    return x.TerseByteField
}

func (x *FieldLevelTerseStruct) GetTerseByteField() byte {
    return x.TerseByteField
}

func (x *FieldLevelTerseStruct) GetTerseShortFieldNonCompat() int16 {
    return x.TerseShortField
}

func (x *FieldLevelTerseStruct) GetTerseShortField() int16 {
    return x.TerseShortField
}

func (x *FieldLevelTerseStruct) GetTerseIntFieldNonCompat() int32 {
    return x.TerseIntField
}

func (x *FieldLevelTerseStruct) GetTerseIntField() int32 {
    return x.TerseIntField
}

func (x *FieldLevelTerseStruct) GetTerseLongFieldNonCompat() int64 {
    return x.TerseLongField
}

func (x *FieldLevelTerseStruct) GetTerseLongField() int64 {
    return x.TerseLongField
}

func (x *FieldLevelTerseStruct) GetTerseFloatFieldNonCompat() float32 {
    return x.TerseFloatField
}

func (x *FieldLevelTerseStruct) GetTerseFloatField() float32 {
    return x.TerseFloatField
}

func (x *FieldLevelTerseStruct) GetTerseDoubleFieldNonCompat() float64 {
    return x.TerseDoubleField
}

func (x *FieldLevelTerseStruct) GetTerseDoubleField() float64 {
    return x.TerseDoubleField
}

func (x *FieldLevelTerseStruct) GetTerseStringFieldNonCompat() string {
    return x.TerseStringField
}

func (x *FieldLevelTerseStruct) GetTerseStringField() string {
    return x.TerseStringField
}

func (x *FieldLevelTerseStruct) GetTerseBinaryFieldNonCompat() []byte {
    return x.TerseBinaryField
}

func (x *FieldLevelTerseStruct) GetTerseBinaryField() []byte {
    if !x.IsSetTerseBinaryField() {
      return []byte("")
    }

    return x.TerseBinaryField
}

func (x *FieldLevelTerseStruct) GetTerseEnumFieldNonCompat() MyEnum {
    return x.TerseEnumField
}

func (x *FieldLevelTerseStruct) GetTerseEnumField() MyEnum {
    return x.TerseEnumField
}

func (x *FieldLevelTerseStruct) GetTerseListFieldNonCompat() []int16 {
    return x.TerseListField
}

func (x *FieldLevelTerseStruct) GetTerseListField() []int16 {
    if !x.IsSetTerseListField() {
      return nil
    }

    return x.TerseListField
}

func (x *FieldLevelTerseStruct) GetTerseSetFieldNonCompat() []int16 {
    return x.TerseSetField
}

func (x *FieldLevelTerseStruct) GetTerseSetField() []int16 {
    if !x.IsSetTerseSetField() {
      return nil
    }

    return x.TerseSetField
}

func (x *FieldLevelTerseStruct) GetTerseMapFieldNonCompat() map[int16]int16 {
    return x.TerseMapField
}

func (x *FieldLevelTerseStruct) GetTerseMapField() map[int16]int16 {
    if !x.IsSetTerseMapField() {
      return nil
    }

    return x.TerseMapField
}

func (x *FieldLevelTerseStruct) GetTerseStructFieldNonCompat() *MyStruct {
    return x.TerseStructField
}

func (x *FieldLevelTerseStruct) GetTerseStructField() *MyStruct {
    if !x.IsSetTerseStructField() {
      return NewMyStruct()
    }

    return x.TerseStructField
}

func (x *FieldLevelTerseStruct) GetTerseUnionFieldNonCompat() *MyUnion {
    return x.TerseUnionField
}

func (x *FieldLevelTerseStruct) GetTerseUnionField() *MyUnion {
    if !x.IsSetTerseUnionField() {
      return NewMyUnion()
    }

    return x.TerseUnionField
}

func (x *FieldLevelTerseStruct) GetBoolFieldNonCompat() bool {
    return x.BoolField
}

func (x *FieldLevelTerseStruct) GetBoolField() bool {
    return x.BoolField
}

func (x *FieldLevelTerseStruct) GetByteFieldNonCompat() byte {
    return x.ByteField
}

func (x *FieldLevelTerseStruct) GetByteField() byte {
    return x.ByteField
}

func (x *FieldLevelTerseStruct) GetShortFieldNonCompat() int16 {
    return x.ShortField
}

func (x *FieldLevelTerseStruct) GetShortField() int16 {
    return x.ShortField
}

func (x *FieldLevelTerseStruct) GetIntFieldNonCompat() int32 {
    return x.IntField
}

func (x *FieldLevelTerseStruct) GetIntField() int32 {
    return x.IntField
}

func (x *FieldLevelTerseStruct) GetLongFieldNonCompat() int64 {
    return x.LongField
}

func (x *FieldLevelTerseStruct) GetLongField() int64 {
    return x.LongField
}

func (x *FieldLevelTerseStruct) GetFloatFieldNonCompat() float32 {
    return x.FloatField
}

func (x *FieldLevelTerseStruct) GetFloatField() float32 {
    return x.FloatField
}

func (x *FieldLevelTerseStruct) GetDoubleFieldNonCompat() float64 {
    return x.DoubleField
}

func (x *FieldLevelTerseStruct) GetDoubleField() float64 {
    return x.DoubleField
}

func (x *FieldLevelTerseStruct) GetStringFieldNonCompat() string {
    return x.StringField
}

func (x *FieldLevelTerseStruct) GetStringField() string {
    return x.StringField
}

func (x *FieldLevelTerseStruct) GetBinaryFieldNonCompat() []byte {
    return x.BinaryField
}

func (x *FieldLevelTerseStruct) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
      return []byte("")
    }

    return x.BinaryField
}

func (x *FieldLevelTerseStruct) GetEnumFieldNonCompat() MyEnum {
    return x.EnumField
}

func (x *FieldLevelTerseStruct) GetEnumField() MyEnum {
    return x.EnumField
}

func (x *FieldLevelTerseStruct) GetListFieldNonCompat() []int16 {
    return x.ListField
}

func (x *FieldLevelTerseStruct) GetListField() []int16 {
    if !x.IsSetListField() {
      return nil
    }

    return x.ListField
}

func (x *FieldLevelTerseStruct) GetSetFieldNonCompat() []int16 {
    return x.SetField
}

func (x *FieldLevelTerseStruct) GetSetField() []int16 {
    if !x.IsSetSetField() {
      return nil
    }

    return x.SetField
}

func (x *FieldLevelTerseStruct) GetMapFieldNonCompat() map[int16]int16 {
    return x.MapField
}

func (x *FieldLevelTerseStruct) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
      return nil
    }

    return x.MapField
}

func (x *FieldLevelTerseStruct) GetStructFieldNonCompat() *MyStruct {
    return x.StructField
}

func (x *FieldLevelTerseStruct) GetStructField() *MyStruct {
    if !x.IsSetStructField() {
      return NewMyStruct()
    }

    return x.StructField
}

func (x *FieldLevelTerseStruct) GetUnionFieldNonCompat() *MyUnion {
    return x.UnionField
}

func (x *FieldLevelTerseStruct) GetUnionField() *MyUnion {
    if !x.IsSetUnionField() {
      return NewMyUnion()
    }

    return x.UnionField
}

func (x *FieldLevelTerseStruct) SetTerseBoolField(value bool) *FieldLevelTerseStruct {
    x.TerseBoolField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseByteField(value byte) *FieldLevelTerseStruct {
    x.TerseByteField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseShortField(value int16) *FieldLevelTerseStruct {
    x.TerseShortField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseIntField(value int32) *FieldLevelTerseStruct {
    x.TerseIntField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseLongField(value int64) *FieldLevelTerseStruct {
    x.TerseLongField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseFloatField(value float32) *FieldLevelTerseStruct {
    x.TerseFloatField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseDoubleField(value float64) *FieldLevelTerseStruct {
    x.TerseDoubleField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseStringField(value string) *FieldLevelTerseStruct {
    x.TerseStringField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseBinaryField(value []byte) *FieldLevelTerseStruct {
    x.TerseBinaryField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseEnumField(value MyEnum) *FieldLevelTerseStruct {
    x.TerseEnumField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseListField(value []int16) *FieldLevelTerseStruct {
    x.TerseListField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseSetField(value []int16) *FieldLevelTerseStruct {
    x.TerseSetField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseMapField(value map[int16]int16) *FieldLevelTerseStruct {
    x.TerseMapField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseStructField(value MyStruct) *FieldLevelTerseStruct {
    x.TerseStructField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseUnionField(value MyUnion) *FieldLevelTerseStruct {
    x.TerseUnionField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetBoolField(value bool) *FieldLevelTerseStruct {
    x.BoolField = value
    return x
}

func (x *FieldLevelTerseStruct) SetByteField(value byte) *FieldLevelTerseStruct {
    x.ByteField = value
    return x
}

func (x *FieldLevelTerseStruct) SetShortField(value int16) *FieldLevelTerseStruct {
    x.ShortField = value
    return x
}

func (x *FieldLevelTerseStruct) SetIntField(value int32) *FieldLevelTerseStruct {
    x.IntField = value
    return x
}

func (x *FieldLevelTerseStruct) SetLongField(value int64) *FieldLevelTerseStruct {
    x.LongField = value
    return x
}

func (x *FieldLevelTerseStruct) SetFloatField(value float32) *FieldLevelTerseStruct {
    x.FloatField = value
    return x
}

func (x *FieldLevelTerseStruct) SetDoubleField(value float64) *FieldLevelTerseStruct {
    x.DoubleField = value
    return x
}

func (x *FieldLevelTerseStruct) SetStringField(value string) *FieldLevelTerseStruct {
    x.StringField = value
    return x
}

func (x *FieldLevelTerseStruct) SetBinaryField(value []byte) *FieldLevelTerseStruct {
    x.BinaryField = value
    return x
}

func (x *FieldLevelTerseStruct) SetEnumField(value MyEnum) *FieldLevelTerseStruct {
    x.EnumField = value
    return x
}

func (x *FieldLevelTerseStruct) SetListField(value []int16) *FieldLevelTerseStruct {
    x.ListField = value
    return x
}

func (x *FieldLevelTerseStruct) SetSetField(value []int16) *FieldLevelTerseStruct {
    x.SetField = value
    return x
}

func (x *FieldLevelTerseStruct) SetMapField(value map[int16]int16) *FieldLevelTerseStruct {
    x.MapField = value
    return x
}

func (x *FieldLevelTerseStruct) SetStructField(value MyStruct) *FieldLevelTerseStruct {
    x.StructField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetUnionField(value MyUnion) *FieldLevelTerseStruct {
    x.UnionField = &value
    return x
}









func (x *FieldLevelTerseStruct) IsSetTerseBinaryField() bool {
    return x.TerseBinaryField != nil
}


func (x *FieldLevelTerseStruct) IsSetTerseListField() bool {
    return x.TerseListField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseSetField() bool {
    return x.TerseSetField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseMapField() bool {
    return x.TerseMapField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseStructField() bool {
    return x.TerseStructField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseUnionField() bool {
    return x.TerseUnionField != nil
}









func (x *FieldLevelTerseStruct) IsSetBinaryField() bool {
    return x.BinaryField != nil
}


func (x *FieldLevelTerseStruct) IsSetListField() bool {
    return x.ListField != nil
}

func (x *FieldLevelTerseStruct) IsSetSetField() bool {
    return x.SetField != nil
}

func (x *FieldLevelTerseStruct) IsSetMapField() bool {
    return x.MapField != nil
}

func (x *FieldLevelTerseStruct) IsSetStructField() bool {
    return x.StructField != nil
}

func (x *FieldLevelTerseStruct) IsSetUnionField() bool {
    return x.UnionField != nil
}

func (x *FieldLevelTerseStruct) writeField1(p thrift.Protocol) error {  // TerseBoolField
    if err := p.WriteFieldBegin("terse_bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseBoolFieldNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField2(p thrift.Protocol) error {  // TerseByteField
    if err := p.WriteFieldBegin("terse_byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseByteFieldNonCompat()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField3(p thrift.Protocol) error {  // TerseShortField
    if err := p.WriteFieldBegin("terse_short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseShortFieldNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField4(p thrift.Protocol) error {  // TerseIntField
    if err := p.WriteFieldBegin("terse_int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseIntFieldNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField5(p thrift.Protocol) error {  // TerseLongField
    if err := p.WriteFieldBegin("terse_long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseLongFieldNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField6(p thrift.Protocol) error {  // TerseFloatField
    if err := p.WriteFieldBegin("terse_float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseFloatFieldNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField7(p thrift.Protocol) error {  // TerseDoubleField
    if err := p.WriteFieldBegin("terse_double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseDoubleFieldNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField8(p thrift.Protocol) error {  // TerseStringField
    if err := p.WriteFieldBegin("terse_string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseStringFieldNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField9(p thrift.Protocol) error {  // TerseBinaryField
    if !x.IsSetTerseBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_binary_field", thrift.BINARY, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseBinaryFieldNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField10(p thrift.Protocol) error {  // TerseEnumField
    if err := p.WriteFieldBegin("terse_enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseEnumFieldNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField11(p thrift.Protocol) error {  // TerseListField
    if !x.IsSetTerseListField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseListFieldNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField12(p thrift.Protocol) error {  // TerseSetField
    if !x.IsSetTerseSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseSetFieldNonCompat()
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField13(p thrift.Protocol) error {  // TerseMapField
    if !x.IsSetTerseMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseMapFieldNonCompat()
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField14(p thrift.Protocol) error {  // TerseStructField
    if !x.IsSetTerseStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseStructFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField29(p thrift.Protocol) error {  // TerseUnionField
    if !x.IsSetTerseUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_union_field", thrift.STRUCT, 29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTerseUnionFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField15(p thrift.Protocol) error {  // BoolField
    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBoolFieldNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField16(p thrift.Protocol) error {  // ByteField
    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetByteFieldNonCompat()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField17(p thrift.Protocol) error {  // ShortField
    if err := p.WriteFieldBegin("short_field", thrift.I16, 17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetShortFieldNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField18(p thrift.Protocol) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIntFieldNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField19(p thrift.Protocol) error {  // LongField
    if err := p.WriteFieldBegin("long_field", thrift.I64, 19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLongFieldNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField20(p thrift.Protocol) error {  // FloatField
    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFloatFieldNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField21(p thrift.Protocol) error {  // DoubleField
    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDoubleFieldNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField22(p thrift.Protocol) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStringFieldNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField23(p thrift.Protocol) error {  // BinaryField
    if !x.IsSetBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("binary_field", thrift.BINARY, 23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryFieldNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField24(p thrift.Protocol) error {  // EnumField
    if err := p.WriteFieldBegin("enum_field", thrift.I32, 24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumFieldNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField25(p thrift.Protocol) error {  // ListField
    if !x.IsSetListField() {
        return nil
    }

    if err := p.WriteFieldBegin("list_field", thrift.LIST, 25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListFieldNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField26(p thrift.Protocol) error {  // SetField
    if !x.IsSetSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("set_field", thrift.SET, 26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSetFieldNonCompat()
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField27(p thrift.Protocol) error {  // MapField
    if !x.IsSetMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("map_field", thrift.MAP, 27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapFieldNonCompat()
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField28(p thrift.Protocol) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField30(p thrift.Protocol) error {  // UnionField
    if !x.IsSetUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("union_field", thrift.STRUCT, 30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnionFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) readField1(p thrift.Protocol) error {  // TerseBoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetTerseBoolField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField2(p thrift.Protocol) error {  // TerseByteField
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetTerseByteField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField3(p thrift.Protocol) error {  // TerseShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetTerseShortField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField4(p thrift.Protocol) error {  // TerseIntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetTerseIntField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField5(p thrift.Protocol) error {  // TerseLongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetTerseLongField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField6(p thrift.Protocol) error {  // TerseFloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetTerseFloatField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField7(p thrift.Protocol) error {  // TerseDoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetTerseDoubleField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField8(p thrift.Protocol) error {  // TerseStringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetTerseStringField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField9(p thrift.Protocol) error {  // TerseBinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetTerseBinaryField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField10(p thrift.Protocol) error {  // TerseEnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetTerseEnumField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField11(p thrift.Protocol) error {  // TerseListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetTerseListField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField12(p thrift.Protocol) error {  // TerseSetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetTerseSetField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField13(p thrift.Protocol) error {  // TerseMapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetTerseMapField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField14(p thrift.Protocol) error {  // TerseStructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTerseStructField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField29(p thrift.Protocol) error {  // TerseUnionField
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTerseUnionField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField15(p thrift.Protocol) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField16(p thrift.Protocol) error {  // ByteField
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetByteField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField17(p thrift.Protocol) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetShortField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField18(p thrift.Protocol) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetIntField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField19(p thrift.Protocol) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetLongField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField20(p thrift.Protocol) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField21(p thrift.Protocol) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField22(p thrift.Protocol) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField23(p thrift.Protocol) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField24(p thrift.Protocol) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField25(p thrift.Protocol) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField26(p thrift.Protocol) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetSetField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField27(p thrift.Protocol) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField28(p thrift.Protocol) error {  // StructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructField(result)
    return nil
}

func (x *FieldLevelTerseStruct) readField30(p thrift.Protocol) error {  // UnionField
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionField(result)
    return nil
}

func (x *FieldLevelTerseStruct) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use FieldLevelTerseStruct.Set* methods instead or set the fields directly.
type FieldLevelTerseStructBuilder struct {
    obj *FieldLevelTerseStruct
}

func NewFieldLevelTerseStructBuilder() *FieldLevelTerseStructBuilder {
    return &FieldLevelTerseStructBuilder{
        obj: NewFieldLevelTerseStruct(),
    }
}

func (x *FieldLevelTerseStructBuilder) TerseBoolField(value bool) *FieldLevelTerseStructBuilder {
    x.obj.TerseBoolField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseByteField(value byte) *FieldLevelTerseStructBuilder {
    x.obj.TerseByteField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseShortField(value int16) *FieldLevelTerseStructBuilder {
    x.obj.TerseShortField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseIntField(value int32) *FieldLevelTerseStructBuilder {
    x.obj.TerseIntField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseLongField(value int64) *FieldLevelTerseStructBuilder {
    x.obj.TerseLongField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseFloatField(value float32) *FieldLevelTerseStructBuilder {
    x.obj.TerseFloatField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseDoubleField(value float64) *FieldLevelTerseStructBuilder {
    x.obj.TerseDoubleField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseStringField(value string) *FieldLevelTerseStructBuilder {
    x.obj.TerseStringField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseBinaryField(value []byte) *FieldLevelTerseStructBuilder {
    x.obj.TerseBinaryField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseEnumField(value MyEnum) *FieldLevelTerseStructBuilder {
    x.obj.TerseEnumField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseListField(value []int16) *FieldLevelTerseStructBuilder {
    x.obj.TerseListField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseSetField(value []int16) *FieldLevelTerseStructBuilder {
    x.obj.TerseSetField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseMapField(value map[int16]int16) *FieldLevelTerseStructBuilder {
    x.obj.TerseMapField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseStructField(value *MyStruct) *FieldLevelTerseStructBuilder {
    x.obj.TerseStructField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) TerseUnionField(value *MyUnion) *FieldLevelTerseStructBuilder {
    x.obj.TerseUnionField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) BoolField(value bool) *FieldLevelTerseStructBuilder {
    x.obj.BoolField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) ByteField(value byte) *FieldLevelTerseStructBuilder {
    x.obj.ByteField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) ShortField(value int16) *FieldLevelTerseStructBuilder {
    x.obj.ShortField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) IntField(value int32) *FieldLevelTerseStructBuilder {
    x.obj.IntField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) LongField(value int64) *FieldLevelTerseStructBuilder {
    x.obj.LongField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) FloatField(value float32) *FieldLevelTerseStructBuilder {
    x.obj.FloatField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) DoubleField(value float64) *FieldLevelTerseStructBuilder {
    x.obj.DoubleField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) StringField(value string) *FieldLevelTerseStructBuilder {
    x.obj.StringField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) BinaryField(value []byte) *FieldLevelTerseStructBuilder {
    x.obj.BinaryField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) EnumField(value MyEnum) *FieldLevelTerseStructBuilder {
    x.obj.EnumField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) ListField(value []int16) *FieldLevelTerseStructBuilder {
    x.obj.ListField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) SetField(value []int16) *FieldLevelTerseStructBuilder {
    x.obj.SetField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) MapField(value map[int16]int16) *FieldLevelTerseStructBuilder {
    x.obj.MapField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) StructField(value *MyStruct) *FieldLevelTerseStructBuilder {
    x.obj.StructField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) UnionField(value *MyUnion) *FieldLevelTerseStructBuilder {
    x.obj.UnionField = value
    return x
}

func (x *FieldLevelTerseStructBuilder) Emit() *FieldLevelTerseStruct {
    var objCopy FieldLevelTerseStruct = *x.obj
    return &objCopy
}

func (x *FieldLevelTerseStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("FieldLevelTerseStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := x.writeField29(p); err != nil {
        return err
    }

    if err := x.writeField15(p); err != nil {
        return err
    }

    if err := x.writeField16(p); err != nil {
        return err
    }

    if err := x.writeField17(p); err != nil {
        return err
    }

    if err := x.writeField18(p); err != nil {
        return err
    }

    if err := x.writeField19(p); err != nil {
        return err
    }

    if err := x.writeField20(p); err != nil {
        return err
    }

    if err := x.writeField21(p); err != nil {
        return err
    }

    if err := x.writeField22(p); err != nil {
        return err
    }

    if err := x.writeField23(p); err != nil {
        return err
    }

    if err := x.writeField24(p); err != nil {
        return err
    }

    if err := x.writeField25(p); err != nil {
        return err
    }

    if err := x.writeField26(p); err != nil {
        return err
    }

    if err := x.writeField27(p); err != nil {
        return err
    }

    if err := x.writeField28(p); err != nil {
        return err
    }

    if err := x.writeField30(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // terse_bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // terse_byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // terse_short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // terse_int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // terse_long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // terse_float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // terse_double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // terse_string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // terse_binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case 10:  // terse_enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case 11:  // terse_list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case 12:  // terse_set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case 13:  // terse_map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case 14:  // terse_struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        case 29:  // terse_union_field
            if err := x.readField29(p); err != nil {
                return err
            }
        case 15:  // bool_field
            if err := x.readField15(p); err != nil {
                return err
            }
        case 16:  // byte_field
            if err := x.readField16(p); err != nil {
                return err
            }
        case 17:  // short_field
            if err := x.readField17(p); err != nil {
                return err
            }
        case 18:  // int_field
            if err := x.readField18(p); err != nil {
                return err
            }
        case 19:  // long_field
            if err := x.readField19(p); err != nil {
                return err
            }
        case 20:  // float_field
            if err := x.readField20(p); err != nil {
                return err
            }
        case 21:  // double_field
            if err := x.readField21(p); err != nil {
                return err
            }
        case 22:  // string_field
            if err := x.readField22(p); err != nil {
                return err
            }
        case 23:  // binary_field
            if err := x.readField23(p); err != nil {
                return err
            }
        case 24:  // enum_field
            if err := x.readField24(p); err != nil {
                return err
            }
        case 25:  // list_field
            if err := x.readField25(p); err != nil {
                return err
            }
        case 26:  // set_field
            if err := x.readField26(p); err != nil {
                return err
            }
        case 27:  // map_field
            if err := x.readField27(p); err != nil {
                return err
            }
        case 28:  // struct_field
            if err := x.readField28(p); err != nil {
                return err
            }
        case 30:  // union_field
            if err := x.readField30(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type TerseStructWithCustomDefault struct {
    BoolField bool `thrift:"bool_field,1" json:"bool_field" db:"bool_field"`
    ByteField byte `thrift:"byte_field,2" json:"byte_field" db:"byte_field"`
    ShortField int16 `thrift:"short_field,3" json:"short_field" db:"short_field"`
    IntField int32 `thrift:"int_field,4" json:"int_field" db:"int_field"`
    LongField int64 `thrift:"long_field,5" json:"long_field" db:"long_field"`
    FloatField float32 `thrift:"float_field,6" json:"float_field" db:"float_field"`
    DoubleField float64 `thrift:"double_field,7" json:"double_field" db:"double_field"`
    StringField string `thrift:"string_field,8" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,9" json:"binary_field" db:"binary_field"`
    EnumField MyEnum `thrift:"enum_field,10" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,11" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,12" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,13" json:"map_field" db:"map_field"`
    StructField *MyStructWithCustomDefault `thrift:"struct_field,14" json:"struct_field" db:"struct_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = &TerseStructWithCustomDefault{}


func NewTerseStructWithCustomDefault() *TerseStructWithCustomDefault {
    return (&TerseStructWithCustomDefault{}).
        SetBoolField(true).
        SetByteField(1).
        SetShortField(2).
        SetIntField(3).
        SetLongField(4).
        SetFloatField(5).
        SetDoubleField(6).
        SetStringField("7").
        SetBinaryField([]byte("8")).
        SetEnumField(
            MyEnum_ME1,
        ).
        SetListField(
            []int16{
    1,
},
        ).
        SetSetField(
            []int16{
    1,
},
        ).
        SetMapField(
            map[int16]int16{
    1: 1,
},
        )
}

// Deprecated: Use NewTerseStructWithCustomDefault().StructField instead.
var TerseStructWithCustomDefault_StructField_DEFAULT = NewTerseStructWithCustomDefault().StructField

func (x *TerseStructWithCustomDefault) GetBoolFieldNonCompat() bool {
    return x.BoolField
}

func (x *TerseStructWithCustomDefault) GetBoolField() bool {
    return x.BoolField
}

func (x *TerseStructWithCustomDefault) GetByteFieldNonCompat() byte {
    return x.ByteField
}

func (x *TerseStructWithCustomDefault) GetByteField() byte {
    return x.ByteField
}

func (x *TerseStructWithCustomDefault) GetShortFieldNonCompat() int16 {
    return x.ShortField
}

func (x *TerseStructWithCustomDefault) GetShortField() int16 {
    return x.ShortField
}

func (x *TerseStructWithCustomDefault) GetIntFieldNonCompat() int32 {
    return x.IntField
}

func (x *TerseStructWithCustomDefault) GetIntField() int32 {
    return x.IntField
}

func (x *TerseStructWithCustomDefault) GetLongFieldNonCompat() int64 {
    return x.LongField
}

func (x *TerseStructWithCustomDefault) GetLongField() int64 {
    return x.LongField
}

func (x *TerseStructWithCustomDefault) GetFloatFieldNonCompat() float32 {
    return x.FloatField
}

func (x *TerseStructWithCustomDefault) GetFloatField() float32 {
    return x.FloatField
}

func (x *TerseStructWithCustomDefault) GetDoubleFieldNonCompat() float64 {
    return x.DoubleField
}

func (x *TerseStructWithCustomDefault) GetDoubleField() float64 {
    return x.DoubleField
}

func (x *TerseStructWithCustomDefault) GetStringFieldNonCompat() string {
    return x.StringField
}

func (x *TerseStructWithCustomDefault) GetStringField() string {
    return x.StringField
}

func (x *TerseStructWithCustomDefault) GetBinaryFieldNonCompat() []byte {
    return x.BinaryField
}

func (x *TerseStructWithCustomDefault) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
      return []byte("")
    }

    return x.BinaryField
}

func (x *TerseStructWithCustomDefault) GetEnumFieldNonCompat() MyEnum {
    return x.EnumField
}

func (x *TerseStructWithCustomDefault) GetEnumField() MyEnum {
    return x.EnumField
}

func (x *TerseStructWithCustomDefault) GetListFieldNonCompat() []int16 {
    return x.ListField
}

func (x *TerseStructWithCustomDefault) GetListField() []int16 {
    if !x.IsSetListField() {
      return nil
    }

    return x.ListField
}

func (x *TerseStructWithCustomDefault) GetSetFieldNonCompat() []int16 {
    return x.SetField
}

func (x *TerseStructWithCustomDefault) GetSetField() []int16 {
    if !x.IsSetSetField() {
      return nil
    }

    return x.SetField
}

func (x *TerseStructWithCustomDefault) GetMapFieldNonCompat() map[int16]int16 {
    return x.MapField
}

func (x *TerseStructWithCustomDefault) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
      return nil
    }

    return x.MapField
}

func (x *TerseStructWithCustomDefault) GetStructFieldNonCompat() *MyStructWithCustomDefault {
    return x.StructField
}

func (x *TerseStructWithCustomDefault) GetStructField() *MyStructWithCustomDefault {
    if !x.IsSetStructField() {
      return NewMyStructWithCustomDefault()
    }

    return x.StructField
}

func (x *TerseStructWithCustomDefault) SetBoolField(value bool) *TerseStructWithCustomDefault {
    x.BoolField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetByteField(value byte) *TerseStructWithCustomDefault {
    x.ByteField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetShortField(value int16) *TerseStructWithCustomDefault {
    x.ShortField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetIntField(value int32) *TerseStructWithCustomDefault {
    x.IntField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetLongField(value int64) *TerseStructWithCustomDefault {
    x.LongField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetFloatField(value float32) *TerseStructWithCustomDefault {
    x.FloatField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetDoubleField(value float64) *TerseStructWithCustomDefault {
    x.DoubleField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetStringField(value string) *TerseStructWithCustomDefault {
    x.StringField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetBinaryField(value []byte) *TerseStructWithCustomDefault {
    x.BinaryField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetEnumField(value MyEnum) *TerseStructWithCustomDefault {
    x.EnumField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetListField(value []int16) *TerseStructWithCustomDefault {
    x.ListField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetSetField(value []int16) *TerseStructWithCustomDefault {
    x.SetField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetMapField(value map[int16]int16) *TerseStructWithCustomDefault {
    x.MapField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetStructField(value MyStructWithCustomDefault) *TerseStructWithCustomDefault {
    x.StructField = &value
    return x
}









func (x *TerseStructWithCustomDefault) IsSetBinaryField() bool {
    return x.BinaryField != nil
}


func (x *TerseStructWithCustomDefault) IsSetListField() bool {
    return x.ListField != nil
}

func (x *TerseStructWithCustomDefault) IsSetSetField() bool {
    return x.SetField != nil
}

func (x *TerseStructWithCustomDefault) IsSetMapField() bool {
    return x.MapField != nil
}

func (x *TerseStructWithCustomDefault) IsSetStructField() bool {
    return x.StructField != nil
}

func (x *TerseStructWithCustomDefault) writeField1(p thrift.Protocol) error {  // BoolField
    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBoolFieldNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField2(p thrift.Protocol) error {  // ByteField
    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetByteFieldNonCompat()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField3(p thrift.Protocol) error {  // ShortField
    if err := p.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetShortFieldNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField4(p thrift.Protocol) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIntFieldNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField5(p thrift.Protocol) error {  // LongField
    if err := p.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLongFieldNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField6(p thrift.Protocol) error {  // FloatField
    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFloatFieldNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField7(p thrift.Protocol) error {  // DoubleField
    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDoubleFieldNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField8(p thrift.Protocol) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStringFieldNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField9(p thrift.Protocol) error {  // BinaryField
    if !x.IsSetBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("binary_field", thrift.BINARY, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryFieldNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField10(p thrift.Protocol) error {  // EnumField
    if err := p.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumFieldNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField11(p thrift.Protocol) error {  // ListField
    if !x.IsSetListField() {
        return nil
    }

    if err := p.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListFieldNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField12(p thrift.Protocol) error {  // SetField
    if !x.IsSetSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSetFieldNonCompat()
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField13(p thrift.Protocol) error {  // MapField
    if !x.IsSetMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapFieldNonCompat()
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField14(p thrift.Protocol) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructFieldNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) readField1(p thrift.Protocol) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField2(p thrift.Protocol) error {  // ByteField
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetByteField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField3(p thrift.Protocol) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetShortField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField4(p thrift.Protocol) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetIntField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField5(p thrift.Protocol) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetLongField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField6(p thrift.Protocol) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField7(p thrift.Protocol) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField8(p thrift.Protocol) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField9(p thrift.Protocol) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField10(p thrift.Protocol) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField11(p thrift.Protocol) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField12(p thrift.Protocol) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetSetField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField13(p thrift.Protocol) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) readField14(p thrift.Protocol) error {  // StructField
    result := *NewMyStructWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructField(result)
    return nil
}

func (x *TerseStructWithCustomDefault) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use TerseStructWithCustomDefault.Set* methods instead or set the fields directly.
type TerseStructWithCustomDefaultBuilder struct {
    obj *TerseStructWithCustomDefault
}

func NewTerseStructWithCustomDefaultBuilder() *TerseStructWithCustomDefaultBuilder {
    return &TerseStructWithCustomDefaultBuilder{
        obj: NewTerseStructWithCustomDefault(),
    }
}

func (x *TerseStructWithCustomDefaultBuilder) BoolField(value bool) *TerseStructWithCustomDefaultBuilder {
    x.obj.BoolField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) ByteField(value byte) *TerseStructWithCustomDefaultBuilder {
    x.obj.ByteField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) ShortField(value int16) *TerseStructWithCustomDefaultBuilder {
    x.obj.ShortField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) IntField(value int32) *TerseStructWithCustomDefaultBuilder {
    x.obj.IntField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) LongField(value int64) *TerseStructWithCustomDefaultBuilder {
    x.obj.LongField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) FloatField(value float32) *TerseStructWithCustomDefaultBuilder {
    x.obj.FloatField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) DoubleField(value float64) *TerseStructWithCustomDefaultBuilder {
    x.obj.DoubleField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) StringField(value string) *TerseStructWithCustomDefaultBuilder {
    x.obj.StringField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) BinaryField(value []byte) *TerseStructWithCustomDefaultBuilder {
    x.obj.BinaryField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) EnumField(value MyEnum) *TerseStructWithCustomDefaultBuilder {
    x.obj.EnumField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) ListField(value []int16) *TerseStructWithCustomDefaultBuilder {
    x.obj.ListField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) SetField(value []int16) *TerseStructWithCustomDefaultBuilder {
    x.obj.SetField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) MapField(value map[int16]int16) *TerseStructWithCustomDefaultBuilder {
    x.obj.MapField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) StructField(value *MyStructWithCustomDefault) *TerseStructWithCustomDefaultBuilder {
    x.obj.StructField = value
    return x
}

func (x *TerseStructWithCustomDefaultBuilder) Emit() *TerseStructWithCustomDefault {
    var objCopy TerseStructWithCustomDefault = *x.obj
    return &objCopy
}

func (x *TerseStructWithCustomDefault) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("TerseStructWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case 5:  // long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case 10:  // enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case 11:  // list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case 12:  // set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case 13:  // map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case 14:  // struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type AdaptedFields struct {
    Field1 MyInteger `thrift:"field1,1" json:"field1" db:"field1"`
    Field2 int32 `thrift:"field2,2" json:"field2" db:"field2"`
    Field3 MyInteger `thrift:"field3,3" json:"field3" db:"field3"`
}
// Compile time interface enforcer
var _ thrift.Struct = &AdaptedFields{}


func NewAdaptedFields() *AdaptedFields {
    return (&AdaptedFields{})
}

func (x *AdaptedFields) GetField1NonCompat() MyInteger {
    return x.Field1
}

func (x *AdaptedFields) GetField1() MyInteger {
    return x.Field1
}

func (x *AdaptedFields) GetField2NonCompat() int32 {
    return x.Field2
}

func (x *AdaptedFields) GetField2() int32 {
    return x.Field2
}

func (x *AdaptedFields) GetField3NonCompat() MyInteger {
    return x.Field3
}

func (x *AdaptedFields) GetField3() MyInteger {
    return x.Field3
}

func (x *AdaptedFields) SetField1(value MyInteger) *AdaptedFields {
    x.Field1 = value
    return x
}

func (x *AdaptedFields) SetField2(value int32) *AdaptedFields {
    x.Field2 = value
    return x
}

func (x *AdaptedFields) SetField3(value MyInteger) *AdaptedFields {
    x.Field3 = value
    return x
}




func (x *AdaptedFields) writeField1(p thrift.Protocol) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetField1NonCompat()
    err := WriteMyInteger(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) writeField2(p thrift.Protocol) error {  // Field2
    if err := p.WriteFieldBegin("field2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetField2NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) writeField3(p thrift.Protocol) error {  // Field3
    if err := p.WriteFieldBegin("field3", thrift.I32, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetField3NonCompat()
    err := WriteMyInteger(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) readField1(p thrift.Protocol) error {  // Field1
    result, err := ReadMyInteger(p)
if err != nil {
    return err
}

    x.SetField1(result)
    return nil
}

func (x *AdaptedFields) readField2(p thrift.Protocol) error {  // Field2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetField2(result)
    return nil
}

func (x *AdaptedFields) readField3(p thrift.Protocol) error {  // Field3
    result, err := ReadMyInteger(p)
if err != nil {
    return err
}

    x.SetField3(result)
    return nil
}

func (x *AdaptedFields) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use AdaptedFields.Set* methods instead or set the fields directly.
type AdaptedFieldsBuilder struct {
    obj *AdaptedFields
}

func NewAdaptedFieldsBuilder() *AdaptedFieldsBuilder {
    return &AdaptedFieldsBuilder{
        obj: NewAdaptedFields(),
    }
}

func (x *AdaptedFieldsBuilder) Field1(value MyInteger) *AdaptedFieldsBuilder {
    x.obj.Field1 = value
    return x
}

func (x *AdaptedFieldsBuilder) Field2(value int32) *AdaptedFieldsBuilder {
    x.obj.Field2 = value
    return x
}

func (x *AdaptedFieldsBuilder) Field3(value MyInteger) *AdaptedFieldsBuilder {
    x.obj.Field3 = value
    return x
}

func (x *AdaptedFieldsBuilder) Emit() *AdaptedFields {
    var objCopy AdaptedFields = *x.obj
    return &objCopy
}

func (x *AdaptedFields) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("AdaptedFields"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // field1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // field2
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // field3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type WrappedFields struct {
    Field1 int32 `thrift:"field1,1" json:"field1" db:"field1"`
}
// Compile time interface enforcer
var _ thrift.Struct = &WrappedFields{}


func NewWrappedFields() *WrappedFields {
    return (&WrappedFields{}).
        SetField1(7)
}

func (x *WrappedFields) GetField1NonCompat() int32 {
    return x.Field1
}

func (x *WrappedFields) GetField1() int32 {
    return x.Field1
}

func (x *WrappedFields) SetField1(value int32) *WrappedFields {
    x.Field1 = value
    return x
}


func (x *WrappedFields) writeField1(p thrift.Protocol) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetField1NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *WrappedFields) readField1(p thrift.Protocol) error {  // Field1
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetField1(result)
    return nil
}

func (x *WrappedFields) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use WrappedFields.Set* methods instead or set the fields directly.
type WrappedFieldsBuilder struct {
    obj *WrappedFields
}

func NewWrappedFieldsBuilder() *WrappedFieldsBuilder {
    return &WrappedFieldsBuilder{
        obj: NewWrappedFields(),
    }
}

func (x *WrappedFieldsBuilder) Field1(value int32) *WrappedFieldsBuilder {
    x.obj.Field1 = value
    return x
}

func (x *WrappedFieldsBuilder) Emit() *WrappedFields {
    var objCopy WrappedFields = *x.obj
    return &objCopy
}

func (x *WrappedFields) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("WrappedFields"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *WrappedFields) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // field1
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}


type TerseException struct {
    Msg string `thrift:"msg,1" json:"msg" db:"msg"`
}
// Compile time interface enforcer
var _ thrift.Struct = &TerseException{}


func NewTerseException() *TerseException {
    return (&TerseException{})
}

func (x *TerseException) GetMsgNonCompat() string {
    return x.Msg
}

func (x *TerseException) GetMsg() string {
    return x.Msg
}

func (x *TerseException) SetMsg(value string) *TerseException {
    x.Msg = value
    return x
}


func (x *TerseException) writeField1(p thrift.Protocol) error {  // Msg
    if err := p.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMsgNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseException) readField1(p thrift.Protocol) error {  // Msg
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetMsg(result)
    return nil
}

func (x *TerseException) String() string {
    return fmt.Sprintf("%+v", x)
}

func (x *TerseException) Error() string {
    return x.String()
}


// Deprecated: Use TerseException.Set* methods instead or set the fields directly.
type TerseExceptionBuilder struct {
    obj *TerseException
}

func NewTerseExceptionBuilder() *TerseExceptionBuilder {
    return &TerseExceptionBuilder{
        obj: NewTerseException(),
    }
}

func (x *TerseExceptionBuilder) Msg(value string) *TerseExceptionBuilder {
    x.obj.Msg = value
    return x
}

func (x *TerseExceptionBuilder) Emit() *TerseException {
    var objCopy TerseException = *x.obj
    return &objCopy
}

func (x *TerseException) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("TerseException"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *TerseException) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // msg
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

