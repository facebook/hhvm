/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_DATETIME_H__
#define __EXTPROFILE_DATETIME_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/ext/ext_datetime.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

inline bool x_checkdate(int month, int day, int year) {
  FUNCTION_INJECTION_BUILTIN(checkdate);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_checkdate(month, day, year);
}

inline Object x_date_add(CObjRef object, CObjRef interval) {
  FUNCTION_INJECTION_BUILTIN(date_add);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_add(object, interval);
}

inline Object x_date_create_from_format(CStrRef format, CStrRef time, CObjRef timezone = null_object) {
  FUNCTION_INJECTION_BUILTIN(date_create_from_format);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_create_from_format(format, time, timezone);
}

inline Object x_date_create(CStrRef time = null_string, CObjRef timezone = null_object) {
  FUNCTION_INJECTION_BUILTIN(date_create);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_create(time, timezone);
}

inline void x_date_date_set(CObjRef object, int year, int month, int day) {
  FUNCTION_INJECTION_BUILTIN(date_date_set);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_date_date_set(object, year, month, day);
}

inline String x_date_default_timezone_get() {
  FUNCTION_INJECTION_BUILTIN(date_default_timezone_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_default_timezone_get();
}

inline bool x_date_default_timezone_set(CStrRef name) {
  FUNCTION_INJECTION_BUILTIN(date_default_timezone_set);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_default_timezone_set(name);
}

inline Object x_date_diff(CObjRef datetime1, CObjRef datetime2, bool absolute = false) {
  FUNCTION_INJECTION_BUILTIN(date_diff);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_diff(datetime1, datetime2, absolute);
}

inline String x_date_format(CObjRef object, CStrRef format) {
  FUNCTION_INJECTION_BUILTIN(date_format);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_format(object, format);
}

inline Variant x_date_get_last_errors() {
  FUNCTION_INJECTION_BUILTIN(date_get_last_errors);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_get_last_errors();
}

inline Object x_date_interval_create_from_date_string(CStrRef time) {
  FUNCTION_INJECTION_BUILTIN(date_interval_create_from_date_string);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_interval_create_from_date_string(time);
}

inline String x_date_interval_format(CObjRef object, CStrRef format) {
  FUNCTION_INJECTION_BUILTIN(date_interval_format);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_interval_format(object, format);
}

inline void x_date_isodate_set(CObjRef object, int year, int week, int day = 1) {
  FUNCTION_INJECTION_BUILTIN(date_isodate_set);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_date_isodate_set(object, year, week, day);
}

inline void x_date_modify(CObjRef object, CStrRef modify) {
  FUNCTION_INJECTION_BUILTIN(date_modify);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_date_modify(object, modify);
}

inline int x_date_offset_get(CObjRef object) {
  FUNCTION_INJECTION_BUILTIN(date_offset_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_offset_get(object);
}

inline Array x_date_parse_from_format(CStrRef format, CStrRef date) {
  FUNCTION_INJECTION_BUILTIN(date_parse_from_format);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_parse_from_format(format, date);
}

inline Variant x_date_parse(CStrRef date) {
  FUNCTION_INJECTION_BUILTIN(date_parse);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_parse(date);
}

inline Object x_date_sub(CObjRef object, CObjRef interval) {
  FUNCTION_INJECTION_BUILTIN(date_sub);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_sub(object, interval);
}

inline Array x_date_sun_info(int64 ts, double latitude, double longitude) {
  FUNCTION_INJECTION_BUILTIN(date_sun_info);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_sun_info(ts, latitude, longitude);
}

inline Variant x_date_sunrise(int64 timestamp, int format = 0, double latitude = 0.0, double longitude = 0.0, double zenith = 0.0, double gmt_offset = 99999.0) {
  FUNCTION_INJECTION_BUILTIN(date_sunrise);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_sunrise(timestamp, format, latitude, longitude, zenith, gmt_offset);
}

inline Variant x_date_sunset(int64 timestamp, int format = 0, double latitude = 0.0, double longitude = 0.0, double zenith = 0.0, double gmt_offset = 99999.0) {
  FUNCTION_INJECTION_BUILTIN(date_sunset);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_sunset(timestamp, format, latitude, longitude, zenith, gmt_offset);
}

inline void x_date_time_set(CObjRef object, int hour, int minute, int second = 0) {
  FUNCTION_INJECTION_BUILTIN(date_time_set);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_date_time_set(object, hour, minute, second);
}

inline Variant x_date_timestamp_get(CObjRef object) {
  FUNCTION_INJECTION_BUILTIN(date_timestamp_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_timestamp_get(object);
}

inline Object x_date_timestamp_set(CObjRef object, int64 unixtimestamp) {
  FUNCTION_INJECTION_BUILTIN(date_timestamp_set);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_timestamp_set(object, unixtimestamp);
}

inline Variant x_date_timezone_get(CObjRef object) {
  FUNCTION_INJECTION_BUILTIN(date_timezone_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date_timezone_get(object);
}

inline void x_date_timezone_set(CObjRef object, CObjRef timezone) {
  FUNCTION_INJECTION_BUILTIN(date_timezone_set);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_date_timezone_set(object, timezone);
}

inline Variant x_date(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(date);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_date(format, timestamp);
}

inline Array x_getdate(int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(getdate);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_getdate(timestamp);
}

inline Variant x_gettimeofday(bool return_float = false) {
  FUNCTION_INJECTION_BUILTIN(gettimeofday);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_gettimeofday(return_float);
}

inline Variant x_gmdate(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(gmdate);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_gmdate(format, timestamp);
}

inline Variant x_gmmktime(int hour = INT_MAX, int minute = INT_MAX, int second = INT_MAX, int month = INT_MAX, int day = INT_MAX, int year = INT_MAX) {
  FUNCTION_INJECTION_BUILTIN(gmmktime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_gmmktime(hour, minute, second, month, day, year);
}

inline String x_gmstrftime(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(gmstrftime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_gmstrftime(format, timestamp);
}

inline Variant x_idate(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(idate);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_idate(format, timestamp);
}

inline Array x_localtime(int64 timestamp = TimeStamp::Current(), bool is_associative = false) {
  FUNCTION_INJECTION_BUILTIN(localtime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_localtime(timestamp, is_associative);
}

inline Variant x_microtime(bool get_as_float = false) {
  FUNCTION_INJECTION_BUILTIN(microtime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_microtime(get_as_float);
}

inline Variant x_mktime(int hour = INT_MAX, int minute = INT_MAX, int second = INT_MAX, int month = INT_MAX, int day = INT_MAX, int year = INT_MAX) {
  FUNCTION_INJECTION_BUILTIN(mktime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_mktime(hour, minute, second, month, day, year);
}

inline Variant x_strftime(CStrRef format, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(strftime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_strftime(format, timestamp);
}

inline Variant x_strptime(CStrRef date, CStrRef format) {
  FUNCTION_INJECTION_BUILTIN(strptime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_strptime(date, format);
}

inline Variant x_strtotime(CStrRef input, int64 timestamp = TimeStamp::Current()) {
  FUNCTION_INJECTION_BUILTIN(strtotime);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_strtotime(input, timestamp);
}

inline int x_time() {
  FUNCTION_INJECTION_BUILTIN(time);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_time();
}

inline Array x_timezone_abbreviations_list() {
  FUNCTION_INJECTION_BUILTIN(timezone_abbreviations_list);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_abbreviations_list();
}

inline Array x_timezone_identifiers_list(int64 what = 2047, CStrRef country = null_string) {
  FUNCTION_INJECTION_BUILTIN(timezone_identifiers_list);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_identifiers_list(what, country);
}

inline Array x_timezone_location_get(CObjRef object) {
  FUNCTION_INJECTION_BUILTIN(timezone_location_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_location_get(object);
}

inline Variant x_timezone_name_from_abbr(CStrRef abbr, int gmtoffset = -1, bool isdst = true) {
  FUNCTION_INJECTION_BUILTIN(timezone_name_from_abbr);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_name_from_abbr(abbr, gmtoffset, isdst);
}

inline String x_timezone_name_get(CObjRef object) {
  FUNCTION_INJECTION_BUILTIN(timezone_name_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_name_get(object);
}

inline int x_timezone_offset_get(CObjRef object, CObjRef dt) {
  FUNCTION_INJECTION_BUILTIN(timezone_offset_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_offset_get(object, dt);
}

inline Object x_timezone_open(CStrRef timezone) {
  FUNCTION_INJECTION_BUILTIN(timezone_open);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_open(timezone);
}

inline Array x_timezone_transitions_get(CObjRef object, int64 timestamp_begin = LLONG_MIN, int64 timestamp_end = LLONG_MAX) {
  FUNCTION_INJECTION_BUILTIN(timezone_transitions_get);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_timezone_transitions_get(object, timestamp_begin, timestamp_end);
}


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_DATETIME_H__
