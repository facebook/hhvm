// Autogenerated by Thrift for thrift/compiler/test/fixtures/params/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__


type NestedContainers interface {
    MapList(ctx context.Context, foo map[int32][]int32) (error)
    MapSet(ctx context.Context, foo map[int32][]int32) (error)
    ListMap(ctx context.Context, foo []map[int32]int32) (error)
    ListSet(ctx context.Context, foo [][]int32) (error)
    Turtles(ctx context.Context, foo [][]map[int32]map[int32][]int32) (error)
}

type NestedContainersClientInterface interface {
    io.Closer
    MapList(ctx context.Context, foo map[int32][]int32) (error)
    MapSet(ctx context.Context, foo map[int32][]int32) (error)
    ListMap(ctx context.Context, foo []map[int32]int32) (error)
    ListSet(ctx context.Context, foo [][]int32) (error)
    Turtles(ctx context.Context, foo [][]map[int32]map[int32][]int32) (error)
}

type NestedContainersClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ NestedContainersClientInterface = (*NestedContainersClient)(nil)

func NewNestedContainersChannelClient(channel thrift.RequestChannel) *NestedContainersClient {
    return &NestedContainersClient{
        ch: channel,
    }
}

func (c *NestedContainersClient) Close() error {
    return c.ch.Close()
}

func (c *NestedContainersClient) MapList(ctx context.Context, foo map[int32][]int32) (error) {
    fbthriftReq := &reqNestedContainersMapList{
        Foo: foo,
    }
    fbthriftResp := newRespNestedContainersMapList()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "mapList", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *NestedContainersClient) MapSet(ctx context.Context, foo map[int32][]int32) (error) {
    fbthriftReq := &reqNestedContainersMapSet{
        Foo: foo,
    }
    fbthriftResp := newRespNestedContainersMapSet()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "mapSet", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *NestedContainersClient) ListMap(ctx context.Context, foo []map[int32]int32) (error) {
    fbthriftReq := &reqNestedContainersListMap{
        Foo: foo,
    }
    fbthriftResp := newRespNestedContainersListMap()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "listMap", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *NestedContainersClient) ListSet(ctx context.Context, foo [][]int32) (error) {
    fbthriftReq := &reqNestedContainersListSet{
        Foo: foo,
    }
    fbthriftResp := newRespNestedContainersListSet()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "listSet", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *NestedContainersClient) Turtles(ctx context.Context, foo [][]map[int32]map[int32][]int32) (error) {
    fbthriftReq := &reqNestedContainersTurtles{
        Foo: foo,
    }
    fbthriftResp := newRespNestedContainersTurtles()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "turtles", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type NestedContainersProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              NestedContainers
}

func NewNestedContainersProcessor(handler NestedContainers) *NestedContainersProcessor {
    p := &NestedContainersProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("mapList", &procFuncNestedContainersMapList{handler: handler})
    p.AddToProcessorFunctionMap("mapSet", &procFuncNestedContainersMapSet{handler: handler})
    p.AddToProcessorFunctionMap("listMap", &procFuncNestedContainersListMap{handler: handler})
    p.AddToProcessorFunctionMap("listSet", &procFuncNestedContainersListSet{handler: handler})
    p.AddToProcessorFunctionMap("turtles", &procFuncNestedContainersTurtles{handler: handler})
    p.AddToFunctionServiceMap("mapList", "NestedContainers")
    p.AddToFunctionServiceMap("mapSet", "NestedContainers")
    p.AddToFunctionServiceMap("listMap", "NestedContainers")
    p.AddToFunctionServiceMap("listSet", "NestedContainers")
    p.AddToFunctionServiceMap("turtles", "NestedContainers")

    return p
}

func (p *NestedContainersProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *NestedContainersProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *NestedContainersProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *NestedContainersProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *NestedContainersProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *NestedContainersProcessor) PackageName() string {
    return "module"
}

func (p *NestedContainersProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.NestedContainers")
}


type procFuncNestedContainersMapList struct {
    handler NestedContainers
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncNestedContainersMapList)(nil)

func (p *procFuncNestedContainersMapList) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqNestedContainersMapList()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncNestedContainersMapList) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("mapList", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncNestedContainersMapList) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqNestedContainersMapList)
    result := newRespNestedContainersMapList()
    err := p.handler.MapList(ctx, args.Foo)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing MapList: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncNestedContainersMapSet struct {
    handler NestedContainers
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncNestedContainersMapSet)(nil)

func (p *procFuncNestedContainersMapSet) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqNestedContainersMapSet()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncNestedContainersMapSet) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("mapSet", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncNestedContainersMapSet) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqNestedContainersMapSet)
    result := newRespNestedContainersMapSet()
    err := p.handler.MapSet(ctx, args.Foo)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing MapSet: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncNestedContainersListMap struct {
    handler NestedContainers
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncNestedContainersListMap)(nil)

func (p *procFuncNestedContainersListMap) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqNestedContainersListMap()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncNestedContainersListMap) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("listMap", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncNestedContainersListMap) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqNestedContainersListMap)
    result := newRespNestedContainersListMap()
    err := p.handler.ListMap(ctx, args.Foo)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing ListMap: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncNestedContainersListSet struct {
    handler NestedContainers
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncNestedContainersListSet)(nil)

func (p *procFuncNestedContainersListSet) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqNestedContainersListSet()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncNestedContainersListSet) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("listSet", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncNestedContainersListSet) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqNestedContainersListSet)
    result := newRespNestedContainersListSet()
    err := p.handler.ListSet(ctx, args.Foo)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing ListSet: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncNestedContainersTurtles struct {
    handler NestedContainers
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncNestedContainersTurtles)(nil)

func (p *procFuncNestedContainersTurtles) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqNestedContainersTurtles()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncNestedContainersTurtles) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("turtles", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncNestedContainersTurtles) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqNestedContainersTurtles)
    result := newRespNestedContainersTurtles()
    err := p.handler.Turtles(ctx, args.Foo)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Turtles: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


