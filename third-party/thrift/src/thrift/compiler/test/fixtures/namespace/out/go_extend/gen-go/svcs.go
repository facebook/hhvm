// Autogenerated by Thrift for thrift/compiler/test/fixtures/namespace/src/extend.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package test

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"
    "sync"

    test0 "my/namespacing/test"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = test0.GoUnusedProtection__
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = sync.OnceFunc
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__


type ExtendTestService interface {
    // Inherited/extended service
    test0.HsTestService

    Check(ctx context.Context, struct1 *test0.HsFoo) (bool, error)
}

type ExtendTestServiceClient interface {
    io.Closer
    // Inherited/extended service
    test0.HsTestServiceClient

    Check(ctx context.Context, struct1 *test0.HsFoo) (bool, error)
}

type extendTestServiceClientImpl struct {
    // Inherited/extended service
    test0.HsTestServiceClient
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ ExtendTestServiceClient = (*extendTestServiceClientImpl)(nil)

func NewExtendTestServiceChannelClient(channel thrift.RequestChannel) ExtendTestServiceClient {
    return &extendTestServiceClientImpl{
        HsTestServiceClient: test0.NewHsTestServiceChannelClient(channel),
        ch: channel,
    }
}

func (c *extendTestServiceClientImpl) Close() error {
    return c.ch.Close()
}

func (c *extendTestServiceClientImpl) Check(ctx context.Context, struct1 *test0.HsFoo) (bool, error) {
    fbthriftReq := &reqExtendTestServiceCheck{
        Struct1: struct1,
    }
    fbthriftResp := newRespExtendTestServiceCheck()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "check", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return false, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return false, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}


type ExtendTestServiceProcessor struct {
    // Inherited/extended processor
    *test0.HsTestServiceProcessor
}

func NewExtendTestServiceProcessor(handler ExtendTestService) *ExtendTestServiceProcessor {
    p := &ExtendTestServiceProcessor{
        test0.NewHsTestServiceProcessor(handler),
    }
    p.AddToProcessorFunctionMap("check", &procFuncExtendTestServiceCheck{handler: handler})
    p.AddToFunctionServiceMap("check", "ExtendTestService")

    return p
}

func (p *ExtendTestServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("extend.ExtendTestService")
}


type procFuncExtendTestServiceCheck struct {
    handler ExtendTestService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncExtendTestServiceCheck)(nil)

func (p *procFuncExtendTestServiceCheck) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqExtendTestServiceCheck()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncExtendTestServiceCheck) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) error {
    messageType := thrift.REPLY
    switch result.(type) {
    case *thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err := encoder.WriteMessageBegin("check", messageType, seqId); err != nil {
        return err
    }
    if err := result.Write(encoder); err != nil {
        return err
    }
    if err := encoder.WriteMessageEnd(); err != nil {
        return err
    }
    return encoder.Flush()
}

func (p *procFuncExtendTestServiceCheck) RunContext(ctx context.Context, reqStruct thrift.ReadableStruct) (thrift.WritableStruct, error) {
    args := reqStruct.(*reqExtendTestServiceCheck)
    result := newRespExtendTestServiceCheck()
    retval, err := p.handler.Check(ctx, args.Struct1)
    if err != nil {
        internalErr := fmt.Errorf("Internal error processing Check: %w", err)
        x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, internalErr.Error())
        return x, internalErr
    }

    result.Success = &retval
    return result, nil
}


