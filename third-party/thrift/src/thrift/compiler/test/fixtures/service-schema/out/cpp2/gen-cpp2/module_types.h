/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/service-schema/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/extend_types.h"
#include "thrift/compiler/test/fixtures/service-schema/gen-cpp2/include_types.h"

namespace apache::thrift {
namespace ident {
struct name;
struct result;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace facebook::thrift::test {

/** Glean {"file": "thrift/compiler/test/fixtures/service-schema/src/module.thrift", "name": "Result", "kind": "enum" } */
enum class Result {
  OK = 0,
  SO_SO = 1,
  GOOD = 2,
};

} // namespace facebook::thrift::test

template<> struct std::hash<::facebook::thrift::test::Result> :
  ::apache::thrift::detail::enum_hash<::facebook::thrift::test::Result> {};

namespace apache::thrift {

template <> struct TEnumTraits<::facebook::thrift::test::Result> {
  using type = ::facebook::thrift::test::Result;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "Result";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "facebook.com/thrift/test/Result";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::OK; }
  static constexpr type max() { return type::GOOD; }

  static const std::vector<std::any>& annotations() noexcept;
  static const std::vector<std::any>& enumValueAnnotations(::facebook::thrift::test::Result) noexcept;
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::test {
class CustomException;
} // namespace facebook::thrift::test
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::test {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/service-schema/src/module.thrift", "name": "CustomException", "kind": "exception" } */
class FOLLY_EXPORT CustomException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::result
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::facebook::thrift::test::Result>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = CustomException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  CustomException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CustomException(apache::thrift::FragileConstructor, ::std::string name__arg, ::facebook::thrift::test::Result result__arg);

  CustomException(CustomException&&) noexcept;

  CustomException(const CustomException& src);


  CustomException& operator=(CustomException&&) noexcept;
  CustomException& operator=(const CustomException& src);

  ~CustomException() override;

 private:
  ::std::string __fbthrift_field_name;
 private:
  ::facebook::thrift::test::Result __fbthrift_field_result;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const CustomException&) const;
  bool operator<(const CustomException&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "result" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> result_ref() const& {
    return {this->__fbthrift_field_result, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "result" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> result_ref() & {
    return {this->__fbthrift_field_result, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "result" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> result_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_result), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "result" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> result() const& {
    return {this->__fbthrift_field_result, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "result" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> result() & {
    return {this->__fbthrift_field_result, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "result" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::test::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> result() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_result), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_CustomException_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_CustomException_name_struct_setter&& name_) {
    name_ref() = std::forward<T_CustomException_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "result" } */
  [[deprecated("Use `FOO.result().value()` instead of `FOO.get_result()`")]]
  ::facebook::thrift::test::Result get_result() const;

  /** Glean { "field": "result" } */
  [[deprecated("Use `FOO.result() = BAR` instead of `FOO.set_result(BAR)`")]]
  ::facebook::thrift::test::Result& set_result(::facebook::thrift::test::Result result_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::facebook::thrift::test::CustomException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CustomException>;
  friend void swap(CustomException& a, CustomException& b);
};

template <class Protocol_>
unsigned long CustomException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::thrift::test

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::test::CustomException, false> {
  static ::folly::Range<const ::std::string_view*> bundle();
  static constexpr int64_t programId = -4897237288056697529;
  static constexpr ::std::string_view definitionKey = {"\x34\x87\x8d\x8a\xb8\xbf\xb0\x8e\x22\xcc\xa5\xdc\x7e\xd7\x27\x7c", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::test::Result, true> {
  static ::folly::Range<const ::std::string_view*> bundle();
  static constexpr int64_t programId = -4897237288056697529;
  static constexpr ::std::string_view definitionKey = {"\x90\x81\x31\x92\x8f\x71\xb3\x1a\x8d\xcb\x1a\x91\x4e\xb0\x83\xa8", 16};
};
} // namespace apache::thrift::detail
