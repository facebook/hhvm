/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/nimble/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/nimble/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/nimble/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/nimble/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";



namespace cpp2 {

std::string_view BasicTypes::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BasicTypes>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view BasicTypes::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BasicTypes>::name;
}


BasicTypes::BasicTypes(apache::thrift::FragileConstructor, ::std::int32_t first__arg, ::std::int32_t second__arg, ::std::int64_t third__arg, bool isTrue__arg) :
    __fbthrift_field_first(std::move(first__arg)),
    __fbthrift_field_second(std::move(second__arg)),
    __fbthrift_field_third(std::move(third__arg)),
    __fbthrift_field_isTrue(std::move(isTrue__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}

void BasicTypes::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_first = ::std::int32_t();
  this->__fbthrift_field_second = ::std::int32_t();
  this->__fbthrift_field_third = ::std::int64_t();
  this->__fbthrift_field_isTrue = bool();
  __isset = {};
}

void BasicTypes::__fbthrift_clear_terse_fields() {
}

bool BasicTypes::__fbthrift_is_empty() const {
  return false;
}

bool BasicTypes::operator==([[maybe_unused]] const BasicTypes& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool BasicTypes::operator<([[maybe_unused]] const BasicTypes& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t BasicTypes::get_first() const {
  return __fbthrift_field_first;
}

::std::int32_t& BasicTypes::set_first(::std::int32_t first_) {
  first_ref() = first_;
  return __fbthrift_field_first;
}

const ::std::int32_t* BasicTypes::get_second() const& {
  return second_ref().has_value() ? std::addressof(__fbthrift_field_second) : nullptr;
}

::std::int32_t* BasicTypes::get_second() & {
  return second_ref().has_value() ? std::addressof(__fbthrift_field_second) : nullptr;
}

::std::int32_t& BasicTypes::set_second(::std::int32_t second_) {
  second_ref() = second_;
  return __fbthrift_field_second;
}

const ::std::int64_t* BasicTypes::get_third() const& {
  return third_ref().has_value() ? std::addressof(__fbthrift_field_third) : nullptr;
}

::std::int64_t* BasicTypes::get_third() & {
  return third_ref().has_value() ? std::addressof(__fbthrift_field_third) : nullptr;
}

::std::int64_t& BasicTypes::set_third(::std::int64_t third_) {
  third_ref() = third_;
  return __fbthrift_field_third;
}

bool BasicTypes::get_isTrue() const {
  return __fbthrift_field_isTrue;
}

bool& BasicTypes::set_isTrue(bool isTrue_) {
  isTrue_ref() = isTrue_;
  return __fbthrift_field_isTrue;
}

void swap([[maybe_unused]] BasicTypes& a, [[maybe_unused]] BasicTypes& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_first, b.__fbthrift_field_first);
  swap(a.__fbthrift_field_second, b.__fbthrift_field_second);
  swap(a.__fbthrift_field_third, b.__fbthrift_field_third);
  swap(a.__fbthrift_field_isTrue, b.__fbthrift_field_isTrue);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
