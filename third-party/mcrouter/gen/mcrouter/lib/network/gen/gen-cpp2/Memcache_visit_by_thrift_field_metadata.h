/**
 * Autogenerated by Thrift for Memcache.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "mcrouter/lib/network/gen/gen-cpp2/Memcache_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGetRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).flags_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGetRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGetReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).value_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).message_ref());
    case 5:
      return f(4, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGetReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McSetRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McSetRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McSetReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).flags_ref());
    case 3:
      return f(2, static_cast<T&&>(t).value_ref());
    case 4:
      return f(3, static_cast<T&&>(t).message_ref());
    case 5:
      return f(4, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McSetReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McDeleteRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).flags_ref());
    case 3:
      return f(2, static_cast<T&&>(t).exptime_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    case 5:
      return f(4, static_cast<T&&>(t).attributes_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McDeleteRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McDeleteReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).flags_ref());
    case 3:
      return f(2, static_cast<T&&>(t).value_ref());
    case 4:
      return f(3, static_cast<T&&>(t).message_ref());
    case 5:
      return f(4, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McDeleteReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McLeaseGetRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).flags_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McLeaseGetRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McLeaseGetReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).leaseToken_ref());
    case 3:
      return f(2, static_cast<T&&>(t).value_ref());
    case 4:
      return f(3, static_cast<T&&>(t).flags_ref());
    case 5:
      return f(4, static_cast<T&&>(t).message_ref());
    case 6:
      return f(5, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McLeaseGetReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McLeaseSetRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    case 5:
      return f(4, static_cast<T&&>(t).leaseToken_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McLeaseSetRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McLeaseSetReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McLeaseSetReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McAddRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McAddRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McAddReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McAddReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McReplaceRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McReplaceRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McReplaceReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McReplaceReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGetsRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).flags_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGetsRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGetsReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).casToken_ref());
    case 3:
      return f(2, static_cast<T&&>(t).value_ref());
    case 4:
      return f(3, static_cast<T&&>(t).flags_ref());
    case 5:
      return f(4, static_cast<T&&>(t).message_ref());
    case 6:
      return f(5, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGetsReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McCasRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    case 5:
      return f(4, static_cast<T&&>(t).casToken_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McCasRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McCasReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McCasReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McIncrRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).delta_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McIncrRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McIncrReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).delta_ref());
    case 3:
      return f(2, static_cast<T&&>(t).message_ref());
    case 4:
      return f(3, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McIncrReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McDecrRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).delta_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McDecrRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McDecrReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).delta_ref());
    case 3:
      return f(2, static_cast<T&&>(t).message_ref());
    case 4:
      return f(3, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McDecrReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McMetagetRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McMetagetRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McMetagetReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).age_ref());
    case 3:
      return f(2, static_cast<T&&>(t).exptime_ref());
    case 4:
      return f(3, static_cast<T&&>(t).ipv_ref());
    case 5:
      return f(4, static_cast<T&&>(t).ipAddress_ref());
    case 6:
      return f(5, static_cast<T&&>(t).message_ref());
    case 7:
      return f(6, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McMetagetReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McAppendRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McAppendRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McAppendReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McAppendReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McPrependRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).value_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McPrependRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McPrependReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McPrependReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McTouchRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).exptime_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McTouchRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McTouchReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McTouchReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McFlushReRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McFlushReRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McFlushReReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McFlushReReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McFlushAllRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    case 2:
      return f(1, static_cast<T&&>(t).delay_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McFlushAllRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McFlushAllReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McFlushAllReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGatRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).exptime_ref());
    case 2:
      return f(1, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGatRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGatReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).value_ref());
    case 3:
      return f(2, static_cast<T&&>(t).flags_ref());
    case 4:
      return f(3, static_cast<T&&>(t).message_ref());
    case 5:
      return f(4, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGatReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGatsRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).exptime_ref());
    case 2:
      return f(1, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGatsRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McGatsReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).casToken_ref());
    case 3:
      return f(2, static_cast<T&&>(t).value_ref());
    case 4:
      return f(3, static_cast<T&&>(t).flags_ref());
    case 5:
      return f(4, static_cast<T&&>(t).message_ref());
    case 6:
      return f(5, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McGatsReply");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
