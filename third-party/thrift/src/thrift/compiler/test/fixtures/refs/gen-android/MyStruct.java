/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStruct");
  private static final TField OPT_REF_FIELD_DESC = new TField("opt_ref", TType.STRUCT, (short)1);
  private static final TField REF_FIELD_DESC = new TField("ref", TType.STRUCT, (short)2);
  private static final TField REQ_REF_FIELD_DESC = new TField("req_ref", TType.STRUCT, (short)3);

  public final MyField opt_ref;
  public final MyField ref;
  public final MyField req_ref;
  public static final int OPT_REF = 1;
  public static final int REF = 2;
  public static final int REQ_REF = 3;

  public MyStruct(
      MyField opt_ref,
      MyField ref,
      MyField req_ref) {
    this.opt_ref = opt_ref;
    this.ref = ref;
    this.req_ref = req_ref;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStruct(MyStruct other) {
    if (other.isSetOpt_ref()) {
      this.opt_ref = TBaseHelper.deepCopy(other.opt_ref);
    } else {
      this.opt_ref = null;
    }
    if (other.isSetRef()) {
      this.ref = TBaseHelper.deepCopy(other.ref);
    } else {
      this.ref = null;
    }
    if (other.isSetReq_ref()) {
      this.req_ref = TBaseHelper.deepCopy(other.req_ref);
    } else {
      this.req_ref = null;
    }
  }

  public MyStruct deepCopy() {
    return new MyStruct(this);
  }

  public MyField getOpt_ref() {
    return this.opt_ref;
  }

  // Returns true if field opt_ref is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_ref() {
    return this.opt_ref != null;
  }

  public MyField getRef() {
    return this.ref;
  }

  // Returns true if field ref is set (has been assigned a value) and false otherwise
  public boolean isSetRef() {
    return this.ref != null;
  }

  public MyField getReq_ref() {
    return this.req_ref;
  }

  // Returns true if field req_ref is set (has been assigned a value) and false otherwise
  public boolean isSetReq_ref() {
    return this.req_ref != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStruct))
      return false;
    MyStruct that = (MyStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_ref(), that.isSetOpt_ref(), this.opt_ref, that.opt_ref)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetRef(), that.isSetRef(), this.ref, that.ref)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetReq_ref(), that.isSetReq_ref(), this.req_ref, that.req_ref)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {opt_ref, ref, req_ref});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStruct deserialize(TProtocol iprot) throws TException {
    MyField tmp_opt_ref = null;
    MyField tmp_ref = null;
    MyField tmp_req_ref = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case OPT_REF:
          if (__field.type == TType.STRUCT) {
            tmp_opt_ref = MyField.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case REF:
          if (__field.type == TType.STRUCT) {
            tmp_ref = MyField.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case REQ_REF:
          if (__field.type == TType.STRUCT) {
            tmp_req_ref = MyField.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStruct _that;
    _that = new MyStruct(
      tmp_opt_ref
      ,tmp_ref
      ,tmp_req_ref
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.opt_ref != null) {
      if (isSetOpt_ref()) {
        oprot.writeFieldBegin(OPT_REF_FIELD_DESC);
        this.opt_ref.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.ref != null) {
      oprot.writeFieldBegin(REF_FIELD_DESC);
      this.ref.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.req_ref != null) {
      oprot.writeFieldBegin(REQ_REF_FIELD_DESC);
      this.req_ref.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
    if (req_ref == null) {
      throw new TProtocolException(TProtocolException.MISSING_REQUIRED_FIELD, "Required field 'req_ref' was not present! Struct: " + toString());
    }
  }

}

