/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RecursiveFieldPatch implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RecursiveFieldPatch");
  private static final TField NODES_FIELD_DESC = new TField("nodes", TType.STRUCT, (short)-1);

  public RecursiveField1Patch nodes;
  public static final int NODES = -1;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(NODES, new FieldMetaData("nodes", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, RecursiveField1Patch.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(RecursiveFieldPatch.class, metaDataMap);
  }

  public RecursiveFieldPatch() {
  }

  public RecursiveFieldPatch(
      RecursiveField1Patch nodes) {
    this();
    this.nodes = nodes;
  }

  public static class Builder {
    private RecursiveField1Patch nodes;

    public Builder() {
    }

    public Builder setNodes(final RecursiveField1Patch nodes) {
      this.nodes = nodes;
      return this;
    }

    public RecursiveFieldPatch build() {
      RecursiveFieldPatch result = new RecursiveFieldPatch();
      result.setNodes(this.nodes);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecursiveFieldPatch(RecursiveFieldPatch other) {
    if (other.isSetNodes()) {
      this.nodes = TBaseHelper.deepCopy(other.nodes);
    }
  }

  public RecursiveFieldPatch deepCopy() {
    return new RecursiveFieldPatch(this);
  }

  public RecursiveField1Patch getNodes() {
    return this.nodes;
  }

  public RecursiveFieldPatch setNodes(RecursiveField1Patch nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  // Returns true if field nodes is set (has been assigned a value) and false otherwise
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean __value) {
    if (!__value) {
      this.nodes = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case NODES:
      if (__value == null) {
        unsetNodes();
      } else {
        setNodes((RecursiveField1Patch)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case NODES:
      return getNodes();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof RecursiveFieldPatch))
      return false;
    RecursiveFieldPatch that = (RecursiveFieldPatch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetNodes(), that.isSetNodes(), this.nodes, that.nodes)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {nodes});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case NODES:
          if (__field.type == TType.STRUCT) {
            this.nodes = new RecursiveField1Patch();
            this.nodes.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.nodes != null) {
      oprot.writeFieldBegin(NODES_FIELD_DESC);
      this.nodes.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("RecursiveFieldPatch");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("nodes");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getNodes() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getNodes(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

