// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"Memcached", "", NULL, "__construct", T(Void), S(0), "persistent_id", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.--construct.php )\n *\n *\n * @persistent_id\n *             string\n */", S(16384),"add", T(Boolean), S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.add.php )\n *\n * Memcached::add() is similar to Memcached::set(), but the operation fails\n * if the key already exists on the server.\n *\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key already exists.\n */", S(16384),"addByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.addbykey.php )\n *\n * Memcached::addByKey() is functionally equivalent to Memcached::add(),\n * except that the free-form server_key can be used to map the key to a\n * specific server. This is useful if you need to keep a bunch of related\n * keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key already exists.\n */", S(16384),"addServer", T(Boolean), S(0), "host", T(String), NULL, NULL, S(0), "port", T(Int32), NULL, NULL, S(0), "weight", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.addserver.php )\n *\n * Memcached::addServer() adds the specified server to the server pool. No\n * connection is established to the server at this time, but if you are\n * using consistent key distribution option (via\n * Memcached::DISTRIBUTION_CONSISTENT or\n * Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data\n * structures will have to be updated. Thus, if you need to add multiple\n * servers, it is better to use Memcached::addServers() as the update then\n * happens only once.\n *\n * The same server may appear multiple times in the server pool, because no\n * duplication checks are made. This is not advisable; instead, use the\n * weight option to increase the selection weighting of this server.\n *\n * @host       string  The hostname of the memcache server. If the hostname\n *                     is invalid, data-related operations will set\n *                     Memcached::RES_HOST_LOOKUP_FAILURE result code.\n * @port       int     The port on which memcache is running. Usually, this\n *                     is 11211.\n * @weight     int     The weight of the server relative to the total\n *                     weight of all the servers in the pool. This controls\n *                     the probability of the server being selected for\n *                     operations. This is used only with consistent\n *                     distribution option and usually corresponds to the\n *                     amount of memory available to memcache on that\n *                     server.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"addServers", T(Boolean), S(0), "servers", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.addservers.php )\n *\n * Memcached::addServers() adds servers to the server pool. Each entry in\n * servers is supposed to be an array containing hostname, port, and,\n * optionally, weight of the server. No connection is established to the\n * servers at this time.\n *\n * The same server may appear multiple times in the server pool, because no\n * duplication checks are made. This is not advisable; instead, use the\n * weight option to increase the selection weighting of this server.\n *\n * @servers    vector  Array of the servers to add to the pool.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"append", T(Boolean), S(0), "key", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.append.php )\n *\n * Memcached::append() appends the given value string to the value of an\n * existing item. The reason that value is forced to be a string is that\n * appending mixed types is not well-defined.\n *\n * If the Memcached::OPT_COMPRESSION is enabled, the operation will fail\n * and a warning will be issued, because appending compressed data to a\n * value that is potentially already compressed is not possible.\n *\n * @key        string  The key under which to store the value.\n * @value      string  The string to append.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */", S(16384),"appendByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.appendbykey.php )\n *\n * Memcached::appendByKey() is functionally equivalent to\n * Memcached::append(), except that the free-form server_key can be used to\n * map the key to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      string  The string to append.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */", S(16384),"cas", T(Boolean), S(0), "cas_token", T(Double), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.cas.php )\n *\n * Memcached::cas() performs a \"check and set\" operation, so that the item\n * will be stored only if no other client has updated it since it was last\n * fetched by this client. The check is done via the cas_token parameter\n * which is a unique 64-bit value assigned to the existing item by\n * memcache. See the documentation for Memcached::get*() methods for how to\n * obtain this token. Note that the token is represented as a double due to\n * the limitations of PHP's integer space.\n *\n * @cas_token  float   Unique value associated with the existing item.\n *                     Generated by memcache.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_DATA_EXISTS if the item you are\n *                     trying to store has been modified since you last\n *                     fetched it.\n */", S(16384),"casByKey", T(Boolean), S(0), "cas_token", T(Double), NULL, NULL, S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.casbykey.php )\n *\n * Memcached::casByKey() is functionally equivalent to Memcached::cas(),\n * except that the free-form server_key can be used to map the key to a\n * specific server. This is useful if you need to keep a bunch of related\n * keys on a certain server.\n *\n * @cas_token  float   Unique value associated with the existing item.\n *                     Generated by memcache.\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_DATA_EXISTS if the item you are\n *                     trying to store has been modified since you last\n *                     fetched it.\n */", S(16384),"decrement", T(Variant), S(0), "key", T(String), NULL, NULL, S(0), "offset", T(Int64), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.decrement.php )\n *\n * Memcached::decrement() decrements a numeric item's value by the\n * specified offset. If the item's value is not numeric, it is treated as\n * if the value were 0. If the operation would decrease the value below 0,\n * the new value will be 0. Memcached::decrement() will fail if the item\n * does not exist.\n *\n * @key        string  The key of the item to decrement.\n * @offset     int     The amount by which to decrement the item's value.\n *\n * @return     mixed   Returns item's new value on success or FALSE on\n *                     failure. The Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */", S(16384),"delete", T(Boolean), S(0), "key", T(String), NULL, NULL, S(0), "time", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.delete.php )\n *\n * Memcached::delete() deletes the key from the server. The time parameter\n * is the amount of time in seconds (or Unix time until which) the client\n * wishes the server to refuse add and replace commands for this key. For\n * this amount of time, the item is put into a delete queue, which means\n * that it won't possible to retrieve it by the get command, but add and\n * replace command with this key will also fail (the set command will\n * succeed, however). After the time passes, the item is finally deleted\n * from server memory. The parameter time defaults to 0 (which means that\n * the item will be deleted immediately and further storage commands with\n * this key will succeed).\n *\n * @key        string  The key to be deleted.\n * @time       int     The amount of time the server will wait to delete\n *                     the item.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */", S(16384),"deleteByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "time", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.deletebykey.php )\n *\n * Memcached::deleteByKey() is functionally equivalent to\n * Memcached::delete(), except that the free-form server_key can be used to\n * map the key to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key to be deleted.\n * @time       int     The amount of time the server will wait to delete\n *                     the item.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */", S(16384),"fetch", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.fetch.php )\n *\n * Memcached::fetch() retrieves the next result from the last request.\n *\n * @return     mixed   Returns the next result or FALSE otherwise. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_END if result set is exhausted.\n */", S(16384),"fetchAll", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.fetchall.php )\n *\n * Memcached::fetchAll() retrieves all the remaining results from the last\n * request.\n *\n * @return     mixed   Returns the results or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"flush", T(Boolean), S(0), "delay", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.flush.php )\n *\n * Memcached::flush() invalidates all existing cache items immediately (by\n * default) or after the delay specified. After invalidation none of the\n * items will be returned in response to a retrieval command (unless it's\n * stored again under the same key after Memcached::flush() has invalidated\n * the items). The flush does not actually free all the memory taken up by\n * the existing items; that will happen gradually as new items are stored.\n *\n * @delay      int     Numer of seconds to wait before invalidating the\n *                     items.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"get", T(Variant), S(0), "key", T(String), NULL, NULL, S(0), "cache_cb", T(Variant), "N;", "null", S(0), "cas_token", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.get.php )\n *\n * Memcached::get() returns the item that was previously stored under the\n * key. If the item is found and cas_token variable is provided, it will\n * contain the CAS token value for the item. See Memcached::cas() for how\n * to use CAS tokens. Read-through caching callback may be specified via\n * cache_cb parameter.\n *\n * @key        string  The key of the item to retrieve.\n * @cache_cb   mixed   Read-through caching callback or NULL.\n * @cas_token  mixed   The variable to store the CAS token in.\n *\n * @return     mixed   Returns the value stored in the cache or FALSE\n *                     otherwise. The Memcached::getResultCode() will\n *                     return Memcached::RES_NOTFOUND if the key does not\n *                     exist.\n */", S(16384),"getByKey", T(Variant), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "cache_cb", T(Variant), "N;", "null", S(0), "cas_token", T(Variant), "N;", "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getbykey.php )\n *\n * Memcached::getByKey() is functionally equivalent to Memcached::get(),\n * except that the free-form server_key can be used to map the key to a\n * specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key of the item to fetch.\n * @cache_cb   mixed   Read-through caching callback or NULL\n * @cas_token  mixed   The variable to store the CAS token in.\n *\n * @return     mixed   Returns the value stored in the cache or FALSE\n *                     otherwise. The Memcached::getResultCode() will\n *                     return Memcached::RES_NOTFOUND if the key does not\n *                     exist.\n */", S(16384),"getDelayed", T(Boolean), S(0), "keys", T(Array), NULL, NULL, S(0), "with_cas", T(Boolean), "b:0;", "false", S(0), "value_cb", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getdelayed.php )\n *\n * Memcached::getDelayed() issues a request to memcache for multiple items\n * the keys of which are specified in the keys array. The method does not\n * wait for response and returns right away. When you are ready to collect\n * the items, call either Memcached::fetch() or Memcached::fetchAll(). If\n * with_cas is true, the CAS token values will also be requested.\n *\n * Instead of fetching the results explicitly, you can specify a result\n * callback via value_cb parameter.\n *\n * @keys       vector  Array of keys to request.\n * @with_cas   bool    Whether to request CAS token values also.\n * @value_cb   mixed   The result callback or NULL.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"getDelayedByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "keys", T(Array), NULL, NULL, S(0), "with_cas", T(Boolean), "b:0;", "false", S(0), "value_cb", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getdelayedbykey.php )\n *\n * Memcached::getDelayedByKey() is functionally equivalent to\n * Memcached::getDelayed(), except that the free-form server_key can be\n * used to map the keys to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @keys       vector  Array of keys to request.\n * @with_cas   bool    Whether to request CAS token values also.\n * @value_cb   mixed   The result callback or NULL.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"getMulti", T(Variant), S(0), "keys", T(Array), NULL, NULL, S(0), "cas_tokens", T(Variant), "N;", "null", S(1), "flags", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getmulti.php )\n *\n * Memcached::getMulti() is similar to Memcached::get(), but instead of a\n * single key item, it retrieves multiple items the keys of which are\n * specified in the keys array. If cas_tokens variable is provided, it is\n * filled with the CAS token values for the found items.\n *\n * Unlike Memcached::get() it is not possible to specify a read-through\n * cache callback for Memcached::getMulti(), because the memcache protocol\n * does not provide information on which keys were not found in the\n * multi-key request.\n *\n * The flags parameter can be used to specify additional options for\n * Memcached::getMulti(). Currently, the only available option is\n * Memcached::GET_PRESERVE_ORDER that ensures that the keys are returned in\n * the same order as they were requested in.\n *\n * @keys       vector  Array of keys to retrieve.\n * @cas_tokens mixed   The variable to store the CAS tokens for the found\n *                     items.\n * @flags      int     The flags for the get operation.\n *\n * @return     mixed   Returns the array of found items or FALSE on\n *                     failure. Use Memcached::getResultCode() if\n *                     necessary.\n */", S(16384),"getMultiByKey", T(Variant), S(0), "server_key", T(String), NULL, NULL, S(0), "keys", T(Array), NULL, NULL, S(0), "cas_tokens", T(Variant), "N;", "null", S(1), "flags", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getmultibykey.php )\n *\n * Memcached::getMultiByKey() is functionally equivalent to\n * Memcached::getMulti(), except that the free-form server_key can be used\n * to map the keys to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @keys       vector  Array of keys to retrieve.\n * @cas_tokens mixed   The variable to store the CAS tokens for the found\n *                     items.\n * @flags      int     The flags for the get operation.\n *\n * @return     mixed   Returns the array of found items or FALSE on\n *                     failure. Use Memcached::getResultCode() if\n *                     necessary.\n */", S(16384),"getOption", T(Variant), S(0), "option", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getoption.php )\n *\n * This method returns the value of a Memcached option. Some options\n * correspond to the ones defined by libmemcached, and some are specific to\n * the extension. See Memcached Constants for more information.\n *\n * @option     int     One of the Memcached::OPT_* constants.\n *\n * @return     mixed   Returns the value of the requested option, or FALSE\n *                     on error.\n */", S(16384),"getResultCode", T(Int32), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getresultcode.php )\n *\n * Memcached::getResultCode() returns one of the Memcached::RES_* constants\n * that is the result of the last executed Memcached method.\n *\n * @return     int     Result code of the last Memcached operation.\n */", S(16384),"getResultMessage", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getresultmessage.php )\n *\n * Memcached::getResultMessage() returns a string that describes the result\n * code of the last executed Memcached method.\n *\n * @return     string  Message describing the result of the last Memcached\n *                     operation.\n */", S(16384),"getServerByKey", T(Variant), S(0), "server_key", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getserverbykey.php )\n *\n * Memcached::getServerByKey() returns the server that would be selected by\n * a particular server_key in all the Memcached::*ByKey() operations.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"getServerList", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getserverlist.php )\n *\n * Memcached::getServerList() returns the list of all servers that are in\n * its server pool.\n *\n * @return     vector  The list of all servers in the server pool.\n */", S(16384),"getStats", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getstats.php )\n *\n * Memcached::getStats() returns an array containing the state of all\n * available memcache servers. See \357\277\275 memcache protocol specification for\n * details on these statistics.\n *\n * @return     mixed   Array of server statistics, one entry per server.\n */", S(16384),"getVersion", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.getversion.php )\n *\n * Memcached::getVersion() returns an array containing the version info for\n * all available memcache servers.\n *\n * @return     mixed   Array of server versions, one entry per server.\n */", S(16384),"increment", T(Variant), S(0), "key", T(String), NULL, NULL, S(0), "offset", T(Int64), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.increment.php )\n *\n * Memcached::increment() increments a numeric item's value by the\n * specified offset. If the item's value is not numeric, it is treated as\n * if the value were 0. Memcached::increment() will fail if the item does\n * not exist.\n *\n * @key        string  The key of the item to increment.\n * @offset     int     The amount by which to increment the item's value.\n *\n * @return     mixed   Returns new item's value on success or FALSE on\n *                     failure. The Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */", S(16384),"prepend", T(Boolean), S(0), "key", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.prepend.php )\n *\n * Memcached::prepend() prepends the given value string to the value of an\n * existing item. The reason that value is forced to be a string is that\n * prepending mixed types is not well-defined.\n *\n * If the Memcached::OPT_COMPRESSION is enabled, the operation will fail\n * and a warning will be issued, because prepending compressed data to a\n * value that is potentially already compressed is not possible.\n *\n * @key        string  The key of the item to prepend the data to.\n * @value      string  The string to prepend.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */", S(16384),"prependByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.prependbykey.php )\n *\n * Memcached::prependByKey() is functionally equivalent to\n * Memcached::prepend(), except that the free-form server_key can be used\n * to map the key to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key of the item to prepend the data to.\n * @value      string  The string to prepend.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */", S(16384),"replace", T(Boolean), S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.replace.php )\n *\n * Memcached::replace() is similar to Memcached::set(), but the operation\n * fails if the key does not exist on the server.\n *\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */", S(16384),"replaceByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.replacebykey.php )\n *\n * Memcached::replaceByKey() is functionally equivalent to\n * Memcached::replace(), except that the free-form server_key can be used\n * to map the key to a specific server. This is useful if you need to keep\n * a bunch of related keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */", S(16384),"set", T(Boolean), S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.set.php )\n *\n * Memcached::set() stores the value on a memcache server under the\n * specified key. The expiration parameter can be used to control when the\n * value is considered expired.\n *\n * The value can be any valid PHP type except for resources, because those\n * cannot be represented in a serialized form. If the\n * Memcached::OPT_COMPRESSION option is turned on, the serialized value\n * will also be compressed before storage.\n *\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"setByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "key", T(String), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.setbykey.php )\n *\n * Memcached::setByKey() is functionally equivalent to Memcached::set(),\n * except that the free-form server_key can be used to map the key to a\n * specific server. This is useful if you need to keep a bunch of related\n * keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"setMulti", T(Boolean), S(0), "items", T(Array), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.setmulti.php )\n *\n * Memcached::setMulti() is similar to Memcached::set(), but instead of a\n * single key/value item, it works on multiple items specified in items.\n * The expiration time applies to all the items at once.\n *\n * @items      map     An array of key/value pairs to store on the server.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"setMultiByKey", T(Boolean), S(0), "server_key", T(String), NULL, NULL, S(0), "items", T(Array), NULL, NULL, S(0), "expiration", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.setmultibykey.php )\n *\n * Memcached::setMultiByKey() is functionally equivalent to\n * Memcached::setMulti(), except that the free-form server_key can be used\n * to map the keys from items to a specific server. This is useful if you\n * need to keep a bunch of related keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @items      map     An array of key/value pairs to store on the server.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */", S(16384),"setOption", T(Boolean), S(0), "option", T(Int32), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.setoption.php )\n *\n * This method sets the value of a Memcached option. Some options\n * correspond to the ones defined by libmemcached, and some are specific to\n * the extension. See Memcached Constants for more information.\n *\n * The options listed below require values specified via constants.\n *\n * Memcached::OPT_HASH requires Memcached::HASH_* values.\n *\n * Memcached::OPT_DISTRIBUTION requires Memcached::DISTRIBUTION_* values.\n *\n * @option     int\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/memcached.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,"OPT_COMPRESSION", T(Int64),"OPT_SERIALIZER", T(Int64),"SERIALIZER_PHP", T(Int64),"SERIALIZER_IGBINARY", T(Int64),"SERIALIZER_JSON", T(Int64),"OPT_PREFIX_KEY", T(Int64),"OPT_HASH", T(Int64),"HASH_DEFAULT", T(Int64),"HASH_MD5", T(Int64),"HASH_CRC", T(Int64),"HASH_FNV1_64", T(Int64),"HASH_FNV1A_64", T(Int64),"HASH_FNV1_32", T(Int64),"HASH_FNV1A_32", T(Int64),"HASH_HSIEH", T(Int64),"HASH_MURMUR", T(Int64),"OPT_DISTRIBUTION", T(Int64),"DISTRIBUTION_MODULA", T(Int64),"DISTRIBUTION_CONSISTENT", T(Int64),"OPT_LIBKETAMA_COMPATIBLE", T(Int64),"OPT_BUFFER_WRITES", T(Int64),"OPT_BINARY_PROTOCOL", T(Int64),"OPT_NO_BLOCK", T(Int64),"OPT_TCP_NODELAY", T(Int64),"OPT_SOCKET_SEND_SIZE", T(Int64),"OPT_SOCKET_RECV_SIZE", T(Int64),"OPT_CONNECT_TIMEOUT", T(Int64),"OPT_RETRY_TIMEOUT", T(Int64),"OPT_SEND_TIMEOUT", T(Int64),"OPT_RECV_TIMEOUT", T(Int64),"OPT_POLL_TIMEOUT", T(Int64),"OPT_CACHE_LOOKUPS", T(Int64),"OPT_SERVER_FAILURE_LIMIT", T(Int64),"HAVE_IGBINARY", T(Boolean),"HAVE_JSON", T(Boolean),"GET_PRESERVE_ORDER", T(Int64),"RES_SUCCESS", T(Int64),"RES_FAILURE", T(Int64),"RES_HOST_LOOKUP_FAILURE", T(Int64),"RES_UNKNOWN_READ_FAILURE", T(Int64),"RES_PROTOCOL_ERROR", T(Int64),"RES_CLIENT_ERROR", T(Int64),"RES_SERVER_ERROR", T(Int64),"RES_WRITE_FAILURE", T(Int64),"RES_DATA_EXISTS", T(Int64),"RES_NOTSTORED", T(Int64),"RES_NOTFOUND", T(Int64),"RES_PARTIAL_READ", T(Int64),"RES_SOME_ERRORS", T(Int64),"RES_NO_SERVERS", T(Int64),"RES_END", T(Int64),"RES_ERRNO", T(Int64),"RES_BUFFERED", T(Int64),"RES_TIMEOUT", T(Int64),"RES_BAD_KEY_PROVIDED", T(Int64),"RES_CONNECTION_SOCKET_CREATE_FAILURE", T(Int64),"RES_PAYLOAD_FAILURE", T(Int64),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.memcached.php )\n *\n * Represents a connection to a set of memcached servers.\n *\n */", 
#elif EXT_TYPE == 3

#endif
