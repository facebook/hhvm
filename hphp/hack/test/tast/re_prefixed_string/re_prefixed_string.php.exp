Errors:
  [26:13-36] Bad regex pattern; two named subpatterns have the same name [14].
  [27:13-30] Bad regex pattern; group name must start with a non-digit [5].
  [28:13-19] Bad regex pattern; \c at end of pattern [2].
  [47:13-20] Bad regex pattern; Missing delimiter(s).
  [49:13-21] Bad regex pattern; Missing delimiter(s).
  [51:13-22] Bad regex pattern; Missing delimiter(s).
  [52:13-21] Bad regex pattern; Missing delimiter(s).
  [55:13-22] Bad regex pattern; Missing delimiter(s).
  [57:14-25] Bad regex pattern; Missing delimiter(s).
  [58:14-22] Bad regex pattern; Missing delimiter(s).
[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-11], "\\f");
      fd_fun =
      { f_span = [3:1-16:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([3:15-19], (Hprim Tvoid)))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([4:3-20],
            (Expr
               ((HH\Lib\Regex\Pattern<shape(0 => string)>), [4:3-19],
                (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [4:3-5], (Lvar ([4:3-5], $x))), None,
                   ((HH\Lib\Regex\Pattern<shape(0 => string)>), [4:8-19], (PrefixedString ("re", ((string), [4:10-19], (String "/Hello/"))))))))));
            ([7:3-20],
             (Expr
                ((~shape(0 => string)), [7:3-19],
                 (Assign (((~shape(0 => string)), [7:3-5], (Lvar ([7:3-5], $y))), None,
                    ((~shape(0 => string)), [7:8-19],
                     (Call
                        { func = (((function<T as shape(...)>(HH\Lib\Regex\Pattern<shape(0 => string)> $pattern): ~shape(0 => string))), [7:8-15], (Id ([7:8-15], "\\goodbye")));
                          targs = [((shape(0 => string)), ([7:8-15], Hwildcard))]; 
                          args = [(Anormal ((HH\Lib\Regex\Pattern<shape(0 => string)>), [7:16-18], (Lvar ([7:16-18], $x))))]; 
                          unpacked_arg = None }))
                    )))));
            ([12:3-16],
             (Expr
                ((~string), [12:3-15],
                 (Assign (((~string), [12:3-7], (Lvar ([12:3-7], $y_0))), None,
                    ((~string), [12:10-15], (Array_get (((~shape(0 => string)), [12:10-12], (Lvar ([12:10-12], $y))), (Some ((int), [12:13-14], (Int "0")))))))))));
            ([15:3-22],
             (Expr
                ((string), [15:3-21],
                 (Assign (((string), [15:3-5], (Lvar ([15:3-5], $z))), None,
                    ((string), [15:8-21],
                     (Binop { bop = Dot; lhs = ((HH\Lib\Regex\Pattern<shape(0 => string)>), [15:8-10], (Lvar ([15:8-10], $x))); rhs = ((string), [15:11-21], (String ", world!")) }))
                    )))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([3:10-11], "__SupportDynamicType"); ua_params = [] }]; 
        f_external = false; f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
      fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([18:10-17], "\\goodbye");
       fd_fun =
       { f_span = [18:1-20:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((~T), (Some ([18:78-79], (Habstr "T"))));
         f_params =
         [{ param_annotation = (HH\Lib\Regex\Pattern<T>);
            param_type_hint = ((HH\Lib\Regex\Pattern<T>), (Some ([18:43-66], (Happly (([18:43-63], "\\HH\\Lib\\Regex\\Pattern"), [([18:64-65], (Habstr "T"))]))))); 
            param_pos = [18:67-75]; param_name = "$pattern"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([19:3-25],
             (Throw
                ((exact Exception), [19:9-24],
                 (New (((exact Exception), [19:13-22], (CI ([19:13-22], "\\Exception"))), 
                    [], [], None, ((function(optional string $message, optional int $code, optional ?Exception $previous)[]: void)))))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([18:10-17], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None;
       fd_tparams =
       [{ tp_variance = Invariant; tp_name = ([18:18-19], "T");
          tp_constraints =
          [(Constraint_as, ([18:18-19], (Happly (([18:18-19], "\\HH\\supportdyn"), [([18:18-19], Hmixed)])))); (Constraint_as, ([18:23-41], (Happly (([18:23-41], "\\HH\\Lib\\Regex\\Match"), []))))];
          tp_reified = Erased; tp_user_attributes = [] }
         ];
       fd_where_constraints = []; fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([24:10-21], "\\bad_pattern");
       fd_fun =
       { f_span = [24:1-42:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([24:25-29], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([25:3-34],
             (Expr
                ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'o' => string)>), [25:3-33],
                 (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'o' => string)>), [25:3-9], (Lvar ([25:3-9], $good0))), None,
                    ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'o' => string)>), [25:12-33], (PrefixedString ("re", ((string), [25:14-33], (String "/Hel(\\D)(?'o'\\D)/"))))))))));
             ([26:3-37], (Expr ((nothing), [26:3-36], (Assign (((nothing), [26:3-8], (Lvar ([26:3-8], $bad1))), None, ((nothing), [26:13-36], (String "/He(?'l'\\D)(?'l'\\D)o/")))))));
             ([27:3-31], (Expr ((nothing), [27:3-30], (Assign (((nothing), [27:3-8], (Lvar ([27:3-8], $bad2))), None, ((nothing), [27:13-30], (String "/He(?'42'\\D)lo/")))))));
             ([28:3-20], (Expr ((nothing), [28:3-19], (Assign (((nothing), [28:3-8], (Lvar ([28:3-8], $bad3))), None, ((nothing), [28:13-19], (String "/\\c/")))))));
             ([29:3-65],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 4 => string, 5 => string, 'one' => string, 'six' => string, 'three' => string)>), [29:3-64],
                  (Assign (
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 4 => string, 5 => string, 'one' => string, 'six' => string, 'three' => string)>), [29:3-9], (Lvar ([29:3-9], $good4))),
                     None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 4 => string, 5 => string, 'one' => string, 'six' => string, 'three' => string)>), [29:12-64],
                      (PrefixedString ("re", ((string), [29:14-64], (String "/He(?'one'\\D)(\\D)(?'three'\\D)(\\D)(\\D)(?'six'\\D)/")))))
                     )))));
             ([30:3-40],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 3 => string, 'c' => string, 'e' => string)>), [30:3-39],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 3 => string, 'c' => string, 'e' => string)>), [30:3-9], (Lvar ([30:3-9], $good5))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 3 => string, 'c' => string, 'e' => string)>), [30:12-39],
                      (PrefixedString ("re", ((string), [30:14-39], (String "/a(b)(?<c>c)(d)(?<e>e)/")))))
                     )))));
             ([31:3-24],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [31:3-23],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [31:3-9], (Lvar ([31:3-9], $good6))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [31:12-23], (PrefixedString ("re", ((string), [31:14-23], (String "/Hello/"))))))))));
             ([32:3-48],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 'b' => string, 'c' => string, 'd' => string, 'e' => string)>), [32:3-47],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 'b' => string, 'c' => string, 'd' => string, 'e' => string)>), [32:3-9], (Lvar ([32:3-9], $good7))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 'b' => string, 'c' => string, 'd' => string, 'e' => string)>), [32:12-47],
                      (PrefixedString ("re", ((string), [32:14-47], (String "/a(?<b>b)(?<c>c)(?<d>d)(?<e>e)/")))))
                     )))));
             ([33:3-31],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 2 => string, 3 => string)>), [33:3-30],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 2 => string, 3 => string)>), [33:3-9], (Lvar ([33:3-9], $good8))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 2 => string, 3 => string)>), [33:12-30], (PrefixedString ("re", ((string), [33:14-30], (String "/a(b)(c)(d)?e/"))))))))));
             ([34:3-50],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string)>), [34:3-49],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string)>), [34:3-9], (Lvar ([34:3-9], $good9))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string)>), [34:12-49], (PrefixedString ("re", ((string), [34:14-49], (String "/WoS Action: .*Disable.+\\[(\\w+)/s"))))))))));
             ([35:3-70],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [35:3-69],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [35:3-10], (Lvar ([35:3-10], $good10))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [35:13-69], (PrefixedString ("re", ((string), [35:15-69], (String "/User disabled for having at least \\d+ spam reports/"))))))))));
             ([36:3-39],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [36:3-38],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [36:3-10], (Lvar ([36:3-10], $good11))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [36:13-38], (PrefixedString ("re", ((string), [36:15-38], (String "/(?<!\\w)youtube.com$/"))))))))));
             ([37:3-54],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 3 => string, 4 => string, 'version' => string)>), [37:3-53],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 3 => string, 4 => string, 'version' => string)>), [37:3-10], (Lvar ([37:3-10], $good12))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 2 => string, 3 => string, 4 => string, 'version' => string)>), [37:13-53],
                      (PrefixedString ("re", ((string), [37:15-53], (String "/.+(?P<version>(:s(\\d)+)*:c(\\d)+)$/U")))))
                     )))));
             ([38:3-49],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'm' => string, 's' => string)>), [38:3-48],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'm' => string, 's' => string)>), [38:3-10], (Lvar ([38:3-10], $good13))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 'm' => string, 's' => string)>), [38:13-48],
                      (PrefixedString ("re", ((string), [38:15-48], (String "/^t=((?<m>\\d+)m)?(?<s>\\d+)s?$/i")))))
                     )))));
             ([39:3-47],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [39:3-46],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [39:3-10], (Lvar ([39:3-10], $good14))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [39:13-46], (PrefixedString ("re", ((string), [39:15-46], (String "/(?<=\\(currently )[^)](?=\\))/"))))))))));
             ([40:3-48],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [40:3-47],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [40:3-10], (Lvar ([40:3-10], $good15))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [40:13-47], (PrefixedString ("re", ((string), [40:15-47], (String "/(?<=\\(currently )[^)]+(?=\\))/"))))))))));
             ([41:3-74],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 10 => string, 11 => string, 12 => string, 13 => string, 2 => string, 3 => string, 5 => string, 6 => string, 7 => string, 9 => string, 'd' => string, 'h' => string, 'n' => string)>),
                  [41:3-73],
                  (Assign (
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 10 => string, 11 => string, 12 => string, 13 => string, 2 => string, 3 => string, 5 => string, 6 => string, 7 => string, 9 => string, 'd' => string, 'h' => string, 'n' => string)>),
                      [41:3-10], (Lvar ([41:3-10], $good16))),
                     None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string, 1 => string, 10 => string, 11 => string, 12 => string, 13 => string, 2 => string, 3 => string, 5 => string, 6 => string, 7 => string, 9 => string, 'd' => string, 'h' => string, 'n' => string)>),
                      [41:13-73], (PrefixedString ("re", ((string), [41:15-73], (String "/(a)(b)(c)(?<d>d)(e)(f)(g)(?<h>h)(i)(j)(k)(l)(m)(?<n>n)/")))))
                     )))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([24:10-21], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([46:10-27], "\\missing_delimiter");
       fd_fun =
       { f_span = [46:1-59:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([46:31-35], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([47:3-21], (Expr ((nothing), [47:3-20], (Assign (((nothing), [47:3-8], (Lvar ([47:3-8], $bad0))), None, ((nothing), [47:13-20], (String "Hello")))))));
             ([48:3-24],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [48:3-23],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [48:3-9], (Lvar ([48:3-9], $good1))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [48:12-23], (PrefixedString ("re", ((string), [48:14-23], (String "/Hello/"))))))))));
             ([49:3-22], (Expr ((nothing), [49:3-21], (Assign (((nothing), [49:3-8], (Lvar ([49:3-8], $bad2))), None, ((nothing), [49:13-21], (String "/Hello")))))));
             ([50:3-24],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [50:3-23],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [50:3-9], (Lvar ([50:3-9], $good3))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [50:12-23], (PrefixedString ("re", ((string), [50:14-23], (String "#Hello#"))))))))));
             ([51:3-23], (Expr ((nothing), [51:3-22], (Assign (((nothing), [51:3-8], (Lvar ([51:3-8], $bad4))), None, ((nothing), [51:13-22], (String "#Hello/")))))));
             ([52:3-22], (Expr ((nothing), [52:3-21], (Assign (((nothing), [52:3-8], (Lvar ([52:3-8], $bad5))), None, ((nothing), [52:13-21], (String "#Hello")))))));
             ([53:3-24],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [53:3-23],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [53:3-9], (Lvar ([53:3-9], $good6))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [53:12-23], (PrefixedString ("re", ((string), [53:14-23], (String "(Hello)"))))))))));
             ([54:3-24],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [54:3-23],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [54:3-9], (Lvar ([54:3-9], $good7))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [54:12-23], (PrefixedString ("re", ((string), [54:14-23], (String ")Hello)"))))))))));
             ([55:3-23], (Expr ((nothing), [55:3-22], (Assign (((nothing), [55:3-8], (Lvar ([55:3-8], $bad8))), None, ((nothing), [55:13-22], (String "(Hello(")))))));
             ([56:3-24],
              (Expr
                 ((HH\Lib\Regex\Pattern<shape(0 => string)>), [56:3-23],
                  (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [56:3-9], (Lvar ([56:3-9], $good9))), None,
                     ((HH\Lib\Regex\Pattern<shape(0 => string)>), [56:12-23], (PrefixedString ("re", ((string), [56:14-23], (String "[Hello]"))))))))));
             ([57:3-26], (Expr ((nothing), [57:3-25], (Assign (((nothing), [57:3-9], (Lvar ([57:3-9], $bad10))), None, ((nothing), [57:14-25], (String "\\Hello\\")))))));
             ([58:3-23], (Expr ((nothing), [58:3-22], (Assign (((nothing), [58:3-9], (Lvar ([58:3-9], $bad11))), None, ((nothing), [58:14-22], (String "HelloH")))))))]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([46:10-27], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([61:10-31], "\\parentheses_are_weird");
       fd_fun =
       { f_span = [61:1-65:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([61:35-39], (Hprim Tvoid)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([64:3-77],
             (Expr
                ((HH\Lib\Regex\Pattern<shape(0 => string)>), [64:3-76],
                 (Assign (((HH\Lib\Regex\Pattern<shape(0 => string)>), [64:3-9], (Lvar ([64:3-9], $good0))), None,
                    ((HH\Lib\Regex\Pattern<shape(0 => string)>), [64:12-76],
                     (PrefixedString ("re", ((string), [64:14-76], (String "(He\\(?'one'\\D\\)\\(\\D\\)\\(?'three'\\D\\)\\(\\D\\)\\(\\D\\)\\(?'six'\\D\\))")))))
                    )))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([61:10-31], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([18:10-17], "\\goodbye");
       fd_fun =
       { f_span = [18:1-20:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([18:78-79], (Habstr "T"))));
         f_params =
         [{ param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([18:43-66], (Happly (([18:43-63], "\\HH\\Lib\\Regex\\Pattern"), [([18:64-65], (Habstr "T"))])))));
            param_pos = [18:67-75]; param_name = "$pattern"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([19:3-25],
             (Throw
                ((exact Exception), [19:9-24],
                 (New (((exact Exception), [19:13-22], (CI ([19:13-22], "\\Exception"))), 
                    [], [], None, ((function(optional string $message, optional int $code, optional ?Exception $previous)[]: void)))))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([18:10-17], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None;
       fd_tparams =
       [{ tp_variance = Invariant; tp_name = ([18:18-19], "T");
          tp_constraints =
          [(Constraint_as, ([18:18-19], (Happly (([18:18-19], "\\HH\\supportdyn"), [([18:18-19], Hmixed)])))); (Constraint_as, ([18:23-41], (Happly (([18:23-41], "\\HH\\Lib\\Regex\\Match"), []))))];
          tp_reified = Erased; tp_user_attributes = [] }
         ];
       fd_where_constraints = []; fd_package = None })