/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.basic;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStruct");
  private static final TField MY_INT_FIELD_FIELD_DESC = new TField("MyIntField", TType.I64, (short)1);
  private static final TField MY_STRING_FIELD_FIELD_DESC = new TField("MyStringField", TType.STRING, (short)2);
  private static final TField MY_DATA_FIELD_FIELD_DESC = new TField("MyDataField", TType.STRUCT, (short)3);
  private static final TField MY_ENUM_FIELD_DESC = new TField("myEnum", TType.I32, (short)4);
  private static final TField ONEWAY_FIELD_DESC = new TField("oneway", TType.BOOL, (short)5);
  private static final TField READONLY_FIELD_DESC = new TField("readonly", TType.BOOL, (short)6);
  private static final TField IDEMPOTENT_FIELD_DESC = new TField("idempotent", TType.BOOL, (short)7);
  private static final TField FLOAT_SET_FIELD_DESC = new TField("floatSet", TType.SET, (short)8);
  private static final TField NO_HACK_CODEGEN_FIELD_FIELD_DESC = new TField("no_hack_codegen_field", TType.STRING, (short)9);

  public final Long MyIntField;
  public final String MyStringField;
  public final MyDataItem MyDataField;
  /**
   * 
   * @see MyEnum
   */
  public final MyEnum myEnum;
  public final Boolean oneway;
  public final Boolean readonly;
  public final Boolean idempotent;
  public final Set<Float> floatSet;
  public final String no_hack_codegen_field;
  public static final int MYINTFIELD = 1;
  public static final int MYSTRINGFIELD = 2;
  public static final int MYDATAFIELD = 3;
  public static final int MYENUM = 4;
  public static final int ONEWAY = 5;
  public static final int READONLY = 6;
  public static final int IDEMPOTENT = 7;
  public static final int FLOATSET = 8;
  public static final int NO_HACK_CODEGEN_FIELD = 9;

  public MyStruct(
      Long MyIntField,
      String MyStringField,
      MyDataItem MyDataField,
      MyEnum myEnum,
      Boolean oneway,
      Boolean readonly,
      Boolean idempotent,
      Set<Float> floatSet,
      String no_hack_codegen_field) {
    this.MyIntField = MyIntField;
    this.MyStringField = MyStringField;
    this.MyDataField = MyDataField;
    this.myEnum = myEnum;
    this.oneway = oneway;
    this.readonly = readonly;
    this.idempotent = idempotent;
    this.floatSet = floatSet;
    this.no_hack_codegen_field = no_hack_codegen_field;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStruct(MyStruct other) {
    if (other.isSetMyIntField()) {
      this.MyIntField = TBaseHelper.deepCopy(other.MyIntField);
    } else {
      this.MyIntField = null;
    }
    if (other.isSetMyStringField()) {
      this.MyStringField = TBaseHelper.deepCopy(other.MyStringField);
    } else {
      this.MyStringField = null;
    }
    if (other.isSetMyDataField()) {
      this.MyDataField = TBaseHelper.deepCopy(other.MyDataField);
    } else {
      this.MyDataField = null;
    }
    if (other.isSetMyEnum()) {
      this.myEnum = TBaseHelper.deepCopy(other.myEnum);
    } else {
      this.myEnum = null;
    }
    if (other.isSetOneway()) {
      this.oneway = TBaseHelper.deepCopy(other.oneway);
    } else {
      this.oneway = null;
    }
    if (other.isSetReadonly()) {
      this.readonly = TBaseHelper.deepCopy(other.readonly);
    } else {
      this.readonly = null;
    }
    if (other.isSetIdempotent()) {
      this.idempotent = TBaseHelper.deepCopy(other.idempotent);
    } else {
      this.idempotent = null;
    }
    if (other.isSetFloatSet()) {
      this.floatSet = TBaseHelper.deepCopy(other.floatSet);
    } else {
      this.floatSet = null;
    }
    if (other.isSetNo_hack_codegen_field()) {
      this.no_hack_codegen_field = TBaseHelper.deepCopy(other.no_hack_codegen_field);
    } else {
      this.no_hack_codegen_field = null;
    }
  }

  public MyStruct deepCopy() {
    return new MyStruct(this);
  }

  public Long getMyIntField() {
    return this.MyIntField;
  }

  // Returns true if field MyIntField is set (has been assigned a value) and false otherwise
  public boolean isSetMyIntField() {
    return this.MyIntField != null;
  }

  public String getMyStringField() {
    return this.MyStringField;
  }

  // Returns true if field MyStringField is set (has been assigned a value) and false otherwise
  public boolean isSetMyStringField() {
    return this.MyStringField != null;
  }

  public MyDataItem getMyDataField() {
    return this.MyDataField;
  }

  // Returns true if field MyDataField is set (has been assigned a value) and false otherwise
  public boolean isSetMyDataField() {
    return this.MyDataField != null;
  }

  /**
   * 
   * @see MyEnum
   */
  public MyEnum getMyEnum() {
    return this.myEnum;
  }

  // Returns true if field myEnum is set (has been assigned a value) and false otherwise
  public boolean isSetMyEnum() {
    return this.myEnum != null;
  }

  public Boolean isOneway() {
    return this.oneway;
  }

  // Returns true if field oneway is set (has been assigned a value) and false otherwise
  public boolean isSetOneway() {
    return this.oneway != null;
  }

  public Boolean isReadonly() {
    return this.readonly;
  }

  // Returns true if field readonly is set (has been assigned a value) and false otherwise
  public boolean isSetReadonly() {
    return this.readonly != null;
  }

  public Boolean isIdempotent() {
    return this.idempotent;
  }

  // Returns true if field idempotent is set (has been assigned a value) and false otherwise
  public boolean isSetIdempotent() {
    return this.idempotent != null;
  }

  public Set<Float> getFloatSet() {
    return this.floatSet;
  }

  // Returns true if field floatSet is set (has been assigned a value) and false otherwise
  public boolean isSetFloatSet() {
    return this.floatSet != null;
  }

  public String getNo_hack_codegen_field() {
    return this.no_hack_codegen_field;
  }

  // Returns true if field no_hack_codegen_field is set (has been assigned a value) and false otherwise
  public boolean isSetNo_hack_codegen_field() {
    return this.no_hack_codegen_field != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStruct))
      return false;
    MyStruct that = (MyStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetMyIntField(), that.isSetMyIntField(), this.MyIntField, that.MyIntField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMyStringField(), that.isSetMyStringField(), this.MyStringField, that.MyStringField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMyDataField(), that.isSetMyDataField(), this.MyDataField, that.MyDataField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMyEnum(), that.isSetMyEnum(), this.myEnum, that.myEnum)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOneway(), that.isSetOneway(), this.oneway, that.oneway)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetReadonly(), that.isSetReadonly(), this.readonly, that.readonly)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetIdempotent(), that.isSetIdempotent(), this.idempotent, that.idempotent)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetFloatSet(), that.isSetFloatSet(), this.floatSet, that.floatSet)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetNo_hack_codegen_field(), that.isSetNo_hack_codegen_field(), this.no_hack_codegen_field, that.no_hack_codegen_field)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {MyIntField, MyStringField, MyDataField, myEnum, oneway, readonly, idempotent, floatSet, no_hack_codegen_field});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStruct deserialize(TProtocol iprot) throws TException {
    Long tmp_MyIntField = null;
    String tmp_MyStringField = null;
    MyDataItem tmp_MyDataField = null;
    MyEnum tmp_myEnum = null;
    Boolean tmp_oneway = null;
    Boolean tmp_readonly = null;
    Boolean tmp_idempotent = null;
    Set<Float> tmp_floatSet = null;
    String tmp_no_hack_codegen_field = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case MYINTFIELD:
          if (__field.type == TType.I64) {
            tmp_MyIntField = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYSTRINGFIELD:
          if (__field.type == TType.STRING) {
            tmp_MyStringField = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYDATAFIELD:
          if (__field.type == TType.STRUCT) {
            tmp_MyDataField = MyDataItem.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYENUM:
          if (__field.type == TType.I32) {
            tmp_myEnum = MyEnum.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case ONEWAY:
          if (__field.type == TType.BOOL) {
            tmp_oneway = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case READONLY:
          if (__field.type == TType.BOOL) {
            tmp_readonly = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case IDEMPOTENT:
          if (__field.type == TType.BOOL) {
            tmp_idempotent = iprot.readBool();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case FLOATSET:
          if (__field.type == TType.SET) {
            {
              TSet _set0 = iprot.readSetBegin();
              tmp_floatSet = new HashSet<Float>(Math.max(0, 2*_set0.size));
              for (int _i1 = 0; 
                   (_set0.size < 0) ? iprot.peekSet() : (_i1 < _set0.size); 
                   ++_i1)
              {
                Float _elem2;
                _elem2 = iprot.readFloat();
                tmp_floatSet.add(_elem2);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NO_HACK_CODEGEN_FIELD:
          if (__field.type == TType.STRING) {
            tmp_no_hack_codegen_field = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStruct _that;
    _that = new MyStruct(
      tmp_MyIntField
      ,tmp_MyStringField
      ,tmp_MyDataField
      ,tmp_myEnum
      ,tmp_oneway
      ,tmp_readonly
      ,tmp_idempotent
      ,tmp_floatSet
      ,tmp_no_hack_codegen_field
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.MyIntField != null) {
      oprot.writeFieldBegin(MY_INT_FIELD_FIELD_DESC);
      oprot.writeI64(this.MyIntField);
      oprot.writeFieldEnd();
    }
    if (this.MyStringField != null) {
      oprot.writeFieldBegin(MY_STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.MyStringField);
      oprot.writeFieldEnd();
    }
    if (this.MyDataField != null) {
      oprot.writeFieldBegin(MY_DATA_FIELD_FIELD_DESC);
      this.MyDataField.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.myEnum != null) {
      oprot.writeFieldBegin(MY_ENUM_FIELD_DESC);
      oprot.writeI32(this.myEnum == null ? 0 : this.myEnum.getValue());
      oprot.writeFieldEnd();
    }
    if (this.oneway != null) {
      oprot.writeFieldBegin(ONEWAY_FIELD_DESC);
      oprot.writeBool(this.oneway);
      oprot.writeFieldEnd();
    }
    if (this.readonly != null) {
      oprot.writeFieldBegin(READONLY_FIELD_DESC);
      oprot.writeBool(this.readonly);
      oprot.writeFieldEnd();
    }
    if (this.idempotent != null) {
      oprot.writeFieldBegin(IDEMPOTENT_FIELD_DESC);
      oprot.writeBool(this.idempotent);
      oprot.writeFieldEnd();
    }
    if (this.floatSet != null) {
      oprot.writeFieldBegin(FLOAT_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.FLOAT, this.floatSet.size()));
        for (Float _iter3 : this.floatSet)        {
          oprot.writeFloat(_iter3);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.no_hack_codegen_field != null) {
      oprot.writeFieldBegin(NO_HACK_CODEGEN_FIELD_FIELD_DESC);
      oprot.writeString(this.no_hack_codegen_field);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

