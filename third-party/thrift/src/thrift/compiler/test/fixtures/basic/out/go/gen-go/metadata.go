// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "maps"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID
var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_module_MyEnum =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "module.MyEnum",
                },
        }
    premadeThriftType_module_HackEnum =
        &metadata.ThriftType{
            TEnum:
                &metadata.ThriftEnumType{
                    Name: "module.HackEnum",
                },
        }
    premadeThriftType_i64 =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I64_TYPE),
        }
    premadeThriftType_string =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE),
        }
    premadeThriftType_module_MyDataItem =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.MyDataItem",
                },
        }
    premadeThriftType_module_MyDataItemAlias =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module.MyDataItemAlias",
                    UnderlyingType: premadeThriftType_module_MyDataItem,
                },
        }
    premadeThriftType_bool =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE),
        }
    premadeThriftType_float =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_FLOAT_TYPE),
        }
    premadeThriftType_set_float =
        &metadata.ThriftType{
            TSet:
                &metadata.ThriftSetType{
                    ValueType: premadeThriftType_float,
                },
        }
    premadeThriftType_module_MyStruct =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.MyStruct",
                },
        }
    premadeThriftType_i32 =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_I32_TYPE),
        }
    premadeThriftType_list_i32 =
        &metadata.ThriftType{
            TList:
                &metadata.ThriftListType{
                    ValueType: premadeThriftType_i32,
                },
        }
    premadeThriftType_set_string =
        &metadata.ThriftType{
            TSet:
                &metadata.ThriftSetType{
                    ValueType: premadeThriftType_string,
                },
        }
    premadeThriftType_map_string_i64 =
        &metadata.ThriftType{
            TMap:
                &metadata.ThriftMapType{
                    KeyType:   premadeThriftType_string,
                    ValueType: premadeThriftType_i64,
                },
        }
    premadeThriftType_module_Containers =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.Containers",
                },
        }
    premadeThriftType_module_MyEnumAlias =
        &metadata.ThriftType{
            TTypedef:
                &metadata.ThriftTypedefType{
                    Name:           "module.MyEnumAlias",
                    UnderlyingType: premadeThriftType_module_MyEnum,
                },
        }
    premadeThriftType_module_MyUnion =
        &metadata.ThriftType{
            TUnion:
                &metadata.ThriftUnionType{
                    Name: "module.MyUnion",
                },
        }
    premadeThriftType_module_ReservedKeyword =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.ReservedKeyword",
                },
        }
    premadeThriftType_module_UnionToBeRenamed =
        &metadata.ThriftType{
            TUnion:
                &metadata.ThriftUnionType{
                    Name: "module.UnionToBeRenamed",
                },
        }
    premadeThriftType_module_MyException =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.MyException",
                },
        }
    premadeThriftType_module_MyExceptionWithMessage =
        &metadata.ThriftType{
            TStruct:
                &metadata.ThriftStructType{
                    Name: "module.MyExceptionWithMessage",
                },
        }
    premadeThriftType_void =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_VOID_TYPE),
        }
    premadeThriftType_binary =
        &metadata.ThriftType{
            TPrimitive:
                thrift.Pointerize(metadata.ThriftPrimitiveType_THRIFT_BINARY_TYPE),
        }
)

var premadeThriftTypesMap = func() map[string]*metadata.ThriftType {
    fbthriftThriftTypesMap := make(map[string]*metadata.ThriftType)
    fbthriftThriftTypesMap["module.MyEnum"] = premadeThriftType_module_MyEnum
    fbthriftThriftTypesMap["module.HackEnum"] = premadeThriftType_module_HackEnum
    fbthriftThriftTypesMap["i64"] = premadeThriftType_i64
    fbthriftThriftTypesMap["string"] = premadeThriftType_string
    fbthriftThriftTypesMap["module.MyDataItem"] = premadeThriftType_module_MyDataItem
    fbthriftThriftTypesMap["module.MyDataItemAlias"] = premadeThriftType_module_MyDataItemAlias
    fbthriftThriftTypesMap["bool"] = premadeThriftType_bool
    fbthriftThriftTypesMap["float"] = premadeThriftType_float
    fbthriftThriftTypesMap["module.MyStruct"] = premadeThriftType_module_MyStruct
    fbthriftThriftTypesMap["i32"] = premadeThriftType_i32
    fbthriftThriftTypesMap["module.Containers"] = premadeThriftType_module_Containers
    fbthriftThriftTypesMap["module.MyEnumAlias"] = premadeThriftType_module_MyEnumAlias
    fbthriftThriftTypesMap["module.MyUnion"] = premadeThriftType_module_MyUnion
    fbthriftThriftTypesMap["module.ReservedKeyword"] = premadeThriftType_module_ReservedKeyword
    fbthriftThriftTypesMap["module.UnionToBeRenamed"] = premadeThriftType_module_UnionToBeRenamed
    fbthriftThriftTypesMap["module.MyException"] = premadeThriftType_module_MyException
    fbthriftThriftTypesMap["module.MyExceptionWithMessage"] = premadeThriftType_module_MyExceptionWithMessage
    fbthriftThriftTypesMap["void"] = premadeThriftType_void
    fbthriftThriftTypesMap["binary"] = premadeThriftType_binary
    return fbthriftThriftTypesMap
}()

var structMetadatas = func() []*metadata.ThriftStruct {
    fbthriftResults := make([]*metadata.ThriftStruct, 0)
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "module.MyStruct",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "MyIntField",
                        IsOptional: false,
                        Type:       premadeThriftType_i64,
                    },
                    &metadata.ThriftField{
                        Id:         2,
                        Name:       "MyStringField",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                    &metadata.ThriftField{
                        Id:         3,
                        Name:       "MyDataField",
                        IsOptional: false,
                        Type:       premadeThriftType_module_MyDataItemAlias,
                    },
                    &metadata.ThriftField{
                        Id:         4,
                        Name:       "myEnum",
                        IsOptional: false,
                        Type:       premadeThriftType_module_MyEnum,
                    },
                    &metadata.ThriftField{
                        Id:         5,
                        Name:       "oneway",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                    &metadata.ThriftField{
                        Id:         6,
                        Name:       "readonly",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                    &metadata.ThriftField{
                        Id:         7,
                        Name:       "idempotent",
                        IsOptional: false,
                        Type:       premadeThriftType_bool,
                    },
                    &metadata.ThriftField{
                        Id:         8,
                        Name:       "floatSet",
                        IsOptional: false,
                        Type:       premadeThriftType_set_float,
                    },
                    &metadata.ThriftField{
                        Id:         9,
                        Name:       "no_hack_codegen_field",
                        IsOptional: false,
                        Type:       premadeThriftType_string,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "module.Containers",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "I32List",
                        IsOptional: false,
                        Type:       premadeThriftType_list_i32,
                    },
                    &metadata.ThriftField{
                        Id:         2,
                        Name:       "StringSet",
                        IsOptional: false,
                        Type:       premadeThriftType_set_string,
                    },
                    &metadata.ThriftField{
                        Id:         3,
                        Name:       "StringToI64Map",
                        IsOptional: false,
                        Type:       premadeThriftType_map_string_i64,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "module.MyDataItem",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "module.MyUnion",
                IsUnion: true,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "myEnum",
                        IsOptional: false,
                        Type:       premadeThriftType_module_MyEnumAlias,
                    },
                    &metadata.ThriftField{
                        Id:         2,
                        Name:       "myStruct",
                        IsOptional: false,
                        Type:       premadeThriftType_module_MyStruct,
                    },
                    &metadata.ThriftField{
                        Id:         3,
                        Name:       "myDataItem",
                        IsOptional: false,
                        Type:       premadeThriftType_module_MyDataItem,
                    },
                    &metadata.ThriftField{
                        Id:         4,
                        Name:       "floatSet",
                        IsOptional: false,
                        Type:       premadeThriftType_set_float,
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "module.ReservedKeyword",
                IsUnion: false,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "reserved_field",
                        IsOptional: false,
                        Type:       premadeThriftType_i32,
                    },
                },
                StructuredAnnotations: []*metadata.ThriftConstStruct{
                    &metadata.ThriftConstStruct{
                        Type: &metadata.ThriftStructType{
                            Name: "hack.Name",
                        },
                        Fields: map[string]*metadata.ThriftConstValue{
                            "name":
                                &metadata.ThriftConstValue{
                                    CvString: thrift.Pointerize("MyRenamedStruct"),
                                },
                        },
                    },
                },
            },
        )
    }()
    func() {
        fbthriftResults = append(fbthriftResults,
            &metadata.ThriftStruct{
                Name:    "module.UnionToBeRenamed",
                IsUnion: true,
                Fields:  []*metadata.ThriftField{
                    &metadata.ThriftField{
                        Id:         1,
                        Name:       "reserved_field",
                        IsOptional: false,
                        Type:       premadeThriftType_i32,
                    },
                },
                StructuredAnnotations: []*metadata.ThriftConstStruct{
                    &metadata.ThriftConstStruct{
                        Type: &metadata.ThriftStructType{
                            Name: "hack.Name",
                        },
                        Fields: map[string]*metadata.ThriftConstValue{
                            "name":
                                &metadata.ThriftConstValue{
                                    CvString: thrift.Pointerize("MyRenamedUnion"),
                                },
                        },
                    },
                },
            },
        )
    }()
    return fbthriftResults
}()

var exceptionMetadatas = func() []*metadata.ThriftException {
    fbthriftResults := make([]*metadata.ThriftException, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftException{
            Name: "module.MyException",
            Fields: []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "MyIntField",
                    IsOptional: false,
                    Type:       premadeThriftType_i64,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "MyStringField",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "myStruct",
                    IsOptional: false,
                    Type:       premadeThriftType_module_MyStruct,
                },
                &metadata.ThriftField{
                    Id:         4,
                    Name:       "myUnion",
                    IsOptional: false,
                    Type:       premadeThriftType_module_MyUnion,
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftException{
            Name: "module.MyExceptionWithMessage",
            Fields: []*metadata.ThriftField{
                &metadata.ThriftField{
                    Id:         1,
                    Name:       "MyIntField",
                    IsOptional: false,
                    Type:       premadeThriftType_i64,
                },
                &metadata.ThriftField{
                    Id:         2,
                    Name:       "MyStringField",
                    IsOptional: false,
                    Type:       premadeThriftType_string,
                },
                &metadata.ThriftField{
                    Id:         3,
                    Name:       "myStruct",
                    IsOptional: false,
                    Type:       premadeThriftType_module_MyStruct,
                },
                &metadata.ThriftField{
                    Id:         4,
                    Name:       "myUnion",
                    IsOptional: false,
                    Type:       premadeThriftType_module_MyUnion,
                },
            },
        },
    )
    return fbthriftResults
}()

var enumMetadatas = func() []*metadata.ThriftEnum {
    fbthriftResults := make([]*metadata.ThriftEnum, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.MyEnum",
            Elements: map[int32]string{
                0: "MyValue1",
                1: "MyValue2",
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftEnum{
            Name:     "module.HackEnum",
            Elements: map[int32]string{
                0: "Value1",
                1: "Value2",
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "hack.Name",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                        "name":
                            &metadata.ThriftConstValue{
                                CvString: thrift.Pointerize("RenamedEnum"),
                            },
                    },
                },
            },
        },
    )
    return fbthriftResults
}()

var serviceMetadatas = func() []*metadata.ThriftService {
    fbthriftResults := make([]*metadata.ThriftService, 0)
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.FooService",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "simple_rpc",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                },
            },
            StructuredAnnotations: []*metadata.ThriftConstStruct{
                &metadata.ThriftConstStruct{
                    Type: &metadata.ThriftStructType{
                        Name: "hack.Name",
                    },
                    Fields: map[string]*metadata.ThriftConstValue{
                        "name":
                            &metadata.ThriftConstValue{
                                CvString: thrift.Pointerize("RenamedService"),
                            },
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.FB303Service",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "simple_rpc",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_module_ReservedKeyword,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "int_parameter",
                            IsOptional: false,
                            Type:       premadeThriftType_i32,
                        },
                    },
                    StructuredAnnotations: []*metadata.ThriftConstStruct{
                        &metadata.ThriftConstStruct{
                            Type: &metadata.ThriftStructType{
                                Name: "hack.Name",
                            },
                            Fields: map[string]*metadata.ThriftConstValue{
                                "name":
                                    &metadata.ThriftConstValue{
                                        CvString: thrift.Pointerize("renamed_rpc"),
                                    },
                            },
                        },
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.MyService",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "ping",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                },
                &metadata.ThriftFunction{
                    Name:       "getRandomData",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_string,
                },
                &metadata.ThriftFunction{
                    Name:       "sink",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "sink",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "putDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                        &metadata.ThriftField{
                            Id:         2,
                            Name:       "data",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "hasDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_bool,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "getDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_string,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "deleteDataById",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "lobDataById",
                    IsOneway:   true,
                    ReturnType: premadeThriftType_void,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "id",
                            IsOptional: false,
                            Type:       premadeThriftType_i64,
                        },
                        &metadata.ThriftField{
                            Id:         2,
                            Name:       "data",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "invalid_return_for_hack",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_set_float,
                    StructuredAnnotations: []*metadata.ThriftConstStruct{
                        &metadata.ThriftConstStruct{
                            Type: &metadata.ThriftStructType{
                                Name: "hack.SkipCodegen",
                            },
                            Fields: map[string]*metadata.ThriftConstValue{
                                "reason":
                                    &metadata.ThriftConstValue{
                                        CvString: thrift.Pointerize("Invalid key type"),
                                    },
                            },
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "rpc_skipped_codegen",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_void,
                    StructuredAnnotations: []*metadata.ThriftConstStruct{
                        &metadata.ThriftConstStruct{
                            Type: &metadata.ThriftStructType{
                                Name: "hack.SkipCodegen",
                            },
                            Fields: map[string]*metadata.ThriftConstValue{
                                "reason":
                                    &metadata.ThriftConstValue{
                                        CvString: thrift.Pointerize("Skip function deprecation"),
                                    },
                            },
                        },
                    },
                },
            },
        },
    )
    fbthriftResults = append(fbthriftResults,
        &metadata.ThriftService{
            Name:      "module.DbMixedStackArguments",
            Functions: []*metadata.ThriftFunction{
                &metadata.ThriftFunction{
                    Name:       "getDataByKey0",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_binary,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "key",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
                &metadata.ThriftFunction{
                    Name:       "getDataByKey1",
                    IsOneway:   false,
                    ReturnType: premadeThriftType_binary,
                    Arguments:  []*metadata.ThriftField{
                        &metadata.ThriftField{
                            Id:         1,
                            Name:       "key",
                            IsOptional: false,
                            Type:       premadeThriftType_string,
                        },
                    },
                },
            },
        },
    )
    return fbthriftResults
}()

// Thrift metadata for this package, as well as all of its recursive imports.
var packageThriftMetadata = func() *metadata.ThriftMetadata {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)
    allStructsMap := make(map[string]*metadata.ThriftStruct)
    allExceptionsMap := make(map[string]*metadata.ThriftException)
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }
    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }
    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }
    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // Obtain Thrift metadatas from recursively included programs...
    var recursiveThriftMetadatas []*metadata.ThriftMetadata

    // ...now merge metadatas from recursively included programs.
    for _, thriftMetadata := range recursiveThriftMetadatas {
        maps.Copy(allEnumsMap, thriftMetadata.GetEnums())
        maps.Copy(allStructsMap, thriftMetadata.GetStructs())
        maps.Copy(allExceptionsMap, thriftMetadata.GetExceptions())
        maps.Copy(allServicesMap, thriftMetadata.GetServices())
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnumsMap).
        SetStructs(allStructsMap).
        SetExceptions(allExceptionsMap).
        SetServices(allServicesMap)
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata ThriftType for a given full type name.
func GetMetadataThriftType(fullName string) *metadata.ThriftType {
    return premadeThriftTypesMap[fullName]
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    return packageThriftMetadata
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    allServicesMap := packageThriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(packageThriftMetadata.GetEnums()).
        SetStructs(packageThriftMetadata.GetStructs()).
        SetExceptions(packageThriftMetadata.GetExceptions()).
        SetServices(relevantServicesMap)
}
