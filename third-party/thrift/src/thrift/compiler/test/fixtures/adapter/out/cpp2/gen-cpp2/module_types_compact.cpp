/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_types_custom_protocol.h"

namespace facebook::thrift::test {

template void MyAnnotation::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyAnnotation::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyAnnotation::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyAnnotation::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Foo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Baz::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Baz::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Baz::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Baz::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Bar::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void DirectlyAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DirectlyAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DirectlyAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DirectlyAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

namespace detail {
template void IndependentDirectlyAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IndependentDirectlyAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IndependentDirectlyAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IndependentDirectlyAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void StructWithFieldAdapter::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StructWithFieldAdapter::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StructWithFieldAdapter::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StructWithFieldAdapter::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void TerseAdaptedFields::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TerseAdaptedFields::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TerseAdaptedFields::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TerseAdaptedFields::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void B::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t B::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t B::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t B::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void A::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t A::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Config::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Config::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Config::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Config::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AdaptTestStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptTestStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptTestStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptTestStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AdaptTemplatedTestStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptTemplatedTestStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptTemplatedTestStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptTemplatedTestStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AdaptTemplatedNestedTestStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptTemplatedNestedTestStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptTemplatedNestedTestStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptTemplatedNestedTestStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ThriftAdaptTestUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftAdaptTestUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftAdaptTestUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftAdaptTestUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ThriftAdaptedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftAdaptedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftAdaptedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftAdaptedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void DirectlyAdaptedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DirectlyAdaptedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DirectlyAdaptedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DirectlyAdaptedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void StructFieldAdaptedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StructFieldAdaptedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StructFieldAdaptedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StructFieldAdaptedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CircularAdaptee::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CircularAdaptee::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CircularAdaptee::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CircularAdaptee::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void CircularStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CircularStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CircularStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CircularStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ReorderedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ReorderedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ReorderedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ReorderedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void DeclaredAfterStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DeclaredAfterStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DeclaredAfterStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DeclaredAfterStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void UnderlyingRenamedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t UnderlyingRenamedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UnderlyingRenamedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t UnderlyingRenamedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void UnderlyingSameNamespaceStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t UnderlyingSameNamespaceStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UnderlyingSameNamespaceStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t UnderlyingSameNamespaceStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void HeapAllocated::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HeapAllocated::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HeapAllocated::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HeapAllocated::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void MoveOnly::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MoveOnly::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MoveOnly::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MoveOnly::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AlsoMoveOnly::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AlsoMoveOnly::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AlsoMoveOnly::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AlsoMoveOnly::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ApplyAdapter::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ApplyAdapter::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ApplyAdapter::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ApplyAdapter::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

namespace detail {
template void TransitiveAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TransitiveAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TransitiveAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TransitiveAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
} // namespace detail

template void CountingStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t CountingStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t CountingStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t CountingStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Person::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Person::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Person::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Person2::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Person2::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person2::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Person2::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Renamed::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Renamed::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Renamed::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Renamed::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // namespace facebook::thrift::test
