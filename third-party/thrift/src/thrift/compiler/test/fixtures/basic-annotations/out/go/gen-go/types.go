// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-annotations/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID


type IncredibleStruct = MyStruct

func NewIncredibleStruct() *IncredibleStruct {
    return NewMyStruct()
}

func WriteIncredibleStruct(item *IncredibleStruct, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadIncredibleStruct(p thrift.Decoder) (*IncredibleStruct, error) {
    var decodeResult *IncredibleStruct
    decodeErr := func() error {
        result := NewMyStruct()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type BrilliantStruct = MyStruct

func NewBrilliantStruct() *BrilliantStruct {
    return NewMyStruct()
}

func WriteBrilliantStruct(item *BrilliantStruct, p thrift.Encoder) error {
    if err := item.Write(p); err != nil {
        return err
    }
    return nil
}

func ReadBrilliantStruct(p thrift.Decoder) (*BrilliantStruct, error) {
    var decodeResult *BrilliantStruct
    decodeErr := func() error {
        result := NewMyStruct()
        err := result.Read(p)
        if err != nil {
            return err
        }
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type ListString_6884 = []string

func NewListString_6884() ListString_6884 {
    return make([]string, 0)
}

func WriteListString_6884(item ListString_6884, p thrift.Encoder) error {
    if err := p.WriteListBegin(thrift.STRING, len(item)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range item {
        {
            item := v
            if err := p.WriteString(item); err != nil {
                return err
            }
        }
    }
    if err := p.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
    }
    return nil
}

func ReadListString_6884(p thrift.Decoder) (ListString_6884, error) {
    var decodeResult ListString_6884
    decodeErr := func() error {
        _ /* elemType */, size, err := p.ReadListBegin()
        if err != nil {
            return thrift.PrependError("error reading list begin: ", err)
        }
        
        listResult := make([]string, 0, size)
        for i := 0; i < size; i++ {
            var elem string
            {
                result, err := p.ReadString()
                if err != nil {
                    return err
                }
                elem = result
            }
            listResult = append(listResult, elem)
        }
        
        if err := p.ReadListEnd(); err != nil {
            return thrift.PrependError("error reading list end: ", err)
        }
        result := listResult
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}


type MyEnum int32

const (
    MyEnum_MyValue1 MyEnum = 0
    MyEnum_MyValue2 MyEnum = 1
    MyEnum_DOMAIN MyEnum = 2
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_MyValue1: "MyValue1",
        MyEnum_MyValue2: "MyValue2",
        MyEnum_DOMAIN: "DOMAIN",
    }

    MyEnumToValue = map[string]MyEnum {
        "MyValue1": MyEnum_MyValue1,
        "MyValue2": MyEnum_MyValue2,
        "DOMAIN": MyEnum_DOMAIN,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

type MyStructNestedAnnotation struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructNestedAnnotation)(nil)

func NewMyStructNestedAnnotation() *MyStructNestedAnnotation {
    return (&MyStructNestedAnnotation{}).setDefaults()
}

func (x *MyStructNestedAnnotation) GetName() string {
    return x.Name
}

func (x *MyStructNestedAnnotation) SetNameNonCompat(value string) *MyStructNestedAnnotation {
    x.Name = value
    return x
}

func (x *MyStructNestedAnnotation) SetName(value string) *MyStructNestedAnnotation {
    x.Name = value
    return x
}

func (x *MyStructNestedAnnotation) writeField1(p thrift.Encoder) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation write field begin error: ", err)
    }

    item := x.Name
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation write field end error: ", err)
    }
    return nil
}

func (x *MyStructNestedAnnotation) readField1(p thrift.Decoder) error {  // Name
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Name = result
    return nil
}



func (x *MyStructNestedAnnotation) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyStructNestedAnnotation"); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation write struct end error: ", err)
    }
    return nil
}

func (x *MyStructNestedAnnotation) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyStructNestedAnnotation field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "name")):  // name
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyStructNestedAnnotation read struct end error: ", err)
    }

    return nil
}

func (x *MyStructNestedAnnotation) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyStructNestedAnnotation) setDefaults() *MyStructNestedAnnotation {
    return x.
        SetNameNonCompat("")
}

type MyUnion struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnion)(nil)

func NewMyUnion() *MyUnion {
    return (&MyUnion{}).setDefaults()
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}



func (x *MyUnion) Write(p thrift.Encoder) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("MyUnion write union: no more than one field must be set (%d set).", countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError("MyUnion write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyUnion write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyUnion write struct end error: ", err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyUnion read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyUnion field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyUnion read struct end error: ", err)
    }

    return nil
}

func (x *MyUnion) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyUnion) setDefaults() *MyUnion {
    return x
}

type MyException struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyException)(nil)

func NewMyException() *MyException {
    return (&MyException{}).setDefaults()
}



func (x *MyException) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyException"); err != nil {
        return thrift.PrependError("MyException write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyException write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyException write struct end error: ", err)
    }
    return nil
}

func (x *MyException) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyException read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyException field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyException read struct end error: ", err)
    }

    return nil
}

func (x *MyException) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyException) setDefaults() *MyException {
    return x
}

func (x *MyException) Error() string {
    return x.String()
}
type MyStruct struct {
    AbstractName string `thrift:"abstract,1" tag:"some_abstract"`
    MajorVer int64 `thrift:"major,2" json:"major" db:"major"`
    AnnotationWithQuote string `thrift:"annotation_with_quote,3" tag:"somevalue"`
    Class_ string `thrift:"class_,4" json:"class_" db:"class_"`
    AnnotationWithTrailingComma string `thrift:"annotation_with_trailing_comma,5" json:"annotation_with_trailing_comma" db:"annotation_with_trailing_comma"`
    EmptyAnnotations string `thrift:"empty_annotations,6" json:"empty_annotations" db:"empty_annotations"`
    MyEnum MyEnum `thrift:"my_enum,7" json:"my_enum" db:"my_enum"`
    CppTypeAnnotation ListString_6884 `thrift:"cpp_type_annotation,8" json:"cpp_type_annotation" db:"cpp_type_annotation"`
    MyUnion *MyUnion `thrift:"my_union,9" json:"my_union" db:"my_union"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).setDefaults()
}

func (x *MyStruct) GetAbstractName() string {
    return x.AbstractName
}

func (x *MyStruct) GetMajorVer() int64 {
    return x.MajorVer
}

func (x *MyStruct) GetAnnotationWithQuote() string {
    return x.AnnotationWithQuote
}

func (x *MyStruct) GetClass_() string {
    return x.Class_
}

func (x *MyStruct) GetAnnotationWithTrailingComma() string {
    return x.AnnotationWithTrailingComma
}

func (x *MyStruct) GetEmptyAnnotations() string {
    return x.EmptyAnnotations
}

func (x *MyStruct) GetMyEnum() MyEnum {
    return x.MyEnum
}

func (x *MyStruct) GetCppTypeAnnotation() ListString_6884 {
    if !x.IsSetCppTypeAnnotation() {
        return NewListString_6884()
    }
    return x.CppTypeAnnotation
}

func (x *MyStruct) GetMyUnion() *MyUnion {
    if !x.IsSetMyUnion() {
        return nil
    }
    return x.MyUnion
}

func (x *MyStruct) SetAbstractNameNonCompat(value string) *MyStruct {
    x.AbstractName = value
    return x
}

func (x *MyStruct) SetAbstractName(value string) *MyStruct {
    x.AbstractName = value
    return x
}

func (x *MyStruct) SetMajorVerNonCompat(value int64) *MyStruct {
    x.MajorVer = value
    return x
}

func (x *MyStruct) SetMajorVer(value int64) *MyStruct {
    x.MajorVer = value
    return x
}

func (x *MyStruct) SetAnnotationWithQuoteNonCompat(value string) *MyStruct {
    x.AnnotationWithQuote = value
    return x
}

func (x *MyStruct) SetAnnotationWithQuote(value string) *MyStruct {
    x.AnnotationWithQuote = value
    return x
}

func (x *MyStruct) SetClass_NonCompat(value string) *MyStruct {
    x.Class_ = value
    return x
}

func (x *MyStruct) SetClass_(value string) *MyStruct {
    x.Class_ = value
    return x
}

func (x *MyStruct) SetAnnotationWithTrailingCommaNonCompat(value string) *MyStruct {
    x.AnnotationWithTrailingComma = value
    return x
}

func (x *MyStruct) SetAnnotationWithTrailingComma(value string) *MyStruct {
    x.AnnotationWithTrailingComma = value
    return x
}

func (x *MyStruct) SetEmptyAnnotationsNonCompat(value string) *MyStruct {
    x.EmptyAnnotations = value
    return x
}

func (x *MyStruct) SetEmptyAnnotations(value string) *MyStruct {
    x.EmptyAnnotations = value
    return x
}

func (x *MyStruct) SetMyEnumNonCompat(value MyEnum) *MyStruct {
    x.MyEnum = value
    return x
}

func (x *MyStruct) SetMyEnum(value MyEnum) *MyStruct {
    x.MyEnum = value
    return x
}

func (x *MyStruct) SetCppTypeAnnotationNonCompat(value ListString_6884) *MyStruct {
    x.CppTypeAnnotation = value
    return x
}

func (x *MyStruct) SetCppTypeAnnotation(value ListString_6884) *MyStruct {
    x.CppTypeAnnotation = value
    return x
}

func (x *MyStruct) SetMyUnionNonCompat(value *MyUnion) *MyStruct {
    x.MyUnion = value
    return x
}

func (x *MyStruct) SetMyUnion(value *MyUnion) *MyStruct {
    x.MyUnion = value
    return x
}

func (x *MyStruct) IsSetCppTypeAnnotation() bool {
    return x != nil && x.CppTypeAnnotation != nil
}

func (x *MyStruct) IsSetMyUnion() bool {
    return x != nil && x.MyUnion != nil
}

func (x *MyStruct) writeField1(p thrift.Encoder) error {  // AbstractName
    if err := p.WriteFieldBegin("abstract", thrift.STRING, 1); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.AbstractName
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField2(p thrift.Encoder) error {  // MajorVer
    if err := p.WriteFieldBegin("major", thrift.I64, 2); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MajorVer
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField3(p thrift.Encoder) error {  // AnnotationWithQuote
    if err := p.WriteFieldBegin("annotation_with_quote", thrift.STRING, 3); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.AnnotationWithQuote
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField4(p thrift.Encoder) error {  // Class_
    if err := p.WriteFieldBegin("class_", thrift.STRING, 4); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.Class_
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField5(p thrift.Encoder) error {  // AnnotationWithTrailingComma
    if err := p.WriteFieldBegin("annotation_with_trailing_comma", thrift.STRING, 5); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.AnnotationWithTrailingComma
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField6(p thrift.Encoder) error {  // EmptyAnnotations
    if err := p.WriteFieldBegin("empty_annotations", thrift.STRING, 6); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.EmptyAnnotations
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField7(p thrift.Encoder) error {  // MyEnum
    if err := p.WriteFieldBegin("my_enum", thrift.I32, 7); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MyEnum
    if err := p.WriteI32(int32(item)); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField8(p thrift.Encoder) error {  // CppTypeAnnotation
    if err := p.WriteFieldBegin("cpp_type_annotation", thrift.LIST, 8); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.CppTypeAnnotation
    err := WriteListString_6884(item, p)
    if err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) writeField9(p thrift.Encoder) error {  // MyUnion
    if !x.IsSetMyUnion() {
        return nil
    }

    if err := p.WriteFieldBegin("my_union", thrift.STRUCT, 9); err != nil {
        return thrift.PrependError("MyStruct write field begin error: ", err)
    }

    item := x.MyUnion
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("MyStruct write field end error: ", err)
    }
    return nil
}

func (x *MyStruct) readField1(p thrift.Decoder) error {  // AbstractName
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.AbstractName = result
    return nil
}

func (x *MyStruct) readField2(p thrift.Decoder) error {  // MajorVer
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.MajorVer = result
    return nil
}

func (x *MyStruct) readField3(p thrift.Decoder) error {  // AnnotationWithQuote
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.AnnotationWithQuote = result
    return nil
}

func (x *MyStruct) readField4(p thrift.Decoder) error {  // Class_
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Class_ = result
    return nil
}

func (x *MyStruct) readField5(p thrift.Decoder) error {  // AnnotationWithTrailingComma
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.AnnotationWithTrailingComma = result
    return nil
}

func (x *MyStruct) readField6(p thrift.Decoder) error {  // EmptyAnnotations
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.EmptyAnnotations = result
    return nil
}

func (x *MyStruct) readField7(p thrift.Decoder) error {  // MyEnum
    enumResult, err := p.ReadI32()
    if err != nil {
        return err
    }
    result := MyEnum(enumResult)

    x.MyEnum = result
    return nil
}

func (x *MyStruct) readField8(p thrift.Decoder) error {  // CppTypeAnnotation
    result, err := ReadListString_6884(p)
    if err != nil {
        return err
    }

    x.CppTypeAnnotation = result
    return nil
}

func (x *MyStruct) readField9(p thrift.Decoder) error {  // MyUnion
    result := NewMyUnion()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyUnion = result
    return nil
}




func (x *MyStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError("MyStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }
    if err := x.writeField4(p); err != nil {
        return err
    }
    if err := x.writeField5(p); err != nil {
        return err
    }
    if err := x.writeField6(p); err != nil {
        return err
    }
    if err := x.writeField7(p); err != nil {
        return err
    }
    if err := x.writeField8(p); err != nil {
        return err
    }
    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("MyStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("MyStruct write struct end error: ", err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("MyStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("MyStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "abstract")):  // abstract
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "major")):  // major
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "annotation_with_quote")):  // annotation_with_quote
            fieldReadErr = x.readField3(p)
        case ((id == 4 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "class_")):  // class_
            fieldReadErr = x.readField4(p)
        case ((id == 5 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "annotation_with_trailing_comma")):  // annotation_with_trailing_comma
            fieldReadErr = x.readField5(p)
        case ((id == 6 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "empty_annotations")):  // empty_annotations
            fieldReadErr = x.readField6(p)
        case ((id == 7 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "my_enum")):  // my_enum
            fieldReadErr = x.readField7(p)
        case ((id == 8 && wireType == thrift.LIST) || (id == thrift.NO_FIELD_ID && fieldName == "cpp_type_annotation")):  // cpp_type_annotation
            fieldReadErr = x.readField8(p)
        case ((id == 9 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "my_union")):  // my_union
            fieldReadErr = x.readField9(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("MyStruct read struct end error: ", err)
    }

    return nil
}

func (x *MyStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *MyStruct) setDefaults() *MyStruct {
    return x.
        SetAbstractNameNonCompat("").
        SetMajorVerNonCompat(0).
        SetAnnotationWithQuoteNonCompat("").
        SetClass_NonCompat("").
        SetAnnotationWithTrailingCommaNonCompat("").
        SetEmptyAnnotationsNonCompat("").
        SetMyEnumNonCompat(0).
        SetCppTypeAnnotationNonCompat(NewListString_6884()).
        SetMyUnionNonCompat(NewMyUnion())
}

type SecretStruct struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Password string `thrift:"password,2" json:"password" db:"password"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*SecretStruct)(nil)

func NewSecretStruct() *SecretStruct {
    return (&SecretStruct{}).setDefaults()
}

func (x *SecretStruct) GetId() int64 {
    return x.Id
}

func (x *SecretStruct) GetPassword() string {
    return x.Password
}

func (x *SecretStruct) SetIdNonCompat(value int64) *SecretStruct {
    x.Id = value
    return x
}

func (x *SecretStruct) SetId(value int64) *SecretStruct {
    x.Id = value
    return x
}

func (x *SecretStruct) SetPasswordNonCompat(value string) *SecretStruct {
    x.Password = value
    return x
}

func (x *SecretStruct) SetPassword(value string) *SecretStruct {
    x.Password = value
    return x
}

func (x *SecretStruct) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("SecretStruct write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("SecretStruct write field end error: ", err)
    }
    return nil
}

func (x *SecretStruct) writeField2(p thrift.Encoder) error {  // Password
    if err := p.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
        return thrift.PrependError("SecretStruct write field begin error: ", err)
    }

    item := x.Password
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("SecretStruct write field end error: ", err)
    }
    return nil
}

func (x *SecretStruct) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}

func (x *SecretStruct) readField2(p thrift.Decoder) error {  // Password
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Password = result
    return nil
}



func (x *SecretStruct) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("SecretStruct"); err != nil {
        return thrift.PrependError("SecretStruct write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("SecretStruct write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("SecretStruct write struct end error: ", err)
    }
    return nil
}

func (x *SecretStruct) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("SecretStruct read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("SecretStruct field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "password")):  // password
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("SecretStruct read struct end error: ", err)
    }

    return nil
}

func (x *SecretStruct) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *SecretStruct) setDefaults() *SecretStruct {
    return x.
        SetIdNonCompat(0).
        SetPasswordNonCompat("")
}


// Service req/resp structs (below)
type reqMyServicePing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePing)(nil)

// Deprecated: MyServicePingArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePingArgsDeprecated = reqMyServicePing

func newReqMyServicePing() *reqMyServicePing {
    return (&reqMyServicePing{}).setDefaults()
}



func (x *reqMyServicePing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePing"); err != nil {
        return thrift.PrependError("reqMyServicePing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePing write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePing read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePing) setDefaults() *reqMyServicePing {
    return x
}

type respMyServicePing struct {
    MyExcept *MyException `thrift:"myExcept,1,optional" json:"myExcept,omitempty" db:"myExcept"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePing)(nil)
var _ thrift.WritableResult = (*respMyServicePing)(nil)

// Deprecated: MyServicePingResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePingResultDeprecated = respMyServicePing

func newRespMyServicePing() *respMyServicePing {
    return (&respMyServicePing{}).setDefaults()
}

func (x *respMyServicePing) GetMyExcept() *MyException {
    if !x.IsSetMyExcept() {
        return nil
    }
    return x.MyExcept
}

func (x *respMyServicePing) SetMyExceptNonCompat(value *MyException) *respMyServicePing {
    x.MyExcept = value
    return x
}

func (x *respMyServicePing) SetMyExcept(value *MyException) *respMyServicePing {
    x.MyExcept = value
    return x
}

func (x *respMyServicePing) IsSetMyExcept() bool {
    return x != nil && x.MyExcept != nil
}

func (x *respMyServicePing) writeField1(p thrift.Encoder) error {  // MyExcept
    if !x.IsSetMyExcept() {
        return nil
    }

    if err := p.WriteFieldBegin("myExcept", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError("respMyServicePing write field begin error: ", err)
    }

    item := x.MyExcept
    if err := item.Write(p); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServicePing write field end error: ", err)
    }
    return nil
}

func (x *respMyServicePing) readField1(p thrift.Decoder) error {  // MyExcept
    result := NewMyException()
    err := result.Read(p)
    if err != nil {
        return err
    }

    x.MyExcept = result
    return nil
}




func (x *respMyServicePing) Exception() thrift.WritableException {
    if x.MyExcept != nil {
        return x.MyExcept
    }
    return nil
}

func (x *respMyServicePing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePing"); err != nil {
        return thrift.PrependError("respMyServicePing write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePing write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRUCT) || (id == thrift.NO_FIELD_ID && fieldName == "myExcept")):  // myExcept
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePing read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePing) setDefaults() *respMyServicePing {
    return x
}

type reqMyServiceGetRandomData struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceGetRandomData)(nil)

// Deprecated: MyServiceGetRandomDataArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGetRandomDataArgsDeprecated = reqMyServiceGetRandomData

func newReqMyServiceGetRandomData() *reqMyServiceGetRandomData {
    return (&reqMyServiceGetRandomData{}).setDefaults()
}



func (x *reqMyServiceGetRandomData) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceGetRandomData"); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGetRandomData) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceGetRandomData field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGetRandomData read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceGetRandomData) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceGetRandomData) setDefaults() *reqMyServiceGetRandomData {
    return x
}

type respMyServiceGetRandomData struct {
    Success *string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceGetRandomData)(nil)
var _ thrift.WritableResult = (*respMyServiceGetRandomData)(nil)

// Deprecated: MyServiceGetRandomDataResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGetRandomDataResultDeprecated = respMyServiceGetRandomData

func newRespMyServiceGetRandomData() *respMyServiceGetRandomData {
    return (&respMyServiceGetRandomData{}).setDefaults()
}

func (x *respMyServiceGetRandomData) GetSuccess() string {
    if !x.IsSetSuccess() {
        return ""
    }
    return *x.Success
}

func (x *respMyServiceGetRandomData) SetSuccessNonCompat(value string) *respMyServiceGetRandomData {
    x.Success = &value
    return x
}

func (x *respMyServiceGetRandomData) SetSuccess(value *string) *respMyServiceGetRandomData {
    x.Success = value
    return x
}

func (x *respMyServiceGetRandomData) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceGetRandomData) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceGetRandomData) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respMyServiceGetRandomData) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGetRandomData) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceGetRandomData"); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceGetRandomData) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceGetRandomData field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGetRandomData read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceGetRandomData) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceGetRandomData) setDefaults() *respMyServiceGetRandomData {
    return x
}

type reqMyServiceHasDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceHasDataById)(nil)

// Deprecated: MyServiceHasDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceHasDataByIdArgsDeprecated = reqMyServiceHasDataById

func newReqMyServiceHasDataById() *reqMyServiceHasDataById {
    return (&reqMyServiceHasDataById{}).setDefaults()
}

func (x *reqMyServiceHasDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceHasDataById) SetIdNonCompat(value int64) *reqMyServiceHasDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceHasDataById) SetId(value int64) *reqMyServiceHasDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceHasDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceHasDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}



func (x *reqMyServiceHasDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceHasDataById"); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceHasDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceHasDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceHasDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceHasDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceHasDataById) setDefaults() *reqMyServiceHasDataById {
    return x.
        SetIdNonCompat(0)
}

type respMyServiceHasDataById struct {
    Success *bool `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceHasDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceHasDataById)(nil)

// Deprecated: MyServiceHasDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceHasDataByIdResultDeprecated = respMyServiceHasDataById

func newRespMyServiceHasDataById() *respMyServiceHasDataById {
    return (&respMyServiceHasDataById{}).setDefaults()
}

func (x *respMyServiceHasDataById) GetSuccess() bool {
    if !x.IsSetSuccess() {
        return false
    }
    return *x.Success
}

func (x *respMyServiceHasDataById) SetSuccessNonCompat(value bool) *respMyServiceHasDataById {
    x.Success = &value
    return x
}

func (x *respMyServiceHasDataById) SetSuccess(value *bool) *respMyServiceHasDataById {
    x.Success = value
    return x
}

func (x *respMyServiceHasDataById) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceHasDataById) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteBool(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceHasDataById) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadBool()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respMyServiceHasDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceHasDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceHasDataById"); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceHasDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceHasDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.BOOL) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceHasDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceHasDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceHasDataById) setDefaults() *respMyServiceHasDataById {
    return x
}

type reqMyServiceGoGetDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceGoGetDataById)(nil)

// Deprecated: MyServiceGoGetDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGoGetDataByIdArgsDeprecated = reqMyServiceGoGetDataById

func newReqMyServiceGoGetDataById() *reqMyServiceGoGetDataById {
    return (&reqMyServiceGoGetDataById{}).setDefaults()
}

func (x *reqMyServiceGoGetDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceGoGetDataById) SetIdNonCompat(value int64) *reqMyServiceGoGetDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceGoGetDataById) SetId(value int64) *reqMyServiceGoGetDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceGoGetDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGoGetDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}



func (x *reqMyServiceGoGetDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceGoGetDataById"); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGoGetDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceGoGetDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGoGetDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceGoGetDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceGoGetDataById) setDefaults() *reqMyServiceGoGetDataById {
    return x.
        SetIdNonCompat(0)
}

type respMyServiceGoGetDataById struct {
    Success *string `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceGoGetDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceGoGetDataById)(nil)

// Deprecated: MyServiceGoGetDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGoGetDataByIdResultDeprecated = respMyServiceGoGetDataById

func newRespMyServiceGoGetDataById() *respMyServiceGoGetDataById {
    return (&respMyServiceGoGetDataById{}).setDefaults()
}

func (x *respMyServiceGoGetDataById) GetSuccess() string {
    if !x.IsSetSuccess() {
        return ""
    }
    return *x.Success
}

func (x *respMyServiceGoGetDataById) SetSuccessNonCompat(value string) *respMyServiceGoGetDataById {
    x.Success = &value
    return x
}

func (x *respMyServiceGoGetDataById) SetSuccess(value *string) *respMyServiceGoGetDataById {
    x.Success = value
    return x
}

func (x *respMyServiceGoGetDataById) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respMyServiceGoGetDataById) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById write field end error: ", err)
    }
    return nil
}

func (x *respMyServiceGoGetDataById) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respMyServiceGoGetDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGoGetDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceGoGetDataById"); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceGoGetDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceGoGetDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGoGetDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceGoGetDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceGoGetDataById) setDefaults() *respMyServiceGoGetDataById {
    return x
}

type reqMyServicePutDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Data string `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePutDataById)(nil)

// Deprecated: MyServicePutDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePutDataByIdArgsDeprecated = reqMyServicePutDataById

func newReqMyServicePutDataById() *reqMyServicePutDataById {
    return (&reqMyServicePutDataById{}).setDefaults()
}

func (x *reqMyServicePutDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServicePutDataById) GetData() string {
    return x.Data
}

func (x *reqMyServicePutDataById) SetIdNonCompat(value int64) *reqMyServicePutDataById {
    x.Id = value
    return x
}

func (x *reqMyServicePutDataById) SetId(value int64) *reqMyServicePutDataById {
    x.Id = value
    return x
}

func (x *reqMyServicePutDataById) SetDataNonCompat(value string) *reqMyServicePutDataById {
    x.Data = value
    return x
}

func (x *reqMyServicePutDataById) SetData(value string) *reqMyServicePutDataById {
    x.Data = value
    return x
}

func (x *reqMyServicePutDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServicePutDataById) writeField2(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServicePutDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}

func (x *reqMyServicePutDataById) readField2(p thrift.Decoder) error {  // Data
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *reqMyServicePutDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePutDataById"); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePutDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePutDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePutDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePutDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePutDataById) setDefaults() *reqMyServicePutDataById {
    return x.
        SetIdNonCompat(0).
        SetDataNonCompat("")
}

type respMyServicePutDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePutDataById)(nil)
var _ thrift.WritableResult = (*respMyServicePutDataById)(nil)

// Deprecated: MyServicePutDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePutDataByIdResultDeprecated = respMyServicePutDataById

func newRespMyServicePutDataById() *respMyServicePutDataById {
    return (&respMyServicePutDataById{}).setDefaults()
}



func (x *respMyServicePutDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePutDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePutDataById"); err != nil {
        return thrift.PrependError("respMyServicePutDataById write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePutDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePutDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePutDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePutDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePutDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePutDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePutDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePutDataById) setDefaults() *respMyServicePutDataById {
    return x
}

type reqMyServiceLobDataById struct {
    Id int64 `thrift:"id,1" json:"id" db:"id"`
    Data string `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceLobDataById)(nil)

// Deprecated: MyServiceLobDataByIdArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceLobDataByIdArgsDeprecated = reqMyServiceLobDataById

func newReqMyServiceLobDataById() *reqMyServiceLobDataById {
    return (&reqMyServiceLobDataById{}).setDefaults()
}

func (x *reqMyServiceLobDataById) GetId() int64 {
    return x.Id
}

func (x *reqMyServiceLobDataById) GetData() string {
    return x.Data
}

func (x *reqMyServiceLobDataById) SetIdNonCompat(value int64) *reqMyServiceLobDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceLobDataById) SetId(value int64) *reqMyServiceLobDataById {
    x.Id = value
    return x
}

func (x *reqMyServiceLobDataById) SetDataNonCompat(value string) *reqMyServiceLobDataById {
    x.Data = value
    return x
}

func (x *reqMyServiceLobDataById) SetData(value string) *reqMyServiceLobDataById {
    x.Data = value
    return x
}

func (x *reqMyServiceLobDataById) writeField1(p thrift.Encoder) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field begin error: ", err)
    }

    item := x.Id
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) writeField2(p thrift.Encoder) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field begin error: ", err)
    }

    item := x.Data
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field end error: ", err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) readField1(p thrift.Decoder) error {  // Id
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Id = result
    return nil
}

func (x *reqMyServiceLobDataById) readField2(p thrift.Decoder) error {  // Data
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Data = result
    return nil
}



func (x *reqMyServiceLobDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceLobDataById"); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceLobDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceLobDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "id")):  // id
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "data")):  // data
            fieldReadErr = x.readField2(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceLobDataById read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceLobDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceLobDataById) setDefaults() *reqMyServiceLobDataById {
    return x.
        SetIdNonCompat(0).
        SetDataNonCompat("")
}

type respMyServiceLobDataById struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceLobDataById)(nil)
var _ thrift.WritableResult = (*respMyServiceLobDataById)(nil)

// Deprecated: MyServiceLobDataByIdResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceLobDataByIdResultDeprecated = respMyServiceLobDataById

func newRespMyServiceLobDataById() *respMyServiceLobDataById {
    return (&respMyServiceLobDataById{}).setDefaults()
}



func (x *respMyServiceLobDataById) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceLobDataById) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceLobDataById"); err != nil {
        return thrift.PrependError("respMyServiceLobDataById write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceLobDataById) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceLobDataById field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceLobDataById read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceLobDataById) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceLobDataById) setDefaults() *respMyServiceLobDataById {
    return x
}

type reqMyServiceGoDoNothing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServiceGoDoNothing)(nil)

// Deprecated: MyServiceGoDoNothingArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGoDoNothingArgsDeprecated = reqMyServiceGoDoNothing

func newReqMyServiceGoDoNothing() *reqMyServiceGoDoNothing {
    return (&reqMyServiceGoDoNothing{}).setDefaults()
}



func (x *reqMyServiceGoDoNothing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServiceGoDoNothing"); err != nil {
        return thrift.PrependError("reqMyServiceGoDoNothing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServiceGoDoNothing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGoDoNothing write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServiceGoDoNothing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServiceGoDoNothing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServiceGoDoNothing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServiceGoDoNothing read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServiceGoDoNothing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServiceGoDoNothing) setDefaults() *reqMyServiceGoDoNothing {
    return x
}

type respMyServiceGoDoNothing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServiceGoDoNothing)(nil)
var _ thrift.WritableResult = (*respMyServiceGoDoNothing)(nil)

// Deprecated: MyServiceGoDoNothingResultDeprecated is deprecated, since it is supposed to be internal.
type MyServiceGoDoNothingResultDeprecated = respMyServiceGoDoNothing

func newRespMyServiceGoDoNothing() *respMyServiceGoDoNothing {
    return (&respMyServiceGoDoNothing{}).setDefaults()
}



func (x *respMyServiceGoDoNothing) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServiceGoDoNothing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServiceGoDoNothing"); err != nil {
        return thrift.PrependError("respMyServiceGoDoNothing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServiceGoDoNothing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGoDoNothing write struct end error: ", err)
    }
    return nil
}

func (x *respMyServiceGoDoNothing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServiceGoDoNothing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServiceGoDoNothing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServiceGoDoNothing read struct end error: ", err)
    }

    return nil
}

func (x *respMyServiceGoDoNothing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServiceGoDoNothing) setDefaults() *respMyServiceGoDoNothing {
    return x
}

type reqMyServicePrioParentPing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePrioParentPing)(nil)

// Deprecated: MyServicePrioParentPingArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePrioParentPingArgsDeprecated = reqMyServicePrioParentPing

func newReqMyServicePrioParentPing() *reqMyServicePrioParentPing {
    return (&reqMyServicePrioParentPing{}).setDefaults()
}



func (x *reqMyServicePrioParentPing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePrioParentPing"); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPing write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePrioParentPing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePrioParentPing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPing read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePrioParentPing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePrioParentPing) setDefaults() *reqMyServicePrioParentPing {
    return x
}

type respMyServicePrioParentPing struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePrioParentPing)(nil)
var _ thrift.WritableResult = (*respMyServicePrioParentPing)(nil)

// Deprecated: MyServicePrioParentPingResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePrioParentPingResultDeprecated = respMyServicePrioParentPing

func newRespMyServicePrioParentPing() *respMyServicePrioParentPing {
    return (&respMyServicePrioParentPing{}).setDefaults()
}



func (x *respMyServicePrioParentPing) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePrioParentPing) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePrioParentPing"); err != nil {
        return thrift.PrependError("respMyServicePrioParentPing write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPing write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPing write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePrioParentPing) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPing read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePrioParentPing field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPing read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePrioParentPing) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePrioParentPing) setDefaults() *respMyServicePrioParentPing {
    return x
}

type reqMyServicePrioParentPong struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePrioParentPong)(nil)

// Deprecated: MyServicePrioParentPongArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePrioParentPongArgsDeprecated = reqMyServicePrioParentPong

func newReqMyServicePrioParentPong() *reqMyServicePrioParentPong {
    return (&reqMyServicePrioParentPong{}).setDefaults()
}



func (x *reqMyServicePrioParentPong) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePrioParentPong"); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPong write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPong write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPong write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePrioParentPong) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPong read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePrioParentPong field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePrioParentPong read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePrioParentPong) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePrioParentPong) setDefaults() *reqMyServicePrioParentPong {
    return x
}

type respMyServicePrioParentPong struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePrioParentPong)(nil)
var _ thrift.WritableResult = (*respMyServicePrioParentPong)(nil)

// Deprecated: MyServicePrioParentPongResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePrioParentPongResultDeprecated = respMyServicePrioParentPong

func newRespMyServicePrioParentPong() *respMyServicePrioParentPong {
    return (&respMyServicePrioParentPong{}).setDefaults()
}



func (x *respMyServicePrioParentPong) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePrioParentPong) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePrioParentPong"); err != nil {
        return thrift.PrependError("respMyServicePrioParentPong write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPong write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPong write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePrioParentPong) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPong read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePrioParentPong field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePrioParentPong read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePrioParentPong) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePrioParentPong) setDefaults() *respMyServicePrioParentPong {
    return x
}

type reqMyServicePrioChildPang struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqMyServicePrioChildPang)(nil)

// Deprecated: MyServicePrioChildPangArgsDeprecated is deprecated, since it is supposed to be internal.
type MyServicePrioChildPangArgsDeprecated = reqMyServicePrioChildPang

func newReqMyServicePrioChildPang() *reqMyServicePrioChildPang {
    return (&reqMyServicePrioChildPang{}).setDefaults()
}



func (x *reqMyServicePrioChildPang) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqMyServicePrioChildPang"); err != nil {
        return thrift.PrependError("reqMyServicePrioChildPang write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqMyServicePrioChildPang write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePrioChildPang write struct end error: ", err)
    }
    return nil
}

func (x *reqMyServicePrioChildPang) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqMyServicePrioChildPang read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqMyServicePrioChildPang field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqMyServicePrioChildPang read struct end error: ", err)
    }

    return nil
}

func (x *reqMyServicePrioChildPang) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqMyServicePrioChildPang) setDefaults() *reqMyServicePrioChildPang {
    return x
}

type respMyServicePrioChildPang struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respMyServicePrioChildPang)(nil)
var _ thrift.WritableResult = (*respMyServicePrioChildPang)(nil)

// Deprecated: MyServicePrioChildPangResultDeprecated is deprecated, since it is supposed to be internal.
type MyServicePrioChildPangResultDeprecated = respMyServicePrioChildPang

func newRespMyServicePrioChildPang() *respMyServicePrioChildPang {
    return (&respMyServicePrioChildPang{}).setDefaults()
}



func (x *respMyServicePrioChildPang) Exception() thrift.WritableException {
    return nil
}

func (x *respMyServicePrioChildPang) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respMyServicePrioChildPang"); err != nil {
        return thrift.PrependError("respMyServicePrioChildPang write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respMyServicePrioChildPang write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePrioChildPang write struct end error: ", err)
    }
    return nil
}

func (x *respMyServicePrioChildPang) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respMyServicePrioChildPang read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respMyServicePrioChildPang field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respMyServicePrioChildPang read struct end error: ", err)
    }

    return nil
}

func (x *respMyServicePrioChildPang) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respMyServicePrioChildPang) setDefaults() *respMyServicePrioChildPang {
    return x
}

type reqBadServiceBar struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqBadServiceBar)(nil)

// Deprecated: BadServiceBarArgsDeprecated is deprecated, since it is supposed to be internal.
type BadServiceBarArgsDeprecated = reqBadServiceBar

func newReqBadServiceBar() *reqBadServiceBar {
    return (&reqBadServiceBar{}).setDefaults()
}



func (x *reqBadServiceBar) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqBadServiceBar"); err != nil {
        return thrift.PrependError("reqBadServiceBar write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqBadServiceBar write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqBadServiceBar write struct end error: ", err)
    }
    return nil
}

func (x *reqBadServiceBar) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqBadServiceBar read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqBadServiceBar field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqBadServiceBar read struct end error: ", err)
    }

    return nil
}

func (x *reqBadServiceBar) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqBadServiceBar) setDefaults() *reqBadServiceBar {
    return x
}

type respBadServiceBar struct {
    Success *int32 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respBadServiceBar)(nil)
var _ thrift.WritableResult = (*respBadServiceBar)(nil)

// Deprecated: BadServiceBarResultDeprecated is deprecated, since it is supposed to be internal.
type BadServiceBarResultDeprecated = respBadServiceBar

func newRespBadServiceBar() *respBadServiceBar {
    return (&respBadServiceBar{}).setDefaults()
}

func (x *respBadServiceBar) GetSuccess() int32 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respBadServiceBar) SetSuccessNonCompat(value int32) *respBadServiceBar {
    x.Success = &value
    return x
}

func (x *respBadServiceBar) SetSuccess(value *int32) *respBadServiceBar {
    x.Success = value
    return x
}

func (x *respBadServiceBar) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respBadServiceBar) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I32, 0); err != nil {
        return thrift.PrependError("respBadServiceBar write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respBadServiceBar write field end error: ", err)
    }
    return nil
}

func (x *respBadServiceBar) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respBadServiceBar) Exception() thrift.WritableException {
    return nil
}

func (x *respBadServiceBar) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respBadServiceBar"); err != nil {
        return thrift.PrependError("respBadServiceBar write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respBadServiceBar write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respBadServiceBar write struct end error: ", err)
    }
    return nil
}

func (x *respBadServiceBar) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respBadServiceBar read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respBadServiceBar field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respBadServiceBar read struct end error: ", err)
    }

    return nil
}

func (x *respBadServiceBar) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respBadServiceBar) setDefaults() *respBadServiceBar {
    return x
}

type reqFooBarBazServiceFooStructured struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqFooBarBazServiceFooStructured)(nil)

// Deprecated: FooBarBazServiceFooStructuredArgsDeprecated is deprecated, since it is supposed to be internal.
type FooBarBazServiceFooStructuredArgsDeprecated = reqFooBarBazServiceFooStructured

func newReqFooBarBazServiceFooStructured() *reqFooBarBazServiceFooStructured {
    return (&reqFooBarBazServiceFooStructured{}).setDefaults()
}



func (x *reqFooBarBazServiceFooStructured) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqFooBarBazServiceFooStructured"); err != nil {
        return thrift.PrependError("reqFooBarBazServiceFooStructured write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceFooStructured write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceFooStructured write struct end error: ", err)
    }
    return nil
}

func (x *reqFooBarBazServiceFooStructured) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceFooStructured read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqFooBarBazServiceFooStructured field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceFooStructured read struct end error: ", err)
    }

    return nil
}

func (x *reqFooBarBazServiceFooStructured) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqFooBarBazServiceFooStructured) setDefaults() *reqFooBarBazServiceFooStructured {
    return x
}

type respFooBarBazServiceFooStructured struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respFooBarBazServiceFooStructured)(nil)
var _ thrift.WritableResult = (*respFooBarBazServiceFooStructured)(nil)

// Deprecated: FooBarBazServiceFooStructuredResultDeprecated is deprecated, since it is supposed to be internal.
type FooBarBazServiceFooStructuredResultDeprecated = respFooBarBazServiceFooStructured

func newRespFooBarBazServiceFooStructured() *respFooBarBazServiceFooStructured {
    return (&respFooBarBazServiceFooStructured{}).setDefaults()
}



func (x *respFooBarBazServiceFooStructured) Exception() thrift.WritableException {
    return nil
}

func (x *respFooBarBazServiceFooStructured) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respFooBarBazServiceFooStructured"); err != nil {
        return thrift.PrependError("respFooBarBazServiceFooStructured write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respFooBarBazServiceFooStructured write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respFooBarBazServiceFooStructured write struct end error: ", err)
    }
    return nil
}

func (x *respFooBarBazServiceFooStructured) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respFooBarBazServiceFooStructured read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respFooBarBazServiceFooStructured field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respFooBarBazServiceFooStructured read struct end error: ", err)
    }

    return nil
}

func (x *respFooBarBazServiceFooStructured) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respFooBarBazServiceFooStructured) setDefaults() *respFooBarBazServiceFooStructured {
    return x
}

type reqFooBarBazServiceBarNonStructured struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqFooBarBazServiceBarNonStructured)(nil)

// Deprecated: FooBarBazServiceBarNonStructuredArgsDeprecated is deprecated, since it is supposed to be internal.
type FooBarBazServiceBarNonStructuredArgsDeprecated = reqFooBarBazServiceBarNonStructured

func newReqFooBarBazServiceBarNonStructured() *reqFooBarBazServiceBarNonStructured {
    return (&reqFooBarBazServiceBarNonStructured{}).setDefaults()
}



func (x *reqFooBarBazServiceBarNonStructured) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqFooBarBazServiceBarNonStructured"); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBarNonStructured write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBarNonStructured write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBarNonStructured write struct end error: ", err)
    }
    return nil
}

func (x *reqFooBarBazServiceBarNonStructured) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBarNonStructured read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqFooBarBazServiceBarNonStructured field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBarNonStructured read struct end error: ", err)
    }

    return nil
}

func (x *reqFooBarBazServiceBarNonStructured) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqFooBarBazServiceBarNonStructured) setDefaults() *reqFooBarBazServiceBarNonStructured {
    return x
}

type respFooBarBazServiceBarNonStructured struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respFooBarBazServiceBarNonStructured)(nil)
var _ thrift.WritableResult = (*respFooBarBazServiceBarNonStructured)(nil)

// Deprecated: FooBarBazServiceBarNonStructuredResultDeprecated is deprecated, since it is supposed to be internal.
type FooBarBazServiceBarNonStructuredResultDeprecated = respFooBarBazServiceBarNonStructured

func newRespFooBarBazServiceBarNonStructured() *respFooBarBazServiceBarNonStructured {
    return (&respFooBarBazServiceBarNonStructured{}).setDefaults()
}



func (x *respFooBarBazServiceBarNonStructured) Exception() thrift.WritableException {
    return nil
}

func (x *respFooBarBazServiceBarNonStructured) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respFooBarBazServiceBarNonStructured"); err != nil {
        return thrift.PrependError("respFooBarBazServiceBarNonStructured write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBarNonStructured write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBarNonStructured write struct end error: ", err)
    }
    return nil
}

func (x *respFooBarBazServiceBarNonStructured) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBarNonStructured read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respFooBarBazServiceBarNonStructured field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBarNonStructured read struct end error: ", err)
    }

    return nil
}

func (x *respFooBarBazServiceBarNonStructured) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respFooBarBazServiceBarNonStructured) setDefaults() *respFooBarBazServiceBarNonStructured {
    return x
}

type reqFooBarBazServiceBaz struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqFooBarBazServiceBaz)(nil)

// Deprecated: FooBarBazServiceBazArgsDeprecated is deprecated, since it is supposed to be internal.
type FooBarBazServiceBazArgsDeprecated = reqFooBarBazServiceBaz

func newReqFooBarBazServiceBaz() *reqFooBarBazServiceBaz {
    return (&reqFooBarBazServiceBaz{}).setDefaults()
}



func (x *reqFooBarBazServiceBaz) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqFooBarBazServiceBaz"); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBaz write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBaz write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBaz write struct end error: ", err)
    }
    return nil
}

func (x *reqFooBarBazServiceBaz) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBaz read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqFooBarBazServiceBaz field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqFooBarBazServiceBaz read struct end error: ", err)
    }

    return nil
}

func (x *reqFooBarBazServiceBaz) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqFooBarBazServiceBaz) setDefaults() *reqFooBarBazServiceBaz {
    return x
}

type respFooBarBazServiceBaz struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*respFooBarBazServiceBaz)(nil)
var _ thrift.WritableResult = (*respFooBarBazServiceBaz)(nil)

// Deprecated: FooBarBazServiceBazResultDeprecated is deprecated, since it is supposed to be internal.
type FooBarBazServiceBazResultDeprecated = respFooBarBazServiceBaz

func newRespFooBarBazServiceBaz() *respFooBarBazServiceBaz {
    return (&respFooBarBazServiceBaz{}).setDefaults()
}



func (x *respFooBarBazServiceBaz) Exception() thrift.WritableException {
    return nil
}

func (x *respFooBarBazServiceBaz) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respFooBarBazServiceBaz"); err != nil {
        return thrift.PrependError("respFooBarBazServiceBaz write struct begin error: ", err)
    }


    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBaz write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBaz write struct end error: ", err)
    }
    return nil
}

func (x *respFooBarBazServiceBaz) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBaz read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respFooBarBazServiceBaz field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respFooBarBazServiceBaz read struct end error: ", err)
    }

    return nil
}

func (x *respFooBarBazServiceBaz) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respFooBarBazServiceBaz) setDefaults() *respFooBarBazServiceBaz {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/compiler/test/fixtures/basic-annotations/src/module/MyStruct", func() any { return NewMyStruct() })

}
