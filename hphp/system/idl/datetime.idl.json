{
    "preamble": "#include <runtime\/base\/time\/timestamp.h>\n#include <runtime\/base\/time\/datetime.h>\n#include <runtime\/base\/time\/timezone.h>\n#include <runtime\/base\/time\/dateinterval.h>",
    "consts": [
    ],
    "funcs": [
        {
            "name": "checkdate",
            "desc": "Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if the date given is valid; otherwise returns FALSE."
            },
            "args": [
                {
                    "name": "month",
                    "type": "Int32",
                    "desc": "The month is between 1 and 12 inclusive."
                },
                {
                    "name": "day",
                    "type": "Int32",
                    "desc": "The day is within the allowed number of days for the given month. Leap years are taken into consideration."
                },
                {
                    "name": "year",
                    "type": "Int32",
                    "desc": "The year is between 1 and 32767 inclusive."
                }
            ]
        },
        {
            "name": "date_add",
            "flags": [
            ],
            "return": {
                "type": "Object"
            },
            "args": [
                {
                    "name": "datetime",
                    "type": "Object"
                },
                {
                    "name": "interval",
                    "type": "Object"
                }
            ]
        },
        {
            "name": "date_create_from_format",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a new DateTime instance or FALSE on failure."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String"
                },
                {
                    "name": "time",
                    "type": "String"
                },
                {
                    "name": "timezone",
                    "type": "Object",
                    "value": "null_object"
                }
            ]
        },
        {
            "name": "date_parse_from_format",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "format",
                    "type": "String"
                },
                {
                    "name": "date",
                    "type": "String"
                }
            ]
        },
        {
            "name": "date_create",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "time",
                    "type": "String",
                    "value": "null_string"
                },
                {
                    "name": "timezone",
                    "type": "Object",
                    "value": "null_object"
                }
            ]
        },
        {
            "name": "date_date_set",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                },
                {
                    "name": "year",
                    "type": "Int32"
                },
                {
                    "name": "month",
                    "type": "Int32"
                },
                {
                    "name": "day",
                    "type": "Int32"
                }
            ]
        },
        {
            "name": "date_default_timezone_get",
            "desc": "In order of preference, this function returns the default timezone by:\n\nReading the timezone set using the date_default_timezone_set() function (if any)\n\nReading the TZ environment variable (if non empty) (Prior to PHP 5.3.0)\n\nReading the value of the date.timezone ini option (if set)\n\nQuerying the host operating system (if supported and allowed by the OS)\n\nIf none of the above succeed, date_default_timezone_get() will return a default timezone of UTC.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns a string."
            },
            "args": [
            ]
        },
        {
            "name": "date_default_timezone_set",
            "desc": "date_default_timezone_set() sets the default timezone used by all date\/time functions.\n\nSince PHP 5.1.0 (when the date\/time functions were rewritten), every call to a date\/time function will generate a E_NOTICE if the timezone isn't valid, and\/or a E_WARNING message if using the system settings or the TZ environment variable.\n\nInstead of using this function to set the default timezone in your script, you can also use the INI setting date.timezone to set the default timezone.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "This function returns FALSE if the timezone_identifier isn't valid, or TRUE otherwise."
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "desc": "The timezone identifier, like UTC or Europe\/Lisbon. The list of valid identifiers is available in the List of Supported Timezones."
                }
            ]
        },
        {
            "name": "date_get_last_errors",
            "flags": [
            ],
            "return": {
                "type": "VariantVec"
            },
            "args": [
            ]
        },
        {
            "name": "date_interval_create_from_date_string",
            "flags": [
            ],
            "return": {
                "type": "Object"
            },
            "args": [
                {
                    "name": "time",
                    "type": "String"
                }
            ]
        },
        {
            "name": "date_interval_format",
            "flags": [
            ],
            "return": {
                "type": "String"
            },
            "args": [
                {
                    "name": "interval",
                    "type": "Object"
                },
                {
                    "name": "format_spec",
                    "type": "String"
                }
            ]
        },
        {
            "name": "date_isodate_set",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                },
                {
                    "name": "year",
                    "type": "Int32"
                },
                {
                    "name": "week",
                    "type": "Int32"
                },
                {
                    "name": "day",
                    "type": "Int32",
                    "value": "1"
                }
            ]
        },
        {
            "name": "date_modify",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                },
                {
                    "name": "modify",
                    "type": "String"
                }
            ]
        },
        {
            "name": "date_parse",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns array with information about the parsed date on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "date",
                    "type": "String",
                    "desc": "Date in format accepted by strtotime()."
                }
            ]
        },
        {
            "name": "date_sub",
            "flags": [
            ],
            "return": {
                "type": "Object"
            },
            "args": [
                {
                    "name": "datetime",
                    "type": "Object"
                },
                {
                    "name": "interval",
                    "type": "Object"
                }
            ]
        },
        {
            "name": "date_sun_info",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "Returns array on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "ts",
                    "type": "Int64",
                    "desc": "Timestamp."
                },
                {
                    "name": "latitude",
                    "type": "Double",
                    "desc": "Latitude in degrees."
                },
                {
                    "name": "longitude",
                    "type": "Double",
                    "desc": "Longitude in degrees."
                }
            ]
        },
        {
            "name": "date_sunrise",
            "desc": "date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.",
            "flags": [
              "ZendParamModeFalse"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the sunrise time in a specified format on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "desc": "The timestamp of the day from which the sunrise time is taken."
                },
                {
                    "name": "format",
                    "type": "Int32",
                    "value": "1",
                    "desc": "format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606"
                },
                {
                    "name": "latitude",
                    "type": "Double",
                    "value": "get_date_default_latitude()",
                    "desc": "Defaults to North, pass in a negative value for South. See also: date.default_latitude"
                },
                {
                    "name": "longitude",
                    "type": "Double",
                    "value": "get_date_default_longitude()",
                    "desc": "Defaults to East, pass in a negative value for West. See also: date.default_longitude"
                },
                {
                    "name": "zenith",
                    "type": "Double",
                    "value": "get_date_default_sunrise_zenith()",
                    "desc": "Default: date.sunrise_zenith"
                },
                {
                    "name": "gmt_offset",
                    "type": "Double",
                    "value": "get_date_default_gmt_offset()",
                    "desc": "Specified in hours."
                }
            ]
        },
        {
            "name": "date_sunset",
            "desc": "date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.",
            "flags": [
              "ZendParamModeFalse"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the sunset time in a specified format on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "desc": "The timestamp of the day from which the sunset time is taken."
                },
                {
                    "name": "format",
                    "type": "Int32",
                    "value": "1",
                    "desc": "format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606"
                },
                {
                    "name": "latitude",
                    "type": "Double",
                    "value": "get_date_default_latitude()",
                    "desc": "Defaults to North, pass in a negative value for South. See also: date.default_latitude"
                },
                {
                    "name": "longitude",
                    "type": "Double",
                    "value": "get_date_default_longitude()",
                    "desc": "Defaults to East, pass in a negative value for West. See also: date.default_longitude"
                },
                {
                    "name": "zenith",
                    "type": "Double",
                    "value": "get_date_default_sunset_zenith()",
                    "desc": "Default: date.sunset_zenith"
                },
                {
                    "name": "gmt_offset",
                    "type": "Double",
                    "value": "get_date_default_gmt_offset()",
                    "desc": "Specified in hours."
                }
            ]
        },
        {
            "name": "date_time_set",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                },
                {
                    "name": "hour",
                    "type": "Int32"
                },
                {
                    "name": "minute",
                    "type": "Int32"
                },
                {
                    "name": "second",
                    "type": "Int32",
                    "value": "0"
                }
            ]
        },
        {
            "name": "date_timestamp_set",
            "flags": [
            ],
            "return": {
                "type": "Object"
            },
            "args": [
                {
                    "name": "datetime",
                    "type": "Object"
                },
                {
                    "name": "timestamp",
                    "type": "Int64"
                }
            ]
        },
        {
            "name": "date_timezone_set",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                },
                {
                    "name": "timezone",
                    "type": "Object"
                }
            ]
        },
        {
            "name": "date",
            "desc": "Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a formatted date string. If a non-numeric value is used for timestamp, FALSE is returned and an E_WARNING level error is emitted."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String"
                },
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()"
                }
            ]
        },
        {
            "name": "getdate",
            "desc": "Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap"
            },
            "args": [
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()",
                    "desc": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."
                }
            ]
        },
        {
            "name": "gettimeofday",
            "desc": "This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "By default an array is returned. If return_float is set, then a float is returned.\n\nArray keys: \"sec\" - seconds since the Unix Epoch \"usec\" - microseconds \"minuteswest\" - minutes west of Greenwich \"dsttime\" - type of dst correction"
            },
            "args": [
                {
                    "name": "return_float",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When set to TRUE, a float instead of an array is returned."
                }
            ]
        },
        {
            "name": "gmdate",
            "desc": "Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a formatted date string. If a non-numeric value is used for timestamp, FALSE is returned and an E_WARNING level error is emitted."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String",
                    "desc": "The format of the outputted date string. See the formatting options for the date() function."
                },
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()",
                    "desc": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."
                }
            ]
        },
        {
            "name": "gmmktime",
            "desc": "Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used.\n\nLike mktime(), arguments may be left out in order from right to left, with any omitted arguments being set to the current corresponding GMT value.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a integer Unix timestamp."
            },
            "args": [
                {
                    "name": "hour",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The hour"
                },
                {
                    "name": "minute",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The minute"
                },
                {
                    "name": "second",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The second"
                },
                {
                    "name": "month",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The month"
                },
                {
                    "name": "day",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The day"
                },
                {
                    "name": "year",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The year"
                }
            ]
        },
        {
            "name": "gmstrftime",
            "desc": "Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints \"Dec 31 1998 20:00:00\", while the second prints \"Jan 01 1999 01:00:00\".",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given. Month and weekday names and other language dependent strings respect the current locale set with setlocale()."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String",
                    "desc": "See description in strftime()."
                },
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()",
                    "desc": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."
                }
            ]
        },
        {
            "name": "idate",
            "desc": "Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().\n\nUnlike the function date(), idate() accepts just one char in the format parameter.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an integer.\n\nAs idate() always returns an integer and as they can't start with a \"0\", idate() may return fewer digits than you would expect. See the example below."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String",
                    "desc": "The following characters are recognized in the format parameter string format character Description B Swatch Beat\/Internet Time d Day of the month h Hour (12 hour format) H Hour (24 hour format) i Minutes I (uppercase i) returns 1 if DST is activated, 0 otherwise L (uppercase l) returns 1 for leap year, 0 otherwise m Month number s Seconds t Days in current month U Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC - this is the same as time() w Day of the week (0 on Sunday) W ISO-8601 week number of year, weeks starting on Monday y Year (1 or 2 digits - check note below) Y Year (4 digits) z Day of the year Z Timezone offset in seconds"
                },
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()",
                    "desc": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."
                }
            ]
        },
        {
            "name": "localtime",
            "desc": "The localtime() function returns an array identical to that of the structure returned by the C function call.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap"
            },
            "args": [
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()",
                    "desc": "The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."
                },
                {
                    "name": "is_associative",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "If set to FALSE or not supplied then the array is returned as a regular, numerically indexed array. If the argument is set to TRUE then localtime() returns an associative array containing all the different elements of the structure returned by the C function call to localtime. The names of the different keys of the associative array are as follows:\n\n\"tm_sec\" - seconds \"tm_min\" - minutes \"tm_hour\" - hour \"tm_mday\" - day of the month Months are from 0 (Jan) to 11 (Dec) and days of the week are from 0 (Sun) to 6 (Sat). \"tm_mon\" - month of the year, starting with 0 for January \"tm_year\" - Years since 1900 \"tm_wday\" - Day of the week \"tm_yday\" - Day of the year \"tm_isdst\" - Is daylight savings time in effect"
                }
            ]
        },
        {
            "name": "microtime",
            "desc": "microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "get_as_float",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "When called without the optional argument, this function returns the string \"msec sec\" where sec is the current time measured in the number of seconds since the Unix Epoch (0:00:00 January 1, 1970 GMT), and msec is the microseconds part. Both portions of the string are returned in units of seconds.\n\nIf the optional get_as_float is set to TRUE then a float (in seconds) is returned."
                }
            ]
        },
        {
            "name": "mktime",
            "desc": "Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.\n\nArguments may be left out in order from right to left; any arguments thus omitted will be set to the current value according to the local date and time.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "mktime() returns the Unix timestamp of the arguments given. If the arguments are invalid, the function returns FALSE (before PHP 5.1 it returned -1)."
            },
            "args": [
                {
                    "name": "hour",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The number of the hour."
                },
                {
                    "name": "minute",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The number of the minute."
                },
                {
                    "name": "second",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The number of seconds past the minute."
                },
                {
                    "name": "month",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The number of the month."
                },
                {
                    "name": "day",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The number of the day."
                },
                {
                    "name": "year",
                    "type": "Int32",
                    "value": "INT_MAX",
                    "desc": "The number of the year, may be a two or four digit value, with values between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. On systems where time_t is a 32bit signed integer, as most common today, the valid range for year is somewhere between 1901 and 2038. However, before PHP 5.1.0 this range was limited from 1970 to 2038 on some systems (e.g. Windows)."
                }
            ]
        },
        {
            "name": "strftime",
            "desc": "Format the time and\/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale().\n\nNot all conversion specifiers may be supported by your C library, in which case they will not be supported by PHP's strftime(). Additionally, not all platforms support negative timestamps, so your date range may be limited to no earlier than the Unix epoch. This means that %e, %T, %R and, %D (and possibly others) - as well as dates prior to Jan 1, 1970 - will not work on Windows, some Linux distributions, and a few other operating systems. For Windows systems, a complete overview of supported conversion specifiers can be found at MSDN.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a string formatted according format using the given timestamp or the current local time if no timestamp is given. Month and weekday names and other language-dependent strings respect the current locale set with setlocale()."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String"
                },
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()"
                }
            ]
        },
        {
            "name": "strptime",
            "desc": "strptime() returns an array with the date parsed, or FALSE on error.\n\nMonth and weekday names and other language dependent strings respect the current locale set with setlocale() (LC_TIME).",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an array or FALSE on failure.\n\nThe following parameters are returned in the array parameters Description \"tm_sec\" Seconds after the minute (0-61) \"tm_min\" Minutes after the hour (0-59) \"tm_hour\" Hour since midnight (0-23) \"tm_mday\" Day of the month (1-31) \"tm_mon\" Months since January (0-11) \"tm_year\" Years since 1900 \"tm_wday\" Days since Sunday (0-6) \"tm_yday\" Days since January 1 (0-365) \"unparsed\" the date part which was not recognized using the specified format"
            },
            "args": [
                {
                    "name": "date",
                    "type": "String",
                    "desc": "The string to parse (e.g. returned from strftime())."
                },
                {
                    "name": "format",
                    "type": "String",
                    "desc": "The format used in date (e.g. the same as used in strftime()). Note that some of the format options available to strftime() may not have any effect within strptime(); the exact subset that are supported will vary based on the operating system and C library in use.\n\nFor more information about the format options, read the strftime() page."
                }
            ]
        },
        {
            "name": "strtotime",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0, this function would return -1 on failure."
            },
            "args": [
                {
                    "name": "input",
                    "type": "String",
                    "desc": "Date and Time Formats."
                },
                {
                    "name": "timestamp",
                    "type": "Int64",
                    "value": "TimeStamp::Current()",
                    "desc": "The timestamp which is used as a base for the calculation of relative dates."
                }
            ]
        },
        {
            "name": "time",
            "desc": "Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).",
            "flags": [
            ],
            "return": {
                "type": "Int64"
            },
            "args": [
            ]
        },
        {
            "name": "timezone_abbreviations_list",
            "flags": [
            ],
            "return": {
                "type": "StringVec"
            },
            "args": [
            ]
        },
        {
            "name": "timezone_identifiers_list",
            "flags": [
            ],
            "return": {
                "type": "StringVec"
            },
            "args": [
            ]
        },
        {
            "name": "timezone_location_get",
            "flags": [
            ],
            "return": {
                "type": "VariantVec"
            },
            "args": [
                {
                    "name": "timezone",
                    "type": "Object"
                }
            ]
        },
        {
            "name": "timezone_name_from_abbr",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns time zone name on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "abbr",
                    "type": "String",
                    "desc": "Time zone abbreviation."
                },
                {
                    "name": "gmtoffset",
                    "type": "Int32",
                    "value": "-1",
                    "desc": "Offset from GMT in seconds. Defaults to -1 which means that first found time zone corresponding to abbr is returned. Otherwise exact offset is searched and only if not found then the first time zone with any offset is returned."
                },
                {
                    "name": "isdst",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "Daylight saving time indicator. Defaults to -1, which means that whether the time zone has daylight saving or not is not taken into consideration when searching. If this is set to 1, then the gmtOffset is assumed to be an offset with daylight saving in effect; if 0, then gmtOffset is assumed to be an offset without daylight saving in effect. If abbr doesn't exist then the time zone is searched solely by the gmtOffset and isdst."
                }
            ]
        },
        {
            "name": "timezone_name_get",
            "flags": [
            ],
            "return": {
                "type": "String"
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                }
            ]
        },
        {
            "name": "timezone_open",
            "flags": [
            ],
            "return": {
                "type": "Object"
            },
            "args": [
                {
                    "name": "timezone",
                    "type": "String"
                }
            ]
        },
        {
            "name": "timezone_transitions_get",
            "flags": [
            ],
            "return": {
                "type": "VariantVec"
            },
            "args": [
                {
                    "name": "object",
                    "type": "Object"
                }
            ]
        },
        {
            "name": "timezone_version_get",
            "flags": [
            ],
            "return": {
                "type": "String"
            },
            "args": [
            ]
        }
    ],
    "classes": [
        {
            "name": "DateTime",
            "desc": "Representation of date and time.",
            "flags": [
                "NoDefaultSweep",
                "IsCppSerializable"
            ],
            "ifaces": [
                "DateTimeInterface"
            ],
            "footer": "\n private:\n  SmartObject<DateTime> m_dt;\n public:\n  virtual ObjectData *clone();",
            "funcs": [
                {
                    "name": "add",
                    "desc": "Add an interval to a datetime object",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the DateTime object for method chaining"
                    },
                    "args": [
                        {
                            "name": "interval",
                            "type": "Object",
                            "desc": "DateInterval object containing the time to add."
                        }
                    ]
                },
                {
                    "name": "__construct",
                    "flags": [
                    ],
                    "return": {
                        "type": null
                    },
                    "args": [
                        {
                            "name": "time",
                            "type": "String",
                            "value": "\"now\""
                        },
                        {
                            "name": "timezone",
                            "type": "Object",
                            "value": "null_object"
                        }
                    ]
                },
                {
                    "name": "createFromFormat",
                    "desc": "Parse a date according to a format and create a DateTime object",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a new DateTime instance or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "format",
                            "type": "String",
                            "desc": "DateTime format specifier"
                        },
                        {
                            "name": "time",
                            "type": "String",
                            "desc": "Date and time to parse"
                        },
                        {
                            "name": "timezone",
                            "type": "Object",
                            "desc": "DateTimeZone for the given time",
                            "value": "null_object"
                        }
                    ]
                },
                {
                    "name": "diff",
                    "desc": "Find the interval between two DateTime objects",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns a DateInterval object representing the distance between two times"
                    },
                    "args": [
                        {
                            "name": "datetime2",
                            "type": "Object",
                            "desc": "DateTime object to compare agains"
                        },
                        {
                            "name": "absolute",
                            "type": "Boolean",
                            "desc": "Whether to return absolute difference",
                            "value": "false"
                        }
                    ]
                },
                {
                    "name": "format",
                    "desc": "Procedural style string date_format ( DateTime $object , string $format ) Returns date formatted according to given format.",
                    "flags": [
                    ],
                    "return": {
                        "type": "String",
                        "desc": "Returns the formatted date string on success or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "format",
                            "type": "String",
                            "desc": "DateTime object returned by date_create()"
                        }
                    ]
                },
                {
                    "name": "getLastErrors",
                    "desc": "Returns the last errors encountered by the datetime extension",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "VariantVec",
                        "desc": "Vector of error messages"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getOffset",
                    "desc": "Procedural style int date_offset_get ( DateTime $object ) Returns the timezone offset.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Int64",
                        "desc": "Returns the timezone offset in seconds from UTC on success or FALSE on failure."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getTimestamp",
                    "desc": "Returns the unix timestamp representing the date.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Int64",
                        "desc": "Epoch representing the datetime object"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getTimezone",
                    "desc": "Procedural style DateTimeZone date_timezone_get ( DateTime $object ) Return time zone relative to given DateTime.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Returns a DateTimeZone object on success or FALSE on failure."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "modify",
                    "desc": "Procedural style DateTime date_modify ( DateTime $object , string $modify ) Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the modified DateTime object or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "modify",
                            "type": "String",
                            "desc": "DateTime object returned by date_create(). The function modifies this object."
                        }
                    ]
                },
                {
                    "name": "setDate",
                    "desc": "Procedural style DateTime date_date_set ( DateTime $object , int $year , int $month , int $day ) Resets the current date of the DateTime object to a different date.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the modified DateTime object or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "year",
                            "type": "Int64",
                            "desc": "DateTime object returned by date_create(). The function modifies this object."
                        },
                        {
                            "name": "month",
                            "type": "Int64",
                            "desc": "Year of the date."
                        },
                        {
                            "name": "day",
                            "type": "Int64",
                            "desc": "Month of the date."
                        }
                    ]
                },
                {
                    "name": "setISODate",
                    "desc": "Procedural style DateTime date_isodate_set ( DateTime $object , int $year , int $week [, int $day = 1 ] ) Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the modified DateTime object or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "year",
                            "type": "Int64",
                            "desc": "DateTime object returned by date_create(). The function modifies this object."
                        },
                        {
                            "name": "week",
                            "type": "Int64",
                            "desc": "Year of the date."
                        },
                        {
                            "name": "day",
                            "type": "Int64",
                            "value": "1",
                            "desc": "Week of the date."
                        }
                    ]
                },
                {
                    "name": "setTime",
                    "desc": "Procedural style DateTime date_time_set ( DateTime $object , int $hour , int $minute [, int $second = 0 ] ) Resets the current time of the DateTime object to a different time.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the modified DateTime object or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "hour",
                            "type": "Int64",
                            "desc": "DateTime object returned by date_create(). The function modifies this object."
                        },
                        {
                            "name": "minute",
                            "type": "Int64",
                            "desc": "Hour of the time."
                        },
                        {
                            "name": "second",
                            "type": "Int64",
                            "value": "0",
                            "desc": "Minute of the time."
                        }
                    ]
                },
                {
                    "name": "setTimestamp",
                    "desc": "Set the DateTime object according to the timestamp provided",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the DateTime object for method chaining"
                    },
                    "args": [
                        {
                            "name": "unixtimestamp",
                            "type": "Int64",
                            "desc": "Unix timestamp to update the DateTime object to."
                        }
                    ]
                },
                {
                    "name": "setTimezone",
                    "desc": "Procedural style DateTime date_timezone_set ( DateTime $object , DateTimeZone $timezone )",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the modified DateTime object or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "timezone",
                            "type": "Object",
                            "desc": "DateTime object returned by date_create(). The function modifies this object."
                        }
                    ]
                },
                {
                    "name": "sub",
                    "desc": "Subtract an interval from a datetime object",
                    "flags": [
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns the DateTime object for method chaining"
                    },
                    "args": [
                        {
                            "name": "interval",
                            "type": "Object",
                            "desc": "DateInterval object containing the time to subtract."
                        }
                    ]
                },
                {
                    "name": "__sleep",
                    "flags": [
                    ],
                    "return": {
                        "type": "StringVec"
                    },
                    "args": [
                    ]
                },
                {
                    "name": "__wakeup",
                    "flags": [
                    ],
                    "return": {
                        "type": null
                    },
                    "args": [
                    ]
                }
            ],
            "consts": [
                {
                    "name": "ATOM",
                    "type": "String"
                },
                {
                    "name": "COOKIE",
                    "type": "String"
                },
                {
                    "name": "ISO8601",
                    "type": "String"
                },
                {
                    "name": "RFC822",
                    "type": "String"
                },
                {
                    "name": "RFC850",
                    "type": "String"
                },
                {
                    "name": "RFC1036",
                    "type": "String"
                },
                {
                    "name": "RFC1123",
                    "type": "String"
                },
                {
                    "name": "RFC2822",
                    "type": "String"
                },
                {
                    "name": "RFC3339",
                    "type": "String"
                },
                {
                    "name": "RSS",
                    "type": "String"
                },
                {
                    "name": "W3C",
                    "type": "String"
                }
            ]
        },
        {
            "name": "DateTimeZone",
            "desc": "Representation of time zone.",
            "flags": [
                "NoDefaultSweep"
            ],
            "footer": "\n  \/\/ Helper for TimeZone -> c_DateTimeZone conversion\n  public: static Object wrap(SmartObject<TimeZone> tz) {\n    c_DateTimeZone *ctz = NEWOBJ(c_DateTimeZone)();\n    Object ret(ctz);\n    ctz->m_tz = tz;\n    return ret;\n  }\n\n  \/\/ Helper for c_DateTimeZone -> TimeZone conversion\n  public: static SmartObject<TimeZone> unwrap(CObjRef timezone) {\n    SmartObject<c_DateTimeZone> ctz = timezone.getTyped<c_DateTimeZone>(true);\n    if (ctz.get() == NULL)\n      return SmartObject<TimeZone>();\n    return ctz->m_tz;\n  }\n\n private:\n  SmartObject<TimeZone> m_tz;\n public:\n  virtual ObjectData *clone();",
            "funcs": [
                {
                    "name": "__construct",
                    "flags": [
                    ],
                    "return": {
                        "type": null
                    },
                    "args": [
                        {
                            "name": "timezone",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "getLocation",
                    "desc": "Returns location information for a timezone",
                    "flags": [
                    ],
                    "return": {
                        "type": "VariantVec",
                        "desc": "Array containing location information about timezone."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getName",
                    "desc": "Procedural style string timezone_name_get ( void ) Returns the name of the timezone.",
                    "flags": [
                    ],
                    "return": {
                        "type": "String",
                        "desc": "One of timezones."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "getOffset",
                    "desc": "Procedural style int timezone_offset_get ( DateTimeZone $object , DateTime $datetime ) This function returns the offset to GMT for the date\/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.",
                    "flags": [
                    ],
                    "return": {
                        "type": "Int64",
                        "desc": "Returns time zone offset in seconds on success or FALSE on failure."
                    },
                    "args": [
                        {
                            "name": "datetime",
                            "type": "Object",
                            "desc": "DateTimeZone object returned by timezone_open()"
                        }
                    ]
                },
                {
                    "name": "getTransitions",
                    "desc": "Procedural style array timezone_transitions_get ( DateTimeZone $object [, int $timestamp_begin [, int $timestamp_end ]] )",
                    "flags": [
                    ],
                    "return": {
                        "type": "VariantMap",
                        "desc": "Returns numerically indexed array containing associative array with all transitions on success or FALSE on failure."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "listAbbreviations",
                    "desc": "Procedural style array timezone_abbreviations_list ( void )",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "VariantMap",
                        "desc": "Returns array on success or FALSE on failure."
                    },
                    "args": [
                    ]
                },
                {
                    "name": "listIdentifiers",
                    "desc": "Procedural style array timezone_identifiers_list ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "VariantMap",
                        "desc": "Returns array on success or FALSE on failure."
                    },
                    "args": [
                    ]
                }
            ],
            "consts": [
                {
                    "name": "AFRICA",
                    "type": "Int64"
                },
                {
                    "name": "AMERICA",
                    "type": "Int64"
                },
                {
                    "name": "ANTARCTICA",
                    "type": "Int64"
                },
                {
                    "name": "ARCTIC",
                    "type": "Int64"
                },
                {
                    "name": "ASIA",
                    "type": "Int64"
                },
                {
                    "name": "ATLANTIC",
                    "type": "Int64"
                },
                {
                    "name": "AUSTRALIA",
                    "type": "Int64"
                },
                {
                    "name": "EUROPE",
                    "type": "Int64"
                },
                {
                    "name": "INDIAN",
                    "type": "Int64"
                },
                {
                    "name": "PACIFIC",
                    "type": "Int64"
                },
                {
                    "name": "UTC",
                    "type": "Int64"
                },
                {
                    "name": "ALL",
                    "type": "Int64"
                },
                {
                    "name": "ALL_WITH_BC",
                    "type": "Int64"
                },
                {
                    "name": "PER_COUNTRY",
                    "type": "Int64"
                }
            ]
        },
        {
            "name": "DateInterval",
            "desc": "Represents a date interval.",
            "flags": [
                "NoDefaultSweep"
            ],
            "footer": "\n  public: static Object wrap(SmartObject<DateInterval> di) {\n    c_DateInterval *cdi = NEWOBJ(c_DateInterval)();\n    Object ret(cdi);\n    cdi->m_di = di;\n    return ret;\n  }\n\n  public: static SmartObject<DateInterval> unwrap(CObjRef dateinterval) {\n    SmartObject<c_DateInterval> cdi = dateinterval.getTyped<c_DateInterval>(true);\n    if (cdi.get() == NULL)\n      return SmartObject<DateInterval>();\n    return cdi->m_di;\n  }\n\n private:\n  SmartObject<DateInterval> m_di;\n public:\n  virtual ObjectData *clone();",
            "funcs": [
                {
                    "name": "__construct",
                    "desc": "Creates a new DateInterval object",
                    "flags": [
                    ],
                    "return": {
                        "type": null
                    },
                    "args": [
                        {
                            "name": "interval_spec",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "__get",
                    "desc": "Retreives interval partials (y, m, d, etc...)",
                    "flags": [
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Number of years, months, days, hours, minutes, seconds, or total days for DateInterval, or true\/false for date inversion."
                    },
                    "args": [
                        {
                            "name": "member",
                            "type": "Variant",
                            "desc": "One of 'y', 'm', 'd', 'h', 'i', 's', 'invert', or 'days'.  All other vales will return null and throw undefined property notice."
                        }
                    ]
                },
                {
                    "name": "__set",
                    "desc": "Sets interval partials (y, m, d, etc...)",
                    "flags": [
                    ],
                    "return": {
                        "type": "Variant",
                        "desc": "Always returns NULL."
                    },
                    "args": [
                        {
                            "name": "member",
                            "type": "Variant",
                            "desc": "One of 'y', 'm', 'd', 'h', 'i', 's', 'invert', or 'days'.  All other vales will throw undefined property notice and ignore value."
                        },
                        {
                            "name": "value",
                            "type": "Variant",
                            "desc": "Either a boolean for 'invert', or a number."
                        }
                    ]
                },
                {
                    "name": "createFromDateString",
                    "desc": "Sets up a DateInterval from the relative parts of the string",
                    "flags": [
                        "IsStatic"
                    ],
                    "return": {
                        "type": "Object",
                        "desc": "Returns a new DateInterval instance."
                    },
                    "args": [
                        {
                            "name": "time",
                            "type": "String",
                            "desc": "A date with relative parts. Specifically, the relative formats supported by the parser used for strtotime() and DateTime will be used to construct the DateInterval."
                        }
                    ]
                },
                {
                    "name": "format",
                    "desc": "Formats the interval",
                    "flags": [
                    ],
                    "return": {
                        "type": "String",
                        "desc": "Returns the formatted interval."
                    },
                    "args": [
                        {
                            "name": "format",
                            "type": "String",
                            "desc": "DateInterval format specifier."
                        }
                    ]
                }
            ],
            "consts": [
            ]
        }
    ]
}
