/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

#include <thrift/lib/cpp2/type/Tag.h>


namespace apache {
namespace thrift {
namespace tag {
struct anInteger;
struct aString;
struct opt_value;
struct value;
struct req_value;
struct opt_enum_value;
struct enum_value;
struct req_enum_value;
struct opt_str_value;
struct str_value;
struct req_str_value;
struct opt_ref;
struct ref;
struct req_ref;
struct u;
struct aDouble;
struct f;
struct mes;
struct list_ref;
struct set_ref;
struct map_ref;
struct list_ref_unique;
struct set_ref_shared;
struct list_ref_shared_const;
struct opt_shared_const;
struct shared_const;
struct req_shared_const;
struct def_field;
struct opt_field;
struct req_field;
struct a;
struct b;
struct c;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct opt_field;
struct req_field;
struct def_field;
struct def_unique_string_ref;
struct def_shared_string_ref;
struct def_shared_string_const_ref;
struct unique_string_ref;
struct shared_string_ref;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_anInteger
#define APACHE_THRIFT_ACCESSOR_anInteger
APACHE_THRIFT_DEFINE_ACCESSOR(anInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aString
#define APACHE_THRIFT_ACCESSOR_aString
APACHE_THRIFT_DEFINE_ACCESSOR(aString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_value
#define APACHE_THRIFT_ACCESSOR_opt_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_value
#define APACHE_THRIFT_ACCESSOR_req_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_enum_value
#define APACHE_THRIFT_ACCESSOR_opt_enum_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_enum_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_value
#define APACHE_THRIFT_ACCESSOR_enum_value
APACHE_THRIFT_DEFINE_ACCESSOR(enum_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_enum_value
#define APACHE_THRIFT_ACCESSOR_req_enum_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_enum_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_str_value
#define APACHE_THRIFT_ACCESSOR_opt_str_value
APACHE_THRIFT_DEFINE_ACCESSOR(opt_str_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_str_value
#define APACHE_THRIFT_ACCESSOR_str_value
APACHE_THRIFT_DEFINE_ACCESSOR(str_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_str_value
#define APACHE_THRIFT_ACCESSOR_req_str_value
APACHE_THRIFT_DEFINE_ACCESSOR(req_str_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_ref
#define APACHE_THRIFT_ACCESSOR_opt_ref
APACHE_THRIFT_DEFINE_ACCESSOR(opt_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ref
#define APACHE_THRIFT_ACCESSOR_ref
APACHE_THRIFT_DEFINE_ACCESSOR(ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_ref
#define APACHE_THRIFT_ACCESSOR_req_ref
APACHE_THRIFT_DEFINE_ACCESSOR(req_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_u
#define APACHE_THRIFT_ACCESSOR_u
APACHE_THRIFT_DEFINE_ACCESSOR(u);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aDouble
#define APACHE_THRIFT_ACCESSOR_aDouble
APACHE_THRIFT_DEFINE_ACCESSOR(aDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_f
#define APACHE_THRIFT_ACCESSOR_f
APACHE_THRIFT_DEFINE_ACCESSOR(f);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mes
#define APACHE_THRIFT_ACCESSOR_mes
APACHE_THRIFT_DEFINE_ACCESSOR(mes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref
#define APACHE_THRIFT_ACCESSOR_list_ref
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_ref
#define APACHE_THRIFT_ACCESSOR_set_ref
APACHE_THRIFT_DEFINE_ACCESSOR(set_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_ref
#define APACHE_THRIFT_ACCESSOR_map_ref
APACHE_THRIFT_DEFINE_ACCESSOR(map_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref_unique
#define APACHE_THRIFT_ACCESSOR_list_ref_unique
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref_unique);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_ref_shared
#define APACHE_THRIFT_ACCESSOR_set_ref_shared
APACHE_THRIFT_DEFINE_ACCESSOR(set_ref_shared);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_ref_shared_const
#define APACHE_THRIFT_ACCESSOR_list_ref_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(list_ref_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_const
#define APACHE_THRIFT_ACCESSOR_opt_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_const
#define APACHE_THRIFT_ACCESSOR_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_shared_const
#define APACHE_THRIFT_ACCESSOR_req_shared_const
APACHE_THRIFT_DEFINE_ACCESSOR(req_shared_const);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_field
#define APACHE_THRIFT_ACCESSOR_opt_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_req_field
#define APACHE_THRIFT_ACCESSOR_req_field
APACHE_THRIFT_DEFINE_ACCESSOR(req_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_field
#define APACHE_THRIFT_ACCESSOR_def_field
APACHE_THRIFT_DEFINE_ACCESSOR(def_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_unique_string_ref
#define APACHE_THRIFT_ACCESSOR_def_unique_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(def_unique_string_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_shared_string_ref
#define APACHE_THRIFT_ACCESSOR_def_shared_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(def_shared_string_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_def_shared_string_const_ref
#define APACHE_THRIFT_ACCESSOR_def_shared_string_const_ref
APACHE_THRIFT_DEFINE_ACCESSOR(def_shared_string_const_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unique_string_ref
#define APACHE_THRIFT_ACCESSOR_unique_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(unique_string_ref);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_string_ref
#define APACHE_THRIFT_ACCESSOR_shared_string_ref
APACHE_THRIFT_DEFINE_ACCESSOR(shared_string_ref);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class MyEnum {
  Zero = 0,
  One = 1,
};



enum class TypedEnum : short {
  VAL1 = 0,
  VAL2 = 1,
};



} // cpp2

namespace std {
template<> struct hash<::cpp2::MyEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::MyEnum> {};
template<> struct hash<::cpp2::TypedEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::TypedEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::MyEnum>;

template <> struct TEnumTraits<::cpp2::MyEnum> {
  using type = ::cpp2::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::Zero; }
  static constexpr type max() { return type::One; }
};


template <> struct TEnumDataStorage<::cpp2::TypedEnum>;

template <> struct TEnumTraits<::cpp2::TypedEnum> {
  using type = ::cpp2::TypedEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::VAL1; }
  static constexpr type max() { return type::VAL2; }
};


}} // apache::thrift

namespace cpp2 {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::NamesToValuesMapType _MyEnum_NAMES_TO_VALUES;
#endif
using _TypedEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<TypedEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _TypedEnum_EnumMapFactory::ValuesToNamesMapType _TypedEnum_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _TypedEnum_EnumMapFactory::NamesToValuesMapType _TypedEnum_NAMES_TO_VALUES;
#endif
} // cpp2

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyUnion;
class MyField;
class MyStruct;
class StructWithUnion;
class RecursiveStruct;
class StructWithContainers;
class StructWithSharedConst;
class Empty;
class StructWithRef;
class StructWithBox;
class StructWithRefTypeUnique;
class StructWithRefTypeShared;
class StructWithRefTypeSharedConst;
class StructWithRefAndAnnotCppNoexceptMoveCtor;
class StructWithString;
} // cpp2
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    anInteger = 1,
    aString = 2,
  } ;

  MyUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::anInteger:
      {
        set_anInteger(std::move(*rhs.value_.anInteger));
        break;
      }
      case Type::aString:
      {
        set_aString(std::move(*rhs.value_.aString));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::anInteger:
      {
        set_anInteger(*rhs.value_.anInteger);
        break;
      }
      case Type::aString:
      {
        set_aString(*rhs.value_.aString);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::anInteger:
      {
        set_anInteger(std::move(*rhs.value_.anInteger));
        break;
      }
      case Type::aString:
      {
        set_aString(std::move(*rhs.value_.aString));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::anInteger:
      {
        set_anInteger(*rhs.value_.anInteger);
        break;
      }
      case Type::aString:
      {
        set_aString(*rhs.value_.aString);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~MyUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::std::unique_ptr<::std::int32_t> anInteger;
    ::std::unique_ptr<::std::string> aString;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  ::std::int32_t& set_anInteger(::std::int32_t t = ::std::int32_t()) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::anInteger);
    ::new (std::addressof(value_.anInteger)) ::std::int32_t(t);
    return value_.anInteger;
  }

  ::std::unique_ptr<::std::string>& set_aString(::std::string const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(t));
    return value_.aString;
  }

  ::std::unique_ptr<::std::string>& set_aString(::std::string&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(std::move(t)));
    return value_.aString;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::unique_ptr<::std::string>& set_aString(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::aString);
    ::new (std::addressof(value_.aString)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(std::forward<T>(t)...));
    return value_.aString;
  }

  ::std::unique_ptr<::std::int32_t> const& get_anInteger() const {
    if (getType() != Type::anInteger) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.anInteger;
  }

  ::std::unique_ptr<::std::string> const& get_aString() const {
    if (getType() != Type::aString) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.aString;
  }

  ::std::unique_ptr<::std::int32_t>& mutable_anInteger() {
    assert(getType() == Type::anInteger);
    return value_.anInteger;
  }

  ::std::unique_ptr<::std::string>& mutable_aString() {
    assert(getType() == Type::aString);
    return value_.aString;
  }

  ::std::unique_ptr<::std::int32_t> move_anInteger() {
    assert(getType() == Type::anInteger);
    return std::move(value_.anInteger);
  }

  ::std::unique_ptr<::std::string> move_aString() {
    assert(getType() == Type::aString);
    return std::move(value_.aString);
  }

  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> anInteger_ref() const& {
    return {value_.anInteger, type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> anInteger_ref() const&& {
    return {std::move(value_.anInteger), type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> anInteger_ref() & {
    return {value_.anInteger, type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::unique_ptr<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> anInteger_ref() && {
    return {std::move(value_.anInteger), type_, folly::to_underlying(Type::anInteger), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> aString_ref() const& {
    return {value_.aString, type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> aString_ref() const&& {
    return {std::move(value_.aString), type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> aString_ref() & {
    return {value_.aString, type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> aString_ref() && {
    return {std::move(value_.aString), type_, folly::to_underlying(Type::aString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyField final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyField;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyField();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyField(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::int64_t> opt_value__arg, ::std::unique_ptr<::std::int64_t> value__arg, ::std::unique_ptr<::std::int64_t> req_value__arg, ::std::unique_ptr<::cpp2::MyEnum> opt_enum_value__arg, ::std::unique_ptr<::cpp2::MyEnum> enum_value__arg, ::std::unique_ptr<::cpp2::MyEnum> req_enum_value__arg, ::std::unique_ptr<::std::string> opt_str_value__arg, ::std::unique_ptr<::std::string> str_value__arg, ::std::unique_ptr<::std::string> req_str_value__arg);

  MyField(MyField&&) noexcept;
  MyField(const MyField& src);


  MyField& operator=(MyField&&) noexcept;
  MyField& operator=(const MyField& src);

  ~MyField();

 public:
  ::std::unique_ptr<::std::int64_t> opt_value;
 public:
  ::std::unique_ptr<::std::int64_t> value;
 public:
  ::std::unique_ptr<::std::int64_t> req_value;
 public:
  ::std::unique_ptr<::cpp2::MyEnum> opt_enum_value;
 public:
  ::std::unique_ptr<::cpp2::MyEnum> enum_value;
 public:
  ::std::unique_ptr<::cpp2::MyEnum> req_enum_value;
 public:
  ::std::unique_ptr<::std::string> opt_str_value;
 public:
  ::std::unique_ptr<::std::string> str_value;
 public:
  ::std::unique_ptr<::std::string> req_str_value;

 public:

  bool operator==(const MyField&) const;
  bool operator<(const MyField&) const;
  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE T& opt_value_ref() & {
    return opt_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const T& opt_value_ref() const& {
    return opt_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE T&& opt_value_ref() && {
    return static_cast<T&&>(opt_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const T&& opt_value_ref() const&& {
    return static_cast<const T&&>(opt_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE T& value_ref() & {
    return value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const T& value_ref() const& {
    return value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE T&& value_ref() && {
    return static_cast<T&&>(value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const T&& value_ref() const&& {
    return static_cast<const T&&>(value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE T& req_value_ref() & {
    return req_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const T& req_value_ref() const& {
    return req_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE T&& req_value_ref() && {
    return static_cast<T&&>(req_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::int64_t>>
  FOLLY_ERASE const T&& req_value_ref() const&& {
    return static_cast<const T&&>(req_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE T& opt_enum_value_ref() & {
    return opt_enum_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const T& opt_enum_value_ref() const& {
    return opt_enum_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE T&& opt_enum_value_ref() && {
    return static_cast<T&&>(opt_enum_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const T&& opt_enum_value_ref() const&& {
    return static_cast<const T&&>(opt_enum_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE T& enum_value_ref() & {
    return enum_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const T& enum_value_ref() const& {
    return enum_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE T&& enum_value_ref() && {
    return static_cast<T&&>(enum_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const T&& enum_value_ref() const&& {
    return static_cast<const T&&>(enum_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE T& req_enum_value_ref() & {
    return req_enum_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const T& req_enum_value_ref() const& {
    return req_enum_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE T&& req_enum_value_ref() && {
    return static_cast<T&&>(req_enum_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyEnum>>
  FOLLY_ERASE const T&& req_enum_value_ref() const&& {
    return static_cast<const T&&>(req_enum_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& opt_str_value_ref() & {
    return opt_str_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& opt_str_value_ref() const& {
    return opt_str_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& opt_str_value_ref() && {
    return static_cast<T&&>(opt_str_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& opt_str_value_ref() const&& {
    return static_cast<const T&&>(opt_str_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& str_value_ref() & {
    return str_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& str_value_ref() const& {
    return str_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& str_value_ref() && {
    return static_cast<T&&>(str_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& str_value_ref() const&& {
    return static_cast<const T&&>(str_value);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& req_str_value_ref() & {
    return req_str_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& req_str_value_ref() const& {
    return req_str_value;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& req_str_value_ref() && {
    return static_cast<T&&>(req_str_value);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& req_str_value_ref() const&& {
    return static_cast<const T&&>(req_str_value);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyField>;
  friend void swap(MyField& a, MyField& b);
};

template <class Protocol_>
unsigned long MyField::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct() :
      ref(std::make_unique<::cpp2::MyField>()),
      req_ref(std::make_unique<::cpp2::MyField>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::MyField> opt_ref__arg, ::std::unique_ptr<::cpp2::MyField> ref__arg, ::std::unique_ptr<::cpp2::MyField> req_ref__arg);

  MyStruct(MyStruct&&) noexcept;
  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);
 public:
  ::std::unique_ptr<::cpp2::MyField> opt_ref;
 public:
  ::std::unique_ptr<::cpp2::MyField> ref;
 public:
  ::std::unique_ptr<::cpp2::MyField> req_ref;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE T& opt_ref_ref() & {
    return opt_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const T& opt_ref_ref() const& {
    return opt_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE T&& opt_ref_ref() && {
    return static_cast<T&&>(opt_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const T&& opt_ref_ref() const&& {
    return static_cast<const T&&>(opt_ref);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE T& ref_ref() & {
    return ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const T& ref_ref() const& {
    return ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE T&& ref_ref() && {
    return static_cast<T&&>(ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const T&& ref_ref() const&& {
    return static_cast<const T&&>(ref);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE T& req_ref_ref() & {
    return req_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const T& req_ref_ref() const& {
    return req_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE T&& req_ref_ref() && {
    return static_cast<T&&>(req_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyField>>
  FOLLY_ERASE const T&& req_ref_ref() const&& {
    return static_cast<const T&&>(req_ref);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithUnion() :
      u(std::make_unique<::cpp2::MyUnion>()),
      aDouble(std::make_unique<double>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithUnion(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::MyUnion> u__arg, ::std::unique_ptr<double> aDouble__arg, ::cpp2::MyField f__arg);

  StructWithUnion(StructWithUnion&&) noexcept;
  StructWithUnion(const StructWithUnion& src);


  StructWithUnion& operator=(StructWithUnion&&) noexcept;
  StructWithUnion& operator=(const StructWithUnion& src);
 public:
  ::std::unique_ptr<::cpp2::MyUnion> u;
 public:
  ::std::unique_ptr<double> aDouble;
 private:
  ::cpp2::MyField __fbthrift_field_f;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithUnion&) const;
  bool operator<(const StructWithUnion&) const;
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE T& u_ref() & {
    return u;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE const T& u_ref() const& {
    return u;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE T&& u_ref() && {
    return static_cast<T&&>(u);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::MyUnion>>
  FOLLY_ERASE const T&& u_ref() const&& {
    return static_cast<const T&&>(u);
  }
  template <typename ..., typename T = ::std::unique_ptr<double>>
  FOLLY_ERASE T& aDouble_ref() & {
    return aDouble;
  }

  template <typename ..., typename T = ::std::unique_ptr<double>>
  FOLLY_ERASE const T& aDouble_ref() const& {
    return aDouble;
  }

  template <typename ..., typename T = ::std::unique_ptr<double>>
  FOLLY_ERASE T&& aDouble_ref() && {
    return static_cast<T&&>(aDouble);
  }

  template <typename ..., typename T = ::std::unique_ptr<double>>
  FOLLY_ERASE const T&& aDouble_ref() const&& {
    return static_cast<const T&&>(aDouble);
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> f_ref() const& {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> f_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_f), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> f_ref() & {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> f_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_f), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> f() const& {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> f() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_f), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> f() & {
    return {this->__fbthrift_field_f, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyField>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> f() && {
    return {static_cast<T&&>(this->__fbthrift_field_f), __isset.at(0), __isset.bit(0)};
  }
  const ::cpp2::MyField& get_f() const&;
  ::cpp2::MyField get_f() &&;

  template <typename T_StructWithUnion_f_struct_setter = ::cpp2::MyField>
  [[deprecated("Use `FOO.f_ref() = BAR;` instead of `FOO.set_f(BAR);`")]]
  ::cpp2::MyField& set_f(T_StructWithUnion_f_struct_setter&& f_) {
    f_ref() = std::forward<T_StructWithUnion_f_struct_setter>(f_);
    return __fbthrift_field_f;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithUnion>;
  friend void swap(StructWithUnion& a, StructWithUnion& b);
};

template <class Protocol_>
unsigned long StructWithUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class RecursiveStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = RecursiveStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  RecursiveStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RecursiveStruct(apache::thrift::FragileConstructor, ::std::vector<::cpp2::RecursiveStruct> mes__arg);

  RecursiveStruct(RecursiveStruct&&) noexcept;

  RecursiveStruct(const RecursiveStruct& src);


  RecursiveStruct& operator=(RecursiveStruct&&) noexcept;
  RecursiveStruct& operator=(const RecursiveStruct& src);
 private:
  ::std::vector<::cpp2::RecursiveStruct> __fbthrift_field_mes;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const RecursiveStruct&) const;
  bool operator<(const RecursiveStruct&) const;

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> mes_ref() const& {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> mes_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mes), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> mes_ref() & {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> mes_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_mes), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> mes() const& {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> mes() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mes), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> mes() & {
    return {this->__fbthrift_field_mes, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::RecursiveStruct>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> mes() && {
    return {static_cast<T&&>(this->__fbthrift_field_mes), __isset.at(0), __isset.bit(0)};
  }
  const ::std::vector<::cpp2::RecursiveStruct>* get_mes() const&;
  ::std::vector<::cpp2::RecursiveStruct>* get_mes() &;
  ::std::vector<::cpp2::RecursiveStruct>* get_mes() && = delete;

  template <typename T_RecursiveStruct_mes_struct_setter = ::std::vector<::cpp2::RecursiveStruct>>
  [[deprecated("Use `FOO.mes_ref() = BAR;` instead of `FOO.set_mes(BAR);`")]]
  ::std::vector<::cpp2::RecursiveStruct>& set_mes(T_RecursiveStruct_mes_struct_setter&& mes_) {
    mes_ref() = std::forward<T_RecursiveStruct_mes_struct_setter>(mes_);
    return __fbthrift_field_mes;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<RecursiveStruct>;
  friend void swap(RecursiveStruct& a, RecursiveStruct& b);
};

template <class Protocol_>
unsigned long RecursiveStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithContainers final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithContainers;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithContainers();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithContainers(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref__arg, ::std::unique_ptr<::std::set<::std::int32_t>> set_ref__arg, ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>> map_ref__arg, ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref_unique__arg, ::std::shared_ptr<::std::set<::std::int32_t>> set_ref_shared__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> list_ref_shared_const__arg);

  StructWithContainers(StructWithContainers&&) noexcept;
  StructWithContainers(const StructWithContainers& src);


  StructWithContainers& operator=(StructWithContainers&&) noexcept;
  StructWithContainers& operator=(const StructWithContainers& src);

  ~StructWithContainers();

 public:
  ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref;
 public:
  ::std::unique_ptr<::std::set<::std::int32_t>> set_ref;
 public:
  ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>> map_ref;
 public:
  ::std::unique_ptr<::std::vector<::std::int32_t>> list_ref_unique;
 public:
  ::std::shared_ptr<::std::set<::std::int32_t>> set_ref_shared;
 public:
  ::std::shared_ptr<const ::std::vector<::std::int32_t>> list_ref_shared_const;

 public:

  bool operator==(const StructWithContainers&) const;
  bool operator<(const StructWithContainers&) const;
  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& list_ref_ref() & {
    return list_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& list_ref_ref() const& {
    return list_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& list_ref_ref() && {
    return static_cast<T&&>(list_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& list_ref_ref() const&& {
    return static_cast<const T&&>(list_ref);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE T& set_ref_ref() & {
    return set_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const T& set_ref_ref() const& {
    return set_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE T&& set_ref_ref() && {
    return static_cast<T&&>(set_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const T&& set_ref_ref() const&& {
    return static_cast<const T&&>(set_ref);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE T& map_ref_ref() & {
    return map_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE const T& map_ref_ref() const& {
    return map_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE T&& map_ref_ref() && {
    return static_cast<T&&>(map_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE const T&& map_ref_ref() const&& {
    return static_cast<const T&&>(map_ref);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& list_ref_unique_ref() & {
    return list_ref_unique;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& list_ref_unique_ref() const& {
    return list_ref_unique;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& list_ref_unique_ref() && {
    return static_cast<T&&>(list_ref_unique);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& list_ref_unique_ref() const&& {
    return static_cast<const T&&>(list_ref_unique);
  }
  template <typename ..., typename T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE T& set_ref_shared_ref() & {
    return set_ref_shared;
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const T& set_ref_shared_ref() const& {
    return set_ref_shared;
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE T&& set_ref_shared_ref() && {
    return static_cast<T&&>(set_ref_shared);
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::set<::std::int32_t>>>
  FOLLY_ERASE const T&& set_ref_shared_ref() const&& {
    return static_cast<const T&&>(set_ref_shared);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE T& list_ref_shared_const_ref() & {
    return list_ref_shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T& list_ref_shared_const_ref() const& {
    return list_ref_shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE T&& list_ref_shared_const_ref() && {
    return static_cast<T&&>(list_ref_shared_const);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const T&& list_ref_shared_const_ref() const&& {
    return static_cast<const T&&>(list_ref_shared_const);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithContainers>;
  friend void swap(StructWithContainers& a, StructWithContainers& b);
};

template <class Protocol_>
unsigned long StructWithContainers::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithSharedConst final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithSharedConst;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithSharedConst() :
      shared_const(std::make_shared<::cpp2::MyField>()),
      req_shared_const(std::make_shared<::cpp2::MyField>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithSharedConst(apache::thrift::FragileConstructor, ::std::shared_ptr<const ::cpp2::MyField> opt_shared_const__arg, ::std::shared_ptr<const ::cpp2::MyField> shared_const__arg, ::std::shared_ptr<const ::cpp2::MyField> req_shared_const__arg);

  StructWithSharedConst(StructWithSharedConst&&) noexcept;

  StructWithSharedConst(const StructWithSharedConst& src);


  StructWithSharedConst& operator=(StructWithSharedConst&&) noexcept;
  StructWithSharedConst& operator=(const StructWithSharedConst& src);
 public:
  ::std::shared_ptr<const ::cpp2::MyField> opt_shared_const;
 public:
  ::std::shared_ptr<const ::cpp2::MyField> shared_const;
 public:
  ::std::shared_ptr<const ::cpp2::MyField> req_shared_const;

 public:

  bool operator==(const StructWithSharedConst&) const;
  bool operator<(const StructWithSharedConst&) const;
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE T& opt_shared_const_ref() & {
    return opt_shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const T& opt_shared_const_ref() const& {
    return opt_shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE T&& opt_shared_const_ref() && {
    return static_cast<T&&>(opt_shared_const);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const T&& opt_shared_const_ref() const&& {
    return static_cast<const T&&>(opt_shared_const);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE T& shared_const_ref() & {
    return shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const T& shared_const_ref() const& {
    return shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE T&& shared_const_ref() && {
    return static_cast<T&&>(shared_const);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const T&& shared_const_ref() const&& {
    return static_cast<const T&&>(shared_const);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE T& req_shared_const_ref() & {
    return req_shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const T& req_shared_const_ref() const& {
    return req_shared_const;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE T&& req_shared_const_ref() && {
    return static_cast<T&&>(req_shared_const);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::MyField>>
  FOLLY_ERASE const T&& req_shared_const_ref() const&& {
    return static_cast<const T&&>(req_shared_const);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithSharedConst>;
  friend void swap(StructWithSharedConst& a, StructWithSharedConst& b);
};

template <class Protocol_>
unsigned long StructWithSharedConst::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Empty final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Empty;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Empty() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Empty(apache::thrift::FragileConstructor);

  Empty(Empty&&) = default;

  Empty(const Empty&) = default;


  Empty& operator=(Empty&&) = default;

  Empty& operator=(const Empty&) = default;

 public:

  bool operator==(const Empty&) const;
  bool operator<(const Empty&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Empty>;
  friend void swap(Empty& a, Empty& b);
};

template <class Protocol_>
unsigned long Empty::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithRef() :
      def_field(std::make_unique<::cpp2::Empty>()),
      req_field(std::make_unique<::cpp2::Empty>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg, ::std::unique_ptr<::cpp2::Empty> opt_field__arg, ::std::unique_ptr<::cpp2::Empty> req_field__arg);

  StructWithRef(StructWithRef&&) noexcept;
  StructWithRef(const StructWithRef& src);


  StructWithRef& operator=(StructWithRef&&) noexcept;
  StructWithRef& operator=(const StructWithRef& src);
 public:
  ::std::unique_ptr<::cpp2::Empty> def_field;
 public:
  ::std::unique_ptr<::cpp2::Empty> opt_field;
 public:
  ::std::unique_ptr<::cpp2::Empty> req_field;

 public:

  bool operator==(const StructWithRef&) const;
  bool operator<(const StructWithRef&) const;
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& def_field_ref() & {
    return def_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& def_field_ref() const& {
    return def_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& def_field_ref() && {
    return static_cast<T&&>(def_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& def_field_ref() const&& {
    return static_cast<const T&&>(def_field);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& opt_field_ref() & {
    return opt_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& opt_field_ref() const& {
    return opt_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& opt_field_ref() && {
    return static_cast<T&&>(opt_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& opt_field_ref() const&& {
    return static_cast<const T&&>(opt_field);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& req_field_ref() & {
    return req_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& req_field_ref() const& {
    return req_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& req_field_ref() && {
    return static_cast<T&&>(req_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& req_field_ref() const&& {
    return static_cast<const T&&>(req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRef>;
  friend void swap(StructWithRef& a, StructWithRef& b);
};

template <class Protocol_>
unsigned long StructWithRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithBox final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithBox;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithBox() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithBox(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::std::string> a__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>> b__arg, ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef> c__arg);

  StructWithBox(StructWithBox&&) noexcept;

  StructWithBox(const StructWithBox& src);


  StructWithBox& operator=(StructWithBox&&) noexcept;
  StructWithBox& operator=(const StructWithBox& src);
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::string> __fbthrift_field_a;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>> __fbthrift_field_b;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef> __fbthrift_field_c;

 public:

  bool operator==(const StructWithBox&) const;
  bool operator<(const StructWithBox&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> a_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_a};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> a_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_a)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> a_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_a};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> a_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_a)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> a() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_a};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> a() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_a)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> a() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_a};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> a() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_a)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> b_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_b};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> b_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_b)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> b_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_b};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> b_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_b)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> b() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_b};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> b() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_b)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> b() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_b};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> b() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_b)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> c_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_c};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> c_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_c)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> c_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_c};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> c_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_c)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> c() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_c};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> c() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_c)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> c() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_c};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::StructWithRef>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> c() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_c)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithBox>;
  friend void swap(StructWithBox& a, StructWithBox& b);
};

template <class Protocol_>
unsigned long StructWithBox::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithRefTypeUnique final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefTypeUnique;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithRefTypeUnique() :
      def_field(std::make_unique<::cpp2::Empty>()),
      req_field(std::make_unique<::cpp2::Empty>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeUnique(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg, ::std::unique_ptr<::cpp2::Empty> opt_field__arg, ::std::unique_ptr<::cpp2::Empty> req_field__arg);

  StructWithRefTypeUnique(StructWithRefTypeUnique&&) noexcept;
  StructWithRefTypeUnique(const StructWithRefTypeUnique& src);


  StructWithRefTypeUnique& operator=(StructWithRefTypeUnique&&) noexcept;
  StructWithRefTypeUnique& operator=(const StructWithRefTypeUnique& src);
 public:
  ::std::unique_ptr<::cpp2::Empty> def_field;
 public:
  ::std::unique_ptr<::cpp2::Empty> opt_field;
 public:
  ::std::unique_ptr<::cpp2::Empty> req_field;

 public:

  bool operator==(const StructWithRefTypeUnique&) const;
  bool operator<(const StructWithRefTypeUnique&) const;
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& def_field_ref() & {
    return def_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& def_field_ref() const& {
    return def_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& def_field_ref() && {
    return static_cast<T&&>(def_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& def_field_ref() const&& {
    return static_cast<const T&&>(def_field);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& opt_field_ref() & {
    return opt_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& opt_field_ref() const& {
    return opt_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& opt_field_ref() && {
    return static_cast<T&&>(opt_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& opt_field_ref() const&& {
    return static_cast<const T&&>(opt_field);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& req_field_ref() & {
    return req_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& req_field_ref() const& {
    return req_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& req_field_ref() && {
    return static_cast<T&&>(req_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& req_field_ref() const&& {
    return static_cast<const T&&>(req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefTypeUnique>;
  friend void swap(StructWithRefTypeUnique& a, StructWithRefTypeUnique& b);
};

template <class Protocol_>
unsigned long StructWithRefTypeUnique::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithRefTypeShared final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefTypeShared;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithRefTypeShared() :
      def_field(std::make_shared<::cpp2::Empty>()),
      req_field(std::make_shared<::cpp2::Empty>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeShared(apache::thrift::FragileConstructor, ::std::shared_ptr<::cpp2::Empty> def_field__arg, ::std::shared_ptr<::cpp2::Empty> opt_field__arg, ::std::shared_ptr<::cpp2::Empty> req_field__arg);

  StructWithRefTypeShared(StructWithRefTypeShared&&) noexcept;

  StructWithRefTypeShared(const StructWithRefTypeShared& src);


  StructWithRefTypeShared& operator=(StructWithRefTypeShared&&) noexcept;
  StructWithRefTypeShared& operator=(const StructWithRefTypeShared& src);
 public:
  ::std::shared_ptr<::cpp2::Empty> def_field;
 public:
  ::std::shared_ptr<::cpp2::Empty> opt_field;
 public:
  ::std::shared_ptr<::cpp2::Empty> req_field;

 public:

  bool operator==(const StructWithRefTypeShared&) const;
  bool operator<(const StructWithRefTypeShared&) const;
  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& def_field_ref() & {
    return def_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& def_field_ref() const& {
    return def_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& def_field_ref() && {
    return static_cast<T&&>(def_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& def_field_ref() const&& {
    return static_cast<const T&&>(def_field);
  }
  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& opt_field_ref() & {
    return opt_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& opt_field_ref() const& {
    return opt_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& opt_field_ref() && {
    return static_cast<T&&>(opt_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& opt_field_ref() const&& {
    return static_cast<const T&&>(opt_field);
  }
  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& req_field_ref() & {
    return req_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& req_field_ref() const& {
    return req_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& req_field_ref() && {
    return static_cast<T&&>(req_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& req_field_ref() const&& {
    return static_cast<const T&&>(req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefTypeShared>;
  friend void swap(StructWithRefTypeShared& a, StructWithRefTypeShared& b);
};

template <class Protocol_>
unsigned long StructWithRefTypeShared::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithRefTypeSharedConst final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefTypeSharedConst;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithRefTypeSharedConst() :
      def_field(std::make_shared<::cpp2::Empty>()),
      req_field(std::make_shared<::cpp2::Empty>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefTypeSharedConst(apache::thrift::FragileConstructor, ::std::shared_ptr<const ::cpp2::Empty> def_field__arg, ::std::shared_ptr<const ::cpp2::Empty> opt_field__arg, ::std::shared_ptr<const ::cpp2::Empty> req_field__arg);

  StructWithRefTypeSharedConst(StructWithRefTypeSharedConst&&) noexcept;

  StructWithRefTypeSharedConst(const StructWithRefTypeSharedConst& src);


  StructWithRefTypeSharedConst& operator=(StructWithRefTypeSharedConst&&) noexcept;
  StructWithRefTypeSharedConst& operator=(const StructWithRefTypeSharedConst& src);
 public:
  ::std::shared_ptr<const ::cpp2::Empty> def_field;
 public:
  ::std::shared_ptr<const ::cpp2::Empty> opt_field;
 public:
  ::std::shared_ptr<const ::cpp2::Empty> req_field;

 public:

  bool operator==(const StructWithRefTypeSharedConst&) const;
  bool operator<(const StructWithRefTypeSharedConst&) const;
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE T& def_field_ref() & {
    return def_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const T& def_field_ref() const& {
    return def_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE T&& def_field_ref() && {
    return static_cast<T&&>(def_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const T&& def_field_ref() const&& {
    return static_cast<const T&&>(def_field);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE T& opt_field_ref() & {
    return opt_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const T& opt_field_ref() const& {
    return opt_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE T&& opt_field_ref() && {
    return static_cast<T&&>(opt_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const T&& opt_field_ref() const&& {
    return static_cast<const T&&>(opt_field);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE T& req_field_ref() & {
    return req_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const T& req_field_ref() const& {
    return req_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE T&& req_field_ref() && {
    return static_cast<T&&>(req_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::Empty>>
  FOLLY_ERASE const T&& req_field_ref() const&& {
    return static_cast<const T&&>(req_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefTypeSharedConst>;
  friend void swap(StructWithRefTypeSharedConst& a, StructWithRefTypeSharedConst& b);
};

template <class Protocol_>
unsigned long StructWithRefTypeSharedConst::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithRefAndAnnotCppNoexceptMoveCtor final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithRefAndAnnotCppNoexceptMoveCtor;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithRefAndAnnotCppNoexceptMoveCtor() :
      def_field(std::make_unique<::cpp2::Empty>()) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithRefAndAnnotCppNoexceptMoveCtor(apache::thrift::FragileConstructor, ::std::unique_ptr<::cpp2::Empty> def_field__arg);

  StructWithRefAndAnnotCppNoexceptMoveCtor(StructWithRefAndAnnotCppNoexceptMoveCtor&&) noexcept;
  StructWithRefAndAnnotCppNoexceptMoveCtor(const StructWithRefAndAnnotCppNoexceptMoveCtor& src);


  StructWithRefAndAnnotCppNoexceptMoveCtor& operator=(StructWithRefAndAnnotCppNoexceptMoveCtor&&) noexcept;
  StructWithRefAndAnnotCppNoexceptMoveCtor& operator=(const StructWithRefAndAnnotCppNoexceptMoveCtor& src);
 public:
  ::std::unique_ptr<::cpp2::Empty> def_field;

 public:

  bool operator==(const StructWithRefAndAnnotCppNoexceptMoveCtor&) const;
  bool operator<(const StructWithRefAndAnnotCppNoexceptMoveCtor&) const;
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T& def_field_ref() & {
    return def_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T& def_field_ref() const& {
    return def_field;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE T&& def_field_ref() && {
    return static_cast<T&&>(def_field);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::Empty>>
  FOLLY_ERASE const T&& def_field_ref() const&& {
    return static_cast<const T&&>(def_field);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithRefAndAnnotCppNoexceptMoveCtor>;
  friend void swap(StructWithRefAndAnnotCppNoexceptMoveCtor& a, StructWithRefAndAnnotCppNoexceptMoveCtor& b);
};

template <class Protocol_>
unsigned long StructWithRefAndAnnotCppNoexceptMoveCtor::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithString final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithString;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithString();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithString(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::string> def_unique_string_ref__arg, ::std::shared_ptr<::std::string> def_shared_string_ref__arg, ::std::shared_ptr<const ::std::string> def_shared_string_const_ref__arg, ::std::unique_ptr<::std::string> unique_string_ref__arg, ::std::shared_ptr<::std::string> shared_string_ref__arg);

  StructWithString(StructWithString&&) noexcept;
  StructWithString(const StructWithString& src);


  StructWithString& operator=(StructWithString&&) noexcept;
  StructWithString& operator=(const StructWithString& src);

  ~StructWithString();

 public:
  ::std::unique_ptr<::std::string> def_unique_string_ref;
 public:
  ::std::shared_ptr<::std::string> def_shared_string_ref;
 public:
  ::std::shared_ptr<const ::std::string> def_shared_string_const_ref;
 public:
  ::std::unique_ptr<::std::string> unique_string_ref;
 public:
  ::std::shared_ptr<::std::string> shared_string_ref;

 public:

  bool operator==(const StructWithString&) const;
  bool operator<(const StructWithString&) const;
  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& def_unique_string_ref_ref() & {
    return def_unique_string_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& def_unique_string_ref_ref() const& {
    return def_unique_string_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& def_unique_string_ref_ref() && {
    return static_cast<T&&>(def_unique_string_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& def_unique_string_ref_ref() const&& {
    return static_cast<const T&&>(def_unique_string_ref);
  }
  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE T& def_shared_string_ref_ref() & {
    return def_shared_string_ref;
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const T& def_shared_string_ref_ref() const& {
    return def_shared_string_ref;
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE T&& def_shared_string_ref_ref() && {
    return static_cast<T&&>(def_shared_string_ref);
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const T&& def_shared_string_ref_ref() const&& {
    return static_cast<const T&&>(def_shared_string_ref);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE T& def_shared_string_const_ref_ref() & {
    return def_shared_string_const_ref;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const T& def_shared_string_const_ref_ref() const& {
    return def_shared_string_const_ref;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE T&& def_shared_string_const_ref_ref() && {
    return static_cast<T&&>(def_shared_string_const_ref);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const T&& def_shared_string_const_ref_ref() const&& {
    return static_cast<const T&&>(def_shared_string_const_ref);
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& unique_string_ref_ref() & {
    return unique_string_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& unique_string_ref_ref() const& {
    return unique_string_ref;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& unique_string_ref_ref() && {
    return static_cast<T&&>(unique_string_ref);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& unique_string_ref_ref() const&& {
    return static_cast<const T&&>(unique_string_ref);
  }
  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE T& shared_string_ref_ref() & {
    return shared_string_ref;
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const T& shared_string_ref_ref() const& {
    return shared_string_ref;
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE T&& shared_string_ref_ref() && {
    return static_cast<T&&>(shared_string_ref);
  }

  template <typename ..., typename T = ::std::shared_ptr<::std::string>>
  FOLLY_ERASE const T&& shared_string_ref_ref() const&& {
    return static_cast<const T&&>(shared_string_ref);
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithString>;
  friend void swap(StructWithString& a, StructWithString& b);
};

template <class Protocol_>
unsigned long StructWithString::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // cpp2

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::cpp2::MyUnion::Type>;

template <> struct TEnumTraits<::cpp2::MyUnion::Type> {
  using type = ::cpp2::MyUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
