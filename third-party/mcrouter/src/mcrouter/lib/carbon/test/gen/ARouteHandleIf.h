/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <string>
#include <utility>

#include <mcrouter/lib/RouteHandleTraverser.h>

#include "mcrouter/lib/carbon/test/gen/AMessages.h"
#include "mcrouter/lib/carbon/test/gen/BRoutingGroups.h"

namespace carbon {
namespace test {
namespace A {

template <class Route>
class ARouteHandle;

class ARouteHandleIf {
 public:
  template <class Route>
  using Impl = ARouteHandle<Route>;

  /**
   * Returns a string identifying this route handle instance
   */
  virtual std::string routeName() const = 0;

  virtual ~ARouteHandleIf() = default;

  virtual TestAReply route(const TestARequest&) = 0;

virtual bool traverse(
    const TestARequest&,
    facebook::memcache::RouteHandleTraverser<ARouteHandleIf>&) const = 0;
};

template <class Route>
class ARouteHandle : public ARouteHandleIf {
 public:
  template <class... Args>
  explicit ARouteHandle(Args&&... args)
      : route_(std::forward<Args>(args)...) {}
  std::string routeName() const override final {
    return route_.routeName();
  }

  TestAReply route(const TestARequest& request) override final {
    return route_.route(request);
  }

bool traverse(
    const TestARequest& request,
    facebook::memcache::RouteHandleTraverser<ARouteHandleIf>& traverser)
    const override final {
  return route_.traverse(request, traverser);
}

 private:
  Route route_;
};
} // namespace A
} // namespace test
} // namespace carbon
