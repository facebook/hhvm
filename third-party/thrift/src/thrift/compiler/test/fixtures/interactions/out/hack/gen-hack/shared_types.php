<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * DoSomethingResult
 */
class DoSomethingResult implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 's_res',
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'i_res',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    's_res' => 1,
    'i_res' => 2,
  ];

  const type TConstructorShape = shape(
    ?'s_res' => ?string,
    ?'i_res' => ?int,
  );

  const int STRUCTURAL_ID = 4959007126407660429;
  /**
   * Original thrift field:-
   * 1: string s_res
   */
  public string $s_res;
  /**
   * Original thrift field:-
   * 2: i32 i_res
   */
  public int $i_res;

  public function __construct(?string $s_res = null, ?int $i_res = null)[] {
    $this->s_res = $s_res ?? '';
    $this->i_res = $i_res ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 's_res'),
      Shapes::idx($shape, 'i_res'),
    );
  }

  public function getName()[]: string {
    return 'DoSomethingResult';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "shared.DoSomethingResult",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "s_res",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "i_res",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

