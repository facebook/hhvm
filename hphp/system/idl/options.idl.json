{
    "preamble": "",
    "consts": [
    ],
    "funcs": [
        {
            "name": "assert_options",
            "desc": "Set the various assert() control options or just query their current settings.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the original setting of any option or FALSE on errors."
            },
            "args": [
                {
                    "name": "what",
                    "type": "Int32",
                    "desc": "Assert Options Option INI Setting Default value Description ASSERT_ACTIVE assert.active 1 enable assert() evaluation ASSERT_WARNING assert.warning 1 issue a PHP warning for each failed assertion ASSERT_BAIL assert.bail 0 terminate execution on failed assertions ASSERT_QUIET_EVAL assert.quiet_eval 0 disable error_reporting during assertion expression evaluation ASSERT_CALLBACK assert.callback (NULL) Callback to call on failed assertions"
                },
                {
                    "name": "value",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "An optional new value for the option."
                }
            ]
        },
        {
            "name": "assert",
            "desc": "assert() will check the given assertion and take appropriate action if its result is FALSE.\n\nIf the assertion is given as a string it will be evaluated as PHP code by assert(). The advantages of a string assertion are less overhead when assertion checking is off and messages containing the assertion expression when an assertion fails. This means that if you pass a boolean condition as assertion this condition will not show up as parameter to the assertion function which you may have defined with the assert_options() function, the condition is converted to a string before calling that handler function, and the boolean FALSE is converted as the empty string.\n\nAssertions should be used as a debugging feature only. You may use them for sanity-checks that test for conditions that should always be TRUE and that indicate some programming errors if not or to check for the presence of certain features like extension functions or certain system limits and features.\n\nAssertions should not be used for normal runtime operations like input parameter checks. As a rule of thumb your code should always be able to work correctly if assertion checking is not activated.\n\nThe behavior of assert() may be configured by assert_options() or by .ini-settings described in that functions manual page.\n\nThe assert_options() function and\/or ASSERT_CALLBACK configuration directive allow a callback function to be set to handle failed assertions.\n\nassert() callbacks are particularly useful for building automated test suites because they allow you to easily capture the code passed to the assertion, along with information on where the assertion was made. While this information can be captured via other methods, using assertions makes it much faster and easier!\n\nThe callback function should accept three arguments. The first argument will contain the file the assertion failed in. The second argument will contain the line the assertion failed on and the third argument will contain the expression that failed (if any - literal values such as 1 or \"two\" will not be passed via this argument)",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "FALSE if the assertion is false, TRUE otherwise."
            },
            "args": [
                {
                    "name": "assertion",
                    "type": "Variant",
                    "desc": "The assertion."
                }
            ]
        },
        {
            "name": "dl",
            "desc": "Loads the PHP extension given by the parameter library.\n\nUse extension_loaded() to test whether a given extension is already available or not. This works on both built-in extensions and dynamically loaded ones (either through php.ini or dl()). Warning This function has been removed from some SAPI's in PHP 5.3.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns TRUE on success or FALSE on failure. If the functionality of loading modules is not available or has been disabled (either by setting enable_dl off or by enabling safe mode in php.ini) an E_ERROR is emitted and execution is stopped. If dl() fails because the specified library couldn't be loaded, in addition to FALSE an E_WARNING message is emitted."
            },
            "args": [
                {
                    "name": "library",
                    "type": "String",
                    "desc": "This parameter is only the filename of the extension to load which also depends on your platform. For example, the sockets extension (if compiled as a shared module, not the default!) would be called sockets.so on Unix platforms whereas it is called php_sockets.dll on the Windows platform.\n\nThe directory where the extension is loaded from depends on your platform:\n\nWindows - If not explicitly set in the php.ini, the extension is loaded from C:\\php4\\extensions\\ (PHP4) or C:\\php5\\ (PHP5) by default.\n\nUnix - If not explicitly set in the php.ini, the default extension directory depends on whether PHP has been built with --enable-debug or not whether PHP has been built with (experimental) ZTS (Zend Thread Safety) support or not the current internal ZEND_MODULE_API_NO (Zend internal module API number, which is basically the date on which a major module API change happened, e.g. 20010901) Taking into account the above, the directory then defaults to <install-dir>\/lib\/php\/extensions\/ <debug-or-not>-<zts-or-not>-ZEND_MODULE_API_NO, e.g. \/usr\/local\/php\/lib\/php\/extensions\/debug-non-zts-20010901 or \/usr\/local\/php\/lib\/php\/extensions\/no-debug-zts-20010901."
                }
            ]
        },
        {
            "name": "extension_loaded",
            "desc": "Finds out whether the extension is loaded.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if the extension identified by name is loaded, FALSE otherwise."
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "desc": "The extension name.\n\nYou can see the names of various extensions by using phpinfo() or if you're using the CGI or CLI version of PHP you can use the -m switch to list all available extensions: $ php -m [PHP Modules] xml tokenizer standard sockets session posix pcre overload mysql mbstring ctype [Zend Modules]"
                }
            ]
        },
        {
            "name": "get_loaded_extensions",
            "desc": "This function returns the names of all the modules compiled and loaded in the PHP interpreter.",
            "flags": [
            ],
            "return": {
                "type": "StringVec",
                "desc": "Returns an indexed array of all the modules names."
            },
            "args": [
                {
                    "name": "zend_extensions",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "Only return Zend extensions, if not then regular extensions, like mysqli are listed. Defaults to FALSE (return regular extensions)."
                }
            ]
        },
        {
            "name": "get_extension_funcs",
            "desc": "This function returns the names of all the functions defined in the module indicated by module_name.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "Returns an array with all the functions, or FALSE if module_name is not a valid extension."
            },
            "args": [
                {
                    "name": "module_name",
                    "type": "String",
                    "desc": "The module name.\n\nThis parameter must be in lowercase."
                }
            ]
        },
        {
            "name": "get_cfg_var",
            "desc": "Gets the value of a PHP configuration option.\n\nThis function will not return configuration information set when the PHP was compiled, or read from an Apache configuration file.\n\nTo check whether the system is using a configuration file, try retrieving the value of the cfg_file_path configuration setting. If this is available, a configuration file is being used.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the current value of the PHP configuration variable specified by option, or FALSE if an error occurs."
            },
            "args": [
                {
                    "name": "option",
                    "type": "String",
                    "desc": "The configuration option name."
                }
            ]
        },
        {
            "name": "get_current_user",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the username as a string."
            },
            "args": [
            ]
        },
        {
            "name": "get_defined_constants",
            "desc": "Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap"
            },
            "args": [
                {
                    "name": "categorize",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "Causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension.\n\n\n\nThe above example will output something similar to: Array ( [Core] => Array ( [E_ERROR] => 1 [E_WARNING] => 2 [E_PARSE] => 4 [E_NOTICE] => 8 [E_CORE_ERROR] => 16 [E_CORE_WARNING] => 32 [E_COMPILE_ERROR] => 64 [E_COMPILE_WARNING] => 128 [E_USER_ERROR] => 256 [E_USER_WARNING] => 512 [E_USER_NOTICE] => 1024 [E_ALL] => 2047 [TRUE] => 1 ) [pcre] => Array ( [PREG_PATTERN_ORDER] => 1 [PREG_SET_ORDER] => 2 [PREG_OFFSET_CAPTURE] => 256 [PREG_SPLIT_NO_EMPTY] => 1 [PREG_SPLIT_DELIM_CAPTURE] => 2 [PREG_SPLIT_OFFSET_CAPTURE] => 4 [PREG_GREP_INVERT] => 1 ) [user] => Array ( [MY_CONSTANT] => 1 ) )"
                }
            ]
        },
        {
            "name": "get_include_path",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the path, as a string."
            },
            "args": [
            ]
        },
        {
            "name": "restore_include_path",
            "flags": [
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
            ]
        },
        {
            "name": "set_include_path",
            "desc": "Sets the include_path configuration option for the duration of the script.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the old include_path on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "new_include_path",
                    "type": "String",
                    "desc": "The new value for the include_path"
                }
            ]
        },
        {
            "name": "get_included_files",
            "desc": "Gets the names of all files that have been included using include(), include_once(), require() or require_once().",
            "flags": [
            ],
            "return": {
                "type": "StringVec",
                "desc": "Returns an array of the names of all files.\n\nThe script originally called is considered an \"included file,\" so it will be listed together with the files referenced by include() and family.\n\nFiles that are included or required multiple times only show up once in the returned array."
            },
            "args": [
            ]
        },
        {
            "name": "inclued_get_data",
            "desc": "Get the inclued data.",
            "flags": [
            ],
            "return": {
                "type": "VariantVec",
                "desc": "The inclued data."
            },
            "args": [
            ]
        },
        {
            "name": "get_magic_quotes_gpc",
            "desc": "Returns the current configuration setting of magic_quotes_gpc\n\nKeep in mind that attempting to set magic_quotes_gpc at runtime will not work.\n\nFor more information about magic_quotes, see this security section.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns 0 if magic_quotes_gpc is off, 1 otherwise."
            },
            "args": [
            ]
        },
        {
            "name": "get_magic_quotes_runtime",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns 0 if magic_quotes_runtime is off, 1 otherwise."
            },
            "args": [
            ]
        },
        {
            "name": "getenv",
            "desc": null,
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the value of the environment variable varname, or FALSE on an error."
            },
            "args": [
                {
                    "name": "varname",
                    "type": "String",
                    "desc": "The variable name."
                }
            ]
        },
        {
            "name": "getlastmod",
            "desc": "Gets the time of the last modification of the current page.\n\nIf you're interested in getting the last modification time of a different file, consider using filemtime().",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the time of the last modification of the current page. The value returned is a Unix timestamp, suitable for feeding to date(). Returns FALSE on error."
            },
            "args": [
            ]
        },
        {
            "name": "getmygid",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the group ID of the current script, or FALSE on error."
            },
            "args": [
            ]
        },
        {
            "name": "getmyinode",
            "desc": "Gets the inode of the current script.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the current script's inode as an integer, or FALSE on error."
            },
            "args": [
            ]
        },
        {
            "name": "getmypid",
            "desc": "Gets the current PHP process ID.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the current PHP process ID, or FALSE on error."
            },
            "args": [
            ]
        },
        {
            "name": "getmyuid",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the user ID of the current script, or FALSE on error."
            },
            "args": [
            ]
        },
        {
            "name": "getopt",
            "desc": "Parses options passed to the script.\nThe options parameter may contain the following elements: Individual characters (do not accept values) Characters followed by a colon (parameter requires value) Characters followed by two colons (optional value) Option values are the first argument after the string. It does not matter if a value has leading white space or not. Optional values do not accept \" \" (space) as a separator.\n\nThe format for the options and longopts is almost the same, the only difference is that longopts takes an array of options (where each element is the option) where as options takes a string (where each character is the option).",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "This function will return an array of option \/ argument pairs or FALSE on failure.\n\nThe parsing of options will end at the first non-option found, anything that follows is discarded."
            },
            "args": [
                {
                    "name": "options",
                    "type": "String",
                    "desc": "Each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen (-). For example, an option string \"x\" recognizes an option -x. Only a-z, A-Z and 0-9 are allowed."
                },
                {
                    "name": "longopts",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (--). For example, an longopts element \"opt\" recognizes an option --opt. Prior to PHP5.3.0 this parameter was only available on few systems"
                }
            ]
        },
        {
            "name": "getrusage",
            "desc": "This is an interface to getrusage(2). It gets data returned from the system call.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "Returns an associative array containing the data returned from the system call. All entries are accessible by using their documented field names."
            },
            "args": [
                {
                    "name": "who",
                    "type": "Int32",
                    "value": "0",
                    "desc": "If who is 1, getrusage will be called with RUSAGE_CHILDREN."
                }
            ]
        },
        {
            "name": "clock_getres",
            "desc": "Gets resolution of system clock. \"man 3 clock_getres\" for more details.",
            "flags": [
                "HipHopSpecific"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if successful, FALSE otherwise"
            },
            "args": [
                {
                    "name": "clk_id",
                    "type": "Int32",
                    "desc": "Which clock to check."
                },
                {
                    "name": "sec",
                    "type": "Variant",
                    "desc": "Return value in seconds.",
                    "ref": true
                },
                {
                    "name": "nsec",
                    "type": "Variant",
                    "desc": "Return value in nano-seconds.",
                    "ref": true
                }
            ]
        },
        {
            "name": "clock_gettime",
            "desc": "Gets time of a system clock. \"man 3 clock_gettime\" for more details.",
            "flags": [
                "HipHopSpecific"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if successful, FALSE otherwise"
            },
            "args": [
                {
                    "name": "clk_id",
                    "type": "Int32",
                    "desc": "Which clock."
                },
                {
                    "name": "sec",
                    "type": "Variant",
                    "desc": "Return value in seconds.",
                    "ref": true
                },
                {
                    "name": "nsec",
                    "type": "Variant",
                    "desc": "Return value in nano-seconds.",
                    "ref": true
                }
            ]
        },
        {
            "name": "clock_settime",
            "desc": "Sets time of a system clock. \"man 3 clock_settime\" for more details.",
            "flags": [
                "HipHopSpecific"
            ],
            "return": {
                "type": "Boolean",
                "desc": "TRUE if successful, FALSE otherwise"
            },
            "args": [
                {
                    "name": "clk_id",
                    "type": "Int32",
                    "desc": "Which clock."
                },
                {
                    "name": "sec",
                    "type": "Int64",
                    "desc": "Value to set in seconds."
                },
                {
                    "name": "nsec",
                    "type": "Int64",
                    "desc": "Value to set in nano-seconds."
                }
            ]
        },
        {
            "name": "cpu_get_count",
            "desc": "Gets number of processors.",
            "flags": [
                "HipHopSpecific",
                "NoInjection"
            ],
            "return": {
                "type": "Int64",
                "desc": "Number of CPUs."
            },
            "args": [
            ]
        },
        {
            "name": "cpu_get_model",
            "desc": "Gets processor model.",
            "flags": [
                "HipHopSpecific",
                "NoInjection"
            ],
            "return": {
                "type": "String",
                "desc": "Model name of CPU."
            },
            "args": [
            ]
        },
        {
            "name": "ini_get",
            "desc": "Returns the value of the configuration option on success.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the value of the configuration option as a string on success, or an empty string on failure or for null values."
            },
            "args": [
                {
                    "name": "varname",
                    "type": "String",
                    "desc": "The configuration option name."
                }
            ]
        },
        {
            "name": "ini_get_all",
            "desc": "Gets all configuration options",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "Returns an associative array with directive names as the array key."
            },
            "args": [
                {
                    "name": "extension",
                    "type": "String",
                    "desc": "An optional extension name. If set, the function return only options specific for that extension.",
                    "value": "null_string"
                },
                {
                    "name": "details",
                    "type": "Boolean",
                    "desc": "Retrieve details settings or only the current value for each setting. Default is TRUE (retrieve details).",
                    "value": "true"
                }
            ]
        },
        {
            "name": "ini_restore",
            "desc": "Restores a given configuration option to its original value.",
            "flags": [
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "varname",
                    "type": "String",
                    "desc": "The configuration option name."
                }
            ]
        },
        {
            "name": "ini_set",
            "desc": "Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the old value on success, FALSE on failure."
            },
            "args": [
                {
                    "name": "varname",
                    "type": "String",
                    "desc": "Not all the available options can be changed using ini_set(). There is a list of all available options in the appendix."
                },
                {
                    "name": "newvalue",
                    "type": "String",
                    "desc": "The new value for the option."
                }
            ]
        },
        {
            "name": "memory_get_allocation",
            "desc": "Returns the total memory, in bytes, that your PHP script has allocated.",
            "flags": [
                "NoProfile"
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the total memory allocated in bytes."
            },
            "args": [
            ]
        },
        {
            "name": "memory_get_peak_usage",
            "desc": "Returns the peak of memory, in bytes, that's been allocated to your PHP script.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the memory peak in bytes."
            },
            "args": [
                {
                    "name": "real_usage",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "Set this to TRUE to get the real size of memory allocated from system. If not set or FALSE only the memory used by emalloc() is reported."
                }
            ]
        },
        {
            "name": "memory_get_usage",
            "desc": "Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the memory amount in bytes."
            },
            "args": [
                {
                    "name": "real_usage",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "Set this to TRUE to get the real size of memory allocated from system. If not set or FALSE only the memory used by emalloc() is reported."
                }
            ]
        },
        {
            "name": "php_ini_loaded_file",
            "desc": "Retrieve a path to the loaded php.ini file.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Check if a php.ini file is loaded, and retrieve its path."
            },
            "args": [
            ]
        },
        {
            "name": "php_sapi_name",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the interface type, as a lowercase string.\n\nAlthough not exhaustive, the possible return values include aolserver, apache, apache2filter, apache2handler, caudium, cgi (until PHP 5.3), cgi-fcgi, cli, continuity, embed, isapi, litespeed, milter, nsapi, phttpd, pi3web, roxen, thttpd, tux, and webjames."
            },
            "args": [
            ]
        },
        {
            "name": "php_uname",
            "desc": "php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on.\n\nOn some older UNIX platforms, it may not be able to determine the current OS information in which case it will revert to displaying the OS PHP was built on. This will only happen if your uname() library call either doesn't exist or doesn't work.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the description, as a string."
            },
            "args": [
                {
                    "name": "mode",
                    "type": "String",
                    "value": "null_string",
                    "desc": "mode is a single character that defines what information is returned: 'a': This is the default. Contains all modes in the sequence \"s n r v m\". 's': Operating system name. eg. FreeBSD. 'n': Host name. eg. localhost.example.com. 'r': Release name. eg. 5.1.2-RELEASE. 'v': Version information. Varies a lot between operating systems. 'm': Machine type. eg. i386."
                }
            ]
        },
        {
            "name": "phpinfo",
            "desc": "Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.\n\nBecause every system is setup differently, phpinfo() is commonly used to check configuration settings and for available predefined variables on a given system.\n\nphpinfo() is also a valuable debugging tool as it contains all EGPCS (Environment, GET, POST, Cookie, Server) data.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "what",
                    "type": "Int32",
                    "value": "0",
                    "desc": null
                }
            ]
        },
        {
            "name": "phpversion",
            "desc": "Returns a string containing the version of the currently running PHP parser or extension.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "If the optional extension parameter is specified, phpversion() returns the version of that extension, or FALSE if there is no version information associated or the extension isn't enabled."
            },
            "args": [
                {
                    "name": "extension",
                    "type": "String",
                    "value": "null_string",
                    "desc": "An optional extension name."
                }
            ]
        },
        {
            "name": "putenv",
            "desc": "Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.\n\nSetting certain environment variables may be a potential security breach. The safe_mode_allowed_env_vars directive contains a comma-delimited list of prefixes. In Safe Mode, the user may only alter environment variables whose names begin with the prefixes supplied by this directive. By default, users will only be able to set environment variables that begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive is empty, PHP will let the user modify ANY environment variable!\n\nThe safe_mode_protected_env_vars directive contains a comma-delimited list of environment variables, that the end user won't be able to change using putenv(). These variables will be protected even if safe_mode_allowed_env_vars is set to allow to change them.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "setting",
                    "type": "String",
                    "desc": "The setting, like \"FOO=BAR\""
                }
            ]
        },
        {
            "name": "set_magic_quotes_runtime",
            "desc": "Set the current active configuration setting of magic_quotes_runtime. WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "new_setting",
                    "type": "Boolean",
                    "desc": "FALSE for off, TRUE for on."
                }
            ]
        },
        {
            "name": "set_time_limit",
            "desc": "Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini.\n\nWhen called, set_time_limit() restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as set_time_limit(20) is made, the script will run for a total of 45 seconds before timing out.",
            "flags": [
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "seconds",
                    "type": "Int32",
                    "desc": "The maximum execution time, in seconds. If set to zero, no time limit is imposed."
                }
            ]
        },
        {
            "name": "sys_get_temp_dir",
            "desc": "Returns the path of the directory PHP stores temporary files in by default.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the path of the temporary directory."
            },
            "args": [
            ]
        },
        {
            "name": "version_compare",
            "desc": "version_compare() compares two \"PHP-standardized\" version number strings. This is useful if you would like to write programs working only on some versions of PHP.\n\nThe function first replaces _, - and + with a dot . in the version strings and also inserts dots . before and after any non number so that for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it splits the results like if you were using explode('.', $ver). Then it compares the parts starting from left to right. If a part contains special version strings these are handled in the following order: any string not found in this list < dev < alpha = a < beta = b < RC = rc < # < pl = p. This way not only versions with different levels like '4.1' and '4.1.2' can be compared but also any PHP specific version containing development state.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "By default, version_compare() returns -1 if the first version is lower than the second, 0 if they are equal, and 1 if the second is lower.\n\nWhen using the optional operator argument, the function will return TRUE if the relationship is the one specified by the operator, FALSE otherwise."
            },
            "args": [
                {
                    "name": "version1",
                    "type": "String",
                    "desc": "First version number."
                },
                {
                    "name": "version2",
                    "type": "String",
                    "desc": "Second version number."
                },
                {
                    "name": "sop",
                    "type": "String",
                    "value": "null_string",
                    "desc": "If you specify the third optional operator argument, you can test for a particular relationship. The possible operators are: <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne respectively.\n\nThis parameter is case-sensitive, so values should be lowercase."
                }
            ]
        },
        {
            "name": "gc_enabled",
            "desc": "Returns status of the circular reference collector.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if the garbage collector is enabled, FALSE otherwise."
            },
            "args": [
            ]
        },
        {
            "name": "gc_enable",
            "desc": "Activates the circular reference collector.",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
            ]
        },
        {
            "name": "gc_disable",
            "desc": "Deactivates the circular reference collector.",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
            ]
        },
        {
            "name": "gc_collect_cycles",
            "desc": "Forces collection of any existing garbage cycles.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns number of collected cycles."
            },
            "args": [
            ]
        },
        {
            "name": "zend_version",
            "desc": "Returns a string containing the version of the currently running Zend Engine.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the Zend Engine version number, as a string."
            },
            "args": [
            ]
        }
    ],
    "classes": [
    ]
}
