.hh_file 1;
#
# Simple test of AssertRAT opcodes
#

.main {
  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 0 "main"
  FCall <> 0 1 "" - "" ""
  PopC

  NewObjD "Foo"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $x
  PopC

  NewObjD "Bar"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $y
  PopC

  NullUninit
  NullUninit
  NullUninit
  CGetL $x
  CGetL $y
  FPushFuncD 2 "obj_type"
  FCall <> 2 1 "" - "" ""
  PopC

  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 0 "obj_type2"
  FCall <> 0 1 "" - "" ""
  PopC

  Int 1
  RetC
}

.class Foo {
  .default_ctor;

  .method [public] returns_int {
    Int 12
    RetC
  }
}

.class Bar extends Foo {
  .default_ctor;
}

.function obj_type($x, $sub) {
  CGetL $x
  AssertRATStk 0 Obj=Foo
  AssertRATL $x Obj=Foo
  AssertRATL $sub Obj<=Bar
  PopC
  AssertRATL $x   Obj=Foo
  AssertRATL $x   Obj<=Foo
  AssertRATL $sub Obj=Bar
  AssertRATL $sub Obj<=Foo
  AssertRATL $sub Obj=Bar
  Int 1
  RetC
}

.function make_bar() {
  NewObjD "Bar"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  AssertRATStk 0 InitNull
  AssertRATStk 1 Obj
  AssertRATStk 1 Obj=Bar
  PopC
  AssertRATStk 0 Obj=Bar
  LockObj
  AssertRATStk 0 Obj=Bar
  RetC
}

.function obj_type2() {
  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 0 "make_bar"
  FCall <> 0 1 "" - "" ""
  AssertRATStk 0 Obj
  AssertRATStk 0 Obj=Bar
  AssertRATL $x Uninit
  AssertRATStk 0 Obj
  SetL $x
  PopC
  Int 1
  RetC
}

.function main() {
  Jmp stuff
out:
  Null
  RetC

stuff:
  NewObjD "Foo"
  Dup
  NullUninit
  NullUninit
  FCallCtor <> 0 1 "" - ""
  PopC
  LockObj
  SetL $obj
  PopC

  CGetL $obj
  NullUninit
  NullUninit
  FCallObjMethodD <> 0 1 "" - "" NullThrows "returns_int"
  AssertRATStk 0 Int
  Int 0
  Add
  SetL $k
  PopC
  Jmp out
}

