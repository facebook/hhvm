{
  "kind": "overloadset",
  "name_html": "expectPatch",
  "compoundname_html": "apache::thrift::test::expectPatch",
  "functions": [
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1a772a90de2de596296b4c6a44e215616a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename P"
        },
        {
          "type_html": "typename T1",
          "defval_html": "typename P::value_type"
        },
        {
          "type_html": "typename T2",
          "defval_html": "T1"
        },
        {
          "type_html": "typename T3",
          "defval_html": "T2"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectPatch",
      "argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected1, const T3 &amp;expected2)",
      "name_html": "expectPatch",
      "param": [
        {
          "type_html": "P",
          "declname_html": "patch"
        },
        {
          "type_html": "const T1 &amp;",
          "declname_html": "actual"
        },
        {
          "type_html": "const T2 &amp;",
          "declname_html": "expected1"
        },
        {
          "type_html": "const T3 &amp;",
          "declname_html": "expected2"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "99",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "99",
        "bodyend": "124"
      },
      "definition": {
        "simple_html": "template &lt;\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2&gt;\nvoid expectPatch(\n    P patch, const T1&amp; actual, const T2&amp; expected1, const T3&amp; expected2)",
        "simple_raw": "template <\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2>\nvoid expectPatch(\n    P patch, const T1& actual, const T2& expected1, const T3& expected2)",
        "detailed_html": "template &lt;\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2&gt;\nvoid expectPatch(\n    P patch, const T1&amp; actual, const T2&amp; expected1, const T3&amp; expected2)",
        "detailed_raw": "template <\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2>\nvoid expectPatch(\n    P patch, const T1& actual, const T2& expected1, const T3& expected2)",
        "original_definition_html": "void apache::thrift::test::expectPatch",
        "original_argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected1, const T3 &amp;expected2)"
      },
      "compoundname_html": "apache::thrift::test::expectPatch",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1a96ed6be7cd731a66b2969beece0f42ad",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename P"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectPatch",
      "argsstring_html": "(P patch, const folly::IOBuf &amp;actual, const folly::IOBuf &amp;expected1, const folly::IOBuf &amp;expected2)",
      "name_html": "expectPatch",
      "param": [
        {
          "type_html": "P",
          "declname_html": "patch"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "actual"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "expected1"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "expected2"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "127",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "127",
        "bodyend": "166"
      },
      "definition": {
        "simple_html": "template &lt;typename P&gt;\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf&amp; actual,\n    const folly::IOBuf&amp; expected1,\n    const folly::IOBuf&amp; expected2)",
        "simple_raw": "template <typename P>\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf& actual,\n    const folly::IOBuf& expected1,\n    const folly::IOBuf& expected2)",
        "detailed_html": "template &lt;typename P&gt;\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf&amp; actual,\n    const folly::IOBuf&amp; expected1,\n    const folly::IOBuf&amp; expected2)",
        "detailed_raw": "template <typename P>\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf& actual,\n    const folly::IOBuf& expected1,\n    const folly::IOBuf& expected2)",
        "original_definition_html": "void apache::thrift::test::expectPatch",
        "original_argsstring_html": "(P patch, const folly::IOBuf &amp;actual, const folly::IOBuf &amp;expected1, const folly::IOBuf &amp;expected2)"
      },
      "compoundname_html": "apache::thrift::test::expectPatch",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1adafbf13aafa3aedd12a90e864c4e055d",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename P"
        },
        {
          "type_html": "typename T1",
          "defval_html": "typename P::value_type"
        },
        {
          "type_html": "typename T2",
          "defval_html": "T1"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectPatch",
      "argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected)",
      "name_html": "expectPatch",
      "param": [
        {
          "type_html": "P",
          "declname_html": "patch"
        },
        {
          "type_html": "const T1 &amp;",
          "declname_html": "actual"
        },
        {
          "type_html": "const T2 &amp;",
          "declname_html": "expected"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "169",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "169",
        "bodyend": "171"
      },
      "definition": {
        "simple_html": "template &lt;typename P, typename T1 = typename P::value_type, typename T2 = T1&gt;\nvoid expectPatch(P patch, const T1&amp; actual, const T2&amp; expected)",
        "simple_raw": "template <typename P, typename T1 = typename P::value_type, typename T2 = T1>\nvoid expectPatch(P patch, const T1& actual, const T2& expected)",
        "detailed_html": "template &lt;typename P, typename T1 = typename P::value_type, typename T2 = T1&gt;\nvoid expectPatch(P patch, const T1&amp; actual, const T2&amp; expected)",
        "detailed_raw": "template <typename P, typename T1 = typename P::value_type, typename T2 = T1>\nvoid expectPatch(P patch, const T1& actual, const T2& expected)",
        "original_definition_html": "void apache::thrift::test::expectPatch",
        "original_argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected)"
      },
      "compoundname_html": "apache::thrift::test::expectPatch",
      "namespace_html": "apache::thrift::test"
    }
  ],
  "filepath": "f/assoc/file/thrift/lib/cpp2/op/Testing.cpp/expectPatch",
  "namespace_html": "apache::thrift::test",
  "minprot": "public",
  "displayname_html": "expectPatch",
  "brief_html": "",
  "groupname_html": "",
  "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.cpp/expectPatch",
  "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.cpp/expectPatch"
}