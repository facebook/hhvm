<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  (class|self|parent|static)::$propertyName
 *  (class|self|parent|static)::${propertyExpression}
 *  ${classExpression}::::$propertyName
 *  ${classExpression}::${propertyExpression}
 */
class ClassPropertyExpression /*implements IClassPropertyExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?ITypeExpression*/ $class;
  private /*?IExpression*/ $classExpression;
  private /*?string*/ $propertyName;
  private /*?IExpression*/ $propertyExpression;

  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function getClass() /*: ?ITypeExpression*/ {
    return $this->class;
  }
  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function setClass(/*?ITypeExpression*/ $value) /*: this*/ {
    $this->class = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function getClassExpression() /*: ?IExpression*/ {
    return $this->classExpression;
  }
  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function setClassExpression(/*?IExpression*/ $value) /*: this*/ {
    $this->classExpression = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function getPropertyName() /*: ?string*/ {
    return $this->propertyName;
  }
  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function setPropertyName(/*?string*/ $value) /*: this*/ {
    $this->propertyName = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function getPropertyExpression() /*: ?IExpression*/ {
    return $this->propertyExpression;
  }
  /**
   *  (class|self|parent|static)::$propertyName
   *  (class|self|parent|static)::${propertyExpression}
   *  ${classExpression}::::$propertyName
   *  ${classExpression}::${propertyExpression}
   */
  public function setPropertyExpression(/*?IExpression*/ $value) /*: this*/ {
    $this->propertyExpression = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitClassPropertyExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitClassPropertyExpression")) {
      // UNSAFE
      return $visitor->visitClassPropertyExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->class !== null) {
      yield $this->class;
    }
    if ($this->classExpression !== null) {
      yield $this->classExpression;
    }
    if ($this->propertyExpression !== null) {
      yield $this->propertyExpression;
    }
  }
}
}
