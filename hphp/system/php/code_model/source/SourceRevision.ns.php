<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  A source commit to a code repository such a GIT or Mercurial.
 */
class SourceRevision /*implements ISourceRevision*/ {

  private /*?string*/ $repository;
  private /*?string*/ $branch;
  private /*?int*/ $number;
  private /*?string*/ $hash;

  /**
   * The URL of a source code repository such a GIT or Mercurial.
   */
  public function getRepository() /*: string*/ {
    if ($this->repository === null) {
      throw new \Exception("Repository is not initialized");
    }
    return $this->repository;
  }
  /**
   * The URL of a source code repository such a GIT or Mercurial.
   */
  public function setRepository(/*string*/ $value) /*: this*/ {
    $this->repository = $value;
    return $this;
  }

  /**
   * The name of a branch in a code repository, such as "master" or "trunk"
   */
  public function getBranch() /*: string*/ {
    if ($this->branch === null) {
      throw new \Exception("Branch is not initialized");
    }
    return $this->branch;
  }
  /**
   * The name of a branch in a code repository, such as "master" or "trunk"
   */
  public function setBranch(/*string*/ $value) /*: this*/ {
    $this->branch = $value;
    return $this;
  }

  /**
   * The serial number of this revision. Unique and ascending within a branch.
   */
  public function getNumber() /*: int*/ {
    if ($this->number === null) {
      throw new \Exception("Number is not initialized");
    }
    return $this->number;
  }
  /**
   * The serial number of this revision. Unique and ascending within a branch.
   */
  public function setNumber(/*int*/ $value) /*: this*/ {
    $this->number = $value;
    return $this;
  }

  /**
   * A hash over the contents of the revision.
   * It is highly likely that no two revisions will ever have the same hash.
   */
  public function getHash() /*: string*/ {
    if ($this->hash === null) {
      throw new \Exception("Hash is not initialized");
    }
    return $this->hash;
  }
  /**
   * A hash over the contents of the revision.
   * It is highly likely that no two revisions will ever have the same hash.
   */
  public function setHash(/*string*/ $value) /*: this*/ {
    $this->hash = $value;
    return $this;
  }

  /**
   * Calls $visitor->visitSourceRevision($this) if
   * such a method exists on $visitor.
   * If not it returns null.
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitSourceRevision")) {
      // UNSAFE
      return $visitor->visitSourceRevision($this);
    } else {
      return null;
    }
  }

}
}
