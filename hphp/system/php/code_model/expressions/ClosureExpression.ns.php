<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  function (params) use (vars) { statements }
 */
class ClosureExpression /*implements IClosureExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?IFunctionStatement*/ $ffunction;
  private /*?Vector<IExpression>*/ $capturedVariables;

  /**
   *  function (params) use (vars) { statements }
   */
  public function getFunction() /*: IFunctionStatement*/ {
    if ($this->ffunction === null) {
      throw new \Exception("Function is not initialized");
    }
    return $this->ffunction;
  }
  /**
   *  function (params) use (vars) { statements }
   */
  public function setFunction(/*IFunctionStatement*/ $value) /*: this*/ {
    $this->ffunction = $value;
    return $this;
  }

  /**
   *  function (params) use (vars) { statements }
   */
  public function getCapturedVariables() /*: Vector<IExpression>*/ {
    if ($this->capturedVariables === null) {
      $this->capturedVariables = Vector {};
    }
    return $this->capturedVariables;
  }
  /**
   *  function (params) use (vars) { statements }
   */
  public function setCapturedVariables(/*Vector<IExpression>*/ $value) /*: this*/ {
    $this->capturedVariables = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitClosureExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitClosureExpression")) {
      // UNSAFE
      return $visitor->visitClosureExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->ffunction !== null) {
      yield $this->ffunction;
    }
    if ($this->capturedVariables !== null) {
      foreach ($this->capturedVariables as $elem) {
        yield $elem;
      }
    }
  }
}
}
