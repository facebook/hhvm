/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::cpp2_struct_footprint::SimpleStruct> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).field_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::SimpleStruct");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::ComplexStruct> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).nested_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::ComplexStruct");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::Struct1> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::Struct1");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::Struct2> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::Struct2");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::Struct3> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::Struct3");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::Struct4> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::Struct4");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::Struct5> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::Struct5");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::ExStruct> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::ExStruct");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2_struct_footprint::TestUnion> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).int_value_ref());
    case 2:
      return f(1, static_cast<T&&>(t).struct_value_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2_struct_footprint::TestUnion");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
