/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/py3/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_types.h"
#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::py3::simple::AnEnum>::size;
folly::Range<::py3::simple::AnEnum const*> const TEnumTraits<::py3::simple::AnEnum>::values = folly::range(TEnumDataStorage<::py3::simple::AnEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::py3::simple::AnEnum>::names = folly::range(TEnumDataStorage<::py3::simple::AnEnum>::names);

bool TEnumTraits<::py3::simple::AnEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::AnEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace py3 { namespace simple {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _AnEnum_EnumMapFactory::ValuesToNamesMapType _AnEnum_VALUES_TO_NAMES = _AnEnum_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
}} // py3::simple

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::py3::simple::AnEnumRenamed>::size;
folly::Range<::py3::simple::AnEnumRenamed const*> const TEnumTraits<::py3::simple::AnEnumRenamed>::values = folly::range(TEnumDataStorage<::py3::simple::AnEnumRenamed>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::py3::simple::AnEnumRenamed>::names = folly::range(TEnumDataStorage<::py3::simple::AnEnumRenamed>::names);

bool TEnumTraits<::py3::simple::AnEnumRenamed>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::AnEnumRenamed>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace py3 { namespace simple {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _AnEnumRenamed_EnumMapFactory::ValuesToNamesMapType _AnEnumRenamed_VALUES_TO_NAMES = _AnEnumRenamed_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
}} // py3::simple

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::py3::simple::Flags>::size;
folly::Range<::py3::simple::Flags const*> const TEnumTraits<::py3::simple::Flags>::values = folly::range(TEnumDataStorage<::py3::simple::Flags>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::py3::simple::Flags>::names = folly::range(TEnumDataStorage<::py3::simple::Flags>::names);

bool TEnumTraits<::py3::simple::Flags>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::Flags>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace py3 { namespace simple {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _Flags_EnumMapFactory::ValuesToNamesMapType _Flags_VALUES_TO_NAMES = _Flags_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::SimpleException>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::SimpleException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece SimpleException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleException>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece SimpleException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleException>::name;
}

SimpleException::SimpleException(const SimpleException&) = default;
SimpleException& SimpleException::operator=(const SimpleException&) = default;
SimpleException::SimpleException() :
      __fbthrift_field_err_code() {
}


SimpleException::~SimpleException() {}

SimpleException::SimpleException(FOLLY_MAYBE_UNUSED SimpleException&& other) noexcept :
    __fbthrift_field_err_code(std::move(other.__fbthrift_field_err_code)),
    __isset(other.__isset) {
}

SimpleException& SimpleException::operator=(FOLLY_MAYBE_UNUSED SimpleException&& other) noexcept {
    this->__fbthrift_field_err_code = std::move(other.__fbthrift_field_err_code);
    __isset = other.__isset;
    return *this;
}


SimpleException::SimpleException(apache::thrift::FragileConstructor, ::std::int16_t err_code__arg) :
    __fbthrift_field_err_code(std::move(err_code__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void SimpleException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_err_code = ::std::int16_t();
  __isset = {};
}

void SimpleException::__fbthrift_clear_terse_fields() {
}

bool SimpleException::__fbthrift_is_empty() const {
  return false;
}

bool SimpleException::operator==(FOLLY_MAYBE_UNUSED const SimpleException& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.err_code_ref() == rhs.err_code_ref())) {
    return false;
  }
  return true;
}

bool SimpleException::operator<(FOLLY_MAYBE_UNUSED const SimpleException& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.err_code_ref() == rhs.err_code_ref())) {
    return lhs.err_code_ref() < rhs.err_code_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED SimpleException& a, FOLLY_MAYBE_UNUSED SimpleException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_err_code, b.__fbthrift_field_err_code);
  swap(a.__isset, b.__isset);
}

template void SimpleException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SimpleException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::OptionalRefStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::OptionalRefStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece OptionalRefStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalRefStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece OptionalRefStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OptionalRefStruct>::name;
}

OptionalRefStruct::OptionalRefStruct(const OptionalRefStruct& srcObj) :
    __fbthrift_field_optional_blob(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(srcObj.__fbthrift_field_optional_blob)),
    __isset(srcObj.__isset) {
}

OptionalRefStruct& OptionalRefStruct::operator=(const OptionalRefStruct& other) {
  OptionalRefStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

OptionalRefStruct::OptionalRefStruct(FOLLY_MAYBE_UNUSED OptionalRefStruct&& other) noexcept :
    __fbthrift_field_optional_blob(std::move(other.__fbthrift_field_optional_blob)),
    __isset(other.__isset) {
}

OptionalRefStruct& OptionalRefStruct::operator=(FOLLY_MAYBE_UNUSED OptionalRefStruct&& other) noexcept {
    this->__fbthrift_field_optional_blob = std::move(other.__fbthrift_field_optional_blob);
    __isset = other.__isset;
    return *this;
}


OptionalRefStruct::OptionalRefStruct(apache::thrift::FragileConstructor, ::py3::simple::IOBufPtr optional_blob__arg) :
    __fbthrift_field_optional_blob(std::move(optional_blob__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void OptionalRefStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_optional_blob = apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::fromStringLiteral("");
  __isset = {};
}

void OptionalRefStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalRefStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0));
}

bool OptionalRefStruct::operator==(FOLLY_MAYBE_UNUSED const OptionalRefStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.optional_blob_ref().has_value() != rhs.optional_blob_ref().has_value() || (lhs.optional_blob_ref().has_value() && !apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(lhs.__fbthrift_field_optional_blob, rhs.__fbthrift_field_optional_blob))) {
    return false;
  }
  return true;
}

bool OptionalRefStruct::operator<(FOLLY_MAYBE_UNUSED const OptionalRefStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.optional_blob_ref().has_value() != rhs.optional_blob_ref().has_value() || (lhs.optional_blob_ref().has_value() && !apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(lhs.__fbthrift_field_optional_blob, rhs.__fbthrift_field_optional_blob))) {
    return !lhs.optional_blob_ref().has_value() || (rhs.optional_blob_ref().has_value() && apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isLess(lhs.__fbthrift_field_optional_blob, rhs.__fbthrift_field_optional_blob));
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED OptionalRefStruct& a, FOLLY_MAYBE_UNUSED OptionalRefStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_optional_blob, b.__fbthrift_field_optional_blob);
  swap(a.__isset, b.__isset);
}

template void OptionalRefStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalRefStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalRefStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalRefStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalRefStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalRefStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalRefStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalRefStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::SimpleStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::SimpleStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece SimpleStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece SimpleStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleStruct>::name;
}

SimpleStruct::SimpleStruct(const SimpleStruct&) = default;
SimpleStruct& SimpleStruct::operator=(const SimpleStruct&) = default;
SimpleStruct::SimpleStruct(FOLLY_MAYBE_UNUSED SimpleStruct&& other) noexcept :
    __fbthrift_field_is_on(std::move(other.__fbthrift_field_is_on)),
    __fbthrift_field_tiny_int(std::move(other.__fbthrift_field_tiny_int)),
    __fbthrift_field_small_int(std::move(other.__fbthrift_field_small_int)),
    __fbthrift_field_nice_sized_int(std::move(other.__fbthrift_field_nice_sized_int)),
    __fbthrift_field_big_int(std::move(other.__fbthrift_field_big_int)),
    __fbthrift_field_real(std::move(other.__fbthrift_field_real)),
    __fbthrift_field_smaller_real(std::move(other.__fbthrift_field_smaller_real)),
    __fbthrift_field_hidden_field(std::move(other.__fbthrift_field_hidden_field)),
    __isset(other.__isset) {
}

SimpleStruct& SimpleStruct::operator=(FOLLY_MAYBE_UNUSED SimpleStruct&& other) noexcept {
    this->__fbthrift_field_is_on = std::move(other.__fbthrift_field_is_on);
    this->__fbthrift_field_tiny_int = std::move(other.__fbthrift_field_tiny_int);
    this->__fbthrift_field_small_int = std::move(other.__fbthrift_field_small_int);
    this->__fbthrift_field_nice_sized_int = std::move(other.__fbthrift_field_nice_sized_int);
    this->__fbthrift_field_big_int = std::move(other.__fbthrift_field_big_int);
    this->__fbthrift_field_real = std::move(other.__fbthrift_field_real);
    this->__fbthrift_field_smaller_real = std::move(other.__fbthrift_field_smaller_real);
    this->__fbthrift_field_hidden_field = std::move(other.__fbthrift_field_hidden_field);
    __isset = other.__isset;
    return *this;
}


SimpleStruct::SimpleStruct(apache::thrift::FragileConstructor, bool is_on__arg, ::std::int8_t tiny_int__arg, ::std::int16_t small_int__arg, ::std::int32_t nice_sized_int__arg, ::std::int64_t big_int__arg, double real__arg, float smaller_real__arg, ::std::int16_t hidden_field__arg) :
    __fbthrift_field_is_on(std::move(is_on__arg)),
    __fbthrift_field_tiny_int(std::move(tiny_int__arg)),
    __fbthrift_field_small_int(std::move(small_int__arg)),
    __fbthrift_field_nice_sized_int(std::move(nice_sized_int__arg)),
    __fbthrift_field_big_int(std::move(big_int__arg)),
    __fbthrift_field_real(std::move(real__arg)),
    __fbthrift_field_smaller_real(std::move(smaller_real__arg)),
    __fbthrift_field_hidden_field(std::move(hidden_field__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}


void SimpleStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_is_on = bool();
  this->__fbthrift_field_tiny_int = ::std::int8_t();
  this->__fbthrift_field_small_int = ::std::int16_t();
  this->__fbthrift_field_nice_sized_int = ::std::int32_t();
  this->__fbthrift_field_big_int = ::std::int64_t();
  this->__fbthrift_field_real = double();
  this->__fbthrift_field_smaller_real = float();
  this->__fbthrift_field_hidden_field = ::std::int16_t();
  __isset = {};
}

void SimpleStruct::__fbthrift_clear_terse_fields() {
}

bool SimpleStruct::__fbthrift_is_empty() const {
  return false;
}

bool SimpleStruct::operator==(FOLLY_MAYBE_UNUSED const SimpleStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.is_on_ref() == rhs.is_on_ref())) {
    return false;
  }
  if (!(lhs.tiny_int_ref() == rhs.tiny_int_ref())) {
    return false;
  }
  if (!(lhs.small_int_ref() == rhs.small_int_ref())) {
    return false;
  }
  if (!(lhs.nice_sized_int_ref() == rhs.nice_sized_int_ref())) {
    return false;
  }
  if (!(lhs.big_int_ref() == rhs.big_int_ref())) {
    return false;
  }
  if (!(lhs.real_ref() == rhs.real_ref())) {
    return false;
  }
  if (!(lhs.smaller_real_ref() == rhs.smaller_real_ref())) {
    return false;
  }
  if (!(lhs.hidden_field_ref() == rhs.hidden_field_ref())) {
    return false;
  }
  return true;
}

bool SimpleStruct::operator<(FOLLY_MAYBE_UNUSED const SimpleStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.is_on_ref() == rhs.is_on_ref())) {
    return lhs.is_on_ref() < rhs.is_on_ref();
  }
  if (!(lhs.tiny_int_ref() == rhs.tiny_int_ref())) {
    return lhs.tiny_int_ref() < rhs.tiny_int_ref();
  }
  if (!(lhs.small_int_ref() == rhs.small_int_ref())) {
    return lhs.small_int_ref() < rhs.small_int_ref();
  }
  if (!(lhs.nice_sized_int_ref() == rhs.nice_sized_int_ref())) {
    return lhs.nice_sized_int_ref() < rhs.nice_sized_int_ref();
  }
  if (!(lhs.big_int_ref() == rhs.big_int_ref())) {
    return lhs.big_int_ref() < rhs.big_int_ref();
  }
  if (!(lhs.real_ref() == rhs.real_ref())) {
    return lhs.real_ref() < rhs.real_ref();
  }
  if (!(lhs.smaller_real_ref() == rhs.smaller_real_ref())) {
    return lhs.smaller_real_ref() < rhs.smaller_real_ref();
  }
  if (!(lhs.hidden_field_ref() == rhs.hidden_field_ref())) {
    return lhs.hidden_field_ref() < rhs.hidden_field_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED SimpleStruct& a, FOLLY_MAYBE_UNUSED SimpleStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_is_on, b.__fbthrift_field_is_on);
  swap(a.__fbthrift_field_tiny_int, b.__fbthrift_field_tiny_int);
  swap(a.__fbthrift_field_small_int, b.__fbthrift_field_small_int);
  swap(a.__fbthrift_field_nice_sized_int, b.__fbthrift_field_nice_sized_int);
  swap(a.__fbthrift_field_big_int, b.__fbthrift_field_big_int);
  swap(a.__fbthrift_field_real, b.__fbthrift_field_real);
  swap(a.__fbthrift_field_smaller_real, b.__fbthrift_field_smaller_real);
  swap(a.__fbthrift_field_hidden_field, b.__fbthrift_field_hidden_field);
  swap(a.__isset, b.__isset);
}

template void SimpleStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::HiddenTypeFieldsStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::HiddenTypeFieldsStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece HiddenTypeFieldsStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HiddenTypeFieldsStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece HiddenTypeFieldsStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HiddenTypeFieldsStruct>::name;
}

HiddenTypeFieldsStruct::HiddenTypeFieldsStruct(const HiddenTypeFieldsStruct& srcObj) :
    __fbthrift_field_field1(srcObj.__fbthrift_field_field1),
    __fbthrift_field_field2(srcObj.__fbthrift_field_field2),
    __fbthrift_field_field3(srcObj.__fbthrift_field_field3),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
}

HiddenTypeFieldsStruct& HiddenTypeFieldsStruct::operator=(const HiddenTypeFieldsStruct& other) {
  HiddenTypeFieldsStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

HiddenTypeFieldsStruct::HiddenTypeFieldsStruct(FOLLY_MAYBE_UNUSED HiddenTypeFieldsStruct&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)),
    __fbthrift_field_field3(std::move(other.__fbthrift_field_field3)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
}

HiddenTypeFieldsStruct& HiddenTypeFieldsStruct::operator=(FOLLY_MAYBE_UNUSED HiddenTypeFieldsStruct&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    this->__fbthrift_field_field3 = std::move(other.__fbthrift_field_field3);
    __isset = other.__isset;
    return *this;
}


HiddenTypeFieldsStruct::HiddenTypeFieldsStruct(apache::thrift::FragileConstructor, ::py3::simple::AdaptedTypeDef field1__arg, ::std::vector<::py3::simple::AdaptedTypeDef> field2__arg, ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> field3__arg) :
    __fbthrift_field_field1(std::move(field1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)),
    __fbthrift_field_field3(std::move(field3__arg)) {
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void HiddenTypeFieldsStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<Adapter, 1>(__fbthrift_field_field1, *this);
  this->__fbthrift_field_field2.clear();
  this->__fbthrift_field_field3.clear();
  __isset = {};
}

void HiddenTypeFieldsStruct::__fbthrift_clear_terse_fields() {
}

bool HiddenTypeFieldsStruct::__fbthrift_is_empty() const {
  return false;
}

bool HiddenTypeFieldsStruct::operator==(FOLLY_MAYBE_UNUSED const HiddenTypeFieldsStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<Adapter>(lhs.__fbthrift_field_field1, rhs.__fbthrift_field_field1)) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  return true;
}

const ::std::vector<::py3::simple::AdaptedTypeDef>& HiddenTypeFieldsStruct::get_field2() const& {
  return __fbthrift_field_field2;
}

::std::vector<::py3::simple::AdaptedTypeDef> HiddenTypeFieldsStruct::get_field2() && {
  return std::move(__fbthrift_field_field2);
}

const ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>& HiddenTypeFieldsStruct::get_field3() const& {
  return __fbthrift_field_field3;
}

::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> HiddenTypeFieldsStruct::get_field3() && {
  return std::move(__fbthrift_field_field3);
}


void swap(FOLLY_MAYBE_UNUSED HiddenTypeFieldsStruct& a, FOLLY_MAYBE_UNUSED HiddenTypeFieldsStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
  swap(a.__fbthrift_field_field3, b.__fbthrift_field_field3);
  swap(a.__isset, b.__isset);
}

template void HiddenTypeFieldsStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HiddenTypeFieldsStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HiddenTypeFieldsStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HiddenTypeFieldsStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        HiddenTypeFieldsStruct,
        ::apache::thrift::type_class::structure,
        ::py3::simple::AdaptedTypeDef>,
    "inconsistent use of json option");

}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::GeneratedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::GeneratedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece GeneratedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<GeneratedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece GeneratedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<GeneratedStruct>::name;
}


GeneratedStruct::GeneratedStruct(apache::thrift::FragileConstructor, ::std::int16_t the__arg) :
    __fbthrift_field_the(std::move(the__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void GeneratedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_the = ::std::int16_t();
  __isset = {};
}

void GeneratedStruct::__fbthrift_clear_terse_fields() {
}

bool GeneratedStruct::__fbthrift_is_empty() const {
  return false;
}

bool GeneratedStruct::operator==(FOLLY_MAYBE_UNUSED const GeneratedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.the_ref() == rhs.the_ref())) {
    return false;
  }
  return true;
}

bool GeneratedStruct::operator<(FOLLY_MAYBE_UNUSED const GeneratedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.the_ref() == rhs.the_ref())) {
    return lhs.the_ref() < rhs.the_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED GeneratedStruct& a, FOLLY_MAYBE_UNUSED GeneratedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_the, b.__fbthrift_field_the);
  swap(a.__isset, b.__isset);
}

template void GeneratedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t GeneratedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GeneratedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GeneratedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void GeneratedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t GeneratedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GeneratedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t GeneratedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::detail::AdaptedUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::detail::AdaptedUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::size;
folly::Range<::py3::simple::detail::AdaptedUnion::Type const*> const TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::values = folly::range(TEnumDataStorage<::py3::simple::detail::AdaptedUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::names = folly::range(TEnumDataStorage<::py3::simple::detail::AdaptedUnion::Type>::names);

bool TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace py3 { namespace simple {namespace detail {


const folly::StringPiece AdaptedUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptedUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece AdaptedUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptedUnion>::name;
}

void AdaptedUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::best:
      destruct(value_.best);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool AdaptedUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool AdaptedUnion::operator==(const AdaptedUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::best:
      return value_.best == rhs.value_.best;
    default:
      return true;
  }
}

bool AdaptedUnion::operator<(FOLLY_MAYBE_UNUSED const AdaptedUnion& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::best:
      return lhs.value_.best < rhs.value_.best;
    default:
      return false;
  }
}

void swap(AdaptedUnion& a, AdaptedUnion& b) {
  AdaptedUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void AdaptedUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AdaptedUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AdaptedUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AdaptedUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AdaptedUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptedUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptedUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptedUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::HiddenException>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::HiddenException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece HiddenException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HiddenException>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece HiddenException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HiddenException>::name;
}

HiddenException::HiddenException(const HiddenException&) = default;
HiddenException& HiddenException::operator=(const HiddenException&) = default;
HiddenException::HiddenException() :
      __fbthrift_field_test() {
}


HiddenException::~HiddenException() {}

HiddenException::HiddenException(FOLLY_MAYBE_UNUSED HiddenException&& other) noexcept :
    __fbthrift_field_test(std::move(other.__fbthrift_field_test)),
    __isset(other.__isset) {
}

HiddenException& HiddenException::operator=(FOLLY_MAYBE_UNUSED HiddenException&& other) noexcept {
    this->__fbthrift_field_test = std::move(other.__fbthrift_field_test);
    __isset = other.__isset;
    return *this;
}


HiddenException::HiddenException(apache::thrift::FragileConstructor, ::std::int16_t test__arg) :
    __fbthrift_field_test(std::move(test__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void HiddenException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_test = ::std::int16_t();
  __isset = {};
}

void HiddenException::__fbthrift_clear_terse_fields() {
}

bool HiddenException::__fbthrift_is_empty() const {
  return false;
}

bool HiddenException::operator==(FOLLY_MAYBE_UNUSED const HiddenException& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.test_ref() == rhs.test_ref())) {
    return false;
  }
  return true;
}

bool HiddenException::operator<(FOLLY_MAYBE_UNUSED const HiddenException& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.test_ref() == rhs.test_ref())) {
    return lhs.test_ref() < rhs.test_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED HiddenException& a, FOLLY_MAYBE_UNUSED HiddenException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_test, b.__fbthrift_field_test);
  swap(a.__isset, b.__isset);
}

template void HiddenException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HiddenException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HiddenException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HiddenException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HiddenException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HiddenException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HiddenException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HiddenException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::ComplexStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::ComplexStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece ComplexStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComplexStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ComplexStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComplexStruct>::name;
}

ComplexStruct::ComplexStruct(const ComplexStruct&) = default;
ComplexStruct& ComplexStruct::operator=(const ComplexStruct&) = default;
ComplexStruct::ComplexStruct() :
      __fbthrift_field_an_integer(),
      __fbthrift_field_an_enum() {
}


ComplexStruct::~ComplexStruct() {}

ComplexStruct::ComplexStruct(FOLLY_MAYBE_UNUSED ComplexStruct&& other) noexcept :
    __fbthrift_field_structOne(std::move(other.__fbthrift_field_structOne)),
    __fbthrift_field_structTwo(std::move(other.__fbthrift_field_structTwo)),
    __fbthrift_field_an_integer(std::move(other.__fbthrift_field_an_integer)),
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_an_enum(std::move(other.__fbthrift_field_an_enum)),
    __fbthrift_field_some_bytes(std::move(other.__fbthrift_field_some_bytes)),
    __fbthrift_field_from(std::move(other.__fbthrift_field_from)),
    __fbthrift_field_cdef(std::move(other.__fbthrift_field_cdef)),
    __fbthrift_field_bytes_with_cpp_type(std::move(other.__fbthrift_field_bytes_with_cpp_type)),
    __isset(other.__isset) {
}

ComplexStruct& ComplexStruct::operator=(FOLLY_MAYBE_UNUSED ComplexStruct&& other) noexcept {
    this->__fbthrift_field_structOne = std::move(other.__fbthrift_field_structOne);
    this->__fbthrift_field_structTwo = std::move(other.__fbthrift_field_structTwo);
    this->__fbthrift_field_an_integer = std::move(other.__fbthrift_field_an_integer);
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_an_enum = std::move(other.__fbthrift_field_an_enum);
    this->__fbthrift_field_some_bytes = std::move(other.__fbthrift_field_some_bytes);
    this->__fbthrift_field_from = std::move(other.__fbthrift_field_from);
    this->__fbthrift_field_cdef = std::move(other.__fbthrift_field_cdef);
    this->__fbthrift_field_bytes_with_cpp_type = std::move(other.__fbthrift_field_bytes_with_cpp_type);
    __isset = other.__isset;
    return *this;
}


ComplexStruct::ComplexStruct(apache::thrift::FragileConstructor, ::py3::simple::SimpleStruct structOne__arg, ::py3::simple::SimpleStruct structTwo__arg, ::std::int32_t an_integer__arg, ::std::string name__arg, ::py3::simple::AnEnum an_enum__arg, ::std::string some_bytes__arg, ::std::string from__arg, ::std::string cdef__arg, ::py3::simple::foo_bar bytes_with_cpp_type__arg) :
    __fbthrift_field_structOne(std::move(structOne__arg)),
    __fbthrift_field_structTwo(std::move(structTwo__arg)),
    __fbthrift_field_an_integer(std::move(an_integer__arg)),
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_an_enum(std::move(an_enum__arg)),
    __fbthrift_field_some_bytes(std::move(some_bytes__arg)),
    __fbthrift_field_from(std::move(from__arg)),
    __fbthrift_field_cdef(std::move(cdef__arg)),
    __fbthrift_field_bytes_with_cpp_type(std::move(bytes_with_cpp_type__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void ComplexStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_structOne);
  ::apache::thrift::clear(this->__fbthrift_field_structTwo);
  this->__fbthrift_field_an_integer = ::std::int32_t();
  this->__fbthrift_field_name = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_an_enum = ::py3::simple::AnEnum();
  this->__fbthrift_field_some_bytes = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_from = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_cdef = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_bytes_with_cpp_type = apache::thrift::StringTraits<foo::Bar>::fromStringLiteral("");
  __isset = {};
}

void ComplexStruct::__fbthrift_clear_terse_fields() {
}

bool ComplexStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComplexStruct::operator==(FOLLY_MAYBE_UNUSED const ComplexStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.structOne_ref() == rhs.structOne_ref())) {
    return false;
  }
  if (!(lhs.structTwo_ref() == rhs.structTwo_ref())) {
    return false;
  }
  if (!(lhs.an_integer_ref() == rhs.an_integer_ref())) {
    return false;
  }
  if (!(lhs.name_ref() == rhs.name_ref())) {
    return false;
  }
  if (!(lhs.an_enum_ref() == rhs.an_enum_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_some_bytes, rhs.__fbthrift_field_some_bytes)) {
    return false;
  }
  if (!(lhs.from_ref() == rhs.from_ref())) {
    return false;
  }
  if (!(lhs.cdef_ref() == rhs.cdef_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<foo::Bar>::isEqual(lhs.__fbthrift_field_bytes_with_cpp_type, rhs.__fbthrift_field_bytes_with_cpp_type)) {
    return false;
  }
  return true;
}

bool ComplexStruct::operator<(FOLLY_MAYBE_UNUSED const ComplexStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.structOne_ref() == rhs.structOne_ref())) {
    return lhs.structOne_ref() < rhs.structOne_ref();
  }
  if (!(lhs.structTwo_ref() == rhs.structTwo_ref())) {
    return lhs.structTwo_ref() < rhs.structTwo_ref();
  }
  if (!(lhs.an_integer_ref() == rhs.an_integer_ref())) {
    return lhs.an_integer_ref() < rhs.an_integer_ref();
  }
  if (!(lhs.name_ref() == rhs.name_ref())) {
    return lhs.name_ref() < rhs.name_ref();
  }
  if (!(lhs.an_enum_ref() == rhs.an_enum_ref())) {
    return lhs.an_enum_ref() < rhs.an_enum_ref();
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_some_bytes, rhs.__fbthrift_field_some_bytes)) {
    return apache::thrift::StringTraits<std::string>::isLess(lhs.__fbthrift_field_some_bytes, rhs.__fbthrift_field_some_bytes);
  }
  if (!(lhs.from_ref() == rhs.from_ref())) {
    return lhs.from_ref() < rhs.from_ref();
  }
  if (!(lhs.cdef_ref() == rhs.cdef_ref())) {
    return lhs.cdef_ref() < rhs.cdef_ref();
  }
  if (!apache::thrift::StringTraits<foo::Bar>::isEqual(lhs.__fbthrift_field_bytes_with_cpp_type, rhs.__fbthrift_field_bytes_with_cpp_type)) {
    return apache::thrift::StringTraits<foo::Bar>::isLess(lhs.__fbthrift_field_bytes_with_cpp_type, rhs.__fbthrift_field_bytes_with_cpp_type);
  }
  return false;
}

const ::py3::simple::SimpleStruct& ComplexStruct::get_structOne() const& {
  return __fbthrift_field_structOne;
}

::py3::simple::SimpleStruct ComplexStruct::get_structOne() && {
  return std::move(__fbthrift_field_structOne);
}

const ::py3::simple::SimpleStruct& ComplexStruct::get_structTwo() const& {
  return __fbthrift_field_structTwo;
}

::py3::simple::SimpleStruct ComplexStruct::get_structTwo() && {
  return std::move(__fbthrift_field_structTwo);
}


void swap(FOLLY_MAYBE_UNUSED ComplexStruct& a, FOLLY_MAYBE_UNUSED ComplexStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_structOne, b.__fbthrift_field_structOne);
  swap(a.__fbthrift_field_structTwo, b.__fbthrift_field_structTwo);
  swap(a.__fbthrift_field_an_integer, b.__fbthrift_field_an_integer);
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_an_enum, b.__fbthrift_field_an_enum);
  swap(a.__fbthrift_field_some_bytes, b.__fbthrift_field_some_bytes);
  swap(a.__fbthrift_field_from, b.__fbthrift_field_from);
  swap(a.__fbthrift_field_cdef, b.__fbthrift_field_cdef);
  swap(a.__fbthrift_field_bytes_with_cpp_type, b.__fbthrift_field_bytes_with_cpp_type);
  swap(a.__isset, b.__isset);
}

template void ComplexStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ComplexStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexStruct,
        ::apache::thrift::type_class::structure,
        ::py3::simple::SimpleStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexStruct,
        ::apache::thrift::type_class::structure,
        ::py3::simple::SimpleStruct>,
    "inconsistent use of json option");

}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::BinaryUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::BinaryUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::py3::simple::BinaryUnion::Type>::size;
folly::Range<::py3::simple::BinaryUnion::Type const*> const TEnumTraits<::py3::simple::BinaryUnion::Type>::values = folly::range(TEnumDataStorage<::py3::simple::BinaryUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::py3::simple::BinaryUnion::Type>::names = folly::range(TEnumDataStorage<::py3::simple::BinaryUnion::Type>::names);

bool TEnumTraits<::py3::simple::BinaryUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::BinaryUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace py3 { namespace simple {

const folly::StringPiece BinaryUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BinaryUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece BinaryUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BinaryUnion>::name;
}

void BinaryUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::iobuf_val:
      destruct(value_.iobuf_val);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool BinaryUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}


void swap(BinaryUnion& a, BinaryUnion& b) {
  BinaryUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void BinaryUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BinaryUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BinaryUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BinaryUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BinaryUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BinaryUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BinaryUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BinaryUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}} // py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::BinaryUnionStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::BinaryUnionStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3 { namespace simple {

const folly::StringPiece BinaryUnionStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BinaryUnionStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece BinaryUnionStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BinaryUnionStruct>::name;
}

BinaryUnionStruct::BinaryUnionStruct(const BinaryUnionStruct&) = default;
BinaryUnionStruct& BinaryUnionStruct::operator=(const BinaryUnionStruct&) = default;
BinaryUnionStruct::BinaryUnionStruct(FOLLY_MAYBE_UNUSED BinaryUnionStruct&& other) noexcept :
    __fbthrift_field_u(std::move(other.__fbthrift_field_u)),
    __isset(other.__isset) {
}

BinaryUnionStruct& BinaryUnionStruct::operator=(FOLLY_MAYBE_UNUSED BinaryUnionStruct&& other) noexcept {
    this->__fbthrift_field_u = std::move(other.__fbthrift_field_u);
    __isset = other.__isset;
    return *this;
}


BinaryUnionStruct::BinaryUnionStruct(apache::thrift::FragileConstructor, ::py3::simple::BinaryUnion u__arg) :
    __fbthrift_field_u(std::move(u__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void BinaryUnionStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_u);
  __isset = {};
}

void BinaryUnionStruct::__fbthrift_clear_terse_fields() {
}

bool BinaryUnionStruct::__fbthrift_is_empty() const {
  return false;
}



const ::py3::simple::BinaryUnion& BinaryUnionStruct::get_u() const& {
  return __fbthrift_field_u;
}

::py3::simple::BinaryUnion BinaryUnionStruct::get_u() && {
  return std::move(__fbthrift_field_u);
}


void swap(FOLLY_MAYBE_UNUSED BinaryUnionStruct& a, FOLLY_MAYBE_UNUSED BinaryUnionStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_u, b.__fbthrift_field_u);
  swap(a.__isset, b.__isset);
}

template void BinaryUnionStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BinaryUnionStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BinaryUnionStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BinaryUnionStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BinaryUnionStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BinaryUnionStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BinaryUnionStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BinaryUnionStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BinaryUnionStruct,
        ::apache::thrift::type_class::variant,
        ::py3::simple::BinaryUnion>,
    "inconsistent use of json option");

}} // py3::simple

namespace py3 { namespace simple { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<Adapter, 1, ::py3::simple::SimpleStruct, ::py3::simple::HiddenTypeFieldsStruct>();
  ::apache::thrift::adapt_detail::validateAdapter<Adapter, ::py3::simple::detail::AdaptedUnion>();
}
}}} // py3::simple
