Parsed decls:

{ Direct_decl_parser.classes = {};
  funs =
  { "\\double" ->
    { fe_pos = [7:10-16];
      fe_type =
      (Rwitness (root|deprecated_string_escaping.php line 7, characters 10-15),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = []; ft_params = [];
            ft_implicit_params =
            { capability =
              (Rhint (root|deprecated_string_escaping.php line 7, characters 10-15),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|deprecated_string_escaping.php line 7, characters 20-23),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Nonreactive }));
      fe_deprecated =
      (Some "The function double is deprecated: other escapes like \n and \t available in double quotes");
       };
    "\\single" ->
    { fe_pos = [4:10-16];
      fe_type =
      (Rwitness (root|deprecated_string_escaping.php line 4, characters 10-15),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = []; ft_params = [];
            ft_implicit_params =
            { capability =
              (Rhint (root|deprecated_string_escaping.php line 4, characters 10-15),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|deprecated_string_escaping.php line 4, characters 20-23),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Nonreactive }));
      fe_deprecated =
      (Some "The function single is deprecated: can't write an apostrophe without escaping in single quotes");
       } };
  typedefs = {}; consts = {} }

They matched!
