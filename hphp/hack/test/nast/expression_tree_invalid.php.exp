[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-14], "\\test");
      fd_fun =
      { f_span = [3:1-6:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((), (Some ([3:18-22], (Hprim Tvoid)))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:3-22],
            (Expr
               ((), [5:3-21],
                (ExpressionTree
                   { et_hint = ([5:3-13], (Happly (([5:3-13], "\\ExampleDsl"), []))); 
                     et_splices = []; et_function_pointers = [];
                     et_virtualized_expr =
                     ((), [5:14-20],
                      (Call (
                         ((), [5:14-20],
                          (Efun
                             { ef_fun =
                               { f_span = [5:14-20]; f_readonly_this = None; 
                                 f_annotation = (); f_readonly_ret = None; 
                                 f_ret = ((), None); f_params = []; f_ctxs = None; 
                                 f_unsafe_ctxs = None;
                                 f_body =
                                 { fb_ast =
                                   [([5:14-20],
                                     (Return
                                        (Some ((), [5:14-20],
                                               (Call (
                                                  ((), [5:14-20],
                                                   (Obj_get (
                                                      ((), [5:14-15], (Call (((), [5:14-15], (Class_const (((), [5:14-15], (CI ([5:14-15], "\\ExampleDsl"))), ([5:14-15], "intType")))), [], [], None))),
                                                      ((), [5:14-20], (Id ([5:14-20], "__unsupported"))), OG_nullthrows, Is_method))),
                                                  [],
                                                  [(Pnormal,
                                                    ((), [5:19-20], (Call (((), [5:19-20], (Class_const (((), [5:19-20], (CI ([5:19-20], "\\ExampleDsl"))), ([5:19-20], "intType")))), [], [], None))))
                                                    ],
                                                  None))))))
                                     ]
                                   };
                                 f_fun_kind = FSync; f_user_attributes = []; 
                                 f_external = false; f_doc_comment = None };
                               ef_use = []; ef_closure_class_name = None })),
                         [], [], None)));
                     et_runtime_expr =
                     ((), [5:3-13],
                      (Call (((), [5:3-13], (Class_const (((), [5:3-13], (CI ([5:3-13], "\\ExampleDsl"))), ([5:3-13], "makeTree")))), 
                         [],
                         [(Pnormal,
                           ((), [5:14-20],
                            (Shape
                               [((SFlit_str ([5:14-20], "path")), ((), [5:14-20], (Id ([5:14-20], "\\__FILE__")))); (
                                 (SFlit_str ([5:14-20], "start_line")), ((), [5:14-20], (Int "5"))); (
                                 (SFlit_str ([5:14-20], "end_line")), ((), [5:14-20], (Int "5"))); (
                                 (SFlit_str ([5:14-20], "start_column")), ((), [5:14-20], (Int "13"))); (
                                 (SFlit_str ([5:14-20], "end_column")), ((), [5:14-20], (Int "19")))])));
                           (Pnormal,
                            ((), [5:3-13],
                             (Shape
                                [((SFlit_str ([5:3-13], "splices")), ((), [5:3-13], (KeyValCollection (([5:3-13], Dict), None, []))));
                                  ((SFlit_str ([5:3-13], "functions")), ((), [5:3-13], (ValCollection (([5:3-13], Vec), None, []))));
                                  ((SFlit_str ([5:3-13], "static_methods")), ((), [5:3-13], (ValCollection (([5:3-13], Vec), None, []))))])));
                           (Pnormal,
                            ((), [5:14-20],
                             (Lfun (
                                { f_span = [5:14-20]; f_readonly_this = None; 
                                  f_annotation = (); f_readonly_ret = None; 
                                  f_ret = ((), None);
                                  f_params =
                                  [{ param_annotation = (); param_type_hint = ((), (Some ([5:3-13], (Happly (([5:3-13], "\\ExampleDsl"), []))))); 
                                     param_is_variadic = false; param_pos = [5:3-13]; 
                                     param_name = "$0v"; param_expr = None; 
                                     param_readonly = None; param_callconv = Pnormal; 
                                     param_user_attributes = []; param_visibility = None }
                                    ];
                                  f_ctxs = None; f_unsafe_ctxs = None;
                                  f_body =
                                  { fb_ast =
                                    [([5:14-20],
                                      (Return
                                         (Some ((), [5:14-20],
                                                (Call (
                                                   ((), [5:14-20], (Obj_get (((), [5:14-20], (Lvar ([5:14-20], $0v))), ((), [5:14-20], (Id ([5:14-20], "visitBinop"))), OG_nullthrows, Is_method))),
                                                   [],
                                                   [(Pnormal,
                                                     ((), [5:14-20],
                                                      (Shape
                                                         [((SFlit_str ([5:14-20], "path")), ((), [5:14-20], (Id ([5:14-20], "\\__FILE__"))));
                                                           ((SFlit_str ([5:14-20], "start_line")), ((), [5:14-20], (Int "5"))); (
                                                           (SFlit_str ([5:14-20], "end_line")), ((), [5:14-20], (Int "5"))); (
                                                           (SFlit_str ([5:14-20], "start_column")), ((), [5:14-20], (Int "13"))); (
                                                           (SFlit_str ([5:14-20], "end_column")), ((), [5:14-20], (Int "19")))])));
                                                     (Pnormal,
                                                      ((), [5:14-15],
                                                       (Call (
                                                          ((), [5:14-15], (Obj_get (((), [5:14-15], (Lvar ([5:14-15], $0v))), ((), [5:14-15], (Id ([5:14-15], "visitInt"))), OG_nullthrows, Is_method))),
                                                          [],
                                                          [(Pnormal,
                                                            ((), [5:14-15],
                                                             (Shape
                                                                [((SFlit_str ([5:14-15], "path")), ((), [5:14-15], (Id ([5:14-15], "\\__FILE__"))));
                                                                  ((SFlit_str ([5:14-15], "start_line")), ((), [5:14-15], (Int "5")));
                                                                  ((SFlit_str ([5:14-15], "end_line")), ((), [5:14-15], (Int "5")));
                                                                  ((SFlit_str ([5:14-15], "start_column")), ((), [5:14-15], (Int "13")));
                                                                  ((SFlit_str ([5:14-15], "end_column")), ((), [5:14-15], (Int "14")))])));
                                                            (Pnormal, ((), [5:14-15], (Int "1")))],
                                                          None))));
                                                     (Pnormal, ((), [5:14-20], (String "__unsupported")));
                                                     (Pnormal,
                                                      ((), [5:19-20],
                                                       (Call (
                                                          ((), [5:19-20], (Obj_get (((), [5:19-20], (Lvar ([5:19-20], $0v))), ((), [5:19-20], (Id ([5:19-20], "visitInt"))), OG_nullthrows, Is_method))),
                                                          [],
                                                          [(Pnormal,
                                                            ((), [5:19-20],
                                                             (Shape
                                                                [((SFlit_str ([5:19-20], "path")), ((), [5:19-20], (Id ([5:19-20], "\\__FILE__"))));
                                                                  ((SFlit_str ([5:19-20], "start_line")), ((), [5:19-20], (Int "5")));
                                                                  ((SFlit_str ([5:19-20], "end_line")), ((), [5:19-20], (Int "5")));
                                                                  ((SFlit_str ([5:19-20], "start_column")), ((), [5:19-20], (Int "18")));
                                                                  ((SFlit_str ([5:19-20], "end_column")), ((), [5:19-20], (Int "19")))])));
                                                            (Pnormal, ((), [5:19-20], (Int "2")))],
                                                          None))))
                                                     ],
                                                   None))))))
                                      ]
                                    };
                                  f_fun_kind = FSync; f_user_attributes = []; 
                                  f_external = false; f_doc_comment = None },
                                []))))
                           ],
                         None)));
                     et_dollardollar_pos = None }))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })
  ]
