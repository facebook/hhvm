File root|module_enums.php--modules.php
[("X", (Shallow_decl_defs.Module { Typing_defs.mdt_pos = [4:8-9] }));
  ("Y", (Shallow_decl_defs.Module { Typing_defs.mdt_pos = [5:8-9] }))]

File root|module_enums.php--X.php
[("\\X",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_abstract = false; sc_is_xhp = false; sc_has_xhp_keyword = false;
       sc_kind = Cenum; sc_module = (Some ([2:54-57], "X"));
       sc_name = ([5:6-7], "\\X"); sc_tparams = [];
       sc_where_constraints = [];
       sc_extends =
       [(Rhint ([5:6-7]),
         (Tapply (([5:6-7], "\\HH\\BuiltinEnum"),
            [(Rhint ([5:6-7]), (Tapply (([5:6-7], "\\X"), [])))])))
         ];
       sc_uses = []; sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
       sc_req_extends = []; sc_req_implements = []; sc_req_class = [];
       sc_implements = []; sc_support_dynamic_type = false;
       sc_consts =
       [{ Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
          scc_name = ([6:3-4], "A");
          scc_type = (Rwitness_from_decl ([6:7-8]), (Tprim Tint));
          scc_refs = [] };
         { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
           scc_name = ([7:3-4], "B");
           scc_type = (Rwitness_from_decl ([7:7-8]), (Tprim Tint));
           scc_refs = [] };
         { Shallow_decl_defs.scc_abstract = Typing_defs.CCConcrete;
           scc_name = ([8:3-4], "C");
           scc_type = (Rwitness_from_decl ([8:7-8]), (Tprim Tint));
           scc_refs = [] }
         ];
       sc_typeconsts = []; sc_props = []; sc_sprops = [];
       sc_constructor = None; sc_static_methods = []; sc_methods = [];
       sc_user_attributes =
       [{ Typing_defs_core.ua_name = ([4:18-28], "__Internal");
          ua_classname_params = [] };
         { Typing_defs_core.ua_name = ([4:3-11], "__Module");
           ua_classname_params = [] }
         ];
       sc_enum_type =
       (Some { Typing_defs.te_base = (Rhint ([5:9-12]), (Tprim Tint));
               te_constraint = None; te_includes = [] })
       }));
  ("\\f1",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_module = (Some ([2:54-57], "X")); fe_internal = true;
        fe_type =
        (Rwitness_from_decl ([12:10-12]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [12:15-17]; fp_name = (Some "$x");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([12:13-14]), (Tapply (([12:13-14], "\\X"), []))) };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [12:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([12:20-24]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [12:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\f2",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_module = (Some ([2:54-57], "X")); fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([15:10-12]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = [];
              ft_params =
              [{ fp_pos = [15:15-17]; fp_name = (Some "$x");
                 fp_type =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type =
                   (Rhint ([15:13-14]), (Tapply (([15:13-14], "\\X"), []))) };
                 fp_flags =
                 (make_fp_flags ~accept_disposable:false ~has_default:false
                   ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                   ~ifc_can_call:false ~readonly:false);
                  }
                ];
              ft_implicit_params = { capability = (CapDefaults [15:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([15:20-24]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [15:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\f5",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_module = (Some ([2:54-57], "X")); fe_internal = true;
        fe_type =
        (Rwitness_from_decl ([18:10-12]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [18:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([18:16-20]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [18:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\f6",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_module = (Some ([2:54-57], "X")); fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([23:10-12]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [23:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([23:16-20]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [23:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }))
  ]

File root|module_enums.php--Y.php
[("\\f3",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None; fe_module = (Some ([2:54-57], "Y"));
       fe_internal = false;
       fe_type =
       (Rwitness_from_decl ([5:10-12]),
        (Tfun
           { ft_tparams = []; ft_where_constraints = [];
             ft_params =
             [{ fp_pos = [5:15-17]; fp_name = (Some "$x");
                fp_type =
                { et_enforced = Typing_defs_core.Unenforced;
                  et_type =
                  (Rhint ([5:13-14]), (Tapply (([5:13-14], "\\X"), []))) };
                fp_flags =
                (make_fp_flags ~accept_disposable:false ~has_default:false
                  ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                  ~ifc_can_call:false ~readonly:false);
                 }
               ];
             ft_implicit_params = { capability = (CapDefaults [5:10-12]) };
             ft_ret =
             { et_enforced = Typing_defs_core.Unenforced;
               et_type = (Rhint ([5:20-24]), (Tprim Tvoid)) };
             ft_flags =
             (make_ft_flags FSync ~return_disposable:false
               ~returns_readonly:false ~support_dynamic_type:false
               ~readonly_this:false ~is_memoized:false ~variadic:false);
             ft_ifc_decl = FDPolicied {PUBLIC} }));
       fe_pos = [5:10-12]; fe_php_std_lib = false;
       fe_support_dynamic_type = false }));
  ("\\f7",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_module = (Some ([2:54-57], "Y")); fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([9:10-12]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [9:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([9:16-20]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [9:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }))
  ]

File root|module_enums.php--no-module.php
[("\\f4",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None; fe_module = None;
       fe_internal = false;
       fe_type =
       (Rwitness_from_decl ([3:10-12]),
        (Tfun
           { ft_tparams = []; ft_where_constraints = [];
             ft_params =
             [{ fp_pos = [3:15-17]; fp_name = (Some "$x");
                fp_type =
                { et_enforced = Typing_defs_core.Unenforced;
                  et_type =
                  (Rhint ([3:13-14]), (Tapply (([3:13-14], "\\X"), []))) };
                fp_flags =
                (make_fp_flags ~accept_disposable:false ~has_default:false
                  ~mode:Typing_defs_core.FPnormal ~ifc_external:false
                  ~ifc_can_call:false ~readonly:false);
                 }
               ];
             ft_implicit_params = { capability = (CapDefaults [3:10-12]) };
             ft_ret =
             { et_enforced = Typing_defs_core.Unenforced;
               et_type = (Rhint ([3:20-24]), (Tprim Tvoid)) };
             ft_flags =
             (make_ft_flags FSync ~return_disposable:false
               ~returns_readonly:false ~support_dynamic_type:false
               ~readonly_this:false ~is_memoized:false ~variadic:false);
             ft_ifc_decl = FDPolicied {PUBLIC} }));
       fe_pos = [3:10-12]; fe_php_std_lib = false;
       fe_support_dynamic_type = false }));
  ("\\f8",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([5:10-12]),
         (Tfun
            { ft_tparams = []; ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [5:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([5:16-20]), (Tprim Tvoid)) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false ~is_memoized:false ~variadic:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [5:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }))
  ]

They matched!
