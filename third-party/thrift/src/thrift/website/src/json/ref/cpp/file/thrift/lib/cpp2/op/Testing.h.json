{
  "refid": "Testing_8h",
  "kind": "file",
  "language": "C++",
  "compoundname_html": "Testing.h",
  "includes": [
    {
      "local": "no",
      "text_html": "utility"
    },
    {
      "local": "no",
      "text_html": "folly/portability/GMock.h"
    },
    {
      "local": "no",
      "text_html": "folly/portability/GTest.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp/Field.h"
    },
    {
      "refid": "Clear_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/Clear.h"
    },
    {
      "refid": "Compare_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/Compare.h"
    },
    {
      "refid": "Serializer_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/Serializer.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/Protocol.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/Tag.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/Testing.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/Traits.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/detail/Runtime.h"
    }
  ],
  "innerclass": [
    {
      "refid": "structapache_1_1thrift_1_1test_1_1IdenticalToMatcher",
      "prot": "public",
      "text_html": "apache::thrift::test::IdenticalToMatcher"
    },
    {
      "refid": "structapache_1_1thrift_1_1test_1_1EqualToMatcher",
      "prot": "public",
      "text_html": "apache::thrift::test::EqualToMatcher"
    },
    {
      "refid": "structapache_1_1thrift_1_1test_1_1EmptyMatcher",
      "prot": "public",
      "text_html": "apache::thrift::test::EmptyMatcher"
    },
    {
      "refid": "classapache_1_1thrift_1_1test_1_1Number1Serializer",
      "prot": "public",
      "text_html": "apache::thrift::test::Number1Serializer"
    },
    {
      "refid": "classapache_1_1thrift_1_1test_1_1FollyToStringSerializer",
      "prot": "public",
      "text_html": "apache::thrift::test::FollyToStringSerializer"
    },
    {
      "refid": "classapache_1_1thrift_1_1test_1_1MultiSerializer",
      "prot": "public",
      "text_html": "apache::thrift::test::MultiSerializer"
    }
  ],
  "innernamespace": [
    {
      "refid": "namespaceapache_1_1thrift_1_1test",
      "text_html": "apache::thrift::test"
    }
  ],
  "file_location": {
    "file": "fbcode/thrift/lib/cpp2/op/Testing.h"
  },
  "filepath": "file/thrift/lib/cpp2/op/Testing.h",
  "href": "/ref/cpp/thrift/lib/cpp2/op/Testing.h",
  "free_vars": [
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1a00077b221cf14c464d5f4caf46b036e1",
      "prot": "public",
      "static": "no",
      "mutable": "no",
      "type_html": "const Protocol",
      "definition_html": "const type::Protocol apache::thrift::test::kFollyToStringProtocol",
      "argsstring_html": "",
      "name_html": "kFollyToStringProtocol",
      "initializer_html": "=\n    Protocol::fromName(thriftType(\"FollyToString\"))",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.cpp",
        "line": "31",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.cpp",
        "bodystart": "31",
        "bodyend": "-1"
      }
    }
  ],
  "free_functions": [
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1a1d50198593d0dd4c1471940f03bf0620",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename Tag"
        },
        {
          "type_html": "typename T",
          "defval_html": "type::native_type&lt;Tag&gt;"
        }
      ],
      "type_html": "auto",
      "definition_html": "auto apache::thrift::test::IsIdenticalTo",
      "argsstring_html": "(T expected)",
      "name_html": "IsIdenticalTo",
      "param": [
        {
          "type_html": "T",
          "declname_html": "expected"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "52",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "52",
        "bodyend": "55"
      },
      "definition": {
        "simple_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsIdenticalTo(T expected)",
        "simple_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsIdenticalTo(T expected)",
        "detailed_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsIdenticalTo(T expected)",
        "detailed_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsIdenticalTo(T expected)",
        "original_definition_html": "auto apache::thrift::test::IsIdenticalTo",
        "original_argsstring_html": "(T expected)"
      },
      "compoundname_html": "apache::thrift::test::IsIdenticalTo",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1adacdc02d41590e9722ea6b2bcbf05e7c",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename Tag"
        },
        {
          "type_html": "typename T",
          "defval_html": "type::native_type&lt;Tag&gt;"
        }
      ],
      "type_html": "auto",
      "definition_html": "auto apache::thrift::test::IsEqualTo",
      "argsstring_html": "(T expected)",
      "name_html": "IsEqualTo",
      "param": [
        {
          "type_html": "T",
          "declname_html": "expected"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "73",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "73",
        "bodyend": "76"
      },
      "definition": {
        "simple_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsEqualTo(T expected)",
        "simple_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsEqualTo(T expected)",
        "detailed_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsEqualTo(T expected)",
        "detailed_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsEqualTo(T expected)",
        "original_definition_html": "auto apache::thrift::test::IsEqualTo",
        "original_argsstring_html": "(T expected)"
      },
      "compoundname_html": "apache::thrift::test::IsEqualTo",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1ac38302e4c0d4ff17cb3ece38c0a42576",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename Tag"
        }
      ],
      "type_html": "auto",
      "definition_html": "auto apache::thrift::test::IsEmpty",
      "argsstring_html": "()",
      "name_html": "IsEmpty",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "89",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "89",
        "bodyend": "91"
      },
      "definition": {
        "simple_html": "template &lt;typename Tag&gt;\nauto IsEmpty()",
        "simple_raw": "template <typename Tag>\nauto IsEmpty()",
        "detailed_html": "template &lt;typename Tag&gt;\nauto IsEmpty()",
        "detailed_raw": "template <typename Tag>\nauto IsEmpty()",
        "original_definition_html": "auto apache::thrift::test::IsEmpty",
        "original_argsstring_html": "()"
      },
      "compoundname_html": "apache::thrift::test::IsEmpty",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1a772a90de2de596296b4c6a44e215616a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename P"
        },
        {
          "type_html": "typename T1",
          "defval_html": "typename P::value_type"
        },
        {
          "type_html": "typename T2",
          "defval_html": "T1"
        },
        {
          "type_html": "typename T3",
          "defval_html": "T2"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectPatch",
      "argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected1, const T3 &amp;expected2)",
      "name_html": "expectPatch",
      "param": [
        {
          "type_html": "P",
          "declname_html": "patch"
        },
        {
          "type_html": "const T1 &amp;",
          "declname_html": "actual"
        },
        {
          "type_html": "const T2 &amp;",
          "declname_html": "expected1"
        },
        {
          "type_html": "const T3 &amp;",
          "declname_html": "expected2"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "99",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "99",
        "bodyend": "124"
      },
      "definition": {
        "simple_html": "template &lt;\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2&gt;\nvoid expectPatch(\n    P patch, const T1&amp; actual, const T2&amp; expected1, const T3&amp; expected2)",
        "simple_raw": "template <\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2>\nvoid expectPatch(\n    P patch, const T1& actual, const T2& expected1, const T3& expected2)",
        "detailed_html": "template &lt;\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2&gt;\nvoid expectPatch(\n    P patch, const T1&amp; actual, const T2&amp; expected1, const T3&amp; expected2)",
        "detailed_raw": "template <\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2>\nvoid expectPatch(\n    P patch, const T1& actual, const T2& expected1, const T3& expected2)",
        "original_definition_html": "void apache::thrift::test::expectPatch",
        "original_argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected1, const T3 &amp;expected2)"
      },
      "compoundname_html": "apache::thrift::test::expectPatch",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1a96ed6be7cd731a66b2969beece0f42ad",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename P"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectPatch",
      "argsstring_html": "(P patch, const folly::IOBuf &amp;actual, const folly::IOBuf &amp;expected1, const folly::IOBuf &amp;expected2)",
      "name_html": "expectPatch",
      "param": [
        {
          "type_html": "P",
          "declname_html": "patch"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "actual"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "expected1"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "expected2"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "127",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "127",
        "bodyend": "166"
      },
      "definition": {
        "simple_html": "template &lt;typename P&gt;\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf&amp; actual,\n    const folly::IOBuf&amp; expected1,\n    const folly::IOBuf&amp; expected2)",
        "simple_raw": "template <typename P>\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf& actual,\n    const folly::IOBuf& expected1,\n    const folly::IOBuf& expected2)",
        "detailed_html": "template &lt;typename P&gt;\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf&amp; actual,\n    const folly::IOBuf&amp; expected1,\n    const folly::IOBuf&amp; expected2)",
        "detailed_raw": "template <typename P>\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf& actual,\n    const folly::IOBuf& expected1,\n    const folly::IOBuf& expected2)",
        "original_definition_html": "void apache::thrift::test::expectPatch",
        "original_argsstring_html": "(P patch, const folly::IOBuf &amp;actual, const folly::IOBuf &amp;expected1, const folly::IOBuf &amp;expected2)"
      },
      "compoundname_html": "apache::thrift::test::expectPatch",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1adafbf13aafa3aedd12a90e864c4e055d",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename P"
        },
        {
          "type_html": "typename T1",
          "defval_html": "typename P::value_type"
        },
        {
          "type_html": "typename T2",
          "defval_html": "T1"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectPatch",
      "argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected)",
      "name_html": "expectPatch",
      "param": [
        {
          "type_html": "P",
          "declname_html": "patch"
        },
        {
          "type_html": "const T1 &amp;",
          "declname_html": "actual"
        },
        {
          "type_html": "const T2 &amp;",
          "declname_html": "expected"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "169",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "169",
        "bodyend": "171"
      },
      "definition": {
        "simple_html": "template &lt;typename P, typename T1 = typename P::value_type, typename T2 = T1&gt;\nvoid expectPatch(P patch, const T1&amp; actual, const T2&amp; expected)",
        "simple_raw": "template <typename P, typename T1 = typename P::value_type, typename T2 = T1>\nvoid expectPatch(P patch, const T1& actual, const T2& expected)",
        "detailed_html": "template &lt;typename P, typename T1 = typename P::value_type, typename T2 = T1&gt;\nvoid expectPatch(P patch, const T1&amp; actual, const T2&amp; expected)",
        "detailed_raw": "template <typename P, typename T1 = typename P::value_type, typename T2 = T1>\nvoid expectPatch(P patch, const T1& actual, const T2& expected)",
        "original_definition_html": "void apache::thrift::test::expectPatch",
        "original_argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected)"
      },
      "compoundname_html": "apache::thrift::test::expectPatch",
      "namespace_html": "apache::thrift::test"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1test_1ab48e09f23500750d3345ad9859f41f0d",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename Tag"
        },
        {
          "type_html": "typename S"
        },
        {
          "type_html": "typename T",
          "defval_html": "type::native_type&lt;Tag&gt;"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::test::expectRoundTrip",
      "argsstring_html": "(const S &amp;seralizer, const T &amp;expected)",
      "name_html": "expectRoundTrip",
      "param": [
        {
          "type_html": "const S &amp;",
          "declname_html": "seralizer"
        },
        {
          "type_html": "const T &amp;",
          "declname_html": "expected"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "line": "175",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
        "bodystart": "175",
        "bodyend": "181"
      },
      "definition": {
        "simple_html": "template &lt;typename Tag, typename S, typename T = type::native_type&lt;Tag&gt;&gt;\nvoid expectRoundTrip(const S&amp; seralizer, const T&amp; expected)",
        "simple_raw": "template <typename Tag, typename S, typename T = type::native_type<Tag>>\nvoid expectRoundTrip(const S& seralizer, const T& expected)",
        "detailed_html": "template &lt;typename Tag, typename S, typename T = type::native_type&lt;Tag&gt;&gt;\nvoid expectRoundTrip(const S&amp; seralizer, const T&amp; expected)",
        "detailed_raw": "template <typename Tag, typename S, typename T = type::native_type<Tag>>\nvoid expectRoundTrip(const S& seralizer, const T& expected)",
        "original_definition_html": "void apache::thrift::test::expectRoundTrip",
        "original_argsstring_html": "(const S &amp;seralizer, const T &amp;expected)"
      },
      "compoundname_html": "apache::thrift::test::expectRoundTrip",
      "namespace_html": "apache::thrift::test"
    }
  ],
  "free_overloadgroups": [
    {
      "groupname_html": "",
      "overloadsets": [
        {
          "kind": "overloadset",
          "name_html": "IsIdenticalTo",
          "compoundname_html": "apache::thrift::test::IsIdenticalTo",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1a1d50198593d0dd4c1471940f03bf0620",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename Tag"
                },
                {
                  "type_html": "typename T",
                  "defval_html": "type::native_type&lt;Tag&gt;"
                }
              ],
              "type_html": "auto",
              "definition_html": "auto apache::thrift::test::IsIdenticalTo",
              "argsstring_html": "(T expected)",
              "name_html": "IsIdenticalTo",
              "param": [
                {
                  "type_html": "T",
                  "declname_html": "expected"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "52",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "52",
                "bodyend": "55"
              },
              "definition": {
                "simple_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsIdenticalTo(T expected)",
                "simple_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsIdenticalTo(T expected)",
                "detailed_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsIdenticalTo(T expected)",
                "detailed_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsIdenticalTo(T expected)",
                "original_definition_html": "auto apache::thrift::test::IsIdenticalTo",
                "original_argsstring_html": "(T expected)"
              },
              "compoundname_html": "apache::thrift::test::IsIdenticalTo",
              "namespace_html": "apache::thrift::test"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsIdenticalTo",
          "namespace_html": "apache::thrift::test",
          "minprot": "public",
          "displayname_html": "IsIdenticalTo",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsIdenticalTo",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsIdenticalTo"
        },
        {
          "kind": "overloadset",
          "name_html": "IsEqualTo",
          "compoundname_html": "apache::thrift::test::IsEqualTo",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1adacdc02d41590e9722ea6b2bcbf05e7c",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename Tag"
                },
                {
                  "type_html": "typename T",
                  "defval_html": "type::native_type&lt;Tag&gt;"
                }
              ],
              "type_html": "auto",
              "definition_html": "auto apache::thrift::test::IsEqualTo",
              "argsstring_html": "(T expected)",
              "name_html": "IsEqualTo",
              "param": [
                {
                  "type_html": "T",
                  "declname_html": "expected"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "73",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "73",
                "bodyend": "76"
              },
              "definition": {
                "simple_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsEqualTo(T expected)",
                "simple_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsEqualTo(T expected)",
                "detailed_html": "template &lt;typename Tag, typename T = type::native_type&lt;Tag&gt;&gt;\nauto IsEqualTo(T expected)",
                "detailed_raw": "template <typename Tag, typename T = type::native_type<Tag>>\nauto IsEqualTo(T expected)",
                "original_definition_html": "auto apache::thrift::test::IsEqualTo",
                "original_argsstring_html": "(T expected)"
              },
              "compoundname_html": "apache::thrift::test::IsEqualTo",
              "namespace_html": "apache::thrift::test"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsEqualTo",
          "namespace_html": "apache::thrift::test",
          "minprot": "public",
          "displayname_html": "IsEqualTo",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsEqualTo",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsEqualTo"
        },
        {
          "kind": "overloadset",
          "name_html": "IsEmpty",
          "compoundname_html": "apache::thrift::test::IsEmpty",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1ac38302e4c0d4ff17cb3ece38c0a42576",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename Tag"
                }
              ],
              "type_html": "auto",
              "definition_html": "auto apache::thrift::test::IsEmpty",
              "argsstring_html": "()",
              "name_html": "IsEmpty",
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "89",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "89",
                "bodyend": "91"
              },
              "definition": {
                "simple_html": "template &lt;typename Tag&gt;\nauto IsEmpty()",
                "simple_raw": "template <typename Tag>\nauto IsEmpty()",
                "detailed_html": "template &lt;typename Tag&gt;\nauto IsEmpty()",
                "detailed_raw": "template <typename Tag>\nauto IsEmpty()",
                "original_definition_html": "auto apache::thrift::test::IsEmpty",
                "original_argsstring_html": "()"
              },
              "compoundname_html": "apache::thrift::test::IsEmpty",
              "namespace_html": "apache::thrift::test"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsEmpty",
          "namespace_html": "apache::thrift::test",
          "minprot": "public",
          "displayname_html": "IsEmpty",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsEmpty",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/IsEmpty"
        },
        {
          "kind": "overloadset",
          "name_html": "expectPatch",
          "compoundname_html": "apache::thrift::test::expectPatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1a772a90de2de596296b4c6a44e215616a",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename P"
                },
                {
                  "type_html": "typename T1",
                  "defval_html": "typename P::value_type"
                },
                {
                  "type_html": "typename T2",
                  "defval_html": "T1"
                },
                {
                  "type_html": "typename T3",
                  "defval_html": "T2"
                }
              ],
              "type_html": "void",
              "definition_html": "void apache::thrift::test::expectPatch",
              "argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected1, const T3 &amp;expected2)",
              "name_html": "expectPatch",
              "param": [
                {
                  "type_html": "P",
                  "declname_html": "patch"
                },
                {
                  "type_html": "const T1 &amp;",
                  "declname_html": "actual"
                },
                {
                  "type_html": "const T2 &amp;",
                  "declname_html": "expected1"
                },
                {
                  "type_html": "const T3 &amp;",
                  "declname_html": "expected2"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "99",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "99",
                "bodyend": "124"
              },
              "definition": {
                "simple_html": "template &lt;\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2&gt;\nvoid expectPatch(\n    P patch, const T1&amp; actual, const T2&amp; expected1, const T3&amp; expected2)",
                "simple_raw": "template <\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2>\nvoid expectPatch(\n    P patch, const T1& actual, const T2& expected1, const T3& expected2)",
                "detailed_html": "template &lt;\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2&gt;\nvoid expectPatch(\n    P patch, const T1&amp; actual, const T2&amp; expected1, const T3&amp; expected2)",
                "detailed_raw": "template <\n    typename P,\n    typename T1 = typename P::value_type,\n    typename T2 = T1,\n    typename T3 = T2>\nvoid expectPatch(\n    P patch, const T1& actual, const T2& expected1, const T3& expected2)",
                "original_definition_html": "void apache::thrift::test::expectPatch",
                "original_argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected1, const T3 &amp;expected2)"
              },
              "compoundname_html": "apache::thrift::test::expectPatch",
              "namespace_html": "apache::thrift::test"
            },
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1a96ed6be7cd731a66b2969beece0f42ad",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename P"
                }
              ],
              "type_html": "void",
              "definition_html": "void apache::thrift::test::expectPatch",
              "argsstring_html": "(P patch, const folly::IOBuf &amp;actual, const folly::IOBuf &amp;expected1, const folly::IOBuf &amp;expected2)",
              "name_html": "expectPatch",
              "param": [
                {
                  "type_html": "P",
                  "declname_html": "patch"
                },
                {
                  "type_html": "const folly::IOBuf &amp;",
                  "declname_html": "actual"
                },
                {
                  "type_html": "const folly::IOBuf &amp;",
                  "declname_html": "expected1"
                },
                {
                  "type_html": "const folly::IOBuf &amp;",
                  "declname_html": "expected2"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "127",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "127",
                "bodyend": "166"
              },
              "definition": {
                "simple_html": "template &lt;typename P&gt;\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf&amp; actual,\n    const folly::IOBuf&amp; expected1,\n    const folly::IOBuf&amp; expected2)",
                "simple_raw": "template <typename P>\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf& actual,\n    const folly::IOBuf& expected1,\n    const folly::IOBuf& expected2)",
                "detailed_html": "template &lt;typename P&gt;\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf&amp; actual,\n    const folly::IOBuf&amp; expected1,\n    const folly::IOBuf&amp; expected2)",
                "detailed_raw": "template <typename P>\nvoid expectPatch(\n    P patch,\n    const folly::IOBuf& actual,\n    const folly::IOBuf& expected1,\n    const folly::IOBuf& expected2)",
                "original_definition_html": "void apache::thrift::test::expectPatch",
                "original_argsstring_html": "(P patch, const folly::IOBuf &amp;actual, const folly::IOBuf &amp;expected1, const folly::IOBuf &amp;expected2)"
              },
              "compoundname_html": "apache::thrift::test::expectPatch",
              "namespace_html": "apache::thrift::test"
            },
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1adafbf13aafa3aedd12a90e864c4e055d",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename P"
                },
                {
                  "type_html": "typename T1",
                  "defval_html": "typename P::value_type"
                },
                {
                  "type_html": "typename T2",
                  "defval_html": "T1"
                }
              ],
              "type_html": "void",
              "definition_html": "void apache::thrift::test::expectPatch",
              "argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected)",
              "name_html": "expectPatch",
              "param": [
                {
                  "type_html": "P",
                  "declname_html": "patch"
                },
                {
                  "type_html": "const T1 &amp;",
                  "declname_html": "actual"
                },
                {
                  "type_html": "const T2 &amp;",
                  "declname_html": "expected"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "169",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "169",
                "bodyend": "171"
              },
              "definition": {
                "simple_html": "template &lt;typename P, typename T1 = typename P::value_type, typename T2 = T1&gt;\nvoid expectPatch(P patch, const T1&amp; actual, const T2&amp; expected)",
                "simple_raw": "template <typename P, typename T1 = typename P::value_type, typename T2 = T1>\nvoid expectPatch(P patch, const T1& actual, const T2& expected)",
                "detailed_html": "template &lt;typename P, typename T1 = typename P::value_type, typename T2 = T1&gt;\nvoid expectPatch(P patch, const T1&amp; actual, const T2&amp; expected)",
                "detailed_raw": "template <typename P, typename T1 = typename P::value_type, typename T2 = T1>\nvoid expectPatch(P patch, const T1& actual, const T2& expected)",
                "original_definition_html": "void apache::thrift::test::expectPatch",
                "original_argsstring_html": "(P patch, const T1 &amp;actual, const T2 &amp;expected)"
              },
              "compoundname_html": "apache::thrift::test::expectPatch",
              "namespace_html": "apache::thrift::test"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Testing.h/expectPatch",
          "namespace_html": "apache::thrift::test",
          "minprot": "public",
          "displayname_html": "expectPatch",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/expectPatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/expectPatch"
        },
        {
          "kind": "overloadset",
          "name_html": "expectRoundTrip",
          "compoundname_html": "apache::thrift::test::expectRoundTrip",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1test_1ab48e09f23500750d3345ad9859f41f0d",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename Tag"
                },
                {
                  "type_html": "typename S"
                },
                {
                  "type_html": "typename T",
                  "defval_html": "type::native_type&lt;Tag&gt;"
                }
              ],
              "type_html": "void",
              "definition_html": "void apache::thrift::test::expectRoundTrip",
              "argsstring_html": "(const S &amp;seralizer, const T &amp;expected)",
              "name_html": "expectRoundTrip",
              "param": [
                {
                  "type_html": "const S &amp;",
                  "declname_html": "seralizer"
                },
                {
                  "type_html": "const T &amp;",
                  "declname_html": "expected"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "line": "175",
                "column": "1",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Testing.h",
                "bodystart": "175",
                "bodyend": "181"
              },
              "definition": {
                "simple_html": "template &lt;typename Tag, typename S, typename T = type::native_type&lt;Tag&gt;&gt;\nvoid expectRoundTrip(const S&amp; seralizer, const T&amp; expected)",
                "simple_raw": "template <typename Tag, typename S, typename T = type::native_type<Tag>>\nvoid expectRoundTrip(const S& seralizer, const T& expected)",
                "detailed_html": "template &lt;typename Tag, typename S, typename T = type::native_type&lt;Tag&gt;&gt;\nvoid expectRoundTrip(const S&amp; seralizer, const T&amp; expected)",
                "detailed_raw": "template <typename Tag, typename S, typename T = type::native_type<Tag>>\nvoid expectRoundTrip(const S& seralizer, const T& expected)",
                "original_definition_html": "void apache::thrift::test::expectRoundTrip",
                "original_argsstring_html": "(const S &amp;seralizer, const T &amp;expected)"
              },
              "compoundname_html": "apache::thrift::test::expectRoundTrip",
              "namespace_html": "apache::thrift::test"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Testing.h/expectRoundTrip",
          "namespace_html": "apache::thrift::test",
          "minprot": "public",
          "displayname_html": "expectRoundTrip",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/expectRoundTrip",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Testing.h/expectRoundTrip"
        }
      ]
    }
  ]
}