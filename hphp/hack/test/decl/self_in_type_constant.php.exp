Parsed decls:

{ Direct_decl_parser.classes =
  { "\\C" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([3:7-8], "\\C"); sc_tparams = []; sc_where_constraints = [];
      sc_extends = []; sc_uses = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = [];
      sc_typeconsts =
      [{ Shallow_decl_defs.stc_abstract = TCConcrete; stc_constraint = None;
         stc_name = ([4:14-15], "T");
         stc_type =
         (Some (Rhint (root|self_in_type_constant.php line 4, characters 18-20),
                (Tprim Tint)));
         stc_enforceable = ([Pos.none], false); stc_reifiable = None };
        { Shallow_decl_defs.stc_abstract = TCConcrete; stc_constraint = None;
          stc_name = ([5:14-15], "U");
          stc_type =
          (Some (Rhint (root|self_in_type_constant.php line 5, characters 18-24),
                 (Taccess
                    ((Rhint (root|self_in_type_constant.php line 5, characters 18-21),
                      (Tapply (([3:7-8], "\\C"), []))),
                     [([5:24-25], "T")]))));
          stc_enforceable = ([Pos.none], false); stc_reifiable = None }
        ];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\I" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cinterface;
      sc_name = ([8:11-12], "\\I"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = [];
      sc_typeconsts =
      [{ Shallow_decl_defs.stc_abstract = TCConcrete; stc_constraint = None;
         stc_name = ([9:14-15], "V");
         stc_type =
         (Some (Rhint (root|self_in_type_constant.php line 9, characters 18-20),
                (Tprim Tint)));
         stc_enforceable = ([Pos.none], false); stc_reifiable = None };
        { Shallow_decl_defs.stc_abstract = TCConcrete; stc_constraint = None;
          stc_name = ([10:14-15], "W");
          stc_type =
          (Some (Rhint (root|self_in_type_constant.php line 10, characters 18-24),
                 (Taccess
                    ((Rhint (root|self_in_type_constant.php line 10, characters 18-21),
                      (Tapply (([8:11-12], "\\I"), []))),
                     [([10:24-25], "V")]))));
          stc_enforceable = ([Pos.none], false); stc_reifiable = None }
        ];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\T" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Ctrait;
      sc_name = ([13:7-8], "\\T"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = [];
      sc_req_extends =
      [(Rhint (root|self_in_type_constant.php line 14, characters 19-19),
        (Tapply (([14:19-20], "\\C"), [])))];
      sc_req_implements = []; sc_implements = []; sc_consts = [];
      sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
      sc_constructor = None; sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = true; sm_final = false;
         sm_memoizelsb = false; sm_name = ([15:28-29], "f");
         sm_override = false; sm_dynamicallycallable = false;
         sm_reactivity = None;
         sm_type =
         (Rwitness (root|self_in_type_constant.php line 15, characters 28-28),
          (Tfun
             { ft_arity = (Fstandard ()); ft_tparams = [];
               ft_where_constraints = []; ft_params = [];
               ft_implicit_params =
               { capability =
                 (Rhint (root|self_in_type_constant.php line 15, characters 28-28),
                  (Tunion []))
                 };
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|self_in_type_constant.php line 15, characters 33-39),
                  (Taccess
                     ((Rhint (root|self_in_type_constant.php line 15, characters 33-36),
                       (Tapply (([13:7-8], "\\T"), []))),
                      [([15:39-40], "U")])))
                 };
               ft_flags =
               (make_ft_flags sync none ~return_disposable:false
                 ~returns_mutable:false ~returns_void_to_rx:false);
               ft_reactive = Nonreactive }));
         sm_visibility = Public; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
