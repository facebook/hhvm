/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/includes/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/includes/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/includes/gen-cpp2/module_types_custom_protocol.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/includes/gen-cpp2/module_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace cpp2 {

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct([[maybe_unused]] MyStruct&& other) noexcept :
    __fbthrift_field_MyIncludedField(std::move(other.__fbthrift_field_MyIncludedField)),
    __fbthrift_field_MyOtherIncludedField(std::move(other.__fbthrift_field_MyOtherIncludedField)),
    __fbthrift_field_MyIncludedInt(std::move(other.__fbthrift_field_MyIncludedInt)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=([[maybe_unused]] MyStruct&& other) noexcept {
    this->__fbthrift_field_MyIncludedField = std::move(other.__fbthrift_field_MyIncludedField);
    this->__fbthrift_field_MyOtherIncludedField = std::move(other.__fbthrift_field_MyOtherIncludedField);
    this->__fbthrift_field_MyIncludedInt = std::move(other.__fbthrift_field_MyIncludedInt);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::cpp2::Included MyIncludedField__arg, ::cpp2::Included MyOtherIncludedField__arg, ::cpp2::IncludedInt64 MyIncludedInt__arg) :
    __fbthrift_field_MyIncludedField(std::move(MyIncludedField__arg)),
    __fbthrift_field_MyOtherIncludedField(std::move(MyOtherIncludedField__arg)),
    __fbthrift_field_MyIncludedInt(std::move(MyIncludedInt__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void MyStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_MyIncludedField);
  ::apache::thrift::clear(this->__fbthrift_field_MyOtherIncludedField);
  this->__fbthrift_field_MyIncludedInt = ::cpp2::IncludedInt64();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2::Included& MyStruct::get_MyIncludedField() const& {
  return __fbthrift_field_MyIncludedField;
}

::cpp2::Included MyStruct::get_MyIncludedField() && {
  return static_cast<::cpp2::Included&&>(__fbthrift_field_MyIncludedField);
}

const ::cpp2::Included& MyStruct::get_MyOtherIncludedField() const& {
  return __fbthrift_field_MyOtherIncludedField;
}

::cpp2::Included MyStruct::get_MyOtherIncludedField() && {
  return static_cast<::cpp2::Included&&>(__fbthrift_field_MyOtherIncludedField);
}

::cpp2::IncludedInt64 MyStruct::get_MyIncludedInt() const {
  return __fbthrift_field_MyIncludedInt;
}

::cpp2::IncludedInt64& MyStruct::set_MyIncludedInt(::cpp2::IncludedInt64 MyIncludedInt_) {
  MyIncludedInt_ref() = MyIncludedInt_;
  return __fbthrift_field_MyIncludedInt;
}

void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIncludedField, b.__fbthrift_field_MyIncludedField);
  swap(a.__fbthrift_field_MyOtherIncludedField, b.__fbthrift_field_MyOtherIncludedField);
  swap(a.__fbthrift_field_MyIncludedInt, b.__fbthrift_field_MyIncludedInt);
  swap(a.__isset, b.__isset);
}


static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::Included>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::Included>,
    "inconsistent use of json option");

} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
