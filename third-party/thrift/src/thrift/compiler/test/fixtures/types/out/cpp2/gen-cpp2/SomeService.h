/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/types/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/types/gen-cpp2/SomeServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/types/gen-cpp2/included_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace apache::thrift::fixtures::types {
class SomeService;
class SomeServiceAsyncProcessor;

class SomeServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace apache::thrift::fixtures::types

namespace apache::thrift {
template <>
class ServiceHandler<::apache::thrift::fixtures::types::SomeService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::apache::thrift::fixtures::types::SomeService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "SomeService"; }

  static std::string_view __fbthrift_thrift_uri() {
    return "apache.org/thrift/fixtures/types/SomeService";
  }

  typedef ::apache::thrift::fixtures::types::SomeServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_bounce_map(::apache::thrift::fixtures::types::SomeMap& /*_return*/, std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> /*m*/);
  [[deprecated("Use sync_bounce_map instead")]] virtual void bounce_map(::apache::thrift::fixtures::types::SomeMap& /*_return*/, std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> /*m*/);
  virtual folly::Future<std::unique_ptr<::apache::thrift::fixtures::types::SomeMap>> future_bounce_map(std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> p_m);
  virtual folly::SemiFuture<std::unique_ptr<::apache::thrift::fixtures::types::SomeMap>> semifuture_bounce_map(std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> p_m);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::apache::thrift::fixtures::types::SomeMap>> co_bounce_map(std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> p_m);
  virtual folly::coro::Task<std::unique_ptr<::apache::thrift::fixtures::types::SomeMap>> co_bounce_map(apache::thrift::RequestParams params, std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> p_m);
#endif
  virtual void async_tm_bounce_map(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::apache::thrift::fixtures::types::SomeMap>> callback, std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> p_m);
  virtual void sync_binary_keyed_map(::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>& /*_return*/, std::unique_ptr<::std::vector<::std::int64_t>> /*r*/);
  [[deprecated("Use sync_binary_keyed_map instead")]] virtual void binary_keyed_map(::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>& /*_return*/, std::unique_ptr<::std::vector<::std::int64_t>> /*r*/);
  virtual folly::Future<std::unique_ptr<::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>>> future_binary_keyed_map(std::unique_ptr<::std::vector<::std::int64_t>> p_r);
  virtual folly::SemiFuture<std::unique_ptr<::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>>> semifuture_binary_keyed_map(std::unique_ptr<::std::vector<::std::int64_t>> p_r);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>>> co_binary_keyed_map(std::unique_ptr<::std::vector<::std::int64_t>> p_r);
  virtual folly::coro::Task<std::unique_ptr<::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>>> co_binary_keyed_map(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::int64_t>> p_r);
#endif
  virtual void async_tm_binary_keyed_map(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>>> callback, std::unique_ptr<::std::vector<::std::int64_t>> p_r);
 private:
  static ::apache::thrift::fixtures::types::SomeServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_bounce_map{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_binary_keyed_map{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_bounce_map(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::apache::thrift::fixtures::types::SomeMap& /*p_m*/) {}
  virtual void fbthrift_execute_decorators_after_bounce_map(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::apache::thrift::fixtures::types::SomeMap& /*result*/) {}
  virtual void fbthrift_execute_decorators_before_binary_keyed_map(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::std::vector<::std::int64_t>& /*p_r*/) {}
  virtual void fbthrift_execute_decorators_after_binary_keyed_map(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>& /*result*/) {}
};

namespace detail {
template <> struct TSchemaAssociation<::apache::thrift::fixtures::types::SomeService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 7104950197475503333;
  static constexpr ::std::string_view definitionKey = {"\xb7\xa3\xc6\x01\x74\x50\x57\x4a\x92\x90\xb3\x66\x0a\x78\xe3\xa2", 16};
};
}
} // namespace apache::thrift

namespace apache::thrift::fixtures::types {
using SomeServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<SomeService> instead")]] = ::apache::thrift::ServiceHandler<SomeService>;
} // namespace apache::thrift::fixtures::types

namespace apache::thrift::fixtures::types {
class SomeServiceSvNull : public ::apache::thrift::ServiceHandler<SomeService> {
 public:
  void bounce_map(::apache::thrift::fixtures::types::SomeMap& /*_return*/, std::unique_ptr<::apache::thrift::fixtures::types::SomeMap> /*m*/) override;
  void binary_keyed_map(::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t>& /*_return*/, std::unique_ptr<::std::vector<::std::int64_t>> /*r*/) override;
};

class SomeServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::apache::thrift::fixtures::types::SomeService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<SomeServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const SomeServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const SomeServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'bounce_map'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_bounce_map(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_bounce_map(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_bounce_map(
      apache::thrift::ContextStack* ctx,
      ::apache::thrift::fixtures::types::SomeMap const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_bounce_map(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'bounce_map'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'binary_keyed_map'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_binary_keyed_map(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_binary_keyed_map(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_binary_keyed_map(
      apache::thrift::ContextStack* ctx,
      ::std::map<::apache::thrift::fixtures::types::TBinary, ::std::int64_t> const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_binary_keyed_map(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'binary_keyed_map'
  //

  //
  // End of Service Methods
  //
 public:
  SomeServiceAsyncProcessor(::apache::thrift::ServiceHandler<::apache::thrift::fixtures::types::SomeService>* iface) :
      iface_(iface) {}
  ~SomeServiceAsyncProcessor() override {}
};

} // namespace apache::thrift::fixtures::types
