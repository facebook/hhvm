<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace facebook\thrift\compiler\test\fixtures\default_values_rectification;

/**
 * Original thrift struct:-
 * EmptyStruct
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/compiler/test/fixtures/default_values_rectification/EmptyStruct'))>>
class EmptyStruct implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct()[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'EmptyStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.EmptyStruct",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

/**
 * Original thrift struct:-
 * TestStruct
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/compiler/test/fixtures/default_values_rectification/TestStruct'))>>
class TestStruct implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'unqualified_int_field',
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'unqualified_bool_field',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'unqualified_list_field',
      'type' => \TType::LST,
      'etype' => \TType::I32,
      'elem' => shape(
        'type' => \TType::I32,
      ),
      'format' => 'collection',
    ),
    4 => shape(
      'var' => 'unqualified_struct_field',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct::class,
    ),
    5 => shape(
      'var' => 'optional_int_field',
      'type' => \TType::I32,
    ),
    6 => shape(
      'var' => 'optional_bool_field',
      'type' => \TType::BOOL,
    ),
    7 => shape(
      'var' => 'optional_list_field',
      'type' => \TType::LST,
      'etype' => \TType::I32,
      'elem' => shape(
        'type' => \TType::I32,
      ),
      'format' => 'collection',
    ),
    8 => shape(
      'var' => 'optional_struct_field',
      'type' => \TType::STRUCT,
      'class' => \facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'unqualified_int_field' => 1,
    'unqualified_bool_field' => 2,
    'unqualified_list_field' => 3,
    'unqualified_struct_field' => 4,
    'optional_int_field' => 5,
    'optional_bool_field' => 6,
    'optional_list_field' => 7,
    'optional_struct_field' => 8,
  ];

  const type TConstructorShape = shape(
    ?'unqualified_int_field' => ?int,
    ?'unqualified_bool_field' => ?bool,
    ?'unqualified_list_field' => ?Vector<int>,
    ?'unqualified_struct_field' => ?\facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct,
    ?'optional_int_field' => ?int,
    ?'optional_bool_field' => ?bool,
    ?'optional_list_field' => ?Vector<int>,
    ?'optional_struct_field' => ?\facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct,
  );

  const int STRUCTURAL_ID = 3868425414146542049;
  /**
   * Original thrift field:-
   * 1: i32 unqualified_int_field
   */
  public int $unqualified_int_field;
  /**
   * Original thrift field:-
   * 2: bool unqualified_bool_field
   */
  public bool $unqualified_bool_field;
  /**
   * Original thrift field:-
   * 3: list<i32> unqualified_list_field
   */
  public Vector<int> $unqualified_list_field;
  /**
   * Original thrift field:-
   * 4: module.EmptyStruct unqualified_struct_field
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct $unqualified_struct_field;
  /**
   * Original thrift field:-
   * 5: i32 optional_int_field
   */
  public int $optional_int_field;
  /**
   * Original thrift field:-
   * 6: bool optional_bool_field
   */
  public bool $optional_bool_field;
  /**
   * Original thrift field:-
   * 7: list<i32> optional_list_field
   */
  public Vector<int> $optional_list_field;
  /**
   * Original thrift field:-
   * 8: module.EmptyStruct optional_struct_field
   */
  public ?\facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct $optional_struct_field;

  public function __construct(?int $unqualified_int_field = null, ?bool $unqualified_bool_field = null, ?Vector<int> $unqualified_list_field = null, ?\facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct $unqualified_struct_field = null, ?int $optional_int_field = null, ?bool $optional_bool_field = null, ?Vector<int> $optional_list_field = null, ?\facebook\thrift\compiler\test\fixtures\default_values_rectification\EmptyStruct $optional_struct_field = null)[] {
    $this->unqualified_int_field = $unqualified_int_field ?? 0;
    $this->unqualified_bool_field = $unqualified_bool_field ?? false;
    $this->unqualified_list_field = $unqualified_list_field ?? Vector {
    };
    $this->unqualified_struct_field = $unqualified_struct_field;
    $this->optional_int_field = $optional_int_field ?? 42;
    $this->optional_bool_field = $optional_bool_field ?? true;
    $this->optional_list_field = $optional_list_field ?? Vector {
      1,
      2,
    };
    $this->optional_struct_field = $optional_struct_field;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'unqualified_int_field'),
      Shapes::idx($shape, 'unqualified_bool_field'),
      Shapes::idx($shape, 'unqualified_list_field'),
      Shapes::idx($shape, 'unqualified_struct_field'),
      Shapes::idx($shape, 'optional_int_field'),
      Shapes::idx($shape, 'optional_bool_field'),
      Shapes::idx($shape, 'optional_list_field'),
      Shapes::idx($shape, 'optional_struct_field'),
    );
  }

  public function getName()[]: string {
    return 'TestStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.TestStruct",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "unqualified_int_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "unqualified_bool_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => \tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "unqualified_list_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.EmptyStruct",
                    )
                  ),
                )
              ),
              "name" => "unqualified_struct_field",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optional_int_field",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "optional_bool_field",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => \tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => \tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optional_list_field",
              "is_optional" => true,
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => \tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.EmptyStruct",
                    )
                  ),
                )
              ),
              "name" => "optional_struct_field",
              "is_optional" => true,
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'optional_int_field' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue' => \facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'optional_bool_field' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue' => \facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'optional_list_field' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue' => \facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'optional_struct_field' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue' => \facebook\thrift\annotation\AllowUnsafeOptionalCustomDefaultValue::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

