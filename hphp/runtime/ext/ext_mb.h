/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010-2013 Facebook, Inc. (http://www.facebook.com)     |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef incl_HPHP_EXT_MB_H_
#define incl_HPHP_EXT_MB_H_

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include "hphp/runtime/base/base-includes.h"

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

Array f_mb_list_encodings();
Variant f_mb_list_encodings_alias_names(CStrRef name = null_string);
Variant f_mb_list_mime_names(CStrRef name = null_string);
bool f_mb_check_encoding(CStrRef var = null_string, CStrRef encoding = null_string);
Variant f_mb_convert_case(CStrRef str, int mode, CStrRef encoding = null_string);
Variant f_mb_convert_encoding(CStrRef str, CStrRef to_encoding, CVarRef from_encoding = null_variant);
Variant f_mb_convert_kana(CStrRef str, CStrRef option = null_string, CStrRef encoding = null_string);
Variant f_mb_convert_variables(int _argc, CStrRef to_encoding, CVarRef from_encoding, VRefParam vars, CArrRef _argv = null_array);
Variant f_mb_decode_mimeheader(CStrRef str);
Variant f_mb_decode_numericentity(CStrRef str, CVarRef convmap, CStrRef encoding = null_string);
Variant f_mb_detect_encoding(CStrRef str, CVarRef encoding_list = null_variant, CVarRef strict = null_variant);
Variant f_mb_detect_order(CVarRef encoding_list = null_variant);
Variant f_mb_encode_mimeheader(CStrRef str, CStrRef charset = null_string, CStrRef transfer_encoding = null_string, CStrRef linefeed = "\r\n", int indent = 0);
Variant f_mb_encode_numericentity(CStrRef str, CVarRef convmap, CStrRef encoding = null_string);
bool f_mb_ereg_match(CStrRef pattern, CStrRef str, CStrRef option = null_string);
Variant f_mb_ereg_replace(CVarRef pattern, CStrRef replacement, CStrRef str, CStrRef option = null_string);
int64_t f_mb_ereg_search_getpos();
Variant f_mb_ereg_search_getregs();
bool f_mb_ereg_search_init(CStrRef str, CStrRef pattern = null_string, CStrRef option = null_string);
Variant f_mb_ereg_search_pos(CStrRef pattern = null_string, CStrRef option = null_string);
Variant f_mb_ereg_search_regs(CStrRef pattern = null_string, CStrRef option = null_string);
bool f_mb_ereg_search_setpos(int position);
Variant f_mb_ereg_search(CStrRef pattern = null_string, CStrRef option = null_string);
Variant f_mb_ereg(CVarRef pattern, CStrRef str, VRefParam regs = uninit_null());
Variant f_mb_eregi_replace(CVarRef pattern, CStrRef replacement, CStrRef str, CStrRef option = null_string);
Variant f_mb_eregi(CVarRef pattern, CStrRef str, VRefParam regs = uninit_null());
Variant f_mb_get_info(CStrRef type = null_string);
Variant f_mb_http_input(CStrRef type = null_string);
Variant f_mb_http_output(CStrRef encoding = null_string);
Variant f_mb_internal_encoding(CStrRef encoding = null_string);
Variant f_mb_language(CStrRef language = null_string);
String f_mb_output_handler(CStrRef contents, int status);
bool f_mb_parse_str(CStrRef encoded_string, VRefParam result = uninit_null());
Variant f_mb_preferred_mime_name(CStrRef encoding);
Variant f_mb_regex_encoding(CStrRef encoding = null_string);
String f_mb_regex_set_options(CStrRef options = null_string);
bool f_mb_send_mail(CStrRef to, CStrRef subject, CStrRef message, CStrRef headers = null_string, CStrRef extra_cmd = null_string);
Variant f_mb_split(CStrRef pattern, CStrRef str, int count = -1);
Variant f_mb_strcut(CStrRef str, int start, int length = 0x7FFFFFFF, CStrRef encoding = null_string);
Variant f_mb_strimwidth(CStrRef str, int start, int width, CStrRef trimmarker = null_string, CStrRef encoding = null_string);
Variant f_mb_stripos(CStrRef haystack, CStrRef needle, int offset = 0, CStrRef encoding = null_string);
Variant f_mb_stristr(CStrRef haystack, CStrRef needle, bool part = false, CStrRef encoding = null_string);
Variant f_mb_strlen(CStrRef str, CStrRef encoding = null_string);
Variant f_mb_strpos(CStrRef haystack, CStrRef needle, int offset = 0, CStrRef encoding = null_string);
Variant f_mb_strrchr(CStrRef haystack, CStrRef needle, bool part = false, CStrRef encoding = null_string);
Variant f_mb_strrichr(CStrRef haystack, CStrRef needle, bool part = false, CStrRef encoding = null_string);
Variant f_mb_strripos(CStrRef haystack, CStrRef needle, int offset = 0, CStrRef encoding = null_string);
Variant f_mb_strrpos(CStrRef haystack, CStrRef needle, CVarRef offset = 0LL, CStrRef encoding = null_string);
Variant f_mb_strstr(CStrRef haystack, CStrRef needle, bool part = false, CStrRef encoding = null_string);
Variant f_mb_strtolower(CStrRef str, CStrRef encoding = null_string);
Variant f_mb_strtoupper(CStrRef str, CStrRef encoding = null_string);
Variant f_mb_strwidth(CStrRef str, CStrRef encoding = null_string);
Variant f_mb_substitute_character(CVarRef substrchar = null_variant);
Variant f_mb_substr_count(CStrRef haystack, CStrRef needle, CStrRef encoding = null_string);
Variant f_mb_substr(CStrRef str, int start, int length = 0x7FFFFFFF, CStrRef encoding = null_string);

///////////////////////////////////////////////////////////////////////////////
}

#endif // incl_HPHP_EXT_MB_H_
