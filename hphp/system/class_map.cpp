/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by idl/class_map.php
#include <runtime/base/base_includes.h>
#include <runtime/ext/ext.h>
namespace HPHP {
const int64_t k_ABDAY_1 = 131072;
const int64_t k_ABDAY_2 = 131073;
const int64_t k_ABDAY_3 = 131074;
const int64_t k_ABDAY_4 = 131075;
const int64_t k_ABDAY_5 = 131076;
const int64_t k_ABDAY_6 = 131077;
const int64_t k_ABDAY_7 = 131078;
const int64_t k_ABMON_1 = 131086;
const int64_t k_ABMON_10 = 131095;
const int64_t k_ABMON_11 = 131096;
const int64_t k_ABMON_12 = 131097;
const int64_t k_ABMON_2 = 131087;
const int64_t k_ABMON_3 = 131088;
const int64_t k_ABMON_4 = 131089;
const int64_t k_ABMON_5 = 131090;
const int64_t k_ABMON_6 = 131091;
const int64_t k_ABMON_7 = 131092;
const int64_t k_ABMON_8 = 131093;
const int64_t k_ABMON_9 = 131094;
const int64_t k_AF_INET = 2;
const int64_t k_AF_INET6 = 10;
const int64_t k_AF_UNIX = 1;
const int64_t k_ALT_DIGITS = 131119;
const int64_t k_AM_STR = 131110;
const int64_t k_APACHE_MAP = 200;
const int64_t k_ASSERT_ACTIVE = 1;
const int64_t k_ASSERT_BAIL = 3;
const int64_t k_ASSERT_CALLBACK = 2;
const int64_t k_ASSERT_QUIET_EVAL = 5;
const int64_t k_ASSERT_WARNING = 4;
const int64_t k_CASE_LOWER = 0;
const int64_t k_CASE_UPPER = 1;
const int64_t k_CHAR_MAX = 127;
const int64_t k_CLOCK_MONOTONIC = 1;
const int64_t k_CLOCK_PROCESS_CPUTIME_ID = 2;
const int64_t k_CLOCK_REALTIME = 0;
const int64_t k_CLOCK_THREAD_CPUTIME_ID = 3;
const int64_t k_CL_EXPUNGE = 32768;
const int64_t k_CODESET = 14;
const int64_t k_CONNECTION_ABORTED = 1;
const int64_t k_CONNECTION_NORMAL = 0;
const int64_t k_CONNECTION_TIMEOUT = 2;
const int64_t k_COUNT_NORMAL = 0;
const int64_t k_COUNT_RECURSIVE = 1;
const int64_t k_CP_MOVE = 2;
const int64_t k_CP_UID = 1;
const int64_t k_CREDITS_ALL = 4294967295;
const int64_t k_CREDITS_DOCS = 16;
const int64_t k_CREDITS_FULLPAGE = 32;
const int64_t k_CREDITS_GENERAL = 2;
const int64_t k_CREDITS_GROUP = 1;
const int64_t k_CREDITS_MODULES = 8;
const int64_t k_CREDITS_QA = 64;
const int64_t k_CREDITS_SAPI = 4;
const int64_t k_CRNCYSTR = 262159;
const int64_t k_CRYPT_BLOWFISH = 0;
const int64_t k_CRYPT_EXT_DES = 0;
const int64_t k_CRYPT_MD5 = 1;
const int64_t k_CRYPT_SALT_LENGTH = 12;
const int64_t k_CRYPT_STD_DES = 1;
const int64_t k_CURLAUTH_ANY = -1;
const int64_t k_CURLAUTH_ANYSAFE = -2;
const int64_t k_CURLAUTH_BASIC = 1;
const int64_t k_CURLAUTH_DIGEST = 2;
const int64_t k_CURLAUTH_GSSNEGOTIATE = 4;
const int64_t k_CURLAUTH_NTLM = 8;
const int64_t k_CURLCLOSEPOLICY_CALLBACK = 5;
const int64_t k_CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 2;
const int64_t k_CURLCLOSEPOLICY_LEAST_TRAFFIC = 3;
const int64_t k_CURLCLOSEPOLICY_OLDEST = 1;
const int64_t k_CURLCLOSEPOLICY_SLOWEST = 4;
const int64_t k_CURLE_ABORTED_BY_CALLBACK = 42;
const int64_t k_CURLE_BAD_CALLING_ORDER = 44;
const int64_t k_CURLE_BAD_CONTENT_ENCODING = 61;
const int64_t k_CURLE_BAD_FUNCTION_ARGUMENT = 43;
const int64_t k_CURLE_BAD_PASSWORD_ENTERED = 46;
const int64_t k_CURLE_COULDNT_CONNECT = 7;
const int64_t k_CURLE_COULDNT_RESOLVE_HOST = 6;
const int64_t k_CURLE_COULDNT_RESOLVE_PROXY = 5;
const int64_t k_CURLE_FAILED_INIT = 2;
const int64_t k_CURLE_FILESIZE_EXCEEDED = 63;
const int64_t k_CURLE_FILE_COULDNT_READ_FILE = 37;
const int64_t k_CURLE_FTP_ACCESS_DENIED = 9;
const int64_t k_CURLE_FTP_BAD_DOWNLOAD_RESUME = 36;
const int64_t k_CURLE_FTP_CANT_GET_HOST = 15;
const int64_t k_CURLE_FTP_CANT_RECONNECT = 16;
const int64_t k_CURLE_FTP_COULDNT_GET_SIZE = 32;
const int64_t k_CURLE_FTP_COULDNT_RETR_FILE = 19;
const int64_t k_CURLE_FTP_COULDNT_SET_ASCII = 29;
const int64_t k_CURLE_FTP_COULDNT_SET_BINARY = 17;
const int64_t k_CURLE_FTP_COULDNT_STOR_FILE = 25;
const int64_t k_CURLE_FTP_COULDNT_USE_REST = 31;
const int64_t k_CURLE_FTP_PORT_FAILED = 30;
const int64_t k_CURLE_FTP_QUOTE_ERROR = 21;
const int64_t k_CURLE_FTP_SSL_FAILED = 64;
const int64_t k_CURLE_FTP_USER_PASSWORD_INCORRECT = 10;
const int64_t k_CURLE_FTP_WEIRD_227_FORMAT = 14;
const int64_t k_CURLE_FTP_WEIRD_PASS_REPLY = 11;
const int64_t k_CURLE_FTP_WEIRD_PASV_REPLY = 13;
const int64_t k_CURLE_FTP_WEIRD_SERVER_REPLY = 8;
const int64_t k_CURLE_FTP_WEIRD_USER_REPLY = 12;
const int64_t k_CURLE_FTP_WRITE_ERROR = 20;
const int64_t k_CURLE_FUNCTION_NOT_FOUND = 41;
const int64_t k_CURLE_GOT_NOTHING = 52;
const int64_t k_CURLE_HTTP_NOT_FOUND = 22;
const int64_t k_CURLE_HTTP_PORT_FAILED = 45;
const int64_t k_CURLE_HTTP_POST_ERROR = 34;
const int64_t k_CURLE_HTTP_RANGE_ERROR = 33;
const int64_t k_CURLE_LDAP_CANNOT_BIND = 38;
const int64_t k_CURLE_LDAP_INVALID_URL = 62;
const int64_t k_CURLE_LDAP_SEARCH_FAILED = 39;
const int64_t k_CURLE_LIBRARY_NOT_FOUND = 40;
const int64_t k_CURLE_MALFORMAT_USER = 24;
const int64_t k_CURLE_OBSOLETE = 50;
const int64_t k_CURLE_OK = 0;
const int64_t k_CURLE_OPERATION_TIMEOUTED = 28;
const int64_t k_CURLE_OUT_OF_MEMORY = 27;
const int64_t k_CURLE_PARTIAL_FILE = 18;
const int64_t k_CURLE_READ_ERROR = 26;
const int64_t k_CURLE_RECV_ERROR = 56;
const int64_t k_CURLE_SEND_ERROR = 55;
const int64_t k_CURLE_SHARE_IN_USE = 57;
const int64_t k_CURLE_SSL_CACERT = 60;
const int64_t k_CURLE_SSL_CERTPROBLEM = 58;
const int64_t k_CURLE_SSL_CIPHER = 59;
const int64_t k_CURLE_SSL_CONNECT_ERROR = 35;
const int64_t k_CURLE_SSL_ENGINE_NOTFOUND = 53;
const int64_t k_CURLE_SSL_ENGINE_SETFAILED = 54;
const int64_t k_CURLE_SSL_PEER_CERTIFICATE = 51;
const int64_t k_CURLE_TELNET_OPTION_SYNTAX = 49;
const int64_t k_CURLE_TOO_MANY_REDIRECTS = 47;
const int64_t k_CURLE_UNKNOWN_TELNET_OPTION = 48;
const int64_t k_CURLE_UNSUPPORTED_PROTOCOL = 1;
const int64_t k_CURLE_URL_MALFORMAT = 3;
const int64_t k_CURLE_URL_MALFORMAT_USER = 4;
const int64_t k_CURLE_WRITE_ERROR = 23;
const int64_t k_CURLFTPAUTH_DEFAULT = 0;
const int64_t k_CURLFTPAUTH_SSL = 1;
const int64_t k_CURLFTPAUTH_TLS = 2;
const int64_t k_CURLFTPSSL_ALL = 3;
const int64_t k_CURLFTPSSL_CONTROL = 2;
const int64_t k_CURLFTPSSL_NONE = 0;
const int64_t k_CURLFTPSSL_TRY = 1;
const int64_t k_CURLINFO_CONNECT_TIME = 3145733;
const int64_t k_CURLINFO_CONTENT_LENGTH_DOWNLOAD = 3145743;
const int64_t k_CURLINFO_CONTENT_LENGTH_UPLOAD = 3145744;
const int64_t k_CURLINFO_CONTENT_TYPE = 1048594;
const int64_t k_CURLINFO_EFFECTIVE_URL = 1048577;
const int64_t k_CURLINFO_FILETIME = 2097166;
const int64_t k_CURLINFO_HEADER_OUT = 2;
const int64_t k_CURLINFO_HEADER_SIZE = 2097163;
const int64_t k_CURLINFO_HTTP_CODE = 2097154;
const int64_t k_CURLINFO_NAMELOOKUP_TIME = 3145732;
const int64_t k_CURLINFO_PRETRANSFER_TIME = 3145734;
const int64_t k_CURLINFO_PRIVATE = 1048597;
const int64_t k_CURLINFO_REDIRECT_COUNT = 2097172;
const int64_t k_CURLINFO_REDIRECT_TIME = 3145747;
const int64_t k_CURLINFO_REQUEST_SIZE = 2097164;
const int64_t k_CURLINFO_SIZE_DOWNLOAD = 3145736;
const int64_t k_CURLINFO_SIZE_UPLOAD = 3145735;
const int64_t k_CURLINFO_SPEED_DOWNLOAD = 3145737;
const int64_t k_CURLINFO_SPEED_UPLOAD = 3145738;
const int64_t k_CURLINFO_SSL_VERIFYRESULT = 2097165;
const int64_t k_CURLINFO_STARTTRANSFER_TIME = 3145745;
const int64_t k_CURLINFO_TOTAL_TIME = 3145731;
const int64_t k_CURLMSG_DONE = 1;
const int64_t k_CURLM_BAD_EASY_HANDLE = 2;
const int64_t k_CURLM_BAD_HANDLE = 1;
const int64_t k_CURLM_CALL_MULTI_PERFORM = -1;
const int64_t k_CURLM_INTERNAL_ERROR = 4;
const int64_t k_CURLM_OK = 0;
const int64_t k_CURLM_OUT_OF_MEMORY = 3;
const int64_t k_CURLOPT_AUTOREFERER = 58;
const int64_t k_CURLOPT_BINARYTRANSFER = 19914;
const int64_t k_CURLOPT_BUFFERSIZE = 98;
const int64_t k_CURLOPT_CAINFO = 10065;
const int64_t k_CURLOPT_CAPATH = 10097;
const int64_t k_CURLOPT_CLOSEPOLICY = 72;
const int64_t k_CURLOPT_CONNECTTIMEOUT = 78;
const int64_t k_CURLOPT_COOKIE = 10022;
const int64_t k_CURLOPT_COOKIEFILE = 10031;
const int64_t k_CURLOPT_COOKIEJAR = 10082;
const int64_t k_CURLOPT_COOKIESESSION = 96;
const int64_t k_CURLOPT_CRLF = 27;
const int64_t k_CURLOPT_CUSTOMREQUEST = 10036;
const int64_t k_CURLOPT_DNS_CACHE_TIMEOUT = 92;
const int64_t k_CURLOPT_DNS_USE_GLOBAL_CACHE = 91;
const int64_t k_CURLOPT_EGDSOCKET = 10077;
const int64_t k_CURLOPT_ENCODING = 10102;
const int64_t k_CURLOPT_FAILONERROR = 45;
const int64_t k_CURLOPT_FILE = 10001;
const int64_t k_CURLOPT_FILETIME = 69;
const int64_t k_CURLOPT_FOLLOWLOCATION = 52;
const int64_t k_CURLOPT_FORBID_REUSE = 75;
const int64_t k_CURLOPT_FRESH_CONNECT = 74;
const int64_t k_CURLOPT_FTPAPPEND = 50;
const int64_t k_CURLOPT_FTPLISTONLY = 48;
const int64_t k_CURLOPT_FTPPORT = 10017;
const int64_t k_CURLOPT_FTPSSLAUTH = 129;
const int64_t k_CURLOPT_FTP_CREATE_MISSING_DIRS = 110;
const int64_t k_CURLOPT_FTP_SSL = 119;
const int64_t k_CURLOPT_FTP_USE_EPRT = 106;
const int64_t k_CURLOPT_FTP_USE_EPSV = 85;
const int64_t k_CURLOPT_HEADER = 42;
const int64_t k_CURLOPT_HEADERFUNCTION = 20079;
const int64_t k_CURLOPT_HTTP200ALIASES = 10104;
const int64_t k_CURLOPT_HTTPAUTH = 107;
const int64_t k_CURLOPT_HTTPGET = 80;
const int64_t k_CURLOPT_HTTPHEADER = 10023;
const int64_t k_CURLOPT_HTTPPROXYTUNNEL = 61;
const int64_t k_CURLOPT_HTTP_VERSION = 84;
const int64_t k_CURLOPT_INFILE = 10009;
const int64_t k_CURLOPT_INFILESIZE = 14;
const int64_t k_CURLOPT_INTERFACE = 10062;
const int64_t k_CURLOPT_IPRESOLVE = 113;
const int64_t k_CURLOPT_KRB4LEVEL = 10063;
const int64_t k_CURLOPT_LOW_SPEED_LIMIT = 19;
const int64_t k_CURLOPT_LOW_SPEED_TIME = 20;
const int64_t k_CURLOPT_MAXCONNECTS = 71;
const int64_t k_CURLOPT_MAXREDIRS = 68;
const int64_t k_CURLOPT_MUTE = -2;
const int64_t k_CURLOPT_NETRC = 51;
const int64_t k_CURLOPT_NOBODY = 44;
const int64_t k_CURLOPT_NOPROGRESS = 43;
const int64_t k_CURLOPT_NOSIGNAL = 99;
const int64_t k_CURLOPT_PASSWDFUNCTION = -3;
const int64_t k_CURLOPT_PORT = 3;
const int64_t k_CURLOPT_POST = 47;
const int64_t k_CURLOPT_POSTFIELDS = 10015;
const int64_t k_CURLOPT_POSTQUOTE = 10039;
const int64_t k_CURLOPT_PRIVATE = 10103;
const int64_t k_CURLOPT_PROXY = 10004;
const int64_t k_CURLOPT_PROXYAUTH = 111;
const int64_t k_CURLOPT_PROXYPORT = 59;
const int64_t k_CURLOPT_PROXYTYPE = 101;
const int64_t k_CURLOPT_PROXYUSERPWD = 10006;
const int64_t k_CURLOPT_PUT = 54;
const int64_t k_CURLOPT_QUOTE = 10028;
const int64_t k_CURLOPT_RANDOM_FILE = 10076;
const int64_t k_CURLOPT_RANGE = 10007;
const int64_t k_CURLOPT_READDATA = 10009;
const int64_t k_CURLOPT_READFUNCTION = 20012;
const int64_t k_CURLOPT_REFERER = 10016;
const int64_t k_CURLOPT_RESUME_FROM = 21;
const int64_t k_CURLOPT_RETURNTRANSFER = 19913;
const int64_t k_CURLOPT_SSLCERT = 10025;
const int64_t k_CURLOPT_SSLCERTPASSWD = 10026;
const int64_t k_CURLOPT_SSLCERTTYPE = 10086;
const int64_t k_CURLOPT_SSLENGINE = 10089;
const int64_t k_CURLOPT_SSLENGINE_DEFAULT = 90;
const int64_t k_CURLOPT_SSLKEY = 10087;
const int64_t k_CURLOPT_SSLKEYPASSWD = 10026;
const int64_t k_CURLOPT_SSLKEYTYPE = 10088;
const int64_t k_CURLOPT_SSLVERSION = 32;
const int64_t k_CURLOPT_SSL_CIPHER_LIST = 10083;
const int64_t k_CURLOPT_SSL_VERIFYHOST = 81;
const int64_t k_CURLOPT_SSL_VERIFYPEER = 64;
const int64_t k_CURLOPT_STDERR = 10037;
const int64_t k_CURLOPT_TCP_NODELAY = 121;
const int64_t k_CURLOPT_TIMECONDITION = 33;
const int64_t k_CURLOPT_TIMEOUT = 13;
const int64_t k_CURLOPT_TIMEVALUE = 34;
const int64_t k_CURLOPT_TRANSFERTEXT = 53;
const int64_t k_CURLOPT_UNRESTRICTED_AUTH = 105;
const int64_t k_CURLOPT_UPLOAD = 46;
const int64_t k_CURLOPT_URL = 10002;
const int64_t k_CURLOPT_USERAGENT = 10018;
const int64_t k_CURLOPT_USERPWD = 10005;
const int64_t k_CURLOPT_VERBOSE = 41;
const int64_t k_CURLOPT_WRITEFUNCTION = 20011;
const int64_t k_CURLOPT_WRITEHEADER = 10029;
const int64_t k_CURLPROXY_HTTP = 0;
const int64_t k_CURLPROXY_SOCKS5 = 5;
const int64_t k_CURLVERSION_NOW = 2;
const int64_t k_CURL_HTTP_VERSION_1_0 = 1;
const int64_t k_CURL_HTTP_VERSION_1_1 = 2;
const int64_t k_CURL_HTTP_VERSION_NONE = 0;
const int64_t k_CURL_IPRESOLVE_V4 = 1;
const int64_t k_CURL_IPRESOLVE_V6 = 2;
const int64_t k_CURL_IPRESOLVE_WHATEVER = 0;
const int64_t k_CURL_NETRC_IGNORED = 0;
const int64_t k_CURL_NETRC_OPTIONAL = 1;
const int64_t k_CURL_NETRC_REQUIRED = 2;
const int64_t k_CURL_TIMECOND_IFMODSINCE = 1;
const int64_t k_CURL_TIMECOND_IFUNMODSINCE = 2;
const int64_t k_CURL_TIMECOND_LASTMOD = 3;
const int64_t k_CURL_VERSION_IPV6 = 1;
const int64_t k_CURL_VERSION_KERBEROS4 = 2;
const int64_t k_CURL_VERSION_LIBZ = 8;
const int64_t k_CURL_VERSION_SSL = 4;
extern const StaticString k_DATE_ATOM("Y-m-d\\TH:i:sP",13);
extern const StaticString k_DATE_COOKIE("l, d-M-y H:i:s T",16);
extern const StaticString k_DATE_ISO8601("Y-m-d\\TH:i:sO",13);
extern const StaticString k_DATE_RFC1036("D, d M y H:i:s O",16);
extern const StaticString k_DATE_RFC1123("D, d M Y H:i:s O",16);
extern const StaticString k_DATE_RFC2822("D, d M Y H:i:s O",16);
extern const StaticString k_DATE_RFC3339("Y-m-d\\TH:i:sP",13);
extern const StaticString k_DATE_RFC822("D, d M y H:i:s O",16);
extern const StaticString k_DATE_RFC850("l, d-M-y H:i:s T",16);
extern const StaticString k_DATE_RSS("D, d M Y H:i:s O",16);
extern const StaticString k_DATE_W3C("Y-m-d\\TH:i:sP",13);
const int64_t k_DAY_1 = 131079;
const int64_t k_DAY_2 = 131080;
const int64_t k_DAY_3 = 131081;
const int64_t k_DAY_4 = 131082;
const int64_t k_DAY_5 = 131083;
const int64_t k_DAY_6 = 131084;
const int64_t k_DAY_7 = 131085;
const int64_t k_DEBUG_LOG_AGENT = 8;
const int64_t k_DEBUG_LOG_ALL = 65535;
const int64_t k_DEBUG_LOG_COOKIE = 128;
const int64_t k_DEBUG_LOG_DEFAULT = 127;
const int64_t k_DEBUG_LOG_IP = 64;
const int64_t k_DEBUG_LOG_NONE = 0;
const int64_t k_DEBUG_LOG_POST = 16;
const int64_t k_DEBUG_LOG_REFERER = 4;
const int64_t k_DEBUG_LOG_TRACE = 1;
const int64_t k_DEBUG_LOG_URL = 2;
const int64_t k_DEBUG_LOG_USER = 32;
extern const StaticString k_DEFAULT_INCLUDE_PATH("",0);
extern const StaticString k_DIRECTORY_SEPARATOR("/",1);
const int64_t k_DNS_A = 1;
const int64_t k_DNS_A6 = 16777216;
const int64_t k_DNS_AAAA = 134217728;
const int64_t k_DNS_ALL = 251713587;
const int64_t k_DNS_ANY = 268435456;
const int64_t k_DNS_CNAME = 16;
const int64_t k_DNS_HINFO = 4096;
const int64_t k_DNS_MX = 16384;
const int64_t k_DNS_NAPTR = 67108864;
const int64_t k_DNS_NS = 2;
const int64_t k_DNS_PTR = 2048;
const int64_t k_DNS_SOA = 32;
const int64_t k_DNS_SRV = 33554432;
const int64_t k_DNS_TXT = 32768;
const int64_t k_DOMSTRING_SIZE_ERR = 2;
const int64_t k_DOM_HIERARCHY_REQUEST_ERR = 3;
const int64_t k_DOM_INDEX_SIZE_ERR = 1;
const int64_t k_DOM_INUSE_ATTRIBUTE_ERR = 10;
const int64_t k_DOM_INVALID_ACCESS_ERR = 15;
const int64_t k_DOM_INVALID_CHARACTER_ERR = 5;
const int64_t k_DOM_INVALID_MODIFICATION_ERR = 13;
const int64_t k_DOM_INVALID_STATE_ERR = 11;
const int64_t k_DOM_NAMESPACE_ERR = 14;
const int64_t k_DOM_NOT_FOUND_ERR = 8;
const int64_t k_DOM_NOT_SUPPORTED_ERR = 9;
const int64_t k_DOM_NO_DATA_ALLOWED_ERR = 6;
const int64_t k_DOM_NO_MODIFICATION_ALLOWED_ERR = 7;
const int64_t k_DOM_PHP_ERR = 0;
const int64_t k_DOM_SYNTAX_ERR = 12;
const int64_t k_DOM_VALIDATION_ERR = 16;
const int64_t k_DOM_WRONG_DOCUMENT_ERR = 4;
const int64_t k_D_FMT = 131113;
const int64_t k_D_T_FMT = 131112;
const int64_t k_ENC7BIT = 0;
const int64_t k_ENC8BIT = 1;
const int64_t k_ENCBASE64 = 3;
const int64_t k_ENCBINARY = 2;
const int64_t k_ENCOTHER = 5;
const int64_t k_ENCQUOTEDPRINTABLE = 4;
const int64_t k_ENT_COMPAT = 2;
const int64_t k_ENT_NOQUOTES = 0;
const int64_t k_ENT_QUOTES = 3;
const int64_t k_ENT_FB_UTF8 = 4;
const int64_t k_ENT_FB_UTF8_ONLY = 8;
const int64_t k_ERA = 131116;
const int64_t k_ERA_D_FMT = 131118;
const int64_t k_ERA_D_T_FMT = 131120;
const int64_t k_ERA_T_FMT = 131121;
const int64_t k_EXIF_USE_MBSTRING = 0;
const int64_t k_EXTR_IF_EXISTS = 6;
const int64_t k_EXTR_OVERWRITE = 0;
const int64_t k_EXTR_PREFIX_ALL = 3;
const int64_t k_EXTR_PREFIX_IF_EXISTS = 5;
const int64_t k_EXTR_PREFIX_INVALID = 4;
const int64_t k_EXTR_PREFIX_SAME = 2;
const int64_t k_EXTR_REFS = 256;
const int64_t k_EXTR_SKIP = 1;
const int64_t k_E_ALL = 30719;
const int64_t k_E_COMPILE_ERROR = 64;
const int64_t k_E_COMPILE_WARNING = 128;
const int64_t k_E_CORE_ERROR = 16;
const int64_t k_E_CORE_WARNING = 32;
const int64_t k_E_DEPRECATED = 8192;
const int64_t k_E_ERROR = 1;
const int64_t k_E_NOTICE = 8;
const int64_t k_E_PARSE = 4;
const int64_t k_E_RECOVERABLE_ERROR = 4096;
const int64_t k_E_STRICT = 2048;
const int64_t k_E_USER_DEPRECATED = 16384;
const int64_t k_E_USER_ERROR = 256;
const int64_t k_E_USER_NOTICE = 1024;
const int64_t k_E_USER_WARNING = 512;
const int64_t k_E_WARNING = 2;
const bool k_FALSE = false;
const int64_t k_FILE_APPEND = 8;
const int64_t k_FILE_IGNORE_NEW_LINES = 2;
const int64_t k_FILE_NO_DEFAULT_CONTEXT = 16;
const int64_t k_FILE_SKIP_EMPTY_LINES = 4;
const int64_t k_FILE_USE_INCLUDE_PATH = 1;
const int64_t k_FNM_CASEFOLD = 16;
const int64_t k_FNM_NOESCAPE = 2;
const int64_t k_FNM_PATHNAME = 1;
const int64_t k_FNM_PERIOD = 4;
const int64_t k_FORCE_DEFLATE = 2;
const int64_t k_FORCE_GZIP = 1;
const int64_t k_FT_INTERNAL = 8;
const int64_t k_FT_NOT = 4;
const int64_t k_FT_PEEK = 2;
const int64_t k_FT_PREFETCHTEXT = 32;
const int64_t k_FT_UID = 1;
const int64_t k_GD_BUNDLED = 1;
extern const StaticString k_GD_EXTRA_VERSION("",0);
const int64_t k_GD_MAJOR_VERSION = 2;
const int64_t k_GD_MINOR_VERSION = 0;
const int64_t k_GD_RELEASE_VERSION = 35;
extern const StaticString k_GD_VERSION("2.0.35",6);
const int64_t k_GLOBAL_STATE_IGNORE = 0;
const int64_t k_GLOBAL_STATE_OVERWRITE = 1;
const int64_t k_GLOBAL_STATE_SKIP = 2;
const int64_t k_GLOBAL_SYMBOL_CLASS_STATIC = 2;
const int64_t k_GLOBAL_SYMBOL_DYNAMIC_CONSTANT = 3;
const int64_t k_GLOBAL_SYMBOL_FILE_INCLUDE = 4;
const int64_t k_GLOBAL_SYMBOL_GLOBAL_VARIABLE = 0;
const int64_t k_GLOBAL_SYMBOL_REDECLARED_CLASS = 6;
const int64_t k_GLOBAL_SYMBOL_REDECLARED_FUNCTION = 5;
const int64_t k_GLOBAL_SYMBOL_STATIC_VARIABLE = 1;
const int64_t k_GLOB_AVAILABLE_FLAGS = 9303;
const int64_t k_GLOB_BRACE = 1024;
const int64_t k_GLOB_ERR = 1;
const int64_t k_GLOB_MARK = 2;
const int64_t k_GLOB_NOCHECK = 16;
const int64_t k_GLOB_NOESCAPE = 64;
const int64_t k_GLOB_NOSORT = 4;
const int64_t k_GLOB_ONLYDIR = 8192;
const int64_t k_GRAPHEME_EXTR_COUNT = 0;
const int64_t k_GRAPHEME_EXTR_MAXBYTES = 1;
const int64_t k_GRAPHEME_EXTR_MAXCHARS = 2;
const int64_t k_HASH_HMAC = 1;
extern const StaticString k_HPHP_TRIM_CHARLIST("\n\r\t\v\000 ",6);
extern const StaticString k_HPHP_VERSION("2.1.0-dev",9);
const int64_t k_HTML_ENTITIES = 1;
const int64_t k_HTML_SPECIALCHARS = 0;
extern const StaticString k_ICONV_IMPL("glibc",5);
const int64_t k_ICONV_MIME_DECODE_CONTINUE_ON_ERROR = 2;
const int64_t k_ICONV_MIME_DECODE_STRICT = 1;
extern const StaticString k_ICONV_VERSION("2.5",3);
const int64_t k_IDNA_ALLOW_UNASSIGNED = 1;
const int64_t k_IDNA_CHECK_BIDI = 4;
const int64_t k_IDNA_CHECK_CONTEXTJ = 8;
const int64_t k_IDNA_CHECK_CONTEXTO = 64;
const int64_t k_IDNA_CONTAINS_ACE_PREFIX = 8;
const int64_t k_IDNA_CONTAINS_MINUS = 4;
const int64_t k_IDNA_CONTAINS_NON_LDH = 3;
const int64_t k_IDNA_DEFAULT = 0;
const int64_t k_IDNA_ERROR_CONTEXTJ = 4096;
const int64_t k_IDNA_ERROR_CONTEXTO_DIGITS = 8192;
const int64_t k_IDNA_ERROR_CONTEXTO_PUNCTUATION = 16384;
const int64_t k_IDNA_ERROR_BIDI = 2048;
const int64_t k_IDNA_ERROR_DISALLOWED = 128;
const int64_t k_IDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4;
const int64_t k_IDNA_ERROR_EMPTY_LABEL = 1;
const int64_t k_IDNA_ERROR_HYPHEN_3_4 = 32;
const int64_t k_IDNA_ERROR_INVALID_ACE_LABEL = 1024;
const int64_t k_IDNA_ERROR_LABEL_HAS_DOT = 512;
const int64_t k_IDNA_ERROR_LABEL_TOO_LONG = 2;
const int64_t k_IDNA_ERROR_LEADING_COMBINING_MARK = 64;
const int64_t k_IDNA_ERROR_LEADING_HYPHEN = 8;
const int64_t k_IDNA_ERROR_PUNYCODE = 256;
const int64_t k_IDNA_ERROR_TRAILING_HYPHEN = 16;
const int64_t k_IDNA_ICONV_ERROR = 9;
const int64_t k_IDNA_INVALID_LENGTH = 5;
const int64_t k_IDNA_MALLOC_ERROR = 201;
const int64_t k_IDNA_NO_ACE_PREFIX = 6;
const int64_t k_IDNA_NONTRANSITIONAL_TO_ASCII = 16;
const int64_t k_IDNA_NONTRANSITIONAL_TO_UNICODE = 32;
const int64_t k_IDNA_PUNYCODE_ERROR = 2;
const int64_t k_IDNA_ROUNDTRIP_VERIFY_ERROR = 7;
const int64_t k_IDNA_STRINGPREP_ERROR = 1;
const int64_t k_IDNA_USE_STD3_RULES = 2;
const int64_t k_IMAGETYPE_BMP = 6;
const int64_t k_IMAGETYPE_GIF = 1;
const int64_t k_IMAGETYPE_IFF = 14;
const int64_t k_IMAGETYPE_JB2 = 12;
const int64_t k_IMAGETYPE_JP2 = 10;
const int64_t k_IMAGETYPE_JPC = 9;
const int64_t k_IMAGETYPE_JPEG = 2;
const int64_t k_IMAGETYPE_JPEG2000 = 9;
const int64_t k_IMAGETYPE_JPX = 11;
const int64_t k_IMAGETYPE_PNG = 3;
const int64_t k_IMAGETYPE_PSD = 5;
const int64_t k_IMAGETYPE_SWC = 13;
const int64_t k_IMAGETYPE_SWF = 4;
const int64_t k_IMAGETYPE_TIFF_II = 7;
const int64_t k_IMAGETYPE_TIFF_MM = 8;
const int64_t k_IMAGETYPE_WBMP = 15;
const int64_t k_IMAGETYPE_XBM = 16;
const int64_t k_IMAGETYPE_ICO = 17;
const int64_t k_IMAP_CLOSETIMEOUT = 4;
const int64_t k_IMAP_OPENTIMEOUT = 1;
const int64_t k_IMAP_READTIMEOUT = 2;
const int64_t k_IMAP_WRITETIMEOUT = 3;
const int64_t k_IMG_ARC_CHORD = 1;
const int64_t k_IMG_ARC_EDGED = 4;
const int64_t k_IMG_ARC_NOFILL = 2;
const int64_t k_IMG_ARC_PIE = 0;
const int64_t k_IMG_ARC_ROUNDED = 0;
const int64_t k_IMG_COLOR_BRUSHED = -3;
const int64_t k_IMG_COLOR_STYLED = -2;
const int64_t k_IMG_COLOR_STYLEDBRUSHED = -4;
const int64_t k_IMG_COLOR_TILED = -5;
const int64_t k_IMG_COLOR_TRANSPARENT = -6;
const int64_t k_IMG_EFFECT_ALPHABLEND = 1;
const int64_t k_IMG_EFFECT_NORMAL = 2;
const int64_t k_IMG_EFFECT_OVERLAY = 3;
const int64_t k_IMG_EFFECT_REPLACE = 0;
const int64_t k_IMG_FILTER_BRIGHTNESS = 2;
const int64_t k_IMG_FILTER_COLORIZE = 4;
const int64_t k_IMG_FILTER_CONTRAST = 3;
const int64_t k_IMG_FILTER_EDGEDETECT = 5;
const int64_t k_IMG_FILTER_EMBOSS = 6;
const int64_t k_IMG_FILTER_GAUSSIAN_BLUR = 7;
const int64_t k_IMG_FILTER_GRAYSCALE = 1;
const int64_t k_IMG_FILTER_MEAN_REMOVAL = 9;
const int64_t k_IMG_FILTER_NEGATE = 0;
const int64_t k_IMG_FILTER_SELECTIVE_BLUR = 8;
const int64_t k_IMG_FILTER_SMOOTH = 10;
const int64_t k_IMG_GD2_COMPRESSED = 2;
const int64_t k_IMG_GD2_RAW = 1;
const int64_t k_IMG_GIF = 1;
const int64_t k_IMG_JPEG = 2;
const int64_t k_IMG_JPG = 2;
const int64_t k_IMG_PNG = 4;
const int64_t k_IMG_WBMP = 8;
const int64_t k_IMG_XPM = 16;
const int64_t k_INFO_ALL = 4294967295;
const int64_t k_INFO_CONFIGURATION = 4;
const int64_t k_INFO_CREDITS = 2;
const int64_t k_INFO_ENVIRONMENT = 16;
const int64_t k_INFO_GENERAL = 1;
const int64_t k_INFO_LICENSE = 64;
const int64_t k_INFO_MODULES = 8;
const int64_t k_INFO_VARIABLES = 32;
const int64_t k_INI_ALL = 7;
const int64_t k_INI_PERDIR = 2;
const int64_t k_INI_SCANNER_NORMAL = 0;
const int64_t k_INI_SCANNER_RAW = 1;
const int64_t k_INI_SYSTEM = 4;
const int64_t k_INI_USER = 1;
const int64_t k_INTL_IDNA_VARIANT_2003 = 0;
const int64_t k_INTL_IDNA_VARIANT_UTS46 = 1;
const int64_t k_INTL_MAX_LOCALE_LEN = 80;
const int64_t k_LATT_HASCHILDREN = 32;
const int64_t k_LATT_HASNOCHILDREN = 64;
const int64_t k_LATT_MARKED = 4;
const int64_t k_LATT_NOINFERIORS = 1;
const int64_t k_LATT_NOSELECT = 2;
const int64_t k_LATT_REFERRAL = 16;
const int64_t k_LATT_UNMARKED = 8;
const int64_t k_LC_ALL = 6;
const int64_t k_LC_COLLATE = 3;
const int64_t k_LC_CTYPE = 0;
const int64_t k_LC_MESSAGES = 5;
const int64_t k_LC_MONETARY = 4;
const int64_t k_LC_NUMERIC = 1;
const int64_t k_LC_TIME = 2;
const int64_t k_LDAP_DEREF_ALWAYS = 3;
const int64_t k_LDAP_DEREF_FINDING = 2;
const int64_t k_LDAP_DEREF_NEVER = 0;
const int64_t k_LDAP_DEREF_SEARCHING = 1;
const int64_t k_LDAP_OPT_CLIENT_CONTROLS = 19;
const int64_t k_LDAP_OPT_DEBUG_LEVEL = 20481;
const int64_t k_LDAP_OPT_DEREF = 2;
const int64_t k_LDAP_OPT_ERROR_NUMBER = 49;
const int64_t k_LDAP_OPT_ERROR_STRING = 50;
const int64_t k_LDAP_OPT_HOST_NAME = 48;
const int64_t k_LDAP_OPT_MATCHED_DN = 51;
const int64_t k_LDAP_OPT_PROTOCOL_VERSION = 17;
const int64_t k_LDAP_OPT_REFERRALS = 8;
const int64_t k_LDAP_OPT_RESTART = 9;
const int64_t k_LDAP_OPT_SERVER_CONTROLS = 18;
const int64_t k_LDAP_OPT_SIZELIMIT = 3;
const int64_t k_LDAP_OPT_TIMELIMIT = 4;
const int64_t k_LIBXML_COMPACT = 65536;
extern const StaticString k_LIBXML_DOTTED_VERSION("2.6.26",6);
const int64_t k_LIBXML_DTDATTR = 8;
const int64_t k_LIBXML_DTDLOAD = 4;
const int64_t k_LIBXML_DTDVALID = 16;
const int64_t k_LIBXML_ERR_ERROR = 2;
const int64_t k_LIBXML_ERR_FATAL = 3;
const int64_t k_LIBXML_ERR_NONE = 0;
const int64_t k_LIBXML_ERR_WARNING = 1;
const int64_t k_LIBXML_NOBLANKS = 256;
const int64_t k_LIBXML_NOCDATA = 16384;
const int64_t k_LIBXML_NOEMPTYTAG = 4;
const int64_t k_LIBXML_NOENT = 2;
const int64_t k_LIBXML_NOERROR = 32;
const int64_t k_LIBXML_NONET = 2048;
const int64_t k_LIBXML_NOWARNING = 64;
const int64_t k_LIBXML_NOXMLDECL = 2;
const int64_t k_LIBXML_NSCLEAN = 8192;
const int64_t k_LIBXML_VERSION = 20626;
const int64_t k_LIBXML_XINCLUDE = 1024;
const int64_t k_LOCK_EX = 2;
const int64_t k_LOCK_NB = 4;
const int64_t k_LOCK_SH = 1;
const int64_t k_LOCK_UN = 3;
const int64_t k_LOG_ALERT = 1;
const int64_t k_LOG_AUTH = 32;
const int64_t k_LOG_AUTHPRIV = 80;
const int64_t k_LOG_CONS = 2;
const int64_t k_LOG_CRIT = 2;
const int64_t k_LOG_CRON = 72;
const int64_t k_LOG_DAEMON = 24;
const int64_t k_LOG_DEBUG = 7;
const int64_t k_LOG_EMERG = 0;
const int64_t k_LOG_ERR = 3;
const int64_t k_LOG_INFO = 6;
const int64_t k_LOG_KERN = 0;
const int64_t k_LOG_LOCAL0 = 128;
const int64_t k_LOG_LOCAL1 = 136;
const int64_t k_LOG_LOCAL2 = 144;
const int64_t k_LOG_LOCAL3 = 152;
const int64_t k_LOG_LOCAL4 = 160;
const int64_t k_LOG_LOCAL5 = 168;
const int64_t k_LOG_LOCAL6 = 176;
const int64_t k_LOG_LOCAL7 = 184;
const int64_t k_LOG_LPR = 48;
const int64_t k_LOG_MAIL = 16;
const int64_t k_LOG_NDELAY = 8;
const int64_t k_LOG_NEWS = 56;
const int64_t k_LOG_NOTICE = 5;
const int64_t k_LOG_NOWAIT = 16;
const int64_t k_LOG_ODELAY = 4;
const int64_t k_LOG_PERROR = 32;
const int64_t k_LOG_PID = 1;
const int64_t k_LOG_SYSLOG = 40;
const int64_t k_LOG_USER = 8;
const int64_t k_LOG_UUCP = 64;
const int64_t k_LOG_WARNING = 4;
const int64_t k_MB_CASE_LOWER = 1;
const int64_t k_MB_CASE_TITLE = 2;
const int64_t k_MB_CASE_UPPER = 0;
const int64_t k_MB_OVERLOAD_MAIL = 1;
const int64_t k_MB_OVERLOAD_REGEX = 4;
const int64_t k_MB_OVERLOAD_STRING = 2;
const int64_t k_MCC_ACCESSPOINT_DOWN = 2;
const int64_t k_MCC_ACCESSPOINT_UP = 1;
extern const StaticString k_MCRYPT_3DES("tripledes",9);
extern const StaticString k_MCRYPT_ARCFOUR("arcfour",7);
extern const StaticString k_MCRYPT_ARCFOUR_IV("arcfour-iv",10);
extern const StaticString k_MCRYPT_BLOWFISH("blowfish",8);
extern const StaticString k_MCRYPT_BLOWFISH_COMPAT("blowfish-compat",15);
extern const StaticString k_MCRYPT_CAST_128("cast-128",8);
extern const StaticString k_MCRYPT_CAST_256("cast-256",8);
extern const StaticString k_MCRYPT_CRYPT("crypt",5);
const int64_t k_MCRYPT_DECRYPT = 1;
extern const StaticString k_MCRYPT_DES("des",3);
const int64_t k_MCRYPT_DEV_RANDOM = 0;
const int64_t k_MCRYPT_DEV_URANDOM = 1;
const int64_t k_MCRYPT_ENCRYPT = 0;
extern const StaticString k_MCRYPT_ENIGNA("crypt",5);
extern const StaticString k_MCRYPT_GOST("gost",4);
extern const StaticString k_MCRYPT_IDEA("idea",4);
extern const StaticString k_MCRYPT_LOKI97("loki97",6);
extern const StaticString k_MCRYPT_MARS("mars",4);
extern const StaticString k_MCRYPT_MODE_CBC("cbc",3);
extern const StaticString k_MCRYPT_MODE_CFB("cfb",3);
extern const StaticString k_MCRYPT_MODE_ECB("ecb",3);
extern const StaticString k_MCRYPT_MODE_NOFB("nofb",4);
extern const StaticString k_MCRYPT_MODE_OFB("ofb",3);
extern const StaticString k_MCRYPT_MODE_STREAM("stream",6);
extern const StaticString k_MCRYPT_PANAMA("panama",6);
const int64_t k_MCRYPT_RAND = 2;
extern const StaticString k_MCRYPT_RC2("rc2",3);
extern const StaticString k_MCRYPT_RC6("rc6",3);
extern const StaticString k_MCRYPT_RIJNDAEL_128("rijndael-128",12);
extern const StaticString k_MCRYPT_RIJNDAEL_192("rijndael-192",12);
extern const StaticString k_MCRYPT_RIJNDAEL_256("rijndael-256",12);
extern const StaticString k_MCRYPT_SAFER128("safer-sk128",11);
extern const StaticString k_MCRYPT_SAFER64("safer-sk64",10);
extern const StaticString k_MCRYPT_SAFERPLUS("saferplus",9);
extern const StaticString k_MCRYPT_SERPENT("serpent",7);
extern const StaticString k_MCRYPT_SKIPJACK("skipjack",8);
extern const StaticString k_MCRYPT_THREEWAY("threeway",8);
extern const StaticString k_MCRYPT_TRIPLEDES("tripledes",9);
extern const StaticString k_MCRYPT_TWOFISH("twofish",7);
extern const StaticString k_MCRYPT_WAKE("wake",4);
extern const StaticString k_MCRYPT_XTEA("xtea",4);
const int64_t k_MON_1 = 131098;
const int64_t k_MON_10 = 131107;
const int64_t k_MON_11 = 131108;
const int64_t k_MON_12 = 131109;
const int64_t k_MON_2 = 131099;
const int64_t k_MON_3 = 131100;
const int64_t k_MON_4 = 131101;
const int64_t k_MON_5 = 131102;
const int64_t k_MON_6 = 131103;
const int64_t k_MON_7 = 131104;
const int64_t k_MON_8 = 131105;
const int64_t k_MON_9 = 131106;
const int64_t k_MSG_DONTROUTE = 4;
const int64_t k_MSG_EAGAIN = 11;
const int64_t k_MSG_ENOMSG = 42;
const int64_t k_MSG_EOF = 512;
const int64_t k_MSG_EOR = 128;
const int64_t k_MSG_EXCEPT = 4;
const int64_t k_MSG_IPC_NOWAIT = 1;
const int64_t k_MSG_NOERROR = 2;
const int64_t k_MSG_OOB = 1;
const int64_t k_MSG_PEEK = 2;
const int64_t k_MSG_WAITALL = 256;
const int64_t k_MW_AbsoluteIntent = 3;
const int64_t k_MW_AddCompositeOp = 2;
const int64_t k_MW_AddEvaluateOperator = 1;
const int64_t k_MW_AddNoisePreview = 14;
const int64_t k_MW_AllChannels = 255;
const int64_t k_MW_AlphaChannel = 8;
const int64_t k_MW_AndEvaluateOperator = 2;
const int64_t k_MW_AnyStretch = 10;
const int64_t k_MW_AnyStyle = 4;
const int64_t k_MW_AreaResource = 1;
const int64_t k_MW_AtopCompositeOp = 3;
const int64_t k_MW_BZipCompression = 2;
const int64_t k_MW_BackgroundDispose = 2;
const int64_t k_MW_BesselFilter = 14;
const int64_t k_MW_BevelJoin = 3;
const int64_t k_MW_BilevelType = 1;
const int64_t k_MW_BlackChannel = 32;
const int64_t k_MW_BlackmanFilter = 7;
const int64_t k_MW_BlendCompositeOp = 4;
const int64_t k_MW_BlobError = 435;
const int64_t k_MW_BlobFatalError = 735;
const int64_t k_MW_BlobWarning = 335;
const int64_t k_MW_BlueChannel = 4;
const int64_t k_MW_BlurPreview = 16;
const int64_t k_MW_BoxFilter = 2;
const int64_t k_MW_BrightnessPreview = 6;
const int64_t k_MW_BumpmapCompositeOp = 5;
const int64_t k_MW_ButtCap = 1;
const int64_t k_MW_CMYKColorspace = 12;
const int64_t k_MW_CacheError = 445;
const int64_t k_MW_CacheFatalError = 745;
const int64_t k_MW_CacheWarning = 345;
const int64_t k_MW_CatromFilter = 11;
const int64_t k_MW_CenterAlign = 2;
const int64_t k_MW_CenterGravity = 5;
const int64_t k_MW_CharPixel = 1;
const int64_t k_MW_CharcoalDrawingPreview = 28;
const int64_t k_MW_ClearCompositeOp = 7;
const int64_t k_MW_CoderError = 450;
const int64_t k_MW_CoderFatalError = 750;
const int64_t k_MW_CoderWarning = 350;
const int64_t k_MW_ColorBurnCompositeOp = 8;
const int64_t k_MW_ColorDodgeCompositeOp = 9;
const int64_t k_MW_ColorSeparationMatteType = 9;
const int64_t k_MW_ColorSeparationType = 8;
const int64_t k_MW_ColorizeCompositeOp = 10;
const int64_t k_MW_ConcatenateMode = 3;
const int64_t k_MW_CondensedStretch = 4;
const int64_t k_MW_ConfigureError = 495;
const int64_t k_MW_ConfigureFatalError = 795;
const int64_t k_MW_ConfigureWarning = 395;
const int64_t k_MW_ConstantVirtualPixelMethod = 2;
const int64_t k_MW_CopyBlackCompositeOp = 11;
const int64_t k_MW_CopyBlueCompositeOp = 12;
const int64_t k_MW_CopyCompositeOp = 13;
const int64_t k_MW_CopyCyanCompositeOp = 14;
const int64_t k_MW_CopyGreenCompositeOp = 15;
const int64_t k_MW_CopyMagentaCompositeOp = 16;
const int64_t k_MW_CopyOpacityCompositeOp = 17;
const int64_t k_MW_CopyRedCompositeOp = 18;
const int64_t k_MW_CopyYellowCompositeOp = 19;
const int64_t k_MW_CorruptImageError = 425;
const int64_t k_MW_CorruptImageFatalError = 725;
const int64_t k_MW_CorruptImageWarning = 325;
const int64_t k_MW_CubicFilter = 10;
const int64_t k_MW_CyanChannel = 1;
const int64_t k_MW_DarkenCompositeOp = 20;
const int64_t k_MW_DelegateError = 415;
const int64_t k_MW_DelegateFatalError = 715;
const int64_t k_MW_DelegateWarning = 315;
const int64_t k_MW_DespecklePreview = 12;
const int64_t k_MW_DifferenceCompositeOp = 26;
const int64_t k_MW_DiskResource = 2;
const int64_t k_MW_DisplaceCompositeOp = 27;
const int64_t k_MW_DissolveCompositeOp = 28;
const int64_t k_MW_DivideEvaluateOperator = 3;
const int64_t k_MW_DoublePixel = 2;
const int64_t k_MW_DrawError = 460;
const int64_t k_MW_DrawFatalError = 760;
const int64_t k_MW_DrawWarning = 360;
const int64_t k_MW_DstAtopCompositeOp = 21;
const int64_t k_MW_DstCompositeOp = 22;
const int64_t k_MW_DstInCompositeOp = 23;
const int64_t k_MW_DstOutCompositeOp = 24;
const int64_t k_MW_DstOverCompositeOp = 25;
const int64_t k_MW_DullPreview = 9;
const int64_t k_MW_EastGravity = 6;
const int64_t k_MW_EdgeDetectPreview = 18;
const int64_t k_MW_EdgeVirtualPixelMethod = 4;
const int64_t k_MW_ErrorException = 400;
const int64_t k_MW_EvenOddRule = 1;
const int64_t k_MW_ExclusionCompositeOp = 29;
const int64_t k_MW_ExpandedStretch = 7;
const int64_t k_MW_ExtraCondensedStretch = 3;
const int64_t k_MW_ExtraExpandedStretch = 8;
const int64_t k_MW_FatalErrorException = 700;
const int64_t k_MW_FaxCompression = 3;
const int64_t k_MW_FileOpenError = 430;
const int64_t k_MW_FileOpenFatalError = 730;
const int64_t k_MW_FileOpenWarning = 330;
const int64_t k_MW_FileResource = 3;
const int64_t k_MW_FillToBorderMethod = 4;
const int64_t k_MW_FloatPixel = 3;
const int64_t k_MW_FloodfillMethod = 3;
const int64_t k_MW_ForgetGravity = 0;
const int64_t k_MW_FrameMode = 1;
const int64_t k_MW_GRAYColorspace = 2;
const int64_t k_MW_GammaPreview = 7;
const int64_t k_MW_GaussianFilter = 8;
const int64_t k_MW_GaussianNoise = 2;
const int64_t k_MW_GrayscaleMatteType = 3;
const int64_t k_MW_GrayscalePreview = 10;
const int64_t k_MW_GrayscaleType = 2;
const int64_t k_MW_GreenChannel = 2;
const int64_t k_MW_Group4Compression = 4;
const int64_t k_MW_HSBColorspace = 14;
const int64_t k_MW_HSLColorspace = 15;
const int64_t k_MW_HWBColorspace = 16;
const int64_t k_MW_HammingFilter = 6;
const int64_t k_MW_HanningFilter = 5;
const int64_t k_MW_HardLightCompositeOp = 30;
const int64_t k_MW_HermiteFilter = 4;
const int64_t k_MW_HueCompositeOp = 31;
const int64_t k_MW_HuePreview = 4;
const int64_t k_MW_ImageError = 465;
const int64_t k_MW_ImageFatalError = 765;
const int64_t k_MW_ImageWarning = 365;
const int64_t k_MW_ImplodePreview = 25;
const int64_t k_MW_ImpulseNoise = 4;
const int64_t k_MW_InCompositeOp = 32;
const int64_t k_MW_IndexChannel = 32;
const int64_t k_MW_IntegerPixel = 4;
const int64_t k_MW_ItalicStyle = 2;
const int64_t k_MW_JPEGCompression = 5;
const int64_t k_MW_JPEGPreview = 29;
const int64_t k_MW_LABColorspace = 5;
const int64_t k_MW_LZWCompression = 8;
const int64_t k_MW_LanczosFilter = 13;
const int64_t k_MW_LaplacianNoise = 5;
const int64_t k_MW_LeftAlign = 1;
const int64_t k_MW_LeftShiftEvaluateOperator = 4;
const int64_t k_MW_LightenCompositeOp = 33;
const int64_t k_MW_LineInterlace = 2;
const int64_t k_MW_LineThroughDecoration = 4;
const int64_t k_MW_LongPixel = 5;
const int64_t k_MW_LosslessJPEGCompression = 7;
const int64_t k_MW_LuminizeCompositeOp = 35;
const int64_t k_MW_MagentaChannel = 2;
const int64_t k_MW_MapResource = 4;
const int64_t k_MW_MaxEvaluateOperator = 5;
const int64_t k_MW_MaxRGB = 65535;
const int64_t k_MW_MeanAbsoluteErrorMetric = 2;
const int64_t k_MW_MeanSquaredErrorMetric = 4;
const int64_t k_MW_MemoryResource = 5;
const int64_t k_MW_MinEvaluateOperator = 6;
const int64_t k_MW_MinusCompositeOp = 36;
const int64_t k_MW_MirrorVirtualPixelMethod = 5;
const int64_t k_MW_MissingDelegateError = 420;
const int64_t k_MW_MissingDelegateFatalError = 720;
const int64_t k_MW_MissingDelegateWarning = 320;
const int64_t k_MW_MitchellFilter = 12;
const int64_t k_MW_MiterJoin = 1;
const int64_t k_MW_ModulateCompositeOp = 37;
const int64_t k_MW_ModuleError = 455;
const int64_t k_MW_ModuleFatalError = 755;
const int64_t k_MW_ModuleWarning = 355;
const int64_t k_MW_MonitorError = 485;
const int64_t k_MW_MonitorFatalError = 785;
const int64_t k_MW_MonitorWarning = 385;
const int64_t k_MW_MultiplicativeGaussianNoise = 3;
const int64_t k_MW_MultiplyCompositeOp = 38;
const int64_t k_MW_MultiplyEvaluateOperator = 7;
const int64_t k_MW_NoCompositeOp = 1;
const int64_t k_MW_NoCompression = 1;
const int64_t k_MW_NoDecoration = 1;
const int64_t k_MW_NoInterlace = 1;
const int64_t k_MW_NonZeroRule = 2;
const int64_t k_MW_NoneDispose = 1;
const int64_t k_MW_NormalStretch = 1;
const int64_t k_MW_NormalStyle = 1;
const int64_t k_MW_NorthEastGravity = 3;
const int64_t k_MW_NorthGravity = 2;
const int64_t k_MW_NorthWestGravity = 1;
const int64_t k_MW_OHTAColorspace = 4;
const int64_t k_MW_ObjectBoundingBox = 3;
const int64_t k_MW_ObliqueStyle = 3;
const int64_t k_MW_OilPaintPreview = 27;
const int64_t k_MW_OpacityChannel = 8;
const int64_t k_MW_OpaqueOpacity = 0;
const int64_t k_MW_OptimizeType = 10;
const int64_t k_MW_OptionError = 410;
const int64_t k_MW_OptionFatalError = 710;
const int64_t k_MW_OptionWarning = 310;
const int64_t k_MW_OrEvaluateOperator = 8;
const int64_t k_MW_OutCompositeOp = 39;
const int64_t k_MW_OverCompositeOp = 40;
const int64_t k_MW_OverlayCompositeOp = 41;
const int64_t k_MW_OverlineDecoration = 3;
const int64_t k_MW_PaletteMatteType = 5;
const int64_t k_MW_PaletteType = 4;
const int64_t k_MW_PartitionInterlace = 4;
const int64_t k_MW_PeakAbsoluteErrorMetric = 5;
const int64_t k_MW_PeakSignalToNoiseRatioMetric = 6;
const int64_t k_MW_PerceptualIntent = 2;
const int64_t k_MW_PixelsPerCentimeterResolution = 2;
const int64_t k_MW_PixelsPerInchResolution = 1;
const int64_t k_MW_PlaneInterlace = 3;
const int64_t k_MW_PlusCompositeOp = 42;
const int64_t k_MW_PointFilter = 1;
const int64_t k_MW_PointMethod = 1;
const int64_t k_MW_PoissonNoise = 6;
const int64_t k_MW_PreviousDispose = 3;
const int64_t k_MW_QuadraticFilter = 9;
const int64_t k_MW_QuantizePreview = 11;
const int64_t k_MW_QuantumRange = 65535;
const int64_t k_MW_RGBColorspace = 1;
const int64_t k_MW_RLECompression = 9;
const int64_t k_MW_RaisePreview = 22;
const int64_t k_MW_RedChannel = 1;
const int64_t k_MW_ReduceNoisePreview = 13;
const int64_t k_MW_RegistryError = 490;
const int64_t k_MW_RegistryFatalError = 790;
const int64_t k_MW_RegistryWarning = 390;
const int64_t k_MW_RelativeIntent = 4;
const int64_t k_MW_ReplaceCompositeOp = 43;
const int64_t k_MW_ReplaceMethod = 2;
const int64_t k_MW_ResetMethod = 5;
const int64_t k_MW_ResourceLimitError = 400;
const int64_t k_MW_ResourceLimitFatalError = 700;
const int64_t k_MW_ResourceLimitWarning = 300;
const int64_t k_MW_RightAlign = 3;
const int64_t k_MW_RightShiftEvaluateOperator = 9;
const int64_t k_MW_RollPreview = 3;
const int64_t k_MW_RootMeanSquaredErrorMetric = 7;
const int64_t k_MW_RotatePreview = 1;
const int64_t k_MW_RoundCap = 2;
const int64_t k_MW_RoundJoin = 2;
const int64_t k_MW_SaturateCompositeOp = 44;
const int64_t k_MW_SaturationIntent = 1;
const int64_t k_MW_SaturationPreview = 5;
const int64_t k_MW_ScreenCompositeOp = 45;
const int64_t k_MW_SegmentPreview = 23;
const int64_t k_MW_SemiCondensedStretch = 5;
const int64_t k_MW_SemiExpandedStretch = 6;
const int64_t k_MW_SetEvaluateOperator = 10;
const int64_t k_MW_ShadePreview = 21;
const int64_t k_MW_SharpenPreview = 15;
const int64_t k_MW_ShearPreview = 2;
const int64_t k_MW_ShortPixel = 7;
const int64_t k_MW_SincFilter = 15;
const int64_t k_MW_SoftLightCompositeOp = 46;
const int64_t k_MW_SolarizePreview = 20;
const int64_t k_MW_SouthEastGravity = 9;
const int64_t k_MW_SouthGravity = 8;
const int64_t k_MW_SouthWestGravity = 7;
const int64_t k_MW_SpiffPreview = 8;
const int64_t k_MW_SpreadPreview = 19;
const int64_t k_MW_SquareCap = 3;
const int64_t k_MW_SrcAtopCompositeOp = 47;
const int64_t k_MW_SrcCompositeOp = 48;
const int64_t k_MW_SrcInCompositeOp = 49;
const int64_t k_MW_SrcOutCompositeOp = 50;
const int64_t k_MW_SrcOverCompositeOp = 51;
const int64_t k_MW_StaticGravity = 10;
const int64_t k_MW_StreamError = 440;
const int64_t k_MW_StreamFatalError = 740;
const int64_t k_MW_StreamWarning = 340;
const int64_t k_MW_SubtractCompositeOp = 52;
const int64_t k_MW_SubtractEvaluateOperator = 11;
const int64_t k_MW_SwirlPreview = 24;
const int64_t k_MW_ThresholdCompositeOp = 53;
const int64_t k_MW_ThresholdPreview = 17;
const int64_t k_MW_TileVirtualPixelMethod = 7;
const int64_t k_MW_TransparentColorspace = 3;
const int64_t k_MW_TransparentOpacity = 65535;
const int64_t k_MW_TriangleFilter = 3;
const int64_t k_MW_TrueColorMatteType = 7;
const int64_t k_MW_TrueColorType = 6;
const int64_t k_MW_TypeError = 405;
const int64_t k_MW_TypeFatalError = 705;
const int64_t k_MW_TypeWarning = 305;
const int64_t k_MW_UltraCondensedStretch = 2;
const int64_t k_MW_UltraExpandedStretch = 9;
const int64_t k_MW_UndefinedAlign = 0;
const int64_t k_MW_UndefinedCap = 0;
const int64_t k_MW_UndefinedChannel = 0;
const int64_t k_MW_UndefinedColorspace = 0;
const int64_t k_MW_UndefinedCompositeOp = 0;
const int64_t k_MW_UndefinedCompression = 0;
const int64_t k_MW_UndefinedDecoration = 0;
const int64_t k_MW_UndefinedDispose = 0;
const int64_t k_MW_UndefinedEvaluateOperator = 0;
const int64_t k_MW_UndefinedException = 0;
const int64_t k_MW_UndefinedFilter = 0;
const int64_t k_MW_UndefinedGravity = 0;
const int64_t k_MW_UndefinedIntent = 0;
const int64_t k_MW_UndefinedInterlace = 0;
const int64_t k_MW_UndefinedJoin = 0;
const int64_t k_MW_UndefinedMethod = 0;
const int64_t k_MW_UndefinedMetric = 0;
const int64_t k_MW_UndefinedMode = 0;
const int64_t k_MW_UndefinedNoise = 0;
const int64_t k_MW_UndefinedPathUnits = 0;
const int64_t k_MW_UndefinedPixel = 0;
const int64_t k_MW_UndefinedPreview = 0;
const int64_t k_MW_UndefinedResolution = 0;
const int64_t k_MW_UndefinedResource = 0;
const int64_t k_MW_UndefinedRule = 0;
const int64_t k_MW_UndefinedStretch = 0;
const int64_t k_MW_UndefinedStyle = 0;
const int64_t k_MW_UndefinedType = 0;
const int64_t k_MW_UndefinedVirtualPixelMethod = 0;
const int64_t k_MW_UnderlineDecoration = 2;
const int64_t k_MW_UnframeMode = 2;
const int64_t k_MW_UniformNoise = 1;
const int64_t k_MW_UnrecognizedDispose = 0;
const int64_t k_MW_UserSpace = 1;
const int64_t k_MW_UserSpaceOnUse = 2;
const int64_t k_MW_WandError = 470;
const int64_t k_MW_WandFatalError = 770;
const int64_t k_MW_WandWarning = 370;
const int64_t k_MW_WarningException = 300;
const int64_t k_MW_WavePreview = 26;
const int64_t k_MW_WestGravity = 4;
const int64_t k_MW_XYZColorspace = 6;
const int64_t k_MW_XorCompositeOp = 54;
const int64_t k_MW_XorEvaluateOperator = 12;
const int64_t k_MW_YCCColorspace = 8;
const int64_t k_MW_YCbCrColorspace = 7;
const int64_t k_MW_YIQColorspace = 9;
const int64_t k_MW_YPbPrColorspace = 10;
const int64_t k_MW_YUVColorspace = 11;
const int64_t k_MW_YellowChannel = 4;
const int64_t k_MW_ZipCompression = 10;
const int64_t k_MW_sRGBColorspace = 13;
const int64_t k_MYSQLI_ASSOC = 1;
const int64_t k_MYSQLI_AUTO_INCREMENT_FLAG = 512;
const int64_t k_MYSQLI_BLOB_FLAG = 16;
const int64_t k_MYSQLI_BOTH = 3;
const int64_t k_MYSQLI_CLIENT_COMPRESS = 32;
const int64_t k_MYSQLI_CLIENT_FOUND_ROWS = 2;
const int64_t k_MYSQLI_CLIENT_IGNORE_SPACE = 256;
const int64_t k_MYSQLI_CLIENT_INTERACTIVE = 1024;
const int64_t k_MYSQLI_CLIENT_NO_SCHEMA = 16;
const int64_t k_MYSQLI_CLIENT_SSL = 2048;
const int64_t k_MYSQLI_CURSOR_TYPE_FOR_UPDATE = 2;
const int64_t k_MYSQLI_CURSOR_TYPE_NO_CURSOR = 0;
const int64_t k_MYSQLI_CURSOR_TYPE_READ_ONLY = 1;
const int64_t k_MYSQLI_CURSOR_TYPE_SCROLLABLE = 4;
const int64_t k_MYSQLI_DATA_TRUNCATED = 101;
const int64_t k_MYSQLI_GROUP_FLAG = 32768;
const int64_t k_MYSQLI_INIT_COMMAND = 3;
const int64_t k_MYSQLI_MULTIPLE_KEY_FLAG = 8;
const int64_t k_MYSQLI_NOT_NULL_FLAG = 1;
const int64_t k_MYSQLI_NO_DATA = 100;
const int64_t k_MYSQLI_NUM = 2;
const int64_t k_MYSQLI_NUM_FLAG = 32768;
const int64_t k_MYSQLI_OPT_CONNECT_TIMEOUT = 0;
const int64_t k_MYSQLI_OPT_LOCAL_INFILE = 8;
const int64_t k_MYSQLI_PART_KEY_FLAG = 16384;
const int64_t k_MYSQLI_PRI_KEY_FLAG = 2;
const int64_t k_MYSQLI_READ_DEFAULT_FILE = 4;
const int64_t k_MYSQLI_READ_DEFAULT_GROUP = 5;
const int64_t k_MYSQLI_REPORT_ALL = 255;
const int64_t k_MYSQLI_REPORT_ERROR = 1;
const int64_t k_MYSQLI_REPORT_INDEX = 4;
const int64_t k_MYSQLI_REPORT_OFF = 0;
const int64_t k_MYSQLI_REPORT_STRICT = 2;
const int64_t k_MYSQLI_RPL_ADMIN = 2;
const int64_t k_MYSQLI_RPL_MASTER = 0;
const int64_t k_MYSQLI_RPL_SLAVE = 1;
const int64_t k_MYSQLI_SET_CHARSET_NAME = 7;
const int64_t k_MYSQLI_SET_FLAG = 2048;
const int64_t k_MYSQLI_STMT_ATTR_CURSOR_TYPE = 1;
const int64_t k_MYSQLI_STMT_ATTR_PREFETCH_ROWS = 2;
const int64_t k_MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH = 0;
const int64_t k_MYSQLI_STORE_RESULT = 0;
const int64_t k_MYSQLI_TIMESTAMP_FLAG = 1024;
const int64_t k_MYSQLI_TYPE_BIT = 16;
const int64_t k_MYSQLI_TYPE_BLOB = 252;
const int64_t k_MYSQLI_TYPE_CHAR = 1;
const int64_t k_MYSQLI_TYPE_DATE = 10;
const int64_t k_MYSQLI_TYPE_DATETIME = 12;
const int64_t k_MYSQLI_TYPE_DECIMAL = 0;
const int64_t k_MYSQLI_TYPE_DOUBLE = 5;
const int64_t k_MYSQLI_TYPE_ENUM = 247;
const int64_t k_MYSQLI_TYPE_FLOAT = 4;
const int64_t k_MYSQLI_TYPE_GEOMETRY = 255;
const int64_t k_MYSQLI_TYPE_INT24 = 9;
const int64_t k_MYSQLI_TYPE_INTERVAL = 247;
const int64_t k_MYSQLI_TYPE_LONG = 3;
const int64_t k_MYSQLI_TYPE_LONGLONG = 8;
const int64_t k_MYSQLI_TYPE_LONG_BLOB = 251;
const int64_t k_MYSQLI_TYPE_MEDIUM_BLOB = 250;
const int64_t k_MYSQLI_TYPE_NEWDATE = 14;
const int64_t k_MYSQLI_TYPE_NEWDECIMAL = 246;
const int64_t k_MYSQLI_TYPE_NULL = 6;
const int64_t k_MYSQLI_TYPE_SET = 248;
const int64_t k_MYSQLI_TYPE_SHORT = 2;
const int64_t k_MYSQLI_TYPE_STRING = 254;
const int64_t k_MYSQLI_TYPE_TIME = 11;
const int64_t k_MYSQLI_TYPE_TIMESTAMP = 7;
const int64_t k_MYSQLI_TYPE_TINY = 1;
const int64_t k_MYSQLI_TYPE_TINY_BLOB = 249;
const int64_t k_MYSQLI_TYPE_VAR_STRING = 253;
const int64_t k_MYSQLI_TYPE_YEAR = 13;
const int64_t k_MYSQLI_UNIQUE_KEY_FLAG = 4;
const int64_t k_MYSQLI_UNSIGNED_FLAG = 32;
const int64_t k_MYSQLI_USE_RESULT = 1;
const int64_t k_MYSQLI_ZEROFILL_FLAG = 64;
const int64_t k_MYSQL_ASSOC = 1;
const int64_t k_MYSQL_BOTH = 3;
const int64_t k_MYSQL_CLIENT_COMPRESS = 32;
const int64_t k_MYSQL_CLIENT_IGNORE_SPACE = 256;
const int64_t k_MYSQL_CLIENT_INTERACTIVE = 1024;
const int64_t k_MYSQL_CLIENT_SSL = 2048;
const int64_t k_MYSQL_NUM = 2;
const double k_M_1_PI = 0.31830988618379;
const double k_M_2_PI = 0.63661977236758;
const double k_M_2_SQRTPI = 1.1283791670955;
const double k_M_E = 2.718281828459;
const double k_M_EULER = 0.57721566490153;
const double k_M_LN10 = 2.302585092994;
const double k_M_LN2 = 0.69314718055995;
const double k_M_LNPI = 1.1447298858494;
const double k_M_LOG10E = 0.43429448190325;
const double k_M_LOG2E = 1.442695040889;
const double k_M_PI = 3.1415926535898;
const double k_M_PI_2 = 1.5707963267949;
const double k_M_PI_4 = 0.78539816339745;
const double k_M_SQRT1_2 = 0.70710678118655;
const double k_M_SQRT2 = 1.4142135623731;
const double k_M_SQRT3 = 1.7320508075689;
const double k_M_SQRTPI = 1.7724538509055;
const int64_t k_NIL = 0;
const int64_t k_NOEXPR = 327681;
const Variant k_NULL = uninit_null();
const int64_t k_OCI_ASSOC = 1;
const int64_t k_OCI_BOTH = 3;
const int64_t k_OCI_B_BFILE = 114;
const int64_t k_OCI_B_BIN = 23;
const int64_t k_OCI_B_BLOB = 113;
const int64_t k_OCI_B_CFILEE = 115;
const int64_t k_OCI_B_CLOB = 112;
const int64_t k_OCI_B_CURSOR = 116;
const int64_t k_OCI_B_INT = 3;
const int64_t k_OCI_B_NTY = 108;
const int64_t k_OCI_B_NUM = 2;
const int64_t k_OCI_B_ROWID = 104;
const int64_t k_OCI_COMMIT_ON_SUCCESS = 32;
const int64_t k_OCI_DEFAULT = 0;
const int64_t k_OCI_DESCRIBE_ONLY = 16;
const int64_t k_OCI_DTYPE_FILE = 56;
const int64_t k_OCI_DTYPE_LOB = 50;
const int64_t k_OCI_DTYPE_ROWID = 54;
const int64_t k_OCI_D_FILE = 56;
const int64_t k_OCI_D_LOB = 50;
const int64_t k_OCI_D_ROWID = 54;
const int64_t k_OCI_EXACT_FETCH = 2;
const int64_t k_OCI_FETCHSTATEMENT_BY_COLUMN = 16;
const int64_t k_OCI_FETCHSTATEMENT_BY_ROW = 32;
const int64_t k_OCI_LOB_BUFFER_FREE = 1;
const int64_t k_OCI_NUM = 2;
const int64_t k_OCI_RETURN_LOBS = 8;
const int64_t k_OCI_RETURN_NULLS = 4;
const int64_t k_OCI_SEEK_CUR = 1;
const int64_t k_OCI_SEEK_END = 2;
const int64_t k_OCI_SEEK_SET = 0;
extern const StaticString k_OCI_SYSDATE("SYSDATE",7);
const int64_t k_OCI_SYSDBA = 2;
const int64_t k_OCI_SYSOPER = 4;
const int64_t k_OCI_TEMP_BLOB = 1;
const int64_t k_OCI_TEMP_CLOB = 2;
const int64_t k_OPENSSL_ALGO_MD2 = 4;
const int64_t k_OPENSSL_ALGO_MD4 = 3;
const int64_t k_OPENSSL_ALGO_MD5 = 2;
const int64_t k_OPENSSL_ALGO_SHA1 = 1;
const int64_t k_OPENSSL_CIPHER_3DES = 4;
const int64_t k_OPENSSL_CIPHER_DES = 3;
const int64_t k_OPENSSL_CIPHER_RC2_128 = 1;
const int64_t k_OPENSSL_CIPHER_RC2_40 = 0;
const int64_t k_OPENSSL_CIPHER_RC2_64 = 2;
const int64_t k_OPENSSL_KEYTYPE_DH = 2;
const int64_t k_OPENSSL_KEYTYPE_DSA = 1;
const int64_t k_OPENSSL_KEYTYPE_EC = 3;
const int64_t k_OPENSSL_KEYTYPE_RSA = 0;
const int64_t k_OPENSSL_NO_PADDING = 3;
const int64_t k_OPENSSL_PKCS1_OAEP_PADDING = 4;
const int64_t k_OPENSSL_PKCS1_PADDING = 1;
const int64_t k_OPENSSL_SSLV23_PADDING = 2;
const int64_t k_OPENSSL_VERSION_NUMBER = 9469999;
extern const StaticString k_OPENSSL_VERSION_TEXT("OpenSSL 0.9.8b 04 May 2006",26);
const int64_t k_OP_ANONYMOUS = 4;
const int64_t k_OP_DEBUG = 1;
const int64_t k_OP_EXPUNGE = 128;
const int64_t k_OP_HALFOPEN = 64;
const int64_t k_OP_PROTOTYPE = 32;
const int64_t k_OP_READONLY = 2;
const int64_t k_OP_SECURE = 256;
const int64_t k_OP_SHORTCACHE = 8;
const int64_t k_OP_SILENT = 16;
const int64_t k_PATHINFO_BASENAME = 2;
const int64_t k_PATHINFO_DIRNAME = 1;
const int64_t k_PATHINFO_EXTENSION = 4;
const int64_t k_PATHINFO_FILENAME = 8;
extern const StaticString k_PATH_SEPARATOR(":",1);
extern const StaticString k_PCRE_VERSION("7.3 2007-08-28",14);
extern const StaticString k_PEAR_EXTENSION_DIR("",0);
extern const StaticString k_PEAR_INSTALL_DIR("",0);
const int64_t k_PHP_BINARY_READ = 2;
extern const StaticString k_PHP_BINDIR("",0);
extern const StaticString k_PHP_CONFIG_FILE_PATH("",0);
extern const StaticString k_PHP_CONFIG_FILE_SCAN_DIR("",0);
extern const StaticString k_PHP_DATADIR("",0);
extern const StaticString k_PHP_EOL("\n",1);
extern const StaticString k_PHP_EXTENSION_DIR("",0);
const int64_t k_PHP_INT_MAX = 9223372036854775807;
const int64_t k_PHP_INT_SIZE = 8;
extern const StaticString k_PHP_LIBDIR("",0);
extern const StaticString k_PHP_LOCALSTATEDIR("",0);
const int64_t k_PHP_NORMAL_READ = 1;
extern const StaticString k_PHP_OS("Linux",5);
const int64_t k_PHP_OUTPUT_HANDLER_CONT = 2;
const int64_t k_PHP_OUTPUT_HANDLER_END = 4;
const int64_t k_PHP_OUTPUT_HANDLER_START = 1;
extern const StaticString k_PHP_PREFIX("",0);
extern const StaticString k_PHP_SAPI("cli",3);
extern const StaticString k_PHP_SHLIB_SUFFIX("so",2);
extern const StaticString k_PHP_SYSCONFDIR("",0);
const int64_t k_PHP_URL_FRAGMENT = 7;
const int64_t k_PHP_URL_HOST = 1;
const int64_t k_PHP_URL_PASS = 4;
const int64_t k_PHP_URL_PATH = 5;
const int64_t k_PHP_URL_PORT = 2;
const int64_t k_PHP_URL_QUERY = 6;
const int64_t k_PHP_URL_SCHEME = 0;
const int64_t k_PHP_URL_USER = 3;
extern const StaticString k_PHP_VERSION("5.3.3.hiphop",12);
const int64_t k_PKCS7_BINARY = 128;
const int64_t k_PKCS7_DETACHED = 64;
const int64_t k_PKCS7_NOATTR = 256;
const int64_t k_PKCS7_NOCERTS = 2;
const int64_t k_PKCS7_NOCHAIN = 8;
const int64_t k_PKCS7_NOINTERN = 16;
const int64_t k_PKCS7_NOSIGS = 4;
const int64_t k_PKCS7_NOVERIFY = 32;
const int64_t k_PKCS7_TEXT = 1;
const int64_t k_PM_STR = 131111;
const int64_t k_PNG_ALL_FILTERS = 248;
const int64_t k_PNG_FILTER_AVG = 64;
const int64_t k_PNG_FILTER_NONE = 8;
const int64_t k_PNG_FILTER_PAETH = 128;
const int64_t k_PNG_FILTER_SUB = 16;
const int64_t k_PNG_FILTER_UP = 32;
const int64_t k_PNG_NO_FILTER = 0;
const int64_t k_POSIX_F_OK = 0;
const int64_t k_POSIX_R_OK = 4;
const int64_t k_POSIX_S_IFBLK = 24576;
const int64_t k_POSIX_S_IFCHR = 8192;
const int64_t k_POSIX_S_IFIFO = 4096;
const int64_t k_POSIX_S_IFREG = 32768;
const int64_t k_POSIX_S_IFSOCK = 49152;
const int64_t k_POSIX_W_OK = 2;
const int64_t k_POSIX_X_OK = 1;
const int64_t k_PREG_BACKTRACK_LIMIT_ERROR = 2;
const int64_t k_PREG_BAD_UTF8_ERROR = 4;
const int64_t k_PREG_GREP_INVERT = 1;
const int64_t k_PREG_INTERNAL_ERROR = 1;
const int64_t k_PREG_NO_ERROR = 0;
const int64_t k_PREG_OFFSET_CAPTURE = 256;
const int64_t k_PREG_PATTERN_ORDER = 1;
const int64_t k_PREG_RECURSION_LIMIT_ERROR = 3;
const int64_t k_PREG_SET_ORDER = 2;
const int64_t k_PREG_SPLIT_DELIM_CAPTURE = 2;
const int64_t k_PREG_SPLIT_NO_EMPTY = 1;
const int64_t k_PREG_SPLIT_OFFSET_CAPTURE = 4;
const int64_t k_PRIO_PGRP = 1;
const int64_t k_PRIO_PROCESS = 0;
const int64_t k_PRIO_USER = 2;
const int64_t k_PSFS_ERR_FATAL = 0;
const int64_t k_PSFS_FEED_ME = 1;
const int64_t k_PSFS_FLAG_FLUSH_CLOSE = 2;
const int64_t k_PSFS_FLAG_FLUSH_INC = 1;
const int64_t k_PSFS_FLAG_NORMAL = 0;
const int64_t k_PSFS_PASS_ON = 2;
const int64_t k_RADIXCHAR = 65536;
const int64_t k_SA_ALL = 31;
const int64_t k_SA_MESSAGES = 1;
const int64_t k_SA_RECENT = 2;
const int64_t k_SA_UIDNEXT = 8;
const int64_t k_SA_UIDVALIDITY = 16;
const int64_t k_SA_UNSEEN = 4;
const int64_t k_SEEK_CUR = 1;
const int64_t k_SEEK_END = 2;
const int64_t k_SEEK_SET = 0;
const int64_t k_SE_FREE = 2;
const int64_t k_SE_NOPREFETCH = 4;
const int64_t k_SE_UID = 1;
const int64_t k_SIGABRT = 6;
const int64_t k_SIGALRM = 14;
const int64_t k_SIGBABY = 31;
const int64_t k_SIGBUS = 7;
const int64_t k_SIGCHLD = 17;
const int64_t k_SIGCLD = 17;
const int64_t k_SIGCONT = 18;
const int64_t k_SIGFPE = 8;
const int64_t k_SIGHUP = 1;
const int64_t k_SIGILL = 4;
const int64_t k_SIGINT = 2;
const int64_t k_SIGIO = 29;
const int64_t k_SIGIOT = 6;
const int64_t k_SIGKILL = 9;
const int64_t k_SIGPIPE = 13;
const int64_t k_SIGPOLL = 29;
const int64_t k_SIGPROF = 27;
const int64_t k_SIGPWR = 30;
const int64_t k_SIGQUIT = 3;
const int64_t k_SIGSEGV = 11;
const int64_t k_SIGSTKFLT = 16;
const int64_t k_SIGSTOP = 19;
const int64_t k_SIGSYS = 31;
const int64_t k_SIGTERM = 15;
const int64_t k_SIGTRAP = 5;
const int64_t k_SIGTSTP = 20;
const int64_t k_SIGTTIN = 21;
const int64_t k_SIGTTOU = 22;
const int64_t k_SIGURG = 23;
const int64_t k_SIGUSR1 = 10;
const int64_t k_SIGUSR2 = 12;
const int64_t k_SIGVTALRM = 26;
const int64_t k_SIGWINCH = 28;
const int64_t k_SIGXCPU = 24;
const int64_t k_SIGXFSZ = 25;
const int64_t k_SIG_DFL = 0;
const int64_t k_SIG_ERR = -1;
const int64_t k_SIG_IGN = 1;
const int64_t k_SOAP_1_1 = 1;
const int64_t k_SOAP_1_2 = 2;
const int64_t k_SOAP_ACTOR_NEXT = 1;
const int64_t k_SOAP_ACTOR_NONE = 2;
const int64_t k_SOAP_ACTOR_UNLIMATERECEIVER = 3;
const int64_t k_SOAP_AUTHENTICATION_BASIC = 0;
const int64_t k_SOAP_AUTHENTICATION_DIGEST = 1;
const int64_t k_SOAP_COMPRESSION_ACCEPT = 32;
const int64_t k_SOAP_COMPRESSION_DEFLATE = 16;
const int64_t k_SOAP_COMPRESSION_GZIP = 0;
const int64_t k_SOAP_DOCUMENT = 2;
const int64_t k_SOAP_ENCODED = 1;
const int64_t k_SOAP_ENC_ARRAY = 300;
const int64_t k_SOAP_ENC_OBJECT = 301;
const int64_t k_SOAP_FUNCTIONS_ALL = 999;
const int64_t k_SOAP_LITERAL = 2;
const int64_t k_SOAP_PERSISTENCE_REQUEST = 2;
const int64_t k_SOAP_PERSISTENCE_SESSION = 1;
const int64_t k_SOAP_RPC = 1;
const int64_t k_SOAP_SINGLE_ELEMENT_ARRAYS = 1;
const int64_t k_SOAP_USE_XSI_ARRAY_TYPE = 4;
const int64_t k_SOAP_WAIT_ONE_WAY_CALLS = 2;
const int64_t k_SOCKET_E2BIG = 7;
const int64_t k_SOCKET_EACCES = 13;
const int64_t k_SOCKET_EADDRINUSE = 98;
const int64_t k_SOCKET_EADDRNOTAVAIL = 99;
const int64_t k_SOCKET_EADV = 68;
const int64_t k_SOCKET_EAFNOSUPPORT = 97;
const int64_t k_SOCKET_EAGAIN = 11;
const int64_t k_SOCKET_EALREADY = 114;
const int64_t k_SOCKET_EBADE = 52;
const int64_t k_SOCKET_EBADF = 9;
const int64_t k_SOCKET_EBADFD = 77;
const int64_t k_SOCKET_EBADMSG = 74;
const int64_t k_SOCKET_EBADR = 53;
const int64_t k_SOCKET_EBADRQC = 56;
const int64_t k_SOCKET_EBADSLT = 57;
const int64_t k_SOCKET_EBUSY = 16;
const int64_t k_SOCKET_ECHRNG = 44;
const int64_t k_SOCKET_ECOMM = 70;
const int64_t k_SOCKET_ECONNABORTED = 103;
const int64_t k_SOCKET_ECONNREFUSED = 111;
const int64_t k_SOCKET_ECONNRESET = 104;
const int64_t k_SOCKET_EDESTADDRREQ = 89;
const int64_t k_SOCKET_EDQUOT = 122;
const int64_t k_SOCKET_EEXIST = 17;
const int64_t k_SOCKET_EFAULT = 14;
const int64_t k_SOCKET_EHOSTDOWN = 112;
const int64_t k_SOCKET_EHOSTUNREACH = 113;
const int64_t k_SOCKET_EIDRM = 43;
const int64_t k_SOCKET_EINPROGRESS = 115;
const int64_t k_SOCKET_EINTR = 4;
const int64_t k_SOCKET_EINVAL = 22;
const int64_t k_SOCKET_EIO = 5;
const int64_t k_SOCKET_EISCONN = 106;
const int64_t k_SOCKET_EISDIR = 21;
const int64_t k_SOCKET_EISNAM = 120;
const int64_t k_SOCKET_EL2HLT = 51;
const int64_t k_SOCKET_EL2NSYNC = 45;
const int64_t k_SOCKET_EL3HLT = 46;
const int64_t k_SOCKET_EL3RST = 47;
const int64_t k_SOCKET_ELNRNG = 48;
const int64_t k_SOCKET_ELOOP = 40;
const int64_t k_SOCKET_EMEDIUMTYPE = 124;
const int64_t k_SOCKET_EMFILE = 24;
const int64_t k_SOCKET_EMLINK = 31;
const int64_t k_SOCKET_EMSGSIZE = 90;
const int64_t k_SOCKET_EMULTIHOP = 72;
const int64_t k_SOCKET_ENAMETOOLONG = 36;
const int64_t k_SOCKET_ENETDOWN = 100;
const int64_t k_SOCKET_ENETRESET = 102;
const int64_t k_SOCKET_ENETUNREACH = 101;
const int64_t k_SOCKET_ENFILE = 23;
const int64_t k_SOCKET_ENOANO = 55;
const int64_t k_SOCKET_ENOBUFS = 105;
const int64_t k_SOCKET_ENOCSI = 50;
const int64_t k_SOCKET_ENODATA = 61;
const int64_t k_SOCKET_ENODEV = 19;
const int64_t k_SOCKET_ENOENT = 2;
const int64_t k_SOCKET_ENOLCK = 37;
const int64_t k_SOCKET_ENOLINK = 67;
const int64_t k_SOCKET_ENOMEDIUM = 123;
const int64_t k_SOCKET_ENOMEM = 12;
const int64_t k_SOCKET_ENOMSG = 42;
const int64_t k_SOCKET_ENONET = 64;
const int64_t k_SOCKET_ENOPROTOOPT = 92;
const int64_t k_SOCKET_ENOSPC = 28;
const int64_t k_SOCKET_ENOSR = 63;
const int64_t k_SOCKET_ENOSTR = 60;
const int64_t k_SOCKET_ENOSYS = 38;
const int64_t k_SOCKET_ENOTBLK = 15;
const int64_t k_SOCKET_ENOTCONN = 107;
const int64_t k_SOCKET_ENOTDIR = 20;
const int64_t k_SOCKET_ENOTEMPTY = 39;
const int64_t k_SOCKET_ENOTSOCK = 88;
const int64_t k_SOCKET_ENOTTY = 25;
const int64_t k_SOCKET_ENOTUNIQ = 76;
const int64_t k_SOCKET_ENXIO = 6;
const int64_t k_SOCKET_EOPNOTSUPP = 95;
const int64_t k_SOCKET_EPERM = 1;
const int64_t k_SOCKET_EPFNOSUPPORT = 96;
const int64_t k_SOCKET_EPIPE = 32;
const int64_t k_SOCKET_EPROTO = 71;
const int64_t k_SOCKET_EPROTONOSUPPORT = 93;
const int64_t k_SOCKET_EPROTOTYPE = 91;
const int64_t k_SOCKET_EREMCHG = 78;
const int64_t k_SOCKET_EREMOTE = 66;
const int64_t k_SOCKET_EREMOTEIO = 121;
const int64_t k_SOCKET_ERESTART = 85;
const int64_t k_SOCKET_EROFS = 30;
const int64_t k_SOCKET_ESHUTDOWN = 108;
const int64_t k_SOCKET_ESOCKTNOSUPPORT = 94;
const int64_t k_SOCKET_ESPIPE = 29;
const int64_t k_SOCKET_ESRMNT = 69;
const int64_t k_SOCKET_ESTRPIPE = 86;
const int64_t k_SOCKET_ETIME = 62;
const int64_t k_SOCKET_ETIMEDOUT = 110;
const int64_t k_SOCKET_ETOOMANYREFS = 109;
const int64_t k_SOCKET_EUNATCH = 49;
const int64_t k_SOCKET_EUSERS = 87;
const int64_t k_SOCKET_EWOULDBLOCK = 11;
const int64_t k_SOCKET_EXDEV = 18;
const int64_t k_SOCKET_EXFULL = 54;
const int64_t k_SOCK_DGRAM = 2;
const int64_t k_SOCK_RAW = 3;
const int64_t k_SOCK_RDM = 4;
const int64_t k_SOCK_SEQPACKET = 5;
const int64_t k_SOCK_STREAM = 1;
const int64_t k_SOL_SOCKET = 1;
const int64_t k_SOL_TCP = 6;
const int64_t k_SOL_UDP = 17;
const int64_t k_SOMAXCONN = 128;
const int64_t k_SORTARRIVAL = 1;
const int64_t k_SORTCC = 5;
const int64_t k_SORTDATE = 0;
const int64_t k_SORTFROM = 2;
const int64_t k_SORTSIZE = 6;
const int64_t k_SORTSUBJECT = 3;
const int64_t k_SORTTO = 4;
const int64_t k_SORT_ASC = 4;
const int64_t k_SORT_DESC = 3;
const int64_t k_SORT_LOCALE_STRING = 5;
const int64_t k_SORT_NUMERIC = 1;
const int64_t k_SORT_REGULAR = 0;
const int64_t k_SORT_STRING = 2;
const int64_t k_SO_BROADCAST = 6;
const int64_t k_SO_DEBUG = 1;
const int64_t k_SO_DONTROUTE = 5;
const int64_t k_SO_ERROR = 4;
const int64_t k_SO_FREE = 8;
const int64_t k_SO_KEEPALIVE = 9;
const int64_t k_SO_LINGER = 13;
const int64_t k_SO_NOSERVER = 16;
const int64_t k_SO_OOBINLINE = 10;
const int64_t k_SO_RCVBUF = 8;
const int64_t k_SO_RCVLOWAT = 18;
const int64_t k_SO_RCVTIMEO = 20;
const int64_t k_SO_REUSEADDR = 2;
const int64_t k_SO_SNDBUF = 7;
const int64_t k_SO_SNDLOWAT = 19;
const int64_t k_SO_SNDTIMEO = 21;
const int64_t k_SO_TYPE = 3;
const int64_t k_SQLT_AFC = 96;
const int64_t k_SQLT_AVC = 97;
const int64_t k_SQLT_BDOUBLE = 22;
const int64_t k_SQLT_BFILEE = 114;
const int64_t k_SQLT_BFLOAT = 21;
const int64_t k_SQLT_BIN = 23;
const int64_t k_SQLT_BLOB = 113;
const int64_t k_SQLT_CFILEE = 115;
const int64_t k_SQLT_CHR = 1;
const int64_t k_SQLT_CLOB = 112;
const int64_t k_SQLT_FLT = 4;
const int64_t k_SQLT_INT = 3;
const int64_t k_SQLT_LBI = 24;
const int64_t k_SQLT_LNG = 8;
const int64_t k_SQLT_LVC = 94;
const int64_t k_SQLT_NTY = 108;
const int64_t k_SQLT_NUM = 2;
const int64_t k_SQLT_ODT = 156;
const int64_t k_SQLT_RDD = 104;
const int64_t k_SQLT_RSET = 116;
const int64_t k_SQLT_STR = 5;
const int64_t k_SQLT_UIN = 68;
const int64_t k_SQLT_VCS = 9;
const int64_t k_STREAM_CLIENT_ASYNC_CONNECT = 2;
const int64_t k_STREAM_CLIENT_CONNECT = 4;
const int64_t k_STREAM_CLIENT_PERSISTENT = 1;
const int64_t k_STREAM_CRYPTO_METHOD_SSLv23_CLIENT = 2;
const int64_t k_STREAM_CRYPTO_METHOD_SSLv23_SERVER = 6;
const int64_t k_STREAM_CRYPTO_METHOD_SSLv2_CLIENT = 0;
const int64_t k_STREAM_CRYPTO_METHOD_SSLv2_SERVER = 4;
const int64_t k_STREAM_CRYPTO_METHOD_SSLv3_CLIENT = 1;
const int64_t k_STREAM_CRYPTO_METHOD_SSLv3_SERVER = 5;
const int64_t k_STREAM_CRYPTO_METHOD_TLS_CLIENT = 3;
const int64_t k_STREAM_CRYPTO_METHOD_TLS_SERVER = 7;
const int64_t k_STREAM_ENFORCE_SAFE_MODE = 4;
const int64_t k_STREAM_FILTER_ALL = 3;
const int64_t k_STREAM_FILTER_READ = 1;
const int64_t k_STREAM_FILTER_WRITE = 2;
const int64_t k_STREAM_IGNORE_URL = 2;
const int64_t k_STREAM_IPPROTO_ICMP = 1;
const int64_t k_STREAM_IPPROTO_IP = 0;
const int64_t k_STREAM_IPPROTO_RAW = 255;
const int64_t k_STREAM_IPPROTO_TCP = 6;
const int64_t k_STREAM_IPPROTO_UDP = 17;
const int64_t k_STREAM_IS_URL = 1;
const int64_t k_STREAM_MKDIR_RECURSIVE = 1;
const int64_t k_STREAM_MUST_SEEK = 16;
const int64_t k_STREAM_NOTIFY_AUTH_REQUIRED = 3;
const int64_t k_STREAM_NOTIFY_AUTH_RESULT = 10;
const int64_t k_STREAM_NOTIFY_COMPLETED = 8;
const int64_t k_STREAM_NOTIFY_CONNECT = 2;
const int64_t k_STREAM_NOTIFY_FAILURE = 9;
const int64_t k_STREAM_NOTIFY_FILE_SIZE_IS = 5;
const int64_t k_STREAM_NOTIFY_MIME_TYPE_IS = 4;
const int64_t k_STREAM_NOTIFY_PROGRESS = 7;
const int64_t k_STREAM_NOTIFY_REDIRECTED = 6;
const int64_t k_STREAM_NOTIFY_RESOLVE = 1;
const int64_t k_STREAM_NOTIFY_SEVERITY_ERR = 2;
const int64_t k_STREAM_NOTIFY_SEVERITY_INFO = 0;
const int64_t k_STREAM_NOTIFY_SEVERITY_WARN = 1;
const int64_t k_STREAM_OOB = 1;
const int64_t k_STREAM_PEEK = 2;
const int64_t k_STREAM_PF_INET = 2;
const int64_t k_STREAM_PF_INET6 = 10;
const int64_t k_STREAM_PF_UNIX = 1;
const int64_t k_STREAM_REPORT_ERRORS = 8;
const int64_t k_STREAM_SERVER_BIND = 4;
const int64_t k_STREAM_SERVER_LISTEN = 8;
const int64_t k_STREAM_SHUT_RD = 0;
const int64_t k_STREAM_SHUT_RDWR = 2;
const int64_t k_STREAM_SHUT_WR = 1;
const int64_t k_STREAM_SOCK_DGRAM = 2;
const int64_t k_STREAM_SOCK_RAW = 3;
const int64_t k_STREAM_SOCK_RDM = 4;
const int64_t k_STREAM_SOCK_SEQPACKET = 5;
const int64_t k_STREAM_SOCK_STREAM = 1;
const int64_t k_STREAM_URL_STAT_LINK = 1;
const int64_t k_STREAM_URL_STAT_QUIET = 2;
const int64_t k_STREAM_USE_PATH = 1;
const int64_t k_STR_PAD_BOTH = 2;
const int64_t k_STR_PAD_LEFT = 0;
const int64_t k_STR_PAD_RIGHT = 1;
const int64_t k_ST_SET = 4;
const int64_t k_ST_SILENT = 2;
const int64_t k_ST_UID = 1;
const int64_t k_SUNFUNCS_RET_DOUBLE = 2;
const int64_t k_SUNFUNCS_RET_STRING = 1;
const int64_t k_SUNFUNCS_RET_TIMESTAMP = 0;
const int64_t k_THOUSEP = 65537;
const bool k_TRUE = true;
const int64_t k_TYPEAPPLICATION = 3;
const int64_t k_TYPEAUDIO = 4;
const int64_t k_TYPEIMAGE = 5;
const int64_t k_TYPEMESSAGE = 2;
const int64_t k_TYPEMODEL = 7;
const int64_t k_TYPEMULTIPART = 1;
const int64_t k_TYPEOTHER = 8;
const int64_t k_TYPETEXT = 0;
const int64_t k_TYPEVIDEO = 6;
const int64_t k_T_ABSTRACT = 346;
const int64_t k_T_AND_EQUAL = 271;
const int64_t k_T_ARRAY = 360;
const int64_t k_T_ARRAY_CAST = 292;
const int64_t k_T_AS = 326;
const int64_t k_T_BAD_CHARACTER = 313;
const int64_t k_T_BOOLEAN_AND = 279;
const int64_t k_T_BOOLEAN_OR = 278;
const int64_t k_T_BOOL_CAST = 290;
const int64_t k_T_BREAK = 331;
const int64_t k_T_CASE = 329;
const int64_t k_T_CATCH = 338;
const int64_t k_T_CHARACTER = 312;
const int64_t k_T_CLASS = 353;
const int64_t k_T_CLASS_C = 361;
const int64_t k_T_CLONE = 298;
const int64_t k_T_CLOSE_TAG = 370;
const int64_t k_T_COMMENT = 366;
const int64_t k_T_COMPILER_HALT_OFFSET = 405;
const int64_t k_T_CONCAT_EQUAL = 273;
const int64_t k_T_CONST = 335;
const int64_t k_T_CONSTANT_ENCAPSED_STRING = 315;
const int64_t k_T_CONTINUE = 332;
const int64_t k_T_CURLY_OPEN = 375;
const int64_t k_T_DEC = 296;
const int64_t k_T_DECLARE = 324;
const int64_t k_T_DEFAULT = 330;
const int64_t k_T_DIR = 379;
const int64_t k_T_DIV_EQUAL = 274;
const int64_t k_T_DNUMBER = 306;
const int64_t k_T_DO = 317;
const int64_t k_T_DOC_COMMENT = 367;
const int64_t k_T_DOLLAR_OPEN_CURLY_BRACES = 374;
const int64_t k_T_DOUBLE_ARROW = 358;
const int64_t k_T_DOUBLE_CAST = 294;
const int64_t k_T_DOUBLE_COLON = 376;
const int64_t k_T_ECHO = 316;
const int64_t k_T_ELSE = 303;
const int64_t k_T_ELSEIF = 302;
const int64_t k_T_EMPTY = 351;
const int64_t k_T_ENCAPSED_AND_WHITESPACE = 314;
const int64_t k_T_ENDDECLARE = 325;
const int64_t k_T_ENDFOR = 321;
const int64_t k_T_ENDFOREACH = 323;
const int64_t k_T_ENDIF = 304;
const int64_t k_T_ENDSWITCH = 328;
const int64_t k_T_ENDWHILE = 319;
const int64_t k_T_END_HEREDOC = 373;
const int64_t k_T_EVAL = 260;
const int64_t k_T_EXIT = 300;
const int64_t k_T_EXTENDS = 355;
const int64_t k_T_FILE = 365;
const int64_t k_T_FINAL = 345;
const int64_t k_T_FMT = 3;
const int64_t k_T_FMT_AMPM = 4;
const int64_t k_T_FOR = 320;
const int64_t k_T_FOREACH = 322;
const int64_t k_T_FUNCTION = 334;
const int64_t k_T_FUNC_C = 363;
const int64_t k_T_GLOBAL = 341;
const int64_t k_T_GOTO = 333;
const int64_t k_T_HALT_COMPILER = 352;
const int64_t k_T_IF = 301;
const int64_t k_T_IMPLEMENTS = 356;
const int64_t k_T_INC = 297;
const int64_t k_T_INCLUDE = 262;
const int64_t k_T_INCLUDE_ONCE = 261;
const int64_t k_T_INLINE_HTML = 311;
const int64_t k_T_INSTANCEOF = 288;
const int64_t k_T_INTERFACE = 354;
const int64_t k_T_INT_CAST = 295;
const int64_t k_T_ISSET = 350;
const int64_t k_T_IS_EQUAL = 283;
const int64_t k_T_IS_GREATER_OR_EQUAL = 284;
const int64_t k_T_IS_IDENTICAL = 281;
const int64_t k_T_IS_NOT_EQUAL = 282;
const int64_t k_T_IS_NOT_IDENTICAL = 280;
const int64_t k_T_IS_SMALLER_OR_EQUAL = 285;
const int64_t k_T_LINE = 364;
const int64_t k_T_LIST = 359;
const int64_t k_T_LNUMBER = 305;
const int64_t k_T_LOGICAL_AND = 265;
const int64_t k_T_LOGICAL_OR = 263;
const int64_t k_T_LOGICAL_XOR = 264;
const int64_t k_T_METHOD_C = 362;
const int64_t k_T_MINUS_EQUAL = 276;
const int64_t k_T_MOD_EQUAL = 272;
const int64_t k_T_MUL_EQUAL = 275;
const int64_t k_T_NAMESPACE = 377;
const int64_t k_T_NEW = 299;
const int64_t k_T_NS_C = 378;
const int64_t k_T_NS_SEPARATOR = 380;
const int64_t k_T_NUM_STRING = 310;
const int64_t k_T_OBJECT_CAST = 291;
const int64_t k_T_OBJECT_OPERATOR = 357;
const int64_t k_T_OPEN_TAG = 368;
const int64_t k_T_OPEN_TAG_WITH_ECHO = 369;
const int64_t k_T_OR_EQUAL = 270;
const int64_t k_T_PAAMAYIM_NEKUDOTAYIM = 376;
const int64_t k_T_PLUS_EQUAL = 277;
const int64_t k_T_PRINT = 266;
const int64_t k_T_PRIVATE = 344;
const int64_t k_T_PROTECTED = 343;
const int64_t k_T_PUBLIC = 342;
const int64_t k_T_REQUIRE = 259;
const int64_t k_T_REQUIRE_ONCE = 258;
const int64_t k_T_RETURN = 336;
const int64_t k_T_SL = 287;
const int64_t k_T_SL_EQUAL = 268;
const int64_t k_T_SR = 286;
const int64_t k_T_SR_EQUAL = 267;
const int64_t k_T_START_HEREDOC = 372;
const int64_t k_T_STATIC = 347;
const int64_t k_T_STRING = 307;
const int64_t k_T_STRING_CAST = 293;
const int64_t k_T_STRING_VARNAME = 308;
const int64_t k_T_SWITCH = 327;
const int64_t k_T_THROW = 339;
const int64_t k_T_TRY = 337;
const int64_t k_T_UNSET = 349;
const int64_t k_T_UNSET_CAST = 289;
const int64_t k_T_USE = 340;
const int64_t k_T_VAR = 348;
const int64_t k_T_VARIABLE = 309;
const int64_t k_T_WHILE = 318;
const int64_t k_T_WHITESPACE = 371;
const int64_t k_T_XOR_EQUAL = 269;
const int64_t k_ULOC_ACTUAL_LOCALE = 0;
const int64_t k_ULOC_VALID_LOCALE = 1;
const int64_t k_UNKNOWN_TYPE = 999998;
const int64_t k_UPLOAD_ERR_CANT_WRITE = 7;
const int64_t k_UPLOAD_ERR_EXTENSION = 8;
const int64_t k_UPLOAD_ERR_FORM_SIZE = 2;
const int64_t k_UPLOAD_ERR_INI_SIZE = 1;
const int64_t k_UPLOAD_ERR_NO_FILE = 4;
const int64_t k_UPLOAD_ERR_NO_TMP_DIR = 6;
const int64_t k_UPLOAD_ERR_OK = 0;
const int64_t k_UPLOAD_ERR_PARTIAL = 3;
const int64_t k_U_AMBIGUOUS_ALIAS_WARNING = -122;
const int64_t k_U_BAD_VARIABLE_DEFINITION = 65536;
const int64_t k_U_BRK_ASSIGN_ERROR = 66053;
const int64_t k_U_BRK_ERROR_LIMIT = 66062;
const int64_t k_U_BRK_ERROR_START = 66048;
const int64_t k_U_BRK_HEX_DIGITS_EXPECTED = 66049;
const int64_t k_U_BRK_INIT_ERROR = 66058;
const int64_t k_U_BRK_INTERNAL_ERROR = 66048;
const int64_t k_U_BRK_MALFORMED_RULE_TAG = 66061;
const int64_t k_U_BRK_MISMATCHED_PAREN = 66055;
const int64_t k_U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056;
const int64_t k_U_BRK_RULE_EMPTY_SET = 66059;
const int64_t k_U_BRK_RULE_SYNTAX = 66051;
const int64_t k_U_BRK_SEMICOLON_EXPECTED = 66050;
const int64_t k_U_BRK_UNCLOSED_SET = 66052;
const int64_t k_U_BRK_UNDEFINED_VARIABLE = 66057;
const int64_t k_U_BRK_UNRECOGNIZED_OPTION = 66060;
const int64_t k_U_BRK_VARIABLE_REDFINITION = 66054;
const int64_t k_U_BUFFER_OVERFLOW_ERROR = 15;
const int64_t k_U_CE_NOT_FOUND_ERROR = 21;
const int64_t k_U_COLLATOR_VERSION_MISMATCH = 28;
const int64_t k_U_DIFFERENT_UCA_VERSION = -121;
const int64_t k_U_ENUM_OUT_OF_SYNC_ERROR = 25;
const int64_t k_U_ERROR_LIMIT = 66568;
const int64_t k_U_ERROR_WARNING_LIMIT = -120;
const int64_t k_U_ERROR_WARNING_START = -128;
const int64_t k_U_FILE_ACCESS_ERROR = 4;
const int64_t k_U_FMT_PARSE_ERROR_LIMIT = 65804;
const int64_t k_U_FMT_PARSE_ERROR_START = 65792;
const int64_t k_U_ILLEGAL_ARGUMENT_ERROR = 1;
const int64_t k_U_ILLEGAL_CHARACTER = 65567;
const int64_t k_U_ILLEGAL_CHAR_FOUND = 12;
const int64_t k_U_ILLEGAL_CHAR_IN_SEGMENT = 65564;
const int64_t k_U_ILLEGAL_ESCAPE_SEQUENCE = 18;
const int64_t k_U_ILLEGAL_PAD_POSITION = 65800;
const int64_t k_U_INDEX_OUTOFBOUNDS_ERROR = 8;
const int64_t k_U_INTERNAL_PROGRAM_ERROR = 5;
const int64_t k_U_INTERNAL_TRANSLITERATOR_ERROR = 65568;
const int64_t k_U_INVALID_CHAR_FOUND = 10;
const int64_t k_U_INVALID_FORMAT_ERROR = 3;
const int64_t k_U_INVALID_FUNCTION = 65570;
const int64_t k_U_INVALID_ID = 65569;
const int64_t k_U_INVALID_PROPERTY_PATTERN = 65561;
const int64_t k_U_INVALID_RBT_SYNTAX = 65560;
const int64_t k_U_INVALID_STATE_ERROR = 27;
const int64_t k_U_INVALID_TABLE_FILE = 14;
const int64_t k_U_INVALID_TABLE_FORMAT = 13;
const int64_t k_U_INVARIANT_CONVERSION_ERROR = 26;
const int64_t k_U_MALFORMED_EXPONENTIAL_PATTERN = 65795;
const int64_t k_U_MALFORMED_PRAGMA = 65562;
const int64_t k_U_MALFORMED_RULE = 65537;
const int64_t k_U_MALFORMED_SET = 65538;
const int64_t k_U_MALFORMED_SYMBOL_REFERENCE = 65539;
const int64_t k_U_MALFORMED_UNICODE_ESCAPE = 65540;
const int64_t k_U_MALFORMED_VARIABLE_DEFINITION = 65541;
const int64_t k_U_MALFORMED_VARIABLE_REFERENCE = 65542;
const int64_t k_U_MEMORY_ALLOCATION_ERROR = 7;
const int64_t k_U_MESSAGE_PARSE_ERROR = 6;
const int64_t k_U_MISMATCHED_SEGMENT_DELIMITERS = 65543;
const int64_t k_U_MISPLACED_ANCHOR_START = 65544;
const int64_t k_U_MISPLACED_COMPOUND_FILTER = 65558;
const int64_t k_U_MISPLACED_CURSOR_OFFSET = 65545;
const int64_t k_U_MISPLACED_QUANTIFIER = 65546;
const int64_t k_U_MISSING_OPERATOR = 65547;
const int64_t k_U_MISSING_RESOURCE_ERROR = 2;
const int64_t k_U_MISSING_SEGMENT_CLOSE = 65548;
const int64_t k_U_MULTIPLE_ANTE_CONTEXTS = 65549;
const int64_t k_U_MULTIPLE_COMPOUND_FILTERS = 65559;
const int64_t k_U_MULTIPLE_CURSORS = 65550;
const int64_t k_U_MULTIPLE_DECIMAL_SEPARATORS = 65793;
const int64_t k_U_MULTIPLE_DECIMAL_SEPERATORS = 65793;
const int64_t k_U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794;
const int64_t k_U_MULTIPLE_PAD_SPECIFIERS = 65798;
const int64_t k_U_MULTIPLE_PERCENT_SYMBOLS = 65796;
const int64_t k_U_MULTIPLE_PERMILL_SYMBOLS = 65797;
const int64_t k_U_MULTIPLE_POST_CONTEXTS = 65551;
const int64_t k_U_NO_SPACE_AVAILABLE = 20;
const int64_t k_U_NO_WRITE_PERMISSION = 30;
const int64_t k_U_PARSE_ERROR = 9;
const int64_t k_U_PARSE_ERROR_LIMIT = 65571;
const int64_t k_U_PARSE_ERROR_START = 65536;
const int64_t k_U_PATTERN_SYNTAX_ERROR = 65799;
const int64_t k_U_PRIMARY_TOO_LONG_ERROR = 22;
const int64_t k_U_REGEX_BAD_ESCAPE_SEQUENCE = 66307;
const int64_t k_U_REGEX_BAD_INTERVAL = 66312;
const int64_t k_U_REGEX_ERROR_LIMIT = 66318;
const int64_t k_U_REGEX_ERROR_START = 66304;
const int64_t k_U_REGEX_INTERNAL_ERROR = 66304;
const int64_t k_U_REGEX_INVALID_BACK_REF = 66314;
const int64_t k_U_REGEX_INVALID_FLAG = 66315;
const int64_t k_U_REGEX_INVALID_STATE = 66306;
const int64_t k_U_REGEX_LOOK_BEHIND_LIMIT = 66316;
const int64_t k_U_REGEX_MAX_LT_MIN = 66313;
const int64_t k_U_REGEX_MISMATCHED_PAREN = 66310;
const int64_t k_U_REGEX_NUMBER_TOO_BIG = 66311;
const int64_t k_U_REGEX_PROPERTY_SYNTAX = 66308;
const int64_t k_U_REGEX_RULE_SYNTAX = 66305;
const int64_t k_U_REGEX_SET_CONTAINS_STRING = 66317;
const int64_t k_U_REGEX_UNIMPLEMENTED = 66309;
const int64_t k_U_RESOURCE_TYPE_MISMATCH = 17;
const int64_t k_U_RULE_MASK_ERROR = 65557;
const int64_t k_U_SAFECLONE_ALLOCATED_WARNING = -126;
const int64_t k_U_SORT_KEY_TOO_SHORT_WARNING = -123;
const int64_t k_U_STANDARD_ERROR_LIMIT = 31;
const int64_t k_U_STATE_OLD_WARNING = -125;
const int64_t k_U_STATE_TOO_OLD_ERROR = 23;
const int64_t k_U_STRINGPREP_CHECK_BIDI_ERROR = 66562;
const int64_t k_U_STRINGPREP_PROHIBITED_ERROR = 66560;
const int64_t k_U_STRINGPREP_UNASSIGNED_ERROR = 66561;
const int64_t k_U_STRING_NOT_TERMINATED_WARNING = -124;
const int64_t k_U_TOO_MANY_ALIASES_ERROR = 24;
const int64_t k_U_TRAILING_BACKSLASH = 65552;
const int64_t k_U_TRUNCATED_CHAR_FOUND = 11;
const int64_t k_U_UNCLOSED_SEGMENT = 65563;
const int64_t k_U_UNDEFINED_SEGMENT_REFERENCE = 65553;
const int64_t k_U_UNDEFINED_VARIABLE = 65554;
const int64_t k_U_UNEXPECTED_TOKEN = 65792;
const int64_t k_U_UNMATCHED_BRACES = 65801;
const int64_t k_U_UNQUOTED_SPECIAL = 65555;
const int64_t k_U_UNSUPPORTED_ATTRIBUTE = 65803;
const int64_t k_U_UNSUPPORTED_ERROR = 16;
const int64_t k_U_UNSUPPORTED_ESCAPE_SEQUENCE = 19;
const int64_t k_U_UNSUPPORTED_PROPERTY = 65802;
const int64_t k_U_UNTERMINATED_QUOTE = 65556;
const int64_t k_U_USELESS_COLLATOR_ERROR = 29;
const int64_t k_U_USING_DEFAULT_WARNING = -127;
const int64_t k_U_USING_FALLBACK_WARNING = -128;
const int64_t k_U_VARIABLE_RANGE_EXHAUSTED = 65565;
const int64_t k_U_VARIABLE_RANGE_OVERLAP = 65566;
const int64_t k_U_ZERO_ERROR = 0;
const int64_t k_WNOHANG = 1;
const int64_t k_WSDL_CACHE_BOTH = 3;
const int64_t k_WSDL_CACHE_DISK = 1;
const int64_t k_WSDL_CACHE_MEMORY = 2;
const int64_t k_WSDL_CACHE_NONE = 0;
const int64_t k_WUNTRACED = 2;
const int64_t k_X509_PURPOSE_ANY = 7;
const int64_t k_X509_PURPOSE_CRL_SIGN = 6;
const int64_t k_X509_PURPOSE_NS_SSL_SERVER = 3;
const int64_t k_X509_PURPOSE_SMIME_ENCRYPT = 5;
const int64_t k_X509_PURPOSE_SMIME_SIGN = 4;
const int64_t k_X509_PURPOSE_SSL_CLIENT = 1;
const int64_t k_X509_PURPOSE_SSL_SERVER = 2;
const int64_t k_XML_ATTRIBUTE_CDATA = 1;
const int64_t k_XML_ATTRIBUTE_DECL_NODE = 16;
const int64_t k_XML_ATTRIBUTE_ENTITY = 6;
const int64_t k_XML_ATTRIBUTE_ENUMERATION = 9;
const int64_t k_XML_ATTRIBUTE_ID = 2;
const int64_t k_XML_ATTRIBUTE_IDREF = 3;
const int64_t k_XML_ATTRIBUTE_IDREFS = 4;
const int64_t k_XML_ATTRIBUTE_NMTOKEN = 7;
const int64_t k_XML_ATTRIBUTE_NMTOKENS = 8;
const int64_t k_XML_ATTRIBUTE_NODE = 2;
const int64_t k_XML_ATTRIBUTE_NOTATION = 10;
const int64_t k_XML_CDATA_SECTION_NODE = 4;
const int64_t k_XML_COMMENT_NODE = 8;
const int64_t k_XML_DOCUMENT_FRAG_NODE = 11;
const int64_t k_XML_DOCUMENT_NODE = 9;
const int64_t k_XML_DOCUMENT_TYPE_NODE = 10;
const int64_t k_XML_DTD_NODE = 14;
const int64_t k_XML_ELEMENT_DECL_NODE = 15;
const int64_t k_XML_ELEMENT_NODE = 1;
const int64_t k_XML_ENTITY_DECL_NODE = 17;
const int64_t k_XML_ENTITY_NODE = 6;
const int64_t k_XML_ENTITY_REF_NODE = 5;
const int64_t k_XML_ERROR_ASYNC_ENTITY = 13;
const int64_t k_XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF = 16;
const int64_t k_XML_ERROR_BAD_CHAR_REF = 14;
const int64_t k_XML_ERROR_BINARY_ENTITY_REF = 15;
const int64_t k_XML_ERROR_DUPLICATE_ATTRIBUTE = 8;
const int64_t k_XML_ERROR_EXTERNAL_ENTITY_HANDLING = 21;
const int64_t k_XML_ERROR_INCORRECT_ENCODING = 19;
const int64_t k_XML_ERROR_INVALID_TOKEN = 4;
const int64_t k_XML_ERROR_JUNK_AFTER_DOC_ELEMENT = 9;
const int64_t k_XML_ERROR_MISPLACED_XML_PI = 17;
const int64_t k_XML_ERROR_NONE = 0;
const int64_t k_XML_ERROR_NO_ELEMENTS = 3;
const int64_t k_XML_ERROR_NO_MEMORY = 1;
const int64_t k_XML_ERROR_PARAM_ENTITY_REF = 10;
const int64_t k_XML_ERROR_PARTIAL_CHAR = 6;
const int64_t k_XML_ERROR_RECURSIVE_ENTITY_REF = 12;
const int64_t k_XML_ERROR_SYNTAX = 2;
const int64_t k_XML_ERROR_TAG_MISMATCH = 7;
const int64_t k_XML_ERROR_UNCLOSED_CDATA_SECTION = 20;
const int64_t k_XML_ERROR_UNCLOSED_TOKEN = 5;
const int64_t k_XML_ERROR_UNDEFINED_ENTITY = 11;
const int64_t k_XML_ERROR_UNKNOWN_ENCODING = 18;
const int64_t k_XML_HTML_DOCUMENT_NODE = 13;
const int64_t k_XML_LOCAL_NAMESPACE = 18;
const int64_t k_XML_NAMESPACE_DECL_NODE = 18;
const int64_t k_XML_NOTATION_NODE = 12;
const int64_t k_XML_OPTION_CASE_FOLDING = 1;
const int64_t k_XML_OPTION_SKIP_TAGSTART = 3;
const int64_t k_XML_OPTION_SKIP_WHITE = 4;
const int64_t k_XML_OPTION_TARGET_ENCODING = 2;
const int64_t k_XML_PI_NODE = 7;
extern const StaticString k_XML_SAX_IMPL("expat",5);
const int64_t k_XML_TEXT_NODE = 3;
extern const StaticString k_XSD_1999_NAMESPACE("http://www.w3.org/1999/XMLSchema",32);
const int64_t k_XSD_1999_TIMEINSTANT = 401;
const int64_t k_XSD_ANYTYPE = 145;
const int64_t k_XSD_ANYURI = 117;
const int64_t k_XSD_ANYXML = 147;
const int64_t k_XSD_BASE64BINARY = 116;
const int64_t k_XSD_BOOLEAN = 102;
const int64_t k_XSD_BYTE = 137;
const int64_t k_XSD_DATE = 109;
const int64_t k_XSD_DATETIME = 107;
const int64_t k_XSD_DECIMAL = 103;
const int64_t k_XSD_DOUBLE = 105;
const int64_t k_XSD_DURATION = 106;
const int64_t k_XSD_ENTITIES = 130;
const int64_t k_XSD_ENTITY = 129;
const int64_t k_XSD_FLOAT = 104;
const int64_t k_XSD_GDAY = 113;
const int64_t k_XSD_GMONTH = 114;
const int64_t k_XSD_GMONTHDAY = 112;
const int64_t k_XSD_GYEAR = 111;
const int64_t k_XSD_GYEARMONTH = 110;
const int64_t k_XSD_HEXBINARY = 115;
const int64_t k_XSD_ID = 126;
const int64_t k_XSD_IDREF = 127;
const int64_t k_XSD_IDREFS = 128;
const int64_t k_XSD_INT = 135;
const int64_t k_XSD_INTEGER = 131;
const int64_t k_XSD_LANGUAGE = 122;
const int64_t k_XSD_LONG = 134;
const int64_t k_XSD_NAME = 124;
extern const StaticString k_XSD_NAMESPACE("http://www.w3.org/2001/XMLSchema",32);
const int64_t k_XSD_NCNAME = 125;
const int64_t k_XSD_NEGATIVEINTEGER = 133;
const int64_t k_XSD_NMTOKEN = 123;
const int64_t k_XSD_NMTOKENS = 144;
const int64_t k_XSD_NONNEGATIVEINTEGER = 138;
const int64_t k_XSD_NONPOSITIVEINTEGER = 132;
const int64_t k_XSD_NORMALIZEDSTRING = 120;
const int64_t k_XSD_NOTATION = 119;
const int64_t k_XSD_POSITIVEINTEGER = 143;
const int64_t k_XSD_QNAME = 118;
const int64_t k_XSD_SHORT = 136;
const int64_t k_XSD_STRING = 101;
const int64_t k_XSD_TIME = 108;
const int64_t k_XSD_TOKEN = 121;
const int64_t k_XSD_UNSIGNEDBYTE = 142;
const int64_t k_XSD_UNSIGNEDINT = 140;
const int64_t k_XSD_UNSIGNEDLONG = 139;
const int64_t k_XSD_UNSIGNEDSHORT = 141;
const int64_t k_YESEXPR = 327680;
const bool k_ZEND_THREAD_SAFE = false;
const char *g_class_map[] = {
  (const char *)ClassInfo::IsSystem, NULL, "", "", NULL, NULL, NULL, 
  (const char *)0x10416040, "hphp_get_extension_info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used for getting extension's information.\n *\n * @name       string\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_method_info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionClass for getting a method's information.\n *\n * @cname      mixed\n * @name       mixed\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "cname", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_closure_info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionFunction for getting a closure's\n * information.\n *\n * @closure    mixed\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "closure", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_class_constant", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionClass for getting a default parameters\n * value.\n *\n * @cls        mixed\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cls", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_class_info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionClass for getting a class's information.\n *\n * @name       mixed\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_function_info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionFuncion for getting a function's\n * information.\n *\n * @name       string\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_invoke", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @name       string\n * @params     vector\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_invoke_method", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @obj        mixed\n * @cls        string\n * @name       string\n * @params     vector\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cls", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_instanceof", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @obj        object\n * @name       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_create_object", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @name       string\n * @params     vector\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_create_object_without_constructor", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @name       string\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_property", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @obj        object\n * @cls        string\n * @prop       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cls", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prop", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_set_property", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @obj        object\n * @cls        string\n * @prop       string\n * @value      mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cls", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prop", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_static_property", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @cls        string\n * @prop       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cls", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prop", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_set_static_property", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used by FFI interface for other languages to call into PHP.\n *\n * @cls        string\n * @prop       string\n * @value      mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "cls", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prop", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_original_class_name", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionClass for getting a class's declared name.\n *\n * @name       string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_scalar_typehints_enabled", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Internally used by ReflectionClass for checking whether scalar\n * typehints are enabled.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "icu_match", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.icu-match.php )\n *\n * Searches subject for a match to the regular expression given in\n * pattern. See http://userguide.icu-project.org/strings/regexp\n *\n * @pattern    string  The pattern to search for, as a string.\n * @subject    string  The input string.\n * @matches    mixed   If matches is provided, then it is filled with the\n *                     results of search. $matches[0] will contain the text\n *                     that matched the full pattern, $matches[1] will have\n *                     the text that matched the first captured\n *                     parenthesized subpattern, and so on.\n * @flags      int     OR together a combination of UREGEX_* constants.\n *\n * @return     mixed   icu_match() returns the number of times pattern\n *                     matches. That will be either 0 times (no match) or 1\n *                     time because icu_match() will stop searching after\n *                     the first match. icu_match() returns FALSE if an\n *                     error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "matches", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "icu_transliterate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.icu-transliterate.php )\n *\n *\n * @str        string\n * @remove_accents\n *             bool\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "remove_accents", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "icu_tokenize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.icu-tokenize.php )\n *\n *\n * @text       string\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcscale", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcscale.php )\n *\n * Sets the default scale parameter for all subsequent bc math functions\n * that do not explicitly specify a scale parameter.\n *\n * @scale      int     The scale factor.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcadd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcadd.php )\n *\n * Sums left_operand and right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  The sum of the two operands, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcsub", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcsub.php )\n *\n * Subtracts the right_operand from the left_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  The result of the subtraction, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bccomp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bccomp.php )\n *\n * Compares the left_operand to the right_operand and returns the result\n * as an integer.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     The optional scale parameter is used to set the\n *                     number of digits after the decimal place which will\n *                     be used in the comparison.\n *\n * @return     int     Returns 0 if the two operands are equal, 1 if the\n *                     left_operand is larger than the right_operand, -1\n *                     otherwise.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcmul", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcmul.php )\n *\n * Multiply the left_operand by the right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  Returns the result as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcdiv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcdiv.php )\n *\n * Divides the left_operand by the right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  Returns the result of the division as a string, or\n *                     NULL if right_operand is 0.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcmod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcmod.php )\n *\n * Get the modulus of the left_operand using modulus.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The modulus, as a string.\n *\n * @return     string  Returns the modulus as a string, or NULL if modulus\n *                     is 0.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcpow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcpow.php )\n *\n * Raise left_operand to the power right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  Returns the result as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcpowmod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcpowmod.php )\n *\n * Use the fast-exponentiation method to raise left_operand to the power\n * right_operand with respect to the modulus modulus.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @modulus    string  The modulus, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     mixed   Returns the result as a string, or NULL if modulus\n *                     is 0.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "left", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "right", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "modulus", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bcsqrt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bcsqrt.php )\n *\n * Return the square root of the operand.\n *\n * @operand    string  The operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     mixed   Returns the square root as a string, or NULL if\n *                     operand is negative.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "operand", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scale", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ftok", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ftok.php )\n *\n * The function converts the pathname of an existing accessible file and a\n * project identifier into an integer for use with for example shmop_open()\n * and other System V IPC keys.\n *\n * @pathname   string  Path to an accessible file.\n * @proj       string  Project identifier. This must be a one character\n *                     string.\n *\n * @return     int     On success the return value will be the created key\n *                     value, otherwise -1 is returned.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "pathname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "proj", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_get_queue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-get-queue.php )\n *\n * msg_get_queue() returns an id that can be used to access the System V\n * message queue with the given key. The first call creates the message\n * queue with the optional perms. A second call to msg_get_queue() for the\n * same key will return a different message queue identifier, but both\n * identifiers access the same underlying message queue.\n *\n * @key        int     Message queue numeric ID\n * @perms      int     Queue permissions. Default to 0666. If the message\n *                     queue already exists, the perms will be ignored.\n *\n * @return     mixed   Returns a resource handle that can be used to access\n *                     the System V message queue.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "perms", "", (const char *)0xa /* KindOfInt64 */, "i:438;", (const char *)6, "0666", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_queue_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-queue-exists.php )\n *\n * msg_queue_exists() checks whether a message queue exists\n *\n * @key        int     Queue key.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_send", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-send.php )\n *\n * msg_send() sends a message of type msgtype (which MUST be greater than\n * 0) to the message queue specified by queue.\n *\n * @queue      resource\n *\n * @msgtype    int\n * @message    mixed\n * @serialize  bool    The optional serialize controls how the message is\n *                     sent. serialize defaults to TRUE which means that\n *                     the message is serialized using the same mechanism\n *                     as the session module before being sent to the\n *                     queue. This allows complex arrays and objects to be\n *                     sent to other PHP scripts, or if you are using the\n *                     WDDX serializer, to any WDDX compatible client.\n * @blocking   bool    If the message is too large to fit in the queue,\n *                     your script will wait until another process reads\n *                     messages from the queue and frees enough space for\n *                     your message to be sent. This is called blocking;\n *                     you can prevent blocking by setting the optional\n *                     blocking parameter to FALSE, in which case\n *                     msg_send() will immediately return FALSE if the\n *                     message is too big for the queue, and set the\n *                     optional errorcode to MSG_EAGAIN, indicating that\n *                     you should try to send your message again a little\n *                     later on.\n * @errorcode  mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     Upon successful completion the message queue data\n *                     structure is updated as follows: msg_lspid is set to\n *                     the process-ID of the calling process, msg_qnum is\n *                     incremented by 1 and msg_stime is set to the current\n *                     time.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "queue", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msgtype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "serialize", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "blocking", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2800, "errorcode", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_receive", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-receive.php )\n *\n * msg_receive() will receive the first message from the specified queue\n * of the type specified by desiredmsgtype.\n *\n * @queue      resource\n *\n * @desiredmsgtype\n *             int     If desiredmsgtype is 0, the message from the front\n *                     of the queue is returned. If desiredmsgtype is\n *                     greater than 0, then the first message of that type\n *                     is returned. If desiredmsgtype is less than 0, the\n *                     first message on the queue with the lowest type less\n *                     than or equal to the absolute value of\n *                     desiredmsgtype will be read. If no messages match\n *                     the criteria, your script will wait until a suitable\n *                     message arrives on the queue. You can prevent the\n *                     script from blocking by specifying MSG_IPC_NOWAIT in\n *                     the flags parameter.\n * @msgtype    mixed   The type of the message that was received will be\n *                     stored in this parameter.\n * @maxsize    int     The maximum size of message to be accepted is\n *                     specified by the maxsize; if the message in the\n *                     queue is larger than this size the function will\n *                     fail (unless you set flags as described below).\n * @message    mixed   The received message will be stored in message,\n *                     unless there were errors receiving the message.\n * @unserialize\n *             bool    If set to TRUE, the message is treated as though it\n *                     was serialized using the same mechanism as the\n *                     session module. The message will be unserialized and\n *                     then returned to your script. This allows you to\n *                     easily receive arrays or complex object structures\n *                     from other PHP scripts, or if you are using the WDDX\n *                     serializer, from any WDDX compatible source.\n *\n *                     If unserialize is FALSE, the message will be\n *                     returned as a binary-safe string.\n * @flags      int     The optional flags allows you to pass flags to the\n *                     low-level msgrcv system call. It defaults to 0, but\n *                     you may specify one or more of the following values\n *                     (by adding or ORing them together). Flag values for\n *                     msg_receive MSG_IPC_NOWAIT If there are no messages\n *                     of the desiredmsgtype, return immediately and do not\n *                     wait. The function will fail and return an integer\n *                     value corresponding to MSG_ENOMSG. MSG_EXCEPT Using\n *                     this flag in combination with a desiredmsgtype\n *                     greater than 0 will cause the function to receive\n *                     the first message that is not equal to\n *                     desiredmsgtype. MSG_NOERROR If the message is longer\n *                     than maxsize, setting this flag will truncate the\n *                     message to maxsize and will not signal an error.\n * @errorcode  mixed   If the function fails, the optional errorcode will\n *                     be set to the value of the system errno variable.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     Upon successful completion the message queue data\n *                     structure is updated as follows: msg_lrpid is set to\n *                     the process-ID of the calling process, msg_qnum is\n *                     decremented by 1 and msg_rtime is set to the current\n *                     time.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "queue", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "desiredmsgtype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "msgtype", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "maxsize", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "message", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "unserialize", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2800, "errorcode", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_remove_queue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-remove-queue.php )\n *\n * msg_remove_queue() destroys the message queue specified by the queue.\n * Only use this function when all processes have finished working with the\n * message queue and you need to release the system resources held by it.\n *\n * @queue      resource\n *                     Message queue resource handle\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "queue", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_set_queue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-set-queue.php )\n *\n * msg_set_queue() allows you to change the values of the msg_perm.uid,\n * msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying\n * message queue data structure.\n *\n * Changing the data structure will require that PHP be running as the\n * same user that created the queue, owns the queue (as determined by the\n * existing msg_perm.xxx fields), or be running with root privileges. root\n * privileges are required to raise the msg_qbytes values above the system\n * defined limit.\n *\n * @queue      resource\n *                     Message queue resource handle\n * @data       map     You specify the values you require by setting the\n *                     value of the keys that you require in the data\n *                     array.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "queue", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "msg_stat_queue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.msg-stat-queue.php )\n *\n * msg_stat_queue() returns the message queue meta data for the message\n * queue specified by the queue. This is useful, for example, to determine\n * which process sent the message that was just received.\n *\n * @queue      resource\n *                     Message queue resource handle\n *\n * @return     map     The return value is an array whose keys and values\n *                     have the following meanings: Array structure for\n *                     msg_stat_queue msg_perm.uid The uid of the owner of\n *                     the queue. msg_perm.gid The gid of the owner of the\n *                     queue. msg_perm.mode The file access mode of the\n *                     queue. msg_stime The time that the last message was\n *                     sent to the queue. msg_rtime The time that the last\n *                     message was received from the queue. msg_ctime The\n *                     time that the queue was last changed. msg_qnum The\n *                     number of messages waiting to be read from the\n *                     queue. msg_qbytes The maximum number of bytes\n *                     allowed in one message queue. On Linux, this value\n *                     may be read and modified via\n *                     /proc/sys/kernel/msgmnb. msg_lspid The pid of the\n *                     process that sent the last message to the queue.\n *                     msg_lrpid The pid of the process that received the\n *                     last message from the queue.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "queue", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sem_acquire", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sem-acquire.php )\n *\n * sem_acquire() blocks (if necessary) until the semaphore can be\n * acquired. A process attempting to acquire a semaphore which it has\n * already acquired will block forever if acquiring the semaphore would\n * cause its maximum number of semaphore to be exceeded.\n *\n * After processing a request, any semaphores acquired by the process but\n * not explicitly released will be released automatically and a warning\n * will be generated.\n *\n * @sem_identifier\n *             resource\n *                     sem_identifier is a semaphore resource, obtained\n *                     from sem_get().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "sem_identifier", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sem_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sem-get.php )\n *\n * sem_get() returns an id that can be used to access the System V\n * semaphore with the given key.\n *\n * A second call to sem_get() for the same key will return a different\n * semaphore identifier, but both identifiers access the same underlying\n * semaphore.\n *\n * @key        int\n * @max_acquire\n *             int     The number of processes that can acquire the\n *                     semaphore simultaneously is set to max_acquire.\n * @perm       int     The semaphore permissions. Actually this value is\n *                     set only if the process finds it is the only process\n *                     currently attached to the semaphore.\n * @auto_release\n *             bool    Specifies if the semaphore should be automatically\n *                     released on request shutdown.\n *\n * @return     mixed   Returns a positive semaphore identifier on success,\n *                     or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_acquire", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  (const char *)0x2000, "perm", "", (const char *)0xa /* KindOfInt64 */, "i:438;", (const char *)6, "0666", (const char *)4, NULL,
  (const char *)0x2000, "auto_release", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sem_release", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sem-release.php )\n *\n * sem_release() releases the semaphore if it is currently acquired by the\n * calling process, otherwise a warning is generated.\n *\n * After releasing the semaphore, sem_acquire() may be called to\n * re-acquire it.\n *\n * @sem_identifier\n *             resource\n *                     A Semaphore resource handle as returned by\n *                     sem_get().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "sem_identifier", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sem_remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sem-remove.php )\n *\n * sem_remove() removes the given semaphore.\n *\n * After removing the semaphore, it is no more accessible.\n *\n * @sem_identifier\n *             resource\n *                     A semaphore resource identifier as returned by\n *                     sem_get().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "sem_identifier", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_attach", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-attach.php )\n *\n * shm_attach() returns an id that can be used to access the System V\n * shared memory with the given key, the first call creates the shared\n * memory segment with memsize and the optional perm-bits perm.\n *\n * A second call to shm_attach() for the same key will return a different\n * shared memory identifier, but both identifiers access the same\n * underlying shared memory. memsize and perm will be ignored.\n *\n * @shm_key    int     A numeric shared memory segment ID\n * @shm_size   int     The memory size. If not provided, default to the\n *                     sysvshm.init_mem in the php.ini, otherwise 10000\n *                     bytes.\n * @shm_flag   int     The optional permission bits. Default to 0666.\n *\n * @return     mixed   Returns a shared memory segment identifier.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "shm_key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "shm_size", "", (const char *)0xa /* KindOfInt64 */, "i:10000;", (const char *)8, "10000", (const char *)5, NULL,
  (const char *)0x2000, "shm_flag", "", (const char *)0xa /* KindOfInt64 */, "i:438;", (const char *)6, "0666", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_detach", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-detach.php )\n *\n * shm_detach() disconnects from the shared memory given by the\n * shm_identifier created by shm_attach(). Remember, that shared memory\n * still exist in the Unix system and the data is still present.\n *\n * @shm_identifier\n *             int     A shared memory resource handle as returned by\n *                     shm_attach()\n *\n * @return     bool    shm_detach() always returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "shm_identifier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-remove.php )\n *\n * shm_remove() removes the shared memory shm_identifier. All data will be\n * destroyed.\n *\n * @shm_identifier\n *             int     The shared memory identifier as returned by\n *                     shm_attach()\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "shm_identifier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_get_var", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-get-var.php )\n *\n * shm_get_var() returns the variable with a given variable_key, in the\n * given shared memory segment. The variable is still present in the shared\n * memory.\n *\n * @shm_identifier\n *             int     Shared memory segment, obtained from shm_attach().\n * @variable_key\n *             int     The variable key.\n *\n * @return     mixed   Returns the variable with the given key.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "shm_identifier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "variable_key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_has_var", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-has-var.php )\n *\n * shm_has_var() checks whether a specific key exists inside a shared\n * memory segment.\n *\n * @shm_identifier\n *             int     Shared memory segment, obtained from shm_attach().\n * @variable_key\n *             int     The variable key.\n *\n * @return     bool    Returns TRUE if the entry exists, otherwise FALSE\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "shm_identifier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "variable_key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_put_var", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-put-var.php )\n *\n * shm_put_var() inserts or updates the variable with the given\n * variable_key.\n *\n * Warnings (E_WARNING level) will be issued if shm_identifier is not a\n * valid SysV shared memory index or if there was not enough shared memory\n * remaining to complete your request.\n *\n * @shm_identifier\n *             int     A shared memory resource handle as returned by\n *                     shm_attach()\n * @variable_key\n *             int     The variable key.\n * @variable   mixed   The variable. All variable-types are supported.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "shm_identifier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "variable_key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "variable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shm_remove_var", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shm-remove-var.php )\n *\n * Removes a variable with a given variable_key and frees the occupied\n * memory.\n *\n * @shm_identifier\n *             int     The shared memory identifier as returned by\n *                     shm_attach()\n * @variable_key\n *             int     The variable key.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "shm_identifier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "variable_key", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pdo_drivers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pdo-drivers.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetcopyright", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetcopyright.php\n * )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgethomeurl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgethomeurl.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetpackagename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetpackagename.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetquantumdepth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetquantumdepth.php )\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetreleasedate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetreleasedate.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetresourcelimit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetresourcelimit.php )\n *\n *\n * @resource_type\n *             int\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "resource_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetversion", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetversion.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetversionnumber", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetversionnumber.php )\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetversionstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetversionstring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickqueryconfigureoption", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickqueryconfigureoption.php )\n *\n *\n * @option     string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickqueryconfigureoptions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickqueryconfigureoptions.php )\n *\n *\n * @pattern    string\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickqueryfonts", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickqueryfonts.php )\n *\n *\n * @pattern    string\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickqueryformats", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickqueryformats.php\n * )\n *\n *\n * @pattern    string\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetresourcelimit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetresourcelimit.php )\n *\n *\n * @resource_type\n *             int\n * @limit      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "resource_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newdrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.newdrawingwand.php )\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newmagickwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.newmagickwand.php )\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newpixeliterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.newpixeliterator.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newpixelregioniterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.newpixelregioniterator.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x          int\n * @y          int\n * @columns    int\n * @rows       int\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newpixelwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.newpixelwand.php )\n *\n *\n * @imagemagick_col_str\n *             string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "imagemagick_col_str", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newpixelwandarray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.newpixelwandarray.php )\n *\n *\n * @num_pxl_wnds\n *             int\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "num_pxl_wnds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "newpixelwands", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.newpixelwands.php )\n *\n *\n * @num_pxl_wnds\n *             int\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "num_pxl_wnds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "destroydrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.destroydrawingwand.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "destroymagickwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.destroymagickwand.php )\n *\n *\n * @mgck_wnd   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "destroypixeliterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.destroypixeliterator.php )\n *\n *\n * @pxl_iter   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "destroypixelwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.destroypixelwand.php )\n *\n *\n * @pxl_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "destroypixelwandarray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.destroypixelwandarray.php )\n *\n *\n * @pxl_wnd_array\n *             vector\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "destroypixelwands", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.destroypixelwands.php )\n *\n *\n * @pxl_wnd_array\n *             vector\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isdrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.isdrawingwand.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ismagickwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ismagickwand.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ispixeliterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ispixeliterator.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ispixelwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ispixelwand.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "cleardrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.cleardrawingwand.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clearmagickwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.clearmagickwand.php )\n *\n *\n * @mgck_wnd   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clearpixeliterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.clearpixeliterator.php\n * )\n *\n *\n * @pxl_iter   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clearpixelwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.clearpixelwand.php )\n *\n *\n * @pxl_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clonedrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.clonedrawingwand.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clonemagickwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.clonemagickwand.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "wandgetexception", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.wandgetexception.php )\n *\n *\n * @wnd        resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "wandgetexceptionstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.wandgetexceptionstring.php )\n *\n *\n * @wnd        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "wandgetexceptiontype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.wandgetexceptiontype.php )\n *\n *\n * @wnd        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "wandhasexception", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.wandhasexception.php )\n *\n *\n * @wnd        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawaffine", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawaffine.php )\n *\n *\n * @drw_wnd    resource\n *\n * @sx         float\n * @sy         float\n * @rx         float\n * @ry         float\n * @tx         float\n * @ty         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sy", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ry", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ty", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawannotation", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawannotation.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n * @text       string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawarc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawarc.php )\n *\n *\n * @drw_wnd    resource\n *\n * @sx         float\n * @sy         float\n * @ex         float\n * @ey         float\n * @sd         float\n * @ed         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sy", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ex", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ey", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sd", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ed", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawbezier", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawbezier.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x_y_points_array\n *             vector\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_y_points_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawcircle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawcircle.php )\n *\n *\n * @drw_wnd    resource\n *\n * @ox         float\n * @oy         float\n * @px         float\n * @py         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ox", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "oy", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "px", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "py", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawcolor.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n * @paint_method\n *             int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "paint_method", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawcomment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawcomment.php )\n *\n *\n * @drw_wnd    resource\n *\n * @comment    string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "comment", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawcomposite", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawcomposite.php )\n *\n *\n * @drw_wnd    resource\n *\n * @composite_operator\n *             int\n * @x          float\n * @y          float\n * @width      float\n * @height     float\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "composite_operator", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawellipse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawellipse.php )\n *\n *\n * @drw_wnd    resource\n *\n * @ox         float\n * @oy         float\n * @rx         float\n * @ry         float\n * @start      float\n * @end        float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ox", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "oy", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ry", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "end", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetclippath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetclippath.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetcliprule", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetcliprule.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetclipunits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetclipunits.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetexception", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetexception.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetexceptionstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetexceptionstring.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetexceptiontype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetexceptiontype.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfillalpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfillalpha.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfillcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfillcolor.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfillopacity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfillopacity.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfillrule", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfillrule.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfont.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfontfamily", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfontfamily.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfontsize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfontsize.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfontstretch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfontstretch.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfontstyle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfontstyle.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetfontweight", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetfontweight.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetgravity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetgravity.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokealpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetstrokealpha.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokeantialias", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokeantialias.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokecolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetstrokecolor.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokedasharray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokedasharray.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokedashoffset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokedashoffset.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokelinecap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokelinecap.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokelinejoin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokelinejoin.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokemiterlimit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokemiterlimit.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokeopacity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetstrokeopacity.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetstrokewidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgetstrokewidth.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgettextalignment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgettextalignment.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgettextantialias", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgettextantialias.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgettextdecoration", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgettextdecoration.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgettextencoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawgettextencoding.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgettextundercolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgettextundercolor.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawgetvectorgraphics", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawgetvectorgraphics.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawline", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawline.php )\n *\n *\n * @drw_wnd    resource\n *\n * @sx         float\n * @sy         float\n * @ex         float\n * @ey         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sy", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ex", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ey", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawmatte", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawmatte.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n * @paint_method\n *             int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "paint_method", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathclose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpathclose.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetoabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetoabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x2         float\n * @y2         float\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetoquadraticbezierabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetoquadraticbezierabsolute.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetoquadraticbezierrelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetoquadraticbezierrelative.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetoquadraticbeziersmoothabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetoquadraticbeziersmoothabsolute.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetoquadraticbeziersmoothrelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetoquadraticbeziersmoothrelative.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetorelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetorelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x2         float\n * @y2         float\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetosmoothabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetosmoothabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x2         float\n * @y2         float\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathcurvetosmoothrelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathcurvetosmoothrelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x2         float\n * @y2         float\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathellipticarcabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathellipticarcabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @rx         float\n * @ry         float\n * @x_axis_rotation\n *             float\n * @large_arc_flag\n *             bool\n * @sweep_flag bool\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ry", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_axis_rotation", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "large_arc_flag", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sweep_flag", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathellipticarcrelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathellipticarcrelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @rx         float\n * @ry         float\n * @x_axis_rotation\n *             float\n * @large_arc_flag\n *             bool\n * @sweep_flag bool\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ry", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_axis_rotation", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "large_arc_flag", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sweep_flag", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathfinish", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpathfinish.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathlinetoabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathlinetoabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathlinetohorizontalabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathlinetohorizontalabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathlinetohorizontalrelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathlinetohorizontalrelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathlinetorelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathlinetorelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathlinetoverticalabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathlinetoverticalabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathlinetoverticalrelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathlinetoverticalrelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathmovetoabsolute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathmovetoabsolute.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathmovetorelative", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawpathmovetorelative.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpathstart", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpathstart.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpoint", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpoint.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpolygon", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpolygon.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x_y_points_array\n *             vector\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_y_points_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpolyline", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpolyline.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x_y_points_array\n *             vector\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_y_points_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawrectangle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawrectangle.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x2         float\n * @y2         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawrender", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawrender.php )\n *\n *\n * @drw_wnd    resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawrotate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawrotate.php )\n *\n *\n * @drw_wnd    resource\n *\n * @degrees    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "degrees", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawroundrectangle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawroundrectangle.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x2         float\n * @y2         float\n * @rx         float\n * @ry         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rx", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ry", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawscale", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawscale.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetclippath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetclippath.php )\n *\n *\n * @drw_wnd    resource\n *\n * @clip_path  string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "clip_path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetcliprule", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetcliprule.php )\n *\n *\n * @drw_wnd    resource\n *\n * @fill_rule  int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_rule", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetclipunits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetclipunits.php )\n *\n *\n * @drw_wnd    resource\n *\n * @clip_path_units\n *             int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "clip_path_units", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfillalpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfillalpha.php )\n *\n *\n * @drw_wnd    resource\n *\n * @fill_opacity\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfillcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfillcolor.php )\n *\n *\n * @drw_wnd    resource\n *\n * @fill_pxl_wnd\n *             resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfillopacity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfillopacity.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @fill_opacity\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfillpatternurl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetfillpatternurl.php )\n *\n *\n * @drw_wnd    resource\n *\n * @fill_url   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfillrule", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfillrule.php )\n *\n *\n * @drw_wnd    resource\n *\n * @fill_rule  int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_rule", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfont.php )\n *\n *\n * @drw_wnd    resource\n *\n * @font_file  string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font_file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfontfamily", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfontfamily.php )\n *\n *\n * @drw_wnd    resource\n *\n * @font_family\n *             string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font_family", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfontsize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfontsize.php )\n *\n *\n * @drw_wnd    resource\n *\n * @pointsize  float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pointsize", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfontstretch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfontstretch.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @stretch_type\n *             int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stretch_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfontstyle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfontstyle.php )\n *\n *\n * @drw_wnd    resource\n *\n * @style_type int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "style_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetfontweight", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetfontweight.php )\n *\n *\n * @drw_wnd    resource\n *\n * @font_weight\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font_weight", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetgravity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetgravity.php )\n *\n *\n * @drw_wnd    resource\n *\n * @gravity_type\n *             int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "gravity_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokealpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetstrokealpha.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @stroke_opacity\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stroke_opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokeantialias", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokeantialias.php )\n *\n *\n * @drw_wnd    resource\n *\n * @stroke_antialias\n *             bool\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stroke_antialias", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokecolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetstrokecolor.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @strokecolor_pxl_wnd\n *             resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strokecolor_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokedasharray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokedasharray.php )\n *\n *\n * @drw_wnd    resource\n *\n * @dash_array vector\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dash_array", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokedashoffset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokedashoffset.php )\n *\n *\n * @drw_wnd    resource\n *\n * @dash_offset\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dash_offset", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokelinecap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokelinecap.php )\n *\n *\n * @drw_wnd    resource\n *\n * @line_cap   int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "line_cap", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokelinejoin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokelinejoin.php )\n *\n *\n * @drw_wnd    resource\n *\n * @line_join  int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "line_join", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokemiterlimit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokemiterlimit.php )\n *\n *\n * @drw_wnd    resource\n *\n * @miterlimit float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "miterlimit", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokeopacity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokeopacity.php )\n *\n *\n * @drw_wnd    resource\n *\n * @stroke_opacity\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stroke_opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokepatternurl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetstrokepatternurl.php )\n *\n *\n * @drw_wnd    resource\n *\n * @stroke_url string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stroke_url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetstrokewidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetstrokewidth.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @stroke_width\n *             float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stroke_width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsettextalignment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsettextalignment.php )\n *\n *\n * @drw_wnd    resource\n *\n * @align_type int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "align_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsettextantialias", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsettextantialias.php )\n *\n *\n * @drw_wnd    resource\n *\n * @text_antialias\n *             bool\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text_antialias", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsettextdecoration", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsettextdecoration.php )\n *\n *\n * @drw_wnd    resource\n *\n * @decoration_type\n *             int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "decoration_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsettextencoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsettextencoding.php\n * )\n *\n *\n * @drw_wnd    resource\n *\n * @encoding   string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsettextundercolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsettextundercolor.php )\n *\n *\n * @drw_wnd    resource\n *\n * @undercolor_pxl_wnd\n *             resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "undercolor_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetvectorgraphics", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.drawsetvectorgraphics.php )\n *\n *\n * @drw_wnd    resource\n *\n * @vector_graphics\n *             string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "vector_graphics", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawsetviewbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawsetviewbox.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x1         float\n * @y1         float\n * @x2         float\n * @y2         float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawskewx", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawskewx.php )\n *\n *\n * @drw_wnd    resource\n *\n * @degrees    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "degrees", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawskewy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawskewy.php )\n *\n *\n * @drw_wnd    resource\n *\n * @degrees    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "degrees", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawtranslate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawtranslate.php )\n *\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pushdrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pushdrawingwand.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpushclippath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpushclippath.php )\n *\n *\n * @drw_wnd    resource\n *\n * @clip_path_id\n *             string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "clip_path_id", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpushdefs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpushdefs.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpushpattern", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpushpattern.php )\n *\n *\n * @drw_wnd    resource\n *\n * @pattern_id string\n * @x          float\n * @y          float\n * @width      float\n * @height     float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern_id", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "popdrawingwand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.popdrawingwand.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpopclippath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpopclippath.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpopdefs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpopdefs.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "drawpoppattern", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.drawpoppattern.php )\n *\n *\n * @drw_wnd    resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickadaptivethresholdimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickadaptivethresholdimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @width      float\n * @height     float\n * @offset     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickaddimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickaddimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @add_wand   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "add_wand", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickaddnoiseimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickaddnoiseimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @noise_type int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "noise_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickaffinetransformimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickaffinetransformimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickannotateimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickannotateimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @x          float\n * @y          float\n * @angle      float\n * @text       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickappendimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickappendimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @stack_vertical\n *             bool\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stack_vertical", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickaverageimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickaverageimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickblackthresholdimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickblackthresholdimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @threshold_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickblurimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickblurimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickborderimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickborderimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @bordercolor\n *             resource\n *\n * @width      float\n * @height     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bordercolor", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcharcoalimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcharcoalimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickchopimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickchopimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @width      float\n * @height     float\n * @x          int\n * @y          int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickclipimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickclipimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickclippathimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickclippathimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @pathname   string\n * @inside     bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pathname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "inside", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcoalesceimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickcoalesceimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcolorfloodfillimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickcolorfloodfillimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @fillcolor_pxl_wnd\n *             resource\n *\n * @fuzz       float\n * @bordercolor_pxl_wnd\n *             resource\n *\n * @x          int\n * @y          int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fillcolor_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fuzz", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bordercolor_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcolorizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcolorizeimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @colorize   resource\n *\n * @opacity_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "colorize", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcombineimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcombineimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @channel_type\n *             int\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcommentimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcommentimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @comment    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "comment", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcompareimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcompareimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @reference_wnd\n *             resource\n *\n * @metric_type\n *             int\n * @channel_type\n *             int\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "reference_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "metric_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcompositeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickcompositeimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @composite_wnd\n *             resource\n *\n * @composite_operator\n *             int\n * @x          int\n * @y          int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "composite_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "composite_operator", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickconstituteimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickconstituteimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    float\n * @rows       float\n * @smap       string\n * @storage_type\n *             int\n * @pixel_array\n *             vector\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "smap", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "storage_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pixel_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcontrastimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcontrastimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @sharpen    bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sharpen", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickconvolveimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickconvolveimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @kernel_array\n *             vector\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "kernel_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcropimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickcropimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @width      float\n * @height     float\n * @x          int\n * @y          int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickcyclecolormapimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickcyclecolormapimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @num_positions\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "num_positions", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickdeconstructimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickdeconstructimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickdescribeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickdescribeimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickdespeckleimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickdespeckleimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickdrawimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickdrawimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickechoimageblob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickechoimageblob.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickechoimagesblob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickechoimagesblob.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickedgeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickedgeimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickembossimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickembossimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickenhanceimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickenhanceimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickequalizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickequalizeimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickevaluateimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickevaluateimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @evaluate_op\n *             int\n * @constant   float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "evaluate_op", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "constant", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickflattenimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickflattenimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickflipimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickflipimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickflopimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickflopimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickframeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickframeimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @matte_color\n *             resource\n *\n * @width      float\n * @height     float\n * @inner_bevel\n *             int\n * @outer_bevel\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "matte_color", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "inner_bevel", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outer_bevel", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickfximage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickfximage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @expression string\n * @channel_type\n *             int\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expression", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgammaimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgammaimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @gamma      float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "gamma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgaussianblurimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgaussianblurimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetcharheight", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetcharheight.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetcharwidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetcharwidth.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetexception", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetexception.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetexceptionstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetexceptionstring.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetexceptiontype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetexceptiontype.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetfilename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetfilename.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetformat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetformat.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagebackgroundcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagebackgroundcolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageblob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimageblob.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageblueprimary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageblueprimary.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagebordercolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagebordercolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagechannelmean", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagechannelmean.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @channel_type\n *             int\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagecolormapcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagecolormapcolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @index      float\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagecolors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagecolors.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagecolorspace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagecolorspace.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagecompose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagecompose.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagecompression", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagecompression.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagecompressionquality", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagecompressionquality.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagedelay", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagedelay.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagedepth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagedepth.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @channel_type\n *             int\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagedispose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagedispose.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageextrema", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageextrema.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @channel_type\n *             int\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagefilename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagefilename.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageformat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageformat.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagegamma", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagegamma.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagegreenprimary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagegreenprimary.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageheight", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageheight.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagehistogram", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagehistogram.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageindex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimageindex.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageinterlacescheme", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageinterlacescheme.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageiterations", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageiterations.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagemattecolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagemattecolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagemimetype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagemimetype.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagepixels", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagepixels.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x_offset   int\n * @y_offset   int\n * @columns    float\n * @rows       float\n * @smap       string\n * @storage_type\n *             int\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "smap", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "storage_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageprofile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageprofile.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @name       string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageredprimary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageredprimary.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagerenderingintent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagerenderingintent.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageresolution", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimageresolution.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagescene", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagescene.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagesignature", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagesignature.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagesize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagesize.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagetype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagetype.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimageunits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimageunits.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagevirtualpixelmethod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagevirtualpixelmethod.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagewhitepoint", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetimagewhitepoint.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagewidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagewidth.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetimagesblob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetimagesblob.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetinterlacescheme", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetinterlacescheme.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetmaxtextadvance", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetmaxtextadvance.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetmimetype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetmimetype.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetnumberimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetnumberimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetsamplingfactors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetsamplingfactors.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetsize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetsize.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetstringheight", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetstringheight.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetstringwidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgetstringwidth.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgettextascent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgettextascent.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgettextdescent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickgettextdescent.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickgetwandsize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickgetwandsize.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickhasnextimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickhasnextimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickhaspreviousimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickhaspreviousimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickimplodeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickimplodeimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @amount     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "amount", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicklabelimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicklabelimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @label      string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "label", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicklevelimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicklevelimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @black_point\n *             float\n * @gamma      float\n * @white_point\n *             float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "black_point", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "gamma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "white_point", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmagnifyimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickmagnifyimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmapimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickmapimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @map_wand   resource\n *\n * @dither     bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "map_wand", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dither", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmattefloodfillimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickmattefloodfillimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @opacity    float\n * @fuzz       float\n * @bordercolor_pxl_wnd\n *             resource\n *\n * @x          int\n * @y          int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fuzz", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bordercolor_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmedianfilterimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickmedianfilterimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickminifyimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickminifyimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmodulateimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickmodulateimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @brightness float\n * @saturation float\n * @hue        float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "brightness", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "saturation", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "hue", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmontageimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickmontageimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @tile_geometry\n *             string\n * @thumbnail_geometry\n *             string\n * @montage_mode\n *             int\n * @frame      string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tile_geometry", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "thumbnail_geometry", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "montage_mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "frame", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmorphimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickmorphimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @number_frames\n *             float\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "number_frames", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmosaicimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickmosaicimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickmotionblurimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickmotionblurimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n * @angle      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicknegateimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicknegateimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @only_the_gray\n *             bool\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "only_the_gray", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicknewimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicknewimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @width      float\n * @height     float\n * @imagemagick_col_str\n *             string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "imagemagick_col_str", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicknextimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicknextimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicknormalizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicknormalizeimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickoilpaintimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickoilpaintimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickpaintopaqueimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickpaintopaqueimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @target_pxl_wnd\n *             resource\n *\n * @fill_pxl_wnd\n *             resource\n *\n * @fuzz       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "target_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fill_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fuzz", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickpainttransparentimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickpainttransparentimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @target     resource\n *\n * @opacity    float\n * @fuzz       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "target", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity", "", (const char *)0xb /* KindOfDouble */, "i:65535;", (const char *)8, "MW_TransparentOpacity", (const char *)21, NULL,
  (const char *)0x2000, "fuzz", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickpingimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickpingimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickposterizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickposterizeimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @levels     float\n * @dither     bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "levels", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dither", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickpreviewimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickpreviewimages.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @preview    int\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "preview", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickpreviousimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickpreviousimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickprofileimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickprofileimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @name       string\n * @profile    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "profile", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickquantizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickquantizeimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @number_colors\n *             float\n * @colorspace_type\n *             int\n * @treedepth  float\n * @dither     bool\n * @measure_error\n *             bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "number_colors", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "colorspace_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "treedepth", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dither", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "measure_error", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickquantizeimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickquantizeimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @number_colors\n *             float\n * @colorspace_type\n *             int\n * @treedepth  float\n * @dither     bool\n * @measure_error\n *             bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "number_colors", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "colorspace_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "treedepth", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dither", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "measure_error", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickqueryfontmetrics", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickqueryfontmetrics.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @drw_wnd    resource\n *\n * @txt        string\n * @multiline  bool\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "drw_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "txt", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiline", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickradialblurimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickradialblurimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @angle      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickraiseimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickraiseimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @width      float\n * @height     float\n * @x          int\n * @y          int\n * @raise      bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raise", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickreadimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickreadimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickreadimageblob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickreadimageblob.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @blob       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blob", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickreadimagefile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickreadimagefile.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @handle     resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickreadimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickreadimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @img_filenames_array\n *             vector\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "img_filenames_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickreducenoiseimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickreducenoiseimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickremoveimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickremoveimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickremoveimageprofile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickremoveimageprofile.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @name       string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickremoveimageprofiles", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickremoveimageprofiles.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickresampleimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickresampleimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @x_resolution\n *             float\n * @y_resolution\n *             float\n * @filter_type\n *             int\n * @blur       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_resolution", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_resolution", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filter_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blur", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickresetiterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickresetiterator.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickresizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickresizeimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    float\n * @rows       float\n * @filter_type\n *             int\n * @blur       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filter_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blur", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickrollimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickrollimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x_offset   int\n * @y_offset   int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickrotateimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickrotateimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @background resource\n *\n * @degrees    float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "background", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "degrees", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksampleimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksampleimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    float\n * @rows       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickscaleimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickscaleimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    float\n * @rows       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickseparateimagechannel", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickseparateimagechannel.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetcompressionquality", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetcompressionquality.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @quality    float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quality", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetfilename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetfilename.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetfirstiterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetfirstiterator.php )\n *\n *\n * @mgck_wnd   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetformat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetformat.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @format     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @replace_wand\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replace_wand", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagebackgroundcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagebackgroundcolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @background_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "background_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagebias", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimagebias.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @bias       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bias", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageblueprimary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageblueprimary.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x          float\n * @y          float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagebordercolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagebordercolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @border_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "border_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagecolormapcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagecolormapcolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @index      float\n * @mapcolor_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mapcolor_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagecolorspace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagecolorspace.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @colorspace_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "colorspace_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagecompose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagecompose.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @composite_operator\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "composite_operator", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagecompression", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagecompression.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @compression_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "compression_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagecompressionquality", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagecompressionquality.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @quality    float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quality", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagedelay", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimagedelay.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @delay      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "delay", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagedepth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimagedepth.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @depth      int\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "depth", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagedispose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagedispose.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @dispose_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dispose_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagefilename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagefilename.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageformat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageformat.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @format     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagegamma", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimagegamma.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @gamma      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "gamma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagegreenprimary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagegreenprimary.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x          float\n * @y          float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageindex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimageindex.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @index      int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageinterlacescheme", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageinterlacescheme.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @interlace_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "interlace_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageiterations", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageiterations.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @iterations float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iterations", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagemattecolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagemattecolor.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @matte_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "matte_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageoption", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageoption.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @format     string\n * @key        string\n * @value      string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagepixels", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagepixels.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x_offset   int\n * @y_offset   int\n * @columns    float\n * @rows       float\n * @smap       string\n * @storage_type\n *             int\n * @pixel_array\n *             vector\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "smap", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "storage_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pixel_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageprofile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageprofile.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @name       string\n * @profile    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "profile", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageredprimary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageredprimary.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x          float\n * @y          float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagerenderingintent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagerenderingintent.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @rendering_intent\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rendering_intent", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageresolution", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimageresolution.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x_resolution\n *             float\n * @y_resolution\n *             float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_resolution", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_resolution", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagescene", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimagescene.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @scene      float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "scene", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagetype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimagetype.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @image_type int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "image_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimageunits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetimageunits.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @resolution_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "resolution_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagevirtualpixelmethod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagevirtualpixelmethod.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @virtual_pixel_method\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "virtual_pixel_method", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetimagewhitepoint", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetimagewhitepoint.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @x          float\n * @y          float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetinterlacescheme", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetinterlacescheme.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @interlace_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "interlace_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetlastiterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetlastiterator.php )\n *\n *\n * @mgck_wnd   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetpassphrase", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetpassphrase.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @passphrase string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "passphrase", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetresolution", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetresolution.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @x_resolution\n *             float\n * @y_resolution\n *             float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_resolution", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_resolution", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetsamplingfactors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicksetsamplingfactors.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @number_factors\n *             float\n * @sampling_factors\n *             vector\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "number_factors", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sampling_factors", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetsize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetsize.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    int\n * @rows       int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksetwandsize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksetwandsize.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    int\n * @rows       int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksharpenimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksharpenimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickshaveimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickshaveimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @columns    int\n * @rows       int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "columns", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rows", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickshearimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickshearimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @background resource\n *\n * @x_shear    float\n * @y_shear    float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "background", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x_shear", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y_shear", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksolarizeimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksolarizeimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @threshold  float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickspliceimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickspliceimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @width      float\n * @height     float\n * @x          int\n * @y          int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickspreadimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickspreadimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicksteganoimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicksteganoimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @watermark_wand\n *             resource\n *\n * @offset     int\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "watermark_wand", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickstereoimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickstereoimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @offset_wand\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset_wand", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickstripimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickstripimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickswirlimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickswirlimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @degrees    float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "degrees", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicktextureimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicktextureimage.php\n * )\n *\n *\n * @mgck_wnd   resource\n *\n * @texture_wand\n *             resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "texture_wand", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickthresholdimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickthresholdimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @threshold  float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicktintimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicktintimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @tint_pxl_wnd\n *             int\n * @opacity_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tint_pxl_wnd", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicktransformimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magicktransformimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @crop       string\n * @geometry   string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "crop", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "geometry", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magicktrimimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magicktrimimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @fuzz       float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fuzz", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickunsharpmaskimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickunsharpmaskimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @radius     float\n * @sigma      float\n * @amount     float\n * @threshold  float\n * @channel_type\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "radius", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sigma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "amount", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "channel_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickwaveimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickwaveimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @amplitude  float\n * @wave_length\n *             float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "amplitude", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "wave_length", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickwhitethresholdimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickwhitethresholdimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @threshold_pxl_wnd\n *             resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold_pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickwriteimage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickwriteimage.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickwriteimagefile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickwriteimagefile.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @handle     resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickwriteimages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.magickwriteimages.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @filename   string\n * @join_images\n *             bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "join_images", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "magickwriteimagesfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.magickwriteimagesfile.php )\n *\n *\n * @mgck_wnd   resource\n *\n * @handle     resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mgck_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetalpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetalpha.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetalphaquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetalphaquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetblack", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetblack.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetblackquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetblackquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetblue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetblue.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetbluequantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetbluequantum.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetcolorasstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetcolorasstring.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetcolorcount", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetcolorcount.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetcyan", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetcyan.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetcyanquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetcyanquantum.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetexception", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetexception.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetexceptionstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetexceptionstring.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetexceptiontype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetexceptiontype.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetgreen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetgreen.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetgreenquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetgreenquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetindex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetindex.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetmagenta", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetmagenta.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetmagentaquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetmagentaquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetopacity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetopacity.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetopacityquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetopacityquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetquantumcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetquantumcolor.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetred", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetred.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetredquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetredquantum.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetyellow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelgetyellow.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetyellowquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetyellowquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetalpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetalpha.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @alpha      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "alpha", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetalphaquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetalphaquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @alpha      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "alpha", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetblack", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetblack.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @black      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "black", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetblackquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetblackquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @black      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "black", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetblue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetblue.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @blue       float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetbluequantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetbluequantum.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n * @blue       float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetcolor.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @imagemagick_col_str\n *             string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "imagemagick_col_str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetcolorcount", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetcolorcount.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n * @count      int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetcyan", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetcyan.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @cyan       float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cyan", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetcyanquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetcyanquantum.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n * @cyan       float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cyan", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetgreen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetgreen.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @green      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetgreenquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetgreenquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @green      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetindex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetindex.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @index      float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetmagenta", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetmagenta.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @magenta    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "magenta", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetmagentaquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetmagentaquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @magenta    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "magenta", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetopacity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetopacity.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @opacity    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetopacityquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetopacityquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @opacity    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetquantumcolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetquantumcolor.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @red        float\n * @green      float\n * @blue       float\n * @opacity    float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opacity", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetred", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetred.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @red        float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetredquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetredquantum.php\n * )\n *\n *\n * @pxl_wnd    resource\n *\n * @red        float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetyellow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetyellow.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @yellow     float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "yellow", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetyellowquantum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelsetyellowquantum.php )\n *\n *\n * @pxl_wnd    resource\n *\n * @yellow     float\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_wnd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "yellow", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetiteratorexception", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetiteratorexception.php )\n *\n *\n * @pxl_iter   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetiteratorexceptionstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetiteratorexceptionstring.php )\n *\n *\n * @pxl_iter   resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetiteratorexceptiontype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetiteratorexceptiontype.php )\n *\n *\n * @pxl_iter   resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelgetnextiteratorrow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pixelgetnextiteratorrow.php )\n *\n *\n * @pxl_iter   resource\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelresetiterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelresetiterator.php\n * )\n *\n *\n * @pxl_iter   resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsetiteratorrow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsetiteratorrow.php\n * )\n *\n *\n * @pxl_iter   resource\n *\n * @row        int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "row", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pixelsynciterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pixelsynciterator.php )\n *\n *\n * @pxl_iter   resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pxl_iter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "json_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.json-encode.php )\n *\n * Returns a string containing the JSON representation of value.\n *\n * @value      mixed   The value being encoded. Can be any type except a\n *                     resource.\n *\n *                     This function only works with UTF-8 encoded data.\n * @options    mixed   Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG,\n *                     JSON_HEX_AMP, JSON_HEX_APOS, JSON_FORCE_OBJECT.\n *\n * @return     string  Returns a JSON encoded string on success.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "json_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.json-decode.php )\n *\n * Takes a JSON encoded string and converts it into a PHP variable.\n *\n * @json       string  The json string being decoded.\n *\n *                     This function only works with UTF-8 encoded data.\n * @assoc      bool    When TRUE, returned objects will be converted into\n *                     associative arrays.\n * @options    mixed   User specified recursion depth.\n *\n * @return     mixed   Returns the value encoded in json in appropriate PHP\n *                     type. Values true, false and null (case-insensitive)\n *                     are returned as TRUE, FALSE and NULL respectively.\n *                     NULL is returned if the json cannot be decoded or if\n *                     the encoded data is deeper than the recursion limit.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "json", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "assoc", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "options", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "use_soap_error_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.use-soap-error-handler.php )\n *\n * This function sets whether or not to use the SOAP error handler in the\n * SOAP server. It will return the previous value. If set to TRUE, details\n * of errors in a SoapServer application will be sent to the clients. If\n * FALSE, no information will be sent.\n *\n * @handler    bool    Set to TRUE to send error details to clients.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handler", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_soap_fault", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-soap-fault.php )\n *\n * This function is useful to check if the SOAP call failed, but without\n * using exceptions. To use it, create a SoapClient object with the\n * exceptions option set to zero or FALSE. In this case, the SOAP method\n * will return a special SoapFault object which encapsulates the fault\n * details (faultcode, faultstring, faultactor and faultdetails).\n *\n * If exceptions is not set then SOAP call will throw an exception on\n * error. is_soap_fault() checks if the given parameter is a SoapFault\n * object.\n *\n * @fault      mixed   The object to test.\n *\n * @return     bool    This will return TRUE on error, and FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "fault", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "_soap_active_version", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.-soap-active-version.php )\n *\n * This function returns the soap version that is currently active.\n *\n * @return     int     This will return the active soap version.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parser_create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xml-parser-create.php )\n *\n * xml_parser_create() creates a new XML parser and returns a resource\n * handle referencing it to be used by the other XML functions.\n *\n * @encoding   string  The optional encoding specifies the character\n *                     encoding for the input/output in PHP 4. Starting\n *                     from PHP 5, the input encoding is automatically\n *                     detected, so that the encoding parameter specifies\n *                     only the output encoding. In PHP 4, the default\n *                     output encoding is the same as the input charset. If\n *                     empty string is passed, the parser attempts to\n *                     identify which encoding the document is encoded in\n *                     by looking at the heading 3 or 4 bytes. In PHP 5.0.0\n *                     and 5.0.1, the default output charset is ISO-8859-1,\n *                     while in PHP 5.0.2 and upper is UTF-8. The supported\n *                     encodings are ISO-8859-1, UTF-8 and US-ASCII.\n *\n * @return     resource\n *                     Returns a resource handle for the new XML parser.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parser_free", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xml-parser-free.php )\n *\n * Frees the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to free.\n *\n * @return     bool    This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it frees the parser and\n *                     returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xml-parse.php )\n *\n * xml_parse() parses an XML document. The handlers for the configured\n * events are called as many times as necessary.\n *\n * @parser     resource\n *                     A reference to the XML parser to use.\n * @data       string  Chunk of data to parse. A document may be parsed\n *                     piece-wise by calling xml_parse() several times with\n *                     new data, as long as the is_final parameter is set\n *                     and TRUE when the last data is parsed.\n * @is_final   bool    If set and TRUE, data is the last piece of data sent\n *                     in this parse.\n *\n * @return     int     Returns 1 on success or 0 on failure.\n *\n *                     For unsuccessful parses, error information can be\n *                     retrieved with xml_get_error_code(),\n *                     xml_error_string(), xml_get_current_line_number(),\n *                     xml_get_current_column_number() and\n *                     xml_get_current_byte_index().\n *\n *                     Entity errors are reported at the end of the data\n *                     thus only if is_final is set and TRUE.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "is_final", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parse_into_struct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parse-into-struct.php )\n *\n * This function parses an XML file into 2 parallel array structures, one\n * (index) containing pointers to the location of the appropriate values in\n * the values array. These last two parameters must be passed by reference.\n *\n * @parser     resource\n *\n * @data       string\n * @values     mixed\n * @index      mixed\n *\n * @return     int     xml_parse_into_struct() returns 0 for failure and 1\n *                     for success. This is not the same as FALSE and TRUE,\n *                     be careful with operators such as ===.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "values", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "index", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parser_create_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parser-create-ns.php )\n *\n * xml_parser_create_ns() creates a new XML parser with XML namespace\n * support and returns a resource handle referencing it to be used by the\n * other XML functions.\n *\n * @encoding   string  The optional encoding specifies the character\n *                     encoding for the input/output in PHP 4. Starting\n *                     from PHP 5, the input encoding is automatically\n *                     detected, so that the encoding parameter specifies\n *                     only the output encoding. In PHP 4, the default\n *                     output encoding is the same as the input charset. In\n *                     PHP 5.0.0 and 5.0.1, the default output charset is\n *                     ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8.\n *                     The supported encodings are ISO-8859-1, UTF-8 and\n *                     US-ASCII.\n * @separator  string  With a namespace aware parser tag parameters passed\n *                     to the various handler functions will consist of\n *                     namespace and tag name separated by the string\n *                     specified in seperator.\n *\n * @return     resource\n *                     Returns a resource handle for the new XML parser.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "separator", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parser_get_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parser-get-option.php )\n *\n * Gets an option value from an XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get an option from.\n * @option     int     Which option to fetch. XML_OPTION_CASE_FOLDING and\n *                     XML_OPTION_TARGET_ENCODING are available. See\n *                     xml_parser_set_option() for their description.\n *\n * @return     mixed   This function returns FALSE if parser does not refer\n *                     to a valid parser or if option isn't valid\n *                     (generates also a E_WARNING). Else the option's\n *                     value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_parser_set_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parser-set-option.php )\n *\n * Sets an option in an XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to set an option in.\n * @option     int     Which option to set. See below.\n *\n *                     The following options are available: XML parser\n *                     options Option constant Data type Description\n *                     XML_OPTION_CASE_FOLDING integer Controls whether\n *                     case-folding is enabled for this XML parser. Enabled\n *                     by default. XML_OPTION_SKIP_TAGSTART integer Specify\n *                     how many characters should be skipped in the\n *                     beginning of a tag name. XML_OPTION_SKIP_WHITE\n *                     integer Whether to skip values consisting of\n *                     whitespace characters. XML_OPTION_TARGET_ENCODING\n *                     string Sets which target encoding to use in this XML\n *                     parser.By default, it is set to the same as the\n *                     source encoding used by xml_parser_create().\n *                     Supported target encodings are ISO-8859-1, US-ASCII\n *                     and UTF-8.\n * @value      mixed   The option's new value.\n *\n * @return     bool    This function returns FALSE if parser does not refer\n *                     to a valid parser, or if the option could not be\n *                     set. Else the option is set and TRUE is returned.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_character_data_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-character-data-handler.php )\n *\n * Sets the character data handler function for the XML parser parser.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept two\n *                     parameters: handler ( resource $parser , string\n *                     $data ) parser The first parameter, parser, is a\n *                     reference to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_default_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-default-handler.php )\n *\n * Sets the default handler function for the XML parser parser.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept two\n *                     parameters: handler ( resource $parser , string\n *                     $data ) parser The first parameter, parser, is a\n *                     reference to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_element_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-element-handler.php )\n *\n * Sets the element handler functions for the XML parser.\n * start_element_handler and end_element_handler are strings containing the\n * names of functions that must exist when xml_parse() is called for\n * parser.\n *\n * @parser     resource\n *\n * @start_element_handler\n *             mixed   The function named by start_element_handler must\n *                     accept three parameters: start_element_handler (\n *                     resource $parser , string $name , array $attribs )\n *                     parser The first parameter, parser, is a reference\n *                     to the XML parser calling the handler.\n * @end_element_handler\n *             mixed   The second parameter, name, contains the name of the\n *                     element for which this handler is called.If\n *                     case-folding is in effect for this parser, the\n *                     element name will be in uppercase letters.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start_element_handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "end_element_handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_processing_instruction_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-processing-instruction-handler.php\n * )\n *\n * Sets the processing instruction (PI) handler function for the XML\n * parser parser.\n *\n * A processing instruction has the following format: target data\?> You\n * can put PHP code into such a tag, but be aware of one limitation: in an\n * XML PI, the PI end tag (\?>) can not be quoted, so this character\n * sequence should not appear in the PHP code you embed with PIs in XML\n * documents.If it does, the rest of the PHP code, as well as the \"real\" PI\n * end tag, will be treated as character data.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept three\n *                     parameters: handler ( resource $parser , string\n *                     $target , string $data ) parser The first parameter,\n *                     parser, is a reference to the XML parser calling the\n *                     handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_start_namespace_decl_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-start-namespace-decl-handler.php\n * )\n *\n * Set a handler to be called when a namespace is declared. Namespace\n * declarations occur inside start tags. But the namespace declaration\n * start handler is called before the start tag handler for each namespace\n * declared in that start tag.\n *\n * @parser     resource\n *                     A reference to the XML parser.\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept four\n *                     parameters, and should return an integer value. If\n *                     the value returned from the handler is FALSE (which\n *                     it will be if no value is returned), the XML parser\n *                     will stop parsing and xml_get_error_code() will\n *                     return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler (\n *                     resource $parser , string $user_data , string\n *                     $prefix , string $uri ) parser The first parameter,\n *                     parser, is a reference to the XML parser calling the\n *                     handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_end_namespace_decl_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-end-namespace-decl-handler.php\n * )\n *\n * Set a handler to be called when leaving the scope of a namespace\n * declaration. This will be called, for each namespace declaration, after\n * the handler for the end tag of the element in which the namespace was\n * declared.\n *\n * @parser     resource\n *                     A reference to the XML parser.\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept three\n *                     parameters, and should return an integer value. If\n *                     the value returned from the handler is FALSE (which\n *                     it will be if no value is returned), the XML parser\n *                     will stop parsing and xml_get_error_code() will\n *                     return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler (\n *                     resource $parser , string $user_data , string\n *                     $prefix ) parser The first parameter, parser, is a\n *                     reference to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_unparsed_entity_decl_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-unparsed-entity-decl-handler.php\n * )\n *\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept six\n *                     parameters: handler ( resource $parser , string\n *                     $entity_name , string $base , string $system_id ,\n *                     string $public_id , string $notation_name ) parser\n *                     The first parameter, parser, is a reference to the\n *                     XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_external_entity_ref_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-external-entity-ref-handler.php\n * )\n *\n * Sets the external entity reference handler function for the XML parser\n * parser.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept five\n *                     parameters, and should return an integer value.If\n *                     the value returned from the handler is FALSE (which\n *                     it will be if no value is returned), the XML parser\n *                     will stop parsing and xml_get_error_code() will\n *                     return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler (\n *                     resource $parser , string $open_entity_names ,\n *                     string $base , string $system_id , string $public_id\n *                     ) parser The first parameter, parser, is a reference\n *                     to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_notation_decl_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-notation-decl-handler.php )\n *\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept five\n *                     parameters: handler ( resource $parser , string\n *                     $notation_name , string $base , string $system_id ,\n *                     string $public_id ) parser The first parameter,\n *                     parser, is a reference to the XML parser calling the\n *                     handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_set_object", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xml-set-object.php )\n *\n * This function allows to use parser inside object. All callback\n * functions could be set with xml_set_element_handler() etc and assumed to\n * be methods of object.\n *\n * @parser     resource\n *\n * @object     mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_get_current_byte_index", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-get-current-byte-index.php )\n *\n * Gets the current byte index of the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get byte index\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns which byte\n *                     index the parser is currently at in its data buffer\n *                     (starting at 0).\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_get_current_column_number", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-get-current-column-number.php )\n *\n * Gets the current column number of the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get column number\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns which column\n *                     on the current line (as given by\n *                     xml_get_current_line_number()) the parser is\n *                     currently at.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_get_current_line_number", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-get-current-line-number.php )\n *\n * Gets the current line number for the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get line number\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns which line the\n *                     parser is currently at in its data buffer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_get_error_code", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xml-get-error-code.php\n * )\n *\n * Gets the XML parser error code.\n *\n * @parser     resource\n *                     A reference to the XML parser to get error code\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns one of the\n *                     error codes listed in the error codes section.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "parser", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xml_error_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xml-error-string.php )\n *\n * Gets the XML parser error string associated with the given code.\n *\n * @code       int     An error code from xml_get_error_code().\n *\n * @return     string  Returns a string with a textual description of the\n *                     error code, or FALSE if no description was found.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "code", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "utf8_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.utf8-decode.php )\n *\n * This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.\n *\n * @data       string  An UTF-8 encoded string.\n *\n * @return     string  Returns the ISO-8859-1 translation of data.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "utf8_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.utf8-encode.php )\n *\n * This function encodes the string data to UTF-8, and returns the encoded\n * version. UTF-8 is a standard mechanism used by Unicode for encoding wide\n * character values into a byte stream. UTF-8 is transparent to plain ASCII\n * characters, is self-synchronized (meaning it is possible for a program\n * to figure out where in the bytestream characters start) and can be used\n * with normal string comparison functions for sorting and such. PHP\n * encodes UTF-8 characters in up to four bytes, like this: UTF-8 encoding\n * bytes bits representation 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16\n * 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each\n * b represents a bit that can be used to store character data.\n *\n * @data       string  An ISO-8859-1 string.\n *\n * @return     string  Returns the UTF-8 translation of data.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-module-open.php\n * )\n *\n * This function opens the module of the algorithm and the mode to be\n * used. The name of the algorithm is specified in algorithm, e.g.\n * \"twofish\" or is one of the MCRYPT_ciphername constants. The module is\n * closed by calling mcrypt_module_close().\n *\n * @algorithm  string  The algorithm to be used.\n * @algorithm_directory\n *             string  The algorithm_directory and mode_directory are used\n *                     to locate the encryption modules. When you supply a\n *                     directory name, it is used. When you set one of\n *                     these to the empty string (\"\"), the value set by the\n *                     mcrypt.algorithms_dir or mcrypt.modes_dir\n *                     ini-directive is used. When these are not set, the\n *                     default directories that are used are the ones that\n *                     were compiled in into libmcrypt (usually\n *                     /usr/local/lib/libmcrypt).\n * @mode       string  The mode to be used.\n * @mode_directory\n *             string\n *\n * @return     mixed   Normally it returns an encryption descriptor, or\n *                     FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "algorithm", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "algorithm_directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode_directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-module-close.php\n * )\n *\n * Closes the specified encryption handle.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_list_algorithms", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-list-algorithms.php )\n *\n * Gets the list of all supported algorithms in the lib_dir parameter.\n *\n * @lib_dir    string  Specifies the directory where all algorithms are\n *                     located. If not specifies, the value of the\n *                     mcrypt.algorithms_dir php.ini directive is used.\n *\n * @return     vector  Returns an array with all the supported algorithms.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_list_modes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-list-modes.php )\n *\n * Gets the list of all supported modes in the lib_dir parameter.\n *\n * @lib_dir    string  Specifies the directory where all modes are located.\n *                     If not specifies, the value of the mcrypt.modes_dir\n *                     php.ini directive is used.\n *\n * @return     vector  Returns an array with all the supported modes.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_get_algo_block_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-get-algo-block-size.php\n * )\n *\n * Gets the blocksize of the specified algorithm.\n *\n * @algorithm  string  The algorithm name.\n * @lib_dir    string  This optional parameter can contain the location\n *                     where the mode module is on the system.\n *\n * @return     int     Returns the block size of the algorithm specified in\n *                     bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "algorithm", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_get_algo_key_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-get-algo-key-size.php )\n *\n * Gets the maximum supported keysize of the opened mode.\n *\n * @algorithm  string  The algorithm name.\n * @lib_dir    string  This optional parameter can contain the location\n *                     where the mode module is on the system.\n *\n * @return     int     This function returns the maximum supported key size\n *                     of the algorithm specified in bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "algorithm", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_get_supported_key_sizes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-get-supported-key-sizes.php\n * )\n *\n * Returns an array with the key sizes supported by the specified\n * algorithm. If it returns an empty array then all key sizes between 1 and\n * mcrypt_module_get_algo_key_size() are supported by the algorithm.\n *\n * @algorithm  string  The algorithm to used.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     vector  Returns an array with the key sizes supported by the\n *                     specified algorithm. If it returns an empty array\n *                     then all key sizes between 1 and\n *                     mcrypt_module_get_algo_key_size() are supported by\n *                     the algorithm.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "algorithm", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_is_block_algorithm_mode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-is-block-algorithm-mode.php\n * )\n *\n * This function returns TRUE if the mode is for use with block\n * algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE\n * for cbc, cfb, ofb).\n *\n * @mode       string  The mode to check.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    This function returns TRUE if the mode is for use\n *                     with block algorithms, otherwise it returns FALSE.\n *                     (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_is_block_algorithm", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-is-block-algorithm.php )\n *\n * This function returns TRUE if the specified algorithm is a block\n * algorithm, or FALSE is it is a stream algorithm.\n *\n * @algorithm  string  The algorithm to check.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    This function returns TRUE if the specified\n *                     algorithm is a block algorithm, or FALSE is it is a\n *                     stream algorithm.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "algorithm", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_is_block_mode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-is-block-mode.php )\n *\n * This function returns TRUE if the mode outputs blocks of bytes or FALSE\n * if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb\n * and stream).\n *\n * @mode       string  The mode to check.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    This function returns TRUE if the mode outputs\n *                     blocks of bytes or FALSE if it outputs just bytes.\n *                     (e.g. TRUE for cbc and ecb, and FALSE for cfb and\n *                     stream).\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_module_self_test", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-self-test.php )\n *\n * This function runs the self test on the algorithm specified.\n *\n * @algorithm  string  The algorithm to test.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    The function returns TRUE if the self test succeeds,\n *                     or FALSE when if fails.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "algorithm", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "lib_dir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_create_iv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-create-iv.php )\n *\n * Create an initialization vector (IV) from a random source.\n *\n * The IV is only meant to give an alternative seed to the encryption\n * routines. This IV does not need to be secret at all, though it can be\n * desirable. You even can send it along with your ciphertext without\n * losing security.\n *\n * @size       int     Determines the size of the IV, parameter source\n *                     (defaults to random value) specifies the source of\n *                     the IV.\n * @source     int     The source can be MCRYPT_RAND (system random number\n *                     generator), MCRYPT_DEV_RANDOM (read data from\n *                     /dev/random) and MCRYPT_DEV_URANDOM (read data from\n *                     /dev/urandom). Prior to 5.3.0, MCRYPT_RAND was the\n *                     only one supported on Windows.\n *\n * @return     mixed   Returns the initialization vector, or FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "source", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_encrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-encrypt.php )\n *\n * Encrypts the data and returns it.\n *\n * @cipher     string  One of the MCRYPT_ciphername constants of the name\n *                     of the algorithm as string.\n * @key        string  The key with which the data will be encrypted. If\n *                     it's smaller that the required keysize, it is padded\n *                     with '\\0'. It is better not to use ASCII strings for\n *                     keys.\n *\n *                     It is recommended to use the mhash functions to\n *                     create a key from a string.\n * @data       string  The data that will be encrypted with the given\n *                     cipher and mode. If the size of the data is not n *\n *                     blocksize, the data will be padded with '\\0'.\n *\n *                     The returned crypttext can be larger that the size\n *                     of the data that is given by data.\n * @mode       string  One of the MCRYPT_MODE_modename constants of one of\n *                     \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".\n * @iv         string  Used for the initialisation in CBC, CFB, OFB modes,\n *                     and in some algorithms in STREAM mode. If you do not\n *                     supply an IV, while it is needed for an algorithm,\n *                     the function issues a warning and uses an IV with\n *                     all bytes set to '\\0'.\n *\n * @return     mixed   Returns the encrypted data, as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_decrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-decrypt.php )\n *\n * Decrypts the data and returns the unencrypted data.\n *\n * @cipher     string  cipher is one of the MCRYPT_ciphername constants of\n *                     the name of the algorithm as string.\n * @key        string  key is the key with which the data is encrypted. If\n *                     it's smaller that the required keysize, it is padded\n *                     with '\\0'.\n * @data       string  data is the data that will be decrypted with the\n *                     given cipher and mode. If the size of the data is\n *                     not n * blocksize, the data will be padded with\n *                     '\\0'.\n * @mode       string  mode is one of the MCRYPT_MODE_modename constants of\n *                     one of \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or\n *                     \"stream\".\n * @iv         string  The iv parameter is used for the initialisation in\n *                     CBC, CFB, OFB modes, and in some algorithms in\n *                     STREAM mode. If you do not supply an IV, while it is\n *                     needed for an algorithm, the function issues a\n *                     warning and uses an IV with all bytes set to '\\0'.\n *\n * @return     mixed   Returns the decrypted data as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_cbc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-cbc.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_cfb", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-cfb.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_ecb", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-ecb.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_ofb", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-ofb.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_get_block_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-get-block-size.php )\n *\n * The first prototype is when linked against libmcrypt 2.2.x, the second\n * when linked against libmcrypt 2.4.x or 2.5.x.\n *\n * mcrypt_get_block_size() is used to get the size of a block of the\n * specified cipher (in combination with an encryption mode).\n *\n * It is more useful to use the mcrypt_enc_get_block_size() function as\n * this uses the resource returned by mcrypt_module_open().\n *\n * @cipher     string  One of the MCRYPT_ciphername constants or the name\n *                     of the algorithm as string.\n * @module     string  The module.\n *\n * @return     mixed   Gets the block size, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "module", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_get_cipher_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-get-cipher-name.php )\n *\n * mcrypt_get_cipher_name() is used to get the name of the specified\n * cipher.\n *\n * mcrypt_get_cipher_name() takes the cipher number as an argument\n * (libmcrypt 2.2.x) or takes the cipher name as an argument (libmcrypt\n * 2.4.x or higher) and returns the name of the cipher or FALSE, if the\n * cipher does not exist.\n *\n * @cipher     string  One of the MCRYPT_ciphername constants or the name\n *                     of the algorithm as string.\n *\n * @return     mixed   This function returns the name of the cipher or\n *                     FALSE, if the cipher does not exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_get_iv_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-get-iv-size.php\n * )\n *\n * Gets the size of the IV belonging to a specific cipher/mode\n * combination.\n *\n * It is more useful to use the mcrypt_enc_get_iv_size() function as this\n * uses the resource returned by mcrypt_module_open().\n *\n * @cipher     string  One of the MCRYPT_ciphername constants of the name\n *                     of the algorithm as string.\n * @mode       string  mode is one of the MCRYPT_MODE_modename constants or\n *                     one of \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or\n *                     \"stream\". The IV is ignored in ECB mode as this mode\n *                     does not require it. You will need to have the same\n *                     IV (think: starting point) both at encryption and\n *                     decryption stages, otherwise your encryption will\n *                     fail.\n *\n * @return     mixed   Returns the size of the Initialisation Vector (IV)\n *                     in bytes. On error the function returns FALSE. If\n *                     the IV is ignored in the specified cipher/mode\n *                     combination zero is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_get_key_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-get-key-size.php\n * )\n *\n *\n * @cipher     string\n * @module     string\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "cipher", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "module", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_get_algorithms_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-algorithms-name.php )\n *\n * This function returns the name of the algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     string  Returns the name of the opened algorithm as a\n *                     string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_get_block_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-block-size.php )\n *\n * Gets the blocksize of the opened algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     Returns the block size of the specified algorithm in\n *                     bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_get_iv_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-iv-size.php )\n *\n * This function returns the size of the IV of the algorithm specified by\n * the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb\n * modes, and in some algorithms in stream mode.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     Returns the size of the IV, or 0 if the IV is\n *                     ignored in the algorithm.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_get_key_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-key-size.php )\n *\n * Gets the maximum supported key size of the algorithm in bytes.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     Returns the maximum supported key size of the\n *                     algorithm in bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_get_modes_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-modes-name.php )\n *\n * This function returns the name of the mode.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     string  Returns the name as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_get_supported_key_sizes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-supported-key-sizes.php\n * )\n *\n * Gets the supported key sizes of the opened algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     vector  Returns an array with the key sizes supported by the\n *                     algorithm specified by the encryption descriptor. If\n *                     it returns an empty array then all key sizes between\n *                     1 and mcrypt_enc_get_key_size() are supported by the\n *                     algorithm.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_is_block_algorithm_mode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-is-block-algorithm-mode.php\n * )\n *\n * Tells whether the algorithm of the opened mode works on blocks (e.g.\n * FALSE for stream, and TRUE for cbc, cfb, ofb)..\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE if the mode is for use with block\n *                     algorithms, otherwise it returns FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_is_block_algorithm", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-is-block-algorithm.php )\n *\n * Tells whether the algorithm of the opened mode is a block algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE if the algorithm is a block algorithm\n *                     or FALSE if it is a stream one.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_is_block_mode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-is-block-mode.php )\n *\n * Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and\n * ecb, and FALSE for cfb and stream).\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE if the mode outputs blocks of bytes or\n *                     FALSE if it outputs bytes.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_enc_self_test", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-self-test.php )\n *\n * This function runs the self test on the algorithm specified by the\n * descriptor td.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     If the self test succeeds it returns FALSE. In case\n *                     of an error, it returns TRUE.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_generic", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-generic.php )\n *\n * This function encrypts data. The data is padded with \"\\0\" to make sure\n * the length of the data is n * blocksize. This function returns the\n * encrypted data. Note that the length of the returned string can in fact\n * be longer then the input, due to the padding of the data.\n *\n * If you want to store the encrypted data in a database make sure to\n * store the entire string as returned by mcrypt_generic, or the string\n * will not entirely decrypt properly. If your original string is 10\n * characters long and the block size is 8 (use mcrypt_enc_get_block_size()\n * to determine the blocksize), you would need at least 16 characters in\n * your database field. Note the string returned by mdecrypt_generic() will\n * be 16 characters as well...use rtrim($str, \"\\0\") to remove the padding.\n *\n * If you are for example storing the data in a MySQL database remember\n * that varchar fields automatically have trailing spaces removed during\n * insertion. As encrypted data can end in a space (ASCII 32), the data\n * will be damaged by this removal. Store data in a tinyblob/tinytext (or\n * larger) field instead.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n *                     The encryption handle should always be initialized\n *                     with mcrypt_generic_init() with a key and an IV\n *                     before calling this function. Where the encryption\n *                     is done, you should free the encryption buffers by\n *                     calling mcrypt_generic_deinit(). See\n *                     mcrypt_module_open() for an example.\n * @data       string  The data to encrypt.\n *\n * @return     mixed   Returns the encrypted data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_generic_init", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-generic-init.php\n * )\n *\n * You need to call this function before every call to mcrypt_generic() or\n * mdecrypt_generic().\n *\n * @td         resource\n *                     The encryption descriptor.\n * @key        string  The maximum length of the key should be the one\n *                     obtained by calling mcrypt_enc_get_key_size() and\n *                     every value smaller than this is legal.\n * @iv         string  The IV should normally have the size of the\n *                     algorithms block size, but you must obtain the size\n *                     by calling mcrypt_enc_get_iv_size(). IV is ignored\n *                     in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB and\n *                     OFB modes. It needs to be random and unique (but not\n *                     secret). The same IV must be used for\n *                     encryption/decryption. If you do not want to use it\n *                     you should set it to zeros, but this is not\n *                     recommended.\n *\n * @return     int     The function returns a negative value on error, -3\n *                     when the key length was incorrect, -4 when there was\n *                     a memory allocation problem and any other return\n *                     value is an unknown error. If an error occurs a\n *                     warning will be displayed accordingly. FALSE is\n *                     returned if incorrect parameters were passed.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mdecrypt_generic", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mdecrypt-generic.php )\n *\n * This function decrypts data. Note that the length of the returned\n * string can in fact be longer then the unencrypted string, due to the\n * padding of the data.\n *\n * @td         resource\n *                     An encryption descriptor returned by\n *                     mcrypt_module_open()\n * @data       string  Encrypted data.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_generic_deinit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-generic-deinit.php )\n *\n * This function terminates encryption specified by the encryption\n * descriptor (td). It clears all buffers, but does not close the module.\n * You need to call mcrypt_module_close() yourself. (But PHP does this for\n * you at the end of the script.)\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mcrypt_generic_end", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-generic-end.php\n * )\n *\n *\n * @td         resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "td", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "simplexml_load_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.simplexml-load-string.php )\n *\n * Takes a well-formed XML string and returns it as an object.\n *\n * @data       string  A well-formed XML string\n * @class_name string  You may use this optional parameter so that\n *                     simplexml_load_string() will return an object of the\n *                     specified class. That class should extend the\n *                     SimpleXMLElement class.\n * @options    int     Since PHP 5.1.0 and Libxml 2.6.0, you may also use\n *                     the options parameter to specify additional Libxml\n *                     parameters.\n * @ns         string\n * @is_prefix  bool\n *\n * @return     mixed   Returns an object of class SimpleXMLElement with\n *                     properties containing the data held within the xml\n *                     document. On errors, it will return FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "s:16:\"SimpleXMLElement\";", (const char *)24, "\"SimpleXMLElement\"", (const char *)18, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "is_prefix", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "simplexml_load_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.simplexml-load-file.php\n * )\n *\n * Convert the well-formed XML document in the given file to an object.\n *\n * @filename   string  Path to the XML file\n *\n *                     Libxml 2 unescapes the URI, so if you want to pass\n *                     e.g. b&c as the URI parameter a, you have to call\n *                     simplexml_load_file(rawurlencode('http://example.com/\?a='\n *                     . urlencode('b&c'))). Since PHP 5.1.0 you don't need\n *                     to do this because PHP will do it for you.\n * @class_name string  You may use this optional parameter so that\n *                     simplexml_load_file() will return an object of the\n *                     specified class. That class should extend the\n *                     SimpleXMLElement class.\n * @options    int     Since PHP 5.1.0 and Libxml 2.6.0, you may also use\n *                     the options parameter to specify additional Libxml\n *                     parameters.\n * @ns         string\n * @is_prefix  bool\n *\n * @return     mixed   Returns an object of class SimpleXMLElement with\n *                     properties containing the data held within the XML\n *                     document. On errors, it will return FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "s:16:\"SimpleXMLElement\";", (const char *)24, "\"SimpleXMLElement\"", (const char *)18, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "is_prefix", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "libxml_get_errors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.libxml-get-errors.php )\n *\n * Retrieve array of errors.\n *\n * @return     mixed   Returns an array with LibXMLError objects if there\n *                     are any errors in the buffer, or an empty array\n *                     otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "libxml_get_last_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-get-last-error.php )\n *\n * Retrieve last error from libxml.\n *\n * @return     mixed   Returns a LibXMLError object if there is any error\n *                     in the buffer, FALSE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "libxml_clear_errors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.libxml-clear-errors.php\n * )\n *\n * libxml_clear_errors() clears the libxml error buffer.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "libxml_use_internal_errors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-use-internal-errors.php )\n *\n * libxml_use_internal_errors() allows you to disable standard libxml\n * errors and enable user error handling.\n *\n * @use_errors mixed   Whether to enable user error handling.\n *\n * @return     bool    This function returns the previous value of\n *                     use_errors.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "use_errors", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "libxml_set_streams_context", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-set-streams-context.php )\n *\n * Sets the streams context for the next libxml document load or write.\n *\n * @streams_context\n *             resource\n *                     The stream context resource (created with\n *                     stream_context_create())\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "streams_context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "libxml_disable_entity_loader", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.libxml-disable-entity-loader.php )\n *\n * Disable/enable the ability to load external entities.\n *\n * @disable    bool    Disable (TRUE) or enable (FALSE) libxml extensions\n *                     (such as DOM, XMLWriter and XMLReader) to load\n *                     external entities.\n *\n * @return     bool    Returns the previous value.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "disable", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_context_create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-create.php )\n *\n * Creates and returns a stream context with any options supplied in\n * options preset.\n *\n * @options    map     Must be an associative array of associative arrays\n *                     in the format $arr['wrapper']['option'] = $value.\n *\n *                     Default to an empty array.\n * @params     map     Must be an associative array in the format\n *                     $arr['parameter'] = $value. Refer to context\n *                     parameters for a listing of standard stream\n *                     parameters.\n *\n * @return     resource\n *                     A stream context resource.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_context_get_default", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-get-default.php )\n *\n *\n * @options    map     options must be an associative array of associative\n *                     arrays in the format $arr['wrapper']['option'] =\n *                     $value.\n *\n *                     As of PHP 5.3.0, the stream_context_set_default()\n *                     function can be used to set the default context.\n *\n * @return     resource\n *                     A stream context resource.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_context_get_options", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-get-options.php )\n *\n *\n * @stream_or_context\n *             resource\n *                     The stream or context to get options from\n *\n * @return     mixed   Returns an associative array with the options.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "stream_or_context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_context_set_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-set-option.php )\n *\n *\n * @stream_or_context\n *             resource\n *                     The stream or context resource to apply the options\n *                     too.\n * @wrapper    mixed   The options to set for the default context.\n *\n *                     options must be an associative array of associative\n *                     arrays in the format $arr['wrapper']['option'] =\n *                     $value.\n *\n *                     Refer to context options and parameters for a\n *                     listing of stream options.\n * @option     string\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream_or_context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "wrapper", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_context_set_param", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-set-param.php )\n *\n *\n * @stream_or_context\n *             resource\n *\n * @params     map\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream_or_context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_copy_to_stream", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-copy-to-stream.php )\n *\n * Makes a copy of up to maxlength bytes of data from the current position\n * (or from the offset position, if specified) in source to dest. If\n * maxlength is not specified, all remaining content in source will be\n * copied.\n *\n * @source     resource\n *                     The source stream\n * @dest       resource\n *                     The destination stream\n * @maxlength  int     Maximum bytes to copy\n * @offset     int     The offset where to start to copy data\n *\n * @return     mixed   Returns the total count of bytes copied.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "source", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dest", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "maxlength", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-encoding.php )\n *\n *\n * @stream     resource\n *\n * @encoding   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_bucket_append", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-bucket-append.php )\n *\n *\n * @brigade    resource\n *\n * @bucket     resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "brigade", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bucket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_bucket_prepend", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-bucket-prepend.php )\n *\n *\n * @brigade    resource\n *\n * @bucket     resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "brigade", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bucket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_bucket_make_writeable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-bucket-make-writeable.php )\n *\n *\n * @brigade    resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "brigade", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_bucket_new", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-bucket-new.php )\n *\n *\n * @stream     resource\n *\n * @buffer     string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "buffer", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_filter_register", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-register.php )\n *\n * stream_filter_register() allows you to implement your own filter on any\n * registered stream used with all the other filesystem functions (such as\n * fopen(), fread() etc.).\n *\n * @filtername string  The filter name to be registered.\n * @classname  string  To implement a filter, you need to define a class as\n *                     an extension of php_user_filter with a number of\n *                     member functions as defined below. When performing\n *                     read/write operations on the stream to which your\n *                     filter is attached, PHP will pass the data through\n *                     your filter (and any other filters attached to that\n *                     stream) so that the data may be modified as desired.\n *                     You must implement the methods exactly as described\n *                     below - doing otherwise will lead to undefined\n *                     behaviour. int filter ( resource $in , resource $out\n *                     , int &$consumed , bool $closing )\n *\n *                     This method is called whenever data is read from or\n *                     written to the attached stream (such as with fread()\n *                     or fwrite()). in is a resource pointing to a bucket\n *                     brigade which contains one or more bucket objects\n *                     containing data to be filtered. out is a resource\n *                     pointing to a second bucket brigade into which your\n *                     modified buckets should be placed. consumed, which\n *                     must always be declared by reference, should be\n *                     incremented by the length of the data which your\n *                     filter reads in and alters. In most cases this means\n *                     you will increment consumed by $bucket->datalen for\n *                     each $bucket. If the stream is in the process of\n *                     closing (and therefore this is the last pass through\n *                     the filterchain), the closing parameter will be set\n *                     to TRUE. The filter() method must return one of\n *                     three values upon completion. Return Value Meaning\n *                     PSFS_PASS_ON Filter processed successfully with data\n *                     available in the out bucket brigade. PSFS_FEED_ME\n *                     Filter processed successfully, however no data was\n *                     available to return. More data is required from the\n *                     stream or prior filter. PSFS_ERR_FATAL (default) The\n *                     filter experienced an unrecoverable error and cannot\n *                     continue. bool onCreate ( void ) This method is\n *                     called during instantiation of the filter class\n *                     object. If your filter allocates or initializes any\n *                     other resources (such as a buffer), this is the\n *                     place to do it. Your implementation of this method\n *                     should return FALSE on failure, or TRUE on success.\n *                     When your filter is first instantiated, and\n *                     yourfilter->onCreate() is called, a number of\n *                     properties will be available as shown in the table\n *                     below.\n *\n *                     Property Contents FilterClass->filtername A string\n *                     containing the name the filter was instantiated\n *                     with. Filters may be registered under multiple names\n *                     or under wildcards. Use this property to determine\n *                     which name was used. FilterClass->params The\n *                     contents of the params parameter passed to\n *                     stream_filter_append() or stream_filter_prepend().\n *                     FilterClass->stream The stream resource being\n *                     filtered. Maybe available only during filter() calls\n *                     when the closing parameter is set to FALSE. void\n *                     onClose ( void )\n *\n *                     This method is called upon filter shutdown\n *                     (typically, this is also during stream shutdown),\n *                     and is executed after the flush method is called. If\n *                     any resources were allocated or initialized during\n *                     onCreate() this would be the time to destroy or\n *                     dispose of them.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     stream_filter_register() will return FALSE if the\n *                     filtername is already defined.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filtername", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "classname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_filter_remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-remove.php )\n *\n * Removes a stream filter previously added to a stream with\n * stream_filter_prepend() or stream_filter_append(). Any data remaining in\n * the filter's internal buffer will be flushed through to the next filter\n * before removing it.\n *\n * @stream_filter\n *             resource\n *                     The stream filter to be removed.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream_filter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_filter_append", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-append.php )\n *\n * Adds filtername to the list of filters attached to stream.\n *\n * @stream     resource\n *                     The target stream.\n * @filtername string  The filter name.\n * @read_write int     By default, stream_filter_append() will attach the\n *                     filter to the read filter chain if the file was\n *                     opened for reading (i.e. File Mode: r, and/or +).\n *                     The filter will also be attached to the write filter\n *                     chain if the file was opened for writing (i.e. File\n *                     Mode: w, a, and/or +). STREAM_FILTER_READ,\n *                     STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can\n *                     also be passed to the read_write parameter to\n *                     override this behavior.\n * @params     mixed   This filter will be added with the specified params\n *                     to the end of the list and will therefore be called\n *                     last during stream operations. To add a filter to\n *                     the beginning of the list, use\n *                     stream_filter_prepend().\n *\n * @return     resource\n *                     Returns a resource which can be used to refer to\n *                     this filter instance during a call to\n *                     stream_filter_remove().\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filtername", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "read_write", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "params", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_filter_prepend", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-prepend.php )\n *\n * Adds filtername to the list of filters attached to stream.\n *\n * @stream     resource\n *                     The target stream.\n * @filtername string  The filter name.\n * @read_write int     By default, stream_filter_prepend() will attach the\n *                     filter to the read filter chain if the file was\n *                     opened for reading (i.e. File Mode: r, and/or +).\n *                     The filter will also be attached to the write filter\n *                     chain if the file was opened for writing (i.e. File\n *                     Mode: w, a, and/or +). STREAM_FILTER_READ,\n *                     STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can\n *                     also be passed to the read_write parameter to\n *                     override this behavior. See stream_filter_append()\n *                     for an example of using this parameter.\n * @params     mixed   This filter will be added with the specified params\n *                     to the beginning of the list and will therefore be\n *                     called first during stream operations. To add a\n *                     filter to the end of the list, use\n *                     stream_filter_append().\n *\n * @return     resource\n *                     Returns a resource which can be used to refer to\n *                     this filter instance during a call to\n *                     stream_filter_remove().\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filtername", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "read_write", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "params", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_get_contents", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-contents.php\n * )\n *\n * Identical to file_get_contents(), except that stream_get_contents()\n * operates on an already open stream resource and returns the remaining\n * contents in a string, up to maxlength bytes and starting at the\n * specified offset.\n *\n * @handle     resource\n *                     A stream resource (e.g. returned from fopen())\n * @maxlen     int     The maximum bytes to read. Defaults to -1 (read all\n *                     the remaining buffer).\n * @offset     int     Seek to the specified offset before reading.\n *\n * @return     mixed   Returns a string or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "maxlen", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_get_filters", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-filters.php\n * )\n *\n *\n * @return     vector  Returns an indexed array containing the name of all\n *                     stream filters available.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_get_line", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-line.php )\n *\n * Gets a line from the given handle.\n *\n * Reading ends when length bytes have been read, when the string\n * specified by ending is found (which is not included in the return\n * value), or on EOF (whichever comes first).\n *\n * This function is nearly identical to fgets() except in that it allows\n * end of line delimiters other than the standard \\n, \\r, and \\r\\n, and\n * does not return the delimiter itself.\n *\n * @handle     resource\n *                     A valid file handle.\n * @length     int     The number of bytes to read from the handle.\n * @ending     string  An optional string delimiter.\n *\n * @return     mixed   Returns a string of up to length bytes read from the\n *                     file pointed to by handle.\n *\n *                     If an error occurs, returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "ending", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_get_meta_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-get-meta-data.php )\n *\n * Returns information about an existing stream.\n *\n * @stream     resource\n *                     The stream can be any stream created by fopen(),\n *                     fsockopen() and pfsockopen().\n *\n * @return     mixed   The result array contains the following items:\n *\n *                     timed_out (bool) - TRUE if the stream timed out\n *                     while waiting for data on the last call to fread()\n *                     or fgets().\n *\n *                     blocked (bool) - TRUE if the stream is in blocking\n *                     IO mode. See stream_set_blocking().\n *\n *                     eof (bool) - TRUE if the stream has reached\n *                     end-of-file. Note that for socket streams this\n *                     member can be TRUE even when unread_bytes is\n *                     non-zero. To determine if there is more data to be\n *                     read, use feof() instead of reading this item.\n *\n *                     unread_bytes (int) - the number of bytes currently\n *                     contained in the PHP's own internal buffer. You\n *                     shouldn't use this value in a script.\n *\n *                     stream_type (string) - a label describing the\n *                     underlying implementation of the stream.\n *\n *                     wrapper_type (string) - a label describing the\n *                     protocol wrapper implementation layered over the\n *                     stream. See List of Supported Protocols/Wrappers for\n *                     more information about wrappers.\n *\n *                     wrapper_data (mixed) - wrapper specific data\n *                     attached to this stream. See List of Supported\n *                     Protocols/Wrappers for more information about\n *                     wrappers and their wrapper data.\n *\n *                     filters (array) - and array containing the names of\n *                     any filters that have been stacked onto this stream.\n *                     Documentation on filters can be found in the Filters\n *                     appendix.\n *\n *                     mode (string) - the type of access required for\n *                     this stream (see Table 1 of the fopen() reference)\n *\n *                     seekable (bool) - whether the current stream can be\n *                     seeked.\n *\n *                     uri (string) - the URI/filename associated with\n *                     this stream.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_get_transports", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-get-transports.php )\n *\n *\n * @return     vector  Returns an indexed array of socket transports names.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_get_wrappers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-wrappers.php\n * )\n *\n * Retrieve list of registered streams available on the running system.\n *\n * @return     vector  Returns an indexed array containing the name of all\n *                     stream wrappers available on the running system.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_register_wrapper", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-register-wrapper.php )\n *\n *\n * @protocol   string\n * @classname  string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "protocol", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "classname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_wrapper_register", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-wrapper-register.php )\n *\n * Allows you to implement your own protocol handlers and streams for use\n * with all the other filesystem functions (such as fopen(), fread() etc.).\n *\n * @protocol   string  The wrapper name to be registered.\n * @classname  string  The classname which implements the protocol.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     stream_wrapper_register() will return FALSE if the\n *                     protocol already has a handler.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "protocol", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "classname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_wrapper_restore", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-wrapper-restore.php )\n *\n * Restores a built-in wrapper previously unregistered with\n * stream_wrapper_unregister().\n *\n * @protocol   string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "protocol", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_wrapper_unregister", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-wrapper-unregister.php )\n *\n * Allows you to disable an already defined stream wrapper. Once the\n * wrapper has been disabled you may override it with a user-defined\n * wrapper using stream_wrapper_register() or reenable it later on with\n * stream_wrapper_restore().\n *\n * @protocol   string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "protocol", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_resolve_include_path", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-resolve-include-path.php )\n *\n * Resolve filename against the include path according to the same rules\n * as fopen()/include() does.\n *\n * @filename   string  The filename to resolve.\n * @context    resource\n *                     A valid context resource created with\n *                     stream_context_create().\n *\n * @return     string  On success, the resolved absolute filename is\n *                     returned. On failure, FALSE is returned.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_select", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-select.php )\n *\n * The stream_select() function accepts arrays of streams and waits for\n * them to change status. Its operation is equivalent to that of the\n * socket_select() function except in that it acts on streams.\n *\n * @read       mixed   The streams listed in the read array will be watched\n *                     to see if characters become available for reading\n *                     (more precisely, to see if a read will not block -\n *                     in particular, a stream resource is also ready on\n *                     end-of-file, in which case an fread() will return a\n *                     zero length string).\n * @write      mixed   The streams listed in the write array will be\n *                     watched to see if a write will not block.\n * @except     mixed   The streams listed in the except array will be\n *                     watched for high priority exceptional\n *                     (\"out-of-band\") data arriving.\n *\n *                     When stream_select() returns, the arrays read,\n *                     write and except are modified to indicate which\n *                     stream resource(s) actually changed status. You do\n *                     not need to pass every array to stream_select(). You\n *                     can leave it out and use an empty array or NULL\n *                     instead. Also do not forget that those arrays are\n *                     passed by reference and will be modified after\n *                     stream_select() returns.\n * @vtv_sec    mixed   The tv_sec and tv_usec together form the timeout\n *                     parameter, tv_sec specifies the number of seconds\n *                     while tv_usec the number of microseconds. The\n *                     timeout is an upper bound on the amount of time that\n *                     stream_select() will wait before it returns. If\n *                     tv_sec and tv_usec are both set to 0,\n *                     stream_select() will not wait for data - instead it\n *                     will return immediately, indicating the current\n *                     status of the streams.\n *\n *                     If tv_sec is NULL stream_select() can block\n *                     indefinitely, returning only when an event on one of\n *                     the watched streams occurs (or if a signal\n *                     interrupts the system call). Warning\n *\n *                     Using a timeout value of 0 allows you to\n *                     instantaneously poll the status of the streams,\n *                     however, it is NOT a good idea to use a 0 timeout\n *                     value in a loop as it will cause your script to\n *                     consume too much CPU time.\n *\n *                     It is much better to specify a timeout value of a\n *                     few seconds, although if you need to be checking and\n *                     running other code concurrently, using a timeout\n *                     value of at least 200000 microseconds will help\n *                     reduce the CPU usage of your script.\n *\n *                     Remember that the timeout value is the maximum time\n *                     that will elapse; stream_select() will return as\n *                     soon as the requested streams are ready for use.\n * @tv_usec    int     See tv_sec description.\n *\n * @return     mixed   On success stream_select() returns the number of\n *                     stream resources contained in the modified arrays,\n *                     which may be zero if the timeout expires before\n *                     anything interesting happens. On error FALSE is\n *                     returned and a warning raised (this can happen if\n *                     the system call is interrupted by an incoming\n *                     signal).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "read", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "write", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "except", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "vtv_sec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tv_usec", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_set_blocking", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-set-blocking.php\n * )\n *\n * Sets blocking or non-blocking mode on a stream.\n *\n * This function works for any stream that supports non-blocking mode\n * (currently, regular files and socket streams).\n *\n * @stream     resource\n *                     The stream.\n * @mode       int     If mode is 0, the given stream will be switched to\n *                     non-blocking mode, and if 1, it will be switched to\n *                     blocking mode. This affects calls like fgets() and\n *                     fread() that read from the stream. In non-blocking\n *                     mode an fgets() call will always return right away\n *                     while in blocking mode it will wait for data to\n *                     become available on the stream.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_set_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-set-timeout.php\n * )\n *\n * Sets the timeout value on stream, expressed in the sum of seconds and\n * microseconds.\n *\n * When the stream times out, the 'timed_out' key of the array returned by\n * stream_get_meta_data() is set to TRUE, although no error/warning is\n * generated.\n *\n * @stream     resource\n *                     The target stream.\n * @seconds    int     The seconds part of the timeout to be set.\n * @microseconds\n *             int     The microseconds part of the timeout to be set.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "microseconds", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_set_write_buffer", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-set-write-buffer.php )\n *\n * Sets the buffering for write operations on the given stream to buffer\n * bytes. Output using fwrite() is normally buffered at 8K. This means that\n * if there are two processes wanting to write to the same output stream (a\n * file), each is paused after 8K of data to allow the other to write.\n *\n * @stream     resource\n *                     The file pointer.\n * @buffer     int     The number of bytes to buffer. If buffer is 0 then\n *                     write operations are unbuffered. This ensures that\n *                     all writes with fwrite() are completed before other\n *                     processes are allowed to write to that output\n *                     stream.\n *\n * @return     int     Returns 0 on success, or EOF if the request cannot\n *                     be honored.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "buffer", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set_file_buffer", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.set-file-buffer.php )\n *\n *\n * @stream     resource\n *\n * @buffer     int\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "buffer", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_accept", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-accept.php )\n *\n * Accept a connection on a socket previously created by\n * stream_socket_server().\n *\n * @server_socket\n *             resource\n *                     The server socket to accept a connection from.\n * @timeout    float   Override the default socket accept timeout. Time\n *                     should be given in seconds.\n * @peername   mixed   Will be set to the name (address) of the client\n *                     which connected, if included and available from the\n *                     selected transport.\n *\n *                     Can also be determined later using\n *                     stream_socket_get_name().\n *\n * @return     mixed   Returns a stream to the accepted socket connection\n *                     or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server_socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2800, "peername", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_server", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-server.php )\n *\n * Creates a stream or datagram socket on the specified local_socket.\n *\n * This function only creates a socket, to begin accepting connections use\n * stream_socket_accept().\n *\n * @local_socket\n *             string  The type of socket created is determined by the\n *                     transport specified using standard URL formatting:\n *                     transport://target.\n *\n *                     For Internet Domain sockets (AF_INET) such as TCP\n *                     and UDP, the target portion of the remote_socket\n *                     parameter should consist of a hostname or IP address\n *                     followed by a colon and a port number. For Unix\n *                     domain sockets, the target portion should point to\n *                     the socket file on the filesystem.\n *\n *                     Depending on the environment, Unix domain sockets\n *                     may not be available. A list of available transports\n *                     can be retrieved using stream_get_transports(). See\n *                     List of Supported Socket Transports for a list of\n *                     bulitin transports.\n * @errnum     mixed   If the optional errno and errstr arguments are\n *                     present they will be set to indicate the actual\n *                     system level error that occurred in the system-level\n *                     socket(), bind(), and listen() calls. If the value\n *                     returned in errno is 0 and the function returned\n *                     FALSE, it is an indication that the error occurred\n *                     before the bind() call. This is most likely due to a\n *                     problem initializing the socket. Note that the errno\n *                     and errstr arguments will always be passed by\n *                     reference.\n * @errstr     mixed   See errno description.\n * @flags      int     A bitmask field which may be set to any combination\n *                     of socket creation flags.\n *\n *                     For UDP sockets, you must use STREAM_SERVER_BIND as\n *                     the flags parameter.\n * @context    resource\n *\n *\n * @return     mixed   Returns the created stream, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "local_socket", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "errnum", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "errstr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_client", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-client.php )\n *\n * Initiates a stream or datagram connection to the destination specified\n * by remote_socket. The type of socket created is determined by the\n * transport specified using standard URL formatting: transport://target.\n * For Internet Domain sockets (AF_INET) such as TCP and UDP, the target\n * portion of the remote_socket parameter should consist of a hostname or\n * IP address followed by a colon and a port number. For Unix domain\n * sockets, the target portion should point to the socket file on the\n * filesystem.\n *\n * The stream will by default be opened in blocking mode. You can switch\n * it to non-blocking mode by using stream_set_blocking().\n *\n * @remote_socket\n *             string  Address to the socket to connect to.\n * @errnum     mixed   Will be set to the system level error number if\n *                     connection fails.\n * @errstr     mixed   Will be set to the system level error message if the\n *                     connection fails.\n * @timeout    float   Number of seconds until the connect() system call\n *                     should timeout. This parameter only applies when not\n *                     making asynchronous connection attempts.\n *\n *                     To set a timeout for reading/writing data over the\n *                     socket, use the stream_set_timeout(), as the timeout\n *                     only applies while making connecting the socket.\n * @flags      int     Bitmask field which may be set to any combination of\n *                     connection flags. Currently the select of connection\n *                     flags is limited to STREAM_CLIENT_CONNECT (default),\n *                     STREAM_CLIENT_ASYNC_CONNECT and\n *                     STREAM_CLIENT_PERSISTENT.\n * @context    resource\n *                     A valid context resource created with\n *                     stream_context_create().\n *\n * @return     mixed   On success a stream resource is returned which may\n *                     be used together with the other file functions (such\n *                     as fgets(), fgetss(), fwrite(), fclose(), and\n *                     feof()), FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "remote_socket", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "errnum", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "errstr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_enable_crypto", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-enable-crypto.php )\n *\n *\n * @stream     resource\n *                     The stream resource.\n * @enable     bool    Enable/disable cryptography on the stream.\n * @crypto_type\n *             int     Setup encryption on the stream. Valid methods are\n *                     STREAM_CRYPTO_METHOD_SSLv2_CLIENT\n *                     STREAM_CRYPTO_METHOD_SSLv3_CLIENT\n *                     STREAM_CRYPTO_METHOD_SSLv23_CLIENT\n *                     STREAM_CRYPTO_METHOD_TLS_CLIENT\n *                     STREAM_CRYPTO_METHOD_SSLv2_SERVER\n *                     STREAM_CRYPTO_METHOD_SSLv3_SERVER\n *                     STREAM_CRYPTO_METHOD_SSLv23_SERVER\n *                     STREAM_CRYPTO_METHOD_TLS_SERVER\n * @session_stream\n *             resource\n *                     Seed the stream with settings from session_stream.\n *\n * @return     mixed   Returns TRUE on success, FALSE if negotiation has\n *                     failed or 0 if there isn't enough data and you\n *                     should try again (only for non-blocking sockets).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "enable", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "crypto_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "session_stream", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_get_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-get-name.php )\n *\n * Returns the local or remote name of a given socket connection.\n *\n * @handle     resource\n *                     The socket to get the name of.\n * @want_peer  bool    If set to TRUE the remote socket name will be\n *                     returned, if set to FALSE the local socket name will\n *                     be returned.\n *\n * @return     mixed   The name of the socket.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "want_peer", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_pair", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stream-socket-pair.php\n * )\n *\n * stream_socket_pair() creates a pair of connected, indistinguishable\n * socket streams. This function is commonly used in IPC (Inter-Process\n * Communication).\n * Please consult the Streams constant list for further details on each\n * constant.\n *\n * @domain     int     The protocol family to be used: STREAM_PF_INET,\n *                     STREAM_PF_INET6 or STREAM_PF_UNIX\n * @type       int     The type of communication to be used:\n *                     STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM,\n *                     STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM\n * @protocol   int     The protocol to be used: STREAM_IPPROTO_ICMP,\n *                     STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW,\n *                     STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP\n *\n * @return     mixed   Returns an array with the two socket resources on\n *                     success, or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "domain", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "protocol", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_recvfrom", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-recvfrom.php )\n *\n * stream_socket_recvfrom() accepts data from a remote socket up to length\n * bytes.\n *\n * @socket     resource\n *                     The remote socket.\n * @length     int     The number of bytes to receive from the socket.\n * @flags      int     The value of flags can be any combination of the\n *                     following: Possible values for flags STREAM_OOB\n *                     Process OOB (out-of-band) data. STREAM_PEEK Retrieve\n *                     data from the socket, but do not consume the buffer.\n *                     Subsequent calls to fread() or\n *                     stream_socket_recvfrom() will see the same data.\n * @address    string  If address is provided it will be populated with the\n *                     address of the remote socket.\n *\n * @return     mixed   Returns the read data, as a string\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_sendto", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-sendto.php )\n *\n * Sends the specified data through the socket.\n *\n * @socket     resource\n *                     The socket to send data to.\n * @data       string  The data to be sent.\n * @flags      int     The value of flags can be any combination of the\n *                     following: possible values for flags STREAM_OOB\n *                     Process OOB (out-of-band) data.\n * @address    string  The address specified when the socket stream was\n *                     created will be used unless an alternate address is\n *                     specified in address.\n *\n *                     If specified, it must be in dotted quad (or [ipv6])\n *                     format.\n *\n * @return     mixed   Returns a result code, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stream_socket_shutdown", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-shutdown.php )\n *\n * Shutdowns (partially or not) a full-duplex connection.\n *\n * @stream     resource\n *                     An open stream (opened with stream_socket_client(),\n *                     for example)\n * @how        int     One of the following constants: STREAM_SHUT_RD\n *                     (disable further receptions), STREAM_SHUT_WR\n *                     (disable further transmissions) or STREAM_SHUT_RDWR\n *                     (disable further receptions and transmissions).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "how", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_connect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-connect.php )\n *\n * Establishes a connection to a LDAP server on a specified hostname and\n * port.\n *\n * @hostname   string  If you are using OpenLDAP 2.x.x you can specify a\n *                     URL instead of the hostname. To use LDAP with SSL,\n *                     compile OpenLDAP 2.x.x with SSL support, configure\n *                     PHP with SSL, and set this parameter as\n *                     ldaps://hostname/.\n * @port       int     The port to connect to. Not used when using URLs.\n *\n * @return     mixed   Returns a positive LDAP link identifier on success,\n *                     or FALSE on error. When OpenLDAP 2.x.x is used,\n *                     ldap_connect() will always return a resource as it\n *                     does not actually connect but just initializes the\n *                     connecting parameters. The actual connect happens\n *                     with the next calls to ldap_* funcs, usually with\n *                     ldap_bind().\n *\n *                     If no arguments are specified then the link\n *                     identifier of the already opened link will be\n *                     returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:389;", (const char *)6, "389", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_explode_dn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-explode-dn.php )\n *\n * Splits the DN returned by ldap_get_dn() and breaks it up into its\n * component parts. Each part is known as Relative Distinguished Name, or\n * RDN.\n *\n * @dn         string  The distinguished name of an LDAP entity.\n * @with_attrib\n *             int     Used to request if the RDNs are returned with only\n *                     values or their attributes as well. To get RDNs with\n *                     the attributes (i.e. in attribute=value format) set\n *                     with_attrib to 0 and to get only values set it to 1.\n *\n * @return     mixed   Returns an array of all DN components. The first\n *                     element in this array has count key and represents\n *                     the number of returned values, next elements are\n *                     numerically indexed DN components.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "with_attrib", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_dn2ufn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-dn2ufn.php )\n *\n * Turns the specified dn, into a more user-friendly form, stripping off\n * type names.\n *\n * @db         string  The distinguished name of an LDAP entity.\n *\n * @return     mixed   Returns the user friendly name.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "db", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_err2str", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-err2str.php )\n *\n * Returns the string error message explaining the error number errno.\n * While LDAP errno numbers are standardized, different libraries return\n * different or even localized textual error messages. Never check for a\n * specific error message text, but always use an error number to check.\n *\n * @errnum     int     The error number.\n *\n * @return     string  Returns the error message, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "errnum", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-add.php )\n *\n * Add entries in the LDAP directory.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector  An array that specifies the information about the\n *                     entry. The values in the entries are indexed by\n *                     individual attributes. In case of multiple values\n *                     for an attribute, they are indexed using integers\n *                     starting with 0.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "entry", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_mod_add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-mod-add.php )\n *\n * Adds one or more attributes to the specified dn. It performs the\n * modification at the attribute level as opposed to the object level.\n * Object-level additions are done by the ldap_add() function.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "entry", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_mod_del", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-mod-del.php )\n *\n * Removes one or more attributes from the specified dn. It performs the\n * modification at the attribute level as opposed to the object level.\n * Object-level deletions are done by the ldap_delete() function.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "entry", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_mod_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-mod-replace.php )\n *\n * Replaces one or more attributes from the specified dn. It performs the\n * modification at the attribute level as opposed to the object level.\n * Object-level modifications are done by the ldap_modify() function.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "entry", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_modify", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-modify.php )\n *\n * Modify the existing entries in the LDAP directory. The structure of the\n * entry is same as in ldap_add().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "entry", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_bind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-bind.php )\n *\n * Binds to the LDAP directory with specified RDN and password.\n * If bind_rdn and bind_password are not specified, an anonymous bind is\n * attempted.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @bind_rdn   string\n * @bind_password\n *             string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bind_rdn", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "bind_password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_set_rebind_proc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-set-rebind-proc.php )\n *\n *\n * @link       resource\n *\n * @callback   mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_sort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-sort.php )\n *\n *\n * @link       resource\n *\n * @result     resource\n *\n * @sortfilter string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sortfilter", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_start_tls", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-start-tls.php )\n *\n *\n * @link       resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_unbind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-unbind.php )\n *\n * Unbinds from the LDAP directory.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_get_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-option.php )\n *\n * Sets retval to the value of the specified option.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @option     int     The parameter option can be one of: Option Type\n *                     LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer\n *                     LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT\n *                     integer LDAP_OPT_PROTOCOL_VERSION integer\n *                     LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS\n *                     bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string\n *                     LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN\n *                     string LDAP_OPT_SERVER_CONTROLS array\n *                     LDAP_OPT_CLIENT_CONTROLS array\n * @retval     mixed   This will be set to the option value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "retval", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_set_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-set-option.php )\n *\n * Sets the value of the specified option to be newval.\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @option     int\n * @newval     mixed   The new value for the specified option.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newval", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-close.php )\n *\n *\n * @link       resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_list", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-list.php )\n *\n * Performs the search for a specified filter on the directory with the\n * scope LDAP_SCOPE_ONELEVEL.\n *\n * LDAP_SCOPE_ONELEVEL means that the search should only return\n * information that is at the level immediately below the base_dn given in\n * the call. (Equivalent to typing \"ls\" and getting a list of files and\n * folders in the current working directory.)\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @base_dn    mixed   The base DN for the directory.\n * @filter     mixed\n * @attributes vector  An array of the required attributes, e.g.\n *                     array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is\n *                     always returned irrespective of which attributes\n *                     types are requested.\n *\n *                     Using this parameter is much more efficient than\n *                     the default action (which is to return all\n *                     attributes and their associated values). The use of\n *                     this parameter should therefore be considered good\n *                     practice.\n * @attrsonly  int     Should be set to 1 if only attribute types are\n *                     wanted. If set to 0 both attributes types and\n *                     attribute values are fetched which is the default\n *                     behaviour.\n * @sizelimit  int     Enables you to limit the count of entries fetched.\n *                     Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     sizelimit. You can set it lower though.\n *\n *                     Some directory server hosts will be configured to\n *                     return no more than a preset number of entries. If\n *                     this occurs, the server will indicate that it has\n *                     only returned a partial results set. This also\n *                     occurs if you use this parameter to limit the count\n *                     of fetched entries.\n * @timelimit  int     Sets the number of seconds how long is spend on the\n *                     search. Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     timelimit. You can set it lower though.\n * @deref      int     Specifies how aliases should be handled during the\n *                     search. It can be one of the following:\n *                     LDAP_DEREF_NEVER - (default) aliases are never\n *                     dereferenced. LDAP_DEREF_SEARCHING - aliases should\n *                     be dereferenced during the search but not when\n *                     locating the base object of the search.\n *                     LDAP_DEREF_FINDING - aliases should be dereferenced\n *                     when locating the base object but not during the\n *                     search. LDAP_DEREF_ALWAYS - aliases should be\n *                     dereferenced always.\n *\n * @return     mixed   Returns a search result identifier or FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "base_dn", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attributes", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "attrsonly", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "sizelimit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "timelimit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "deref", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_read", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-read.php )\n *\n * Performs the search for a specified filter on the directory with the\n * scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the\n * directory.\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @base_dn    mixed   The base DN for the directory.\n * @filter     mixed   An empty filter is not allowed. If you want to\n *                     retrieve absolutely all information for this entry,\n *                     use a filter of objectClass=*. If you know which\n *                     entry types are used on the directory server, you\n *                     might use an appropriate filter such as\n *                     objectClass=inetOrgPerson.\n * @attributes vector  An array of the required attributes, e.g.\n *                     array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is\n *                     always returned irrespective of which attributes\n *                     types are requested.\n *\n *                     Using this parameter is much more efficient than\n *                     the default action (which is to return all\n *                     attributes and their associated values). The use of\n *                     this parameter should therefore be considered good\n *                     practice.\n * @attrsonly  int     Should be set to 1 if only attribute types are\n *                     wanted. If set to 0 both attributes types and\n *                     attribute values are fetched which is the default\n *                     behaviour.\n * @sizelimit  int     Enables you to limit the count of entries fetched.\n *                     Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     sizelimit. You can set it lower though.\n *\n *                     Some directory server hosts will be configured to\n *                     return no more than a preset number of entries. If\n *                     this occurs, the server will indicate that it has\n *                     only returned a partial results set. This also\n *                     occurs if you use this parameter to limit the count\n *                     of fetched entries.\n * @timelimit  int     Sets the number of seconds how long is spend on the\n *                     search. Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     timelimit. You can set it lower though.\n * @deref      int     Specifies how aliases should be handled during the\n *                     search. It can be one of the following:\n *                     LDAP_DEREF_NEVER - (default) aliases are never\n *                     dereferenced. LDAP_DEREF_SEARCHING - aliases should\n *                     be dereferenced during the search but not when\n *                     locating the base object of the search.\n *                     LDAP_DEREF_FINDING - aliases should be dereferenced\n *                     when locating the base object but not during the\n *                     search. LDAP_DEREF_ALWAYS - aliases should be\n *                     dereferenced always.\n *\n * @return     mixed   Returns a search result identifier or FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "base_dn", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attributes", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "attrsonly", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "sizelimit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "timelimit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "deref", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_search", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-search.php )\n *\n * Performs the search for a specified filter on the directory with the\n * scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire\n * directory.\n *\n * From 4.0.5 on it's also possible to do parallel searches. To do this\n * you use an array of link identifiers, rather than a single identifier,\n * as the first argument. If you don't want the same base DN and the same\n * filter for all the searches, you can also use an array of base DNs\n * and/or an array of filters. Those arrays must be of the same size as the\n * link identifier array since the first entries of the arrays are used for\n * one search, the second entries are used for another, and so on. When\n * doing parallel searches an array of search result identifiers is\n * returned, except in case of error, then the entry corresponding to the\n * search will be FALSE. This is very much like the value normally\n * returned, except that a result identifier is always returned when a\n * search was made. There are some rare cases where the normal search\n * returns FALSE while the parallel search returns an identifier.\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @base_dn    mixed   The base DN for the directory.\n * @filter     mixed\n * @attributes vector  An array of the required attributes, e.g.\n *                     array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is\n *                     always returned irrespective of which attributes\n *                     types are requested.\n *\n *                     Using this parameter is much more efficient than\n *                     the default action (which is to return all\n *                     attributes and their associated values). The use of\n *                     this parameter should therefore be considered good\n *                     practice.\n * @attrsonly  int     Should be set to 1 if only attribute types are\n *                     wanted. If set to 0 both attributes types and\n *                     attribute values are fetched which is the default\n *                     behaviour.\n * @sizelimit  int     Enables you to limit the count of entries fetched.\n *                     Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     sizelimit. You can set it lower though.\n *\n *                     Some directory server hosts will be configured to\n *                     return no more than a preset number of entries. If\n *                     this occurs, the server will indicate that it has\n *                     only returned a partial results set. This also\n *                     occurs if you use this parameter to limit the count\n *                     of fetched entries.\n * @timelimit  int     Sets the number of seconds how long is spend on the\n *                     search. Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     timelimit. You can set it lower though.\n * @deref      int     Specifies how aliases should be handled during the\n *                     search. It can be one of the following:\n *                     LDAP_DEREF_NEVER - (default) aliases are never\n *                     dereferenced. LDAP_DEREF_SEARCHING - aliases should\n *                     be dereferenced during the search but not when\n *                     locating the base object of the search.\n *                     LDAP_DEREF_FINDING - aliases should be dereferenced\n *                     when locating the base object but not during the\n *                     search. LDAP_DEREF_ALWAYS - aliases should be\n *                     dereferenced always.\n *\n * @return     mixed   Returns a search result identifier or FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "base_dn", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attributes", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "attrsonly", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "sizelimit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "timelimit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "deref", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_rename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-rename.php )\n *\n * The entry specified by dn is renamed/moved.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @newrdn     string  The new RDN.\n * @newparent  string  The new parent/superior entry.\n * @deleteoldrdn\n *             bool    If TRUE the old RDN value(s) is removed, else the\n *                     old RDN value(s) is retained as non-distinguished\n *                     values of the entry.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newrdn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newparent", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "deleteoldrdn", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_delete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-delete.php )\n *\n * Deletes a particular entry in LDAP directory.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_compare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-compare.php )\n *\n * Compare value of attribute with value of same attribute in an LDAP\n * directory entry.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @attribute  string  The attribute name.\n * @value      string  The compared value.\n *\n * @return     mixed   Returns TRUE if value matches otherwise returns\n *                     FALSE. Returns -1 on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attribute", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_errno", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-errno.php )\n *\n * Returns the standardized error number returned by the last LDAP\n * command. This number can be converted into a textual error message using\n * ldap_err2str().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n *\n * @return     int     Return the LDAP error number of the last LDAP\n *                     command for this link.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-error.php )\n *\n * Returns the string error message explaining the error generated by the\n * last LDAP command for the given link_identifier. While LDAP errno\n * numbers are standardized, different libraries return different or even\n * localized textual error messages. Never check for a specific error\n * message text, but always use an error number to check.\n *\n * Unless you lower your warning level in your php.ini sufficiently or\n * prefix your LDAP commands with @ (at) characters to suppress warning\n * output, the errors generated will also show up in your HTML output.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n *\n * @return     string  Returns string error message.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_get_dn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-dn.php )\n *\n * Finds out the DN of an entry in the result.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns the DN of the result entry and FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_count_entries", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-count-entries.php\n * )\n *\n * Returns the number of entries stored in the result of previous search\n * operations.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result     resource\n *                     The internal LDAP result.\n *\n * @return     int     Returns number of entries in the result or FALSE on\n *                     error.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_get_entries", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-entries.php )\n *\n * Reads multiple entries from the given result, and then reading the\n * attributes and multiple values.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result     resource\n *\n *\n * @return     mixed   Returns a complete result information in a\n *                     multi-dimensional array on success and FALSE on\n *                     error.\n *\n *                     The structure of the array is as follows. The\n *                     attribute index is converted to lowercase.\n *                     (Attributes are case-insensitive for directory\n *                     servers, but not when used as array indices.)\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_first_entry", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-first-entry.php )\n *\n * Returns the entry identifier for first entry in the result. This entry\n * identifier is then supplied to ldap_next_entry() routine to get\n * successive entries from the result.\n *\n * Entries in the LDAP result are read sequentially using the\n * ldap_first_entry() and ldap_next_entry() functions.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result     resource\n *\n *\n * @return     mixed   Returns the result entry identifier for the first\n *                     entry on success and FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_next_entry", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-next-entry.php )\n *\n * Retrieve the entries stored in the result. Successive calls to the\n * ldap_next_entry() return entries one by one till there are no more\n * entries. The first call to ldap_next_entry() is made after the call to\n * ldap_first_entry() with the result_entry_identifier as returned from the\n * ldap_first_entry().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns entry identifier for the next entry in the\n *                     result whose entries are being read starting with\n *                     ldap_first_entry(). If there are no more entries in\n *                     the result then it returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_get_attributes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-attributes.php\n * )\n *\n * Reads attributes and values from an entry in the search result.\n *\n * Having located a specific entry in the directory, you can find out what\n * information is held for that entry by using this call. You would use\n * this call for an application which \"browses\" directory entries and/or\n * where you do not know the structure of the directory entries. In many\n * applications you will be searching for a specific attribute such as an\n * email address or a surname, and won't care what other data is held.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     vector  Returns a complete entry information in a\n *                     multi-dimensional array on success and FALSE on\n *                     error.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_first_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-first-attribute.php )\n *\n * Gets the first attribute in the given entry. Remaining attributes are\n * retrieved by calling ldap_next_attribute() successively.\n *\n * Similar to reading entries, attributes are also read one by one from a\n * particular entry.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns the first attribute in the entry on success\n *                     and FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_next_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-next-attribute.php\n * )\n *\n * Retrieves the attributes in an entry. The first call to\n * ldap_next_attribute() is made with the result_entry_identifier returned\n * from ldap_first_attribute().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns the next attribute in an entry on success\n *                     and FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_first_reference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-first-reference.php )\n *\n *\n * @link       resource\n *\n * @result     resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_next_reference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-next-reference.php\n * )\n *\n *\n * @link       resource\n *\n * @result_entry\n *             resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_parse_reference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-parse-reference.php )\n *\n *\n * @link       resource\n *\n * @result_entry\n *             resource\n *\n * @referrals  mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "referrals", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_parse_result", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-parse-result.php )\n *\n *\n * @link       resource\n *\n * @result     resource\n *\n * @errcode    mixed\n * @matcheddn  mixed\n * @errmsg     mixed\n * @referrals  mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "errcode", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "matcheddn", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "errmsg", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "referrals", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_free_result", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-free-result.php )\n *\n * Frees up the memory allocated internally to store the result. All\n * result memory will be automatically freed when the script terminates.\n *\n * Typically all the memory allocated for the LDAP result gets freed at\n * the end of the script. In case the script is making successive searches\n * which return large result sets, ldap_free_result() could be called to\n * keep the runtime memory usage by the script low.\n *\n * @result     resource\n *\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "result", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_get_values_len", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-values-len.php\n * )\n *\n * Reads all the values of the attribute in the entry in the result.\n *\n * This function is used exactly like ldap_get_values() except that it\n * handles binary data and not string data.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n * @attribute  string\n *\n * @return     mixed   Returns an array of values for the attribute on\n *                     success and FALSE on error. Individual values are\n *                     accessed by integer index in the array. The first\n *                     index is 0. The number of values can be found by\n *                     indexing \"count\" in the resultant array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attribute", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ldap_get_values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-values.php )\n *\n * Reads all the values of the attribute in the entry in the result.\n *\n * This call needs a result_entry_identifier, so needs to be preceded by\n * one of the ldap search calls and one of the calls to get an individual\n * entry.\n *\n * You application will either be hard coded to look for certain\n * attributes (such as \"surname\" or \"mail\") or you will have to use the\n * ldap_get_attributes() call to work out what attributes exist for a given\n * entry.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n * @attribute  string\n *\n * @return     mixed   Returns an array of values for the attribute on\n *                     success and FALSE on error. The number of values can\n *                     be found by indexing \"count\" in the resultant array.\n *                     Individual values are accessed by integer index in\n *                     the array. The first index is 0.\n *\n *                     LDAP allows more than one entry for an attribute,\n *                     so it can, for example, store a number of email\n *                     addresses for one person's directory entry all\n *                     labeled with the attribute \"mail\"\n *                     return_value[\"count\"] = number of values for\n *                     attribute return_value[0] = first value of attribute\n *                     return_value[i] = ith value of attribute\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_entry", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attribute", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_thrift_serialize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Same as fb_serialize(). Please use fb_serialize() with better naming.\n * This function has nothing to do with Facebook's open sourced Thrift\n * package.\n *\n * @thing      mixed   What to serialize. Note that objects are not\n *                     supported.\n *\n * @return     mixed   Serialized data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "thing", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_thrift_unserialize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Same as fb_unserialize(). Please use fb_unserialize() with better\n * naming. This function has nothing to do with Facebook's open sourced\n * Thrift package.\n *\n * @thing      mixed   What to unserialize.\n * @success    mixed   Whether it was successful or not.\n * @errcode    mixed   One of those FB_UNSERIALIZE_ constants to describe\n *                     what the decoding error was, if it failed.\n *\n * @return     mixed   Unserialized data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "thing", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "success", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "errcode", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_serialize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Seriailize data into a compact format that can be unserialized by\n * fb_unserialize().\n *\n * @thing      mixed   What to serialize. Note that objects are not\n *                     supported.\n *\n * @return     mixed   Serialized data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "thing", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_unserialize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Unserialize a previously fb_thrift_serialize()-ed data.\n *\n * @thing      mixed   What to unserialize.\n * @success    mixed   Whether it was successful or not.\n * @errcode    mixed   One of those FB_UNSERIALIZE_ constants to describe\n *                     what the decoding error was, if it failed.\n *\n * @return     mixed   Unserialized data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "thing", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "success", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "errcode", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_compact_serialize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Serialize data into a compact format that can be unserialized by\n * fb_compact_unserialize(). In general produces smaller output compared to\n * fb_serialize(). Largest savings are on arrays with sequential (or almost\n * sequential) indexes, i.e. simple arrays like array($a, $b, $c). NOTE:\n * unlike serialize(), does not preserve internal references, i.e.\n * array(&$a, &$a) will become array($a, $a).\n *\n * @thing      mixed   What to serialize. Note that objects are not\n *                     supported.\n *\n * @return     mixed   Serialized data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "thing", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_compact_unserialize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Unserialize a previously fb_compact_serialize()-ed data.\n *\n * @thing      mixed   What to unserialize.\n * @success    mixed   Whether it was successful or not.\n * @errcode    mixed   One of those FB_UNSERIALIZE_ constants to describe\n *                     what the decoding error was, if it failed.\n *\n * @return     mixed   Unserialized data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "thing", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "success", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "errcode", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_could_include", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns whether the (php) file could be included (eg if its been\n * compiled into the binary)\n *\n * @file       string  The file to test\n *\n * @return     bool    TRUE if it could be included\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_intercept", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Invokes a user handler upon calling a function or a class method. If\n * this handler returns FALSE, code will continue with original function.\n * Otherwise, it will return what handler tells. The handler function looks\n * like \"intercept_handler($name, $obj, $params, $data, &$done)\", where\n * $name is orginal function's name, $obj is $this for an instance method\n * call or null for static method call or function calls, and $params are\n * original call's parameters. $data is what's passed to fb_intercept() and\n * set $done to false to indicate function should continue its execution\n * with old function as if interception did not happen. By default $done is\n * true so it will return handler's return immediately without executing\n * old function's code. Note that built-in functions are not interceptable.\n *\n * @name       string  The function or class method name to intercept. Use\n *                     \"class::method\" for method name. If empty, all\n *                     functions will be intercepted by the specified\n *                     handler and registered individual handlers will be\n *                     replaced. To make sure individual handlers not\n *                     affected by such a call, call fb_intercept() with\n *                     individual names afterwards.\n * @handler    mixed   Callback to handle the interception. Use null, false\n *                     or empty string to unregister a previously\n *                     registered handler. If name is empty, all previously\n *                     registered handlers, including those that are set by\n *                     individual function names, will be removed.\n * @data       mixed   Extra data to pass to the handler when intercepting\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_stubout_intercept_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * As an interception handler, invokes a different function instead.\n * Useful for stubbing out a function in unit testing. To use this handler,\n * call fb_intercept('old_func', 'fb_stubout_intercept_handler',\n * 'new_func') and this will call new_func() every time when old_func() is\n * called and return new_func()'s return as old_func() call's return.\n *\n * @name       string  Which function function or class method that is\n *                     being intercepted.\n * @obj        mixed   Which class object this method was calling on.\n * @params     vector  The parameters original function took.\n * @data       mixed   The callback to redirect to.\n * @done       mixed   Will always set to TRUE.\n *\n * @return     mixed   What to return on behalf of original function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "done", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_rpc_intercept_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * As an interception handler, invokes a function remotely on an RPC\n * server instead of locally.\n *\n * @name       string  Which function function or class method that is\n *                     being intercepted.\n * @obj        mixed   Which class object this method was calling on.\n * @params     vector  The parameters original function took.\n * @data       mixed   Information for RPC request in a format of\n *                     array('host' => address, 'port' => port, 'auth' =>\n *                     password, 'timeout' => seconds).\n * @done       mixed   Will always set to TRUE.\n *\n * @return     mixed   What to return on behalf of original function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "done", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_renamed_functions", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Specifies a list of functions that are allowed to rename by calling\n * fb_rename_function().\n *\n * @names      vector  The functions that can be renamed.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "names", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_rename_function", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Rename a function, so that a function can be called with the new name.\n *\n * When writing unit tests, one may want to stub out a function. To do so,\n * call fb_rename_function('func_to_stub_out', 'somename') then\n * fb_rename_function('new_func_to_replace_with', 'func_to_stub_out'). This\n * way, when calling func_to_stub_out(), it will actually execute\n * new_func_to_replace_with().\n *\n * @orig_func_name\n *             string  Which function to rename.\n * @new_func_name\n *             string  What is the new name.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "orig_func_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "new_func_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_autoload_map", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Specify a map containing an array with four optional elements. 'class',\n * 'function', 'constant', and 'failure'. The first three entries are maps\n * from names to the file where that entity is defined. An attempt to\n * access an undefined class/function/constant will look it up in the\n * appropriate map, and if found, include that file. If the entity is still\n * not defined, it will call the 'failure' entry.\n *\n * @map        mixed   The autoload map.\n * @root       string  Root to be prepended to all paths in the map.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "map", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "root", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_utf8ize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sanitize a string to make sure it's legal UTF-8 by stripping off any\n * characters that are not properly encoded.\n *\n * @input      mixed   What string to sanitize.\n *\n * @return     bool    Sanitized string.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_utf8_strlen_deprecated", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Count the number of UTF-8 code points in string or byte count if it's\n * not valid UTF-8.\n *\n * @input      string  The string.\n *\n * @return     int     Returns the count of code points if valid UTF-8 else\n *                     byte count.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_utf8_strlen", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Count the number of UTF-8 code points in string, substituting U+FFFD\n * for invalid sequences.\n *\n * @input      string  The string.\n *\n * @return     int     Returns the number of code points interpreting\n *                     string as UTF-8.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_utf8_substr", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Cuts a portion of str specified by the start and length parameters.\n *\n * @str        string  The original string.\n * @start      int     If start is non-negative, fb_utf8_substr() cuts the\n *                     portion out of str beginning at start'th character,\n *                     counting from zero.\n *\n *                     If start is negative, fb_utf8_substr() cuts out the\n *                     portion beginning at the position, start characters\n *                     away from the end of str.\n * @length     int     If length is given and is positive, the return value\n *                     will contain at most length characters of the\n *                     portion that begins at start (depending on the\n *                     length of string).\n *\n *                     If negative length is passed, fb_utf8_substr() cuts\n *                     the portion out of str from the start'th character\n *                     up to the character that is length characters away\n *                     from the end of the string. In case start is also\n *                     negative, the start position is calculated\n *                     beforehand according to the rule explained above.\n *\n * @return     mixed   Returns the portion of str specified by the start\n *                     and length parameters.\n *\n *                     If str is shorter than start characters long, FALSE\n *                     will be returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x16836040, "fb_call_user_func_safe", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * This function invokes $function with the arguments specified in its\n * parameter list. It returns an array of two elements, the first being a\n * boolean specifying whether or not the function was invoked, the latter\n * being the return value, or null if it was not invoked. The function may\n * be any PHP callable, either a string function name, an array of object\n * instance and method, or array of classname and static class method.\n *\n * @function   mixed   The callback to invoke.\n *\n * @return     vector  Two elements, 0 is a bool whether function was\n *                     invoked, 1 is the return value if invoked.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x16836040, "fb_call_user_func_safe_return", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * This function invokes $function with the arguments specified in its\n * parameter\n * list. If the function is not defined, $default_rval is returned. Note\n * that\n * the default return value comes BEFORE the arguments to the function.\n *\n * @function   mixed   The callback to invoke.\n * @def        mixed   Value returned when function does not exist.\n *\n * @return     mixed   The result of the function call if defined,\n *                     otherwise default.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "def", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x16816040, "fb_call_user_func_array_safe", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * This function invokes $function with the arguments specified in its\n * parameter list. It returns an array of two elements, the first being a\n * boolean specifying whether or not the function was invoked, the latter\n * being the return value, or null if it was not invoked. The function may\n * be any PHP callable, either a string function name, an array of object\n * instance and method, or array of classname and static class method.\n *\n * @function   mixed   The callback to invoke.\n * @params     vector  The function parameters to invoke with.\n *\n * @return     vector  Two elements, 0 is a bool whether function was\n *                     invoked, 1 is the return value if invoked.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_get_code_coverage", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns code coverage data collected so far. Turn on code coverage by\n * Eval.RecordCodeCoverage or by using fb_enable_code_coverage and call\n * this function periodically to get results. Eval.CodeCoverageOutputFile\n * allows you to specify an output file to store results at end of a script\n * run from command line. Use this function in server mode to collect\n * results instead.\n *\n * @flush      bool    Whether to clear data after this function call.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "flush", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_enable_code_coverage", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Enables code coverage. The coverage information is cleared.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_disable_code_coverage", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Disables and returns code coverage. The coverage information is\n * cleared.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_enable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Starts xhprof profiling. For details on how to use this function,\n * please refer to http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n * @flags      int     One of those XHPROF_FLAGS_ constant to specify what\n *                     to profile.\n * @args       vector  Extra argument to reserve for future use.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_disable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Ends and reports xhprof profiling result. For details on how to use\n * this function, please refer to\n * http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n * @return     mixed   Profile result.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_network_enable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Starts xhprof network I/O profiling.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_network_disable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Ends and reports xhprof network I/O profiling result.\n *\n * @return     mixed   Profile result.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "xhprof_frame_begin", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Starts an artificial frame. Together with xhprof_frame_end(), this\n * times one block of code execution as if it were a function call,\n * allowing people to define arbitrary function boundaries. Prefer to use\n * XhprofFrame classobjects instead of calling this function directly.\n *\n * @name       string  The \"virtual\" function's name.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "xhprof_frame_end", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Ends an artificial frame that xhprof_frame_begin() started. One has to\n * make sure there are no exceptions in between these two calls, as\n * otherwise, it may report incorrect timings. Also, xhprof_frame_begin()\n * and xhprof_frame_end() have to be paired up really well, so not to\n * interfere with regular function's profiling, unless that's the\n * intention. Prefer to use XhprofFrame classobjects instead of calling\n * this function directly.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_run_trace", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Re-runs a prior trace and generates xhprof output.\n *\n * @packedTrace\n *             string  A packed trace returned from xhprof_disable.\n * @flags      int     One of those XHPROF_FLAGS_ constant to specify what\n *                     to profile.\n *\n * @return     mixed   Profile result.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "packedTrace", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_sample_enable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Starts sampling based xhprof profiling. For details on how to use this\n * function, please refer to\n * http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xhprof_sample_disable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Ends sampling based xhprof profiling. For details on how to use this\n * function, please refer to\n * http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_load_local_databases", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Load a map from database IDs (32-bit integers) to database connection\n * information for fb_crossall_query(), which only takes database IDs.\n *\n * @servers    map     The map to load. The format is array($id1 =>\n *                     array('ip' => {ip address}, 'db' => {database name},\n *                     'port' => {port number}, 'username' => {user name\n *                     for login}, 'password' => {password for login}),\n *                     $id2 => ...), where $id1 and $ids2 are arbitrary\n *                     32-bit integers that fb_crossall_query() can use to\n *                     refer to the physical databases.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "servers", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_parallel_query", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Runs MySQL queries in parallel. Internally it will spawn threads, each\n * of which executes one or more queries sequentially.\n *\n * @sql_map    map     The map to locate databases to query. The format is\n *                     array($id1 => array('sql' => { SQL query to\n *                     execute}, 'ip' => {ip address}, 'db' => {database\n *                     name}, 'port' => {port number}, 'username' => {user\n *                     name for login}, 'password' => {password for\n *                     login}), $id2 => ...), where $id1 and $ids2 are\n *                     arbitrary 32-bit integers that fb_crossall_query()\n *                     can use to refer to the physical databases.\n * @max_thread int     Maximum number of threads to run.\n * @combine_result\n *             bool    Whether to merge dataset into just one, without maps\n *                     of database IDs. If TRUE, result set would be\n *                     array(..., 'result' => {dataset}, ...) directly.\n * @retry_query_on_fail\n *             bool    Whether or not retry query once when it fails. This\n *                     may be useful if database connection is temporarily\n *                     lost during queries and re-executing a SELECT or\n *                     other idempotent queries are acceptable.\n * @connect_timeout\n *             int     Connection timeout. If timeout_in_ms is TRUE, it is\n *                     in seconds. Otherwise, it is in milli-seconds.\n * @read_timeout\n *             int     Query timeout. If timeout_in_ms is TRUE, it is in\n *                     seconds. Otherwise, it is in milli-seconds.\n * @timeout_in_ms\n *             bool    Whether connect_timeout or read_timeout are in\n *                     seconds or milli-seconds.\n *\n * @return     map     Query result in a format of array('affected' =>\n *                     {number of affected rows}, 'result' => array({dbId1}\n *                     => {dataset}, {dbId2} => ...), 'error' =>\n *                     array({dbId1} => {error message}, {dbId2} => ....),\n *                     'errno' => array({dbId1} => {error code}, {dbId2} =>\n *                     ....)).\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "sql_map", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_thread", "", (const char *)0xa /* KindOfInt64 */, "i:50;", (const char *)5, "50", (const char *)2, NULL,
  (const char *)0x2000, "combine_result", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "retry_query_on_fail", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "connect_timeout", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "read_timeout", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "timeout_in_ms", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_crossall_query", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Runs a MySQL query against all databases in the map loaded by\n * fb_load_local_databases(). Internally it will spawn threads, each of\n * which executes the same query against one or more databases\n * sequentially.\n *\n * @sql        string  The SQL query to execute. For safety reasons, this\n *                     has to be a SELECT statement with WHERE clause.\n * @max_thread int     Maximum number of threads to run.\n * @retry_query_on_fail\n *             bool    Whether or not retry query once when it fails. This\n *                     may be useful if database connection is temporarily\n *                     lost during queries and re-executing a SELECT or\n *                     other idempotent queries are acceptable.\n * @connect_timeout\n *             int     Connection timeout. If timeout_in_ms is TRUE, it is\n *                     in seconds. Otherwise, it is in milli-seconds.\n * @read_timeout\n *             int     Query timeout. If timeout_in_ms is TRUE, it is in\n *                     seconds. Otherwise, it is in milli-seconds.\n * @timeout_in_ms\n *             bool    Whether connect_timeout or read_timeout are in\n *                     seconds or milli-seconds.\n *\n * @return     map     Query result in a format of array('affected' =>\n *                     {number of affected rows}, 'result' => array({dbId1}\n *                     => {dataset}, {dbId2} => ...), 'error' =>\n *                     array({dbId1} => {error message}, {dbId2} => ....),\n *                     'errno' => array({dbId1} => {error code}, {dbId2} =>\n *                     ....)).\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_thread", "", (const char *)0xa /* KindOfInt64 */, "i:50;", (const char *)5, "50", (const char *)2, NULL,
  (const char *)0x2000, "retry_query_on_fail", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "connect_timeout", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "read_timeout", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "timeout_in_ms", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_const_fetch", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Fetches a constant string from a special store that's compiled into the\n * executable. This is faster than apc_fetch(), which needs locking between\n * different threads. This store is immutable and loaded once with strings\n * that are never changed. Therefore, no locking is needed when accessed by\n * different threads.\n *\n * @key        mixed   The key for locating the value.\n *\n * @return     mixed   The value that was stored.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_output_compression", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Toggles the compression status of HipHop output, if headers have\n * already been sent this may be ignored.\n *\n * @new_value  bool    The new value for the compression state.\n *\n * @return     bool    The old value.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "new_value", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_set_exit_callback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set a callback function that is called when php tries to exit.\n *\n * @function   mixed   The callback to invoke. An exception object will be\n *                     passed to the function\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_get_flush_stat", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Get stats on flushing the data from server.\n *\n * @return     map     Query result in a format of array('total' => {number\n *                     of total bytes to flush}, 'sent' => {number of bytes\n *                     sent out}, 'time' => {time for flushing in us}).\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_get_last_flush_size", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Get stats on flushing the last data chunk from server.\n *\n * @return     int     Total number of bytes flushed since last flush\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fb_lazy_stat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fb-lazy-stat.php )\n *\n * Gathers the statistics of the file named by filename, like stat(),\n * except uses cached information from an internal inotify-based mechanism\n * that may not be updated during the duration of a request.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Same format at the normal php stat() function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fb_lazy_lstat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fb-lazy-lstat.php )\n *\n * Gathers the statistics of the file named by filename, like lstat(),\n * except uses cached information from an internal inotify-based mechanism\n * that may not be updated during the duration of a request.\n *\n * @filename   string  Path to a file or a symbolic link.\n *\n * @return     mixed   Same format as the normal php lstat() function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fb_lazy_realpath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fb-lazy-realpath.php )\n *\n * Returns a canonicalized version of the input path that contains no\n * symbolic links, like realpath(), except uses cached information from an\n * internal inotify-based mechanism that may not be updated during the\n * duration of a request.\n *\n * @filename   string  Fake path to the file.\n *\n * @return     string  Real path of the file.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_setprofile", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set a callback function to be called whenever a function is entered or\n * exited. Takes 3 args, the function name, the mode (enter or exit), and\n * an array describing the frame.\n *\n * @callback   mixed   Profiler function to call or null to disable\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_gc_collect_cycles", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Invoke the backup cycle collector\n *\n * @return     string  Some interesting statistics\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "fb_gc_detect_cycles", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Detect cyclic garbage in the heap and print information about it to a\n * file\n *\n * @filename   string  filename to write information about cyclic garbage\n *                     to\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_connect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-connect.php )\n *\n * Memcache::connect() establishes a connection to the memcached server.\n * The connection, which was opened using Memcache::connect() will be\n * automatically closed at the end of script execution. Also you can close\n * it with Memcache::close(). Also you can use memcache_connect() function.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections. This parameter may also specify other\n *                     transports like unix:///path/to/memcached.sock to\n *                     use UNIX domain sockets, in this case port must also\n *                     be set to 0.\n * @port       int     Point to the port where memcached is listening for\n *                     connections. Set this parameter to 0 when using UNIX\n *                     domain sockets.\n * @timeout    int     Value in seconds which will be used for connecting\n *                     to the daemon. Think twice before changing the\n *                     default value of 1 second - you can lose all the\n *                     advantages of caching if your connection is too\n *                     slow.\n * @timeoutms  int\n *\n * @return     object  Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_pconnect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-pconnect.php )\n *\n * Memcache::pconnect() is similar to Memcache::connect() with the\n * difference, that the connection it establishes is persistent. This\n * connection is not closed after the end of script execution and by\n * Memcache::close() function. Also you can use memcache_pconnect()\n * function.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections. This parameter may also specify other\n *                     transports like unix:///path/to/memcached.sock to\n *                     use UNIX domain sockets, in this case port must also\n *                     be set to 0.\n * @port       int     Point to the port where memcached is listening for\n *                     connections. Set this parameter to 0 when using UNIX\n *                     domain sockets.\n * @timeout    int     Value in seconds which will be used for connecting\n *                     to the daemon. Think twice before changing the\n *                     default value of 1 second - you can lose all the\n *                     advantages of caching if your connection is too\n *                     slow.\n * @timeoutms  int\n *\n * @return     object  Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-add.php )\n *\n * Memcache::add() stores variable var with key only if such key doesn't\n * exist at the server yet. Also you can use memcache_add() function.\n *\n * @memcache   object  The key that will be associated with the item.\n * @key        string  The variable to store. Strings and integers are\n *                     stored as is, other types are stored serialized.\n * @var        mixed   Use MEMCACHE_COMPRESSED to store the item compressed\n *                     (uses zlib).\n * @flag       int     Expiration time of the item. If it's equal to zero,\n *                     the item will never expire. You can also use Unix\n *                     timestamp or a number of seconds starting from\n *                     current time, but in the latter case the number of\n *                     seconds may not exceed 2592000 (30 days).\n * @expire     int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Returns\n *                     FALSE if such key already exist. For the rest\n *                     Memcache::add() behaves similarly to\n *                     Memcache::set().\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-set.php )\n *\n * Memcache::set() stores an item var with key on the memcached server.\n * Parameter expire is expiration time in seconds. If it's 0, the item\n * never expires (but memcached server doesn't guarantee this item to be\n * stored all the time, it could be deleted from the cache to make place\n * for other items). You can use MEMCACHE_COMPRESSED constant as flag value\n * if you want to use on-the-fly compression (uses zlib).\n *\n * Remember that resource variables (i.e. file and connection descriptors)\n * cannot be stored in the cache, because they cannot be adequately\n * represented in serialized state. Also you can use memcache_set()\n * function.\n *\n * @memcache   object  The key that will be associated with the item.\n * @key        string  The variable to store. Strings and integers are\n *                     stored as is, other types are stored serialized.\n * @var        mixed   Use MEMCACHE_COMPRESSED to store the item compressed\n *                     (uses zlib).\n * @flag       int     Expiration time of the item. If it's equal to zero,\n *                     the item will never expire. You can also use Unix\n *                     timestamp or a number of seconds starting from\n *                     current time, but in the latter case the number of\n *                     seconds may not exceed 2592000 (30 days).\n * @expire     int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-replace.php )\n *\n * Memcache::replace() should be used to replace value of existing item\n * with key. In case if item with such key doesn't exists,\n * Memcache::replace() returns FALSE. For the rest Memcache::replace()\n * behaves similarly to Memcache::set(). Also you can use\n * memcache_replace() function.\n *\n * @memcache   object  The key that will be associated with the item.\n * @key        string  The variable to store. Strings and integers are\n *                     stored as is, other types are stored serialized.\n * @var        mixed   Use MEMCACHE_COMPRESSED to store the item compressed\n *                     (uses zlib).\n * @flag       int     Expiration time of the item. If it's equal to zero,\n *                     the item will never expire. You can also use Unix\n *                     timestamp or a number of seconds starting from\n *                     current time, but in the latter case the number of\n *                     seconds may not exceed 2592000 (30 days).\n * @expire     int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-get.php )\n *\n * Memcache::get() returns previously stored data if an item with such key\n * exists on the server at this moment.\n *\n * You can pass array of keys to Memcache::get() to get array of values.\n * The result array will contain only found key-value pairs.\n *\n * @memcache   object  The key or array of keys to fetch.\n * @key        mixed   If present, flags fetched along with the values will\n *                     be written to this parameter. These flags are the\n *                     same as the ones given to for example\n *                     Memcache::set(). The lowest byte of the int is\n *                     reserved for pecl/memcache internal usage (e.g. to\n *                     indicate compression and serialization status).\n * @flags      mixed\n *\n * @return     mixed   Returns the string associated with the key or FALSE\n *                     on failure or if such key was not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "flags", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_delete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-delete.php )\n *\n * Memcache::delete() deletes item with the key. If parameter timeout is\n * specified, the item will expire after timeout seconds. Also you can use\n * memcache_delete() function.\n *\n * @memcache   object  The key associated with the item to delete.\n * @key        string  Execution time of the item. If it's equal to zero,\n *                     the item will be deleted right away whereas if you\n *                     set it to 30, the item will be deleted in 30\n *                     seconds.\n * @expire     int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_increment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-increment.php\n * )\n *\n * Memcache::increment() increments value of an item by the specified\n * value. If item specified by key was not numeric and cannot be converted\n * to a number, it will change its value to value. Memcache::increment()\n * does not create an item if it doesn't already exist.\n *\n * Do not use Memcache::increment() with items that have been stored\n * compressed because subsequent calls to Memcache::get() will fail. Also\n * you can use memcache_increment() function.\n *\n * @memcache   object  Key of the item to increment.\n * @key        string  Increment the item by value.\n * @offset     int\n *\n * @return     int     Returns new items value on success or FALSE on\n *                     failure.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_decrement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-decrement.php\n * )\n *\n * Memcache::decrement() decrements value of the item by value. Similarly\n * to Memcache::increment(), current value of the item is being converted\n * to numerical and after that value is substracted.\n *\n * New item's value will not be less than zero.\n *\n * Do not use Memcache::decrement() with item, which was stored\n * compressed, because consequent call to Memcache::get() will fail.\n * Memcache::decrement() does not create an item if it didn't exist. Also\n * you can use memcache_decrement() function.\n *\n * @memcache   object  Key of the item do decrement.\n * @key        string  Decrement the item by value.\n * @offset     int\n *\n * @return     int     Returns item's new value on success or FALSE on\n *                     failure.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-close.php )\n *\n * Memcache::close() closes connection to memcached server. This function\n * doesn't close persistent connections, which are closed only during\n * web-server shutdown/restart. Also you can use memcache_close() function.\n *\n * @memcache   object\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_debug", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-debug.php )\n *\n * memcache_debug() turns on debug output if parameter on_off is equal to\n * TRUE and turns off if it's FALSE.\n *\n * memcache_debug() is accessible only if PHP was built with\n * --enable-debug option and always returns TRUE in this case. Otherwise,\n * this function has no effect and always returns FALSE.\n *\n * @onoff      bool    Turns debug output on if equals to TRUE. Turns debug\n *                     output off if equals to FALSE.\n *\n * @return     bool    Returns TRUE if PHP was built with --enable-debug\n *                     option, otherwise returns FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "onoff", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_get_version", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memcache-get-version.php )\n *\n *\n * @memcache   object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-flush.php )\n *\n * Memcache::flush() immediately invalidates all existing items.\n * Memcache::flush() doesn't actually free any resources, it only marks all\n * the items as expired, so occupied memory will be overwritten by new\n * items. Also you can use memcache_flush() function.\n *\n * @memcache   object\n * @timestamp  int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_setoptimeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memcache-setoptimeout.php )\n *\n *\n * @memcache   object\n * @timeoutms  int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_get_server_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memcache-get-server-status.php )\n *\n *\n * @memcache   object\n * @host       string\n * @port       int\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_set_compress_threshold", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memcache-set-compress-threshold.php )\n *\n *\n * @memcache   object\n * @threshold  int\n * @min_savings\n *             float\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "min_savings", "", (const char *)0xb /* KindOfDouble */, "d:0.2;", (const char *)6, "0.2", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_get_stats", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-get-stats.php\n * )\n *\n *\n * @memcache   object\n * @type       string\n * @slabid     int\n * @limit      int\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "slabid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:100;", (const char *)6, "100", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_get_extended_stats", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memcache-get-extended-stats.php )\n *\n *\n * @memcache   object\n * @type       string\n * @slabid     int\n * @limit      int\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "slabid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:100;", (const char *)6, "100", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_set_server_params", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memcache-set-server-params.php )\n *\n *\n * @memcache   object\n * @host       string\n * @port       int\n * @timeout    int\n * @retry_interval\n *             int\n * @status     bool\n * @failure_callback\n *             mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:11211;", (const char *)8, "11211", (const char *)5, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "retry_interval", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "status", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "failure_callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memcache_add_server", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memcache-add-server.php\n * )\n *\n *\n * @memcache   object\n * @host       string\n * @port       int\n * @persistent bool\n * @weight     int\n * @timeout    int\n * @retry_interval\n *             int\n * @status     bool\n * @failure_callback\n *             mixed\n * @timeoutms  int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "memcache", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:11211;", (const char *)8, "11211", (const char *)5, NULL,
  (const char *)0x2000, "persistent", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "weight", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "retry_interval", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "status", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "failure_callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_mime_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-mime-encode.php )\n *\n * Composes and returns a string that represents a valid MIME header\n * field, which looks like the following: Subject:\n * =\?ISO-8859-1\?Q\?Pr=FCfung_f=FCr\?= Entwerfen von einer MIME kopfzeile In\n * the above example, \"Subject\" is the field name and the portion that\n * begins with \"=\?ISO-8859-1\?...\" is the field value.\n *\n * @field_name string  The field name.\n * @field_value\n *             string  The field value.\n * @preferences\n *             mixed\n *\n * @return     mixed   Returns an encoded MIME field on success, or FALSE\n *                     if an error occurs during the encoding.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "field_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field_value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "preferences", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_mime_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-mime-decode.php )\n *\n * Decodes a MIME header field.\n *\n * @encoded_string\n *             string  The encoded header, as a string.\n * @mode       int\n * @charset    string  The optional charset parameter specifies the\n *                     character set to represent the result by. If\n *                     omitted, iconv.internal_encoding will be used.\n *\n * @return     mixed   Returns a decoded MIME field on success, or FALSE if\n *                     an error occurs during the decoding.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoded_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_mime_decode_headers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.iconv-mime-decode-headers.php )\n *\n * Decodes multiple MIME header fields at once.\n *\n * @encoded_headers\n *             string  The encoded headers, as a string.\n * @mode       int\n * @charset    string  The optional charset parameter specifies the\n *                     character set to represent the result by. If\n *                     omitted, iconv.internal_encoding will be used.\n *\n * @return     mixed   Returns an associative array that holds a whole set\n *                     of MIME header fields specified by encoded_headers\n *                     on success, or FALSE if an error occurs during the\n *                     decoding.\n *\n *                     Each key of the return value represents an\n *                     individual field name and the corresponding element\n *                     represents a field value. If more than one field of\n *                     the same name are present,\n *                     iconv_mime_decode_headers() automatically\n *                     incorporates them into a numerically indexed array\n *                     in the order of occurrence.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoded_headers", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_get_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-get-encoding.php\n * )\n *\n * Retrieve internal configuration variables of iconv extension.\n *\n * @type       string  The value of the optional type can be: all\n *                     input_encoding output_encoding internal_encoding\n *\n * @return     mixed   Returns the current value of the internal\n *                     configuration variable if successful or FALSE on\n *                     failure.\n *\n *                     If type is omitted or set to \"all\",\n *                     iconv_get_encoding() returns an array that stores\n *                     all these variables.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "s:3:\"all\";", (const char *)10, "\"all\"", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_set_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-set-encoding.php\n * )\n *\n * Changes the value of the internal configuration variable specified by\n * type to charset.\n *\n * @type       string  The value of type can be any one of those:\n *                     input_encoding output_encoding internal_encoding\n * @charset    string  The character set.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv.php )\n *\n * Performs a character set conversion on the string str from in_charset\n * to out_charset.\n *\n * @in_charset string  The input charset.\n * @out_charset\n *             string  The output charset.\n *\n *                     If you append the string //TRANSLIT to out_charset\n *                     transliteration is activated. This means that when a\n *                     character can't be represented in the target\n *                     charset, it can be approximated through one or\n *                     several similarly looking characters. If you append\n *                     the string //IGNORE, characters that cannot be\n *                     represented in the target charset are silently\n *                     discarded. Otherwise, str is cut from the first\n *                     illegal character and an E_NOTICE is generated.\n * @str        string  The string to be converted.\n *\n * @return     mixed   Returns the converted string or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "in_charset", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "out_charset", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_strlen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-strlen.php )\n *\n * In contrast to strlen(), iconv_strlen() counts the occurrences of\n * characters in the given byte sequence str on the basis of the specified\n * character set, the result of which is not necessarily identical to the\n * length of the string in byte.\n *\n * @str        string  The string.\n * @charset    string  If charset parameter is omitted, str is assumed to\n *                     be encoded in iconv.internal_encoding.\n *\n * @return     mixed   Returns the character count of str, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_strpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-strpos.php )\n *\n * Finds position of first occurrence of a needle within a haystack.\n *\n * In contrast to strpos(), the return value of iconv_strpos() is the\n * number of characters that appear before the needle, rather than the\n * offset in bytes to the position where the needle has been found. The\n * characters are counted on the basis of the specified character set\n * charset.\n * If haystack or needle is not a string, it is converted to a string and\n * applied as the ordinal value of a character.\n *\n * @haystack   string  The entire string.\n * @needle     string  The searched substring.\n * @offset     int     The optional offset parameter specifies the position\n *                     from which the search should be performed.\n * @charset    string  If charset parameter is omitted, string are assumed\n *                     to be encoded in iconv.internal_encoding.\n *\n * @return     mixed   Returns the numeric position of the first occurrence\n *                     of needle in haystack.\n *\n *                     If needle is not found, iconv_strpos() will return\n *                     FALSE. WarningThis function may return Boolean\n *                     FALSE, but may also return a non-Boolean value which\n *                     evaluates to FALSE, such as 0 or \"\". Please read the\n *                     section on Booleans for more information. Use the\n *                     === operator for testing the return value of this\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_strrpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-strrpos.php )\n *\n * In contrast to strpos(), the return value of iconv_strrpos() is the\n * number of characters that appear before the needle, rather than the\n * offset in bytes to the position where the needle has been found.\n * If haystack or needle is not a string, it is converted to a string and\n * applied as the ordinal value of a character.\n *\n * @haystack   string  The entire string.\n * @needle     string  The searched substring.\n * @charset    string  If charset parameter is omitted, string are assumed\n *                     to be encoded in iconv.internal_encoding.\n *\n * @return     mixed   Returns the numeric position of the last occurrence\n *                     of needle in haystack. The characters are counted on\n *                     the basis of the specified character set charset.\n *\n *                     If needle is not found, iconv_strrpos() will return\n *                     FALSE. WarningThis function may return Boolean\n *                     FALSE, but may also return a non-Boolean value which\n *                     evaluates to FALSE, such as 0 or \"\". Please read the\n *                     section on Booleans for more information. Use the\n *                     === operator for testing the return value of this\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iconv_substr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-substr.php )\n *\n * Cuts a portion of str specified by the offset and length parameters.\n *\n * @str        string  The original string.\n * @offset     int     If offset is non-negative, iconv_substr() cuts the\n *                     portion out of str beginning at offset'th character,\n *                     counting from zero.\n *\n *                     If offset is negative, iconv_substr() cuts out the\n *                     portion beginning at the position, offset characters\n *                     away from the end of str.\n * @length     int     If length is given and is positive, the return value\n *                     will contain at most length characters of the\n *                     portion that begins at offset (depending on the\n *                     length of string).\n *\n *                     If negative length is passed, iconv_substr() cuts\n *                     the portion out of str from the offset'th character\n *                     up to the character that is length characters away\n *                     from the end of the string. In case offset is also\n *                     negative, the start position is calculated\n *                     beforehand according to the rule explained above.\n * @charset    string  If charset parameter is omitted, string are assumed\n *                     to be encoded in iconv.internal_encoding.\n *\n *                     Note that offset and length parameters are always\n *                     deemed to represent offsets that are calculated on\n *                     the basis of the character set determined by\n *                     charset, whilst the counterpart substr() always\n *                     takes these for byte offsets.\n *\n * @return     mixed   Returns the portion of str specified by the offset\n *                     and length parameters.\n *\n *                     If str is shorter than offset characters long,\n *                     FALSE will be returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_iconv_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-iconv-handler.php )\n *\n * Converts the string encoded in internal_encoding to output_encoding.\n *\n * internal_encoding and output_encoding should be defined in the php.ini\n * file or in iconv_set_encoding().\n * See ob_start() for information about this handler parameters.\n *\n * @contents   string\n * @status     int\n *\n * @return     string  See ob_start() for information about this handler\n *                     return values.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "contents", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "thrift_protocol_write_binary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.thrift-protocol-write-binary.php )\n *\n *\n * @transportobj\n *             object\n * @method_name\n *             string\n * @msgtype    int\n * @request_struct\n *             object\n * @seqid      int\n * @strict_write\n *             bool\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "transportobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "method_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msgtype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "request_struct", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "seqid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strict_write", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "thrift_protocol_read_binary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.thrift-protocol-read-binary.php )\n *\n *\n * @transportobj\n *             object\n * @obj_typename\n *             string\n * @strict_read\n *             bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "transportobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "obj_typename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strict_read", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "thrift_protocol_set_compact_version", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.thrift-protocol-set-compact-version.php\n * )\n *\n *\n * @version    int\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "version", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "thrift_protocol_write_compact", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.thrift-protocol-write-compact.php )\n *\n *\n * @transportobj\n *             object\n * @method_name\n *             string\n * @msgtype    int\n * @request_struct\n *             object\n * @seqid      int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "transportobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "method_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msgtype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "request_struct", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "seqid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "thrift_protocol_read_compact", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.thrift-protocol-read-compact.php )\n *\n *\n * @transportobj\n *             object\n * @obj_typename\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "transportobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "obj_typename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_alarm", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-alarm.php )\n *\n * Creates a timer that will send a SIGALRM signal to the process after\n * the given number of seconds. Any call to pcntl_alarm() will cancel any\n * previously set alarm.\n *\n * @seconds    int     The number of seconds to wait. If seconds is zero,\n *                     no new alarm is created.\n *\n * @return     int     Returns the time in seconds that any previously\n *                     scheduled alarm had remaining before it was to be\n *                     delivered, or 0 if there was no previously scheduled\n *                     alarm.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-exec.php )\n *\n * Executes the program with the given arguments.\n *\n * @path       string  path must be the path to a binary executable or a\n *                     script with a valid path pointing to an executable\n *                     in the shebang ( #!/usr/local/bin/perl for example)\n *                     as the first line. See your system's man execve(2)\n *                     page for additional information.\n * @args       vector  args is an array of argument strings passed to the\n *                     program.\n * @envs       vector  envs is an array of strings which are passed as\n *                     environment to the program. The array is in the\n *                     format of name => value, the key being the name of\n *                     the environmental variable and the value being the\n *                     value of that variable.\n *\n * @return     mixed   Returns FALSE on error and does not return on\n *                     success.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "envs", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_fork", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-fork.php )\n *\n * The pcntl_fork() function creates a child process that differs from the\n * parent process only in its PID and PPID. Please see your system's\n * fork(2) man page for specific details as to how fork works on your\n * system.\n *\n * @return     int     On success, the PID of the child process is returned\n *                     in the parent's thread of execution, and a 0 is\n *                     returned in the child's thread of execution. On\n *                     failure, a -1 will be returned in the parent's\n *                     context, no child process will be created, and a PHP\n *                     error is raised.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_getpriority", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-getpriority.php )\n *\n * pcntl_getpriority() gets the priority of pid. Because priority levels\n * can differ between system types and kernel versions, please see your\n * system's getpriority(2) man page for specific details.\n *\n * @pid        int     If not specified, the pid of the current process is\n *                     used.\n * @process_identifier\n *             int     One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.\n *\n * @return     mixed   pcntl_getpriority() returns the priority of the\n *                     process or FALSE on error. A lower numerical value\n *                     causes more favorable scheduling. WarningThis\n *                     function may return Boolean FALSE, but may also\n *                     return a non-Boolean value which evaluates to FALSE,\n *                     such as 0 or \"\". Please read the section on Booleans\n *                     for more information. Use the === operator for\n *                     testing the return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "process_identifier", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_setpriority", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-setpriority.php )\n *\n * pcntl_setpriority() sets the priority of pid.\n *\n * @priority   int     priority is generally a value in the range -20 to\n *                     20. The default priority is 0 while a lower\n *                     numerical value causes more favorable scheduling.\n *                     Because priority levels can differ between system\n *                     types and kernel versions, please see your system's\n *                     setpriority(2) man page for specific details.\n * @pid        int     If not specified, the pid of the current process is\n *                     used.\n * @process_identifier\n *             int     One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "priority", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "process_identifier", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_signal", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-signal.php )\n *\n * The pcntl_signal() function installs a new signal handler for the\n * signal indicated by signo.\n *\n * @signo      int     The signal number.\n * @handler    mixed   The signal handler which may be the name of a user\n *                     created function, or method, or either of the two\n *                     global constants SIG_IGN or SIG_DFL.\n *\n *                     Note that when you set a handler to an object\n *                     method, that object's reference count is increased\n *                     which makes it persist until you either change the\n *                     handler to something else, or your script ends.\n * @restart_syscalls\n *             bool    Specifies whether system call restarting should be\n *                     used when this signal arrives.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "signo", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "restart_syscalls", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wait", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wait.php )\n *\n * The wait function suspends execution of the current process until a\n * child has exited, or until a signal is delivered whose action is to\n * terminate the current process or to call a signal handling function. If\n * a child has already exited by the time of the call (a so-called \"zombie\"\n * process), the function returns immediately. Any system resources used by\n * the child are freed. Please see your system's wait(2) man page for\n * specific details as to how wait works on your system.\n *\n * This function is equivalent to calling pcntl_waitpid() with a -1 pid\n * and no options.\n *\n * @status     mixed   pcntl_wait() will store status information in the\n *                     status parameter which can be evaluated using the\n *                     following functions: pcntl_wifexited(),\n *                     pcntl_wifstopped(), pcntl_wifsignaled(),\n *                     pcntl_wexitstatus(), pcntl_wtermsig() and\n *                     pcntl_wstopsig().\n * @options    int     If wait3 is available on your system (mostly\n *                     BSD-style systems), you can provide the optional\n *                     options parameter. If this parameter is not\n *                     provided, wait will be used for the system call. If\n *                     wait3 is not available, providing a value for\n *                     options will have no effect. The value of options is\n *                     the value of zero or more of the following two\n *                     constants OR'ed together: Possible values for\n *                     options WNOHANG Return immediately if no child has\n *                     exited. WUNTRACED Return for children which are\n *                     stopped, and whose status has not been reported.\n *\n * @return     int     pcntl_wait() returns the process ID of the child\n *                     which exited, -1 on error or zero if WNOHANG was\n *                     provided as an option (on wait3-available systems)\n *                     and no child was available.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2800, "status", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_waitpid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-waitpid.php )\n *\n * Suspends execution of the current process until a child as specified by\n * the pid argument has exited, or until a signal is delivered whose action\n * is to terminate the current process or to call a signal handling\n * function.\n *\n * If a child as requested by pid has already exited by the time of the\n * call (a so-called \"zombie\" process), the function returns immediately.\n * Any system resources used by the child are freed. Please see your\n * system's waitpid(2) man page for specific details as to how waitpid\n * works on your system.\n *\n * @pid        int     The value of pid can be one of the following:\n *                     possible values for pid < -1 wait for any child\n *                     process whose process group ID is equal to the\n *                     absolute value of pid. -1 wait for any child\n *                     process; this is the same behaviour that the wait\n *                     function exhibits. 0 wait for any child process\n *                     whose process group ID is equal to that of the\n *                     calling process. > 0 wait for the child whose\n *                     process ID is equal to the value of pid.\n *\n *                     Specifying -1 as the pid is equivalent to the\n *                     functionality pcntl_wait() provides (minus options).\n * @status     mixed   pcntl_waitpid() will store status information in the\n *                     status parameter which can be evaluated using the\n *                     following functions: pcntl_wifexited(),\n *                     pcntl_wifstopped(), pcntl_wifsignaled(),\n *                     pcntl_wexitstatus(), pcntl_wtermsig() and\n *                     pcntl_wstopsig().\n * @options    int     The value of options is the value of zero or more of\n *                     the following two global constants OR'ed together:\n *                     possible values for options WNOHANG return\n *                     immediately if no child has exited. WUNTRACED return\n *                     for children which are stopped, and whose status has\n *                     not been reported.\n *\n * @return     int     pcntl_waitpid() returns the process ID of the child\n *                     which exited, -1 on error or zero if WNOHANG was\n *                     used and no child was available\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "status", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wexitstatus", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wexitstatus.php )\n *\n * Returns the return code of a terminated child. This function is only\n * useful if pcntl_wifexited() returned TRUE.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     int     Returns the return code, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wifexited", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wifexited.php )\n *\n * Checks whether the child status code represents a normal exit.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     bool    Returns TRUE if the child status code represents a\n *                     normal exit, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wifsignaled", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wifsignaled.php )\n *\n * Checks whether the child process exited because of a signal which was\n * not caught.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     bool    Returns TRUE if the child process exited because of\n *                     a signal which was not caught, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wifstopped", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wifstopped.php )\n *\n * Checks whether the child process which caused the return is currently\n * stopped; this is only possible if the call to pcntl_waitpid() was done\n * using the option WUNTRACED.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     bool    Returns TRUE if the child process which caused the\n *                     return is currently stopped, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wstopsig", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wstopsig.php )\n *\n * Returns the number of the signal which caused the child to stop. This\n * function is only useful if pcntl_wifstopped() returned TRUE.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     int     Returns the signal number.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_wtermsig", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wtermsig.php )\n *\n * Returns the number of the signal that caused the child process to\n * terminate. This function is only useful if pcntl_wifsignaled() returned\n * TRUE.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     int     Returns the signal number, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pcntl_signal_dispatch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pcntl-signal-dispatch.php )\n *\n * The pcntl_signal_dispatch() function calls the signal handlers\n * installed by pcntl_signal() for each pending signal.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shell_exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shell-exec.php )\n *\n * This function is identical to the backtick operator.\n *\n * @cmd        string  The command that will be executed.\n *\n * @return     string  The output from the executed command.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "cmd", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exec.php )\n *\n * exec() executes the given command.\n *\n * @command    string  The command that will be executed.\n * @output     mixed   If the output argument is present, then the\n *                     specified array will be filled with every line of\n *                     output from the command. Trailing whitespace, such\n *                     as \\n, is not included in this array. Note that if\n *                     the array already contains some elements, exec()\n *                     will append to the end of the array. If you do not\n *                     want the function to append elements, call unset()\n *                     on the array before passing it to exec().\n * @return_var mixed   If the return_var argument is present along with the\n *                     output argument, then the return status of the\n *                     executed command will be written to this variable.\n *\n * @return     string  The last line from the result of the command. If you\n *                     need to execute a command and have all the data from\n *                     the command passed directly back without any\n *                     interference, use the passthru() function.\n *\n *                     To get the output of the executed command, be sure\n *                     to set and use the output parameter.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "command", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "output", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "return_var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "passthru", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.passthru.php )\n *\n * The passthru() function is similar to the exec() function in that it\n * executes a command. This function should be used in place of exec() or\n * system() when the output from the Unix command is binary data which\n * needs to be passed directly back to the browser. A common use for this\n * is to execute something like the pbmplus utilities that can output an\n * image stream directly. By setting the Content-type to image/gif and then\n * calling a pbmplus program to output a gif, you can create PHP scripts\n * that output images directly.\n *\n * @command    string  The command that will be executed.\n * @return_var mixed   If the return_var argument is present, the return\n *                     status of the Unix command will be placed here.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "command", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "return_var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "system", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.system.php )\n *\n * system() is just like the C version of the function in that it executes\n * the given command and outputs the result.\n *\n * The system() call also tries to automatically flush the web server's\n * output buffer after each line of output if PHP is running as a server\n * module.\n *\n * If you need to execute a command and have all the data from the command\n * passed directly back without any interference, use the passthru()\n * function.\n *\n * @command    string  The command that will be executed.\n * @return_var mixed   If the return_var argument is present, then the\n *                     return status of the executed command will be\n *                     written to this variable.\n *\n * @return     string  Returns the last line of the command output on\n *                     success, and FALSE on failure.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "command", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "return_var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "proc_open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.proc-open.php )\n *\n * proc_open() is similar to popen() but provides a much greater degree of\n * control over the program execution.\n *\n * @cmd        string  The command to execute\n * @descriptorspec\n *             vector  An indexed array where the key represents the\n *                     descriptor number and the value represents how PHP\n *                     will pass that descriptor to the child process. 0 is\n *                     stdin, 1 is stdout, while 2 is stderr.\n *\n *                     Each element can be: An array describing the pipe\n *                     to pass to the process. The first element is the\n *                     descriptor type and the second element is an option\n *                     for the given type. Valid types are pipe (the second\n *                     element is either r to pass the read end of the pipe\n *                     to the process, or w to pass the write end) and file\n *                     (the second element is a filename). A stream\n *                     resource representing a real file descriptor (e.g.\n *                     opened file, a socket, STDIN).\n *\n *                     The file descriptor numbers are not limited to 0, 1\n *                     and 2 - you may specify any valid file descriptor\n *                     number and it will be passed to the child process.\n *                     This allows your script to interoperate with other\n *                     scripts that run as \"co-processes\". In particular,\n *                     this is useful for passing passphrases to programs\n *                     like PGP, GPG and openssl in a more secure manner.\n *                     It is also useful for reading status information\n *                     provided by those programs on auxiliary file\n *                     descriptors.\n * @pipes      mixed   Will be set to an indexed array of file pointers\n *                     that correspond to PHP's end of any pipes that are\n *                     created.\n * @cwd        string  The initial working dir for the command. This must\n *                     be an absolute directory path, or NULL if you want\n *                     to use the default value (the working dir of the\n *                     current PHP process)\n * @env        mixed   An array with the environment variables for the\n *                     command that will be run, or NULL to use the same\n *                     environment as the current PHP process\n * @other_options\n *             mixed   Allows you to specify additional options. Currently\n *                     supported options include: suppress_errors (windows\n *                     only): suppresses errors generated by this function\n *                     when it's set to TRUE bypass_shell (windows only):\n *                     bypass cmd.exe shell when set to TRUE context:\n *                     stream context used when opening files (created with\n *                     stream_context_create()) binary_pipes: open pipes in\n *                     binary mode, instead of using the usual\n *                     stream_encoding\n *\n * @return     mixed   Returns a resource representing the process, which\n *                     should be freed using proc_close() when you are\n *                     finished with it. On failure returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cmd", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "descriptorspec", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "pipes", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cwd", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "env", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "other_options", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "proc_terminate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.proc-terminate.php )\n *\n * Signals a process (created using proc_open()) that it should terminate.\n * proc_terminate() returns immediately and does not wait for the process\n * to terminate.\n *\n * proc_terminate() allows you terminate the process and continue with\n * other tasks. You may poll the process (to see if it has stopped yet) by\n * using the proc_get_status() function.\n *\n * @process    resource\n *                     The proc_open() resource that will be closed.\n * @signal     int     This optional parameter is only useful on POSIX\n *                     operating systems; you may specify a signal to send\n *                     to the process using the kill(2) system call. The\n *                     default is SIGTERM.\n *\n * @return     bool    Returns the termination status of the process that\n *                     was run.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "process", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "signal", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "proc_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.proc-close.php )\n *\n * proc_close() is similar to pclose() except that it only works on\n * processes opened by proc_open(). proc_close() waits for the process to\n * terminate, and returns its exit code. If you have open pipes to that\n * process, you should fclose() them prior to calling this function in\n * order to avoid a deadlock - the child process may not be able to exit\n * while the pipes are open.\n *\n * @process    resource\n *                     The proc_open() resource that will be closed.\n *\n * @return     int     Returns the termination status of the process that\n *                     was run.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "process", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "proc_get_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.proc-get-status.php )\n *\n * proc_get_status() fetches data about a process opened using\n * proc_open().\n *\n * @process    resource\n *                     The proc_open() resource that will be evaluated.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "process", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "proc_nice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.proc-nice.php )\n *\n * proc_nice() changes the priority of the current process by the amount\n * specified in increment. A positive increment will lower the priority of\n * the current process, whereas a negative increment will raise the\n * priority.\n *\n * proc_nice() is not related to proc_open() and its associated functions\n * in any way.\n *\n * @increment  int     The increment value of the priority change.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. If an\n *                     error occurs, like the user lacks permission to\n *                     change the priority, an error of level E_WARNING is\n *                     also generated.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "increment", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "escapeshellarg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.escapeshellarg.php )\n *\n * escapeshellarg() adds single quotes around a string and quotes/escapes\n * any existing single quotes allowing you to pass a string directly to a\n * shell function and having it be treated as a single safe argument. This\n * function should be used to escape individual arguments to shell\n * functions coming from user input. The shell functions include exec(),\n * system() and the backtick operator.\n *\n * @arg        string  The argument that will be escaped.\n *\n * @return     string  The escaped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "arg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "escapeshellcmd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.escapeshellcmd.php )\n *\n * escapeshellcmd() escapes any characters in a string that might be used\n * to trick a shell command into executing arbitrary commands. This\n * function should be used to make sure that any data coming from user\n * input is escaped before this data is passed to the exec() or system()\n * functions, or to the backtick operator.\n *\n * Following characters are preceded by a backslash: #&;`|*\?~<>^()[]{}$\\,\n * \\x0A and \\xFF. ' and \" are escaped only if they are not paired. In\n * Windows, all these characters plus % are replaced by a space instead.\n *\n * @command    string  The command that will be escaped.\n *\n * @return     string  The escaped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "command", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_connect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-connect.php )\n *\n * Opens or reuses a connection to a MySQL server.\n *\n * @server     string  The MySQL server. It can also include a port number.\n *                     e.g. \"hostname:port\" or a path to a local socket\n *                     e.g. \":/path/to/socket\" for the localhost.\n *\n *                     If the PHP directive mysql.default_host is\n *                     undefined (default), then the default value is\n *                     'localhost:3306'. In SQL safe mode, this parameter\n *                     is ignored and value 'localhost:3306' is always\n *                     used.\n * @username   string  The username. Default value is defined by\n *                     mysql.default_user. In SQL safe mode, this parameter\n *                     is ignored and the name of the user that owns the\n *                     server process is used.\n * @password   string  The password. Default value is defined by\n *                     mysql.default_password. In SQL safe mode, this\n *                     parameter is ignored and empty password is used.\n * @new_link   bool    If a second call is made to mysql_connect() with the\n *                     same arguments, no new link will be established, but\n *                     instead, the link identifier of the already opened\n *                     link will be returned. The new_link parameter\n *                     modifies this behavior and makes mysql_connect()\n *                     always open a new link, even if mysql_connect() was\n *                     called before with the same parameters. In SQL safe\n *                     mode, this parameter is ignored.\n * @client_flags\n *             int     The client_flags parameter can be a combination of\n *                     the following constants: 128 (enable LOAD DATA LOCAL\n *                     handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS,\n *                     MYSQL_CLIENT_IGNORE_SPACE or\n *                     MYSQL_CLIENT_INTERACTIVE. Read the section about\n *                     MySQL client constants for further information. In\n *                     SQL safe mode, this parameter is ignored.\n * @connect_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     connection.\n * @query_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     query.\n *\n * @return     mixed   Returns a MySQL link identifier on success or FALSE\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "new_link", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "client_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "connect_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "query_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_connect_start", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-connect-start.php )\n *\n * Initiate an asynchronous (non-blocking) connection to the specified\n * MySQL server.\n *\n * @server     string  The MySQL server. It can also include a port number.\n *                     e.g. \"hostname:port\" or a path to a local socket\n *                     e.g. \":/path/to/socket\" for the localhost.\n *\n *                     If the PHP directive mysql.default_host is\n *                     undefined (default), then the default value is\n *                     'localhost:3306'. In SQL safe mode, this parameter\n *                     is ignored and value 'localhost:3306' is always\n *                     used.\n * @username   string  The username. Default value is defined by\n *                     mysql.default_user. In SQL safe mode, this parameter\n *                     is ignored and the name of the user that owns the\n *                     server process is used.\n * @password   string  The password. Default value is defined by\n *                     mysql.default_password. In SQL safe mode, this\n *                     parameter is ignored and empty password is used.\n * @database   string  The name of the database that will be selected.\n *\n * @return     mixed   Initiate an asynchronos mysql connect.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "database", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_connect_completed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-connect-completed.php )\n *\n * A nonblocking test whether a connection has completed, or errored out.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     bool    Has the connection finished (either successfully or\n *                     with error).\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_query_start", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-query-start.php )\n *\n * Initiate a nonblocking query on a given connection.\n *\n * @query      string  An SQL query\n *\n *                     The query string should not end with a semicolon.\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     bool    TRUE if the query can properly be prepared and\n *                     queued on the network.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "query", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_query_result", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-query-result.php )\n *\n * Fetch a result object, if available, containing some rows of the\n * nonblocking query.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A mysql result object, or null if one isn't ready\n *                     yet.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_query_completed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-query-completed.php )\n *\n * Perform a nonblocking test whether an asynchronous query has completed.\n *\n * @result     mixed   The mysql result object from\n *                     mysql_async_query_result.\n *\n * @return     bool    True if the the query has completed (i.e., either\n *                     all rows have been returned or an error occurred).\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_fetch_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-fetch-array.php )\n *\n * Returns an array that corresponds to the fetched row, if available.\n * Nonblocking.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_async_query_result().\n * @result_type\n *             int     The type of array that is to be fetched. It's a\n *                     constant and can take the following values:\n *                     MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.  The default\n *                     is MYSQL_ASSOC (1)\n *\n * @return     mixed   Returns an array of strings that corresponds to the\n *                     fetched row, or FALSE if there are no rows currently\n *                     available. The type of returned array depends on how\n *                     result_type is defined. By using MYSQL_BOTH, you'll\n *                     get an array with both associative and number\n *                     indices. Using MYSQL_ASSOC (the default), you only\n *                     get associative indices (as mysql_fetch_assoc()\n *                     works), using MYSQL_NUM, you only get number indices\n *                     (as mysql_fetch_row() works).\n *\n *                     If two or more columns of the result have the same\n *                     field names, the last column will take precedence.\n *                     To access the other column(s) of the same name, you\n *                     must use the numeric index of the column or make an\n *                     alias for the column. For aliased columns, you\n *                     cannot access the contents with the original column\n *                     name.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_type", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_wait_actionable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-async-wait-actionable.php )\n *\n * Block on one or more asynchronous operations, or until the specified\n * timeout has occurred.  Returns values from the 'items' parameter when\n * they become actionable.  Entries are returned as soon as they are\n * actionable (i.e., it does not wait for the entire timeout before\n * returning results).\n *\n * @items      mixed   An array of arrays.  These arrays contain a MySQL\n *                     link identifier in the 0'th position, and any other\n *                     values in the remainder of the array.  Items from\n *                     this parameter are returned unmodified as the result\n *                     set of actionable entries.\n * @timeout    float   Time, in seconds, to wait for actionable events.\n *                     Subsecond accuracy is supported.\n *\n * @return     mixed   Returns input entries that are now ready for action\n *                     (such as a connection has completed or rows are\n *                     available).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "items", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_async_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-async-status.php\n * )\n *\n * Returns the async operation status for a given mysql connection.  For\n * non-async connections, this returns ASYNC_OP_INVALID.  For an async\n * connection, this can be either ASYNC_OP_UNSET (no pending async\n * operation), ASYNC_OP_QUERY (async query pending), ASYNC_OP_FETCH_ROW\n * (async row fetching pending), or ASYNC_OP_CONNECT (async connection\n * pending).  Returns -1 if the supplied connection itself is invalid.\n *\n * @link_identifier\n *             mixed   The MySQL connection.\n *\n * @return     int     Returns the async operation number for this mysql\n *                     connection.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_pconnect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-pconnect.php )\n *\n * Establishes a persistent connection to a MySQL server.\n *\n * mysql_pconnect() acts very much like mysql_connect() with two major\n * differences.\n *\n * First, when connecting, the function would first try to find a\n * (persistent) link that's already open with the same host, username and\n * password. If one is found, an identifier for it will be returned instead\n * of opening a new connection.\n *\n * Second, the connection to the SQL server will not be closed when the\n * execution of the script ends. Instead, the link will remain open for\n * future use (mysql_close() will not close links established by\n * mysql_pconnect()).\n *\n * This type of link is therefore called 'persistent'.\n *\n * @server     string  The MySQL server. It can also include a port number.\n *                     e.g. \"hostname:port\" or a path to a local socket\n *                     e.g. \":/path/to/socket\" for the localhost.\n *\n *                     If the PHP directive mysql.default_host is\n *                     undefined (default), then the default value is\n *                     'localhost:3306'\n * @username   string  The username. Default value is the name of the user\n *                     that owns the server process.\n * @password   string  The password. Default value is an empty password.\n * @client_flags\n *             int     The client_flags parameter can be a combination of\n *                     the following constants: 128 (enable LOAD DATA LOCAL\n *                     handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS,\n *                     MYSQL_CLIENT_IGNORE_SPACE or\n *                     MYSQL_CLIENT_INTERACTIVE.\n * @connect_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     connection.\n * @query_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     query.\n *\n * @return     mixed   Returns a MySQL persistent link identifier on\n *                     success, or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "client_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "connect_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "query_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_connect_with_db", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-connect-with-db.php )\n *\n *\n * @server     string\n * @username   string\n * @password   string\n * @database   string\n * @new_link   bool\n * @client_flags\n *             int\n * @connect_timeout_ms\n *             int\n * @query_timeout_ms\n *             int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "database", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "new_link", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "client_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "connect_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "query_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_pconnect_with_db", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-pconnect-with-db.php )\n *\n *\n * @server     string\n * @username   string\n * @password   string\n * @database   string\n * @client_flags\n *             int\n * @connect_timeout_ms\n *             int\n * @query_timeout_ms\n *             int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "database", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "client_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "connect_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "query_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_set_charset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-set-charset.php )\n *\n * Sets the default character set for the current connection.\n *\n * @charset    string  A valid character set name.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_ping", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-ping.php )\n *\n * Checks whether or not the connection to the server is working. If it\n * has gone down, an automatic reconnection is attempted. This function can\n * be used by scripts that remain idle for a long while, to check whether\n * or not the server has closed the connection and reconnect if necessary.\n *\n * Since MySQL 5.0.13, automatic reconnection feature is disabled.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE if the connection to the server MySQL\n *                     server is working, otherwise FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_escape_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-escape-string.php\n * )\n *\n * This function will escape the unescaped_string, so that it is safe to\n * place it in a mysql_query(). This function is deprecated.\n *\n * This function is identical to mysql_real_escape_string() except that\n * mysql_real_escape_string() takes a connection handler and escapes the\n * string according to the current character set. mysql_escape_string()\n * does not take a connection argument and does not respect the current\n * charset setting. WarningThis function has been DEPRECATED as of PHP\n * 5.3.0. Relying on this feature is highly discouraged.\n *\n * @unescaped_string\n *             string  The string that is to be escaped.\n *\n * @return     string  Returns the escaped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "unescaped_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_real_escape_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-real-escape-string.php )\n *\n * Escapes special characters in the unescaped_string, taking into account\n * the current character set of the connection so that it is safe to place\n * it in a mysql_query(). If binary data is to be inserted, this function\n * must be used.\n *\n * mysql_real_escape_string() calls MySQL's library function\n * mysql_real_escape_string, which prepends backslashes to the following\n * characters: \\x00, \\n, \\r, \\, ', \" and \\x1a.\n *\n * This function must always (with few exceptions) be used to make data\n * safe before sending a query to MySQL.\n *\n * @unescaped_string\n *             string  The string that is to be escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the escaped string, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "unescaped_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_client_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-client-encoding.php )\n *\n * Retrieves the character_set variable from MySQL.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the default character set name for the\n *                     current connection.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-close.php )\n *\n * mysql_close() closes the non-persistent connection to the MySQL server\n * that's associated with the specified link identifier. If link_identifier\n * isn't specified, the last opened link is used.\n *\n * Using mysql_close() isn't usually necessary, as non-persistent open\n * links are automatically closed at the end of the script's execution. See\n * also freeing resources.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_errno", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-errno.php )\n *\n * Returns the error number from the last MySQL function.\n *\n * Errors coming back from the MySQL database backend no longer issue\n * warnings. Instead, use mysql_errno() to retrieve the error code. Note\n * that this function only returns the error code from the most recently\n * executed MySQL function (not including mysql_error() and mysql_errno()),\n * so if you want to use it, make sure you check the value before calling\n * another MySQL function.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the error number from the last MySQL\n *                     function, or 0 (zero) if no error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-error.php )\n *\n * Returns the error text from the last MySQL function. Errors coming back\n * from the MySQL database backend no longer issue warnings. Instead, use\n * mysql_error() to retrieve the error text. Note that this function only\n * returns the error text from the most recently executed MySQL function\n * (not including mysql_error() and mysql_errno()), so if you want to use\n * it, make sure you check the value before calling another MySQL function.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the error text from the last MySQL function,\n *                     or '' (empty string) if no error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_warning_count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-warning-count.php\n * )\n *\n * Returns the number of errors generated during execution of the previous\n * SQL statement. To retrieve warning messages you can use the SQL command\n * SHOW WARNINGS [limit row_count].\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the number of warnings from the last MySQL\n *                     function, or 0 (zero) if no warnings occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_get_client_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-get-client-info.php )\n *\n * mysql_get_client_info() returns a string that represents the client\n * library version.\n *\n * @return     string  The MySQL client version.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_get_host_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-get-host-info.php\n * )\n *\n * Describes the type of connection in use for the connection, including\n * the server host name.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a string describing the type of MySQL\n *                     connection in use for the connection or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_get_proto_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-get-proto-info.php )\n *\n * Retrieves the MySQL protocol.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the MySQL protocol on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_get_server_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-get-server-info.php )\n *\n * Retrieves the MySQL server version.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the MySQL server version on success or FALSE\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-info.php )\n *\n * Returns detailed information about the last query.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns information about the statement on success,\n *                     or FALSE on failure. See the example below for which\n *                     statements provide information, and what the\n *                     returned value may look like. Statements that are\n *                     not listed will return FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_insert_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-insert-id.php )\n *\n * Retrieves the ID generated for an AUTO_INCREMENT column by the previous\n * query (usually INSERT).\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   The ID generated for an AUTO_INCREMENT column by the\n *                     previous query on success, 0 if the previous query\n *                     does not generate an AUTO_INCREMENT value, or FALSE\n *                     if no MySQL connection was established.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_stat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-stat.php )\n *\n * mysql_stat() returns the current server status.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a string with the status for uptime,\n *                     threads, queries, open tables, flush tables and\n *                     queries per second. For a complete list of other\n *                     status variables, you have to use the SHOW STATUS\n *                     SQL command. If link_identifier is invalid, NULL is\n *                     returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_thread_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-thread-id.php )\n *\n * Retrieves the current thread ID. If the connection is lost, and a\n * reconnect with mysql_ping() is executed, the thread ID will change. This\n * means only retrieve the thread ID when needed.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   The thread ID on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_create_db", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-create-db.php )\n *\n * mysql_create_db() attempts to create a new database on the server\n * associated with the specified link identifier.\n *\n * @db         string  The name of the database being created.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "db", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_select_db", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-select-db.php )\n *\n * Sets the current active database on the server that's associated with\n * the specified link identifier. Every subsequent call to mysql_query()\n * will be made on the active database.\n *\n * @db         string  The name of the database that is to be selected.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "db", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_drop_db", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-drop-db.php )\n *\n * mysql_drop_db() attempts to drop (remove) an entire database from the\n * server associated with the specified link identifier. This function is\n * deprecated, it is preferable to use mysql_query() to issue an sql DROP\n * DATABASE statement instead.\n *\n * @db         string  The name of the database that will be deleted.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "db", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_affected_rows", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-affected-rows.php\n * )\n *\n * Get the number of affected rows by the last INSERT, UPDATE, REPLACE or\n * DELETE query associated with link_identifier.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the number of affected rows on success, and\n *                     -1 if the last query failed.\n *\n *                     If the last query was a DELETE query with no WHERE\n *                     clause, all of the records will have been deleted\n *                     from the table but this function will return zero\n *                     with MySQL versions prior to 4.1.2.\n *\n *                     When using UPDATE, MySQL will not update columns\n *                     where the new value is the same as the old value.\n *                     This creates the possibility that\n *                     mysql_affected_rows() may not actually equal the\n *                     number of rows matched, only the number of rows that\n *                     were literally affected by the query.\n *\n *                     The REPLACE statement first deletes the record with\n *                     the same primary key and then inserts the new\n *                     record. This function returns the number of deleted\n *                     records plus the number of inserted records.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "mysql_set_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sets query timeout for a connection.\n *\n * @query_timeout_ms\n *             int     How many milli-seconds to wait for an SQL query.\n * @link_identifier\n *             mixed   Which connection to set to. If absent, default or\n *                     current connection will be applied to.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "query_timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-query.php )\n *\n * mysql_query() sends a unique query (multiple queries are not supported)\n * to the currently active database on the server that's associated with\n * the specified link_identifier.\n *\n * @query      string  An SQL query\n *\n *                     The query string should not end with a semicolon.\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   For SELECT, SHOW, DESCRIBE, EXPLAIN and other\n *                     statements returning resultset, mysql_query()\n *                     returns a resource on success, or FALSE on error.\n *\n *                     For other type of SQL statements, INSERT, UPDATE,\n *                     DELETE, DROP, etc, mysql_query() returns TRUE on\n *                     success or FALSE on error.\n *\n *                     The returned result resource should be passed to\n *                     mysql_fetch_array(), and other functions for dealing\n *                     with result tables, to access the returned data.\n *\n *                     Use mysql_num_rows() to find out how many rows were\n *                     returned for a SELECT statement or\n *                     mysql_affected_rows() to find out how many rows were\n *                     affected by a DELETE, INSERT, REPLACE, or UPDATE\n *                     statement.\n *\n *                     mysql_query() will also fail and return FALSE if\n *                     the user does not have permission to access the\n *                     table(s) referenced by the query.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "query", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "mysql_multi_query", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * mysql_multi_query() executes one or more queries separated by a ; to\n * the currently active database on the server that's associated with the\n * specified link_identifier.\n *\n * @query      string  An SQL query\n *\n *                     The query string should not end with a semicolon.\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   This is a fb specific query so behaviour is a little\n *                     random at the moment.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "query", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "mysql_next_result", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used with mysql_multi_query() to move the result set on one.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     bool    True if the iterator has more results after this\n *                     one. False if there was none.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "mysql_more_results", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used with mysql_multi_query() to check if there are more result sets to\n * be returned.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     bool    True if there is at least one more item in the\n *                     result set.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "mysql_fetch_result", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Used with mysql_multi_query() to return a mysql result for the current\n * iterated query.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a resource or a boolean.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_unbuffered_query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-unbuffered-query.php )\n *\n * mysql_unbuffered_query() sends the SQL query query to MySQL without\n * automatically fetching and buffering the result rows as mysql_query()\n * does. This saves a considerable amount of memory with SQL queries that\n * produce large result sets, and you can start working on the result set\n * immediately after the first row has been retrieved as you don't have to\n * wait until the complete SQL query has been performed. To use\n * mysql_unbuffered_query() while multiple database connections are open,\n * you must specify the optional parameter link_identifier to identify\n * which connection you want to use.\n *\n * @query      string  The SQL query to execute.\n *\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   For SELECT, SHOW, DESCRIBE or EXPLAIN statements,\n *                     mysql_unbuffered_query() returns a resource on\n *                     success, or FALSE on error.\n *\n *                     For other type of SQL statements, UPDATE, DELETE,\n *                     DROP, etc, mysql_unbuffered_query() returns TRUE on\n *                     success or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "query", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_db_query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-db-query.php )\n *\n * mysql_db_query() selects a database, and executes a query on it.\n * WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on\n * this feature is highly discouraged.\n *\n * @database   string  The name of the database that will be selected.\n * @query      string  The MySQL query.\n *\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a positive MySQL result resource to the\n *                     query result, or FALSE on error. The function also\n *                     returns TRUE/FALSE for INSERT/UPDATE/DELETE queries\n *                     to indicate success/failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "database", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "query", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_list_dbs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-list-dbs.php )\n *\n * Returns a result pointer containing the databases available from the\n * current mysql daemon.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a result pointer resource on success, or\n *                     FALSE on failure. Use the mysql_tablename() function\n *                     to traverse this result pointer, or any function for\n *                     result tables, such as mysql_fetch_array().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_list_tables", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-list-tables.php )\n *\n * Retrieves a list of table names from a MySQL database.\n *\n * This function is deprecated. It is preferable to use mysql_query() to\n * issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement\n * instead.\n *\n * @database   string  The name of the database\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A result pointer resource on success or FALSE on\n *                     failure.\n *\n *                     Use the mysql_tablename() function to traverse this\n *                     result pointer, or any function for result tables,\n *                     such as mysql_fetch_array().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "database", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_list_fields", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-list-fields.php )\n *\n * Retrieves information about the given table name.\n *\n * This function is deprecated. It is preferable to use mysql_query() to\n * issue an SQL SHOW COLUMNS FROM table [LIKE 'name'] statement instead.\n *\n * @database_name\n *             string  The name of the database that's being queried.\n * @table_name string  The name of the table that's being queried.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A result pointer resource on success, or FALSE on\n *                     failure.\n *\n *                     The returned result can be used with\n *                     mysql_field_flags(), mysql_field_len(),\n *                     mysql_field_name() and mysql_field_type().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "database_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "table_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_list_processes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-list-processes.php )\n *\n * Retrieves the current MySQL server threads.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A result pointer resource on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "link_identifier", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_db_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-db-name.php )\n *\n * Retrieve the database name from a call to mysql_list_dbs().\n *\n * @result     mixed   The result pointer from a call to mysql_list_dbs().\n * @row        int     The index into the result set.\n * @field      mixed   The field name.\n *\n * @return     mixed   Returns the database name on success, and FALSE on\n *                     failure. If FALSE is returned, use mysql_error() to\n *                     determine the nature of the error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "row", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_tablename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-tablename.php )\n *\n * Retrieves the table name from a result.\n *\n * This function is deprecated. It is preferable to use mysql_query() to\n * issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement\n * instead.\n *\n * @result     mixed   A result pointer resource that's returned from\n *                     mysql_list_tables().\n * @i          int     The integer index (row/table number)\n *\n * @return     mixed   The name of the table on success or FALSE on\n *                     failure.\n *\n *                     Use the mysql_tablename() function to traverse this\n *                     result pointer, or any function for result tables,\n *                     such as mysql_fetch_array().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "i", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_num_fields", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-num-fields.php )\n *\n * Retrieves the number of fields from a query.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns the number of fields in the result set\n *                     resource on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_num_rows", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-num-rows.php )\n *\n * Retrieves the number of rows from a result set. This command is only\n * valid for statements like SELECT or SHOW that return an actual result\n * set. To retrieve the number of rows affected by a INSERT, UPDATE,\n * REPLACE or DELETE query, use mysql_affected_rows().\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   The number of rows in a result set on success or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_free_result", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-free-result.php )\n *\n * mysql_free_result() will free all memory associated with the result\n * identifier result.\n *\n * mysql_free_result() only needs to be called if you are concerned about\n * how much memory is being used for queries that return large result sets.\n * All associated result memory is automatically freed at the end of the\n * script's execution.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n *\n *                     If a non-resource is used for the result, an error\n *                     of level E_WARNING will be emitted. It's worth\n *                     noting that mysql_query() only returns a resource\n *                     for SELECT, SHOW, EXPLAIN, and DESCRIBE queries.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_data_seek", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-data-seek.php )\n *\n * mysql_data_seek() moves the internal row pointer of the MySQL result\n * associated with the specified result identifier to point to the\n * specified row number. The next call to a MySQL fetch function, such as\n * mysql_fetch_assoc(), would return that row.\n *\n * row_number starts at 0. The row_number should be a value in the range\n * from 0 to mysql_num_rows() - 1. However if the result set is empty\n * (mysql_num_rows() == 0), a seek to 0 will fail with a E_WARNING and\n * mysql_data_seek() will return FALSE.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @row        int     The desired row number of the new result pointer.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "row", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_fetch_row", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-row.php )\n *\n * Returns a numerical array that corresponds to the fetched row and moves\n * the internal data pointer ahead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns an numerical array of strings that\n *                     corresponds to the fetched row, or FALSE if there\n *                     are no more rows.\n *\n *                     mysql_fetch_row() fetches one row of data from the\n *                     result associated with the specified result\n *                     identifier. The row is returned as an array. Each\n *                     result column is stored in an array offset, starting\n *                     at offset 0.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_fetch_assoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-assoc.php )\n *\n * Returns an associative array that corresponds to the fetched row and\n * moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent\n * to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second\n * parameter. It only returns an associative array.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns an associative array of strings that\n *                     corresponds to the fetched row, or FALSE if there\n *                     are no more rows.\n *\n *                     If two or more columns of the result have the same\n *                     field names, the last column will take precedence.\n *                     To access the other column(s) of the same name, you\n *                     either need to access the result with numeric\n *                     indices by using mysql_fetch_row() or add alias\n *                     names. See the example at the mysql_fetch_array()\n *                     description about aliases.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_fetch_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-array.php )\n *\n * Returns an array that corresponds to the fetched row and moves the\n * internal data pointer ahead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @result_type\n *             int     The type of array that is to be fetched. It's a\n *                     constant and can take the following values:\n *                     MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.\n *\n * @return     mixed   Returns an array of strings that corresponds to the\n *                     fetched row, or FALSE if there are no more rows. The\n *                     type of returned array depends on how result_type is\n *                     defined. By using MYSQL_BOTH (default), you'll get\n *                     an array with both associative and number indices.\n *                     Using MYSQL_ASSOC, you only get associative indices\n *                     (as mysql_fetch_assoc() works), using MYSQL_NUM, you\n *                     only get number indices (as mysql_fetch_row()\n *                     works).\n *\n *                     If two or more columns of the result have the same\n *                     field names, the last column will take precedence.\n *                     To access the other column(s) of the same name, you\n *                     must use the numeric index of the column or make an\n *                     alias for the column. For aliased columns, you\n *                     cannot access the contents with the original column\n *                     name.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "result_type", "", (const char *)0xa /* KindOfInt64 */, "i:3;", (const char *)4, "3", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_fetch_lengths", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-lengths.php\n * )\n *\n * Returns an array that corresponds to the lengths of each field in the\n * last row fetched by MySQL.\n *\n * mysql_fetch_lengths() stores the lengths of each result column in the\n * last row returned by mysql_fetch_row(), mysql_fetch_assoc(),\n * mysql_fetch_array(), and mysql_fetch_object() in an array, starting at\n * offset 0.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   An array of lengths on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_fetch_object", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-object.php\n * )\n *\n * Returns an object with properties that correspond to the fetched row\n * and moves the internal data pointer ahead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @class_name string  The name of the class to instantiate, set the\n *                     properties of and return. If not specified, a\n *                     stdClass object is returned.\n * @params     vector  An optional array of parameters to pass to the\n *                     constructor for class_name objects.\n *\n * @return     mixed   Returns an object with string properties that\n *                     correspond to the fetched row, or FALSE if there are\n *                     no more rows.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "s:8:\"stdClass\";", (const char *)15, "\"stdClass\"", (const char *)10, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_result", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-result.php )\n *\n * Retrieves the contents of one cell from a MySQL result set.\n *\n * When working on large result sets, you should consider using one of the\n * functions that fetch an entire row (specified below). As these functions\n * return the contents of multiple cells in one function call, they're MUCH\n * quicker than mysql_result(). Also, note that specifying a numeric offset\n * for the field argument is much quicker than specifying a fieldname or\n * tablename.fieldname argument.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @row        int     The row number from the result that's being\n *                     retrieved. Row numbers start at 0.\n * @field      mixed   The name or offset of the field being retrieved.\n *\n *                     It can be the field's offset, the field's name, or\n *                     the field's table dot field name\n *                     (tablename.fieldname). If the column name has been\n *                     aliased ('select foo as bar from...'), use the alias\n *                     instead of the column name. If undefined, the first\n *                     field is retrieved.\n *\n * @return     mixed   The contents of one cell from a MySQL result set on\n *                     success, or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "row", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_fetch_field", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-field.php )\n *\n * Returns an object containing field information. This function can be\n * used to obtain information about fields in the provided query result.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. If the field offset is\n *                     not specified, the next field that was not yet\n *                     retrieved by this function is retrieved. The\n *                     field_offset starts at 0.\n *\n * @return     mixed   Returns an object containing field information. The\n *                     properties of the object are:\n *\n *                     name - column name table - name of the table the\n *                     column belongs to max_length - maximum length of the\n *                     column not_null - 1 if the column cannot be NULL\n *                     primary_key - 1 if the column is a primary key\n *                     unique_key - 1 if the column is a unique key\n *                     multiple_key - 1 if the column is a non-unique key\n *                     numeric - 1 if the column is numeric blob - 1 if the\n *                     column is a BLOB type - the type of the column\n *                     unsigned - 1 if the column is unsigned zerofill - 1\n *                     if the column is zero-filled\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_field_seek", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-seek.php )\n *\n * Seeks to the specified field offset. If the next call to\n * mysql_fetch_field() doesn't include a field offset, the field offset\n * specified in mysql_field_seek() will be returned.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_field_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-name.php )\n *\n * mysql_field_name() returns the name of the specified field index.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The name of the specified field index on success or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_field_table", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-table.php )\n *\n * Returns the name of the table that the specified field is in.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The name of the table on success.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_field_len", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-len.php )\n *\n * mysql_field_len() returns the length of the specified field.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The length of the specified field index on success\n *                     or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_field_type", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-type.php )\n *\n * mysql_field_type() is similar to the mysql_field_name() function. The\n * arguments are identical, but the field type is returned instead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The returned field type will be one of \"int\",\n *                     \"real\", \"string\", \"blob\", and others as detailed in\n *                     the MySQL documentation.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mysql_field_flags", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-flags.php )\n *\n * mysql_field_flags() returns the field flags of the specified field. The\n * flags are reported as a single word per flag separated by a single\n * space, so that you can split the returned value using explode().\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   Returns a string of flags associated with the result\n *                     or FALSE on failure.\n *\n *                     The following flags are reported, if your version\n *                     of MySQL is current enough to support them:\n *                     \"not_null\", \"primary_key\", \"unique_key\",\n *                     \"multiple_key\", \"blob\", \"unsigned\", \"zerofill\",\n *                     \"binary\", \"enum\", \"auto_increment\" and \"timestamp\".\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "field", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_grep", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-grep.php )\n *\n * Returns the array consisting of the elements of the input array that\n * match the given pattern.\n *\n * @pattern    string  The pattern to search for, as a string.\n * @input      map     The input array.\n * @flags      int     If set to PREG_GREP_INVERT, this function returns\n *                     the elements of the input array that do not match\n *                     the given pattern.\n *\n * @return     mixed   Returns an array indexed using the keys from the\n *                     input array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "input", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_match", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-match.php )\n *\n * Searches subject for a match to the regular expression given in\n * pattern.\n *\n * @pattern    string  The pattern to search for, as a string.\n * @subject    string  The input string.\n * @matches    mixed   If matches is provided, then it is filled with the\n *                     results of search. $matches[0] will contain the text\n *                     that matched the full pattern, $matches[1] will have\n *                     the text that matched the first captured\n *                     parenthesized subpattern, and so on.\n * @flags      int     flags can be the following flag: PREG_OFFSET_CAPTURE\n *                     If this flag is passed, for every occurring match\n *                     the appendant string offset will also be returned.\n *                     Note that this changes the value of matches into an\n *                     array where every element is an array consisting of\n *                     the matched string at offset 0 and its string offset\n *                     into subject at offset 1.\n * @offset     int     Normally, the search starts from the beginning of\n *                     the subject string. The optional parameter offset\n *                     can be used to specify the alternate place from\n *                     which to start the search (in bytes).\n *\n *                     Using offset is not equivalent to passing\n *                     substr($subject, $offset) to preg_match() in place\n *                     of the subject string, because pattern can contain\n *                     assertions such as ^, $ or (\?<=x). Compare:\n *\n *                     Array ( )\n *\n *                     while this example\n *\n *\n *\n *                     will produce Array ( [0] => Array ( [0] => def [1]\n *                     => 0 ) )\n *\n * @return     mixed   preg_match() returns the number of times pattern\n *                     matches. That will be either 0 times (no match) or 1\n *                     time because preg_match() will stop searching after\n *                     the first match. preg_match_all() on the contrary\n *                     will continue until it reaches the end of subject.\n *                     preg_match() returns FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "matches", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_match_all", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-match-all.php )\n *\n * Searches subject for all matches to the regular expression given in\n * pattern and puts them in matches in the order specified by flags.\n *\n * After the first match is found, the subsequent searches are continued\n * on from end of the last match.\n *\n * @pattern    string  The pattern to search for, as a string.\n * @subject    string  The input string.\n * @matches    mixed   Array of all matches in multi-dimensional array\n *                     ordered according to flags.\n * @flags      int     Can be a combination of the following flags (note\n *                     that it doesn't make sense to use PREG_PATTERN_ORDER\n *                     together with PREG_SET_ORDER): PREG_PATTERN_ORDER\n *\n *                     Orders results so that $matches[0] is an array of\n *                     full pattern matches, $matches[1] is an array of\n *                     strings matched by the first parenthesized\n *                     subpattern, and so on.\n *\n *\n *\n *                     <b>example: </b>, <div align=left>this is a\n *                     test</div> example: , this is a test\n *\n *                     So, $out[0] contains array of strings that matched\n *                     full pattern, and $out[1] contains array of strings\n *                     enclosed by tags.\n * @offset     int     Orders results so that $matches[0] is an array of\n *                     first set of matches, $matches[1] is an array of\n *                     second set of matches, and so on.\n *\n *                     <b>example: </b>, example: <div align=\"left\">this\n *                     is a test</div>, this is a test\n *\n * @return     mixed   Returns the number of full pattern matches (which\n *                     might be zero), or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "matches", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-replace.php )\n *\n * Searches subject for matches to pattern and replaces them with\n * replacement.\n *\n * @pattern    mixed   The pattern to search for. It can be either a string\n *                     or an array with strings.\n *\n *                     The e modifier makes preg_replace() treat the\n *                     replacement parameter as PHP code after the\n *                     appropriate references substitution is done. Tip:\n *                     make sure that replacement constitutes a valid PHP\n *                     code string, otherwise PHP will complain about a\n *                     parse error at the line containing preg_replace().\n * @replacement\n *             mixed   The string or an array with strings to replace. If\n *                     this parameter is a string and the pattern parameter\n *                     is an array, all patterns will be replaced by that\n *                     string. If both pattern and replacement parameters\n *                     are arrays, each pattern will be replaced by the\n *                     replacement counterpart. If there are fewer elements\n *                     in the replacement array than in the pattern array,\n *                     any extra patterns will be replaced by an empty\n *                     string.\n *\n *                     replacement may contain references of the form \\\\n\n *                     or (since PHP 4.0.4) $n, with the latter form being\n *                     the preferred one. Every such reference will be\n *                     replaced by the text captured by the n'th\n *                     parenthesized pattern. n can be from 0 to 99, and\n *                     \\\\0 or $0 refers to the text matched by the whole\n *                     pattern. Opening parentheses are counted from left\n *                     to right (starting from 1) to obtain the number of\n *                     the capturing subpattern. To use backslash in\n *                     replacement, it must be doubled (\"\\\\\\\\\" PHP string).\n *\n *                     When working with a replacement pattern where a\n *                     backreference is immediately followed by another\n *                     number (i.e.: placing a literal number immediately\n *                     after a matched pattern), you cannot use the\n *                     familiar \\\\1 notation for your backreference. \\\\11,\n *                     for example, would confuse preg_replace() since it\n *                     does not know whether you want the \\\\1 backreference\n *                     followed by a literal 1, or the \\\\11 backreference\n *                     followed by nothing. In this case the solution is to\n *                     use \\${1}1. This creates an isolated $1\n *                     backreference, leaving the 1 as a literal.\n *\n *                     When using the e modifier, this function escapes\n *                     some characters (namely ', \", \\ and NULL) in the\n *                     strings that replace the backreferences. This is\n *                     done to ensure that no syntax errors arise from\n *                     backreference usage with either single or double\n *                     quotes (e.g. 'strlen(\\'$1\\')+strlen(\"$2\")'). Make\n *                     sure you are aware of PHP's string syntax to know\n *                     exactly how the interpreted string will look like.\n * @subject    mixed   The string or an array with strings to search and\n *                     replace.\n *\n *                     If subject is an array, then the search and replace\n *                     is performed on every entry of subject, and the\n *                     return value is an array as well.\n * @limit      int     The maximum possible replacements for each pattern\n *                     in each subject string. Defaults to -1 (no limit).\n * @count      mixed   If specified, this variable will be filled with the\n *                     number of replacements done.\n *\n * @return     mixed   preg_replace() returns an array if the subject\n *                     parameter is an array, or a string otherwise.\n *\n *                     If matches are found, the new subject will be\n *                     returned, otherwise subject will be returned\n *                     unchanged or NULL if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2800, "count", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_replace_callback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.preg-replace-callback.php )\n *\n * The behavior of this function is almost identical to preg_replace(),\n * except for the fact that instead of replacement parameter, one should\n * specify a callback.\n *\n * @pattern    mixed   The pattern to search for. It can be either a string\n *                     or an array with strings.\n * @callback   mixed   A callback that will be called and passed an array\n *                     of matched elements in the subject string. The\n *                     callback should return the replacement string.\n *\n *                     You'll often need the callback function for a\n *                     preg_replace_callback() in just one place. In this\n *                     case you can use an anonymous function (since PHP\n *                     5.3.0) or create_function() to declare an anonymous\n *                     function as callback within the call to\n *                     preg_replace_callback(). By doing it this way you\n *                     have all information for the call in one place and\n *                     do not clutter the function namespace with a\n *                     callback function's name not used anywhere else.\n *\n *                     Example #1 preg_replace_callback() and\n *                     create_function()\n * @subject    mixed   The string or an array with strings to search and\n *                     replace.\n * @limit      int     The maximum possible replacements for each pattern\n *                     in each subject string. Defaults to -1 (no limit).\n * @count      mixed   If specified, this variable will be filled with the\n *                     number of replacements done.\n *\n * @return     mixed   preg_replace_callback() returns an array if the\n *                     subject parameter is an array, or a string\n *                     otherwise. On errors the return value is NULL\n *\n *                     If matches are found, the new subject will be\n *                     returned, otherwise subject will be returned\n *                     unchanged.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2800, "count", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_split", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-split.php )\n *\n * Split the given string by a regular expression.\n *\n * @pattern    mixed   The pattern to search for, as a string.\n * @subject    mixed   The input string.\n * @limit      int     If specified, then only substrings up to limit are\n *                     returned with the rest of the string being placed in\n *                     the last substring. A limit of -1, 0 or null means\n *                     \"no limit\" and, as is standard across PHP, you can\n *                     use null to skip to the flags parameter.\n * @flags      int     flags can be any combination of the following flags\n *                     (combined with the | bitwise operator):\n *                     PREG_SPLIT_NO_EMPTY If this flag is set, only\n *                     non-empty pieces will be returned by preg_split().\n *\n * @return     mixed   Returns an array containing substrings of subject\n *                     split along boundaries matched by pattern.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_quote", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-quote.php )\n *\n * preg_quote() takes str and puts a backslash in front of every character\n * that is part of the regular expression syntax. This is useful if you\n * have a run-time string that you need to match in some text and the\n * string may contain special regex characters.\n *\n * The special regular expression characters are: . \\ + * \? [ ^ ] $ ( ) {\n * } = ! < > | : -\n *\n * @str        string  The input string.\n * @delimiter  string  If the optional delimiter is specified, it will also\n *                     be escaped. This is useful for escaping the\n *                     delimiter that is required by the PCRE functions.\n *                     The / is the most commonly used delimiter.\n *\n * @return     string  Returns the quoted string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "delimiter", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "preg_last_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.preg-last-error.php )\n *\n * Returns the error code of the last PCRE regex execution.\n *\n * Example #1 preg_last_error() example\n *\n *\n *\n * Backtrack limit was exhausted!\n *\n * @return     int     Returns one of the following constants (explained on\n *                     their own page): PREG_NO_ERROR PREG_INTERNAL_ERROR\n *                     PREG_BACKTRACK_LIMIT_ERROR (see also\n *                     pcre.backtrack_limit) PREG_RECURSION_LIMIT_ERROR\n *                     (see also pcre.recursion_limit) PREG_BAD_UTF8_ERROR\n *                     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ereg_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ereg-replace.php )\n *\n *\n * @pattern    string  A POSIX extended regular expression.\n * @replacement\n *             string  If pattern contains parenthesized substrings,\n *                     replacement may contain substrings of the form\n *                     \\\\digit, which will be replaced by the text matching\n *                     the digit'th parenthesized substring; \\\\0 will\n *                     produce the entire contents of string. Up to nine\n *                     substrings may be used. Parentheses may be nested,\n *                     in which case they are counted by the opening\n *                     parenthesis.\n * @str        string  The input string.\n *\n * @return     string  The modified string is returned. If no matches are\n *                     found in string, then it will be returned unchanged.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "eregi_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.eregi-replace.php )\n *\n * This function is identical to ereg_replace() except that this ignores\n * case distinction when matching alphabetic characters. WarningThis\n * function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is\n * highly discouraged.\n *\n * @pattern    string  A POSIX extended regular expression.\n * @replacement\n *             string  If pattern contains parenthesized substrings,\n *                     replacement may contain substrings of the form\n *                     \\\\digit, which will be replaced by the text matching\n *                     the digit'th parenthesized substring; \\\\0 will\n *                     produce the entire contents of string. Up to nine\n *                     substrings may be used. Parentheses may be nested,\n *                     in which case they are counted by the opening\n *                     parenthesis.\n * @str        string  The input string.\n *\n * @return     string  The modified string is returned. If no matches are\n *                     found in string, then it will be returned unchanged.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ereg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ereg.php )\n *\n *\n * @pattern    string  Case sensitive regular expression.\n * @str        string  The input string.\n * @regs       mixed   If matches are found for parenthesized substrings of\n *                     pattern and the function is called with the third\n *                     argument regs, the matches will be stored in the\n *                     elements of the array regs.\n *\n *                     $regs[1] will contain the substring which starts at\n *                     the first left parenthesis; $regs[2] will contain\n *                     the substring starting at the second, and so on.\n *                     $regs[0] will contain a copy of the complete string\n *                     matched.\n *\n * @return     mixed   Returns the length of the matched string if a match\n *                     for pattern was found in string, or FALSE if no\n *                     matches were found or an error occurred.\n *\n *                     If the optional parameter regs was not passed or\n *                     the length of the matched string is 0, this function\n *                     returns 1.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "regs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "eregi", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.eregi.php )\n *\n * This function is identical to ereg() except that it ignores case\n * distinction when matching alphabetic characters. WarningThis function\n * has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly\n * discouraged.\n *\n * @pattern    string  Case insensitive regular expression.\n * @str        string  The input string.\n * @regs       mixed   If matches are found for parenthesized substrings of\n *                     pattern and the function is called with the third\n *                     argument regs, the matches will be stored in the\n *                     elements of the array regs.\n *\n *                     $regs[1] will contain the substring which starts at\n *                     the first left parenthesis; $regs[2] will contain\n *                     the substring starting at the second, and so on.\n *                     $regs[0] will contain a copy of the complete string\n *                     matched.\n *\n * @return     mixed   Returns the length of the matched string if a match\n *                     for pattern was found in string, or FALSE if no\n *                     matches were found or an error occurred.\n *\n *                     If the optional parameter regs was not passed or\n *                     the length of the matched string is 0, this function\n *                     returns 1.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "regs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "split", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.split.php )\n *\n * Splits a string into array by regular expression. WarningThis function\n * has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly\n * discouraged.\n *\n * @pattern    string  Case sensitive regular expression.\n *\n *                     If you want to split on any of the characters which\n *                     are considered special by regular expressions,\n *                     you'll need to escape them first. If you think\n *                     split() (or any other regex function, for that\n *                     matter) is doing something weird, please read the\n *                     file regex.7, included in the regex/ subdirectory of\n *                     the PHP distribution. It's in manpage format, so\n *                     you'll want to do something along the lines of man\n *                     /usr/local/src/regex/regex.7 in order to read it.\n * @str        string  The input string.\n * @limit      int     If limit is set, the returned array will contain a\n *                     maximum of limit elements with the last element\n *                     containing the whole rest of string.\n *\n * @return     mixed   Returns an array of strings, each of which is a\n *                     substring of string formed by splitting it on\n *                     boundaries formed by the case-sensitive regular\n *                     expression pattern.\n *\n *                     If there are n occurrences of pattern, the returned\n *                     array will contain n+1 items. For example, if there\n *                     is no occurrence of pattern, an array with only one\n *                     element will be returned. Of course, this is also\n *                     true if string is empty. If an error occurs, split()\n *                     returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spliti", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.spliti.php )\n *\n * Splits a string into array by regular expression.\n *\n * This function is identical to split() except that this ignores case\n * distinction when matching alphabetic characters. WarningThis function\n * has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly\n * discouraged.\n *\n * @pattern    string  Case insensitive regular expression.\n *\n *                     If you want to split on any of the characters which\n *                     are considered special by regular expressions,\n *                     you'll need to escape them first. If you think\n *                     spliti() (or any other regex function, for that\n *                     matter) is doing something weird, please read the\n *                     file regex.7, included in the regex/ subdirectory of\n *                     the PHP distribution. It's in manpage format, so\n *                     you'll want to do something along the lines of man\n *                     /usr/local/src/regex/regex.7 in order to read it.\n * @str        string  The input string.\n * @limit      int     If limit is set, the returned array will contain a\n *                     maximum of limit elements with the last element\n *                     containing the whole rest of string.\n *\n * @return     mixed   Returns an array of strings, each of which is a\n *                     substring of string formed by splitting it on\n *                     boundaries formed by the case insensitive regular\n *                     expression pattern.\n *\n *                     If there are n occurrences of pattern, the returned\n *                     array will contain n+1 items. For example, if there\n *                     is no occurrence of pattern, an array with only one\n *                     element will be returned. Of course, this is also\n *                     true if string is empty. If an error occurs,\n *                     spliti() returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sql_regcase", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sql-regcase.php )\n *\n * Creates a regular expression for a case insensitive match. WarningThis\n * function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is\n * highly discouraged.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns a valid regular expression which will match\n *                     string, ignoring case. This expression is string\n *                     with each alphabetic character converted to a\n *                     bracket expression; this bracket expression contains\n *                     that character's uppercase and lowercase form. Other\n *                     characters remain unchanged.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_note", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apache-note.php )\n *\n * This function is a wrapper for Apache's table_get and table_set. It\n * edits the table of notes that exists during a request. The table's\n * purpose is to allow Apache modules to communicate.\n *\n * The main use for apache_note() is to pass information from one module\n * to another within the same request.\n *\n * @note_name  string  The name of the note.\n * @note_value string  The value of the note.\n *\n * @return     mixed   If called with one argument, it returns the current\n *                     value of note note_name. If called with two\n *                     arguments, it sets the value of note note_name to\n *                     note_value and returns the previous value of note\n *                     note_name. If the note cannot be retrieved, FALSE is\n *                     returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "note_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "note_value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_request_headers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-request-headers.php )\n *\n * Fetches all HTTP request headers from the current request. This\n * function is only supported when PHP is installed as an Apache module.\n *\n * @return     vector  An associative array of all the HTTP headers in the\n *                     current request, or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_response_headers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-response-headers.php )\n *\n * Fetch all HTTP response headers.\n *\n * @return     vector  An array of all Apache response headers on success\n *                     or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_setenv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apache-setenv.php )\n *\n * apache_setenv() sets the value of the Apache environment variable\n * specified by variable.\n *\n * When setting an Apache environment variable, the corresponding $_SERVER\n * variable is not changed.\n *\n * @variable   string  The environment variable that's being set.\n * @value      string  The new variable value.\n * @walk_to_top\n *             bool    Whether to set the top-level variable available to\n *                     all Apache layers.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "variable", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "walk_to_top", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getallheaders", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getallheaders.php )\n *\n * Fetches all HTTP headers from the current request.\n *\n * This function is an alias for apache_request_headers(). Please read the\n * apache_request_headers() documentation for more information on how this\n * function works. This function is only supported when PHP is installed as\n * an Apache module.\n *\n * @return     vector  An associative array of all the HTTP headers in the\n *                     current request, or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "virtual", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.virtual.php )\n *\n * virtual() is an Apache-specific function which is similar to\n * <!--#include virtual...--> in mod_include. It performs an Apache\n * sub-request. It is useful for including CGI scripts or .shtml files, or\n * anything else that you would parse through Apache. Note that for a CGI\n * script, the script must generate valid CGI headers. At the minimum that\n * means it must generate a Content-Type header.\n *\n * To run the sub-request, all buffers are terminated and flushed to the\n * browser, pending headers are sent too. This function is only supported\n * when PHP is installed as an Apache module.\n *\n * @filename   string  The file that the virtual command will be performed\n *                     on.\n *\n * @return     bool    Performs the virtual command on success, or returns\n *                     FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_get_config", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apache-get-config.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_get_scoreboard", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-get-scoreboard.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apache_get_rewrite_rules", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apache-get-rewrite-rules.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "base64_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.base64-decode.php )\n *\n * Decodes a base64 encoded data.\n *\n * @data       string  The encoded data.\n * @strict     bool    Returns FALSE if input contains character from\n *                     outside the base64 alphabet.\n *\n * @return     mixed   Returns the original data or FALSE on failure. The\n *                     returned data may be binary.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strict", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "base64_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.base64-encode.php )\n *\n * Encodes the given data with base64.\n *\n * This encoding is designed to make binary data survive transport through\n * transport layers that are not 8-bit clean, such as mail bodies.\n *\n * Base64-encoded data takes about 33% more space than the original data.\n *\n * @data       string  The data to encode.\n *\n * @return     string  The encoded data, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_headers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-headers.php )\n *\n * get_headers() returns an array with the headers sent by the server in\n * response to a HTTP request.\n *\n * @url        string  The target URL.\n * @format     int     If the optional format parameter is set to non-zero,\n *                     get_headers() parses the response and sets the\n *                     array's keys.\n *\n * @return     mixed   Returns an indexed or associative array with the\n *                     headers, or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_meta_tags", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-meta-tags.php )\n *\n * Opens filename and parses it line by line for <meta> tags in the file.\n * The parsing stops at </head>.\n *\n * @filename   string  The path to the HTML file, as a string. This can be\n *                     a local file or an URL.\n *\n *                     Example #1 What get_meta_tags() parses\n *\n *                     (pay attention to line endings - PHP uses a native\n *                     function to parse the input, so a Mac file won't\n *                     work on Unix).\n * @use_include_path\n *             bool    Setting use_include_path to TRUE will result in PHP\n *                     trying to open the file along the standard include\n *                     path as per the include_path directive. This is used\n *                     for local files, not URLs.\n *\n * @return     vector  Returns an array with all the parsed meta tags.\n *\n *                     The value of the name property becomes the key, the\n *                     value of the content property becomes the value of\n *                     the returned array, so you can easily use standard\n *                     array functions to traverse it or access single\n *                     values. Special characters in the value of the name\n *                     property are substituted with '_', the rest is\n *                     converted to lower case. If two meta tags have the\n *                     same name, only the last one is returned.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "http_build_query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.http-build-query.php )\n *\n * Generates a URL-encoded query string from the associative (or indexed)\n * array provided.\n *\n * @formdata   mixed   May be an array or object containing properties.\n *\n *                     If query_data is an array, it may be a simple\n *                     one-dimensional structure, or an array of arrays\n *                     (which in turn may contain other arrays).\n *\n *                     If query_data is an object, then only public\n *                     properties will be incorporated into the result.\n * @numeric_prefix\n *             string  If numeric indices are used in the base array and\n *                     this parameter is provided, it will be prepended to\n *                     the numeric index for elements in the base array\n *                     only.\n *\n *                     This is meant to allow for legal variable names\n *                     when the data is decoded by PHP or another CGI\n *                     application later on.\n * @arg_separator\n *             string  arg_separator.output is used to separate arguments,\n *                     unless this parameter is specified, and is then\n *                     used.\n *\n * @return     mixed   Returns a URL-encoded string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "formdata", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "numeric_prefix", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "arg_separator", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "parse_url", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.parse-url.php )\n *\n * This function parses a URL and returns an associative array containing\n * any of the various components of the URL that are present.\n *\n * This function is not meant to validate the given URL, it only breaks it\n * up into the above listed parts. Partial URLs are also accepted,\n * parse_url() tries its best to parse them correctly.\n *\n * @url        string  The URL to parse. Invalid characters are replaced by\n *                     _.\n * @component  int     Specify one of PHP_URL_SCHEME, PHP_URL_HOST,\n *                     PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS,\n *                     PHP_URL_PATH, PHP_URL_QUERY or PHP_URL_FRAGMENT to\n *                     retrieve just a specific URL component as a string.\n *\n * @return     mixed   On seriously malformed URLs, parse_url() may return\n *                     FALSE. Otherwise an associative array is returned,\n *                     whose components may be (at least one): scheme -\n *                     e.g. http host port user pass path query - after the\n *                     question mark \? fragment - after the hashmark #\n *\n *                     If the component parameter is specified a string is\n *                     returned instead of an array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "component", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rawurldecode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rawurldecode.php )\n *\n * Returns a string in which the sequences with percent (%) signs followed\n * by two hex digits have been replaced with literal characters.\n *\n * @str        string  The URL to be decoded.\n *\n * @return     string  Returns the decoded URL, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rawurlencode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rawurlencode.php )\n *\n *\n * @str        string  The URL to be encoded.\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "urldecode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.urldecode.php )\n *\n * Decodes any %## encoding in the given string. Plus symbols ('+') are\n * decoded to a space character.\n *\n * @str        string  The string to be decoded.\n *\n * @return     string  Returns the decoded string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "urlencode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.urlencode.php )\n *\n * This function is convenient when encoding a string to be used in a\n * query part of a URL, as a convenient way to pass variables to the next\n * page.\n *\n * @str        string  The string to be encoded.\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_csr_export_to_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-csr-export-to-file.php )\n *\n * openssl_csr_export_to_file() takes the Certificate Signing Request\n * represented by csr and saves it as ascii-armoured text into the file\n * named by outfilename.\n *\n * @csr        mixed\n * @outfilename\n *             string  Path to the output file.\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "csr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "notext", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_csr_export", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-csr-export.php\n * )\n *\n * openssl_csr_export() takes the Certificate Signing Request represented\n * by csr and stores it as ascii-armoured text into out, which is passed by\n * reference.\n *\n * @csr        mixed\n * @out        mixed\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "csr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "out", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "notext", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_csr_get_public_key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-csr-get-public-key.php )\n *\n *\n * @csr        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "csr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_csr_get_subject", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-csr-get-subject.php )\n *\n *\n * @csr        mixed\n * @use_shortnames\n *             bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "csr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_shortnames", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_csr_new", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-csr-new.php )\n *\n * openssl_csr_new() generates a new CSR (Certificate Signing Request)\n * based on the information provided by dn, which represents the\n * Distinguished Name to be used in the certificate. You need to have a\n * valid openssl.cnf installed for this function to operate correctly. See\n * the notes under the installation section for more information.\n *\n * @dn         map     The Distinguished Name to be used in the\n *                     certificate.\n * @privkey    mixed   privkey should be set to a private key that was\n *                     previously generated by openssl_pkey_new() (or\n *                     otherwise obtained from the other openssl_pkey\n *                     family of functions). The corresponding public\n *                     portion of the key will be used to sign the CSR.\n * @configargs mixed   By default, the information in your system\n *                     openssl.conf is used to initialize the request; you\n *                     can specify a configuration file section by setting\n *                     the config_section_section key of configargs. You\n *                     can also specify an alternative openssl\n *                     configuration file by setting the value of the\n *                     config key to the path of the file you want to use.\n *                     The following keys, if present in configargs behave\n *                     as their equivalents in the openssl.conf, as listed\n *                     in the table below. Configuration overrides\n *                     configargs key type openssl.conf equivalent\n *                     description digest_alg string default_md Selects\n *                     which digest method to use x509_extensions string\n *                     x509_extensions Selects which extensions should be\n *                     used when creating an x509 certificate\n *                     req_extensions string req_extensions Selects which\n *                     extensions should be used when creating a CSR\n *                     private_key_bits integer default_bits Specifies how\n *                     many bits should be used to generate a private key\n *                     private_key_type integer none Specifies the type of\n *                     private key to create. This can be one of\n *                     OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH or\n *                     OPENSSL_KEYTYPE_RSA. The default value is\n *                     OPENSSL_KEYTYPE_RSA which is currently the only\n *                     supported key type. encrypt_key boolean encrypt_key\n *                     Should an exported key (with passphrase) be\n *                     encrypted\?\n * @extraattribs\n *             mixed   extraattribs is used to specify additional\n *                     configuration options for the CSR. Both dn and\n *                     extraattribs are associative arrays whose keys are\n *                     converted to OIDs and applied to the relevant part\n *                     of the request.\n *\n * @return     mixed   Returns the CSR.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "dn", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "privkey", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "configargs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "extraattribs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_csr_sign", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-csr-sign.php )\n *\n * openssl_csr_sign() generates an x509 certificate resource from the\n * given CSR. You need to have a valid openssl.cnf installed for this\n * function to operate correctly. See the notes under the installation\n * section for more information.\n *\n * @csr        mixed   A CSR previously generated by openssl_csr_new(). It\n *                     can also be the path to a PEM encoded CSR when\n *                     specified as file://path/to/csr or an exported\n *                     string generated by openssl_csr_export().\n * @cacert     mixed   The generated certificate will be signed by cacert.\n *                     If cacert is NULL, the generated certificate will be\n *                     a self-signed certificate.\n * @priv_key   mixed   priv_key is the private key that corresponds to\n *                     cacert.\n * @days       int     days specifies the length of time for which the\n *                     generated certificate will be valid, in days.\n * @configargs mixed   You can finetune the CSR signing by configargs. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n * @serial     int     An optional the serial number of issued certificate.\n *                     If not specified it will default to 0.\n *\n * @return     mixed   Returns an x509 certificate resource on success,\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "csr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cacert", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "priv_key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "days", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "configargs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "serial", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_error_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-error-string.php )\n *\n * openssl_error_string() returns the last error from the openSSL library.\n * Error messages are stacked, so this function should be called multiple\n * times to collect all of the information.\n *\n * @return     mixed   Returns an error message string, or FALSE if there\n *                     are no more error messages to return.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-open.php )\n *\n * openssl_open() opens (decrypts) sealed_data using the private key\n * associated with the key identifier priv_key_id and the envelope key\n * env_key, and fills open_data with the decrypted data. The envelope key\n * is generated when the data are sealed and can only be used by one\n * specific private key. See openssl_seal() for more information.\n *\n * @sealed_data\n *             string\n * @open_data  mixed   If the call is successful the opened data is\n *                     returned in this parameter.\n * @env_key    string\n * @priv_key_id\n *             mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "sealed_data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "open_data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "env_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "priv_key_id", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs12_export_to_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs12-export-to-file.php )\n *\n * openssl_pkcs12_export_to_file() stores x509 into a file named by\n * filename in a PKCS#12 file format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @filename   string  Path to the output file.\n * @priv_key   mixed   Private key component of PKCS#12 file.\n * @pass       string  Encryption password for unlocking the PKCS#12 file.\n * @args       mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "x509", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "priv_key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pass", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs12_export", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs12-export.php )\n *\n * openssl_pkcs12_export() stores x509 into a string named by out in a\n * PKCS#12 file format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @out        mixed   On success, this will hold the PKCS#12.\n * @priv_key   mixed   Private key component of PKCS#12 file.\n * @pass       string  Encryption password for unlocking the PKCS#12 file.\n * @args       mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "x509", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "out", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "priv_key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pass", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs12_read", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkcs12-read.php\n * )\n *\n * openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by\n * pkcs12 into a array named certs.\n *\n * @pkcs12     string\n * @certs      mixed   On success, this will hold the Certificate Store\n *                     Data.\n * @pass       string  Encryption password for unlocking the PKCS#12 file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pkcs12", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "certs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pass", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs7_decrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs7-decrypt.php )\n *\n * Decrypts the S/MIME encrypted message contained in the file specified\n * by infilename using the certificate and its associated private key\n * specified by recipcert and recipkey.\n *\n * @infilename string\n * @outfilename\n *             string  The decrypted message is written to the file\n *                     specified by outfilename.\n * @recipcert  mixed\n * @recipkey   mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "infilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "recipcert", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "recipkey", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs7_encrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs7-encrypt.php )\n *\n * openssl_pkcs7_encrypt() takes the contents of the file named infile and\n * encrypts them using an RC2 40-bit cipher so that they can only be read\n * by the intended recipients specified by recipcerts.\n *\n * @infilename string\n * @outfilename\n *             string\n * @recipcerts mixed   Either a lone X.509 certificate, or an array of\n *                     X.509 certificates.\n * @headers    vector  headers is an array of headers that will be\n *                     prepended to the data after it has been encrypted.\n *\n *                     headers can be either an associative array keyed by\n *                     header name, or an indexed array, where each element\n *                     contains a single header line.\n * @flags      int     flags can be used to specify options that affect the\n *                     encoding process - see PKCS7 constants.\n * @cipherid   int     Cipher can be selected with cipherid.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "infilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "recipcerts", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "cipherid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "OPENSSL_CIPHER_RC2_40", (const char *)21, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs7_sign", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkcs7-sign.php\n * )\n *\n * openssl_pkcs7_sign() takes the contents of the file named infilename\n * and signs them using the certificate and its matching private key\n * specified by signcert and privkey parameters.\n *\n * @infilename string\n * @outfilename\n *             string\n * @signcert   mixed\n * @privkey    mixed\n * @headers    mixed   headers is an array of headers that will be\n *                     prepended to the data after it has been signed (see\n *                     openssl_pkcs7_encrypt() for more information about\n *                     the format of this parameter).\n * @flags      int     flags can be used to alter the output - see PKCS7\n *                     constants.\n * @extracerts string  extracerts specifies the name of a file containing a\n *                     bunch of extra certificates to include in the\n *                     signature which can for example be used to help the\n *                     recipient to verify the certificate that you used.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "infilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "signcert", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "privkey", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:64;", (const char *)5, "PKCS7_DETACHED", (const char *)14, NULL,
  (const char *)0x2000, "extracerts", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkcs7_verify", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs7-verify.php )\n *\n * openssl_pkcs7_verify() reads the S/MIME message contained in the given\n * file and examines the digital signature.\n *\n * @filename   string  Path to the message.\n * @flags      int     flags can be used to affect how the signature is\n *                     verified - see PKCS7 constants for more information.\n * @outfilename\n *             string  If the outfilename is specified, it should be a\n *                     string holding the name of a file into which the\n *                     certificates of the persons that signed the messages\n *                     will be stored in PEM format.\n * @cainfo     vector  If the cainfo is specified, it should hold\n *                     information about the trusted CA certificates to use\n *                     in the verification process - see certificate\n *                     verification for more information about this\n *                     parameter.\n * @extracerts string  If the extracerts is specified, it is the filename\n *                     of a file containing a bunch of certificates to use\n *                     as untrusted CAs.\n * @content    string  You can specify a filename with content that will be\n *                     filled with the verified data, but with the\n *                     signature information stripped.\n *\n * @return     mixed   Returns TRUE if the signature is verified, FALSE if\n *                     it is not correct (the message has been tampered\n *                     with, or the signing certificate is invalid), or -1\n *                     on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "cainfo", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "extracerts", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_export_to_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-export-to-file.php )\n *\n * openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded)\n * rendition of key into the file named by outfilename. You need to have a\n * valid openssl.cnf installed for this function to operate correctly. See\n * the notes under the installation section for more information.\n *\n * @key        mixed\n * @outfilename\n *             string  Path to the output file.\n * @passphrase string  The key can be optionally protected by a passphrase.\n * @configargs mixed   configargs can be used to fine-tune the export\n *                     process by specifying and/or overriding options for\n *                     the openssl configuration file. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "passphrase", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "configargs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_export", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkey-export.php\n * )\n *\n * openssl_pkey_export() exports key as a PEM encoded string and stores it\n * into out (which is passed by reference). You need to have a valid\n * openssl.cnf installed for this function to operate correctly. See the\n * notes under the installation section for more information.\n *\n * @key        mixed\n * @out        mixed\n * @passphrase string  The key is optionally protected by passphrase.\n * @configargs mixed   configargs can be used to fine-tune the export\n *                     process by specifying and/or overriding options for\n *                     the openssl configuration file. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "out", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "passphrase", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "configargs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_free", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkey-free.php )\n *\n * This function frees a private key created by openssl_pkey_new().\n *\n * @key        object  Resource holding the key.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "key", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_free_key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-free-key.php )\n *\n * openssl_free_key() frees the key associated with the specified\n * key_identifier from memory.\n *\n * @key        object\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "key", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_get_details", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-get-details.php )\n *\n * This function returns the key details (bits, key, type).\n *\n * @key        object  Resource holding the key.\n *\n * @return     map     Returns an array with the key details in success or\n *                     FALSE in failure. Returned array has indexes bits\n *                     (number of bits), key (string representation of the\n *                     public key) and type (type of the key which is one\n *                     of OPENSSL_KEYTYPE_RSA, OPENSSL_KEYTYPE_DSA,\n *                     OPENSSL_KEYTYPE_DH, OPENSSL_KEYTYPE_EC or -1 meaning\n *                     unknown).\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "key", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_get_private", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-get-private.php )\n *\n * openssl_get_privatekey() parses key and prepares it for use by other\n * functions.\n *\n * @key        mixed   key can be one of the following: a string having the\n *                     format file://path/to/file.pem. The named file must\n *                     contain a PEM encoded certificate/private key (it\n *                     may contain both). A PEM formatted private key.\n * @passphrase string  The optional parameter passphrase must be used if\n *                     the specified key is encrypted (protected by a\n *                     passphrase).\n *\n * @return     mixed   Returns a positive key resource identifier on\n *                     success, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "passphrase", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_get_privatekey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-privatekey.php )\n *\n *\n * @key        mixed\n * @passphrase string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "passphrase", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_get_public", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-get-public.php )\n *\n * openssl_get_publickey() extracts the public key from certificate and\n * prepares it for use by other functions.\n *\n * @certificate\n *             mixed   certificate can be one of the following: an X.509\n *                     certificate resource a string having the format\n *                     file://path/to/file.pem. The named file must contain\n *                     a PEM encoded certificate/private key (it may\n *                     contain both). A PEM formatted private key.\n *\n * @return     mixed   Returns a positive key resource identifier on\n *                     success, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "certificate", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_get_publickey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-publickey.php )\n *\n *\n * @certificate\n *             mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "certificate", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_pkey_new", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkey-new.php )\n *\n * openssl_pkey_new() generates a new private and public key pair. The\n * public component of the key can be obtained using\n * openssl_pkey_get_public(). You need to have a valid openssl.cnf\n * installed for this function to operate correctly. See the notes under\n * the installation section for more information.\n *\n * @configargs mixed   You can finetune the key generation (such as\n *                     specifying the number of bits) using configargs. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n *\n * @return     object  Returns a resource identifier for the pkey on\n *                     success, or FALSE on error.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "configargs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_private_decrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-private-decrypt.php )\n *\n * openssl_private_decrypt() decrypts data that was previous encrypted via\n * openssl_public_encrypt() and stores the result into decrypted.\n *\n * You can use this function e.g. to decrypt data which were supposed only\n * to you.\n *\n * @data       string\n * @decrypted  mixed\n * @key        mixed   key must be the private key corresponding that was\n *                     used to encrypt the data.\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "decrypted", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "padding", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "OPENSSL_PKCS1_PADDING", (const char *)21, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_private_encrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-private-encrypt.php )\n *\n * openssl_private_encrypt() encrypts data with private key and stores the\n * result into crypted. Encrypted data can be decrypted via\n * openssl_public_decrypt().\n *\n * This function can be used e.g. to sign data (or its hash) to prove that\n * it is not written by someone else.\n *\n * @data       string\n * @crypted    mixed\n * @key        mixed\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "crypted", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "padding", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "OPENSSL_PKCS1_PADDING", (const char *)21, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_public_decrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-public-decrypt.php )\n *\n * openssl_public_decrypt() decrypts data that was previous encrypted via\n * openssl_private_encrypt() and stores the result into decrypted.\n *\n * You can use this function e.g. to check if the message was written by\n * the owner of the private key.\n *\n * @data       string\n * @decrypted  mixed\n * @key        mixed   key must be the public key corresponding that was\n *                     used to encrypt the data.\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "decrypted", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "padding", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "OPENSSL_PKCS1_PADDING", (const char *)21, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_public_encrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-public-encrypt.php )\n *\n * openssl_public_encrypt() encrypts data with public key and stores the\n * result into crypted. Encrypted data can be decrypted via\n * openssl_private_decrypt().\n *\n * This function can be used e.g. to encrypt message which can be then\n * read only by owner of the private key. It can be also used to store\n * secure data in database.\n *\n * @data       string\n * @crypted    mixed   This will hold the result of the encryption.\n * @key        mixed   The public key.\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "crypted", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "padding", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "OPENSSL_PKCS1_PADDING", (const char *)21, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_seal", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-seal.php )\n *\n * openssl_seal() seals (encrypts) data by using RC4 with a randomly\n * generated secret key. The key is encrypted with each of the public keys\n * associated with the identifiers in pub_key_ids and each encrypted key is\n * returned in env_keys. This means that one can send sealed data to\n * multiple recipients (provided one has obtained their public keys). Each\n * recipient must receive both the sealed data and the envelope key that\n * was encrypted with the recipient's public key.\n *\n * @data       string\n * @sealed_data\n *             mixed\n * @env_keys   mixed\n * @pub_key_ids\n *             vector\n *\n * @return     mixed   Returns the length of the sealed data on success, or\n *                     FALSE on error. If successful the sealed data is\n *                     returned in sealed_data, and the envelope keys in\n *                     env_keys.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "sealed_data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "env_keys", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pub_key_ids", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_sign", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-sign.php )\n *\n * openssl_sign() computes a signature for the specified data by using\n * SHA1 for hashing followed by encryption using the private key associated\n * with priv_key_id. Note that the data itself is not encrypted.\n *\n * @data       string\n * @signature  mixed   If the call was successful the signature is returned\n *                     in signature.\n * @priv_key_id\n *             mixed\n * @signature_alg\n *             int     For more information see the list of Signature\n *                     Algorithms.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "signature", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "priv_key_id", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "signature_alg", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "OPENSSL_ALGO_SHA1", (const char *)17, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_verify", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-verify.php )\n *\n * openssl_verify() verifies that the signature is correct for the\n * specified data using the public key associated with pub_key_id. This\n * must be the public key corresponding to the private key used for\n * signing.\n *\n * @data       string\n * @signature  string\n * @pub_key_id mixed\n * @signature_alg\n *             int     For more information see the list of Signature\n *                     Algorithms.\n *\n * @return     mixed   Returns 1 if the signature is correct, 0 if it is\n *                     incorrect, and -1 on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "signature", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pub_key_id", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "signature_alg", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "OPENSSL_ALGO_SHA1", (const char *)17, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_check_private_key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-x509-check-private-key.php )\n *\n * Checks whether the given key is the private key that corresponds to\n * cert.\n *\n * @cert       mixed   The certificate.\n * @key        mixed   The private key.\n *\n * @return     bool    Returns TRUE if key is the private key that\n *                     corresponds to cert, or FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "cert", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_checkpurpose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-x509-checkpurpose.php )\n *\n * openssl_x509_checkpurpose() examines a certificate to see if it can be\n * used for the specified purpose.\n *\n * @x509cert   mixed   The examined certificate.\n * @purpose    int     openssl_x509_checkpurpose() purposes Constant\n *                     Description X509_PURPOSE_SSL_CLIENT Can the\n *                     certificate be used for the client side of an SSL\n *                     connection\? X509_PURPOSE_SSL_SERVER Can the\n *                     certificate be used for the server side of an SSL\n *                     connection\? X509_PURPOSE_NS_SSL_SERVER Can the cert\n *                     be used for Netscape SSL server\?\n *                     X509_PURPOSE_SMIME_SIGN Can the cert be used to sign\n *                     S/MIME email\? X509_PURPOSE_SMIME_ENCRYPT Can the\n *                     cert be used to encrypt S/MIME email\?\n *                     X509_PURPOSE_CRL_SIGN Can the cert be used to sign a\n *                     certificate revocation list (CRL)\? X509_PURPOSE_ANY\n *                     Can the cert be used for Any/All purposes\? These\n *                     options are not bitfields - you may specify one\n *                     only!\n * @cainfo     vector  cainfo should be an array of trusted CA files/dirs\n *                     as described in Certificate Verification.\n * @untrustedfile\n *             string  If specified, this should be the name of a PEM\n *                     encoded file holding certificates that can be used\n *                     to help verify the certificate, although no trust is\n *                     placed in the certificates that come from that file.\n *\n * @return     int     Returns TRUE if the certificate can be used for the\n *                     intended purpose, FALSE if it cannot, or -1 on\n *                     error.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "x509cert", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "purpose", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cainfo", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "untrustedfile", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_export_to_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-x509-export-to-file.php )\n *\n * openssl_x509_export_to_file() stores x509 into a file named by\n * outfilename in a PEM encoded format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @outfilename\n *             string  Path to the output file.\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "x509", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outfilename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "notext", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_export", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-export.php\n * )\n *\n * openssl_x509_export() stores x509 into a string named by output in a\n * PEM encoded format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @output     mixed   On success, this will hold the PEM.\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "x509", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "output", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "notext", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_free", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-free.php )\n *\n * openssl_x509_free() frees the certificate associated with the specified\n * x509cert resource from memory.\n *\n * @x509cert   object\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "x509cert", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_parse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-parse.php\n * )\n *\n * openssl_x509_parse() returns information about the supplied x509cert,\n * including fields such as subject name, issuer name, purposes, valid from\n * and valid to dates etc.\n *\n * @x509cert   mixed\n * @shortnames bool    shortnames controls how the data is indexed in the\n *                     array - if shortnames is TRUE (the default) then\n *                     fields will be indexed with the short name form,\n *                     otherwise, the long name form will be used - e.g.:\n *                     CN is the shortname form of commonName.\n *\n * @return     mixed   The structure of the returned data is (deliberately)\n *                     not yet documented, as it is still subject to\n *                     change.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "x509cert", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "shortnames", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_x509_read", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-read.php )\n *\n * openssl_x509_read() parses the certificate supplied by x509certdata and\n * returns a resource identifier for it.\n *\n * @x509certdata\n *             mixed\n *\n * @return     mixed   Returns a resource identifier on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "x509certdata", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_random_pseudo_bytes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-random-pseudo-bytes.php )\n *\n * Generates a string of pseudo-random bytes, with the number of bytes\n * determined by the length parameter.\n *\n * It also indicates if a cryptographically strong algorithm was used to\n * produce the pseudo-random bytes, and does this via the optional\n * crypto_strong parameter. It's rare for this to be FALSE, but some\n * systems may be broken or old.\n *\n * @length     int     The length of the desired string of bytes. Must be a\n *                     positive integer. PHP will try to cast this\n *                     parameter to a non-null integer to use it.\n * @crypto_strong\n *             mixed   If passed into the function, this will hold a\n *                     boolean value that determines if the algorithm used\n *                     was \"cryptographically strong\", e.g., safe for usage\n *                     with GPG, passwords, etc. TRUE if it did, otherwise\n *                     FALSE\n *\n * @return     mixed   Returns the generated string of bytes on success, or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "crypto_strong", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_cipher_iv_length", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-cipher-iv-length.php )\n *\n * Returns the required initialisation vector length for the cipher\n * determined by the mode parameter.\n *\n * @method     string  The cipher method.\n *\n * @return     mixed   Returns the iv length of a cipher, or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "method", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_encrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-encrypt.php )\n *\n * Encrypts given data with given method and key, returns a raw or base64\n * encoded string WarningThis function is currently not documented; only\n * its argument list is available.\n *\n * @data       string  The data.\n * @method     string  The cipher method.\n * @password   string  The password.\n * @options    int     Setting to TRUE will return as raw output data,\n *                     otherwise the return value is base64 encoded.\n * @iv         string  The initialisation vector.\n *\n * @return     mixed   Returns the encrypted string on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "method", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_decrypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-decrypt.php )\n *\n * Takes a raw or base64 encoded string and decrypts it using a given\n * method and key.\n *\n * @data       string  The data.\n * @method     string  The cipher method.\n * @password   string  The password.\n * @options    int     Setting to TRUE will take a raw encoded string,\n *                     otherwise a base64 string is assumed for the data\n *                     parameter.\n * @iv         string  The initialisation vector.\n *\n * @return     mixed   The decrypted string on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "method", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "iv", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_digest", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-digest.php )\n *\n * Computes digest hash value for given data using given method, returns\n * raw or binhex encoded string.\n *\n * @data       string  The data.\n * @method     string  The digest method.\n * @raw_output bool    Setting to TRUE will return as raw output data,\n *                     otherwise the return value is binhex encoded.\n *\n * @return     mixed   Returns the digested hash value on success or FALSE\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "method", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_get_cipher_methods", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-cipher-methods.php )\n *\n * Gets a list of available cipher methods.\n *\n * @aliases    bool    Set to TRUE if cipher aliases should be included\n *                     within the returned array.\n *\n * @return     vector  An array of available cipher methods.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "aliases", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openssl_get_md_methods", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-md-methods.php )\n *\n * Gets a list of available digest methods.\n *\n * @aliases    bool    Set to TRUE if digest aliases should be included\n *                     within the returned array.\n *\n * @return     vector  An array of available digest methods.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "aliases", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mail", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mail.php )\n *\n * Sends an email.\n *\n * @to         string\n * @subject    string\n * @message    string  Message to be sent.\n *\n *                     Each line should be separated with a LF (\\n). Lines\n *                     should not be larger than 70 characters. Caution\n *\n *                     (Windows only) When PHP is talking to a SMTP server\n *                     directly, if a full stop is found on the start of a\n *                     line, it is removed. To counter-act this, replace\n *                     these occurrences with a double dot.\n * @additional_headers\n *             string\n * @additional_parameters\n *             string  The additional_parameters parameter can be used to\n *                     pass additional flags as command line options to the\n *                     program configured to be used when sending mail, as\n *                     defined by the sendmail_path configuration setting.\n *                     For example, this can be used to set the envelope\n *                     sender address when using sendmail with the -f\n *                     sendmail option.\n *\n *                     The user that the webserver runs as should be added\n *                     as a trusted user to the sendmail configuration to\n *                     prevent a 'X-Warning' header from being added to the\n *                     message when the envelope sender (-f) is set using\n *                     this method. For sendmail users, this file is\n *                     /etc/mail/trusted-users.\n *\n * @return     bool    Returns TRUE if the mail was successfully accepted\n *                     for delivery, FALSE otherwise.\n *\n *                     It is important to note that just because the mail\n *                     was accepted for delivery, it does NOT mean the mail\n *                     will actually reach the intended destination.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "to", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "additional_headers", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "additional_parameters", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ezmlm_hash", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ezmlm-hash.php )\n *\n *\n * @addr       string  The email address that's being hashed.\n *\n * @return     int     The hash value of addr.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "addr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-create.php )\n *\n * Create a MIME mail resource.\n *\n * @return     resource\n *                     Returns a handle that can be used to parse a\n *                     message.\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_free", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mailparse-msg-free.php\n * )\n *\n * Frees a MIME resource.\n *\n * @mimemail   resource\n *                     A valid MIME resource allocated by\n *                     mailparse_msg_create() or\n *                     mailparse_msg_parse_file().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_parse_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-parse-file.php )\n *\n * Parses a file. This is the optimal way of parsing a mail file that you\n * have on disk.\n *\n * @filename   string  Path to the file holding the message. The file is\n *                     opened and streamed through the parser.\n *\n * @return     mixed   Returns a MIME resource representing the structure,\n *                     or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_parse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mailparse-msg-parse.php\n * )\n *\n * Incrementally parse data into the supplied mime mail resource.\n *\n * This function allow you to stream portions of a file at a time, rather\n * than read and parse the whole thing.\n *\n * @mimemail   resource\n *                     A valid MIME resource.\n * @data       string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_extract_part_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-extract-part-file.php )\n *\n * Extracts/decodes a message section from the supplied filename.\n *\n * The contents of the section will be decoded according to their transfer\n * encoding - base64, quoted-printable and uuencoded text are supported.\n *\n * @mimemail   resource\n *                     A valid MIME resource, created with\n *                     mailparse_msg_create().\n * @filename   mixed   Can be a file name or a valid stream resource.\n * @callbackfunc\n *             mixed   If set, this must be either a valid callback that\n *                     will be passed the extracted section, or NULL to\n *                     make this function return the extracted section.\n *\n *                     If not specified, the contents will be sent to\n *                     \"stdout\".\n *\n * @return     mixed   If callbackfunc is not NULL returns TRUE on success.\n *\n *                     If callbackfunc is set to NULL, returns the\n *                     extracted section as a string.\n *\n *                     Returns FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callbackfunc", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_extract_whole_part_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-extract-whole-part-file.php\n * )\n *\n *\n * @mimemail   resource\n *                     A valid MIME resource.\n * @filename   mixed\n * @callbackfunc\n *             mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callbackfunc", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_extract_part", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-extract-part.php )\n *\n *\n * @mimemail   resource\n *                     A valid MIME resource.\n * @msgbody    mixed\n * @callbackfunc\n *             mixed\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msgbody", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callbackfunc", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_get_part_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-get-part-data.php )\n *\n *\n * @mimemail   resource\n *\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_get_part", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-get-part.php )\n *\n *\n * @mimemail   resource\n *\n * @mimesection\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mimesection", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_msg_get_structure", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-get-structure.php )\n *\n *\n * @mimemail   resource\n *\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "mimemail", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_rfc822_parse_addresses", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-rfc822-parse-addresses.php )\n *\n *\n * @addresses  string  A string containing addresses, like in: Wez Furlong\n *                     <wez@example.com>, doe@example.com\n *\n *                     This string must not include the header name.\n *\n * @return     vector  Returns an array of associative arrays with the\n *                     following keys for each recipient: display The\n *                     recipient name, for display purpose. If this part is\n *                     not set for a recipient, this key will hold the same\n *                     value as address. address The email address is_group\n *                     TRUE if the recipient is a newsgroup, FALSE\n *                     otherwise.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "addresses", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_stream_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-stream-encode.php )\n *\n * Streams data from the source file pointer, apply encoding and write to\n * the destination file pointer.\n *\n * @sourcefp   resource\n *                     A valid file handle. The file is streamed through\n *                     the parser.\n * @destfp     resource\n *                     The destination file handle in which the encoded\n *                     data will be written.\n * @encoding   string  One of the character encodings supported by the\n *                     mbstring module.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "sourcefp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "destfp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_uudecode_all", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-uudecode-all.php )\n *\n * Scans the data from the given file pointer and extract each embedded\n * uuencoded file into a temporary file.\n *\n * @fp         resource\n *                     A valid file pointer.\n *\n * @return     mixed   Returns an array of associative arrays listing\n *                     filename information. filename Path to the temporary\n *                     file name created origfilename The original\n *                     filename, for uuencoded parts only The first\n *                     filename entry is the message body. The next entries\n *                     are the decoded uuencoded files.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "fp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mailparse_determine_best_xfer_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-determine-best-xfer-encoding.php\n * )\n *\n * Figures out the best way of encoding the content read from the given\n * file pointer.\n *\n * @fp         resource\n *                     A valid file pointer, which must be seek-able.\n *\n * @return     mixed   Returns one of the character encodings supported by\n *                     the mbstring module.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "fp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphpd_install_user_command", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Expands HipHop debugger with a user extended command.\n *\n * @cmd        string  The command name to register.\n * @clsname    string  The debugger command class that has its\n *                     implementation.\n *\n * @return     bool    TRUE if the command name was not used before, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "cmd", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "clsname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphpd_get_user_commands", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets a list of user extended commands.\n *\n * @return     map     A map of commands and their PHP classes.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphpd_break", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sets a hard breakpoint. When a debugger is running, this line of code\n * will break into debugger, if condition is met. If there is no debugger\n * that's attached, it will not do anything.\n *\n * @condition  bool    If true, break, otherwise, continue.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "condition", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphpd_get_client", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets an hphpd client with a string key (creating on-demand). With the\n * same key, it guarantees to get the same debugger client across multiple\n * requests. One hphpd client can only be gotten by a single request at any\n * given time. Will return null if the client is already gotten.\n *\n * @name       string  the name to identify the debugger client\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphpd_client_ctrl", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Make special operations on a client, such as interrupt a waiting\n * client.\n *\n * @name       string  the name to identify the debugger client\n * @op         string  the string to represent the operation\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "op", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "connection_aborted", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.connection-aborted.php\n * )\n *\n * Checks whether the client disconnected.\n *\n * @return     int     Returns 1 if client disconnected, 0 otherwise.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "connection_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.connection-status.php )\n *\n * Gets the connection status bitfield.\n *\n * @return     int     Returns the connection status bitfield, which can be\n *                     used against the CONNECTION_XXX constants to\n *                     determine the connection status.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "connection_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.connection-timeout.php\n * )\n *\n * Determines whether the script timed out.\n *\n * @return     int     Returns 1 if the script timed out, 0 otherwise.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "constant", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.constant.php )\n *\n *\n * @name       string  The constant name.\n *\n * @return     mixed   Returns the value of the constant, or NULL if the\n *                     constant is not defined.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "define", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.define.php )\n *\n * Defines a named constant at runtime.\n *\n * @name       string  The name of the constant.\n * @value      mixed   The value of the constant; only scalar and null\n *                     values are allowed. Scalar values are integer,\n *                     float, string or boolean values. It is possible to\n *                     define resource constants, however it is not\n *                     recommended and may cause unpredictable behavior.\n * @case_insensitive\n *             bool    If set to TRUE, the constant will be defined\n *                     case-insensitive. The default behavior is\n *                     case-sensitive; i.e. CONSTANT and Constant represent\n *                     different values.\n *\n *                     Case-insensitive constants are stored as\n *                     lower-case.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "case_insensitive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "defined", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.defined.php )\n *\n * Checks whether the given constant exists and is defined.\n *\n * If you want to see if a variable exists, use isset() as defined() only\n * applies to constants. If you want to see if a function exists, use\n * function_exists().\n *\n * @name       string  The constant name.\n * @autoload   bool    Whether to try to autoload.\n *\n * @return     bool    Returns TRUE if the named constant given by name has\n *                     been defined, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "die", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.die.php )\n *\n *\n * @status     mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "status", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exit.php )\n *\n * Terminates execution of the script. Shutdown functions and object\n * destructors will always be executed even if exit() is called.\n *\n * @status     mixed   If status is a string, this function prints the\n *                     status just before exiting.\n *\n *                     If status is an integer, that value will be used as\n *                     the exit status and not printed. Exit statuses\n *                     should be in the range 0 to 254, the exit status 255\n *                     is reserved by PHP and shall not be used. The status\n *                     0 is used to terminate the program successfully. PHP\n *                     >= 4.2.0 does NOT print the status if it is an\n *                     integer.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "status", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "eval", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.eval.php )\n *\n * Evaluates the string given in code_str as PHP code. Among other things,\n * this can be useful for storing code in a database text field for later\n * execution.\n *\n * There are some factors to keep in mind when using eval(). Remember that\n * the string passed must be valid PHP code, including things like\n * terminating statements with a semicolon so the parser doesn't die on the\n * line after the eval(), and properly escaping things in code_str. To mix\n * HTML output and PHP code you can use a closing PHP tag to leave PHP\n * mode.\n *\n * Also remember that variables given values under eval() will retain\n * these values in the main script afterwards.\n *\n * @code_str   string  The code string to be evaluated. code_str does not\n *                     have to contain PHP Opening tags.\n *\n *                     A return statement will immediately terminate the\n *                     evaluation of the string .\n *\n * @return     mixed   eval() returns NULL unless return is called in the\n *                     evaluated code, in which case the value passed to\n *                     return is returned. If there is a parse error in the\n *                     evaluated code, eval() returns FALSE and execution\n *                     of the following code continues normally. It is not\n *                     possible to catch a parse error in eval() using\n *                     set_error_handler().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "code_str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_browser", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-browser.php )\n *\n * Attempts to determine the capabilities of the user's browser, by\n * looking up the browser's information in the browscap.ini file.\n *\n * @user_agent string  The User Agent to be analyzed. By default, the value\n *                     of HTTP User-Agent header is used; however, you can\n *                     alter this (i.e., look up another browser's info) by\n *                     passing this parameter.\n *\n *                     You can bypass this parameter with a NULL value.\n * @return_array\n *             bool    If set to TRUE, this function will return an array\n *                     instead of an object.\n *\n * @return     mixed   The information is returned in an object or an array\n *                     which will contain various data elements\n *                     representing, for instance, the browser's major and\n *                     minor version numbers and ID string; TRUE/FALSE\n *                     values for features such as frames, JavaScript, and\n *                     cookies; and so forth.\n *\n *                     The cookies value simply means that the browser\n *                     itself is capable of accepting cookies and does not\n *                     mean the user has enabled the browser to accept\n *                     cookies or not. The only way to test if cookies are\n *                     accepted is to set one with setcookie(), reload, and\n *                     check for the value.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "user_agent", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "return_array", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__halt_compiler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.halt-compiler.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "highlight_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.highlight-file.php )\n *\n * Prints out or returns a syntax highlighted version of the code\n * contained in filename using the colors defined in the built-in syntax\n * highlighter for PHP.\n *\n * Many servers are configured to automatically highlight files with a\n * phps extension. For example, example.phps when viewed will show the\n * syntax highlighted source of the file. To enable this, add this line to\n * the httpd.conf: AddType application/x-httpd-php-source .phps\n *\n * @filename   string  Path to the PHP file to be highlighted.\n * @ret        bool    Set this parameter to TRUE to make this function\n *                     return the highlighted code.\n *\n * @return     mixed   If return is set to TRUE, returns the highlighted\n *                     code as a string instead of printing it out.\n *                     Otherwise, it will return TRUE on success, FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ret", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "show_source", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.show-source.php )\n *\n *\n * @filename   string\n * @ret        bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ret", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "highlight_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.highlight-string.php )\n *\n *\n * @str        string  The PHP code to be highlighted. This should include\n *                     the opening tag.\n * @ret        bool    Set this parameter to TRUE to make this function\n *                     return the highlighted code.\n *\n * @return     mixed   If return is set to TRUE, returns the highlighted\n *                     code as a string instead of printing it out.\n *                     Otherwise, it will return TRUE on success, FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ret", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ignore_user_abort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ignore-user-abort.php )\n *\n * Sets whether a client disconnect should cause a script to be aborted.\n *\n * When running PHP as a command line script, and the script's tty goes\n * away without the script being terminated then the script will die the\n * next time it tries to write anything, unless value is set to TRUE\n *\n * @setting    bool    If set, this function will set the ignore_user_abort\n *                     ini setting to the given value. If not, this\n *                     function will only return the previous setting\n *                     without changing it.\n *\n * @return     int     Returns the previous setting, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "setting", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "pack", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pack.php )\n *\n * Pack given arguments into binary string according to format.\n *\n * The idea for this function was taken from Perl and all formatting codes\n * work the same as in Perl. However, there are some formatting codes that\n * are missing such as Perl's \"u\" format code.\n *\n * Note that the distinction between signed and unsigned values only\n * affects the function unpack(), where as function pack() gives the same\n * result for signed and unsigned format codes.\n *\n * Also note that PHP internally stores integer values as signed values of\n * a machine-dependent size. If you give it an unsigned integer value too\n * large to be stored that way it is converted to a float which often\n * yields an undesired result.\n *\n * @format     string  The format string consists of format codes followed\n *                     by an optional repeater argument. The repeater\n *                     argument can be either an integer value or * for\n *                     repeating to the end of the input data. For a, A, h,\n *                     H the repeat count specifies how many characters of\n *                     one data argument are taken, for @ it is the\n *                     absolute position where to put the next data, for\n *                     everything else the repeat count specifies how many\n *                     data arguments are consumed and packed into the\n *                     resulting binary string.\n *\n *                     Currently implemented formats are: pack() format\n *                     characters Code Description a NUL-padded string A\n *                     SPACE-padded string h Hex string, low nibble first H\n *                     Hex string, high nibble first csigned char C\n *                     unsigned char s signed short (always 16 bit, machine\n *                     byte order) S unsigned short (always 16 bit, machine\n *                     byte order) n unsigned short (always 16 bit, big\n *                     endian byte order) v unsigned short (always 16 bit,\n *                     little endian byte order) i signed integer (machine\n *                     dependent size and byte order) I unsigned integer\n *                     (machine dependent size and byte order) l signed\n *                     long (always 32 bit, machine byte order) L unsigned\n *                     long (always 32 bit, machine byte order) N unsigned\n *                     long (always 32 bit, big endian byte order) V\n *                     unsigned long (always 32 bit, little endian byte\n *                     order) f float (machine dependent size and\n *                     representation) d double (machine dependent size and\n *                     representation) x NUL byte X Back up one byte @\n *                     NUL-fill to absolute position\n *\n * @return     mixed   Returns a binary string containing data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "php_check_syntax", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.php-check-syntax.php )\n *\n * Performs a syntax (lint) check on the specified filename testing for\n * scripting errors.\n *\n * This is similar to using php -l from the commandline except that this\n * function will execute (but not output) the checked filename.\n *\n * For example, if a function is defined in filename, this defined\n * function will be available to the file that executed php_check_syntax(),\n * but output from filename will be suppressed.\n *\n * For technical reasons, this function is deprecated and removed from\n * PHP. Instead, use php -l somefile.php from the commandline.\n *\n * @filename   string  The name of the file being checked.\n * @error_message\n *             mixed   If the error_message parameter is used, it will\n *                     contain the error message generated by the syntax\n *                     check. error_message is passed by reference.\n *\n * @return     bool    Returns TRUE if the lint check passed, and FALSE if\n *                     the link check failed or if filename cannot be\n *                     opened.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "error_message", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "php_strip_whitespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.php-strip-whitespace.php )\n *\n * Returns the PHP source code in filename with PHP comments and\n * whitespace removed. This may be useful for determining the amount of\n * actual code in your scripts compared with the amount of comments. This\n * is similar to using php -w from the commandline.\n *\n * @filename   string  Path to the PHP file.\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sleep", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sleep.php )\n *\n *\n * @seconds    int     Halt time in seconds.\n *\n * @return     int     Returns zero on success, or FALSE on errors. If the\n *                     call was interrupted by a signal, sleep() returns\n *                     the number of seconds left to sleep.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "usleep", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.usleep.php )\n *\n * Delays program execution for the given number of micro seconds.\n *\n * @micro_seconds\n *             int     Halt time in micro seconds. A micro second is one\n *                     millionth of a second.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "micro_seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "time_nanosleep", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.time-nanosleep.php )\n *\n * Delays program execution for the given number of seconds and\n * nanoseconds.\n *\n * @seconds    int     Must be a positive integer.\n * @nanoseconds\n *             int     Must be a positive integer less than 1 billion.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n *\n *                     If the delay was interrupted by a signal, an\n *                     associative array will be returned with the\n *                     components: seconds - number of seconds remaining in\n *                     the delay nanoseconds - number of nanoseconds\n *                     remaining in the delay\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "nanoseconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "time_sleep_until", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.time-sleep-until.php )\n *\n * Makes the script sleep until the specified timestamp.\n *\n * @timestamp  float   The timestamp when the script should wake.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "timestamp", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "uniqid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.uniqid.php )\n *\n * Gets a prefixed unique identifier based on the current time in\n * microseconds.\n *\n * @prefix     string  Can be useful, for instance, if you generate\n *                     identifiers simultaneously on several hosts that\n *                     might happen to generate the identifier at the same\n *                     microsecond.\n *\n *                     With an empty prefix, the returned string will be\n *                     13 characters long. If more_entropy is TRUE, it will\n *                     be 23 characters.\n * @more_entropy\n *             bool    If set to TRUE, uniqid() will add additional entropy\n *                     (using the combined linear congruential generator)\n *                     at the end of the return value, which should make\n *                     the results more unique.\n *\n * @return     string  Returns the unique identifier, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "more_entropy", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "unpack", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.unpack.php )\n *\n * Unpacks from a binary string into an array according to the given\n * format.\n *\n * unpack() works slightly different from Perl as the unpacked data is\n * stored in an associative array. To accomplish this you have to name the\n * different format codes and separate them by a slash /.\n *\n * @format     string  See pack() for an explanation of the format codes.\n * @data       string  The packed data.\n *\n * @return     mixed   Returns an associative array containing unpacked\n *                     elements of binary string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sys_getloadavg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sys-getloadavg.php )\n *\n * Returns three samples representing the average system load (the number\n * of processes in the system run queue) over the last 1, 5 and 15 minutes,\n * respectively.\n *\n * @return     map     Returns an array with three samples (last 1, 5 and\n *                     15 minutes).\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "token_get_all", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.token-get-all.php )\n *\n * token_get_all() parses the given source string into PHP language tokens\n * using the Zend engine's lexical scanner.\n *\n * For a list of parser tokens, see List of Parser Tokens, or use\n * token_name() to translate a token value into its string representation.\n *\n * @source     string  The PHP source to parse.\n *\n * @return     map     An array of token identifiers. Each individual token\n *                     identifier is either a single character (i.e.: ;, .,\n *                     >, !, etc...), or a three element array containing\n *                     the token index in element 0, the string content of\n *                     the original token in element 1 and the line number\n *                     in element 2.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "token_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.token-name.php )\n *\n * token_name() gets the symbolic name for a PHP token value.\n *\n * @token      int     The token value.\n *\n * @return     string  The symbolic name of the given token. The returned\n *                     name returned matches the name of the matching token\n *                     constant.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "token", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hphp_process_abort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-process-abort.php\n * )\n *\n * Causes the process to die immediately in an undefined way.\n *\n * @magic      mixed   You shouldn't be calling this function if you don't\n *                     know the magic value.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "magic", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hphp_to_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-to-string.php )\n *\n * Casts a given value to a string.\n *\n * @v          mixed   The value being casted to a string.\n *\n * @return     string  The result of the string cast.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x90006040, "debug_backtrace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.debug-backtrace.php )\n *\n * debug_backtrace() generates a PHP backtrace.\n *\n * @provide_object\n *             bool    Whether or not to populate the \"object\" index.\n *\n * @return     vector  Returns an associative array. The possible returned\n *                     elements are as follows:\n *\n *                     Possible returned elements from debug_backtrace()\n *                     Name Type Description function string The current\n *                     function name. See also __FUNCTION__. line integer\n *                     The current line number. See also __LINE__. file\n *                     string The current file name. See also __FILE__.\n *                     class string The current class name. See also\n *                     __CLASS__ object object The current object. type\n *                     string The current call type. If a method call, \"->\"\n *                     is returned. If a static method call, \"::\" is\n *                     returned. If a function call, nothing is returned.\n *                     args array If inside a function, this lists the\n *                     functions arguments. If inside an included file,\n *                     this lists the included file name(s).\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "provide_object", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x90006040, "debug_print_backtrace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.debug-print-backtrace.php )\n *\n * debug_print_backtrace() prints a PHP backtrace. It prints the function\n * calls, included/required files and eval()ed stuff.\n * This function has no parameters.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "error_get_last", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.error-get-last.php )\n *\n * Gets information about the last error that occurred.\n *\n * @return     vector  Returns an associative array describing the last\n *                     error with keys \"type\", \"message\", \"file\" and\n *                     \"line\". Returns NULL if there hasn't been an error\n *                     yet.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "error_log", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.error-log.php )\n *\n * Sends an error message to the web server's error log, a TCP port or to\n * a file.\n *\n * @message    string  The error message that should be logged.\n * @message_type\n *             int     Says where the error should go. The possible message\n *                     types are as follows:\n *\n *                     error_log() log types 0 message is sent to PHP's\n *                     system logger, using the Operating System's system\n *                     logging mechanism or a file, depending on what the\n *                     error_log configuration directive is set to. This is\n *                     the default option. 1 message is sent by email to\n *                     the address in the destination parameter. This is\n *                     the only message type where the fourth parameter,\n *                     extra_headers is used. 2 No longer an option. 3\n *                     message is appended to the file destination. A\n *                     newline is not automatically added to the end of the\n *                     message string. 4 message is sent directly to the\n *                     SAPI logging handler.\n * @destination\n *             string  The destination. Its meaning depends on the\n *                     message_type parameter as described above.\n * @extra_headers\n *             string  The extra headers. It's used when the message_type\n *                     parameter is set to 1. This message type uses the\n *                     same internal function as mail() does.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "destination", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "extra_headers", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "error_reporting", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.error-reporting.php )\n *\n * The error_reporting() function sets the error_reporting directive at\n * runtime. PHP has many levels of errors, using this function sets that\n * level for the duration (runtime) of your script. If the optional level\n * is not set, error_reporting() will just return the current error\n * reporting level.\n *\n * @level      mixed   The new error_reporting level. It takes on either a\n *                     bitmask, or named constants. Using named constants\n *                     is strongly encouraged to ensure compatibility for\n *                     future versions. As error levels are added, the\n *                     range of integers increases, so older integer-based\n *                     error levels will not always behave as expected.\n *\n *                     The available error level constants and the actual\n *                     meanings of these error levels are described in the\n *                     predefined constants.\n *\n * @return     int     Returns the old error_reporting level or the current\n *                     level if no level parameter is given.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "level", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "restore_error_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.restore-error-handler.php )\n *\n * Used after changing the error handler function using\n * set_error_handler(), to revert to the previous error handler (which\n * could be the built-in or a user defined function).\n *\n * @return     bool    This function always returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "restore_exception_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.restore-exception-handler.php )\n *\n * Used after changing the exception handler function using\n * set_exception_handler(), to revert to the previous exception handler\n * (which could be the built-in or a user defined function).\n *\n * @return     bool    This function always returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set_error_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.set-error-handler.php )\n *\n * Sets a user function (error_handler) to handle errors in a script.\n *\n * This function can be used for defining your own way of handling errors\n * during runtime, for example in applications in which you need to do\n * cleanup of data/files when a critical error happens, or when you need to\n * trigger an error under certain conditions (using trigger_error()).\n *\n * It is important to remember that the standard PHP error handler is\n * completely bypassed for the error types specified by error_types unless\n * the callback function returns FALSE. error_reporting() settings will\n * have no effect and your error handler will be called regardless -\n * however you are still able to read the current value of error_reporting\n * and act appropriately. Of particular note is that this value will be 0\n * if the statement that caused the error was prepended by the @\n * error-control operator.\n *\n * Also note that it is your responsibility to die() if necessary. If the\n * error-handler function returns, script execution will continue with the\n * next statement after the one that caused an error.\n *\n * The following error types cannot be handled with a user defined\n * function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING,\n * E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the\n * file where set_error_handler() is called.\n *\n * If errors occur before the script is executed (e.g. on file uploads)\n * the custom error handler cannot be called since it is not registered at\n * that time.\n *\n * @error_handler\n *             mixed   The user function needs to accept two parameters:\n *                     the error code, and a string describing the error.\n *                     Then there are three optional parameters that may be\n *                     supplied: the filename in which the error occurred,\n *                     the line number in which the error occurred, and the\n *                     context in which the error occurred (an array that\n *                     points to the active symbol table at the point the\n *                     error occurred). The function can be shown as:\n *\n *                     handler ( int $errno , string $errstr [, string\n *                     $errfile [, int $errline [, array $errcontext ]]] )\n *                     errno The first parameter, errno, contains the level\n *                     of the error raised, as an integer.\n * @error_types\n *             int     The second parameter, errstr, contains the error\n *                     message, as a string.\n *\n * @return     mixed   Returns a string containing the previously defined\n *                     error handler (if any). If the built-in error\n *                     handler is used NULL is returned. NULL is also\n *                     returned in case of an error such as an invalid\n *                     callback. If the previous error handler was a class\n *                     method, this function will return an indexed array\n *                     with the class and the method name.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "error_handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "error_types", "", (const char *)0xa /* KindOfInt64 */, "i:30719;", (const char *)8, "E_ALL", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set_exception_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.set-exception-handler.php )\n *\n * Sets the default exception handler if an exception is not caught within\n * a try/catch block. Execution will stop after the exception_handler is\n * called.\n *\n * @exception_handler\n *             mixed   Name of the function to be called when an uncaught\n *                     exception occurs. This function must be defined\n *                     before calling set_exception_handler(). This handler\n *                     function needs to accept one parameter, which will\n *                     be the exception object that was thrown.\n *\n * @return     mixed   Returns the name of the previously defined exception\n *                     handler, or NULL on error. If no previous handler\n *                     was defined, NULL is also returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "exception_handler", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_set_error_page", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Displays fatal errors with this PHP document. When 500 fatal error is\n * about to display, it will invoke this PHP page with all global states\n * right at when the error happens. This is useful for gracefully\n * displaying something helpful information to end users when a fatal error\n * has happened. Otherwise, a blank page will be displayed by default.\n *\n * @page       string  Relative path of the PHP document.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "page", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_throw_fatal_error", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Raises a fatal error.\n *\n * @error_msg  string  The error message for the fatal.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "error_msg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_clear_unflushed", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Clears any output contents that have not been flushed to networked.\n * This is useful when handling a fatal error. Before displaying a\n * customized PHP page, one may call this function to clear previously\n * written content, so to replay what will be displayed.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_debug_caller_info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Retrieves information about the caller that invoked the current\n * function or method\n *\n * @return     vector  Returns an associative array. On success, the array\n *                     will contain two keys 'file' and 'line' which\n *                     indicate the filename and line number of the\n *                     callsite that invoked the current function or\n *                     method.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "trigger_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.trigger-error.php )\n *\n * Used to trigger a user error condition, it can be used by in\n * conjunction with the built-in error handler, or with a user defined\n * function that has been set as the new error handler\n * (set_error_handler()).\n *\n * This function is useful when you need to generate a particular response\n * to an exception at runtime.\n *\n * @error_msg  string  The designated error message for this error. It's\n *                     limited to 1024 characters in length. Any additional\n *                     characters beyond 1024 will be truncated.\n * @error_type int     The designated error type for this error. It only\n *                     works with the E_USER family of constants, and will\n *                     default to E_USER_NOTICE.\n *\n * @return     bool    This function returns FALSE if wrong error_type is\n *                     specified, TRUE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "error_msg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "error_type", "", (const char *)0xa /* KindOfInt64 */, "i:1024;", (const char *)7, "E_USER_NOTICE", (const char *)13, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "user_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.user-error.php )\n *\n *\n * @error_msg  string\n * @error_type int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "error_msg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "error_type", "", (const char *)0xa /* KindOfInt64 */, "i:1024;", (const char *)7, "E_USER_NOTICE", (const char *)13, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_open_memory", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-open-memory.php )\n *\n * Creates a new XMLWriter using memory for string output.\n *\n * @return     mixed   Object oriented style: Returns TRUE on success or\n *                     FALSE on failure.\n *\n *                     Procedural style: Returns a new xmlwriter resource\n *                     for later use with the xmlwriter functions on\n *                     success, FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_open_uri", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-open-uri.php\n * )\n *\n * Creates a new XMLWriter using uri for the output.\n *\n * @uri        string  The URI of the resource for the output.\n *\n * @return     resource\n *                     Object oriented style: Returns TRUE on success or\n *                     FALSE on failure.\n *\n *                     Procedural style: Returns a new xmlwriter resource\n *                     for later use with the xmlwriter functions on\n *                     success, FALSE on error.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_set_indent_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-set-indent-string.php )\n *\n * Sets the string which will be used to indent each element/attribute of\n * the resulting xml.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @indentstring\n *             string  The indentation string.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "indentstring", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_set_indent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-set-indent.php )\n *\n * Toggles indentation on or off.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @indent     bool    Whether indentation is enabled.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "indent", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_document", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-document.php )\n *\n * Starts a document.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @version    string  The version number of the document as part of the\n *                     XML declaration. Defaults to 1.0.\n * @encoding   string  The encoding of the document as part of the XML\n *                     declaration. NULL by default.\n * @standalone string  yes or no.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "version", "", (const char *)0x14 /* KindOfString */, "s:3:\"1.0\";", (const char *)10, "\"1.0\"", (const char *)5, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "standalone", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-element.php )\n *\n * Starts an element.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The element name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_element_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-element-ns.php )\n *\n * Starts a namespaced element.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @prefix     string  The namespace prefix.\n * @name       string  The element name.\n * @uri        string  The namespace URI.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_element_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-element-ns.php )\n *\n * Writes a full namespaced element tag.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @prefix     string  The namespace prefix.\n * @name       string  The element name.\n * @uri        string  The namespace URI.\n * @content    string  The element contents.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-element.php )\n *\n * Writes a full element tag.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The element name.\n * @content    string  The element contents.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-element.php )\n *\n * Ends the current element.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_full_end_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-full-end-element.php )\n *\n * End the current xml element. Writes an end tag even if the element is\n * empty.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-attribute-ns.php )\n *\n * Starts a namespaced attribute.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @prefix     string  The namespace prefix.\n * @name       string  The attribute name.\n * @uri        string  The namespace URI.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-attribute.php )\n *\n * Starts an attribute.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The attribute name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-attribute-ns.php )\n *\n * Writes a full namespaced attribute.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @prefix     string  The namespace prefix.\n * @name       string  The attribute name.\n * @uri        string  The namespace URI.\n * @content    string  The attribute value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-attribute.php )\n *\n * Writes a full attribute.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The name of the attribute.\n * @value      string  The value of the attribute.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-attribute.php )\n *\n * Ends the current attribute.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_cdata", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-cdata.php )\n *\n * Starts a CDATA.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_cdata", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-cdata.php )\n *\n * Writes a full CDATA.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @content    string  The contents of the CDATA.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_cdata", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-end-cdata.php\n * )\n *\n * Ends the current CDATA section.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_comment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-comment.php )\n *\n * Starts a comment.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_comment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-comment.php )\n *\n * Writes a full comment.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @content    string  The contents of the comment.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_comment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-comment.php )\n *\n * Ends the current comment.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_document", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-document.php )\n *\n * Ends the current document.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_pi", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-start-pi.php\n * )\n *\n * Starts a processing instruction tag.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @target     string  The target of the processing instruction.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_pi", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-write-pi.php\n * )\n *\n * Writes a processing instruction.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @target     string  The target of the processing instruction.\n * @content    string  The content of the processing instruction.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_pi", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-end-pi.php )\n *\n * Ends the current processing instruction.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_text", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-text.php )\n *\n * Writes a text.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @content    string  The contents of the text.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_raw", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-write-raw.php\n * )\n *\n * Writes a raw xml text.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @content    string  The text string to write.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_dtd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-start-dtd.php\n * )\n *\n * Starts a DTD.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @qualifiedname\n *             string  The qualified name of the document type to create.\n * @publicid   string  The external subset public identifier.\n * @systemid   string  The external subset system identifier.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_dtd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-write-dtd.php\n * )\n *\n * Writes a full DTD.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The DTD name.\n * @publicid   string  The external subset public identifier.\n * @systemid   string  The external subset system identifier.\n * @subset     string  The content of the DTD.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "subset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_dtd_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-dtd-element.php )\n *\n * Starts a DTD element.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @qualifiedname\n *             string  The qualified name of the document type to create.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_dtd_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-dtd-element.php )\n *\n * Writes a full DTD element.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The name of the DTD element.\n * @content    string  The content of the element.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_dtd_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-dtd-element.php )\n *\n * Ends the current DTD element.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_dtd_attlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-dtd-attlist.php )\n *\n * Starts a DTD attribute list.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The attribute list name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_dtd_attlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-dtd-attlist.php )\n *\n * Writes a DTD attribute list.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The name of the DTD attribute list.\n * @content    string  The content of the DTD attribute list.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_dtd_attlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-dtd-attlist.php )\n *\n * Ends the current DTD attribute list.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_start_dtd_entity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-start-dtd-entity.php )\n *\n * Starts a DTD entity.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The name of the entity.\n * @isparam    bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isparam", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_write_dtd_entity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-write-dtd-entity.php )\n *\n * Writes a full DTD entity.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @name       string  The name of the entity.\n * @content    string  The content of the entity.\n * @pe         bool\n * @publicid   string\n * @systemid   string\n * @ndataid    string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pe", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ndataid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_dtd_entity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-end-dtd-entity.php )\n *\n * Ends the current DTD entity.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_end_dtd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-end-dtd.php )\n *\n * Ends the DTD of the document.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.xmlwriter-flush.php )\n *\n * Flushes the current buffer.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @empty      bool    Whether to empty the buffer or no. Default is TRUE.\n *\n * @return     mixed   If you opened the writer in memory, this function\n *                     returns the generated XML buffer, Else, if using\n *                     URI, this function will write the buffer and return\n *                     the number of written bytes.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "empty", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xmlwriter_output_memory", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xmlwriter-output-memory.php )\n *\n * Returns the current buffer.\n *\n * @xmlwriter  resource\n *                     Only for procedural calls. The XMLWriter resource\n *                     that is being modified. This resource comes from a\n *                     call to xmlwriter_open_uri() or\n *                     xmlwriter_open_memory().\n * @flush      bool    Whether to flush the output buffer or no. Default is\n *                     TRUE.\n *\n * @return     string  Returns the current buffer as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "xmlwriter", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flush", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_set_cookie_params", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-set-cookie-params.php )\n *\n * Set cookie parameters defined in the php.ini file. The effect of this\n * function only lasts for the duration of the script. Thus, you need to\n * call session_set_cookie_params() for every request and before\n * session_start() is called.\n *\n * @lifetime   int     Lifetime of the session cookie, defined in seconds.\n * @path       string  Path on the domain where the cookie will work. Use a\n *                     single slash ('/') for all paths on the domain.\n * @domain     string  Cookie domain, for example 'www.php.net'. To make\n *                     cookies visible on all subdomains then the domain\n *                     must be prefixed with a dot like '.php.net'.\n * @secure     mixed   If TRUE cookie will only be sent over secure\n *                     connections.\n * @httponly   mixed   If set to TRUE then PHP will attempt to send the\n *                     httponly flag when setting the session cookie.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "lifetime", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "domain", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "secure", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "httponly", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_get_cookie_params", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-get-cookie-params.php )\n *\n * Gets the session cookie parameters.\n *\n * @return     map     Returns an array with the current session cookie\n *                     information, the array contains the following items:\n *                     \"lifetime\" - The lifetime of the cookie in seconds.\n *                     \"path\" - The path where information is stored.\n *                     \"domain\" - The domain of the cookie. \"secure\" - The\n *                     cookie should only be sent over secure connections.\n *                     \"httponly\" - The cookie can only be accessed through\n *                     the HTTP protocol.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-name.php )\n *\n * session_name() returns the name of the current session. If name is\n * given, session_name() will update the session name and return the old\n * session name.\n *\n * The session name is reset to the default value stored in session.name\n * at request startup time. Thus, you need to call session_name() for every\n * request (and before session_start() or session_register() are called).\n *\n * @newname    string  The session name references the session id in\n *                     cookies and URLs. It should contain only\n *                     alphanumeric characters; it should be short and\n *                     descriptive (i.e. for users with enabled cookie\n *                     warnings). If name is specified, the name of the\n *                     current session is changed to its value.\n *\n *                     Warning\n *\n *                     The session name can't consist of digits only, at\n *                     least one letter must be present. Otherwise a new\n *                     session id is generated every time.\n *\n * @return     string  Returns the name of the current session.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "newname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_module_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-module-name.php\n * )\n *\n * session_module_name() gets the name of the current session module.\n *\n * @newname    string  If module is specified, that module will be used\n *                     instead.\n *\n * @return     mixed   Returns the name of the current session module.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "newname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_set_save_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-set-save-handler.php )\n *\n * session_set_save_handler() sets the user-level session storage\n * functions which are used for storing and retrieving data associated with\n * a session. This is most useful when a storage method other than those\n * supplied by PHP sessions is preferred. i.e. Storing the session data in\n * a local database.\n *\n * @open       string  Open function, this works like a constructor in\n *                     classes and is executed when the session is being\n *                     opened. The open function expects two parameters,\n *                     where the first is the save path and the second is\n *                     the session name.\n * @close      string  Close function, this works like a destructor in\n *                     classes and is executed when the session operation\n *                     is done.\n * @read       string  Read function must return string value always to\n *                     make save handler work as expected. Return empty\n *                     string if there is no data to read. Return values\n *                     from other handlers are converted to boolean\n *                     expression. TRUE for success, FALSE for failure.\n * @write      string  Write function that is called when session data is\n *                     to be saved. This function expects two parameters:\n *                     an identifier and the data associated with it.\n *\n *                     The \"write\" handler is not executed until after the\n *                     output stream is closed. Thus, output from debugging\n *                     statements in the \"write\" handler will never be seen\n *                     in the browser. If debugging output is necessary, it\n *                     is suggested that the debug output be written to a\n *                     file instead.\n * @destroy    string  The destroy handler, this is executed when a session\n *                     is destroyed with session_destroy() and takes the\n *                     session id as its only parameter.\n * @gc         string  The garbage collector, this is executed when the\n *                     session garbage collector is executed and takes the\n *                     max session lifetime as its only parameter.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "open", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "close", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "read", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "write", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "destroy", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "gc", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_save_path", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-save-path.php )\n *\n * session_save_path() returns the path of the current directory used to\n * save session data.\n *\n * @newname    string  Session data path. If specified, the path to which\n *                     data is saved will be changed. session_save_path()\n *                     needs to be called before session_start() for that\n *                     purpose.\n *\n *\n *\n *                     On some operating systems, you may want to specify\n *                     a path on a filesystem that handles lots of small\n *                     files efficiently. For example, on Linux, reiserfs\n *                     may provide better performance than ext2fs.\n *\n * @return     string  Returns the path of the current directory used for\n *                     data storage.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "newname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-id.php )\n *\n * session_id() is used to get or set the session id for the current\n * session.\n *\n * The constant SID can also be used to retrieve the current name and\n * session id as a string suitable for adding to URLs. See also Session\n * handling.\n *\n * @newid      string  If id is specified, it will replace the current\n *                     session id. session_id() needs to be called before\n *                     session_start() for that purpose. Depending on the\n *                     session handler, not all characters are allowed\n *                     within the session id. For example, the file session\n *                     handler only allows characters in the range a-z A-Z\n *                     0-9 , (comma) and - (minus)! When using session\n *                     cookies, specifying an id for session_id() will\n *                     always send a new cookie when session_start() is\n *                     called, regardless if the current session id is\n *                     identical to the one being set.\n *\n * @return     string  session_id() returns the session id for the current\n *                     session or the empty string (\"\") if there is no\n *                     current session (no current session id exists).\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "newid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_regenerate_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-regenerate-id.php )\n *\n * session_regenerate_id() will replace the current session id with a new\n * one, and keep the current session information.\n *\n * @delete_old_session\n *             bool    Whether to delete the old associated session file or\n *                     not.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "delete_old_session", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_cache_limiter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-cache-limiter.php )\n *\n * session_cache_limiter() returns the name of the current cache limiter.\n *\n * The cache limiter defines which cache control HTTP headers are sent to\n * the client. These headers determine the rules by which the page content\n * may be cached by the client and intermediate proxies. Setting the cache\n * limiter to nocache disallows any client/proxy caching. A value of public\n * permits caching by proxies and the client, whereas private disallows\n * caching by proxies and permits the client to cache the contents.\n *\n * In private mode, the Expire header sent to the client may cause\n * confusion for some browsers, including Mozilla. You can avoid this\n * problem by using private_no_expire mode. The Expire header is never sent\n * to the client in this mode.\n *\n * The cache limiter is reset to the default value stored in\n * session.cache_limiter at request startup time. Thus, you need to call\n * session_cache_limiter() for every request (and before session_start() is\n * called).\n *\n * @new_cache_limiter\n *             string  If cache_limiter is specified, the name of the\n *                     current cache limiter is changed to the new value.\n *                     Possible values Value Headers sent public\n *\n *                     private_no_expire\n *\n *                     private\n *\n *                     nocache\n *\n * @return     string  Returns the name of the current cache limiter.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "new_cache_limiter", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_cache_expire", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-cache-expire.php )\n *\n * session_cache_expire() returns the current setting of\n * session.cache_expire.\n *\n * The cache expire is reset to the default value of 180 stored in\n * session.cache_limiter at request startup time. Thus, you need to call\n * session_cache_expire() for every request (and before session_start() is\n * called).\n *\n * @new_cache_expire\n *             string  If new_cache_expire is given, the current cache\n *                     expire is replaced with new_cache_expire.\n *\n *                     Setting new_cache_expire is of value only, if\n *                     session.cache_limiter is set to a value different\n *                     from nocache.\n *\n * @return     int     Returns the current setting of session.cache_expire.\n *                     The value returned should be read in minutes,\n *                     defaults to 180.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "new_cache_expire", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-encode.php )\n *\n * session_encode() returns a string with the contents of the current\n * session encoded within.\n *\n * @return     mixed   Returns the contents of the current session encoded.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-decode.php )\n *\n * session_decode() decodes the session data in data, setting variables\n * stored in the session.\n *\n * @data       string  The encoded data to be stored.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_start", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-start.php )\n *\n * session_start() creates a session or resumes the current one based on a\n * session identifier passed via a GET or POST request, or passed via a\n * cookie.\n *\n * To use a named session, call session_name() before calling\n * session_start().\n *\n * When session.use_trans_sid is enabled, the session_start() function\n * will register an internal output handler for URL rewriting.\n *\n * If a user uses ob_gzhandler or similar with ob_start(), the function\n * order is important for proper output. For example, ob_gzhandler must be\n * registered before starting the session.\n *\n * @return     bool    This function returns TRUE if a session was\n *                     successfully started, otherwise FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_destroy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-destroy.php )\n *\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-unset.php )\n *\n * The session_unset() function frees all session variables currently\n * registered.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_commit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-commit.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_write_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-write-close.php\n * )\n *\n * End the current session and store session data.\n *\n * Session data is usually stored after your script terminated without the\n * need to call session_write_close(), but as session data is locked to\n * prevent concurrent writes only one script may operate on a session at\n * any time. When using framesets together with sessions you will\n * experience the frames loading one by one due to this locking. You can\n * reduce the time needed to load all the frames by ending the session as\n * soon as all changes to session variables are done.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "session_register", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-register.php )\n *\n * session_register() accepts a variable number of arguments, any of which\n * can be either a string holding the name of a variable or an array\n * consisting of variable names or other arrays. For each name,\n * session_register() registers the global variable with that name in the\n * current session.\n *\n * You can also create a session variable by simply setting the\n * appropriate member of the $_SESSION or $HTTP_SESSION_VARS (PHP < 4.1.0)\n * array.\n *\n *\n *\n * If session_start() was not called before this function is called, an\n * implicit call to session_start() with no parameters will be made.\n * $_SESSION does not mimic this behavior and requires session_start()\n * before use. WarningThis function has been DEPRECATED as of PHP 5.3.0.\n * Relying on this feature is highly discouraged.\n *\n * @var_names  mixed   A string holding the name of a variable or an array\n *                     consisting of variable names or other arrays.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var_names", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_unregister", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.session-unregister.php\n * )\n *\n * session_unregister() unregisters the global variable named name from\n * the current session. WarningThis function has been DEPRECATED as of PHP\n * 5.3.0. Relying on this feature is highly discouraged.\n *\n * @varname    string  The variable name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "session_is_registered", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-is-registered.php )\n *\n * Finds out whether a global variable is registered in a session.\n * WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on\n * this feature is highly discouraged.\n *\n * @varname    string  The variable name.\n *\n * @return     bool    session_is_registered() returns TRUE if there is a\n *                     global variable with the name name registered in the\n *                     current session, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pi", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pi.php )\n *\n *\n * @return     float   The value of pi as float.\n */",
  (const char *)0xb /* KindOfDouble */, NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "min", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.min.php )\n *\n * If the first and only parameter is an array, min() returns the lowest\n * value in that array. If at least two parameters are provided, min()\n * returns the smallest of these values.\n *\n * PHP will evaluate a non-numeric string as 0 if compared to integer, but\n * still return the string if it's seen as the numerically lowest value. If\n * multiple arguments evaluate to 0, min() will return the lowest\n * alphanumerical string value if any strings are given, else a numeric 0\n * is returned.\n *\n * @value      mixed   An array containing the values.\n *\n * @return     mixed   min() returns the numerically lowest of the\n *                     parameter values.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "max", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.max.php )\n *\n * If the first and only parameter is an array, max() returns the highest\n * value in that array. If at least two parameters are provided, max()\n * returns the biggest of these values.\n *\n * PHP will evaluate a non-numeric string as 0 if compared to integer, but\n * still return the string if it's seen as the numerically highest value.\n * If multiple arguments evaluate to 0, max() will return a numeric 0 if\n * given, else the alphabetical highest string value will be returned.\n *\n * @value      mixed   An array containing the values.\n *\n * @return     mixed   max() returns the numerically highest of the\n *                     parameter values. If multiple values can be\n *                     considered of the same size, the one that is listed\n *                     first will be returned.\n *\n *                     When max() is given multiple arrays, the longest\n *                     array is returned. If all the arrays have the same\n *                     length, max() will use lexicographic ordering to\n *                     find the return value.\n *\n *                     When given a string it will be cast as an integer\n *                     when comparing.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "abs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.abs.php )\n *\n * Returns the absolute value of number.\n *\n * @number     mixed   The numeric value to process\n *\n * @return     mixed   The absolute value of number. If the argument number\n *                     is of type float, the return type is also float,\n *                     otherwise it is integer (as float usually has a\n *                     bigger value range than integer).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "number", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_finite", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-finite.php )\n *\n * Checks whether val is a legal finite on this platform.\n *\n * @val        float   The value to check\n *\n * @return     bool    TRUE if val is a legal finite number within the\n *                     allowed range for a PHP float on this platform, else\n *                     FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "val", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_infinite", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-infinite.php )\n *\n * Returns TRUE if val is infinite (positive or negative), like the result\n * of log(0) or any value too big to fit into a float on this platform.\n *\n * @val        float   The value to check\n *\n * @return     bool    TRUE if val is infinite, else FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "val", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_nan", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-nan.php )\n *\n * Checks whether val is 'not a number', like the result of acos(1.01).\n *\n * @val        float   The value to check\n *\n * @return     bool    Returns TRUE if val is 'not a number', else FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "val", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ceil", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ceil.php )\n *\n *\n * @value      float   The value to round\n *\n * @return     float   value rounded up to the next highest integer. The\n *                     return value of ceil() is still of type float as the\n *                     value range of float is usually bigger than that of\n *                     integer.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "value", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "floor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.floor.php )\n *\n *\n * @value      float   The numeric value to round\n *\n * @return     float   value rounded to the next lowest integer. The return\n *                     value of floor() is still of type float because the\n *                     value range of float is usually bigger than that of\n *                     integer.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "value", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "round", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.round.php )\n *\n * Returns the rounded value of val to specified precision (number of\n * digits after the decimal point). precision can also be negative or zero\n * (default).\n *\n * PHP doesn't handle strings like \"12,300.2\" correctly by default. See\n * converting from strings.\n *\n * @val        mixed   The value to round\n * @precision  int     The optional number of decimal digits to round to.\n * @mode       int     One of the PHP_ROUND_HALF_* constants to determine\n *                     how rounding should occur.\n *\n * @return     float   The rounded value\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "precision", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "deg2rad", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.deg2rad.php )\n *\n * This function converts number from degrees to the radian equivalent.\n *\n * @number     float   Angular value in degrees\n *\n * @return     float   The radian equivalent of number\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "number", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rad2deg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rad2deg.php )\n *\n * This function converts number from radian to degrees.\n *\n * @number     float   A radian value\n *\n * @return     float   The equivalent of number in degrees\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "number", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "decbin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.decbin.php )\n *\n * Returns a string containing a binary representation of the given number\n * argument.\n *\n * @number     int\n *\n * @return     string  Binary string representation of number\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dechex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dechex.php )\n *\n * Returns a string containing a hexadecimal representation of the given\n * number argument. The largest number that can be converted is 4294967295\n * in decimal resulting to \"ffffffff\".\n *\n * @number     int     Decimal value to convert\n *\n * @return     string  Hexadecimal string representation of number\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "decoct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.decoct.php )\n *\n * Returns a string containing an octal representation of the given number\n * argument. The largest number that can be converted is 4294967295 in\n * decimal resulting to \"37777777777\".\n *\n * @number     int     Decimal value to convert\n *\n * @return     string  Octal string representation of number\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bindec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bindec.php )\n *\n * Returns the decimal equivalent of the binary number represented by the\n * binary_string argument.\n *\n * bindec() converts a binary number to an integer or, if needed for size\n * reasons, float.\n *\n * bindec() interprets all binary_string values as unsigned integers. This\n * is because bindec() sees the most significant bit as another order of\n * magnitude rather than as the sign bit.\n * Warning\n *\n * The parameter must be a string. Using other data types will produce\n * unexpected results.\n *\n * @binary_string\n *             string  The binary string to convert\n *\n * @return     mixed   The decimal value of binary_string\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "binary_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hexdec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hexdec.php )\n *\n * Returns the decimal equivalent of the hexadecimal number represented by\n * the hex_string argument. hexdec() converts a hexadecimal string to a\n * decimal number.\n *\n * hexdec() will ignore any non-hexadecimal characters it encounters.\n *\n * @hex_string string  The hexadecimal string to convert\n *\n * @return     mixed   The decimal representation of hex_string\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hex_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "octdec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.octdec.php )\n *\n * Returns the decimal equivalent of the octal number represented by the\n * octal_string argument.\n *\n * @octal_string\n *             string  The octal string to convert\n *\n * @return     mixed   The decimal representation of octal_string\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "octal_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "base_convert", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.base-convert.php )\n *\n * Returns a string containing number represented in base tobase. The base\n * in which number is given is specified in frombase. Both frombase and\n * tobase have to be between 2 and 36, inclusive. Digits in numbers with a\n * base higher than 10 will be represented with the letters a-z, with a\n * meaning 10, b meaning 11 and z meaning 35. Warning base_convert() may\n * lose precision on large numbers due to properties related to the\n * internal \"double\" or \"float\" type used. Please see the Floating point\n * numbers section in the manual for more specific information and\n * limitations.\n *\n * @number     string  The number to convert\n * @frombase   int     The base number is in\n * @tobase     int     The base to convert number to\n *\n * @return     mixed   number converted to base tobase\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "number", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "frombase", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tobase", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pow.php )\n *\n * Returns base raised to the power of exp. Warning\n *\n * In PHP 4.0.6 and earlier pow() always returned a float, and did not\n * issue warnings.\n *\n * @base       mixed   The base to use\n * @exp        mixed   The exponent\n *\n * @return     number  base raised to the power of exp. If the result can\n *                     be represented as integer it will be returned as\n *                     type integer, else it will be returned as type\n *                     float. If the power cannot be computed FALSE will be\n *                     returned instead.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Numeric */, (const char *)0x2000, "base", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "exp", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exp.php )\n *\n * Returns e raised to the power of arg.\n *\n * 'e' is the base of the natural system of logarithms, or approximately\n * 2.718282.\n *\n * @arg        float   The argument to process\n *\n * @return     float   'e' raised to the power of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "expm1", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.expm1.php )\n *\n * expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that\n * is accurate even if the value of arg is near zero, a case where 'exp\n * (arg) - 1' would be inaccurate due to subtraction of two numbers that\n * are nearly equal.\n *\n * @arg        float   The argument to process\n *\n * @return     float   'e' to the power of arg minus one\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "log10", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.log10.php )\n *\n * Returns the base-10 logarithm of arg.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The base-10 logarithm of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "log1p", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.log1p.php )\n *\n * log1p() returns log(1 + number) computed in a way that is accurate even\n * when the value of number is close to zero. log() might only return\n * log(1) in this case due to lack of precision.\n *\n * @number     float   The argument to process\n *\n * @return     float   log(1 + number)\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "number", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "log", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.log.php )\n *\n * If the optional base parameter is specified, log() returns logbase arg,\n * otherwise log() returns the natural logarithm of arg.\n *\n * @arg        float   The value to calculate the logarithm for\n * @base       float   The optional logarithmic base to use (defaults to\n *                     'e' and so to the natural logarithm).\n *\n * @return     float   The logarithm of arg to base, if given, or the\n *                     natural logarithm.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "base", "", (const char *)0xb /* KindOfDouble */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "cos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.cos.php )\n *\n * cos() returns the cosine of the arg parameter. The arg parameter is in\n * radians.\n *\n * @arg        float   An angle in radians\n *\n * @return     float   The cosine of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "cosh", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.cosh.php )\n *\n * Returns the hyperbolic cosine of arg, defined as (exp(arg) +\n * exp(-arg))/2.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The hyperbolic cosine of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sin.php )\n *\n * sin() returns the sine of the arg parameter. The arg parameter is in\n * radians.\n *\n * @arg        float   A value in radians\n *\n * @return     float   The sine of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sinh", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sinh.php )\n *\n * Returns the hyperbolic sine of arg, defined as (exp(arg) -\n * exp(-arg))/2.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The hyperbolic sine of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "tan", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.tan.php )\n *\n * tan() returns the tangent of the arg parameter. The arg parameter is in\n * radians.\n *\n * @arg        float   The argument to process in radians\n *\n * @return     float   The tangent of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "tanh", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.tanh.php )\n *\n * Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).\n *\n * @arg        float   The argument to process\n *\n * @return     float   The hyperbolic tangent of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "acos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.acos.php )\n *\n * Returns the arc cosine of arg in radians. acos() is the complementary\n * function of cos(), which means that a==cos(acos(a)) for every value of a\n * that is within acos()' range.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The arc cosine of arg in radians.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "acosh", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.acosh.php )\n *\n * Returns the inverse hyperbolic cosine of arg, i.e. the value whose\n * hyperbolic cosine is arg.\n *\n * @arg        float   The value to process\n *\n * @return     float   The inverse hyperbolic cosine of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.asin.php )\n *\n * Returns the arc sine of arg in radians. asin() is the complementary\n * function of sin(), which means that a==sin(asin(a)) for every value of a\n * that is within asin()'s range.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The arc sine of arg in radians\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asinh", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.asinh.php )\n *\n * Returns the inverse hyperbolic sine of arg, i.e. the value whose\n * hyperbolic sine is arg.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The inverse hyperbolic sine of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "atan", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.atan.php )\n *\n * Returns the arc tangent of arg in radians. atan() is the complementary\n * function of tan(), which means that a==tan(atan(a)) for every value of a\n * that is within atan()'s range.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The arc tangent of arg in radians.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "atanh", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.atanh.php )\n *\n * Returns the inverse hyperbolic tangent of arg, i.e. the value whose\n * hyperbolic tangent is arg.\n *\n * @arg        float   The argument to process\n *\n * @return     float   Inverse hyperbolic tangent of arg\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "atan2", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.atan2.php )\n *\n *\n * @y          float   Dividend parameter\n * @x          float   Divisor parameter\n *\n * @return     float   The arc tangent of y/x in radians.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hypot", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hypot.php )\n *\n * hypot() returns the length of the hypotenuse of a right-angle triangle\n * with sides of length x and y, or the distance of the point (x, y) from\n * the origin. This is equivalent to sqrt(x*x + y*y).\n *\n * @x          float   Length of first side\n * @y          float   Length of second side\n *\n * @return     float   Calculated length of the hypotenuse\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fmod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fmod.php )\n *\n * Returns the floating point remainder of dividing the dividend (x) by\n * the divisor (y). The reminder (r) is defined as: x = i * y + r, for some\n * integer i. If y is non-zero, r has the same sign as x and a magnitude\n * less than the magnitude of y.\n *\n * @x          float   The dividend\n * @y          float   The divisor\n *\n * @return     float   The floating point remainder of x/y\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "x", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sqrt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sqrt.php )\n *\n * Returns the square root of arg.\n *\n * @arg        float   The argument to process\n *\n * @return     float   The square root of arg or the special value NAN for\n *                     negative numbers.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "arg", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getrandmax", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getrandmax.php )\n *\n *\n * @return     int     The largest possible random value returned by rand()\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "srand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.srand.php )\n *\n * Seeds the random number generator with seed or with a random value if\n * no seed is given. As of PHP 4.2.0, there is no need to seed the random\n * number generator with srand() or mt_srand() as this is now done\n * automatically.\n *\n * @seed       mixed   Optional seed value\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "seed", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rand.php )\n *\n *\n * @min        int     The lowest value to return (default: 0)\n * @max        int     The highest value to return (default: getrandmax())\n *\n * @return     int     A pseudo random value between min (or 0) and max (or\n *                     getrandmax(), inclusive).\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "min", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "max", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "RAND_MAX", (const char *)8, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mt_getrandmax", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mt-getrandmax.php )\n *\n *\n * @return     int     Returns the maximum random value returned by\n *                     mt_rand()\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mt_srand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mt-srand.php )\n *\n * Seeds the random number generator with seed or with a random value if\n * no seed is given. As of PHP 4.2.0, there is no need to seed the random\n * number generator with srand() or mt_srand() as this is now done\n * automatically.\n *\n * @seed       mixed   An optional seed value\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "seed", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mt_rand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mt-rand.php )\n *\n *\n * @min        int     Optional lowest value to be returned (default: 0)\n * @max        int     Optional highest value to be returned (default:\n *                     mt_getrandmax())\n *\n * @return     int     A random integer value between min (or 0) and max\n *                     (or mt_getrandmax(), inclusive)\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "min", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "max", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "RAND_MAX", (const char *)8, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lcg_value", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lcg-value.php )\n *\n * lcg_value() returns a pseudo random number in the range of (0, 1). The\n * function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The\n * period of this function is equal to the product of both primes.\n *\n * @return     float   A pseudo random float value in the range of (0, 1)\n */",
  (const char *)0xb /* KindOfDouble */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "intl_get_error_code", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.intl-get-error-code.php\n * )\n *\n * Useful to handle errors occurred in static methods when there's no\n * object to get error code from.\n *\n * @return     int     Error code returned by the last API function call.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "intl_get_error_message", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.intl-get-error-message.php )\n *\n * Get error message from last internationalization function called.\n *\n * @return     string  Description of an error occurred in the last API\n *                     function call.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "intl_error_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.intl-error-name.php )\n *\n * Return ICU error code name.\n *\n * @error_code int     ICU error code.\n *\n * @return     string  The returned string will be the same as the name of\n *                     the error code constant.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "error_code", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "intl_is_failure", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.intl-is-failure.php )\n *\n *\n * @error_code int     is a value that returned by functions:\n *                     intl_get_error_code(), collator_get_error_code() .\n *\n * @return     bool    TRUE if it the code indicates some failure, and\n *                     FALSE in case of success or a warning.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "error_code", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_asort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.collator-asort.php )\n *\n * Procedural style bool collator_asort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array such that array indices\n * maintain their correlation with the array elements they are associated\n * with. This is used mainly when sorting associative arrays where the\n * actual element order is significant. Array elements will have sort order\n * according to current locale rules.\n *\n * Equivalent to standard PHP asort().\n *\n * @obj        mixed   Collator object.\n * @arr        mixed\n * @sort_flag  int     Optional sorting type, one of the following:\n *\n *                     Collator::SORT_REGULAR - compare items normally\n *                     (don't change types)\n *\n *                     Collator::SORT_NUMERIC - compare items numerically\n *\n *                     Collator::SORT_STRING - compare items as strings\n *\n *                     Default $sort_flag value is Collator::SORT_REGULAR.\n *                     It is also used if an invalid $sort_flag value has\n *                     been specified.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "q_Collator$$SORT_REGULAR", (const char *)24, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_compare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.collator-compare.php )\n *\n * Procedural style int collator_compare ( Collator $coll , string $str1 ,\n * string $str2 ) Compare two Unicode strings according to collation rules.\n *\n * @obj        mixed   Collator object.\n * @str1       string  The first string to compare.\n * @str2       string  The second string to compare.\n *\n * @return     mixed   1 if str1 is greater than str2 ;\n *\n *                     0 if str1 is equal to str2;\n *\n *                     -1 if str1 is less than str2 . On error boolean\n *                     FALSE is returned. WarningThis function may return\n *                     Boolean FALSE, but may also return a non-Boolean\n *                     value which evaluates to FALSE, such as 0 or \"\".\n *                     Please read the section on Booleans for more\n *                     information. Use the === operator for testing the\n *                     return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.collator-create.php )\n *\n * Procedural style Collator collator_create ( string $locale ) The\n * strings will be compared using the options already specified.\n *\n * @locale     string  The locale containing the required collation rules.\n *                     Special values for locales can be passed in - if\n *                     null is passed for the locale, the default locale\n *                     collation rules will be used. If empty string (\"\")\n *                     or \"root\" are passed, UCA rules will be used.\n *\n * @return     mixed   Return new instance of Collator object, or NULL on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "locale", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_get_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-attribute.php )\n *\n *\n * @obj        mixed\n * @attr       int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attr", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_get_error_code", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-error-code.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_get_error_message", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-error-message.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_get_locale", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.collator-get-locale.php\n * )\n *\n *\n * @obj        mixed\n * @type       int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_get_strength", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-strength.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_set_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-set-attribute.php )\n *\n *\n * @obj        mixed\n * @attr       int\n * @val        int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "attr", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "val", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_set_strength", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-set-strength.php )\n *\n *\n * @obj        mixed\n * @strength   int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strength", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_sort_with_sort_keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-sort-with-sort-keys.php )\n *\n *\n * @obj        mixed\n * @arr        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "collator_sort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.collator-sort.php )\n *\n * Procedural style bool collator_sort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array according to current\n * locale rules.\n *\n * Equivalent to standard PHP sort() .\n *\n * @obj        mixed   Collator object.\n * @arr        mixed   Array of strings to sort.\n * @sort_flag  int     Optional sorting type, one of the following:\n *\n *\n *\n *                     Collator::SORT_REGULAR - compare items normally\n *                     (don't change types)\n *\n *                     Collator::SORT_NUMERIC - compare items numerically\n *\n *                     Collator::SORT_STRING - compare items as strings\n *                     Default sorting type is Collator::SORT_REGULAR.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "q_Collator$$SORT_REGULAR", (const char *)24, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "idn_to_ascii", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.idn-to-ascii.php )\n *\n * This function converts Unicode domain name to IDNA ASCII-compatible\n * format.\n *\n * @domain     string  Domain to convert. In PHP 5 must be UTF-8 encoded.\n * @options    int     Conversion options - combination of IDNA_* constants\n *                     (except IDNA_ERROR_* constants).\n * @variant    int     Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or\n *                     INTL_IDNA_VARIANT_UTS46 for UTS #46.\n * @idna_info  mixed   This parameter can be used only if\n *                     INTL_IDNA_VARIANT_UTS46 was used for variant. In\n *                     that case, it will be filled with an array with the\n *                     keys 'result', the possibly illegal result of the\n *                     transformation, 'isTransitionalDifferent', a boolean\n *                     indicating whether the usage of the transitional\n *                     mechanisms of UTS #46 either has or would have\n *                     changed the result and 'errors', which is an int\n *                     representing a bitset of the error constants\n *                     IDNA_ERROR_*.\n *\n * @return     mixed   Domain name encoded in ASCII-compatible form.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "domain", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "variant", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2800, "idna_info", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "idn_to_unicode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.idn-to-unicode.php )\n *\n *\n * @domain     string\n * @options    int     Conversion options - combination of IDNA_* constants\n *                     (except IDNA_ERROR_* constants).\n * @variant    int     Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or\n *                     INTL_IDNA_VARIANT_UTS46 for UTS #46.\n * @idna_info  mixed   This parameter can be used only if\n *                     INTL_IDNA_VARIANT_UTS46 was used for variant. In\n *                     that case, it will be filled with an array with the\n *                     keys 'result', the possibly illegal result of the\n *                     transformation, 'isTransitionalDifferent', a boolean\n *                     indicating whether the usage of the transitional\n *                     mechanisms of UTS #46 either has or would have\n *                     changed the result and 'errors', which is an int\n *                     representing a bitset of the error constants\n *                     IDNA_ERROR_*.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "domain", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "variant", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2800, "idna_info", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "idn_to_utf8", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.idn-to-utf8.php )\n *\n * This function converts Unicode domain name from IDNA ASCII-compatible\n * format to plain Unicode.\n *\n * @domain     string  Domain to convert in IDNA ASCII-compatible format.\n * @options    int     Conversion options - combination of IDNA_* constants\n *                     (except IDNA_ERROR_* constants).\n * @variant    int     Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or\n *                     INTL_IDNA_VARIANT_UTS46 for UTS #46.\n * @idna_info  mixed   This parameter can be used only if\n *                     INTL_IDNA_VARIANT_UTS46 was used for variant. In\n *                     that case, it will be filled with an array with the\n *                     keys 'result', the possibly illegal result of the\n *                     transformation, 'isTransitionalDifferent', a boolean\n *                     indicating whether the usage of the transitional\n *                     mechanisms of UTS #46 either has or would have\n *                     changed the result and 'errors', which is an int\n *                     representing a bitset of the error constants\n *                     IDNA_ERROR_*.\n *\n * @return     mixed   Domain name in Unicode. In PHP5, domain name will be\n *                     in UTF-8.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "domain", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "variant", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2800, "idna_info", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_element", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-element.php )\n *\n *\n * @obj        mixed\n * @name       string\n * @value      string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_document_fragment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-document-fragment.php\n * )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_text_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-text-node.php )\n *\n *\n * @obj        mixed\n * @data       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_comment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-comment.php )\n *\n *\n * @obj        mixed\n * @data       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_cdatasection", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-cdatasection.php )\n *\n *\n * @obj        mixed\n * @data       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_processing_instruction", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-processing-instruction.php\n * )\n *\n *\n * @obj        mixed\n * @target     string\n * @data       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_entity_reference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-entity-reference.php\n * )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_get_elements_by_tag_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-get-elements-by-tag-name.php\n * )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_import_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-import-node.php )\n *\n *\n * @obj        mixed\n * @importednode\n *             object\n * @deep       bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "importednode", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "deep", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_element_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-element-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @qualifiedname\n *             string\n * @value      string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_create_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @qualifiedname\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_get_elements_by_tag_name_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-get-elements-by-tag-name-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_get_element_by_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-get-element-by-id.php )\n *\n *\n * @obj        mixed\n * @elementid  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "elementid", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_normalize_document", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-normalize-document.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_save", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-document-save.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @obj        mixed   The path to the saved XML document.\n * @file       string  Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n * @options    int\n *\n * @return     mixed   Returns the number of bytes written or FALSE if an\n *                     error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_savexml", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-savexml.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @obj        mixed   Use this parameter to output only a specific node\n *                     without XML declaration rather than the entire\n *                     document.\n * @node       object  Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n * @options    int\n *\n * @return     mixed   Returns the XML, or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "node", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_validate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-validate.php )\n *\n * Validates the document based on its DTD.\n *\n * You can also use the validateOnParse property of DOMDocument to make a\n * DTD validation.\n *\n * @obj        mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If the\n *                     document have no DTD attached, this method will\n *                     return FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_xinclude", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-xinclude.php )\n *\n *\n * @obj        mixed   libxml parameters. Available since PHP 5.1.0 and\n *                     Libxml 2.6.7.\n * @options    int\n *\n * @return     mixed   Returns the number of XIncludes in the document, -1\n *                     if some processing failed, or FALSE if there were no\n *                     substitutions.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_save_html", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-save-html.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_save_html_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-save-html-file.php )\n *\n *\n * @obj        mixed\n * @file       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_schema_validate_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-schema-validate-file.php\n * )\n *\n *\n * @obj        mixed\n * @filename   string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_schema_validate_xml", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-schema-validate-xml.php )\n *\n *\n * @obj        mixed\n * @source     string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_relaxng_validate_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-relaxng-validate-file.php\n * )\n *\n *\n * @obj        mixed\n * @filename   string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_document_relaxng_validate_xml", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-relaxng-validate-xml.php\n * )\n *\n *\n * @obj        mixed\n * @source     string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_insert_before", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-insert-before.php )\n *\n *\n * @obj        mixed\n * @newnode    object\n * @refnode    object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newnode", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "refnode", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_replace_child", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-replace-child.php )\n *\n *\n * @obj        mixed\n * @newchildobj\n *             object\n * @oldchildobj\n *             object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newchildobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "oldchildobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_remove_child", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-remove-child.php )\n *\n *\n * @obj        mixed\n * @node       object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "node", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_append_child", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-append-child.php )\n *\n *\n * @obj        mixed\n * @newnode    object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newnode", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_has_child_nodes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-has-child-nodes.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_clone_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-node-clone-node.php\n * )\n *\n *\n * @obj        mixed\n * @deep       bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "deep", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_normalize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-node-normalize.php\n * )\n *\n * Normalizes the node.\n *\n * @obj        mixed\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_is_supported", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-is-supported.php )\n *\n *\n * @obj        mixed\n * @feature    string\n * @version    string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "feature", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "version", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_has_attributes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-has-attributes.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_is_same_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-is-same-node.php )\n *\n *\n * @obj        mixed\n * @node       object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "node", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_lookup_prefix", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-lookup-prefix.php )\n *\n *\n * @obj        mixed\n * @prefix     string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_is_default_namespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-is-default-namespace.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_node_lookup_namespace_uri", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-lookup-namespace-uri.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_nodelist_item", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-nodelist-item.php )\n *\n * Retrieves a node specified by index within the DOMNodeList object. Tip\n *\n * If you need to know the number of nodes in the collection, use the\n * length property of the DOMNodeList object.\n *\n * @obj        mixed   Index of the node into the collection.\n * @index      int\n *\n * @return     mixed   The node at the indexth position in the DOMNodeList,\n *                     or NULL if that is not a valid index.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_namednodemap_get_named_item", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-namednodemap-get-named-item.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_namednodemap_item", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-namednodemap-item.php )\n *\n * Retrieves a node specified by index within the DOMNamedNodeMap object.\n *\n * @obj        mixed   Index into this map.\n * @index      int\n *\n * @return     mixed   The node at the indexth position in the map, or NULL\n *                     if that is not a valid index (greater than or equal\n *                     to the number of nodes in this map).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_namednodemap_get_named_item_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-namednodemap-get-named-item-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_characterdata_substring_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-substring-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @count      int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_characterdata_append_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-append-data.php )\n *\n *\n * @obj        mixed\n * @arg        string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "arg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_characterdata_insert_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-insert-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @data       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_characterdata_delete_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-delete-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @count      int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_characterdata_replace_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-replace-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @count      int\n * @data       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_attr_is_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-attr-is-id.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_get_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n * @value      string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_remove_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-remove-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_get_attribute_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute-node.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_attribute_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute-node.php )\n *\n *\n * @obj        mixed\n * @newattr    object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_remove_attribute_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-remove-attribute-node.php\n * )\n *\n *\n * @obj        mixed\n * @oldattr    object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "oldattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_get_elements_by_tag_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-elements-by-tag-name.php\n * )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_get_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @name       string\n * @value      string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_remove_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-remove-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_get_attribute_node_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute-node-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_attribute_node_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute-node-ns.php\n * )\n *\n *\n * @obj        mixed\n * @newattr    object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_get_elements_by_tag_name_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-elements-by-tag-name-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_has_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-has-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_has_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-has-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_id_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-id-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n * @isid       bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isid", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_id_attribute_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-id-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n * @isid       bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isid", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_element_set_id_attribute_node", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-id-attribute-node.php\n * )\n *\n *\n * @obj        mixed\n * @idattr     object\n * @isid       bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "idattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isid", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_text_split_text", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-text-split-text.php\n * )\n *\n *\n * @obj        mixed\n * @offset     int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_text_is_whitespace_in_element_content", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-text-is-whitespace-in-element-content.php\n * )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_xpath_register_ns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-xpath-register-ns.php )\n *\n *\n * @obj        mixed\n * @prefix     string\n * @uri        string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_xpath_query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-xpath-query.php )\n *\n * Executes the given XPath expression.\n *\n * @obj        mixed   The XPath expression to execute.\n * @expr       string  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n * @context    object\n *\n * @return     mixed   Returns a DOMNodeList containing all nodes matching\n *                     the given XPath expression. Any expression which do\n *                     not return nodes will return an empty DOMNodeList.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_xpath_evaluate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dom-xpath-evaluate.php\n * )\n *\n * Executes the given XPath expression and returns a typed result if\n * possible.\n *\n * @obj        mixed   The XPath expression to execute.\n * @expr       string  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n * @context    object\n *\n * @return     mixed   Returns a typed result if possible or a DOMNodeList\n *                     containing all nodes matching the given XPath\n *                     expression.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dom_xpath_register_php_functions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-xpath-register-php-functions.php )\n *\n *\n * @obj        mixed\n * @funcs      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "funcs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo___construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @file_name  string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "file_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getatime", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getbasename", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @suffix     string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "suffix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getctime", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getfileinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @class_name string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getfilename", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getgroup", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getinode", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getlinktarget", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getmtime", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getowner", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getpath", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getpathinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @class_name string\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getpathname", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getperms", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getrealpath", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_getsize", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_gettype", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_isdir", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_isexecutable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_isfile", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_islink", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_isreadable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_iswritable", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_openfile", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @open_mode  string\n * @use_include_path\n *             bool\n * @context    mixed\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "open_mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_setfileclass", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @class_name string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo_setinfoclass", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @class_name string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileinfo___tostring", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject___construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @filename   string\n * @open_mode  string\n * @use_include_path\n *             bool\n * @context    mixed\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "open_mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_current", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_eof", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fflush", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fgetc", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fgetcsv", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @delimiter  string\n * @enclosure  string\n * @escape     string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "delimiter", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "enclosure", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "escape", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fgets", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fgetss", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @allowable_tags\n *             string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "allowable_tags", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_flock", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @wouldblock mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "wouldblock", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fpassthru", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fscanf", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @_argc      int\n * @obj        resource\n *\n * @format     string\n * @_argv      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "_argc", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "_argv", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fseek", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @offset     int\n * @whence     int\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "whence", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fstat", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_ftell", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_ftruncate", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @size       int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_fwrite", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @str        string\n * @length     int\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_getcvscontrol", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_getflags", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_getmaxlinelen", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_key", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_next", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_valid", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_seek", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @line_pos   int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "line_pos", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_setcsvcontrol", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @delimiter  string\n * @enclosure  string\n * @escape     string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "delimiter", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "enclosure", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "escape", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_setflags", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @flags      int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_splfileobject_setmaxlinelen", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @max_len    int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fopen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fopen.php )\n *\n * fopen() binds a named resource, specified by filename, to a stream.\n *\n * @filename   string\n * @mode       string\n * @use_include_path\n *             bool\n * @context    mixed\n *\n * @return     mixed   Returns a file pointer resource on success, or FALSE\n *                     on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "popen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.popen.php )\n *\n * Opens a pipe to a process executed by forking the command given by\n * command.\n *\n * @command    string  The command\n * @mode       string  The mode\n *\n * @return     mixed   Returns a file pointer identical to that returned by\n *                     fopen(), except that it is unidirectional (may only\n *                     be used for reading or writing) and must be closed\n *                     with pclose(). This pointer may be used with\n *                     fgets(), fgetss(), and fwrite().\n *\n *                     If an error occurs, returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "command", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fclose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fclose.php )\n *\n * The file pointed to by handle is closed.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pclose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pclose.php )\n *\n * Closes a file pointer to a pipe opened by popen().\n *\n * @handle     resource\n *                     The file pointer must be valid, and must have been\n *                     returned by a successful call to popen().\n *\n * @return     mixed   Returns the termination status of the process that\n *                     was run.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fseek", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fseek.php )\n *\n * Sets the file position indicator for the file referenced by handle. The\n * new position, measured in bytes from the beginning of the file, is\n * obtained by adding offset to the position specified by whence.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @offset     int     The offset.\n *\n *                     To move to a position before the end-of-file, you\n *                     need to pass a negative value in offset and set\n *                     whence to SEEK_END.\n * @whence     int     whence values are: SEEK_SET - Set position equal to\n *                     offset bytes. SEEK_CUR - Set position to current\n *                     location plus offset. SEEK_END - Set position to\n *                     end-of-file plus offset.\n *\n * @return     mixed   Upon success, returns 0; otherwise, returns -1. Note\n *                     that seeking past EOF is not considered an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "whence", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "SEEK_SET", (const char *)8, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rewind.php )\n *\n * Sets the file position indicator for handle to the beginning of the\n * file stream.\n *\n * If you have opened the file in append (\"a\" or \"a+\") mode, any data you\n * write to the file will always be appended, regardless of the file\n * position.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ftell", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ftell.php )\n *\n * Returns the position of the file pointer referenced by handle.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or popen().\n *                     ftell() gives undefined results for append-only\n *                     streams (opened with \"a\" flag).\n *\n * @return     mixed   Returns the position of the file pointer referenced\n *                     by handle as an integer; i.e., its offset into the\n *                     file stream.\n *\n *                     If an error occurs, returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "feof", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.feof.php )\n *\n * Tests for end-of-file on a file pointer.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     bool    Returns TRUE if the file pointer is at EOF or an\n *                     error occurs (including socket timeout); otherwise\n *                     returns FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fstat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fstat.php )\n *\n * Gathers the statistics of the file opened by the file pointer handle.\n * This function is similar to the stat() function except that it operates\n * on an open file pointer instead of a filename.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n *\n * @return     mixed   Returns an array with the statistics of the file;\n *                     the format of the array is described in detail on\n *                     the stat() manual page.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fread", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fread.php )\n *\n * fread() reads up to length bytes from the file pointer referenced by\n * handle. Reading stops as soon as one of the following conditions is met:\n * length bytes have been read EOF (end of file) is reached a packet\n * becomes available (for network streams) 8192 bytes have been read (after\n * opening userspace stream)\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @length     int     Up to length number of bytes read.\n *\n * @return     mixed   Returns the read string or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fgetc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fgetc.php )\n *\n * Gets a character from the given file pointer.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     mixed   Returns a string containing a single character read\n *                     from the file pointed to by handle. Returns FALSE on\n *                     EOF. WarningThis function may return Boolean FALSE,\n *                     but may also return a non-Boolean value which\n *                     evaluates to FALSE, such as 0 or \"\". Please read the\n *                     section on Booleans for more information. Use the\n *                     === operator for testing the return value of this\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fgets", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fgets.php )\n *\n * Gets a line from file pointer.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n * @length     int     Reading ends when length - 1 bytes have been read,\n *                     on a newline (which is included in the return\n *                     value), or on EOF (whichever comes first). If no\n *                     length is specified, it will keep reading from the\n *                     stream until it reaches the end of the line.\n *\n *                     Until PHP 4.3.0, omitting it would assume 1024 as\n *                     the line length. If the majority of the lines in the\n *                     file are all larger than 8KB, it is more resource\n *                     efficient for your script to specify the maximum\n *                     line length.\n *\n * @return     mixed   Returns a string of up to length - 1 bytes read from\n *                     the file pointed to by handle.\n *\n *                     If an error occurs, returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fgetss", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fgetss.php )\n *\n * Identical to fgets(), except that fgetss() attempts to strip any NUL\n * bytes, HTML and PHP tags from the text it reads.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n * @length     int     Length of the data to be retrieved.\n * @allowable_tags\n *             string  You can use the optional third parameter to specify\n *                     tags which should not be stripped.\n *\n * @return     mixed   Returns a string of up to length - 1 bytes read from\n *                     the file pointed to by handle, with all HTML and PHP\n *                     code stripped.\n *\n *                     If an error occurs, returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "allowable_tags", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10066040, "fscanf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fscanf.php )\n *\n * The function fscanf() is similar to sscanf(), but it takes its input\n * from a file associated with handle and interprets the input according to\n * the specified format, which is described in the documentation for\n * sprintf().\n *\n * Any whitespace in the format string matches any whitespace in the input\n * stream. This means that even a tab \\t in the format string can match a\n * single space character in the input stream.\n *\n * Each call to fscanf() reads one line from the file.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @format     string  The specified format as described in the sprintf()\n *                     documentation.\n *\n * @return     mixed   If only two parameters were passed to this function,\n *                     the values parsed will be returned as an array.\n *                     Otherwise, if optional parameters are passed, the\n *                     function will return the number of assigned values.\n *                     The optional parameters must be passed by reference.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fpassthru", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fpassthru.php )\n *\n * Reads to EOF on the given file pointer from the current position and\n * writes the results to the output buffer.\n *\n * You may need to call rewind() to reset the file pointer to the\n * beginning of the file if you have already written data to the file.\n *\n * If you just want to dump the contents of a file to the output buffer,\n * without first modifying it or seeking to a particular offset, you may\n * want to use the readfile(), which saves you the fopen() call.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     mixed   If an error occurs, fpassthru() returns FALSE.\n *                     Otherwise, fpassthru() returns the number of\n *                     characters read from handle and passed through to\n *                     the output.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fwrite", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fwrite.php )\n *\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @data       string  The string that is to be written.\n * @length     int     If the length argument is given, writing will stop\n *                     after length bytes have been written or the end of\n *                     string is reached, whichever comes first.\n *\n *                     Note that if the length argument is given, then the\n *                     magic_quotes_runtime configuration option will be\n *                     ignored and no slashes will be stripped from string.\n *\n * @return     mixed   fwrite() returns the number of bytes written, or\n *                     FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fputs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fputs.php )\n *\n *\n * @handle     resource\n *\n * @data       string\n * @length     int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "fprintf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fprintf.php )\n *\n * Write a string produced according to format to the stream resource\n * specified by handle.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @format     string  See sprintf() for a description of format.\n *\n * @return     mixed   Returns the length of the string written.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "vfprintf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.vfprintf.php )\n *\n * Write a string produced according to format to the stream resource\n * specified by handle.\n *\n * Operates as fprintf() but accepts an array of arguments, rather than a\n * variable number of arguments.\n *\n * @handle     resource\n *\n * @format     string  See sprintf() for a description of format.\n * @args       vector\n *\n * @return     mixed   Returns the length of the outputted string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fflush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fflush.php )\n *\n * This function forces a write of all buffered output to the resource\n * pointed to by the file handle.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ftruncate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ftruncate.php )\n *\n * Takes the filepointer, handle, and truncates the file to length, size.\n *\n * @handle     resource\n *                     The file pointer.\n *\n *                     The handle must be open for writing.\n * @size       int     The size to truncate to.\n *\n *                     If size is larger than the file then the file is\n *                     extended with null bytes.\n *\n *                     If size is smaller than the file then the file is\n *                     truncated to that size.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "flock", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.flock.php )\n *\n * flock() allows you to perform a simple reader/writer model which can be\n * used on virtually every platform (including most Unix derivatives and\n * even Windows).\n *\n * On versions of PHP before 5.3.2, the lock is released also by fclose()\n * (which is also called automatically when script finished).\n *\n * PHP supports a portable way of locking complete files in an advisory\n * way (which means all accessing programs have to use the same way of\n * locking or it will not work). By default, this function will block until\n * the requested lock is acquired; this may be controlled (on non-Windows\n * platforms) with the LOCK_NB option documented below.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @operation  int     operation is one of the following: LOCK_SH to\n *                     acquire a shared lock (reader). LOCK_EX to acquire\n *                     an exclusive lock (writer). LOCK_UN to release a\n *                     lock (shared or exclusive).\n *\n *                     It is also possible to add LOCK_NB as a bitmask to\n *                     one of the above operations if you don't want\n *                     flock() to block while locking. (not supported on\n *                     Windows)\n * @wouldblock mixed   The optional third argument is set to TRUE if the\n *                     lock would block (EWOULDBLOCK errno condition). (not\n *                     supported on Windows)\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "operation", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "wouldblock", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fputcsv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fputcsv.php )\n *\n * fputcsv() formats a line (passed as a fields array) as CSV and write it\n * (terminated by a newline) to the specified file handle.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n * @fields     vector  An array of values.\n * @delimiter  string  The optional delimiter parameter sets the field\n *                     delimiter (one character only).\n * @enclosure  string  The optional enclosure parameter sets the field\n *                     enclosure (one character only).\n *\n * @return     mixed   Returns the length of the written string or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fields", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "delimiter", "", (const char *)0x14 /* KindOfString */, "s:1:\",\";", (const char *)8, "\",\"", (const char *)3, NULL,
  (const char *)0x2000, "enclosure", "", (const char *)0x14 /* KindOfString */, "s:1:\"\"\";", (const char *)8, "\"\\\"\"", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fgetcsv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fgetcsv.php )\n *\n * Similar to fgets() except that fgetcsv() parses the line it reads for\n * fields in CSV format and returns an array containing the fields read.\n *\n * @handle     resource\n *                     A valid file pointer to a file successfully opened\n *                     by fopen(), popen(), or fsockopen().\n * @length     int     Must be greater than the longest line (in\n *                     characters) to be found in the CSV file (allowing\n *                     for trailing line-end characters). It became\n *                     optional in PHP 5. Omitting this parameter (or\n *                     setting it to 0 in PHP 5.0.4 and later) the maximum\n *                     line length is not limited, which is slightly\n *                     slower.\n * @delimiter  string  Set the field delimiter (one character only).\n * @enclosure  string  Set the field enclosure character (one character\n *                     only).\n *\n * @return     mixed   Returns an indexed array containing the fields read.\n *\n *                     A blank line in a CSV file will be returned as an\n *                     array comprising a single null field, and will not\n *                     be treated as an error. If PHP is not properly\n *                     recognizing the line endings when reading files\n *                     either on or created by a Macintosh computer,\n *                     enabling the auto_detect_line_endings run-time\n *                     configuration option may help resolve the problem.\n *\n *                     fgetcsv() returns NULL if an invalid handle is\n *                     supplied or FALSE on other errors, including end of\n *                     file.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "delimiter", "", (const char *)0x14 /* KindOfString */, "s:1:\",\";", (const char *)8, "\",\"", (const char *)3, NULL,
  (const char *)0x2000, "enclosure", "", (const char *)0x14 /* KindOfString */, "s:1:\"\"\";", (const char *)8, "\"\\\"\"", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "file_get_contents", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.file-get-contents.php )\n *\n * This function is similar to file(), except that file_get_contents()\n * returns the file in a string, starting at the specified offset up to\n * maxlen bytes. On failure, file_get_contents() will return FALSE.\n *\n * file_get_contents() is the preferred way to read the contents of a file\n * into a string. It will use memory mapping techniques if supported by\n * your OS to enhance performance.\n *\n * If you're opening a URI with special characters, such as spaces, you\n * need to encode the URI with urlencode().\n *\n * The default value of maxlen is not actually -1; rather, it is an\n * internal PHP value which means to copy the entire stream until\n * end-of-file is reached. The only way to specify this default value is to\n * leave it out of the parameter list.\n *\n * @filename   string  Name of the file to read.\n * @use_include_path\n *             bool    As of PHP 5 the FILE_USE_INCLUDE_PATH can be used to\n *                     trigger include path search.\n * @context    mixed   A valid context resource created with\n *                     stream_context_create(). If you don't need to use a\n *                     custom context, you can skip this parameter by NULL.\n * @offset     int     The offset where the reading starts on the original\n *                     stream.\n * @maxlen     int     Maximum length of data read. The default is to read\n *                     until end of file is reached. Note that this\n *                     parameter is applied to the stream processed by the\n *                     filters.\n *\n * @return     mixed   The function returns the read data or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "maxlen", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "file_put_contents", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.file-put-contents.php )\n *\n * This function is identical to calling fopen(), fwrite() and fclose()\n * successively to write data to a file.\n *\n * If filename does not exist, the file is created. Otherwise, the\n * existing file is overwritten, unless the FILE_APPEND flags is set.\n *\n * @filename   string  Path to the file where to write the data.\n * @data       mixed   The data to write. Can be either a string, an array\n *                     or a stream resource.\n *\n *                     If data is a stream resource, the remaining buffer\n *                     of that stream will be copied to the specified file.\n *                     This is similar with using stream_copy_to_stream().\n *\n *                     You can also specify the data parameter as a single\n *                     dimension array. This is equivalent to\n *                     file_put_contents($filename, implode('', $array)).\n * @flags      int     The value of flags can be any combination of the\n *                     following flags (with some restrictions), joined\n *                     with the binary OR (|) operator.\n *\n *                     Available flags Flag Description\n *                     FILE_USE_INCLUDE_PATH Search for filename in the\n *                     include directory. See include_path for more\n *                     information. FILE_APPEND If file filename already\n *                     exists, append the data to the file instead of\n *                     overwriting it. Mutually exclusive with LOCK_EX\n *                     since appends are atomic and thus there is no reason\n *                     to lock. LOCK_EX Acquire an exclusive lock on the\n *                     file while proceeding to the writing. Mutually\n *                     exclusive with FILE_APPEND.\n * @context    mixed   A valid context resource created with\n *                     stream_context_create().\n *\n * @return     mixed   The function returns the number of bytes that were\n *                     written to the file, or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.file.php )\n *\n * Reads an entire file into an array.\n *\n * You can use file_get_contents() to return the contents of a file as a\n * string.\n *\n * @filename   string  Path to the file. TipA URL can be used as a filename\n *                     with this function if the fopen wrappers have been\n *                     enabled. See fopen() for more details on how to\n *                     specify the filename. See the List of Supported\n *                     Protocols/Wrappers for links to information about\n *                     what abilities the various wrappers have, notes on\n *                     their usage, and information on any predefined\n *                     variables they may provide.\n * @flags      int     The optional parameter flags can be one, or more, of\n *                     the following constants: FILE_USE_INCLUDE_PATH\n *                     Search for the file in the include_path.\n * @context    mixed   Do not add newline at the end of each array element\n *\n * @return     mixed   Returns the file in an array. Each element of the\n *                     array corresponds to a line in the file, with the\n *                     newline still attached. Upon failure, file() returns\n *                     FALSE.\n *\n *                     Each line in the resulting array will include the\n *                     line ending, unless FILE_IGNORE_NEW_LINES is used,\n *                     so you still need to use rtrim() if you do not want\n *                     the line ending present. If PHP is not properly\n *                     recognizing the line endings when reading files\n *                     either on or created by a Macintosh computer,\n *                     enabling the auto_detect_line_endings run-time\n *                     configuration option may help resolve the problem.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.readfile.php )\n *\n * Reads a file and writes it to the output buffer.\n *\n * @filename   string  The filename being read.\n * @use_include_path\n *             bool    You can use the optional second parameter and set it\n *                     to TRUE, if you want to search for the file in the\n *                     include_path, too.\n * @context    mixed   A context stream resource.\n *\n * @return     mixed   Returns the number of bytes read from the file. If\n *                     an error occurs, FALSE is returned and unless the\n *                     function was called as @readfile(), an error message\n *                     is printed.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "move_uploaded_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.move-uploaded-file.php\n * )\n *\n * This function checks to ensure that the file designated by filename is\n * a valid upload file (meaning that it was uploaded via PHP's HTTP POST\n * upload mechanism). If the file is valid, it will be moved to the\n * filename given by destination.\n *\n * This sort of check is especially important if there is any chance that\n * anything done with uploaded files could reveal their contents to the\n * user, or even to other users on the same system.\n *\n * @filename   string  The filename of the uploaded file.\n * @destination\n *             string  The destination of the moved file.\n *\n * @return     bool    If filename is not a valid upload file, then no\n *                     action will occur, and move_uploaded_file() will\n *                     return FALSE.\n *\n *                     If filename is a valid upload file, but cannot be\n *                     moved for some reason, no action will occur, and\n *                     move_uploaded_file() will return FALSE.\n *                     Additionally, a warning will be issued.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "destination", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "parse_ini_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.parse-ini-file.php )\n *\n * parse_ini_file() loads in the ini file specified in filename, and\n * returns the settings in it in an associative array.\n *\n * The structure of the ini file is the same as the php.ini's.\n *\n * @filename   string  The filename of the ini file being parsed.\n * @process_sections\n *             bool    By setting the process_sections parameter to TRUE,\n *                     you get a multidimensional array, with the section\n *                     names and settings included. The default for\n *                     process_sections is FALSE\n * @scanner_mode\n *             int     Can either be INI_SCANNER_NORMAL (default) or\n *                     INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied,\n *                     then option values will not be parsed.\n *\n * @return     mixed   The settings are returned as an associative array on\n *                     success, and FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "process_sections", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "scanner_mode", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "INI_SCANNER_NORMAL", (const char *)18, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "parse_ini_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.parse-ini-string.php )\n *\n * parse_ini_string() returns the settings in string ini in an associative\n * array.\n *\n * The structure of the ini string is the same as the php.ini's.\n *\n * @ini        string  The contents of the ini file being parsed.\n * @process_sections\n *             bool    By setting the process_sections parameter to TRUE,\n *                     you get a multidimensional array, with the section\n *                     names and settings included. The default for\n *                     process_sections is FALSE\n * @scanner_mode\n *             int     Can either be INI_SCANNER_NORMAL (default) or\n *                     INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied,\n *                     then option values will not be parsed.\n *\n * @return     mixed   The settings are returned as an associative array on\n *                     success, and FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ini", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "process_sections", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "scanner_mode", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "INI_SCANNER_NORMAL", (const char *)18, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "parse_hdf_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.parse-hdf-file.php )\n *\n *\n * @filename   string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "parse_hdf_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.parse-hdf-string.php )\n *\n *\n * @input      string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "write_hdf_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.write-hdf-file.php )\n *\n *\n * @data       map\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "write_hdf_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.write-hdf-string.php )\n *\n *\n * @data       map\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "data", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "md5_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.md5-file.php )\n *\n * Calculates the MD5 hash of the file specified by the filename parameter\n * using the RSA Data Security, Inc. MD5 Message-Digest Algorithm, and\n * returns that hash. The hash is a 32-character hexadecimal number.\n *\n * @filename   string  The filename\n * @raw_output bool    When TRUE, returns the digest in raw binary format\n *                     with a length of 16.\n *\n * @return     mixed   Returns a string on success, FALSE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sha1_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sha1-file.php )\n *\n *\n * @filename   string  The filename of the file to hash.\n * @raw_output bool    When TRUE, returns the digest in raw binary format\n *                     with a length of 20.\n *\n * @return     mixed   Returns a string on success, FALSE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chmod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chmod.php )\n *\n * Attempts to change the mode of the specified file to that given in\n * mode.\n *\n * @filename   string  Path to the file.\n * @mode       int     Note that mode is not automatically assumed to be an\n *                     octal value, so strings (such as \"g+w\") will not\n *                     work properly. To ensure the expected operation, you\n *                     need to prefix mode with a zero (0):\n *\n *\n *\n *\n *\n *                     The mode parameter consists of three octal number\n *                     components specifying access restrictions for the\n *                     owner, the user group in which the owner is in, and\n *                     to everybody else in this order. One component can\n *                     be computed by adding up the needed permissions for\n *                     that target user base. Number 1 means that you grant\n *                     execute rights, number 2 means that you make the\n *                     file writeable, number 4 means that you make the\n *                     file readable. Add up these numbers to specify\n *                     needed rights. You can also read more about modes on\n *                     Unix systems with 'man 1 chmod' and 'man 2 chmod'.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chown", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chown.php )\n *\n * Attempts to change the owner of the file filename to user user. Only\n * the superuser may change the owner of a file.\n *\n * @filename   string  Path to the file.\n * @user       num|string\n *                     A user name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "user", "", (const char *)0xffffffff /* KindOfUnknown: $t: Primitive */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lchown", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lchown.php )\n *\n * Attempts to change the owner of the symlink filename to user user.\n *\n * Only the superuser may change the owner of a symlink.\n *\n * @filename   string  Path to the file.\n * @user       mixed   User name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "user", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chgrp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chgrp.php )\n *\n * Attempts to change the group of the file filename to group.\n *\n * Only the superuser may change the group of a file arbitrarily; other\n * users may change the group of a file to any group of which that user is\n * a member.\n *\n * @filename   string  Path to the file.\n * @group      num|string\n *                     A group name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "group", "", (const char *)0xffffffff /* KindOfUnknown: $t: Primitive */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lchgrp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lchgrp.php )\n *\n * Attempts to change the group of the symlink filename to group.\n *\n * Only the superuser may change the group of a symlink arbitrarily; other\n * users may change the group of a symlink to any group of which that user\n * is a member.\n *\n * @filename   string  Path to the symlink.\n * @group      mixed   The group specified by name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "group", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "touch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.touch.php )\n *\n * Attempts to set the access and modification times of the file named in\n * the filename parameter to the value given in time. Note that the access\n * time is always modified, regardless of the number of parameters.\n *\n * If the file does not exist, it will be created.\n *\n * @filename   string  The name of the file being touched.\n * @mtime      int     The touch time. If time is not supplied, the current\n *                     system time is used.\n * @atime      int     If present, the access time of the given filename is\n *                     set to the value of atime. Otherwise, it is set to\n *                     time.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mtime", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "atime", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "copy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.copy.php )\n *\n * Makes a copy of the file source to dest.\n *\n * If you wish to move a file, use the rename() function.\n *\n * @source     string  Path to the source file.\n * @dest       string  The destination path. If dest is a URL, the copy\n *                     operation may fail if the wrapper does not support\n *                     overwriting of existing files. Warning\n *\n *                     If the destination file already exists, it will be\n *                     overwritten.\n * @context    mixed   A valid context resource created with\n *                     stream_context_create().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dest", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rename.php )\n *\n * Attempts to rename oldname to newname.\n *\n * @oldname    string  The old name. The wrapper used in oldname must match\n *                     the wrapper used in newname.\n * @newname    string  The new name.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "oldname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "umask", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.umask.php )\n *\n * umask() sets PHP's umask to mask & 0777 and returns the old umask. When\n * PHP is being used as a server module, the umask is restored when each\n * request is finished.\n *\n * @mask       mixed   The new umask.\n *\n * @return     int     umask() without arguments simply returns the current\n *                     umask otherwise the old umask is returned.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "mask", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "unlink", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.unlink.php )\n *\n * Deletes filename. Similar to the Unix C unlink() function. A E_WARNING\n * level error will be generated on failure.\n *\n * @filename   string  Path to the file.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "link", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.link.php )\n *\n * link() creates a hard link.\n *\n * @target     string  The link name.\n * @link       string  Target of the link.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "symlink", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.symlink.php )\n *\n * symlink() creates a symbolic link to the existing target with the\n * specified name link.\n *\n * @target     string  Target of the link.\n * @link       string  The link name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "link", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "basename", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.basename.php )\n *\n * Given a string containing a path to a file, this function will return\n * the base name of the file.\n *\n * @path       string  A path.\n *\n *                     On Windows, both slash (/) and backslash (\\) are\n *                     used as directory separator character. In other\n *                     environments, it is the forward slash (/).\n * @suffix     string  If the filename ends in suffix this will also be cut\n *                     off.\n *\n * @return     string  Returns the base name of the given path.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "suffix", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fnmatch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fnmatch.php )\n *\n * fnmatch() checks if the passed string would match the given shell\n * wildcard pattern.\n *\n * @pattern    string  The shell wildcard pattern.\n * @filename   string  The tested string. This function is especially\n *                     useful for filenames, but may also be used on\n *                     regular strings.\n *\n *                     The average user may be used to shell patterns or\n *                     at least in their simplest form to '\?' and '*'\n *                     wildcards so using fnmatch() instead of preg_match()\n *                     for frontend search expression input may be way more\n *                     convenient for non-programming users.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. A list of possible flags for fnmatch()\n *                     Flag Description FNM_NOESCAPE Disable backslash\n *                     escaping. FNM_PATHNAME Slash in string only matches\n *                     slash in the given pattern. FNM_PERIOD Leading\n *                     period in string must be exactly matched by period\n *                     in the given pattern. FNM_CASEFOLD Caseless match.\n *                     Part of the GNU extension.\n *\n * @return     bool    Returns TRUE if there is a match, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "glob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.glob.php )\n *\n * The glob() function searches for all the pathnames matching pattern\n * according to the rules used by the libc glob() function, which is\n * similar to the rules used by common shells.\n *\n * @pattern    string  The pattern. No tilde expansion or parameter\n *                     substitution is done.\n * @flags      int     Valid flags: GLOB_MARK - Adds a slash to each\n *                     directory returned GLOB_NOSORT - Return files as\n *                     they appear in the directory (no sorting)\n *                     GLOB_NOCHECK - Return the search pattern if no files\n *                     matching it were found GLOB_NOESCAPE - Backslashes\n *                     do not quote metacharacters GLOB_BRACE - Expands\n *                     {a,b,c} to match 'a', 'b', or 'c' GLOB_ONLYDIR -\n *                     Return only directory entries which match the\n *                     pattern GLOB_ERR - Stop on read errors (like\n *                     unreadable directories), by default errors are\n *                     ignored.\n *\n * @return     mixed   Returns an array containing the matched\n *                     files/directories, an empty array if no file matched\n *                     or FALSE on error.\n *\n *                     On some systems it is impossible to distinguish\n *                     between empty match and an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "tempnam", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.tempnam.php )\n *\n * Creates a file with a unique filename, with access permission set to\n * 0600, in the specified directory. If the directory does not exist,\n * tempnam() may generate a file in the system's temporary directory, and\n * return the name of that.\n *\n * @dir        string  The directory where the temporary filename will be\n *                     created.\n * @prefix     string  The prefix of the generated temporary filename.\n *                     Windows uses only the first three characters of\n *                     prefix.\n *\n * @return     mixed   Returns the new temporary filename, or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "dir", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "tmpfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.tmpfile.php )\n *\n * Creates a temporary file with a unique name in read-write (w+) mode and\n * returns a file handle .\n *\n * The file is automatically removed when closed (using fclose()), or when\n * the script ends.\n *\n * For details, consult your system documentation on the tmpfile(3)\n * function, as well as the stdio.h header file.\n *\n * @return     mixed   Returns a file handle, similar to the one returned\n *                     by fopen(), for the new file or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fileperms", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fileperms.php )\n *\n * Gets permissions for the given file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the permissions on the file, or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fileinode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fileinode.php )\n *\n * Gets the file inode.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the inode number of the file, or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filesize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.filesize.php )\n *\n * Gets the size for the given file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the size of the file in bytes, or FALSE (and\n *                     generates an error of level E_WARNING) in case of an\n *                     error. Because PHP's integer type is signed and many\n *                     platforms use 32bit integers, filesize() may return\n *                     unexpected results for files which are larger than\n *                     2GB. For files between 2GB and 4GB in size this can\n *                     usually be overcome by using sprintf(\"%u\",\n *                     filesize($file)).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fileowner", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fileowner.php )\n *\n * Gets the file owner.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the user ID of the owner of the file, or\n *                     FALSE on failure. The user ID is returned in\n *                     numerical format, use posix_getpwuid() to resolve it\n *                     to a username.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filegroup", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.filegroup.php )\n *\n * Gets the file group. The group ID is returned in numerical format, use\n * posix_getgrgid() to resolve it to a group name.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the group ID of the file, or FALSE in case\n *                     of an error. The group ID is returned in numerical\n *                     format, use posix_getgrgid() to resolve it to a\n *                     group name. Upon failure, FALSE is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fileatime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fileatime.php )\n *\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the time the file was last accessed, or\n *                     FALSE on failure. The time is returned as a Unix\n *                     timestamp.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filemtime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.filemtime.php )\n *\n * This function returns the time when the data blocks of a file were\n * being written to, that is, the time when the content of the file was\n * changed.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the time the file was last modified, or\n *                     FALSE on failure. The time is returned as a Unix\n *                     timestamp, which is suitable for the date()\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filectime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.filectime.php )\n *\n * Gets the inode change time of a file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the time the file was last changed, or FALSE\n *                     on failure. The time is returned as a Unix\n *                     timestamp.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filetype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.filetype.php )\n *\n * Returns the type of the given file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the type of the file. Possible values are\n *                     fifo, char, dir, block, link, file, socket and\n *                     unknown.\n *\n *                     Returns FALSE if an error occurs. filetype() will\n *                     also produce an E_NOTICE message if the stat call\n *                     fails or if the file type is unknown.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "linkinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.linkinfo.php )\n *\n * Gets information about a link.\n *\n * This function is used to verify if a link (pointed to by path) really\n * exists (using the same method as the S_ISLNK macro defined in stat.h).\n *\n * @filename   string  Path to the link.\n *\n * @return     mixed   linkinfo() returns the st_dev field of the Unix C\n *                     stat structure returned by the lstat system call.\n *                     Returns 0 or FALSE in case of error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_writable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-writable.php )\n *\n * Returns TRUE if the filename exists and is writable. The filename\n * argument may be a directory name allowing you to check if a directory is\n * writable.\n *\n * Keep in mind that PHP may be accessing the file as the user id that the\n * web server runs as (often 'nobody'). Safe mode limitations are not taken\n * into account.\n *\n * @filename   string  The filename being checked.\n *\n * @return     bool    Returns TRUE if the filename exists and is writable.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_writeable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-writeable.php )\n *\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_readable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-readable.php )\n *\n * Tells whether a file exists and is readable.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the file or directory specified by\n *                     filename exists and is readable, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_executable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-executable.php )\n *\n * Tells whether the filename is executable.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the filename exists and is\n *                     executable, or FALSE on error.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-file.php )\n *\n * Tells whether the given file is a regular file.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the filename exists and is a regular\n *                     file, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_dir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-dir.php )\n *\n * Tells whether the given filename is a directory.\n *\n * @filename   string  Path to the file. If filename is a relative\n *                     filename, it will be checked relative to the current\n *                     working directory. If filename is a symbolic or hard\n *                     link then the link will be resolved and checked. If\n *                     you have enabled safe mode, or open_basedir further\n *                     restrictions may apply.\n *\n * @return     bool    Returns TRUE if the filename exists and is a\n *                     directory, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_link", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-link.php )\n *\n * Tells whether the given file is a symbolic link.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the filename exists and is a\n *                     symbolic link, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_uploaded_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-uploaded-file.php )\n *\n * Returns TRUE if the file named by filename was uploaded via HTTP POST.\n * This is useful to help ensure that a malicious user hasn't tried to\n * trick the script into working on files upon which it should not be\n * working--for instance, /etc/passwd.\n *\n * This sort of check is especially important if there is any chance that\n * anything done with uploaded files could reveal their contents to the\n * user, or even to other users on the same system.\n *\n * For proper working, the function is_uploaded_file() needs an argument\n * like $_FILES['userfile']['tmp_name'], - the name of the uploaded file on\n * the clients machine $_FILES['userfile']['name'] does not work.\n *\n * @filename   string  The filename being checked.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "file_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.file-exists.php )\n *\n * Checks whether a file or directory exists.\n *\n * @filename   string  Path to the file or directory.\n *\n *                     On windows, use //computername/share/filename or\n *                     \\\\computername\\share\\filename to check files on\n *                     network shares.\n *\n * @return     bool    Returns TRUE if the file or directory specified by\n *                     filename exists; FALSE otherwise.\n *\n *                     This function will return FALSE for symlinks\n *                     pointing to non-existing files. Warning\n *\n *                     This function returns FALSE for files inaccessible\n *                     due to safe mode restrictions. However these files\n *                     still can be included if they are located in\n *                     safe_mode_include_dir.\n *\n *                     The check is done using the real UID/GID instead of\n *                     the effective one.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stat.php )\n *\n * Gathers the statistics of the file named by filename. If filename is a\n * symbolic link, statistics are from the file itself, not the symlink.\n *\n * lstat() is identical to stat() except it would instead be based off the\n * symlinks status.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   stat() and fstat() result format Numeric Associative\n *                     (since PHP 4.0.6) Description 0 dev device number 1\n *                     ino inode number * 2 mode inode protection mode 3\n *                     nlink number of links 4 uid userid of owner * 5 gid\n *                     groupid of owner * 6 rdev device type, if inode\n *                     device 7 size size in bytes 8 atime time of last\n *                     access (Unix timestamp) 9 mtime time of last\n *                     modification (Unix timestamp) 10 ctime time of last\n *                     inode change (Unix timestamp) 11 blksize blocksize\n *                     of filesystem IO ** 12 blocks number of 512-byte\n *                     blocks allocated ** * On Windows this will always be\n *                     0.\n *\n *                     ** Only valid on systems supporting the st_blksize\n *                     type - other systems (e.g. Windows) return -1.\n *\n *                     In case of error, stat() returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lstat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lstat.php )\n *\n * Gathers the statistics of the file or symbolic link named by filename.\n *\n * @filename   string  Path to a file or a symbolic link.\n *\n * @return     mixed   See the manual page for stat() for information on\n *                     the structure of the array that lstat() returns.\n *                     This function is identical to the stat() function\n *                     except that if the filename parameter is a symbolic\n *                     link, the status of the symbolic link is returned,\n *                     not the status of the file pointed to by the\n *                     symbolic link.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clearstatcache", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.clearstatcache.php )\n *\n * When you use stat(), lstat(), or any of the other functions listed in\n * the affected functions list (below), PHP caches the information those\n * functions return in order to provide faster performance. However, in\n * certain cases, you may want to clear the cached information. For\n * instance, if the same file is being checked multiple times within a\n * single script, and that file is in danger of being removed or changed\n * during that script's operation, you may elect to clear the status cache.\n * In these cases, you can use the clearstatcache() function to clear the\n * information that PHP caches about a file.\n *\n * You should also note that PHP doesn't cache information about\n * non-existent files. So, if you call file_exists() on a file that doesn't\n * exist, it will return FALSE until you create the file. If you create the\n * file, it will return TRUE even if you then delete the file. However\n * unlink() clears the cache automatically.\n *\n * This function caches information about specific filenames, so you only\n * need to call clearstatcache() if you are performing multiple operations\n * on the same filename and require the information about that particular\n * file to not be cached.\n *\n * Affected functions include stat(), lstat(), file_exists(),\n * is_writable(), is_readable(), is_executable(), is_file(), is_dir(),\n * is_link(), filectime(), fileatime(), filemtime(), fileinode(),\n * filegroup(), fileowner(), filesize(), filetype(), and fileperms().\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readlink", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.readlink.php )\n *\n * readlink() does the same as the readlink C function.\n *\n * @path       string  The symbolic link path.\n *\n * @return     mixed   Returns the contents of the symbolic link path or\n *                     FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "realpath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.realpath.php )\n *\n * realpath() expands all symbolic links and resolves references to '/./',\n * '/../' and extra '/' characters in the input path and return the\n * canonicalized absolute pathname.\n *\n * @path       string  The path being checked.\n *\n * @return     mixed   Returns the canonicalized absolute pathname on\n *                     success. The resulting path will have no symbolic\n *                     link, '/./' or '/../' components.\n *\n *                     realpath() returns FALSE on failure, e.g. if the\n *                     file does not exist.\n *\n *                     The running script must have executable permissions\n *                     on all directories in the hierarchy, otherwise\n *                     realpath() will return FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pathinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pathinfo.php )\n *\n * pathinfo() returns an associative array containing information about\n * path.\n *\n * @path       string  The path being checked.\n * @opt        int     You can specify which elements are returned with\n *                     optional parameter options. It composes from\n *                     PATHINFO_DIRNAME, PATHINFO_BASENAME,\n *                     PATHINFO_EXTENSION and PATHINFO_FILENAME. It\n *                     defaults to return all elements.\n *\n * @return     mixed   The following associative array elements are\n *                     returned: dirname, basename, extension (if any), and\n *                     filename.\n *\n *                     If options is used, this function will return a\n *                     string if not all elements are requested.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opt", "", (const char *)0xa /* KindOfInt64 */, "i:15;", (const char *)5, "15", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "disk_free_space", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.disk-free-space.php )\n *\n * Given a string containing a directory, this function will return the\n * number of bytes available on the corresponding filesystem or disk\n * partition.\n *\n * @directory  string  A directory of the filesystem or disk partition.\n *\n *                     Given a file name instead of a directory, the\n *                     behaviour of the function is unspecified and may\n *                     differ between operating systems and PHP versions.\n *\n * @return     mixed   Returns the number of available bytes as a float or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "diskfreespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.diskfreespace.php )\n *\n *\n * @directory  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "disk_total_space", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.disk-total-space.php )\n *\n * Given a string containing a directory, this function will return the\n * total number of bytes on the corresponding filesystem or disk partition.\n *\n * @directory  string  A directory of the filesystem or disk partition.\n *\n * @return     mixed   Returns the total number of bytes as a float or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mkdir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mkdir.php )\n *\n * Attempts to create the directory specified by pathname.\n *\n * @pathname   string  The directory path.\n * @mode       int     The mode is 0777 by default, which means the widest\n *                     possible access. For more information on modes, read\n *                     the details on the chmod() page.\n *\n *                     mode is ignored on Windows.\n *\n *                     Note that you probably want to specify the mode as\n *                     an octal number, which means it should have a\n *                     leading zero. The mode is also modified by the\n *                     current umask, which you can change using umask().\n * @recursive  bool    Allows the creation of nested directories specified\n *                     in the pathname. Defaults to FALSE.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pathname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "i:511;", (const char *)6, "0777", (const char *)4, NULL,
  (const char *)0x2000, "recursive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rmdir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rmdir.php )\n *\n * Attempts to remove the directory named by dirname. The directory must\n * be empty, and the relevant permissions must permit this. A E_WARNING\n * level error will be generated on failure.\n *\n * @dirname    string  Path to the directory.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "dirname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dirname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dirname.php )\n *\n * Given a string containing a path to a file, this function will return\n * the name of the directory.\n *\n * @path       string  A path.\n *\n *                     On Windows, both slash (/) and backslash (\\) are\n *                     used as directory separator character. In other\n *                     environments, it is the forward slash (/).\n *\n * @return     string  Returns the name of the directory. If there are no\n *                     slashes in path, a dot ('.') is returned, indicating\n *                     the current directory. Otherwise, the returned\n *                     string is path with any trailing /component removed.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getcwd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getcwd.php )\n *\n * Gets the current working directory.\n *\n * @return     mixed   Returns the current working directory on success, or\n *                     FALSE on failure.\n *\n *                     On some Unix variants, getcwd() will return FALSE\n *                     if any one of the parent directories does not have\n *                     the readable or search mode set, even if the current\n *                     directory does. See chmod() for more information on\n *                     modes and permissions.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chdir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chdir.php )\n *\n * Changes PHP's current directory to directory.\n *\n * @directory  string  The new current directory\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chroot", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chroot.php )\n *\n * Changes the root directory of the current process to directory.\n *\n * This function is only available if your system supports it and you're\n * using the CLI, CGI or Embed SAPI. Also, this function requires root\n * privileges.\n *\n * @directory  string  The new directory\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dir.php )\n *\n *\n * @directory  string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "opendir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.opendir.php )\n *\n * Opens up a directory handle to be used in subsequent closedir(),\n * readdir(), and rewinddir() calls.\n *\n * @path       string  The directory path that is to be opened\n * @context    mixed   For a description of the context parameter, refer to\n *                     the streams section of the manual.\n *\n * @return     mixed   Returns a directory handle resource on success, or\n *                     FALSE on failure.\n *\n *                     If path is not a valid directory or the directory\n *                     can not be opened due to permission restrictions or\n *                     filesystem errors, opendir() returns FALSE and\n *                     generates a PHP error of level E_WARNING. You can\n *                     suppress the error output of opendir() by prepending\n *                     '@' to the front of the function name.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readdir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.readdir.php )\n *\n * Returns the filename of the next file from the directory. The filenames\n * are returned in the order in which they are stored by the filesystem.\n *\n * @dir_handle resource\n *                     The directory handle resource previously opened with\n *                     opendir(). If the directory handle is not specified,\n *                     the last link opened by opendir() is assumed.\n *\n * @return     mixed   Returns the filename on success or FALSE on failure.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "dir_handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewinddir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rewinddir.php )\n *\n * Resets the directory stream indicated by dir_handle to the beginning of\n * the directory.\n *\n * @dir_handle resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "dir_handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "scandir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.scandir.php )\n *\n * Returns an array of files and directories from the directory.\n *\n * @directory  string  The directory that will be scanned.\n * @descending bool    By default, the sorted order is alphabetical in\n *                     ascending order. If the optional sorting_order is\n *                     set to non-zero, then the sort order is alphabetical\n *                     in descending order.\n * @context    mixed   For a description of the context parameter, refer to\n *                     the streams section of the manual.\n *\n * @return     mixed   Returns an array of filenames on success, or FALSE\n *                     on failure. If directory is not a directory, then\n *                     boolean FALSE is returned, and an error of level\n *                     E_WARNING is generated.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "directory", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "descending", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "context", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "closedir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.closedir.php )\n *\n * Closes the directory stream indicated by dir_handle. The stream must\n * have previously been opened by opendir().\n *\n * @dir_handle resource\n *                     The directory handle resource previously opened with\n *                     opendir(). If the directory handle is not specified,\n *                     the last link opened by opendir() is assumed.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "dir_handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "dangling_server_proxy_old_request", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * When I'm running a newer version of the server software and I'm getting\n * an HTTP request that's from old version of a web page, proxy it to a\n * local instance that is still running or dangling just for handling old\n * version of requests. Please read server documentation for more details.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "dangling_server_proxy_new_request", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * When I'm still running an old version of the server software and I'm\n * getting an HTTP request that's newer, proxy it to a specified host that\n * already has the new version of the software running. Please read server\n * documentation for more details.\n *\n * @host       string  The machine to proxy to.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "pagelet_server_is_enabled", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Whether pagelet server is enabled or not. Please read server\n * documentation for what a pagelet server is.\n *\n * @return     bool    TRUE if it's enabled, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "pagelet_server_task_start", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Processes a pagelet server request.\n *\n * @url        string  The URL we're running this pagelet with.\n * @headers    map     HTTP headers to send to the pagelet.\n * @post_data  string  POST data to send.\n * @files      vector  Array for the pagelet.\n *\n * @return     resource\n *                     An object that can be used with\n *                     pagelet_server_task_status() or\n *                     pagelet_server_task_result().\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "post_data", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "files", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "pagelet_server_task_status", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Checks finish status of a pagelet task.\n *\n * @task       resource\n *                     The pagelet task handle returned from\n *                     pagelet_server_task_start().\n *\n * @return     int     PAGELET_NOT_READY if there is no data available,\n *                     PAGELET_READY if (partial) data is available from\n *                     pagelet_server_flush(), and PAGELET_DONE if the\n *                     pagelet request is done.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "task", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "pagelet_server_task_result", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Block and wait until pagelet task finishes or times out.\n *\n * @task       resource\n *                     The pagelet task handle returned from\n *                     pagelet_server_task_start().\n * @headers    mixed   HTTP response headers.\n * @code       mixed   HTTP response code. Set to -1 in the event of a\n *                     timeout.\n * @timeout_ms int     How many milliseconds to wait. A timeout of zero is\n *                     interpreted as an infinite timeout.\n *\n * @return     string  HTTP response from the pagelet.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "task", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "headers", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "code", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "pagelet_server_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Flush all the currently buffered output, so that the main thread can\n * read it with pagelet_server_task_result(). This is only meaningful in a\n * pagelet thread.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_send_message", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sends an xbox message and waits for response. Please read server\n * documentation for what an xbox is.\n *\n * @msg        string  The message.\n * @ret        mixed   The response.\n * @timeout_ms int     How many milli-seconds to wait.\n * @host       string  Which machine to send to.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "msg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "ret", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "s:9:\"localhost\";", (const char *)16, "\"localhost\"", (const char *)11, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_post_message", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Posts an xbox message without waiting. Please read server documentation\n * for more details.\n *\n * @msg        string  The response.\n * @host       string  Which machine to post to.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "msg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "s:9:\"localhost\";", (const char *)16, "\"localhost\"", (const char *)11, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_task_start", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Starts a local xbox task.\n *\n * @message    string  A message to send to xbox's message processing\n *                     function.\n *\n * @return     resource\n *                     A task handle xbox_task_status() and\n *                     xbox_task_result() can use.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_task_status", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Checks an xbox task's status.\n *\n * @task       resource\n *                     The xbox task object created by xbox_task_start().\n *\n * @return     bool    TRUE if finished, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "task", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_task_result", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Block and wait for xbox task's result.\n *\n * @task       resource\n *                     The xbox task object created by xbox_task_start().\n * @timeout_ms int     How many milli-seconds to wait.\n * @ret        mixed   xbox message processing function's return value.\n *\n * @return     int     Response code following HTTP's responses. For\n *                     example, 200 for success and 500 for server error.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "task", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "ret", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_process_call_message", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * This function is invoked by the xbox facility to start an xbox call\n * task. This function is not intended to be called directly by user code.\n *\n * @msg        string  The call message.\n *\n * @return     mixed   The return value of the xbox call task.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "msg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_get_thread_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets the timeout (maximum duration), in seconds, of the current xbox\n * thread. Throws for non-xbox threads.\n *\n * @return     int     The current timeout (maximum duration).\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_set_thread_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sets the timeout (maximum duration), in seconds, of the current xbox\n * thread. The xbox thread would reset when this amount of time has passed\n * since the previous reset. Throws for non-xbox threads.\n *\n * @timeout    int     The new timeout (maximum duration).\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_schedule_thread_reset", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Schedules a reset of the current xbox thread, when the next request\n * comes in. Throws for non-xbox threads.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xbox_get_thread_time", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns the time that the current xbox thread has been running without\n * a reset, in seconds, and throws for non-xbox threads.\n *\n * @return     int     The time that the current xbox thread has been\n *                     running without a reset.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "assert_options", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.assert-options.php )\n *\n * Set the various assert() control options or just query their current\n * settings.\n *\n * @what       int     Assert Options Option INI Setting Default value\n *                     Description ASSERT_ACTIVE assert.active 1 enable\n *                     assert() evaluation ASSERT_WARNING assert.warning 1\n *                     issue a PHP warning for each failed assertion\n *                     ASSERT_BAIL assert.bail 0 terminate execution on\n *                     failed assertions ASSERT_QUIET_EVAL\n *                     assert.quiet_eval 0 disable error_reporting during\n *                     assertion expression evaluation ASSERT_CALLBACK\n *                     assert.callback (NULL) Callback to call on failed\n *                     assertions\n * @value      mixed   An optional new value for the option.\n *\n * @return     mixed   Returns the original setting of any option or FALSE\n *                     on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "what", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "assert", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.assert.php )\n *\n * assert() will check the given assertion and take appropriate action if\n * its result is FALSE.\n *\n * If the assertion is given as a string it will be evaluated as PHP code\n * by assert(). The advantages of a string assertion are less overhead when\n * assertion checking is off and messages containing the assertion\n * expression when an assertion fails. This means that if you pass a\n * boolean condition as assertion this condition will not show up as\n * parameter to the assertion function which you may have defined with the\n * assert_options() function, the condition is converted to a string before\n * calling that handler function, and the boolean FALSE is converted as the\n * empty string.\n *\n * Assertions should be used as a debugging feature only. You may use them\n * for sanity-checks that test for conditions that should always be TRUE\n * and that indicate some programming errors if not or to check for the\n * presence of certain features like extension functions or certain system\n * limits and features.\n *\n * Assertions should not be used for normal runtime operations like input\n * parameter checks. As a rule of thumb your code should always be able to\n * work correctly if assertion checking is not activated.\n *\n * The behavior of assert() may be configured by assert_options() or by\n * .ini-settings described in that functions manual page.\n *\n * The assert_options() function and/or ASSERT_CALLBACK configuration\n * directive allow a callback function to be set to handle failed\n * assertions.\n *\n * assert() callbacks are particularly useful for building automated test\n * suites because they allow you to easily capture the code passed to the\n * assertion, along with information on where the assertion was made. While\n * this information can be captured via other methods, using assertions\n * makes it much faster and easier!\n *\n * The callback function should accept three arguments. The first argument\n * will contain the file the assertion failed in. The second argument will\n * contain the line the assertion failed on and the third argument will\n * contain the expression that failed (if any - literal values such as 1 or\n * \"two\" will not be passed via this argument)\n *\n * @assertion  mixed   The assertion.\n *\n * @return     mixed   FALSE if the assertion is false, TRUE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "assertion", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dl.php )\n *\n * Loads the PHP extension given by the parameter library.\n *\n * Use extension_loaded() to test whether a given extension is already\n * available or not. This works on both built-in extensions and dynamically\n * loaded ones (either through php.ini or dl()). Warning This function has\n * been removed from some SAPI's in PHP 5.3.\n *\n * @library    string  This parameter is only the filename of the extension\n *                     to load which also depends on your platform. For\n *                     example, the sockets extension (if compiled as a\n *                     shared module, not the default!) would be called\n *                     sockets.so on Unix platforms whereas it is called\n *                     php_sockets.dll on the Windows platform.\n *\n *                     The directory where the extension is loaded from\n *                     depends on your platform:\n *\n *                     Windows - If not explicitly set in the php.ini, the\n *                     extension is loaded from C:\\php4\\extensions\\ (PHP4)\n *                     or C:\\php5\\ (PHP5) by default.\n *\n *                     Unix - If not explicitly set in the php.ini, the\n *                     default extension directory depends on whether PHP\n *                     has been built with --enable-debug or not whether\n *                     PHP has been built with (experimental) ZTS (Zend\n *                     Thread Safety) support or not the current internal\n *                     ZEND_MODULE_API_NO (Zend internal module API number,\n *                     which is basically the date on which a major module\n *                     API change happened, e.g. 20010901) Taking into\n *                     account the above, the directory then defaults to\n *                     <install-dir>/lib/php/extensions/\n *                     <debug-or-not>-<zts-or-not>-ZEND_MODULE_API_NO, e.g.\n *                     /usr/local/php/lib/php/extensions/debug-non-zts-20010901\n *                     or\n *                     /usr/local/php/lib/php/extensions/no-debug-zts-20010901.\n *\n * @return     int     Returns TRUE on success or FALSE on failure. If the\n *                     functionality of loading modules is not available or\n *                     has been disabled (either by setting enable_dl off\n *                     or by enabling safe mode in php.ini) an E_ERROR is\n *                     emitted and execution is stopped. If dl() fails\n *                     because the specified library couldn't be loaded, in\n *                     addition to FALSE an E_WARNING message is emitted.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "library", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "extension_loaded", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.extension-loaded.php )\n *\n * Finds out whether the extension is loaded.\n *\n * @name       string  The extension name.\n *\n *                     You can see the names of various extensions by\n *                     using phpinfo() or if you're using the CGI or CLI\n *                     version of PHP you can use the -m switch to list all\n *                     available extensions: $ php -m [PHP Modules] xml\n *                     tokenizer standard sockets session posix pcre\n *                     overload mysql mbstring ctype [Zend Modules]\n *\n * @return     bool    Returns TRUE if the extension identified by name is\n *                     loaded, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_loaded_extensions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-loaded-extensions.php )\n *\n * This function returns the names of all the modules compiled and loaded\n * in the PHP interpreter.\n *\n * @zend_extensions\n *             bool    Only return Zend extensions, if not then regular\n *                     extensions, like mysqli are listed. Defaults to\n *                     FALSE (return regular extensions).\n *\n * @return     vector  Returns an indexed array of all the modules names.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "zend_extensions", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_extension_funcs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-extension-funcs.php\n * )\n *\n * This function returns the names of all the functions defined in the\n * module indicated by module_name.\n *\n * @module_name\n *             string  The module name.\n *\n *                     This parameter must be in lowercase.\n *\n * @return     map     Returns an array with all the functions, or FALSE if\n *                     module_name is not a valid extension.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "module_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_cfg_var", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-cfg-var.php )\n *\n * Gets the value of a PHP configuration option.\n *\n * This function will not return configuration information set when the\n * PHP was compiled, or read from an Apache configuration file.\n *\n * To check whether the system is using a configuration file, try\n * retrieving the value of the cfg_file_path configuration setting. If this\n * is available, a configuration file is being used.\n *\n * @option     string  The configuration option name.\n *\n * @return     string  Returns the current value of the PHP configuration\n *                     variable specified by option, or FALSE if an error\n *                     occurs.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_current_user", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-current-user.php )\n *\n *\n * @return     string  Returns the username as a string.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_defined_constants", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-defined-constants.php )\n *\n * Returns the names and values of all the constants currently defined.\n * This includes those created by extensions as well as those created with\n * the define() function.\n *\n * @categorize mixed   Causing this function to return a multi-dimensional\n *                     array with categories in the keys of the first\n *                     dimension and constants and their values in the\n *                     second dimension.\n *\n *\n *\n *                     The above example will output something similar to:\n *                     Array ( [Core] => Array ( [E_ERROR] => 1 [E_WARNING]\n *                     => 2 [E_PARSE] => 4 [E_NOTICE] => 8 [E_CORE_ERROR]\n *                     => 16 [E_CORE_WARNING] => 32 [E_COMPILE_ERROR] => 64\n *                     [E_COMPILE_WARNING] => 128 [E_USER_ERROR] => 256\n *                     [E_USER_WARNING] => 512 [E_USER_NOTICE] => 1024\n *                     [E_ALL] => 2047 [TRUE] => 1 ) [pcre] => Array (\n *                     [PREG_PATTERN_ORDER] => 1 [PREG_SET_ORDER] => 2\n *                     [PREG_OFFSET_CAPTURE] => 256 [PREG_SPLIT_NO_EMPTY]\n *                     => 1 [PREG_SPLIT_DELIM_CAPTURE] => 2\n *                     [PREG_SPLIT_OFFSET_CAPTURE] => 4 [PREG_GREP_INVERT]\n *                     => 1 ) [user] => Array ( [MY_CONSTANT] => 1 ) )\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "categorize", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_include_path", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-include-path.php )\n *\n *\n * @return     string  Returns the path, as a string.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "restore_include_path", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.restore-include-path.php )\n *\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set_include_path", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.set-include-path.php )\n *\n * Sets the include_path configuration option for the duration of the\n * script.\n *\n * @new_include_path\n *             string  The new value for the include_path\n *\n * @return     string  Returns the old include_path on success or FALSE on\n *                     failure.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "new_include_path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_included_files", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-included-files.php\n * )\n *\n * Gets the names of all files that have been included using include(),\n * include_once(), require() or require_once().\n *\n * @return     vector  Returns an array of the names of all files.\n *\n *                     The script originally called is considered an\n *                     \"included file,\" so it will be listed together with\n *                     the files referenced by include() and family.\n *\n *                     Files that are included or required multiple times\n *                     only show up once in the returned array.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "inclued_get_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.inclued-get-data.php )\n *\n * Get the inclued data.\n *\n * @return     vector  The inclued data.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_magic_quotes_gpc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-magic-quotes-gpc.php )\n *\n * Returns the current configuration setting of magic_quotes_gpc\n *\n * Keep in mind that attempting to set magic_quotes_gpc at runtime will\n * not work.\n *\n * For more information about magic_quotes, see this security section.\n *\n * @return     int     Returns 0 if magic_quotes_gpc is off, 1 otherwise.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_magic_quotes_runtime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-magic-quotes-runtime.php )\n *\n *\n * @return     int     Returns 0 if magic_quotes_runtime is off, 1\n *                     otherwise.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_required_files", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-required-files.php\n * )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getenv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getenv.php )\n *\n *\n * @varname    string  The variable name.\n *\n * @return     mixed   Returns the value of the environment variable\n *                     varname, or FALSE on an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getlastmod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getlastmod.php )\n *\n * Gets the time of the last modification of the current page.\n *\n * If you're interested in getting the last modification time of a\n * different file, consider using filemtime().\n *\n * @return     int     Returns the time of the last modification of the\n *                     current page. The value returned is a Unix\n *                     timestamp, suitable for feeding to date(). Returns\n *                     FALSE on error.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getmygid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getmygid.php )\n *\n *\n * @return     int     Returns the group ID of the current script, or FALSE\n *                     on error.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getmyinode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getmyinode.php )\n *\n * Gets the inode of the current script.\n *\n * @return     int     Returns the current script's inode as an integer, or\n *                     FALSE on error.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getmypid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getmypid.php )\n *\n * Gets the current PHP process ID.\n *\n * @return     int     Returns the current PHP process ID, or FALSE on\n *                     error.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getmyuid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getmyuid.php )\n *\n *\n * @return     int     Returns the user ID of the current script, or FALSE\n *                     on error.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getopt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getopt.php )\n *\n * Parses options passed to the script.\n * The options parameter may contain the following elements: Individual\n * characters (do not accept values) Characters followed by a colon\n * (parameter requires value) Characters followed by two colons (optional\n * value) Option values are the first argument after the string. It does\n * not matter if a value has leading white space or not. Optional values do\n * not accept \" \" (space) as a separator.\n *\n * The format for the options and longopts is almost the same, the only\n * difference is that longopts takes an array of options (where each\n * element is the option) where as options takes a string (where each\n * character is the option).\n *\n * @options    string  Each character in this string will be used as option\n *                     characters and matched against options passed to the\n *                     script starting with a single hyphen (-). For\n *                     example, an option string \"x\" recognizes an option\n *                     -x. Only a-z, A-Z and 0-9 are allowed.\n * @longopts   mixed   An array of options. Each element in this array will\n *                     be used as option strings and matched against\n *                     options passed to the script starting with two\n *                     hyphens (--). For example, an longopts element \"opt\"\n *                     recognizes an option --opt. Prior to PHP5.3.0 this\n *                     parameter was only available on few systems\n *\n * @return     map     This function will return an array of option /\n *                     argument pairs or FALSE on failure.\n *\n *                     The parsing of options will end at the first\n *                     non-option found, anything that follows is\n *                     discarded.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "options", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "longopts", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getrusage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getrusage.php )\n *\n * This is an interface to getrusage(2). It gets data returned from the\n * system call.\n *\n * @who        int     If who is 1, getrusage will be called with\n *                     RUSAGE_CHILDREN.\n *\n * @return     map     Returns an associative array containing the data\n *                     returned from the system call. All entries are\n *                     accessible by using their documented field names.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "who", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "clock_getres", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets resolution of system clock. \"man 3 clock_getres\" for more details.\n *\n * @clk_id     int     Which clock to check.\n * @sec        mixed   Return value in seconds.\n * @nsec       mixed   Return value in nano-seconds.\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "clk_id", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "sec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "nsec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "clock_gettime", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets time of a system clock. \"man 3 clock_gettime\" for more details.\n *\n * @clk_id     int     Which clock.\n * @sec        mixed   Return value in seconds.\n * @nsec       mixed   Return value in nano-seconds.\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "clk_id", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "sec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "nsec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "clock_settime", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sets time of a system clock. \"man 3 clock_settime\" for more details.\n *\n * @clk_id     int     Which clock.\n * @sec        int     Value to set in seconds.\n * @nsec       int     Value to set in nano-seconds.\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "clk_id", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sec", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "nsec", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "cpu_get_count", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets number of processors.\n *\n * @return     int     Number of CPUs.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "cpu_get_model", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets processor model.\n *\n * @return     string  Model name of CPU.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ini_alter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ini-alter.php )\n *\n *\n * @varname    string\n * @newvalue   string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newvalue", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ini_get_all", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ini-get-all.php )\n *\n * Returns all the registered configuration options.\n *\n * @extension  string  An optional extension name. If set, the function\n *                     return only options specific for that extension.\n *\n * @return     map     Returns an associative array with directive name as\n *                     the array key.\n *\n *                     When details is TRUE (default) the array will\n *                     contain global_value (set in php.ini), local_value\n *                     (perhaps set with ini_set() or .htaccess), and\n *                     access (the access level).\n *\n *                     When details is FALSE the value will be the current\n *                     value of the option.\n *\n *                     See the manual section for information on what\n *                     access levels mean.\n *\n *                     It's possible for a directive to have multiple\n *                     access levels, which is why access shows the\n *                     appropriate bitmask values.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "extension", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ini_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ini-get.php )\n *\n * Returns the value of the configuration option on success.\n *\n * @varname    string  The configuration option name.\n *\n * @return     string  Returns the value of the configuration option as a\n *                     string on success, or an empty string on failure or\n *                     for null values.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ini_restore", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ini-restore.php )\n *\n * Restores a given configuration option to its original value.\n *\n * @varname    string  The configuration option name.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ini_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ini-set.php )\n *\n * Sets the value of the given configuration option. The configuration\n * option will keep this new value during the script's execution, and will\n * be restored at the script's ending.\n *\n * @varname    string  Not all the available options can be changed using\n *                     ini_set(). There is a list of all available options\n *                     in the appendix.\n * @newvalue   string  The new value for the option.\n *\n * @return     string  Returns the old value on success, FALSE on failure.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "varname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newvalue", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x12006040, "memory_get_allocation", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memory-get-allocation.php )\n *\n * Returns the total memory, in bytes, that your PHP script has allocated.\n *\n * @return     int     Returns the total memory allocated in bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memory_get_peak_usage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memory-get-peak-usage.php )\n *\n * Returns the peak of memory, in bytes, that's been allocated to your PHP\n * script.\n *\n * @real_usage bool    Set this to TRUE to get the real size of memory\n *                     allocated from system. If not set or FALSE only the\n *                     memory used by emalloc() is reported.\n *\n * @return     int     Returns the memory peak in bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "real_usage", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "memory_get_usage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.memory-get-usage.php )\n *\n * Returns the amount of memory, in bytes, that's currently being\n * allocated to your PHP script.\n *\n * @real_usage bool    Set this to TRUE to get the real size of memory\n *                     allocated from system. If not set or FALSE only the\n *                     memory used by emalloc() is reported.\n *\n * @return     int     Returns the memory amount in bytes.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "real_usage", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "php_ini_scanned_files", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.php-ini-scanned-files.php )\n *\n * php_ini_scanned_files() returns a comma-separated list of configuration\n * files parsed after php.ini. These files are found in a directory defined\n * by the --with-config-file-scan-dir option which is set during\n * compilation.\n *\n * The returned configuration files also include the path as declared in\n * the --with-config-file-scan-dir option.\n *\n * @return     string  Returns a comma-separated string of .ini files on\n *                     success. Each comma is followed by a newline. If the\n *                     directive --with-config-file-scan-dir wasn't set,\n *                     FALSE is returned. If it was set and the directory\n *                     was empty, an empty string is returned. If a file is\n *                     unrecognizable, the file will still make it into the\n *                     returned string but a PHP error will also result.\n *                     This PHP error will be seen both at compile time and\n *                     while using php_ini_scanned_files().\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "php_logo_guid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.php-logo-guid.php )\n *\n * This function returns the ID which can be used to display the PHP logo\n * using the built-in image. Logo is displayed only if expose_php is On.\n *\n * @return     string  Returns PHPE9568F34-D428-11d2-A769-00AA001ACF42.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "php_sapi_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.php-sapi-name.php )\n *\n *\n * @return     string  Returns the interface type, as a lowercase string.\n *\n *                     Although not exhaustive, the possible return values\n *                     include aolserver, apache, apache2filter,\n *                     apache2handler, caudium, cgi (until PHP 5.3),\n *                     cgi-fcgi, cli, continuity, embed, isapi, litespeed,\n *                     milter, nsapi, phttpd, pi3web, roxen, thttpd, tux,\n *                     and webjames.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "php_uname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.php-uname.php )\n *\n * php_uname() returns a description of the operating system PHP is\n * running on. This is the same string you see at the very top of the\n * phpinfo() output. For the name of just the operating system, consider\n * using the PHP_OS constant, but keep in mind this constant will contain\n * the operating system PHP was built on.\n *\n * On some older UNIX platforms, it may not be able to determine the\n * current OS information in which case it will revert to displaying the OS\n * PHP was built on. This will only happen if your uname() library call\n * either doesn't exist or doesn't work.\n *\n * @mode       string  mode is a single character that defines what\n *                     information is returned: 'a': This is the default.\n *                     Contains all modes in the sequence \"s n r v m\". 's':\n *                     Operating system name. eg. FreeBSD. 'n': Host name.\n *                     eg. localhost.example.com. 'r': Release name. eg.\n *                     5.1.2-RELEASE. 'v': Version information. Varies a\n *                     lot between operating systems. 'm': Machine type.\n *                     eg. i386.\n *\n * @return     string  Returns the description, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "phpcredits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.phpcredits.php )\n *\n * This function prints out the credits listing the PHP developers,\n * modules, etc. It generates the appropriate HTML codes to insert the\n * information in a page.\n *\n * @flag       int     To generate a custom credits page, you may want to\n *                     use the flag parameter.\n *\n *                     Pre-defined phpcredits() flags name description\n *                     CREDITS_ALL All the credits, equivalent to using:\n *                     CREDITS_DOCS + CREDITS_GENERAL + CREDITS_GROUP +\n *                     CREDITS_MODULES + CREDITS_FULLPAGE. It generates a\n *                     complete stand-alone HTML page with the appropriate\n *                     tags. CREDITS_DOCS The credits for the documentation\n *                     team CREDITS_FULLPAGE Usually used in combination\n *                     with the other flags. Indicates that a complete\n *                     stand-alone HTML page needs to be printed including\n *                     the information indicated by the other flags.\n *                     CREDITS_GENERAL General credits: Language design and\n *                     concept, PHP authors and SAPI module. CREDITS_GROUP\n *                     A list of the core developers CREDITS_MODULES A list\n *                     of the extension modules for PHP, and their authors\n *                     CREDITS_SAPI A list of the server API modules for\n *                     PHP, and their authors\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "phpinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.phpinfo.php )\n *\n * Outputs a large amount of information about the current state of PHP.\n * This includes information about PHP compilation options and extensions,\n * the PHP version, server information and environment (if compiled as a\n * module), the PHP environment, OS version information, paths, master and\n * local values of configuration options, HTTP headers, and the PHP\n * License.\n *\n * Because every system is setup differently, phpinfo() is commonly used\n * to check configuration settings and for available predefined variables\n * on a given system.\n *\n * phpinfo() is also a valuable debugging tool as it contains all EGPCS\n * (Environment, GET, POST, Cookie, Server) data.\n *\n * @what       int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "what", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "phpversion", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.phpversion.php )\n *\n * Returns a string containing the version of the currently running PHP\n * parser or extension.\n *\n * @extension  string  An optional extension name.\n *\n * @return     string  If the optional extension parameter is specified,\n *                     phpversion() returns the version of that extension,\n *                     or FALSE if there is no version information\n *                     associated or the extension isn't enabled.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "extension", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "putenv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.putenv.php )\n *\n * Adds setting to the server environment. The environment variable will\n * only exist for the duration of the current request. At the end of the\n * request the environment is restored to its original state.\n *\n * Setting certain environment variables may be a potential security\n * breach. The safe_mode_allowed_env_vars directive contains a\n * comma-delimited list of prefixes. In Safe Mode, the user may only alter\n * environment variables whose names begin with the prefixes supplied by\n * this directive. By default, users will only be able to set environment\n * variables that begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this\n * directive is empty, PHP will let the user modify ANY environment\n * variable!\n *\n * The safe_mode_protected_env_vars directive contains a comma-delimited\n * list of environment variables, that the end user won't be able to change\n * using putenv(). These variables will be protected even if\n * safe_mode_allowed_env_vars is set to allow to change them.\n *\n * @setting    string  The setting, like \"FOO=BAR\"\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "setting", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set_magic_quotes_runtime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.set-magic-quotes-runtime.php )\n *\n * Set the current active configuration setting of magic_quotes_runtime.\n * WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on\n * this feature is highly discouraged.\n *\n * @new_setting\n *             bool    FALSE for off, TRUE for on.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "new_setting", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set_time_limit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.set-time-limit.php )\n *\n * Set the number of seconds a script is allowed to run. If this is\n * reached, the script returns a fatal error. The default limit is 30\n * seconds or, if it exists, the max_execution_time value defined in the\n * php.ini.\n *\n * When called, set_time_limit() restarts the timeout counter from zero.\n * In other words, if the timeout is the default 30 seconds, and 25 seconds\n * into script execution a call such as set_time_limit(20) is made, the\n * script will run for a total of 45 seconds before timing out.\n *\n * @seconds    int     The maximum execution time, in seconds. If set to\n *                     zero, no time limit is imposed.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sys_get_temp_dir", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sys-get-temp-dir.php )\n *\n * Returns the path of the directory PHP stores temporary files in by\n * default.\n *\n * @return     string  Returns the path of the temporary directory.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "version_compare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.version-compare.php )\n *\n * version_compare() compares two \"PHP-standardized\" version number\n * strings. This is useful if you would like to write programs working only\n * on some versions of PHP.\n *\n * The function first replaces _, - and + with a dot . in the version\n * strings and also inserts dots . before and after any non number so that\n * for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it splits the results\n * like if you were using explode('.', $ver). Then it compares the parts\n * starting from left to right. If a part contains special version strings\n * these are handled in the following order: any string not found in this\n * list < dev < alpha = a < beta = b < RC = rc < # < pl = p. This way not\n * only versions with different levels like '4.1' and '4.1.2' can be\n * compared but also any PHP specific version containing development state.\n *\n * @version1   string  First version number.\n * @version2   string  Second version number.\n * @sop        string  If you specify the third optional operator argument,\n *                     you can test for a particular relationship. The\n *                     possible operators are: <, lt, <=, le, >, gt, >=,\n *                     ge, ==, =, eq, !=, <>, ne respectively.\n *\n *                     This parameter is case-sensitive, so values should\n *                     be lowercase.\n *\n * @return     mixed   By default, version_compare() returns -1 if the\n *                     first version is lower than the second, 0 if they\n *                     are equal, and 1 if the second is lower.\n *\n *                     When using the optional operator argument, the\n *                     function will return TRUE if the relationship is the\n *                     one specified by the operator, FALSE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "version1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "version2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sop", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gc_enabled", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gc-enabled.php )\n *\n * Returns status of the circular reference collector.\n *\n * @return     bool    Returns TRUE if the garbage collector is enabled,\n *                     FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gc_enable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gc-enable.php )\n *\n * Activates the circular reference collector.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gc_disable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gc-disable.php )\n *\n * Deactivates the circular reference collector.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gc_collect_cycles", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gc-collect-cycles.php )\n *\n * Forces collection of any existing garbage cycles.\n *\n * @return     int     Returns number of collected cycles.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zend_logo_guid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.zend-logo-guid.php )\n *\n * This function returns the ID which can be used to display the Zend logo\n * using the built-in image.\n *\n * @return     string  Returns PHPE9568F35-D428-11d2-A769-00AA001ACF42.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zend_thread_id", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.zend-thread-id.php )\n *\n * This function returns a unique identifier for the current thread.\n *\n * @return     int     Returns the thread id as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zend_version", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.zend-version.php )\n *\n * Returns a string containing the version of the currently running Zend\n * Engine.\n *\n * @return     string  Returns the Zend Engine version number, as a string.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_defined_functions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-defined-functions.php )\n *\n * Gets an array of all defined functions.\n *\n * @return     map     Returns an multidimensional array containing a list\n *                     of all defined functions, both built-in (internal)\n *                     and user-defined. The internal functions will be\n *                     accessible via $arr[\"internal\"], and the user\n *                     defined ones using $arr[\"user\"] (see example below).\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "function_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.function-exists.php )\n *\n * Checks the list of defined functions, both built-in (internal) and\n * user-defined, for function_name.\n *\n * @function_name\n *             string  The function name, as a string.\n * @autoload   bool    Whether to try to autoload.\n *\n * @return     bool    Returns TRUE if function_name exists and is a\n *                     function, FALSE otherwise.\n *\n *                     This function will return FALSE for constructs,\n *                     such as include_once() and echo().\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "function_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x14806040, "is_callable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-callable.php )\n *\n * Verify that the contents of a variable can be called as a function.\n * This can check that a simple variable contains the name of a valid\n * function, or that an array contains a properly encoded object and\n * function name.\n *\n * @v          mixed   Can be either the name of a function stored in a\n *                     string variable, or an object and the name of a\n *                     method within the object, like this:\n *                     array($SomeObject, 'MethodName')\n * @syntax     bool    If set to TRUE the function only verifies that name\n *                     might be a function or method. It will only reject\n *                     simple variables that are not strings, or an array\n *                     that does not have a valid structure to be used as a\n *                     callback. The valid ones are supposed to have only 2\n *                     entries, the first of which is an object or a\n *                     string, and the second a string.\n * @name       mixed   Receives the \"callable name\". In the example below\n *                     it is \"someClass::someMethod\". Note, however, that\n *                     despite the implication that someClass::SomeMethod()\n *                     is a callable static method, this is not the case.\n *\n * @return     bool    Returns TRUE if name is callable, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "syntax", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2800, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x16806040, "call_user_func_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.call-user-func-array.php )\n *\n * Call a user defined function with the parameters in params.\n *\n * @function   mixed   The function to be called.\n * @params     vector  The parameters to be passed to the function, as an\n *                     indexed array.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x16826040, "call_user_func", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.call-user-func.php )\n *\n * Call a user defined function given by the function parameter.\n *\n * @function   mixed   The function to be called. Class methods may also be\n *                     invoked statically using this function by passing\n *                     array($classname, $methodname) to this parameter.\n *                     Additionally class methods of an object instance may\n *                     be called by passing array($objectinstance,\n *                     $methodname) to this parameter.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x14016040, "call_user_func_array_async", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Same as call_user_func_array(), but returns an object immediately\n * without waiting for the function to finish. The object can be used with\n * end_user_func_async() to eventually retrieve function's return, if\n * needed.\n *\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n * @params     vector  Parameters, same as in call_user_func_array().\n *\n * @return     object  An object end_user_func_async() uses for final\n *                     waiting of function's return.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x140F6040, "call_user_func_async", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Same as call_user_func(), but returns an object immediately without\n * waiting for the function to finish. The object can be used with\n * end_user_func_async() to eventually retrieve function's return, if\n * needed.\n *\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n *\n * @return     object  An object end_user_func_async() uses for final\n *                     waiting of function's return.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "check_user_func_async", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Check to see if any specified jobs are done or not.\n *\n * @handles    mixed   An array of objects returned from\n *                     call_user_func_async() or\n *                     call_user_func_array_async(), or a single object for\n *                     a simple TRUE/FALSE return.\n * @timeout    int     In milli-seconds. -1 to return job status\n *                     immediately without blocking; positive numbers for\n *                     blocking until some of the specified jobs are done;\n *                     0 for infinite waiting until some of the specified\n *                     jobs are done.\n *\n * @return     mixed   An array of finished jobs if an array of jobs was\n *                     specified, otherwise TRUE for finished and FALSE for\n *                     not finished.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handles", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "end_user_func_async", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Block until function returns. Used with call_user_func_async() or\n * call_user_func_array_async().\n *\n * @handle     object  The object returned from call_user_func_async() or\n *                     call_user_func_array_async().\n * @default_strategy\n *             int     GLOBAL_STATE_ constants to specify how to treat\n *                     global states. Please read documentation for more\n *                     details.\n * @additional_strategies\n *             mixed   Extra strategy for individual variables. Please read\n *                     documentation for more details.\n *\n * @return     mixed   Function's return value.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "default_strategy", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "GLOBAL_STATE_IGNORE", (const char *)19, NULL,
  (const char *)0x2000, "additional_strategies", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "call_user_func_serialized", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Invoke a function with serialized function and parameters by calling\n * serialize(array(\"func\" => $func, \"params\" => $params)), and returns\n * function return in serialized format of array(\"ret\" => $ret, \"exception\"\n * => $exception). Useful for over-network invocation.\n *\n * @input      string  Serialized callback and parameters.\n *\n * @return     string  Serialized return.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "call_user_func_array_rpc", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Same as call_user_func_array(), but executes on a remote HipHop RPC\n * server\n *\n * @host       string  Remote RPC server's address.\n * @port       int     Remote RPC server's port.\n * @auth       string  Remote RPC server's authentication password.\n * @timeout    int     How many seconds to wait for response.\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n * @params     vector  Parameters, same as in call_user_func_array().\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "auth", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x100F6040, "call_user_func_rpc", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Same as call_user_func(), but executes on a remote HipHop RPC server\n *\n * @host       string  Remote RPC server's address.\n * @port       int     Remote RPC server's port.\n * @auth       string  Remote RPC server's authentication password.\n * @timeout    int     How many seconds to wait for response.\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "auth", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x14006040, "forward_static_call_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.forward-static-call-array.php )\n *\n * Calls a user defined function or method given by the function\n * parameter. This function must be called within a method context, it\n * can't be used outside a class. All arguments of the forwarded method are\n * passed as values, and as an array, similarly to call_user_func_array().\n *\n * @function   mixed   The function or method to be called. This parameter\n *                     may be an array, with the name of the class, and the\n *                     method, or a string, with a function name.\n * @params     vector  One parameter, gathering all the method parameter in\n *                     one array.\n *\n *                     Note that the parameters for\n *                     forward_static_call_array() are not passed by\n *                     reference.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x14026040, "forward_static_call", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.forward-static-call.php\n * )\n *\n * Calls a user defined function or method given by the function\n * parameter, with the following arguments. This function must be called\n * within a method context, it can't be used outside a class.\n *\n * @function   mixed   The function or method to be called. This parameter\n *                     may be an array, with the name of the class, and the\n *                     method, or a string, with a function name.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_called_class", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-called-class.php )\n *\n * Gets the name of the class the static method is called in.\n *\n * @return     mixed   Returns the class name. Returns FALSE if called from\n *                     outside a class.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "create_function", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.create-function.php )\n *\n * Creates an anonymous function from the parameters passed, and returns a\n * unique name for it.\n * Usually these parameters will be passed as single quote delimited\n * strings. The reason for using single quoted strings, is to protect the\n * variable names from parsing, otherwise, if you use double quotes there\n * will be a need to escape the variable names, e.g. \\$avar.\n *\n * @args       string  The function arguments.\n * @code       string  The function code.\n *\n * @return     string  Returns a unique function name as a string, or FALSE\n *                     on error.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "args", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "code", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "func_get_arg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.func-get-arg.php )\n *\n * Gets the specified argument from a user-defined function's argument\n * list.\n *\n * This function may be used in conjunction with func_get_args() and\n * func_num_args() to allow user-defined functions to accept\n * variable-length argument lists.\n *\n * @arg_num    int     The argument offset. Function arguments are counted\n *                     starting from zero.\n *\n * @return     mixed   Returns the specified argument, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "arg_num", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "func_get_args", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.func-get-args.php )\n *\n * Gets an array of the function's argument list.\n *\n * This function may be used in conjunction with func_get_arg() and\n * func_num_args() to allow user-defined functions to accept\n * variable-length argument lists.\n *\n * @return     mixed   Returns an array in which each element is a copy of\n *                     the corresponding member of the current user-defined\n *                     function's argument list.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "func_num_args", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.func-num-args.php )\n *\n * Gets the number of arguments passed to the function.\n *\n * This function may be used in conjunction with func_get_arg() and\n * func_get_args() to allow user-defined functions to accept\n * variable-length argument lists.\n *\n * @return     int     Returns the number of arguments passed into the\n *                     current user-defined function.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "register_postsend_function", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Registers functions to call after HTTP response is completely sent to\n * browser.\n *\n * @function   mixed   The callback to register.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "register_shutdown_function", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.register-shutdown-function.php )\n *\n * Registers the function named by function to be executed when script\n * processing is complete or when exit() is called.\n *\n * Multiple calls to register_shutdown_function() can be made, and each\n * will be called in the same order as they were registered. If you call\n * exit() within one registered shutdown function, processing will stop\n * completely and no other registered shutdown functions will be called.\n *\n * @function   mixed   The shutdown function to register.\n *\n *                     The shutdown functions are called as the part of\n *                     the request so that it's possible to send the output\n *                     from them. There is currently no way to process the\n *                     data with output buffering functions in the shutdown\n *                     function.\n *\n *                     Shutdown functions are called after closing all\n *                     opened output buffers thus, for example, its output\n *                     will not be compressed if zlib.output_compression is\n *                     enabled.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "register_cleanup_function", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Registers functions to call at very end of a web page to clean up and\n * free system resources.\n *\n * @function   mixed   The callback to register.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "register_tick_function", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.register-tick-function.php )\n *\n *\n * @function   mixed   The function name as a string, or an array\n *                     consisting of an object and a method.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "unregister_tick_function", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.unregister-tick-function.php )\n *\n *\n * @function_name\n *             mixed   The function name, as a string.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "function_name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "checkdate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.checkdate.php )\n *\n * Checks the validity of the date formed by the arguments. A date is\n * considered valid if each parameter is properly defined.\n *\n * @month      int     The month is between 1 and 12 inclusive.\n * @day        int     The day is within the allowed number of days for the\n *                     given month. Leap years are taken into\n *                     consideration.\n * @year       int     The year is between 1 and 32767 inclusive.\n *\n * @return     bool    Returns TRUE if the date given is valid; otherwise\n *                     returns FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "month", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-add.php )\n *\n *\n * @datetime   object\n * @interval   object\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "datetime", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "interval", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_create_from_format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-create-from-format.php )\n *\n *\n * @format     string\n * @time       string\n * @timezone   object\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "time", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-create.php )\n *\n *\n * @time       string\n * @timezone   object\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "time", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_date_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-date-set.php )\n *\n *\n * @object     object\n * @year       int\n * @month      int\n * @day        int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "month", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_default_timezone_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-default-timezone-get.php )\n *\n * In order of preference, this function returns the default timezone by:\n *\n * Reading the timezone set using the date_default_timezone_set() function\n * (if any)\n *\n * Reading the TZ environment variable (if non empty) (Prior to PHP 5.3.0)\n *\n * Reading the value of the date.timezone ini option (if set)\n *\n * Querying the host operating system (if supported and allowed by the OS)\n *\n * If none of the above succeed, date_default_timezone_get() will return a\n * default timezone of UTC.\n *\n * @return     string  Returns a string.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_default_timezone_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-default-timezone-set.php )\n *\n * date_default_timezone_set() sets the default timezone used by all\n * date/time functions.\n *\n * Since PHP 5.1.0 (when the date/time functions were rewritten), every\n * call to a date/time function will generate a E_NOTICE if the timezone\n * isn't valid, and/or a E_WARNING message if using the system settings or\n * the TZ environment variable.\n *\n * Instead of using this function to set the default timezone in your\n * script, you can also use the INI setting date.timezone to set the\n * default timezone.\n *\n * @name       string  The timezone identifier, like UTC or Europe/Lisbon.\n *                     The list of valid identifiers is available in the\n *                     List of Supported Timezones.\n *\n * @return     bool    This function returns FALSE if the\n *                     timezone_identifier isn't valid, or TRUE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_diff", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-diff.php )\n *\n *\n * @datetime   object\n * @datetime2  object\n * @absolute   bool\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "datetime", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "datetime2", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "absolute", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-format.php )\n *\n *\n * @object     object\n * @format     string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_get_last_errors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-get-last-errors.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_interval_create_from_date_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-interval-create-from-date-string.php\n * )\n *\n *\n * @time       string\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "time", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_interval_format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.date-interval-format.php )\n *\n *\n * @interval   object\n * @format_spec\n *             string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "interval", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format_spec", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_isodate_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-isodate-set.php )\n *\n *\n * @object     object\n * @year       int\n * @week       int\n * @day        int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "week", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_modify", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-modify.php )\n *\n *\n * @object     object\n * @modify     string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "modify", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_offset_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-offset-get.php )\n *\n *\n * @object     object\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_parse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-parse.php )\n *\n *\n * @date       string  Date in format accepted by strtotime().\n *\n * @return     mixed   Returns array with information about the parsed date\n *                     on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "date", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_sub", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-sub.php )\n *\n *\n * @datetime   object\n * @interval   object\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "datetime", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "interval", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_sun_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-sun-info.php )\n *\n *\n * @ts         int     Timestamp.\n * @latitude   float   Latitude in degrees.\n * @longitude  float   Longitude in degrees.\n *\n * @return     map     Returns array on success or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "ts", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "latitude", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "longitude", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_sunrise", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-sunrise.php )\n *\n * date_sunrise() returns the sunrise time for a given day (specified as a\n * timestamp) and location.\n *\n * @timestamp  int     The timestamp of the day from which the sunrise time\n *                     is taken.\n * @format     int     format constants constant description example\n *                     SUNFUNCS_RET_STRING returns the result as string\n *                     16:46 SUNFUNCS_RET_DOUBLE returns the result as\n *                     float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the\n *                     result as integer (timestamp) 1095034606\n * @latitude   float   Defaults to North, pass in a negative value for\n *                     South. See also: date.default_latitude\n * @longitude  float   Defaults to East, pass in a negative value for West.\n *                     See also: date.default_longitude\n * @zenith     float   Default: date.sunrise_zenith\n * @gmt_offset float   Specified in hours.\n *\n * @return     mixed   Returns the sunrise time in a specified format on\n *                     success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "latitude", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "longitude", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "zenith", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "gmt_offset", "", (const char *)0xb /* KindOfDouble */, "d:99999;", (const char *)8, "99999.0", (const char *)7, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_sunset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-sunset.php )\n *\n * date_sunset() returns the sunset time for a given day (specified as a\n * timestamp) and location.\n *\n * @timestamp  int     The timestamp of the day from which the sunset time\n *                     is taken.\n * @format     int     format constants constant description example\n *                     SUNFUNCS_RET_STRING returns the result as string\n *                     16:46 SUNFUNCS_RET_DOUBLE returns the result as\n *                     float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the\n *                     result as integer (timestamp) 1095034606\n * @latitude   float   Defaults to North, pass in a negative value for\n *                     South. See also: date.default_latitude\n * @longitude  float   Defaults to East, pass in a negative value for West.\n *                     See also: date.default_longitude\n * @zenith     float   Default: date.sunset_zenith\n * @gmt_offset float   Specified in hours.\n *\n * @return     mixed   Returns the sunset time in a specified format on\n *                     success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "latitude", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "longitude", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "zenith", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "gmt_offset", "", (const char *)0xb /* KindOfDouble */, "d:99999;", (const char *)8, "99999.0", (const char *)7, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_time_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-time-set.php )\n *\n *\n * @object     object\n * @hour       int\n * @minute     int\n * @second     int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "hour", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "minute", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "second", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_timestamp_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-timestamp-get.php\n * )\n *\n *\n * @datetime   object\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "datetime", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_timestamp_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-timestamp-set.php\n * )\n *\n *\n * @datetime   object\n * @timestamp  int\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "datetime", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_timezone_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-timezone-get.php )\n *\n *\n * @object     object\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date_timezone_set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date-timezone-set.php )\n *\n *\n * @object     object\n * @timezone   object\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "date", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.date.php )\n *\n * Returns a string formatted according to the given format string using\n * the given integer timestamp or the current time if no timestamp is\n * given. In other words, timestamp is optional and defaults to the value\n * of time().\n *\n * @format     string\n * @timestamp  int\n *\n * @return     mixed   Returns a formatted date string. If a non-numeric\n *                     value is used for timestamp, FALSE is returned and\n *                     an E_WARNING level error is emitted.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getdate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getdate.php )\n *\n * Returns an associative array containing the date information of the\n * timestamp, or the current local time if no timestamp is given.\n *\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gettimeofday", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gettimeofday.php )\n *\n * This is an interface to gettimeofday(2). It returns an associative\n * array containing the data returned from the system call.\n *\n * @return_float\n *             bool    When set to TRUE, a float instead of an array is\n *                     returned.\n *\n * @return     mixed   By default an array is returned. If return_float is\n *                     set, then a float is returned.\n *\n *                     Array keys: \"sec\" - seconds since the Unix Epoch\n *                     \"usec\" - microseconds \"minuteswest\" - minutes west\n *                     of Greenwich \"dsttime\" - type of dst correction\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "return_float", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gmdate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gmdate.php )\n *\n * Identical to the date() function except that the time returned is\n * Greenwich Mean Time (GMT).\n *\n * @format     string  The format of the outputted date string. See the\n *                     formatting options for the date() function.\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     mixed   Returns a formatted date string. If a non-numeric\n *                     value is used for timestamp, FALSE is returned and\n *                     an E_WARNING level error is emitted.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gmmktime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gmmktime.php )\n *\n * Identical to mktime() except the passed parameters represents a GMT\n * date. gmmktime() internally uses mktime() so only times valid in derived\n * local time can be used.\n *\n * Like mktime(), arguments may be left out in order from right to left,\n * with any omitted arguments being set to the current corresponding GMT\n * value.\n *\n * @hour       int     The hour\n * @minute     int     The minute\n * @second     int     The second\n * @month      int     The month\n * @day        int     The day\n * @year       int     The year\n *\n * @return     mixed   Returns a integer Unix timestamp.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hour", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "minute", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "second", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "month", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gmstrftime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gmstrftime.php )\n *\n * Behaves the same as strftime() except that the time returned is\n * Greenwich Mean Time (GMT). For example, when run in Eastern Standard\n * Time (GMT -0500), the first line below prints \"Dec 31 1998 20:00:00\",\n * while the second prints \"Jan 01 1999 01:00:00\".\n *\n * @format     string  See description in strftime().\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     string  Returns a string formatted according to the given\n *                     format string using the given timestamp or the\n *                     current local time if no timestamp is given. Month\n *                     and weekday names and other language dependent\n *                     strings respect the current locale set with\n *                     setlocale().\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "idate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.idate.php )\n *\n * Returns a number formatted according to the given format string using\n * the given integer timestamp or the current local time if no timestamp is\n * given. In other words, timestamp is optional and defaults to the value\n * of time().\n *\n * Unlike the function date(), idate() accepts just one char in the format\n * parameter.\n *\n * @format     string  The following characters are recognized in the\n *                     format parameter string format character Description\n *                     B Swatch Beat/Internet Time d Day of the month h\n *                     Hour (12 hour format) H Hour (24 hour format) i\n *                     Minutes I (uppercase i) returns 1 if DST is\n *                     activated, 0 otherwise L (uppercase l) returns 1 for\n *                     leap year, 0 otherwise m Month number s Seconds t\n *                     Days in current month U Seconds since the Unix Epoch\n *                     - January 1 1970 00:00:00 UTC - this is the same as\n *                     time() w Day of the week (0 on Sunday) W ISO-8601\n *                     week number of year, weeks starting on Monday y Year\n *                     (1 or 2 digits - check note below) Y Year (4 digits)\n *                     z Day of the year Z Timezone offset in seconds\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n *\n * @return     mixed   Returns an integer.\n *\n *                     As idate() always returns an integer and as they\n *                     can't start with a \"0\", idate() may return fewer\n *                     digits than you would expect. See the example below.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "localtime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.localtime.php )\n *\n * The localtime() function returns an array identical to that of the\n * structure returned by the C function call.\n *\n * @timestamp  int     The optional timestamp parameter is an integer Unix\n *                     timestamp that defaults to the current local time if\n *                     a timestamp is not given. In other words, it\n *                     defaults to the value of time().\n * @is_associative\n *             bool    If set to FALSE or not supplied then the array is\n *                     returned as a regular, numerically indexed array. If\n *                     the argument is set to TRUE then localtime() returns\n *                     an associative array containing all the different\n *                     elements of the structure returned by the C function\n *                     call to localtime. The names of the different keys\n *                     of the associative array are as follows:\n *\n *                     \"tm_sec\" - seconds \"tm_min\" - minutes \"tm_hour\" -\n *                     hour \"tm_mday\" - day of the month Months are from 0\n *                     (Jan) to 11 (Dec) and days of the week are from 0\n *                     (Sun) to 6 (Sat). \"tm_mon\" - month of the year,\n *                     starting with 0 for January \"tm_year\" - Years since\n *                     1900 \"tm_wday\" - Day of the week \"tm_yday\" - Day of\n *                     the year \"tm_isdst\" - Is daylight savings time in\n *                     effect\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  (const char *)0x2000, "is_associative", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "microtime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.microtime.php )\n *\n * microtime() returns the current Unix timestamp with microseconds. This\n * function is only available on operating systems that support the\n * gettimeofday() system call.\n *\n * @get_as_float\n *             bool    When called without the optional argument, this\n *                     function returns the string \"msec sec\" where sec is\n *                     the current time measured in the number of seconds\n *                     since the Unix Epoch (0:00:00 January 1, 1970 GMT),\n *                     and msec is the microseconds part. Both portions of\n *                     the string are returned in units of seconds.\n *\n *                     If the optional get_as_float is set to TRUE then a\n *                     float (in seconds) is returned.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "get_as_float", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mktime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mktime.php )\n *\n * Returns the Unix timestamp corresponding to the arguments given. This\n * timestamp is a long integer containing the number of seconds between the\n * Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.\n *\n * Arguments may be left out in order from right to left; any arguments\n * thus omitted will be set to the current value according to the local\n * date and time.\n *\n * @hour       int     The number of the hour.\n * @minute     int     The number of the minute.\n * @second     int     The number of seconds past the minute.\n * @month      int     The number of the month.\n * @day        int     The number of the day.\n * @year       int     The number of the year, may be a two or four digit\n *                     value, with values between 0-69 mapping to 2000-2069\n *                     and 70-100 to 1970-2000. On systems where time_t is\n *                     a 32bit signed integer, as most common today, the\n *                     valid range for year is somewhere between 1901 and\n *                     2038. However, before PHP 5.1.0 this range was\n *                     limited from 1970 to 2038 on some systems (e.g.\n *                     Windows).\n *\n * @return     mixed   mktime() returns the Unix timestamp of the arguments\n *                     given. If the arguments are invalid, the function\n *                     returns FALSE (before PHP 5.1 it returned -1).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hour", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "minute", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "second", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "month", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strftime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strftime.php )\n *\n * Format the time and/or date according to locale settings. Month and\n * weekday names and other language-dependent strings respect the current\n * locale set with setlocale().\n *\n * Not all conversion specifiers may be supported by your C library, in\n * which case they will not be supported by PHP's strftime(). Additionally,\n * not all platforms support negative timestamps, so your date range may be\n * limited to no earlier than the Unix epoch. This means that %e, %T, %R\n * and, %D (and possibly others) - as well as dates prior to Jan 1, 1970 -\n * will not work on Windows, some Linux distributions, and a few other\n * operating systems. For Windows systems, a complete overview of supported\n * conversion specifiers can be found at MSDN.\n *\n * @format     string\n * @timestamp  int\n *\n * @return     mixed   Returns a string formatted according format using\n *                     the given timestamp or the current local time if no\n *                     timestamp is given. Month and weekday names and\n *                     other language-dependent strings respect the current\n *                     locale set with setlocale().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strptime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strptime.php )\n *\n * strptime() returns an array with the date parsed, or FALSE on error.\n *\n * Month and weekday names and other language dependent strings respect\n * the current locale set with setlocale() (LC_TIME).\n *\n * @date       string  The string to parse (e.g. returned from strftime()).\n * @format     string  The format used in date (e.g. the same as used in\n *                     strftime()). Note that some of the format options\n *                     available to strftime() may not have any effect\n *                     within strptime(); the exact subset that are\n *                     supported will vary based on the operating system\n *                     and C library in use.\n *\n *                     For more information about the format options, read\n *                     the strftime() page.\n *\n * @return     mixed   Returns an array or FALSE on failure.\n *\n *                     The following parameters are returned in the array\n *                     parameters Description \"tm_sec\" Seconds after the\n *                     minute (0-61) \"tm_min\" Minutes after the hour (0-59)\n *                     \"tm_hour\" Hour since midnight (0-23) \"tm_mday\" Day\n *                     of the month (1-31) \"tm_mon\" Months since January\n *                     (0-11) \"tm_year\" Years since 1900 \"tm_wday\" Days\n *                     since Sunday (0-6) \"tm_yday\" Days since January 1\n *                     (0-365) \"unparsed\" the date part which was not\n *                     recognized using the specified format\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "date", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strtotime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strtotime.php )\n *\n *\n * @input      string  Date and Time Formats.\n * @timestamp  int     The timestamp which is used as a base for the\n *                     calculation of relative dates.\n *\n * @return     mixed   Returns a timestamp on success, FALSE otherwise.\n *                     Previous to PHP 5.1.0, this function would return -1\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timestamp", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "TimeStamp::Current()", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "time", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.time.php )\n *\n * Returns the current time measured in the number of seconds since the\n * Unix Epoch (January 1 1970 00:00:00 GMT).\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_abbreviations_list", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-abbreviations-list.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_identifiers_list", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-identifiers-list.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_location_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-location-get.php )\n *\n *\n * @timezone   object\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_name_from_abbr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-name-from-abbr.php )\n *\n *\n * @abbr       string  Time zone abbreviation.\n * @gmtoffset  int     Offset from GMT in seconds. Defaults to -1 which\n *                     means that first found time zone corresponding to\n *                     abbr is returned. Otherwise exact offset is searched\n *                     and only if not found then the first time zone with\n *                     any offset is returned.\n * @isdst      bool    Daylight saving time indicator. Defaults to -1,\n *                     which means that whether the time zone has daylight\n *                     saving or not is not taken into consideration when\n *                     searching. If this is set to 1, then the gmtOffset\n *                     is assumed to be an offset with daylight saving in\n *                     effect; if 0, then gmtOffset is assumed to be an\n *                     offset without daylight saving in effect. If abbr\n *                     doesn't exist then the time zone is searched solely\n *                     by the gmtOffset and isdst.\n *\n * @return     mixed   Returns time zone name on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "abbr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "gmtoffset", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "isdst", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_name_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.timezone-name-get.php )\n *\n *\n * @object     object\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_offset_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.timezone-offset-get.php\n * )\n *\n *\n * @object     object\n * @dt         object\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dt", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.timezone-open.php )\n *\n *\n * @timezone   string\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "timezone", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_transitions_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-transitions-get.php )\n *\n *\n * @object     object\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "object", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "timezone_version_get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.timezone-version-get.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_access", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-access.php )\n *\n * posix_access() checks the user's permission of a file.\n *\n * @file       string  The name of the file to be tested.\n * @mode       int     A mask consisting of one or more of POSIX_F_OK,\n *                     POSIX_R_OK, POSIX_W_OK and POSIX_X_OK.\n *\n *                     POSIX_R_OK, POSIX_W_OK and POSIX_X_OK request\n *                     checking whether the file exists and has read, write\n *                     and execute permissions, respectively. POSIX_F_OK\n *                     just requests checking for the existence of the\n *                     file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_ctermid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-ctermid.php )\n *\n * Generates a string which is the pathname for the current controlling\n * terminal for the process. On error this will set errno, which can be\n * checked using posix_get_last_error()\n *\n * @return     string  Upon successful completion, returns string of the\n *                     pathname to the current controlling terminal.\n *                     Otherwise FALSE is returned and errno is set, which\n *                     can be checked with posix_get_last_error().\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_get_last_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.posix-get-last-error.php )\n *\n * Retrieve the error number set by the last posix function that failed.\n * The system error message associated with the errno may be checked with\n * posix_strerror().\n *\n * @return     int     Returns the errno (error number) set by the last\n *                     posix function that failed. If no errors exist, 0 is\n *                     returned.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getcwd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getcwd.php )\n *\n * Gets the absolute pathname of the script's current working directory.\n * On error, it sets errno which can be checked using\n * posix_get_last_error()\n *\n * @return     string  Returns a string of the absolute pathname on\n *                     success. On error, returns FALSE and sets errno\n *                     which can be checked with posix_get_last_error().\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getegid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getegid.php )\n *\n * Return the numeric effective group ID of the current process.\n *\n * @return     int     Returns an integer of the effective group ID.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_geteuid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-geteuid.php )\n *\n * Return the numeric effective user ID of the current process. See also\n * posix_getpwuid() for information on how to convert this into a useable\n * username.\n *\n * @return     int     Returns the user id, as an integer\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getgid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgid.php )\n *\n * Return the numeric real group ID of the current process.\n *\n * @return     int     Returns the real group id, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getgrgid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgrgid.php )\n *\n * Gets information about a group provided its id.\n *\n * @gid        int     The group id.\n *\n * @return     mixed   The array elements returned are: The group\n *                     information array Element Description name The name\n *                     element contains the name of the group. This is a\n *                     short, usually less than 16 character \"handle\" of\n *                     the group, not the real, full name. passwd The\n *                     passwd element contains the group's password in an\n *                     encrypted format. Often, for example on a system\n *                     employing \"shadow\" passwords, an asterisk is\n *                     returned instead. gid Group ID, should be the same\n *                     as the gid parameter used when calling the function,\n *                     and hence redundant. members This consists of an\n *                     array of string's for all the members in the group.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "gid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getgrnam", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgrnam.php )\n *\n * Gets information about a group provided its name.\n *\n * @name       string\n *\n * @return     mixed   The array elements returned are: The group\n *                     information array Element Description name The name\n *                     element contains the name of the group. This is a\n *                     short, usually less than 16 character \"handle\" of\n *                     the group, not the real, full name. This should be\n *                     the same as the name parameter used when calling the\n *                     function, and hence redundant. passwd The passwd\n *                     element contains the group's password in an\n *                     encrypted format. Often, for example on a system\n *                     employing \"shadow\" passwords, an asterisk is\n *                     returned instead. gid Group ID of the group in\n *                     numeric form. members This consists of an array of\n *                     string's for all the members in the group.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getgroups", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgroups.php )\n *\n * Gets the group set of the current process.\n *\n * @return     mixed   Returns an array of integers containing the numeric\n *                     group ids of the group set of the current process.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getlogin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getlogin.php )\n *\n * Returns the login name of the user owning the current process.\n *\n * @return     mixed   Returns the login name of the user, as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getpgid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpgid.php )\n *\n * Returns the process group identifier of the process pid or FALSE on\n * failure.\n *\n * @pid        int     The process id.\n *\n * @return     mixed   Returns the identifier, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getpgrp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpgrp.php )\n *\n * Return the process group identifier of the current process.\n *\n * @return     int     Returns the identifier, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getpid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpid.php )\n *\n * Return the process identifier of the current process.\n *\n * @return     int     Returns the identifier, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getppid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getppid.php )\n *\n * Return the process identifier of the parent process of the current\n * process.\n *\n * @return     int     Returns the identifier, as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getpwnam", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpwnam.php )\n *\n * Returns an array of information about the given user.\n *\n * @username   string  An alphanumeric username.\n *\n * @return     mixed   On success an array with the following elements is\n *                     returned, else FALSE is returned: The user\n *                     information array Element Description name The name\n *                     element contains the username of the user. This is a\n *                     short, usually less than 16 character \"handle\" of\n *                     the user, not the real, full name. This should be\n *                     the same as the username parameter used when calling\n *                     the function, and hence redundant. passwd The passwd\n *                     element contains the user's password in an encrypted\n *                     format. Often, for example on a system employing\n *                     \"shadow\" passwords, an asterisk is returned instead.\n *                     uid User ID of the user in numeric form. gid The\n *                     group ID of the user. Use the function\n *                     posix_getgrgid() to resolve the group name and a\n *                     list of its members. gecos GECOS is an obsolete term\n *                     that refers to the finger information field on a\n *                     Honeywell batch processing system. The field,\n *                     however, lives on, and its contents have been\n *                     formalized by POSIX. The field contains a comma\n *                     separated list containing the user's full name,\n *                     office phone, office number, and home phone number.\n *                     On most systems, only the user's full name is\n *                     available. dir This element contains the absolute\n *                     path to the home directory of the user. shell The\n *                     shell element contains the absolute path to the\n *                     executable of the user's default shell.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getpwuid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpwuid.php )\n *\n * Returns an array of information about the user referenced by the given\n * user ID.\n *\n * @uid        int     The user identifier.\n *\n * @return     mixed   Returns an associative array with the following\n *                     elements: The user information array Element\n *                     Description name The name element contains the\n *                     username of the user. This is a short, usually less\n *                     than 16 character \"handle\" of the user, not the\n *                     real, full name. passwd The passwd element contains\n *                     the user's password in an encrypted format. Often,\n *                     for example on a system employing \"shadow\"\n *                     passwords, an asterisk is returned instead. uid User\n *                     ID, should be the same as the uid parameter used\n *                     when calling the function, and hence redundant. gid\n *                     The group ID of the user. Use the function\n *                     posix_getgrgid() to resolve the group name and a\n *                     list of its members. gecos GECOS is an obsolete term\n *                     that refers to the finger information field on a\n *                     Honeywell batch processing system. The field,\n *                     however, lives on, and its contents have been\n *                     formalized by POSIX. The field contains a comma\n *                     separated list containing the user's full name,\n *                     office phone, office number, and home phone number.\n *                     On most systems, only the user's full name is\n *                     available. dir This element contains the absolute\n *                     path to the home directory of the user. shell The\n *                     shell element contains the absolute path to the\n *                     executable of the user's default shell.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "uid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getrlimit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getrlimit.php )\n *\n * posix_getrlimit() returns an array of information about the current\n * resource's soft and hard limits.\n *\n * Each resource has an associated soft and hard limit. The soft limit is\n * the value that the kernel enforces for the corresponding resource. The\n * hard limit acts as a ceiling for the soft limit. An unprivileged process\n * may only set its soft limit to a value from 0 to the hard limit, and\n * irreversibly lower its hard limit.\n *\n * @return     mixed   Returns an associative array of elements for each\n *                     limit that is defined. Each limit has a soft and a\n *                     hard limit. List of possible limits returned Limit\n *                     name Limit description core The maximum size of the\n *                     core file. When 0, not core files are created. When\n *                     core files are larger than this size, they will be\n *                     truncated at this size. totalmem The maximum size of\n *                     the memory of the process, in bytes. virtualmem The\n *                     maximum size of the virtual memory for the process,\n *                     in bytes. data The maximum size of the data segment\n *                     for the process, in bytes. stack The maximum size of\n *                     the process stack, in bytes. rss The maximum number\n *                     of virtual pages resident in RAM maxproc The maximum\n *                     number of processes that can be created for the real\n *                     user ID of the calling process. memlock The maximum\n *                     number of bytes of memory that may be locked into\n *                     RAM. cpu The amount of time the process is allowed\n *                     to use the CPU. filesize The maximum size of the\n *                     data segment for the process, in bytes. openfiles\n *                     One more than the maximum number of open file\n *                     descriptors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getsid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getsid.php )\n *\n * Return the session id of the process pid. The session id of a process\n * is the process group id of the session leader.\n *\n * @pid        int     The process identifier. If set to 0, the current\n *                     process is assumed. If an invalid pid is specified,\n *                     then FALSE is returned and an error is set which can\n *                     be checked with posix_get_last_error().\n *\n * @return     mixed   Returns the identifier, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_getuid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getuid.php )\n *\n * Return the numeric real user ID of the current process.\n *\n * @return     int     Returns the user id, as an integer\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_initgroups", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-initgroups.php )\n *\n * Calculates the group access list for the user specified in name.\n *\n * @name       string  The user to calculate the list for.\n * @base_group_id\n *             int     Typically the group number from the password file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "base_group_id", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_isatty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-isatty.php )\n *\n * Determines if the file descriptor fd refers to a valid terminal type\n * device.\n *\n * @fd         mixed   The file descriptor.\n *\n * @return     bool    Returns TRUE if fd is an open descriptor connected\n *                     to a terminal and FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "fd", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_kill", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-kill.php )\n *\n * Send the signal sig to the process with the process identifier pid.\n *\n * @pid        int     The process identifier.\n * @sig        int     One of the PCNTL signals constants.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sig", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_mkfifo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-mkfifo.php )\n *\n * posix_mkfifo() creates a special FIFO file which exists in the file\n * system and acts as a bidirectional communication endpoint for processes.\n *\n * @pathname   string  Path to the FIFO file.\n * @mode       int     The second parameter mode has to be given in octal\n *                     notation (e.g. 0644). The permission of the newly\n *                     created FIFO also depends on the setting of the\n *                     current umask(). The permissions of the created file\n *                     are (mode & ~umask).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pathname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_mknod", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-mknod.php )\n *\n * Creates a special or ordinary file.\n *\n * @pathname   string  The file to create\n * @mode       int     This parameter is constructed by a bitwise OR\n *                     between file type (one of the following constants:\n *                     POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK,\n *                     POSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions.\n * @major      int     The major device kernel identifier (required to pass\n *                     when using S_IFCHR or S_IFBLK).\n * @minor      int     The minor device kernel identifier.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pathname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "major", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "minor", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_setegid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setegid.php )\n *\n * Set the effective group ID of the current process. This is a privileged\n * function and needs appropriate privileges (usually root) on the system\n * to be able to perform this function.\n *\n * @gid        int     The group id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "gid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_seteuid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-seteuid.php )\n *\n * Set the real user ID of the current process. This is a privileged\n * function and needs appropriate privileges (usually root) on the system\n * to be able to perform this function.\n *\n * @uid        int     The user id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "uid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_setgid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setgid.php )\n *\n * Set the real group ID of the current process. This is a privileged\n * function and needs appropriate privileges (usually root) on the system\n * to be able to perform this function. The appropriate order of function\n * calls is posix_setgid() first, posix_setuid() last.\n *\n * If the caller is a super user, this will also set the effective group\n * id.\n *\n * @gid        int     The group id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "gid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_setpgid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setpgid.php )\n *\n * Let the process pid join the process group pgid.\n *\n * @pid        int     The process id.\n * @pgid       int     The process group id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pgid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_setsid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setsid.php )\n *\n * Make the current process a session leader.\n *\n * @return     int     Returns the session id, or -1 on errors.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_setuid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setuid.php )\n *\n * Set the real user ID of the current process. This is a privileged\n * function that needs appropriate privileges (usually root) on the system\n * to be able to perform this function.\n *\n * @uid        int     The user id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "uid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_strerror", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-strerror.php )\n *\n * Returns the POSIX system error message associated with the given errno.\n * You may get the errno parameter by calling posix_get_last_error().\n *\n * @errnum     int     A POSIX error number, returned by\n *                     posix_get_last_error(). If set to 0, then the string\n *                     \"Success\" is returned.\n *\n * @return     string  Returns the error message, as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "errnum", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_times", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-times.php )\n *\n * Gets information about the current CPU usage.\n *\n * @return     mixed   Returns a hash of strings with information about the\n *                     current process CPU usage. The indices of the hash\n *                     are: ticks - the number of clock ticks that have\n *                     elapsed since reboot. utime - user time used by the\n *                     current process. stime - system time used by the\n *                     current process. cutime - user time used by current\n *                     process and children. cstime - system time used by\n *                     current process and children.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_ttyname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-ttyname.php )\n *\n * Returns a string for the absolute path to the current terminal device\n * that is open on the file descriptor fd.\n *\n * @fd         mixed   The file descriptor.\n *\n * @return     mixed   On success, returns a string of the absolute path of\n *                     the fd. On failure, returns FALSE\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "fd", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "posix_uname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.posix-uname.php )\n *\n * Gets information about the system.\n *\n * Posix requires that assumptions must not be made about the format of\n * the values, e.g. the assumption that a release may contain three digits\n * or anything else returned by this function.\n *\n * @return     mixed   Returns a hash of strings with information about the\n *                     system. The indices of the hash are sysname -\n *                     operating system name (e.g. Linux) nodename - system\n *                     name (e.g. valiant) release - operating system\n *                     release (e.g. 2.2.10) version - operating system\n *                     version (e.g. #4 Tue Jul 20 17:01:36 MEST 1999)\n *                     machine - system architecture (e.g. i586) domainname\n *                     - DNS domainname (e.g. example.com)\n *\n *                     domainname is a GNU extension and not part of\n *                     POSIX.1, so this field is only available on GNU\n *                     systems or when using the GNU libc.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_alnum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-alnum.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * alphanumeric. In the standard C locale letters are just [A-Za-z].\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is either a\n *                     letter or a digit, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_alpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-alpha.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * alphabetic. In the standard C locale letters are just [A-Za-z] and\n * ctype_alpha() is equivalent to (ctype_upper($text) ||\n * ctype_lower($text)) if $text is just a single character, but other\n * languages have letters that are considered neither upper nor lower case.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is a letter\n *                     from the current locale, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_cntrl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-cntrl.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * control characters. Control characters are e.g. line feed, tab, escape.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is a control\n *                     character from the current locale, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_digit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-digit.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * numerical.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in the string text\n *                     is a decimal digit, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_graph", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-graph.php )\n *\n * Checks if all of the characters in the provided string, text, creates\n * visible output.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is printable\n *                     and actually creates visible output (no white\n *                     space), FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_lower", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-lower.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * lowercase letters.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is a\n *                     lowercase letter in the current locale.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_print", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-print.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * printable.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text will\n *                     actually create output (including blanks). Returns\n *                     FALSE if text contains control characters or\n *                     characters that do not have any output or control\n *                     function at all.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_punct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-punct.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * punctuation character.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is\n *                     printable, but neither letter, digit or blank, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_space", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-space.php )\n *\n * Checks if all of the characters in the provided string, text, creates\n * whitespace.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text creates some\n *                     sort of white space, FALSE otherwise. Besides the\n *                     blank character this also includes tab, vertical\n *                     tab, line feed, carriage return and form feed\n *                     characters.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_upper", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-upper.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * uppercase characters.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is an\n *                     uppercase letter in the current locale.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ctype_xdigit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ctype-xdigit.php )\n *\n * Checks if all of the characters in the provided string, text, are\n * hexadecimal 'digits'.\n *\n * @text       mixed   The tested string.\n *\n * @return     bool    Returns TRUE if every character in text is a\n *                     hexadecimal 'digit', that is a decimal digit or a\n *                     character from [A-Fa-f] , FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzclose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzclose.php )\n *\n * Closes the given bzip2 file pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzopen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzopen.php )\n *\n * bzopen() opens a bzip2 (.bz2) file for reading or writing.\n *\n * @filename   mixed   The name of the file to open.\n * @mode       string  Similar to the fopen() function, only 'r' (read) and\n *                     'w' (write) are supported. Everything else will\n *                     cause bzopen to return FALSE.\n *\n * @return     mixed   If the open fails, bzopen() returns FALSE, otherwise\n *                     it returns a pointer to the newly opened file.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzread", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzread.php )\n *\n * bzread() reads from the given bzip2 file pointer.\n *\n * Reading stops when length (uncompressed) bytes have been read or EOF is\n * reached, whichever comes first.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n * @length     int     If not specified, bzread() will read 1024\n *                     (uncompressed) bytes at a time.\n *\n * @return     mixed   Returns the uncompressed data, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:1024;", (const char *)7, "1024", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzwrite", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzwrite.php )\n *\n * bzwrite() writes a string into the given bzip2 file stream.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n * @data       string  The written data.\n * @length     int     If supplied, writing will stop after length\n *                     (uncompressed) bytes have been written or the end of\n *                     data is reached, whichever comes first.\n *\n * @return     mixed   Returns the number of bytes written, or FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzflush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzflush.php )\n *\n * Forces a write of all buffered bzip2 data for the file pointer bz.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzerrstr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzerrstr.php )\n *\n * Gets the error string of any bzip2 error returned by the given file\n * pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     string  Returns a string containing the error message.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzerror", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzerror.php )\n *\n * Returns the error number and error string of any bzip2 error returned\n * by the given file pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     mixed   Returns an associative array, with the error code in\n *                     the errno entry, and the error message in the errstr\n *                     entry.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzerrno", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzerrno.php )\n *\n * Returns the error number of any bzip2 error returned by the given file\n * pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     int     Returns the error number as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "bz", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzcompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzcompress.php )\n *\n * bzcompress() compresses the given string and returns it as bzip2\n * encoded data.\n *\n * @source     string  The string to compress.\n * @blocksize  int     Specifies the blocksize used during compression and\n *                     should be a number from 1 to 9 with 9 giving the\n *                     best compression, but using more resources to do so.\n * @workfactor int     Controls how the compression phase behaves when\n *                     presented with worst case, highly repetitive, input\n *                     data. The value can be between 0 and 250 with 0\n *                     being a special case.\n *\n *                     Regardless of the workfactor, the generated output\n *                     is the same.\n *\n * @return     mixed   The compressed string or number of error in case of\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blocksize", "", (const char *)0xa /* KindOfInt64 */, "i:4;", (const char *)4, "4", (const char *)1, NULL,
  (const char *)0x2000, "workfactor", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bzdecompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bzdecompress.php )\n *\n * bzdecompress() decompresses the given string containing bzip2 encoded\n * data.\n *\n * @source     string  The string to decompress.\n * @small      int\n *\n * @return     mixed   The decompressed string or number of error in case\n *                     of error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "small", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_classes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.spl-classes.php )\n *\n * This function returns an array with the current available SPL classes.\n *\n * @return     map     Returns an array containing the currently available\n *                     SPL classes.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_object_hash", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.spl-object-hash.php )\n *\n * This function returns a unique identifier for the object. This id can\n * be used as a hash key for storing objects or for identifying an object.\n *\n * @obj        object  Any object.\n *\n * @return     string  A string that is unique for each currently existing\n *                     object and is always the same for each object.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10406040, "hphp_object_pointer", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-object-pointer.php\n * )\n *\n * This function returns low level raw pointer the object. Used by closure\n * and internal purposes.\n *\n * @obj        object  Any object.\n *\n * @return     int     Low level ObjectData pointer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10406040, "hphp_get_this", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-get-this.php )\n *\n * This function returns this object if present, or NULL.\n *\n * @return     mixed   This object.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "class_implements", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.class-implements.php )\n *\n * This function returns an array with the names of the interfaces that\n * the given class and its parents implement.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "class_parents", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.class-parents.php )\n *\n * This function returns an array with the name of the parent classes of\n * the given class.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "class_uses", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.class-uses.php )\n *\n * This function returns an array with the names of the traits that the\n * given class uses.\n *\n * @obj        mixed   An object (class instance) or a string (class name).\n * @autoload   bool    Whether to allow this function to load the class\n *                     automatically through the __autoload magic method.\n *\n * @return     mixed   An array on success, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iterator_apply", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-apply.php )\n *\n * Calls a function for every element in an iterator.\n *\n * @obj        mixed   The class to iterate over.\n * @func       mixed   The callback function to call on every element. The\n *                     function must return TRUE in order to continue\n *                     iterating over the iterator.\n * @params     map     Arguments to pass to the callback function.\n *\n * @return     mixed   Returns the iteration count.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iterator_count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-count.php )\n *\n * Count the elements in an iterator.\n *\n * @obj        mixed   The iterator being counted.\n *\n * @return     mixed   The number of elements in iterator.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iterator_to_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iterator-to-array.php )\n *\n * Copy the elements of an iterator into an array.\n *\n * @obj        mixed   The iterator being copied.\n * @use_keys   bool    Whether to use the iterator element keys as index.\n *\n * @return     mixed   An array containing the elements of the iterator.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_keys", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_autoload_call", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.spl-autoload-call.php )\n *\n * This function can be used to manually search for a class or interface\n * using the registered __autoload functions.\n *\n * @class_name string  The class name being searched.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_autoload_extensions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-extensions.php )\n *\n * This function can modify and check the file extensions that the built\n * in __autoload() fallback function spl_autoload() will be using.\n *\n * @file_extensions\n *             string  When calling without an argument, it simply returns\n *                     the current list of extensions each separated by\n *                     comma. To modify the list of file extensions, simply\n *                     invoke the functions with the new list of file\n *                     extensions to use in a single string with each\n *                     extensions separated by comma.\n *\n * @return     string  A comma delimited list of default file extensions\n *                     for spl_autoload().\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "file_extensions", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_autoload_functions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-functions.php )\n *\n * Get all registered __autoload() functions.\n *\n * @return     mixed   An array of all registered __autoload functions. If\n *                     the autoload stack is not activated then the return\n *                     value is FALSE. If no function is registered the\n *                     return value will be an empty array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_autoload_register", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-register.php )\n *\n * Register a function with the spl provided __autoload stack. If the\n * stack is not yet activated it will be activated.\n *\n * If your code has an existing __autoload function then this function\n * must be explicitly registered on the __autoload stack. This is because\n * spl_autoload_register() will effectively replace the engine cache for\n * the __autoload function by either spl_autoload() or spl_autoload_call().\n *\n * If there must be multiple autoload functions, spl_autoload_register()\n * allows for this. It effectively creates a queue of autoload functions,\n * and runs through each of them in the order they are defined. By\n * contrast, __autoload() may only be defined once.\n *\n * @autoload_function\n *             mixed   The autoload function being registered. If no\n *                     parameter is provided, then the default\n *                     implementation of spl_autoload() will be registered.\n * @throws     bool    This parameter specifies whether\n *                     spl_autoload_register() should throw exceptions on\n *                     error.\n * @prepend    bool    If true, spl_autoload_register() will prepend the\n *                     autoloader on the autoload stack instead of\n *                     appending it.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "autoload_function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "throws", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "prepend", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_autoload_unregister", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.spl-autoload-unregister.php )\n *\n * Unregister a function from the spl provided __autoload stack. If the\n * stack is activated and empty after unregistering the given function then\n * it will be deactivated.\n *\n * When this function results in the autoload stack being deactivated, any\n * __autoload function that previously existed will not be reactivated.\n *\n * @autoload_function\n *             mixed   The autoload function being unregistered.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "autoload_function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "spl_autoload", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.spl-autoload.php )\n *\n * This function is intended to be used as a default implementation for\n * __autoload(). If nothing else is specified and spl_autoload_register()\n * is called without any parameters then this functions will be used for\n * any later call to __autoload().\n *\n * @class_name string\n * @file_extensions\n *             string  By default it checks all include paths to contain\n *                     filenames built up by the lowercase class name\n *                     appended by the filename extensions .inc and .php.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "file_extensions", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_declared_classes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-declared-classes.php )\n *\n * Gets the declared classes.\n *\n * @return     map     Returns an array of the names of the declared\n *                     classes in the current script.\n *\n *                     Note that depending on what extensions you have\n *                     compiled or loaded into PHP, additional classes\n *                     could be present. This means that you will not be\n *                     able to define your own classes using these names.\n *                     There is a list of predefined classes in the\n *                     Predefined Classes section of the appendices.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_declared_interfaces", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-declared-interfaces.php )\n *\n * Gets the declared interfaces.\n *\n * @return     map     Returns an array of the names of the declared\n *                     interfaces in the current script.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_declared_traits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-declared-traits.php\n * )\n *\n * Gets the declared traits.\n *\n * @return     map     Returns an array of the names of the declared traits\n *                     in the current script.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "class_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.class-exists.php )\n *\n * This function checks whether or not the given class has been defined.\n *\n * @class_name string  The class name. The name is matched in a\n *                     case-insensitive manner.\n * @autoload   bool    Whether or not to call __autoload by default.\n *\n * @return     bool    Returns TRUE if class_name is a defined class, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "interface_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.interface-exists.php )\n *\n * Checks if the given interface has been defined.\n *\n * @interface_name\n *             string  The interface name\n * @autoload   bool    Whether to call __autoload or not by default.\n *\n * @return     bool    Returns TRUE if the interface given by\n *                     interface_name has been defined, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "interface_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "trait_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.trait-exists.php )\n *\n * Checks if the given trait has been defined.\n *\n * @trait_name string  The trait name\n * @autoload   bool    Whether to call __autoload or not by default.\n *\n * @return     bool    Returns TRUE if the trait given by trait_name has\n *                     been defined, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "trait_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "autoload", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_class_methods", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-class-methods.php )\n *\n * Gets the class methods names.\n *\n * @class_or_object\n *             mixed   The class name or an object instance\n *\n * @return     map     Returns an array of method names defined for the\n *                     class specified by class_name. In case of an error,\n *                     it returns NULL.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "class_or_object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_class_vars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-class-vars.php )\n *\n * Get the default properties of the given class.\n *\n * @class_name string  The class name\n *\n * @return     map     Returns an associative array of declared properties\n *                     visible from the current scope, with their default\n *                     value. The resulting array elements are in the form\n *                     of varname => value.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "get_class_constants", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Get the constants of the given class.\n *\n * @class_name string  The class name\n *\n * @return     map     Returns an associative array of constants with their\n *                     values.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_class", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-class.php )\n *\n * Gets the name of the class of the given object.\n *\n * @object     mixed   The tested object. This parameter may be omitted\n *                     when inside a class.\n *\n * @return     mixed   Returns the name of the class of which object is an\n *                     instance. Returns FALSE if object is not an object.\n *\n *                     If object is omitted when inside a class, the name\n *                     of that class is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_parent_class", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-parent-class.php )\n *\n * Retrieves the parent class name for object or class.\n *\n * @object     mixed   The tested object or class name\n *\n * @return     mixed   Returns the name of the parent class of the class of\n *                     which object is an instance or the name.\n *\n *                     If the object does not have a parent FALSE will be\n *                     returned.\n *\n *                     If called without parameter outside object, this\n *                     function returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_a", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-a.php )\n *\n * Checks if the given object is of this class or has this class as one of\n * its parents.\n *\n * @class_or_object\n *             mixed   The tested object\n * @class_name string  The class name\n * @allow_string\n *             bool    If this parameter set to false (default), string\n *                     class name as object is not allowed. This also\n *                     prevents from calling autoloader if the class\n *                     doesn't exist.\n *\n * @return     bool    Returns TRUE if the object is of this class or has\n *                     this class as one of its parents, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "class_or_object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "allow_string", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "is_subclass_of", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-subclass-of.php )\n *\n * Checks if the given object has the class class_name as one of its\n * parents.\n *\n * @class_or_object\n *             mixed   A class name or an object instance\n * @class_name string  The class name\n * @allow_string\n *             bool    If this parameter set to false, string class name as\n *                     object is not allowed. This also prevents from\n *                     calling autoloader if the class doesn't exist.\n *\n * @return     bool    This function returns TRUE if the object object,\n *                     belongs to a class which is a subclass of\n *                     class_name, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "class_or_object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "allow_string", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "method_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.method-exists.php )\n *\n * Checks if the class method exists in the given object.\n *\n * @class_or_object\n *             mixed   An object instance or a class name\n * @method_name\n *             string  The method name\n *\n * @return     bool    Returns TRUE if the method given by method_name has\n *                     been defined for the given object, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "class_or_object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "method_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "property_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.property-exists.php )\n *\n * This function checks if the given property exists in the specified\n * class.\n *\n * As opposed with isset(), property_exists() returns TRUE even if the\n * property has the value NULL.\n *\n * @class_or_object\n *             mixed   The class name or an object of the class to test for\n * @property   string  The name of the property\n *\n * @return     mixed   Returns TRUE if the property exists, FALSE if it\n *                     doesn't exist or NULL in case of an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "class_or_object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "property", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_object_vars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-object-vars.php )\n *\n * Gets the accessible non-static properties of the given object according\n * to scope.\n *\n * @object     mixed   An object instance.\n *\n * @return     mixed   Returns an associative array of defined object\n *                     accessible non-static properties for the specified\n *                     object in scope. If a property have not been\n *                     assigned a value, it will be returned with a NULL\n *                     value.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "object", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "call_user_method_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.call-user-method-array.php )\n *\n *\n * @method_name\n *             string  The method name being called.\n * @obj        mixed   The object that method_name is being called on.\n * @paramarr   vector  An array of parameters.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "method_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "paramarr", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "call_user_method", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.call-user-method.php )\n *\n *\n * @method_name\n *             string  The method name being called.\n * @obj        mixed   The object that method_name is being called on.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "method_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "obj", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_change_key_case", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-change-key-case.php )\n *\n * Returns an array with all keys from input lowercased or uppercased.\n * Numbered indices are left as is.\n *\n * @input      mixed   The array to work on\n * @upper      bool    Either CASE_UPPER or CASE_LOWER (default)\n *\n * @return     mixed   Returns an array with its keys lower or uppercased,\n *                     or FALSE if input is not an array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "upper", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_chunk", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-chunk.php )\n *\n * Chunks an array into size large chunks. The last chunk may contain less\n * than size elements.\n *\n * @input      mixed   The array to work on\n * @size       int     The size of each chunk\n * @preserve_keys\n *             bool    When set to TRUE keys will be preserved. Default is\n *                     FALSE which will reindex the chunk numerically\n *\n * @return     mixed   Returns a multidimensional numerically indexed\n *                     array, starting with zero, with each dimension\n *                     containing size elements.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "preserve_keys", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_column", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-column.php )\n *\n * Return the values from a single column in the input array, identified\n * by the value_key and optionally indexed by the index_key\n *\n * @arr        mixed   Source array to pull column of values from\n * @val_key    mixed   Key to pull values from in sub-arrays\n * @idx_key    mixed   Key to pull indexs from in sub-arrays\n *\n * @return     mixed   Returns the array column, or FALSE on failure\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "val_key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "idx_key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_combine", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-combine.php )\n *\n * Creates an array by using the values from the keys array as keys and\n * the values from the values array as the corresponding values.\n *\n * @keys       mixed   Array of keys to be used. Illegal values for key\n *                     will be converted to string.\n * @values     mixed   Array of values to be used\n *\n * @return     mixed   Returns the combined array, FALSE if the number of\n *                     elements for each array isn't equal or if the arrays\n *                     are empty.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "keys", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "values", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_count_values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-count-values.php\n * )\n *\n * array_count_values() returns an array using the values of the input\n * array as keys and their frequency in input as values.\n *\n * @input      mixed   The array of values to count\n *\n * @return     mixed   Returns an associative array of values from input as\n *                     keys and their count as value.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_fill_keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-fill-keys.php )\n *\n * Fills an array with the value of the value parameter, using the values\n * of the keys array as keys.\n *\n * @keys       mixed   Array of values that will be used as keys. Illegal\n *                     values for key will be converted to string.\n * @value      mixed   Value to use for filling\n *\n * @return     mixed   Returns the filled array\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "keys", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_fill", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-fill.php )\n *\n * Fills an array with num entries of the value of the value parameter,\n * keys starting at the start_index parameter.\n *\n * @start_index\n *             int     The first index of the returned array. Supports\n *                     non-negative indexes only.\n * @num        int     Number of elements to insert\n * @value      mixed   Value to use for filling\n *\n * @return     mixed   Returns the filled array\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "start_index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "num", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-filter.php )\n *\n * Iterates over each value in the input array passing them to the\n * callback function. If the callback function returns true, the current\n * value from input is returned into the result array. Array keys are\n * preserved.\n *\n * @input      mixed   The array to iterate over\n * @callback   mixed   The callback function to use\n *\n *                     If no callback is supplied, all entries of input\n *                     equal to FALSE (see converting to boolean) will be\n *                     removed.\n *\n * @return     mixed   Returns the filtered array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_flip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-flip.php )\n *\n * array_flip() returns an array in flip order, i.e. keys from trans\n * become values and values from trans become keys.\n *\n * Note that the values of trans need to be valid keys, i.e. they need to\n * be either integer or string. A warning will be emitted if a value has\n * the wrong type, and the key/value pair in question will not be flipped.\n *\n * If a value has several occurrences, the latest key will be used as its\n * values, and all others will be lost.\n *\n * @trans      mixed   An array of key/value pairs to be flipped.\n *\n * @return     mixed   Returns the flipped array on success and NULL on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "trans", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_key_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-key-exists.php )\n *\n * array_key_exists() returns TRUE if the given key is set in the array.\n * key can be any value possible for an array index.\n *\n * @key        mixed   Value to check.\n * @search     mixed   An array with keys to check.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "search", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "key_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.key-exists.php )\n *\n *\n * @key        mixed\n * @search     mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "search", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-keys.php )\n *\n * array_keys() returns the keys, numeric and string, from the input\n * array.\n *\n * If the optional search_value is specified, then only the keys for that\n * value are returned. Otherwise, all the keys from the input are returned.\n *\n * @input      mixed   An array containing keys to return.\n * @search_value\n *             mixed   If specified, then only keys containing these values\n *                     are returned.\n * @strict     bool    Determines if strict comparison (===) should be used\n *                     during the search.\n *\n * @return     mixed   Returns an array of all the keys in input.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "search_value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "strict", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-map.php )\n *\n * array_map() returns an array containing all the elements of arr1 after\n * applying the callback function to each one. The number of parameters\n * that the callback function accepts should match the number of arrays\n * passed to the array_map()\n *\n * @callback   mixed   Callback function to run for each element in each\n *                     array.\n * @arr1       mixed   An array to run through the callback function.\n *\n * @return     mixed   Returns an array containing all the elements of arr1\n *                     after applying the callback function to each one.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "arr1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_merge_recursive", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-merge-recursive.php )\n *\n * array_merge_recursive() merges the elements of one or more arrays\n * together so that the values of one are appended to the end of the\n * previous one. It returns the resulting array.\n *\n * If the input arrays have the same string keys, then the values for\n * these keys are merged together into an array, and this is done\n * recursively, so that if one of the values is an array itself, the\n * function will merge it with a corresponding entry in another array too.\n * If, however, the arrays have the same numeric key, the later value will\n * not overwrite the original value, but will be appended.\n *\n * @array1     mixed   Initial array to merge.\n *\n * @return     mixed   An array of values resulted from merging the\n *                     arguments together.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_merge", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-merge.php )\n *\n * Merges the elements of one or more arrays together so that the values\n * of one are appended to the end of the previous one. It returns the\n * resulting array.\n *\n * If the input arrays have the same string keys, then the later value for\n * that key will overwrite the previous one. If, however, the arrays\n * contain numeric keys, the later value will not overwrite the original\n * value, but will be appended.\n *\n * If all of the arrays contain only numeric keys, the resulting array is\n * given incrementing keys starting from zero.\n *\n * @array1     mixed   Initial array to merge.\n *\n * @return     mixed   Returns the resulting array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_replace_recursive", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-replace-recursive.php )\n *\n * array_replace_recursive() replaces the values of the first array with\n * the same values from all the following arrays. If a key from the first\n * array exists in the second array, its value will be replaced by the\n * value from the second array. If the key exists in the second array, and\n * not the first, it will be created in the first array. If a key only\n * exists in the first array, it will be left as is. If several arrays are\n * passed for replacement, they will be processed in order, the later array\n * overwriting the previous values.\n *\n * array_replace_recursive() is recursive : it will recurse into arrays\n * and apply the same process to the inner value.\n *\n * When the value in array is scalar, it will be replaced by the value in\n * array1, may it be scalar or array. When the value in array and array1\n * are both arrays, array_replace_recursive() will replace their respective\n * value recursively.\n *\n * @array1     mixed   The array in which elements are replaced.\n *\n * @return     mixed   Returns an array, or NULL if an error occurs.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-replace.php )\n *\n * array_replace() replaces the values of the first array with the same\n * values from all the following arrays. If a key from the first array\n * exists in the second array, its value will be replaced by the value from\n * the second array. If the key exists in the second array, and not the\n * first, it will be created in the first array. If a key only exists in\n * the first array, it will be left as is. If several arrays are passed for\n * replacement, they will be processed in order, the later arrays\n * overwriting the previous values.\n *\n * array_replace() is not recursive : it will replace values in the first\n * array by whatever type is in the second array.\n *\n * @array1     mixed   The array in which elements are replaced.\n *\n * @return     mixed   Returns an array, or NULL if an error occurs.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x100E6040, "array_multisort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-multisort.php )\n *\n * array_multisort() can be used to sort several arrays at once, or a\n * multi-dimensional array by one or more dimensions.\n *\n * Associative (string) keys will be maintained, but numeric keys will be\n * re-indexed.\n *\n * @ar1        mixed   An array being sorted.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "ar1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_pad", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-pad.php )\n *\n * array_pad() returns a copy of the input padded to size specified by\n * pad_size with value pad_value. If pad_size is positive then the array is\n * padded on the right, if it's negative then on the left. If the absolute\n * value of pad_size is less than or equal to the length of the input then\n * no padding takes place. It is possible to add most 1048576 elements at a\n * time.\n *\n * @input      mixed   Initial array of values to pad.\n * @pad_size   int     New size of the array.\n * @pad_value  mixed   Value to pad if input is less than pad_size.\n *\n * @return     mixed   Returns a copy of the input padded to size specified\n *                     by pad_size with value pad_value. If pad_size is\n *                     positive then the array is padded on the right, if\n *                     it's negative then on the left. If the absolute\n *                     value of pad_size is less than or equal to the\n *                     length of the input then no padding takes place.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pad_size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pad_value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_pop", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-pop.php )\n *\n * array_pop() pops and returns the last value of the array, shortening\n * the array by one element. If array is empty (or is not an array), NULL\n * will be returned. Will additionally produce a Warning when called on a\n * non-array. This function will reset() the array pointer after use.\n *\n * @array      mixed   The array to get the value from.\n *\n * @return     mixed   Returns the last value of array. If array is empty\n *                     (or is not an array), NULL will be returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_product", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-product.php )\n *\n * array_product() returns the product of values in an array.\n *\n * @array      mixed   The array.\n *\n * @return     mixed   Returns the product as an integer or float.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_push", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-push.php )\n *\n * array_push() treats array as a stack, and pushes the passed variables\n * onto the end of array. The length of array increases by the number of\n * variables pushed. Has the same effect as:\n *\n * repeated for each var. If you use array_push() to add one element to\n * the array it's better to use $array[] = because in that way there is no\n * overhead of calling a function. array_push() will raise a warning if the\n * first argument is not an array. This differs from the $var[] behaviour\n * where a new array is created.\n *\n * @array      mixed   The input array.\n * @var        mixed   The pushed value.\n *\n * @return     mixed   Returns the new number of elements in the array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_rand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-rand.php )\n *\n * Picks one ore more random entries out of an array, and returns the key\n * (or keys) of the random entries.\n *\n * @input      mixed   The input array.\n * @num_req    int     Specifies how many entries you want to pick. Trying\n *                     to pick more elements than there are in the array\n *                     will result in an E_WARNING level error.\n *\n * @return     mixed   If you are picking only one entry, array_rand()\n *                     returns the key for a random entry. Otherwise, it\n *                     returns an array of keys for the random entries.\n *                     This is done so that you can pick random keys as\n *                     well as values out of the array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "num_req", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_reduce", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-reduce.php )\n *\n * array_reduce() applies iteratively the function function to the\n * elements of the array input, so as to reduce the array to a single\n * value.\n *\n * @input      mixed   The input array.\n * @callback   mixed   The callback function.\n * @initial    mixed   If the optional initial is available, it will be\n *                     used at the beginning of the process, or as a final\n *                     result in case the array is empty.\n *\n * @return     mixed   Returns the resulting value.\n *\n *                     If the array is empty and initial is not passed,\n *                     array_reduce() returns NULL.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "initial", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_reverse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-reverse.php )\n *\n * Takes an input array and returns a new array with the order of the\n * elements reversed.\n *\n * @array      mixed   The input array.\n * @preserve_keys\n *             bool    If set to TRUE keys are preserved.\n *\n * @return     mixed   Returns the reversed array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "preserve_keys", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_search", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-search.php )\n *\n * Searches haystack for needle.\n *\n * @needle     mixed   The searched value.\n *\n *                     If needle is a string, the comparison is done in a\n *                     case-sensitive manner.\n * @haystack   mixed   The array.\n * @strict     bool    If the third parameter strict is set to TRUE then\n *                     the array_search() function will search for\n *                     identical elements in the haystack. This means it\n *                     will also check the types of the needle in the\n *                     haystack, and objects must be the same instance.\n *\n * @return     mixed   Returns the key for needle if it is found in the\n *                     array, FALSE otherwise.\n *\n *                     If needle is found in haystack more than once, the\n *                     first matching key is returned. To return the keys\n *                     for all matching values, use array_keys() with the\n *                     optional search_value parameter instead. WarningThis\n *                     function may return Boolean FALSE, but may also\n *                     return a non-Boolean value which evaluates to FALSE,\n *                     such as 0 or \"\". Please read the section on Booleans\n *                     for more information. Use the === operator for\n *                     testing the return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "haystack", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strict", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_shift", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-shift.php )\n *\n * array_shift() shifts the first value of the array off and returns it,\n * shortening the array by one element and moving everything down. All\n * numerical array keys will be modified to start counting from zero while\n * literal keys won't be touched. This function will reset() the array\n * pointer after use.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the shifted value, or NULL if array is empty\n *                     or is not an array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-slice.php )\n *\n * array_slice() returns the sequence of elements from the array array as\n * specified by the offset and length parameters. This function will\n * reset() the array pointer after use.\n *\n * @array      mixed   The input array.\n * @offset     int     If offset is non-negative, the sequence will start\n *                     at that offset in the array. If offset is negative,\n *                     the sequence will start that far from the end of the\n *                     array.\n * @length     mixed   If length is given and is positive, then the\n *                     sequence will have that many elements in it. If\n *                     length is given and is negative then the sequence\n *                     will stop that many elements from the end of the\n *                     array. If it is omitted, then the sequence will have\n *                     everything from offset up until the end of the\n *                     array.\n * @preserve_keys\n *             bool    Note that array_slice() will reorder and reset the\n *                     array indices by default. You can change this\n *                     behaviour by setting preserve_keys to TRUE.\n *\n * @return     mixed   Returns the slice.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "preserve_keys", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_splice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-splice.php )\n *\n * Removes the elements designated by offset and length from the input\n * array, and replaces them with the elements of the replacement array, if\n * supplied.\n *\n * Note that numeric keys in input are not preserved. If replacement is\n * not an array, it will be typecast to one (i.e. (array) $parameter). This\n * may result in unexpected behavior when using an object or NULL\n * replacement.\n *\n * @input      mixed   The input array.\n * @offset     int     If offset is positive then the start of removed\n *                     portion is at that offset from the beginning of the\n *                     input array. If offset is negative then it starts\n *                     that far from the end of the input array.\n * @length     mixed   If length is omitted, removes everything from offset\n *                     to the end of the array. If length is specified and\n *                     is positive, then that many elements will be\n *                     removed. If length is specified and is negative then\n *                     the end of the removed portion will be that many\n *                     elements from the end of the array. Tip: to remove\n *                     everything from offset to the end of the array when\n *                     replacement is also specified, use count($input) for\n *                     length.\n * @replacement\n *             mixed   If replacement array is specified, then the removed\n *                     elements are replaced with elements from this array.\n *\n *                     If offset and length are such that nothing is\n *                     removed, then the elements from the replacement\n *                     array are inserted in the place specified by the\n *                     offset. Note that keys in replacement array are not\n *                     preserved.\n *\n *                     If replacement is just one element it is not\n *                     necessary to put array() around it, unless the\n *                     element is an array itself, an object or NULL.\n *\n * @return     mixed   Returns the array consisting of the extracted\n *                     elements.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_sum", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-sum.php )\n *\n * array_sum() returns the sum of values in an array.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the sum of values as an integer or float.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_unique", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-unique.php )\n *\n * Takes an input array and returns a new array without duplicate values.\n *\n * Note that keys are preserved. array_unique() sorts the values treated\n * as string at first, then will keep the first key encountered for every\n * value, and ignore all following keys. It does not mean that the key of\n * the first related value from the unsorted array will be kept. Two\n * elements are considered equal if and only if (string) $elem1 ===\n * (string) $elem2. In words: when the string representation is the same.\n * The first element will be used.\n *\n * @array      mixed   The input array.\n * @sort_flags int     The optional second parameter sort_flags may be used\n *                     to modify the sorting behavior using these values:\n *\n *                     Sorting type flags: SORT_REGULAR - compare items\n *                     normally (don't change types) SORT_NUMERIC - compare\n *                     items numerically SORT_STRING - compare items as\n *                     strings SORT_LOCALE_STRING - compare items as\n *                     strings, based on the current locale.\n *\n * @return     mixed   Returns the filtered array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "2", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_unshift", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-unshift.php )\n *\n * array_unshift() prepends passed elements to the front of the array.\n * Note that the list of elements is prepended as a whole, so that the\n * prepended elements stay in the same order. All numerical array keys will\n * be modified to start counting from zero while literal keys won't be\n * touched.\n *\n * @array      mixed   The input array.\n * @var        mixed   The prepended variable.\n *\n * @return     int     Returns the new number of elements in the array.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "array_values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-values.php )\n *\n * array_values() returns all the values from the input array and indexes\n * numerically the array.\n *\n * @input      mixed   The array.\n *\n * @return     mixed   Returns an indexed array of values.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_walk_recursive", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-walk-recursive.php )\n *\n * Applies the user-defined function funcname to each element of the input\n * array. This function will recur into deeper arrays.\n *\n * @input      mixed   The input array.\n * @funcname   mixed   Typically, funcname takes on two parameters. The\n *                     input parameter's value being the first, and the\n *                     key/index second.\n *\n *                     If funcname needs to be working with the actual\n *                     values of the array, specify the first parameter of\n *                     funcname as a reference. Then, any changes made to\n *                     those elements will be made in the original array\n *                     itself.\n * @userdata   mixed   If the optional userdata parameter is supplied, it\n *                     will be passed as the third parameter to the\n *                     callback funcname.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "funcname", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "userdata", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "array_walk", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-walk.php )\n *\n *\n * @input      mixed   The input array.\n * @funcname   mixed   Typically, funcname takes on two parameters. The\n *                     array parameter's value being the first, and the\n *                     key/index second.\n *\n *                     If funcname needs to be working with the actual\n *                     values of the array, specify the first parameter of\n *                     funcname as a reference. Then, any changes made to\n *                     those elements will be made in the original array\n *                     itself.\n *\n *                     Users may not change the array itself from the\n *                     callback function. e.g. Add/delete elements, unset\n *                     elements, etc. If the array that array_walk() is\n *                     applied to is changed, the behavior of this function\n *                     is undefined, and unpredictable.\n * @userdata   mixed   If the optional userdata parameter is supplied, it\n *                     will be passed as the third parameter to the\n *                     callback funcname.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "input", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "funcname", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "userdata", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "compact", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.compact.php )\n *\n * Creates an array containing variables and their values.\n *\n * For each of these, compact() looks for a variable with that name in the\n * current symbol table and adds it to the output array such that the\n * variable name becomes the key and the contents of the variable become\n * the value for that key. In short, it does the opposite of extract().\n *\n * Any strings that are not set will simply be skipped.\n *\n * @varname    mixed   compact() takes a variable number of parameters.\n *                     Each parameter can be either a string containing the\n *                     name of the variable, or an array of variable names.\n *                     The array can contain other arrays of variable names\n *                     inside it; compact() handles it recursively.\n *\n * @return     map     Returns the output array with all the variables\n *                     added to it.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "varname", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shuffle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.shuffle.php )\n *\n * This function shuffles (randomizes the order of the elements in) an\n * array.\n *\n * @array      mixed   The array.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.count.php )\n *\n * Counts all elements in an array, or properties in an object.\n *\n * For objects, if you have SPL installed, you can hook into count() by\n * implementing interface Countable. The interface has exactly one method,\n * count(), which returns the return value for the count() function.\n *\n * Please see the Array section of the manual for a detailed explanation\n * of how arrays are implemented and used in PHP.\n *\n * @var        mixed   The array.\n * @recursive  bool    If the optional mode parameter is set to\n *                     COUNT_RECURSIVE (or 1), count() will recursively\n *                     count the array. This is particularly useful for\n *                     counting all the elements of a multidimensional\n *                     array. count() does not detect infinite recursion.\n *\n * @return     int     Returns the number of elements in var, which is\n *                     typically an array, since anything else will have\n *                     one element.\n *\n *                     If var is not an array or an object with\n *                     implemented Countable interface, 1 will be returned.\n *                     There is one exception, if var is NULL, 0 will be\n *                     returned. Caution\n *\n *                     count() may return 0 for a variable that isn't set,\n *                     but it may also return 0 for a variable that has\n *                     been initialized with an empty array. Use isset() to\n *                     test if a variable is set.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "recursive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "sizeof", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sizeof.php )\n *\n *\n * @var        mixed\n * @recursive  bool\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "recursive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "each", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.each.php )\n *\n * Return the current key and value pair from an array and advance the\n * array cursor.\n *\n * After each() has executed, the array cursor will be left on the next\n * element of the array, or past the last element if it hits the end of the\n * array. You have to use reset() if you want to traverse the array again\n * using each.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the current key and value pair from the\n *                     array array. This pair is returned in a four-element\n *                     array, with the keys 0, 1, key, and value. Elements\n *                     0 and key contain the key name of the array element,\n *                     and 1 and value contain the data.\n *\n *                     If the internal pointer for the array points past\n *                     the end of the array contents, each() returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.current.php )\n *\n * Every array has an internal pointer to its \"current\" element, which is\n * initialized to the first element inserted into the array.\n *\n * @array      mixed   The array.\n *\n * @return     mixed   The current() function simply returns the value of\n *                     the array element that's currently being pointed to\n *                     by the internal pointer. It does not move the\n *                     pointer in any way. If the internal pointer points\n *                     beyond the end of the elements list or the array is\n *                     empty, current() returns FALSE. WarningThis function\n *                     may return Boolean FALSE, but may also return a\n *                     non-Boolean value which evaluates to FALSE, such as\n *                     0 or \"\". Please read the section on Booleans for\n *                     more information. Use the === operator for testing\n *                     the return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.next.php )\n *\n * next() behaves like current(), with one difference. It advances the\n * internal array pointer one place forward before returning the element\n * value. That means it returns the next array value and advances the\n * internal array pointer by one.\n *\n * @array      mixed   The array being affected.\n *\n * @return     mixed   Returns the array value in the next place that's\n *                     pointed to by the internal array pointer, or FALSE\n *                     if there are no more elements. WarningThis function\n *                     may return Boolean FALSE, but may also return a\n *                     non-Boolean value which evaluates to FALSE, such as\n *                     0 or \"\". Please read the section on Booleans for\n *                     more information. Use the === operator for testing\n *                     the return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pos.php )\n *\n *\n * @array      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "prev", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.prev.php )\n *\n * Rewind the internal array pointer.\n *\n * prev() behaves just like next(), except it rewinds the internal array\n * pointer one place instead of advancing it.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the array value in the previous place that's\n *                     pointed to by the internal array pointer, or FALSE\n *                     if there are no more elements.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "reset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.reset.php )\n *\n * reset() rewinds array's internal pointer to the first element and\n * returns the value of the first array element.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the value of the first array element, or\n *                     FALSE if the array is empty.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "end", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.end.php )\n *\n * end() advances array's internal pointer to the last element, and\n * returns its value.\n *\n * @array      mixed   The array. This array is passed by reference because\n *                     it is modified by the function. This means you must\n *                     pass it a real variable and not a function returning\n *                     an array because only actual variables may be passed\n *                     by reference.\n *\n * @return     mixed   Returns the value of the last element or FALSE for\n *                     empty array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.key.php )\n *\n * key() returns the index element of the current array position.\n *\n * @array      mixed   The array.\n *\n * @return     mixed   The key() function simply returns the key of the\n *                     array element that's currently being pointed to by\n *                     the internal pointer. It does not move the pointer\n *                     in any way. If the internal pointer points beyond\n *                     the end of the elements list or the array is empty,\n *                     key() returns NULL.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "in_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.in-array.php )\n *\n * Searches haystack for needle.\n *\n * @needle     mixed   The searched value.\n *\n *                     If needle is a string, the comparison is done in a\n *                     case-sensitive manner.\n * @haystack   mixed   The array.\n * @strict     bool    If the third parameter strict is set to TRUE then\n *                     the in_array() function will also check the types of\n *                     the needle in the haystack.\n *\n * @return     bool    Returns TRUE if needle is found in the array, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "haystack", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "strict", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "range", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.range.php )\n *\n * Create an array containing a range of elements.\n *\n * @low        mixed   Low value.\n * @high       mixed   High value.\n * @step       mixed   If a step value is given, it will be used as the\n *                     increment between elements in the sequence. step\n *                     should be given as a positive number. If not\n *                     specified, step will default to 1.\n *\n * @return     mixed   Returns an array of elements from low to high,\n *                     inclusive. If low > high, the sequence will be from\n *                     high to low.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "low", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "high", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "step", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_diff", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff.php )\n *\n * Compares array1 against array2 and returns the difference.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_udiff", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-udiff.php )\n *\n * Computes the difference of arrays by using a callback function for data\n * comparison. This is unlike array_diff() which uses an internal function\n * for comparing the data.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are not present in any of the other arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_diff_assoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-assoc.php )\n *\n * Compares array1 against array2 and returns the difference. Unlike\n * array_diff() the array keys are used in the comparison.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n *\n * @return     mixed   Returns an array containing all the values from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_diff_uassoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-uassoc.php )\n *\n * Compares array1 against array2 and returns the difference. Unlike\n * array_diff() the array keys are used in the comparison.\n *\n * Unlike array_diff_assoc() an user supplied callback function is used\n * for the indices comparison, not internal function.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n * @key_compare_func\n *             mixed   More arrays to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_udiff_assoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-udiff-assoc.php )\n *\n * Computes the difference of arrays with additional index check, compares\n * data by a callback function. Please note that this function only checks\n * one dimension of a n-dimensional array. Of course you can check deeper\n * dimensions by using, for example, array_udiff_assoc($array1[0],\n * $array2[0], \"some_comparison_func\");.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n * @return     mixed   array_udiff_assoc() returns an array containing all\n *                     the values from array1 that are not present in any\n *                     of the other arguments. Note that the keys are used\n *                     in the comparison unlike array_diff() and\n *                     array_udiff(). The comparison of arrays' data is\n *                     performed by using an user-supplied callback. In\n *                     this aspect the behaviour is opposite to the\n *                     behaviour of array_diff_assoc() which uses internal\n *                     function for comparison.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_udiff_uassoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-udiff-uassoc.php\n * )\n *\n * Computes the difference of arrays with additional index check, compares\n * data and indexes by a callback function.\n *\n * Note that the keys are used in the comparison unlike array_diff() and\n * array_udiff().\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n *                     The comparison of arrays' data is performed by\n *                     using an user-supplied callback : data_compare_func.\n *                     In this aspect the behaviour is opposite to the\n *                     behaviour of array_diff_assoc() which uses internal\n *                     function for comparison.\n * @key_compare_func\n *             mixed   The comparison of keys (indices) is done also by the\n *                     callback function key_compare_func. This behaviour\n *                     is unlike what array_udiff_assoc() does, since the\n *                     latter compares the indices by using an internal\n *                     function.\n *\n * @return     mixed   Returns an array containing all the values from\n *                     array1 that are not present in any of the other\n *                     arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_diff_key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-key.php )\n *\n * Compares the keys from array1 against the keys from array2 and returns\n * the difference. This function is like array_diff() except the comparison\n * is done on the keys instead of the values.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 whose keys are not present in any of the\n *                     other arrays.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_diff_ukey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-ukey.php )\n *\n * Compares the keys from array1 against the keys from array2 and returns\n * the difference. This function is like array_diff() except the comparison\n * is done on the keys instead of the values.\n *\n * Unlike array_diff_key() an user supplied callback function is used for\n * the indices comparison, not internal function.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n * @key_compare_func\n *             mixed   More arrays to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_intersect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-intersect.php )\n *\n * array_intersect() returns an array containing all the values of array1\n * that are present in all the arguments. Note that keys are preserved.\n *\n * @array1     mixed   The array with master values to check.\n * @array2     mixed   An array to compare values against.\n *\n * @return     mixed   Returns an array containing all of the values in\n *                     array1 whose values exist in all of the parameters.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_uintersect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-uintersect.php )\n *\n * Computes the intersection of arrays, compares data by a callback\n * function.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are present in all the arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_intersect_assoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-intersect-assoc.php )\n *\n *\n * @array1     mixed   The array with master values to check.\n * @array2     mixed   An array to compare values against.\n *\n * @return     mixed   Returns an associative array containing all the\n *                     values in array1 that are present in all of the\n *                     arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_intersect_uassoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-intersect-uassoc.php )\n *\n * array_intersect_uassoc() returns an array containing all the values of\n * array1 that are present in all the arguments. Note that the keys are\n * used in the comparison unlike in array_intersect().\n *\n * The index comparison is done by a user supplied callback function. It\n * must return an integer less than, equal to, or greater than zero if the\n * first argument is considered to be respectively less than, equal to, or\n * greater than the second.\n *\n * @array1     mixed   Initial array for comparison of the arrays.\n * @array2     mixed   First array to compare keys against.\n * @key_compare_func\n *             mixed   Variable list of array arguments to compare values\n *                     against.\n *\n * @return     mixed   Returns the values of array1 whose values exist in\n *                     all of the arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_uintersect_assoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-uintersect-assoc.php )\n *\n * Computes the intersection of arrays with additional index check,\n * compares data by a callback function.\n *\n * Note that the keys are used in the comparison unlike in\n * array_uintersect(). The data is compared by using a callback function.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   For comparison is used the user supplied callback\n *                     function. It must return an integer less than, equal\n *                     to, or greater than zero if the first argument is\n *                     considered to be respectively less than, equal to,\n *                     or greater than the second.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are present in all the arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_uintersect_uassoc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-uintersect-uassoc.php )\n *\n * Computes the intersection of arrays with additional index check,\n * compares data and indexes by a callback functions Note that the keys are\n * used in the comparison unlike in array_uintersect(). Both the data and\n * the indexes are compared by using separate callback functions.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   For comparison is used the user supplied callback\n *                     function. It must return an integer less than, equal\n *                     to, or greater than zero if the first argument is\n *                     considered to be respectively less than, equal to,\n *                     or greater than the second.\n * @key_compare_func\n *             mixed   Key comparison callback function.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are present in all the arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "array_intersect_key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.array-intersect-key.php\n * )\n *\n * array_intersect_key() returns an array containing all the entries of\n * array1 which have keys that are present in all the arguments.\n *\n * @array1     mixed   The array with master keys to check.\n * @array2     mixed   An array to compare keys against.\n *\n * @return     mixed   Returns an associative array containing all the\n *                     entries of array1 which have keys that are present\n *                     in all arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "array_intersect_ukey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-intersect-ukey.php )\n *\n * array_intersect_ukey() returns an array containing all the values of\n * array1 which have matching keys that are present in all the arguments.\n *\n * This comparison is done by a user supplied callback function. It must\n * return an integer less than, equal to, or greater than zero if the first\n * key is considered to be respectively less than, equal to, or greater\n * than the second.\n *\n * @array1     mixed   Initial array for comparison of the arrays.\n * @array2     mixed   First array to compare keys against.\n * @key_compare_func\n *             mixed   Variable list of array arguments to compare keys\n *                     against.\n *\n * @return     mixed   Returns the values of array1 whose keys exist in all\n *                     the arguments.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "array1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "array2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key_compare_func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sort.php )\n *\n * This function sorts an array. Elements will be arranged from lowest to\n * highest when this function has completed.\n *\n * @array      mixed   The input array.\n * @sort_flags int     The optional second parameter sort_flags may be used\n *                     to modify the sorting behavior using these values:\n *\n *                     Sorting type flags: SORT_REGULAR - compare items\n *                     normally (don't change types) SORT_NUMERIC - compare\n *                     items numerically SORT_STRING - compare items as\n *                     strings SORT_LOCALE_STRING - compare items as\n *                     strings, based on the current locale. Added in PHP\n *                     4.4.0 and 5.0.2, it uses the system locale, which\n *                     can be changed using setlocale().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "use_collator", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rsort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rsort.php )\n *\n * This function sorts an array in reverse order (highest to lowest).\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "use_collator", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.asort.php )\n *\n * This function sorts an array such that array indices maintain their\n * correlation with the array elements they are associated with. This is\n * used mainly when sorting associative arrays where the actual element\n * order is significant.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "use_collator", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "arsort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.arsort.php )\n *\n * This function sorts an array such that array indices maintain their\n * correlation with the array elements they are associated with.\n *\n * This is used mainly when sorting associative arrays where the actual\n * element order is significant.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "use_collator", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ksort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ksort.php )\n *\n * Sorts an array by key, maintaining key to data correlations. This is\n * useful mainly for associative arrays.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "krsort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.krsort.php )\n *\n * Sorts an array by key in reverse order, maintaining key to data\n * correlations. This is useful mainly for associative arrays.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "usort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.usort.php )\n *\n * This function will sort an array by its values using a user-supplied\n * comparison function. If the array you wish to sort needs to be sorted by\n * some non-trivial criteria, you should use this function.\n *\n * If two members compare as equal, their order in the sorted array is\n * undefined. This function assigns new keys to the elements in array. It\n * will remove any existing keys that may have been assigned, rather than\n * just reordering the keys.\n *\n * @array      mixed   The input array.\n * @cmp_function\n *             mixed   The comparison function must return an integer less\n *                     than, equal to, or greater than zero if the first\n *                     argument is considered to be respectively less than,\n *                     equal to, or greater than the second.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cmp_function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "uasort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.uasort.php )\n *\n * This function sorts an array such that array indices maintain their\n * correlation with the array elements they are associated with, using a\n * user-defined comparison function.\n *\n * This is used mainly when sorting associative arrays where the actual\n * element order is significant.\n *\n * @array      mixed   The input array.\n * @cmp_function\n *             mixed   See usort() and uksort() for examples of\n *                     user-defined comparison functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cmp_function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "uksort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.uksort.php )\n *\n * uksort() will sort the keys of an array using a user-supplied\n * comparison function. If the array you wish to sort needs to be sorted by\n * some non-trivial criteria, you should use this function.\n *\n * @array      mixed   The input array.\n * @cmp_function\n *             mixed   The callback comparison function.\n *\n *                     Function cmp_function should accept two parameters\n *                     which will be filled by pairs of array keys. The\n *                     comparison function must return an integer less\n *                     than, equal to, or greater than zero if the first\n *                     argument is considered to be respectively less than,\n *                     equal to, or greater than the second.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cmp_function", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "natsort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.natsort.php )\n *\n * This function implements a sort algorithm that orders alphanumeric\n * strings in the way a human being would while maintaining key/value\n * associations. This is described as a \"natural ordering\". An example of\n * the difference between this algorithm and the regular computer string\n * sorting algorithms (used in sort()) can be seen in the example below.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "natcasesort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.natcasesort.php )\n *\n * natcasesort() is a case insensitive version of natsort().\n *\n * This function implements a sort algorithm that orders alphanumeric\n * strings in the way a human being would while maintaining key/value\n * associations. This is described as a \"natural ordering\".\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "array", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "i18n_loc_get_default", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-get-default.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "i18n_loc_set_default", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-set-default.php )\n *\n *\n * @locale     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "locale", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "i18n_loc_set_attribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-set-attribute.php )\n *\n *\n * @attr       int\n * @val        int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "attr", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "val", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "i18n_loc_set_strength", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-set-strength.php )\n *\n *\n * @strength   int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "strength", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "i18n_loc_get_error_code", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-get-error-code.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_bool", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-bool.php )\n *\n * Finds whether the given variable is a boolean.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a boolean, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_int", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-int.php )\n *\n * Finds whether the type of the given variable is integer.\n *\n * To test if a variable is a number or a numeric string (such as form\n * input, which is always a string), you must use is_numeric().\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is an integer, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_integer", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-integer.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_long", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-long.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_double", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-double.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_float", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-float.php )\n *\n * Finds whether the type of the given variable is float.\n *\n * To test if a variable is a number or a numeric string (such as form\n * input, which is always a string), you must use is_numeric().\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a float, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_numeric", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-numeric.php )\n *\n * Finds whether the given variable is numeric. Numeric strings consist of\n * optional sign, any number of digits, optional decimal part and optional\n * exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal\n * notation (0xFF) is allowed too but only without sign, decimal and\n * exponential part.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a number or a numeric string,\n *                     FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_real", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-real.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-string.php )\n *\n * Finds whether the type given variable is string.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is of type string, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_scalar", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-scalar.php )\n *\n * Finds whether the given variable is a scalar.\n *\n * Scalar variables are those containing an integer, float, string or\n * boolean. Types array, object and resource are not scalar.\n *\n * is_scalar() does not consider resource type values to be scalar as\n * resources are abstract datatypes which are currently based on integers.\n * This implementation detail should not be relied upon, as it may change.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a scalar FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-array.php )\n *\n * Finds whether the given variable is an array.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is an array, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_object", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-object.php )\n *\n * Finds whether the given variable is an object.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is an object, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_resource", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-resource.php )\n *\n * Finds whether the given variable is a resource.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a resource, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10706040, "is_null", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.is-null.php )\n *\n * Finds whether the given variable is NULL.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is null, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gettype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gettype.php )\n *\n * Returns the type of the PHP variable var. Warning Never use gettype()\n * to test for a certain type, since the returned string may be subject to\n * change in a future version. In addition, it is slow too, as it involves\n * string comparison. Instead, use the is_* functions.\n *\n * @v          mixed   The variable being type checked.\n *\n * @return     string  Possibles values for the returned string are:\n *                     \"boolean\" \"integer\" \"double\" (for historical reasons\n *                     \"double\" is returned in case of a float, and not\n *                     simply \"float\") \"string\" \"array\" \"object\" \"resource\"\n *                     \"NULL\" \"unknown type\"\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_resource_type", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-resource-type.php )\n *\n * This function gets the type of the given resource.\n *\n * @handle     resource\n *                     The evaluated resource handle.\n *\n * @return     string  If the given handle is a resource, this function\n *                     will return a string representing its type. If the\n *                     type is not identified by this function, the return\n *                     value will be the string Unknown.\n *\n *                     This function will return FALSE and generate an\n *                     error if handle is not a resource.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10506040, "intval", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.intval.php )\n *\n * Returns the integer value of var, using the specified base for the\n * conversion (the default is base 10). intval() should not be used on\n * objects, as doing so will emit an E_NOTICE level error and return 1.\n *\n * @v          mixed   The scalar value being converted to an integer\n * @base       int     The base for the conversion\n *\n * @return     int     The integer value of var on success, or 0 on\n *                     failure. Empty arrays and objects return 0,\n *                     non-empty arrays and objects return 1.\n *\n *                     The maximum value depends on the system. 32 bit\n *                     systems have a maximum signed integer range of\n *                     -2147483648 to 2147483647. So for example on such a\n *                     system, intval('1000000000000') will return\n *                     2147483647. The maximum signed integer value for 64\n *                     bit systems is 9223372036854775807.\n *\n *                     Strings will most likely return 0 although this\n *                     depends on the leftmost characters of the string.\n *                     The common rules of integer casting apply.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "base", "", (const char *)0xa /* KindOfInt64 */, "i:10;", (const char *)5, "10", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10506040, "doubleval", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.doubleval.php )\n *\n *\n * @v          mixed\n *\n * @return     float\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10506040, "floatval", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.floatval.php )\n *\n * Gets the float value of var.\n *\n * @v          mixed   May be any scalar type. floatval() should not be\n *                     used on objects, as doing so will emit an E_NOTICE\n *                     level error and return 1.\n *\n * @return     float   The float value of the given variable. Empty arrays\n *                     return 0, non-empty arrays return 1.\n */",
  (const char *)0xb /* KindOfDouble */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10506040, "strval", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strval.php )\n *\n *\n * @v          mixed   The variable that is being converted to a string.\n *\n *                     var may be any scalar type or an object that\n *                     implements the __toString method. You cannot use\n *                     strval() on arrays or on objects that do not\n *                     implement the __toString method.\n *\n * @return     string  The string value of var.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "settype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.settype.php )\n *\n * Set the type of variable var to type.\n *\n * @var        mixed   The variable being converted.\n * @type       string  Possibles values of type are: \"boolean\" (or, since\n *                     PHP 4.2.0, \"bool\") \"integer\" (or, since PHP 4.2.0,\n *                     \"int\") \"float\" (only possible since PHP 4.2.0, for\n *                     older versions use the deprecated variant \"double\")\n *                     \"string\" \"array\" \"object\" \"null\" (since PHP 4.2.0)\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "print_r", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.print-r.php )\n *\n * print_r() displays information about a variable in a way that's\n * readable by humans.\n *\n * print_r(), var_dump() and var_export() will also show protected and\n * private properties of objects with PHP 5. Static class members will not\n * be shown.\n *\n * Remember that print_r() will move the array pointer to the end. Use\n * reset() to bring it back to beginning.\n *\n * @expression mixed   The expression to be printed.\n * @ret        bool    If you would like to capture the output of\n *                     print_r(), use the return parameter. When this\n *                     parameter is set to TRUE, print_r() will return the\n *                     information rather than print it.\n *\n * @return     mixed   If given a string, integer or float, the value\n *                     itself will be printed. If given an array, values\n *                     will be presented in a format that shows keys and\n *                     elements. Similar notation is used for objects.\n *\n *                     When the return parameter is TRUE, this function\n *                     will return a string. Otherwise, the return value is\n *                     TRUE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "expression", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ret", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "var_export", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.var-export.php )\n *\n *\n * @expression mixed   The variable you want to export.\n * @ret        bool    If used and set to TRUE, var_export() will return\n *                     the variable representation instead of outputing it.\n *\n *                     This function uses internal output buffering with\n *                     this parameter so it can not be used inside an\n *                     ob_start() callback function.\n *\n * @return     mixed   Returns the variable representation when the return\n *                     parameter is used and evaluates to TRUE. Otherwise,\n *                     this function will return NULL.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "expression", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ret", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "var_dump", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.var-dump.php )\n *\n *\n * @expression mixed   The variable you want to export.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "expression", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "debug_zval_dump", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.debug-zval-dump.php )\n *\n * Dumps a string representation of an internal zend value to output.\n *\n * @variable   mixed   The variable being evaluated.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "variable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "serialize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.serialize.php )\n *\n * Generates a storable representation of a value\n *\n * This is useful for storing or passing PHP values around without losing\n * their type and structure.\n *\n * To make the serialized string into a PHP value again, use\n * unserialize().\n *\n * @value      mixed   The value to be serialized. serialize() handles all\n *                     types, except the resource-type. You can even\n *                     serialize() arrays that contain references to\n *                     itself. Circular references inside the array/object\n *                     you are serializing will also be stored. Any other\n *                     reference will be lost.\n *\n *                     When serializing objects, PHP will attempt to call\n *                     the member function __sleep prior to serialization.\n *                     This is to allow the object to do any last minute\n *                     clean-up, etc. prior to being serialized. Likewise,\n *                     when the object is restored using unserialize() the\n *                     __wakeup member function is called.\n *\n *                     Object's private members have the class name\n *                     prepended to the member name; protected members have\n *                     a '*' prepended to the member name. These prepended\n *                     values have null bytes on either side.\n *\n * @return     string  Returns a string containing a byte-stream\n *                     representation of value that can be stored anywhere.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "unserialize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.unserialize.php )\n *\n *\n * @str        string  The serialized string.\n *\n *                     If the variable being unserialized is an object,\n *                     after successfully reconstructing the object PHP\n *                     will automatically attempt to call the __wakeup()\n *                     member function (if it exists).\n *\n *                     unserialize_callback_func directive\n *\n *                     It's possible to set a callback-function which will\n *                     be called, if an undefined class should be\n *                     instantiated during unserializing. (to prevent\n *                     getting an incomplete object\n *                     \"__PHP_Incomplete_Class\".) Use your php.ini,\n *                     ini_set() or .htaccess to define\n *                     'unserialize_callback_func'. Everytime an undefined\n *                     class should be instantiated, it'll be called. To\n *                     disable this feature just empty this setting.\n * @class_whitelist\n *             vector  The array of the class names that are authorized to\n *                     be unserialized. The array is default to be empty,\n *                     which means no class is allowed. If the class name\n *                     is a super class, all its subclasses are also\n *                     allowed. Note that primitive types and Serializable\n *                     classes are not subject to this whitelist. See\n *                     http://fburl.com/SafeSerializable for the reason why\n *                     we need this.\n *\n * @return     mixed   The converted value is returned, and can be a\n *                     boolean, integer, float, string, array or object.\n *\n *                     In case the passed string is not unserializeable,\n *                     FALSE is returned and E_NOTICE is issued.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "class_whitelist", "", (const char *)0x20 /* KindOfArray */, "a:0:{}", (const char *)6, "empty_array", (const char *)11, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_defined_vars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.get-defined-vars.php )\n *\n * This function returns a multidimensional array containing a list of all\n * defined variables, be them environment, server or user-defined\n * variables, within the scope that get_defined_vars() is called.\n *\n * @return     map     A multidimensional array with all the variables.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "import_request_variables", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.import-request-variables.php )\n *\n * Imports GET/POST/Cookie variables into the global scope. It is useful\n * if you disabled register_globals, but would like to see some variables\n * in the global scope.\n *\n * If you're interested in importing other variables into the global\n * scope, such as $_SERVER, consider using extract().\n *\n * @types      string  Using the types parameter, you can specify which\n *                     request variables to import. You can use 'G', 'P'\n *                     and 'C' characters respectively for GET, POST and\n *                     Cookie. These characters are not case sensitive, so\n *                     you can also use any combination of 'g', 'p' and\n *                     'c'. POST includes the POST uploaded file\n *                     information.\n *\n *                     Note that the order of the letters matters, as when\n *                     using \"GP\", the POST variables will overwrite GET\n *                     variables with the same name. Any other letters than\n *                     GPC are discarded.\n * @prefix     string  Variable name prefix, prepended before all\n *                     variable's name imported into the global scope. So\n *                     if you have a GET value named \"userid\", and provide\n *                     a prefix \"pref_\", then you'll get a global variable\n *                     named $pref_userid.\n *\n *                     Although the prefix parameter is optional, you will\n *                     get an E_NOTICE level error if you specify no\n *                     prefix, or specify an empty string as a prefix. This\n *                     is a possible security hazard. Notice level errors\n *                     are not displayed using the default error reporting\n *                     level.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "types", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "extract", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.extract.php )\n *\n * Import variables from an array into the current symbol table.\n *\n * Checks each key to see whether it has a valid variable name. It also\n * checks for collisions with existing variables in the symbol table.\n *\n * @var_array  map     An associative array. This function treats keys as\n *                     variable names and values as variable values. For\n *                     each key/value pair it will create a variable in the\n *                     current symbol table, subject to extract_type and\n *                     prefix parameters.\n *\n *                     You must use an associative array; a numerically\n *                     indexed array will not produce results unless you\n *                     use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.\n * @extract_type\n *             int     The way invalid/numeric keys and collisions are\n *                     treated is determined by the extract_type. It can be\n *                     one of the following values: EXTR_OVERWRITE If there\n *                     is a collision, overwrite the existing variable.\n * @prefix     string  If there is a collision, don't overwrite the\n *                     existing variable.\n *\n * @return     int     Returns the number of variables successfully\n *                     imported into the symbol table.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "var_array", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "extract_type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "EXTR_OVERWRITE", (const char *)14, NULL,
  (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-create.php )\n *\n * Creates and returns a socket resource, also referred to as an endpoint\n * of communication. A typical network connection is made up of 2 sockets,\n * one performing the role of the client, and another performing the role\n * of the server.\n *\n * @domain     int     The domain parameter specifies the protocol family\n *                     to be used by the socket. Available address/protocol\n *                     families Domain Description AF_INET IPv4 Internet\n *                     based protocols. TCP and UDP are common protocols of\n *                     this protocol family. AF_INET6 IPv6 Internet based\n *                     protocols. TCP and UDP are common protocols of this\n *                     protocol family. AF_UNIX Local communication\n *                     protocol family. High efficiency and low overhead\n *                     make it a great form of IPC (Interprocess\n *                     Communication).\n * @type       int     The type parameter selects the type of communication\n *                     to be used by the socket. Available socket types\n *                     Type Description SOCK_STREAM Provides sequenced,\n *                     reliable, full-duplex, connection-based byte\n *                     streams. An out-of-band data transmission mechanism\n *                     may be supported. The TCP protocol is based on this\n *                     socket type. SOCK_DGRAM Supports datagrams\n *                     (connectionless, unreliable messages of a fixed\n *                     maximum length). The UDP protocol is based on this\n *                     socket type. SOCK_SEQPACKET Provides a sequenced,\n *                     reliable, two-way connection-based data transmission\n *                     path for datagrams of fixed maximum length; a\n *                     consumer is required to read an entire packet with\n *                     each read call. SOCK_RAW Provides raw network\n *                     protocol access. This special type of socket can be\n *                     used to manually construct any type of protocol. A\n *                     common use for this socket type is to perform ICMP\n *                     requests (like ping). SOCK_RDM Provides a reliable\n *                     datagram layer that does not guarantee ordering.\n *                     This is most likely not implemented on your\n *                     operating system.\n * @protocol   int     The protocol parameter sets the specific protocol\n *                     within the specified domain to be used when\n *                     communicating on the returned socket. The proper\n *                     value can be retrieved by name by using\n *                     getprotobyname(). If the desired protocol is TCP, or\n *                     UDP the corresponding constants SOL_TCP, and SOL_UDP\n *                     can also be used. Common protocols Name Description\n *                     icmp The Internet Control Message Protocol is used\n *                     primarily by gateways and hosts to report errors in\n *                     datagram communication. The \"ping\" command (present\n *                     in most modern operating systems) is an example\n *                     application of ICMP. udp The User Datagram Protocol\n *                     is a connectionless, unreliable, protocol with fixed\n *                     record lengths. Due to these aspects, UDP requires a\n *                     minimum amount of protocol overhead. tcp The\n *                     Transmission Control Protocol is a reliable,\n *                     connection based, stream oriented, full duplex\n *                     protocol. TCP guarantees that all data packets will\n *                     be received in the order in which they were sent. If\n *                     any packet is somehow lost during communication, TCP\n *                     will automatically retransmit the packet until the\n *                     destination host acknowledges that packet. For\n *                     reliability and performance reasons, the TCP\n *                     implementation itself decides the appropriate octet\n *                     boundaries of the underlying datagram communication\n *                     layer. Therefore, TCP applications must allow for\n *                     the possibility of partial record transmission.\n *\n * @return     mixed   socket_create() returns a socket resource on\n *                     success, or FALSE on error. The actual error code\n *                     can be retrieved by calling socket_last_error().\n *                     This error code may be passed to socket_strerror()\n *                     to get a textual explanation of the error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "domain", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "protocol", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_create_listen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.socket-create-listen.php )\n *\n * socket_create_listen() creates a new socket resource of type AF_INET\n * listening on all local interfaces on the given port waiting for new\n * connections.\n *\n * This function is meant to ease the task of creating a new socket which\n * only listens to accept new connections.\n *\n * @port       int     The port on which to listen on all interfaces.\n * @backlog    int     The backlog parameter defines the maximum length the\n *                     queue of pending connections may grow to. SOMAXCONN\n *                     may be passed as backlog parameter, see\n *                     socket_listen() for more information.\n *\n * @return     mixed   socket_create_listen() returns a new socket resource\n *                     on success or FALSE on error. The error code can be\n *                     retrieved with socket_last_error(). This code may be\n *                     passed to socket_strerror() to get a textual\n *                     explanation of the error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "backlog", "", (const char *)0xa /* KindOfInt64 */, "i:128;", (const char *)6, "128", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_create_pair", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-create-pair.php\n * )\n *\n * socket_create_pair() creates two connected and indistinguishable\n * sockets, and stores them in fd. This function is commonly used in IPC\n * (InterProcess Communication).\n *\n * @domain     int     The domain parameter specifies the protocol family\n *                     to be used by the socket. See socket_create() for\n *                     the full list.\n * @type       int     The type parameter selects the type of communication\n *                     to be used by the socket. See socket_create() for\n *                     the full list.\n * @protocol   int     The protocol parameter sets the specific protocol\n *                     within the specified domain to be used when\n *                     communicating on the returned socket. The proper\n *                     value can be retrieved by name by using\n *                     getprotobyname(). If the desired protocol is TCP, or\n *                     UDP the corresponding constants SOL_TCP, and SOL_UDP\n *                     can also be used.\n *\n *                     See socket_create() for the full list of supported\n *                     protocols.\n * @fd         mixed   Reference to an array in which the two socket\n *                     resources will be inserted.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "domain", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "protocol", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "fd", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_get_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-get-option.php )\n *\n * The socket_get_option() function retrieves the value for the option\n * specified by the optname parameter for the specified socket.\n *\n * @socket     resource\n *\n * @level      int\n * @optname    int\n *\n * @return     mixed   Returns the value of the given option, or FALSE on\n *                     errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "optname", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_getpeername", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-getpeername.php\n * )\n *\n * Queries the remote side of the given socket which may either result in\n * host/port or in a Unix filesystem path, dependent on its type.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @address    mixed   If the given socket is of type AF_INET or AF_INET6,\n *                     socket_getpeername() will return the peers (remote)\n *                     IP address in appropriate notation (e.g. 127.0.0.1\n *                     or fe80::1) in the address parameter and, if the\n *                     optional port parameter is present, also the\n *                     associated port.\n *\n *                     If the given socket is of type AF_UNIX,\n *                     socket_getpeername() will return the Unix filesystem\n *                     path (e.g. /var/run/daemon.sock) in the address\n *                     parameter.\n * @port       mixed   If given, this will hold the port associated to\n *                     address.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *                     socket_getpeername() may also return FALSE if the\n *                     socket type is not any of AF_INET, AF_INET6, or\n *                     AF_UNIX, in which case the last socket error code is\n *                     not updated.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "address", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "port", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_getsockname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-getsockname.php\n * )\n *\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @address    mixed   If the given socket is of type AF_INET or AF_INET6,\n *                     socket_getsockname() will return the local IP\n *                     address in appropriate notation (e.g. 127.0.0.1 or\n *                     fe80::1) in the address parameter and, if the\n *                     optional port parameter is present, also the\n *                     associated port.\n *\n *                     If the given socket is of type AF_UNIX,\n *                     socket_getsockname() will return the Unix filesystem\n *                     path (e.g. /var/run/daemon.sock) in the address\n *                     parameter.\n * @port       mixed   If provided, this will hold the associated port.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *                     socket_getsockname() may also return FALSE if the\n *                     socket type is not any of AF_INET, AF_INET6, or\n *                     AF_UNIX, in which case the last socket error code is\n *                     not updated.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "address", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "port", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_set_block", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-block.php )\n *\n * The socket_set_block() function removes the O_NONBLOCK flag on the\n * socket specified by the socket parameter.\n *\n * When an operation (e.g. receive, send, connect, accept, ...) is\n * performed on a blocking socket, the script will pause its execution\n * until it receives a signal or it can perform the operation.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_set_nonblock", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-nonblock.php\n * )\n *\n * The socket_set_nonblock() function sets the O_NONBLOCK flag on the\n * socket specified by the socket parameter.\n *\n * When an operation (e.g. receive, send, connect, accept, ...) is\n * performed on a non-blocking socket, the script not pause its execution\n * until it receives a signal or it can perform the operation. Rather, if\n * the operation would result in a block, the called function will fail.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_set_option", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-option.php )\n *\n * The socket_set_option() function sets the option specified by the\n * optname parameter, at the specified protocol level, to the value pointed\n * to by the optval parameter for the socket.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @level      int     The level parameter specifies the protocol level at\n *                     which the option resides. For example, to retrieve\n *                     options at the socket level, a level parameter of\n *                     SOL_SOCKET would be used. Other levels, such as TCP,\n *                     can be used by specifying the protocol number of\n *                     that level. Protocol numbers can be found by using\n *                     the getprotobyname() function.\n * @optname    int     The available socket options are the same as those\n *                     for the socket_get_option() function.\n * @optval     mixed   The option value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "optname", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "optval", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_connect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-connect.php )\n *\n * Initiate a connection to address using the socket resource socket,\n * which must be a valid socket resource created with socket_create().\n *\n * @socket     resource\n *\n * @address    string  The address parameter is either an IPv4 address in\n *                     dotted-quad notation (e.g. 127.0.0.1) if socket is\n *                     AF_INET, a valid IPv6 address (e.g. ::1) if IPv6\n *                     support is enabled and socket is AF_INET6 or the\n *                     pathname of a Unix domain socket, if the socket\n *                     family is AF_UNIX.\n * @port       int     The port parameter is only used and is mandatory\n *                     when connecting to an AF_INET or an AF_INET6 socket,\n *                     and designates the port on the remote host to which\n *                     a connection should be made.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     error code can be retrieved with\n *                     socket_last_error(). This code may be passed to\n *                     socket_strerror() to get a textual explanation of\n *                     the error.\n *\n *                     If the socket is non-blocking then this function\n *                     returns FALSE with an error Operation now in\n *                     progress.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_bind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-bind.php )\n *\n * Binds the name given in address to the socket described by socket. This\n * has to be done before a connection is be established using\n * socket_connect() or socket_listen().\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n * @address    string  If the socket is of the AF_INET family, the address\n *                     is an IP in dotted-quad notation (e.g. 127.0.0.1).\n *\n *                     If the socket is of the AF_UNIX family, the address\n *                     is the path of a Unix-domain socket (e.g.\n *                     /tmp/my.sock).\n * @port       int     The port parameter is only used when connecting to\n *                     an AF_INET socket, and designates the port on the\n *                     remote host to which a connection should be made.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     The error code can be retrieved with\n *                     socket_last_error(). This code may be passed to\n *                     socket_strerror() to get a textual explanation of\n *                     the error.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_listen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-listen.php )\n *\n * After the socket socket has been created using socket_create() and\n * bound to a name with socket_bind(), it may be told to listen for\n * incoming connections on socket.\n *\n * socket_listen() is applicable only to sockets of type SOCK_STREAM or\n * SOCK_SEQPACKET.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n * @backlog    int     A maximum of backlog incoming connections will be\n *                     queued for processing. If a connection request\n *                     arrives with the queue full the client may receive\n *                     an error with an indication of ECONNREFUSED, or, if\n *                     the underlying protocol supports retransmission, the\n *                     request may be ignored so that retries may succeed.\n *\n *                     The maximum number passed to the backlog parameter\n *                     highly depends on the underlying platform. On Linux,\n *                     it is silently truncated to SOMAXCONN. On win32, if\n *                     passed SOMAXCONN, the underlying service provider\n *                     responsible for the socket will set the backlog to a\n *                     maximum reasonable value. There is no standard\n *                     provision to find out the actual backlog value on\n *                     this platform.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     error code can be retrieved with\n *                     socket_last_error(). This code may be passed to\n *                     socket_strerror() to get a textual explanation of\n *                     the error.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "backlog", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_select", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-select.php )\n *\n * socket_select() accepts arrays of sockets and waits for them to change\n * status. Those coming with BSD sockets background will recognize that\n * those socket resource arrays are in fact the so-called file descriptor\n * sets. Three independent arrays of socket resources are watched.\n * Warning\n *\n * On exit, the arrays are modified to indicate which socket resource\n * actually changed status.\n *\n * You do not need to pass every array to socket_select(). You can leave\n * it out and use an empty array or NULL instead. Also do not forget that\n * those arrays are passed by reference and will be modified after\n * socket_select() returns.\n *\n * Due a limitation in the current Zend Engine it is not possible to pass\n * a constant modifier like NULL directly as a parameter to a function\n * which expects this parameter to be passed by reference. Instead use a\n * temporary variable or an expression with the leftmost member being a\n * temporary variable: Example #1 Using NULL with socket_select()\n *\n * @read       mixed   The sockets listed in the read array will be watched\n *                     to see if characters become available for reading\n *                     (more precisely, to see if a read will not block -\n *                     in particular, a socket resource is also ready on\n *                     end-of-file, in which case a socket_read() will\n *                     return a zero length string).\n * @write      mixed   The sockets listed in the write array will be\n *                     watched to see if a write will not block.\n * @except     mixed   The sockets listed in the except array will be\n *                     watched for exceptions.\n * @vtv_sec    mixed   The tv_sec and tv_usec together form the timeout\n *                     parameter. The timeout is an upper bound on the\n *                     amount of time elapsed before socket_select()\n *                     return. tv_sec may be zero , causing socket_select()\n *                     to return immediately. This is useful for polling.\n *                     If tv_sec is NULL (no timeout), socket_select() can\n *                     block indefinitely.\n * @tv_usec    int\n *\n * @return     mixed   On success socket_select() returns the number of\n *                     socket resources contained in the modified arrays,\n *                     which may be zero if the timeout expires before\n *                     anything interesting happens. On error FALSE is\n *                     returned. The error code can be retrieved with\n *                     socket_last_error().\n *\n *                     Be sure to use the === operator when checking for\n *                     an error. Since the socket_select() may return 0 the\n *                     comparison with == would evaluate to TRUE: Example\n *                     #2 Understanding socket_select()'s result\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2800, "read", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "write", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "except", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "vtv_sec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tv_usec", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_server", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-server.php )\n *\n *\n * @hostname   string\n * @port       int\n * @errnum     mixed\n * @errstr     mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2800, "errnum", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "errstr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_accept", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-accept.php )\n *\n * After the socket socket has been created using socket_create(), bound\n * to a name with socket_bind(), and told to listen for connections with\n * socket_listen(), this function will accept incoming connections on that\n * socket. Once a successful connection is made, a new socket resource is\n * returned, which may be used for communication. If there are multiple\n * connections queued on the socket, the first will be used. If there are\n * no pending connections, socket_accept() will block until a connection\n * becomes present. If socket has been made non-blocking using\n * socket_set_blocking() or socket_set_nonblock(), FALSE will be returned.\n *\n * The socket resource returned by socket_accept() may not be used to\n * accept new connections. The original listening socket socket, however,\n * remains open and may be reused.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n *\n * @return     mixed   Returns a new socket resource on success, or FALSE\n *                     on error. The actual error code can be retrieved by\n *                     calling socket_last_error(). This error code may be\n *                     passed to socket_strerror() to get a textual\n *                     explanation of the error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_read", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-read.php )\n *\n * The function socket_read() reads from the socket resource socket\n * created by the socket_create() or socket_accept() functions.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @length     int     The maximum number of bytes read is specified by the\n *                     length parameter. Otherwise you can use \\r, \\n, or\n *                     \\0 to end reading (depending on the type parameter,\n *                     see below).\n * @type       int     Optional type parameter is a named constant:\n *                     PHP_BINARY_READ (Default) - use the system recv()\n *                     function. Safe for reading binary data.\n *                     PHP_NORMAL_READ - reading stops at \\n or \\r.\n *\n * @return     mixed   socket_read() returns the data as a string on\n *                     success, or FALSE on error (including if the remote\n *                     host has closed the connection). The error code can\n *                     be retrieved with socket_last_error(). This code may\n *                     be passed to socket_strerror() to get a textual\n *                     representation of the error.\n *\n *                     socket_read() returns a zero length string (\"\")\n *                     when there is no more data to read.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_write", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-write.php )\n *\n * The function socket_write() writes to the socket from the given buffer.\n *\n * @socket     resource\n *\n * @buffer     string  The buffer to be written.\n * @length     int     The optional parameter length can specify an\n *                     alternate length of bytes written to the socket. If\n *                     this length is greater then the buffer length, it is\n *                     silently truncated to the length of the buffer.\n *\n * @return     mixed   Returns the number of bytes successfully written to\n *                     the socket or FALSE on failure. The error code can\n *                     be retrieved with socket_last_error(). This code may\n *                     be passed to socket_strerror() to get a textual\n *                     explanation of the error.\n *\n *                     It is perfectly valid for socket_write() to return\n *                     zero which means no bytes have been written. Be sure\n *                     to use the === operator to check for FALSE in case\n *                     of an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "buffer", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_send", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-send.php )\n *\n * The function socket_send() sends len bytes to the socket socket from\n * buf.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @buf        string  A buffer containing the data that will be sent to\n *                     the remote host.\n * @len        int     The number of bytes that will be sent to the remote\n *                     host from buf.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags MSG_OOB Send OOB\n *                     (out-of-band) data. MSG_EOR Indicate a record mark.\n *                     The sent data completes the record. MSG_EOF Close\n *                     the sender side of the socket and include an\n *                     appropriate notification of this at the end of the\n *                     sent data. The sent data completes the transaction.\n *                     MSG_DONTROUTE Bypass routing, use direct interface.\n *\n * @return     mixed   socket_send() returns the number of bytes sent, or\n *                     FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "buf", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_sendto", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-sendto.php )\n *\n * The function socket_sendto() sends len bytes from buf through the\n * socket socket to the port at the address addr.\n *\n * @socket     resource\n *                     A valid socket resource created using\n *                     socket_create().\n * @buf        string  The sent data will be taken from buffer buf.\n * @len        int     len bytes from buf will be sent.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags MSG_OOB Send OOB\n *                     (out-of-band) data. MSG_EOR Indicate a record mark.\n *                     The sent data completes the record. MSG_EOF Close\n *                     the sender side of the socket and include an\n *                     appropriate notification of this at the end of the\n *                     sent data. The sent data completes the transaction.\n *                     MSG_DONTROUTE Bypass routing, use direct interface.\n * @addr       string  IP address of the remote host.\n * @port       int     port is the remote port number at which the data\n *                     will be sent.\n *\n * @return     mixed   socket_sendto() returns the number of bytes sent to\n *                     the remote host, or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "buf", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "addr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_recv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-recv.php )\n *\n * The socket_recv() function receives len bytes of data in buf from\n * socket. socket_recv() can be used to gather data from connected sockets.\n * Additionally, one or more flags can be specified to modify the behaviour\n * of the function.\n *\n * buf is passed by reference, so it must be specified as a variable in\n * the argument list. Data read from socket by socket_recv() will be\n * returned in buf.\n *\n * @socket     resource\n *                     The socket must be a socket resource previously\n *                     created by socket_create().\n * @buf        mixed   The data received will be fetched to the variable\n *                     specified with buf. If an error occurs, if the\n *                     connection is reset, or if no data is available, buf\n *                     will be set to NULL.\n * @len        int     Up to len bytes will be fetched from remote host.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags Flag Description\n *                     MSG_OOB Process out-of-band data. MSG_PEEK Receive\n *                     data from the beginning of the receive queue without\n *                     removing it from the queue. MSG_WAITALL Block until\n *                     at least len are received. However, if a signal is\n *                     caught or the remote host disconnects, the function\n *                     may return less data. MSG_DONTWAIT With this flag\n *                     set, the function returns even if it would normally\n *                     have blocked.\n *\n * @return     mixed   socket_recv() returns the number of bytes received,\n *                     or FALSE if there was an error. The actual error\n *                     code can be retrieved by calling\n *                     socket_last_error(). This error code may be passed\n *                     to socket_strerror() to get a textual explanation of\n *                     the error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "buf", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_recvfrom", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-recvfrom.php )\n *\n * The socket_recvfrom() function receives len bytes of data in buf from\n * name on port port (if the socket is not of type AF_UNIX) using socket.\n * socket_recvfrom() can be used to gather data from both connected and\n * unconnected sockets. Additionally, one or more flags can be specified to\n * modify the behaviour of the function.\n *\n * The name and port must be passed by reference. If the socket is not\n * connection-oriented, name will be set to the internet protocol address\n * of the remote host or the path to the UNIX socket. If the socket is\n * connection-oriented, name is NULL. Additionally, the port will contain\n * the port of the remote host in the case of an unconnected AF_INET or\n * AF_INET6 socket.\n *\n * @socket     resource\n *                     The socket must be a socket resource previously\n *                     created by socket_create().\n * @buf        mixed   The data received will be fetched to the variable\n *                     specified with buf.\n * @len        int     Up to len bytes will be fetched from remote host.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags Flag Description\n *                     MSG_OOB Process out-of-band data. MSG_PEEK Receive\n *                     data from the beginning of the receive queue without\n *                     removing it from the queue. MSG_WAITALL Block until\n *                     at least len are received. However, if a signal is\n *                     caught or the remote host disconnects, the function\n *                     may return less data. MSG_DONTWAIT With this flag\n *                     set, the function returns even if it would normally\n *                     have blocked.\n * @name       mixed   If the socket is of the type AF_UNIX type, name is\n *                     the path to the file. Else, for unconnected sockets,\n *                     name is the IP address of, the remote host, or NULL\n *                     if the socket is connection-oriented.\n * @port       mixed   This argument only applies to AF_INET and AF_INET6\n *                     sockets, and specifies the remote port from which\n *                     the data is received. If the socket is\n *                     connection-oriented, port will be NULL.\n *\n * @return     mixed   socket_recvfrom() returns the number of bytes\n *                     received, or FALSE if there was an error. The actual\n *                     error code can be retrieved by calling\n *                     socket_last_error(). This error code may be passed\n *                     to socket_strerror() to get a textual explanation of\n *                     the error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "buf", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "port", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_shutdown", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-shutdown.php )\n *\n * The socket_shutdown() function allows you to stop incoming, outgoing or\n * all data (the default) from being sent through the socket\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n * @how        int     The value of how can be one of the following:\n *                     possible values for how 0 Shutdown socket reading 1\n *                     Shutdown socket writing 2 Shutdown socket reading\n *                     and writing\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "how", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-close.php )\n *\n * socket_close() closes the socket resource given by socket. This\n * function is specific to sockets and cannot be used on any other type of\n * resources.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_strerror", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-strerror.php )\n *\n * socket_strerror() takes as its errno parameter a socket error code as\n * returned by socket_last_error() and returns the corresponding\n * explanatory text.\n *\n * Although the error messages generated by the socket extension are in\n * English, the system messages retrieved with this function will appear\n * depending on the current locale (LC_MESSAGES).\n *\n * @errnum     int     A valid socket error number, likely produced by\n *                     socket_last_error().\n *\n * @return     string  Returns the error message associated with the errno\n *                     parameter.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "errnum", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_last_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-last-error.php )\n *\n * If a socket resource is passed to this function, the last error which\n * occurred on this particular socket is returned. If the socket resource\n * is omitted, the error code of the last failed socket function is\n * returned. The latter is particularly helpful for functions like\n * socket_create() which don't return a socket on failure and\n * socket_select() which can fail for reasons not directly tied to a\n * particular socket. The error code is suitable to be fed to\n * socket_strerror() which returns a string describing the given error\n * code.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n *\n * @return     int     This function returns a socket error code.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_clear_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-clear-error.php\n * )\n *\n * This function clears the error code on the given socket or the global\n * last socket error if no socket is specified.\n *\n * This function allows explicitly resetting the error code value either\n * of a socket or of the extension global last error code. This may be\n * useful to detect within a part of the application if an error occurred\n * or not.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "socket", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getaddrinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getaddrinfo.php )\n *\n *\n * @host       string\n * @port       string\n * @family     int\n * @socktype   int\n * @protocol   int\n * @flags      int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "family", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "socktype", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "protocol", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hphp_create_continuation", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.hphp-create-continuation.php )\n *\n *\n * @clsname    string\n * @funcname   string\n * @origFuncName\n *             string\n * @args       map\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "clsname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "funcname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "origFuncName", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator___construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @iterator   resource\n *\n * @mode       int\n * @flags      int\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "iterator", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator_getinneriterator", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator_current", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator_key", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator_next", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator_rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursiveiteratoriterator_valid", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator___construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @path       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_key", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_next", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_seek", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @position   int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "position", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_current", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator___tostring", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_valid", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_directoryiterator_isdot", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator___construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @path       string\n * @flags      int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_key", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_next", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_seek", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n * @position   int\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "position", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_current", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator___tostring", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_valid", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_haschildren", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_getchildren", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     resource\n *\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_getsubpath", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_recursivedirectoryiterator_getsubpathname", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @obj        resource\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asio_get_current_context_idx", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.asio-get-current-context-idx.php )\n *\n * Get index of the current scheduler context, or 0 if there is none\n *\n * @return     int     An index of the current scheduler context\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asio_get_running_in_context", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.asio-get-running-in-context.php )\n *\n * Get currently running wait handle in a context specified by its index\n *\n * @ctx_idx    int     An index of a specified context\n *\n * @return     object  A ContinuationWaitHandle that is running in a\n *                     specified context\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "ctx_idx", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asio_get_running", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.asio-get-running.php )\n *\n * Get currently running wait handle, or null if there is none\n *\n * @return     object  A ContinuationWaitHandle that is running in the\n *                     current context\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asio_set_on_failed_callback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.asio-set-on-failed-callback.php )\n *\n * DEPRECATED: use ContinuationWaitHandle::setOnFailCallback()\n *\n * @on_failed_cb\n *             mixed   A Closure to be called when wait handle fails\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_failed_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asio_set_on_started_callback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.asio-set-on-started-callback.php )\n *\n * DEPRECATED: use ContinuationWaitHandle::setOnCreateCallback()\n *\n * @on_started_cb\n *             mixed   A Closure to be called when wait handle is started\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_started_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_start", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-start.php )\n *\n * This function will turn output buffering on. While output buffering is\n * active no output is sent from the script (other than headers), instead\n * the output is stored in an internal buffer.\n *\n * The contents of this internal buffer may be copied into a string\n * variable using ob_get_contents(). To output what is stored in the\n * internal buffer, use ob_end_flush(). Alternatively, ob_end_clean() will\n * silently discard the buffer contents. Warning\n *\n * Some web servers (e.g. Apache) change the working directory of a script\n * when calling the callback function. You can change it back by e.g.\n * chdir(dirname($_SERVER['SCRIPT_FILENAME'])) in the callback function.\n *\n * Output buffers are stackable, that is, you may call ob_start() while\n * another ob_start() is active. Just make sure that you call\n * ob_end_flush() the appropriate number of times. If multiple output\n * callback functions are active, output is being filtered sequentially\n * through each of them in nesting order.\n *\n * @output_callback\n *             mixed   An optional output_callback function may be\n *                     specified. This function takes a string as a\n *                     parameter and should return a string. The function\n *                     will be called when the output buffer is flushed\n *                     (sent) or cleaned (with ob_flush(), ob_clean() or\n *                     similar function) or when the output buffer is\n *                     flushed to the browser at the end of the request.\n *                     When output_callback is called, it will receive the\n *                     contents of the output buffer as its parameter and\n *                     is expected to return a new output buffer as a\n *                     result, which will be sent to the browser. If the\n *                     output_callback is not a callable function, this\n *                     function will return FALSE.\n *\n *                     If the callback function has two parameters, the\n *                     second parameter is filled with a bit-field\n *                     consisting of PHP_OUTPUT_HANDLER_START,\n *                     PHP_OUTPUT_HANDLER_CONT and PHP_OUTPUT_HANDLER_END.\n *\n *                     If output_callback returns FALSE original input is\n *                     sent to the browser.\n *\n *                     The output_callback parameter may be bypassed by\n *                     passing a NULL value.\n *\n *                     ob_end_clean(), ob_end_flush(), ob_clean(),\n *                     ob_flush() and ob_start() may not be called from a\n *                     callback function. If you call them from callback\n *                     function, the behavior is undefined. If you would\n *                     like to delete the contents of a buffer, return \"\"\n *                     (a null string) from callback function. You can't\n *                     even call functions using the output buffering\n *                     functions like print_r($expression, true) or\n *                     highlight_file($filename, true) from a callback\n *                     function.\n *\n *                     In PHP 4.0.4, ob_gzhandler() was introduced to\n *                     facilitate sending gz-encoded data to web browsers\n *                     that support compressed web pages. ob_gzhandler()\n *                     determines what type of content encoding the browser\n *                     will accept and will return its output accordingly.\n * @chunk_size int     If the optional parameter chunk_size is passed, the\n *                     buffer will be flushed after any output call which\n *                     causes the buffer's length to equal or exceed\n *                     chunk_size. Default value 0 means that the function\n *                     is called only in the end, other special value 1\n *                     sets chunk_size to 4096.\n * @erase      bool    If the optional parameter erase is set to FALSE, the\n *                     buffer will not be deleted until the script\n *                     finishes. This causes that flushing and cleaning\n *                     functions would issue a notice and return FALSE if\n *                     called.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "output_callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "chunk_size", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "erase", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_clean", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-clean.php )\n *\n * This function discards the contents of the output buffer.\n *\n * This function does not destroy the output buffer like ob_end_clean()\n * does.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-flush.php )\n *\n * This function will send the contents of the output buffer (if any). If\n * you want to further process the buffer's contents you have to call\n * ob_get_contents() before ob_flush() as the buffer contents are discarded\n * after ob_flush() is called.\n *\n * This function does not destroy the output buffer like ob_end_flush()\n * does.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_end_clean", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-end-clean.php )\n *\n * This function discards the contents of the topmost output buffer and\n * turns off this output buffering. If you want to further process the\n * buffer's contents you have to call ob_get_contents() before\n * ob_end_clean() as the buffer contents are discarded when ob_end_clean()\n * is called.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Reasons\n *                     for failure are first that you called the function\n *                     without an active buffer or that for some reason a\n *                     buffer could not be deleted (possible for special\n *                     buffer).\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_end_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-end-flush.php )\n *\n * This function will send the contents of the topmost output buffer (if\n * any) and turn this output buffer off. If you want to further process the\n * buffer's contents you have to call ob_get_contents() before\n * ob_end_flush() as the buffer contents are discarded after ob_end_flush()\n * is called. This function is similar to ob_get_flush(), except that\n * ob_get_flush() returns the buffer as a string.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Reasons\n *                     for failure are first that you called the function\n *                     without an active buffer or that for some reason a\n *                     buffer could not be deleted (possible for special\n *                     buffer).\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.flush.php )\n *\n * Flushes the write buffers of PHP and whatever backend PHP is using\n * (CGI, a web server, etc). This attempts to push current output all the\n * way to the browser with a few caveats.\n *\n * flush() may not be able to override the buffering scheme of your web\n * server and it has no effect on any client-side buffering in the browser.\n * It also doesn't affect PHP's userspace output buffering mechanism. This\n * means you will have to call both ob_flush() and flush() to flush the ob\n * output buffers if you are using those.\n *\n * Several servers, especially on Win32, will still buffer the output from\n * your script until it terminates before transmitting the results to the\n * browser.\n *\n * Server modules for Apache like mod_gzip may do buffering of their own\n * that will cause flush() to not result in data being sent immediately to\n * the client.\n *\n * Even the browser may buffer its input before displaying it. Netscape,\n * for example, buffers text until it receives an end-of-line or the\n * beginning of a tag, and it won't render tables until the </table> tag of\n * the outermost table is seen.\n *\n * Some versions of Microsoft Internet Explorer will only start to display\n * the page after they have received 256 bytes of output, so you may need\n * to send extra whitespace before flushing to get those browsers to\n * display the page.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_get_clean", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-clean.php )\n *\n * Gets the current buffer contents and delete current output buffer.\n *\n * ob_get_clean() essentially executes both ob_get_contents() and\n * ob_end_clean().\n *\n * @return     string  Returns the contents of the output buffer and end\n *                     output buffering. If output buffering isn't active\n *                     then FALSE is returned.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_get_contents", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-contents.php )\n *\n * Gets the contents of the output buffer without clearing it.\n *\n * @return     string  This will return the contents of the output buffer\n *                     or FALSE, if output buffering isn't active.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_get_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-flush.php )\n *\n * ob_get_flush() flushes the output buffer, return it as a string and\n * turns off output buffering. This function is similar to ob_end_flush(),\n * except that this function returns the buffer as a string.\n *\n * @return     string  Returns the output buffer or FALSE if no buffering\n *                     is active.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_get_length", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-length.php )\n *\n * This will return the length of the contents in the output buffer.\n *\n * @return     int     Returns the length of the output buffer contents or\n *                     FALSE if no buffering is active.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_get_level", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-level.php )\n *\n * Returns the nesting level of the output buffering mechanism.\n *\n * @return     int     Returns the level of nested output buffering\n *                     handlers or zero if output buffering is not active.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_get_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-status.php )\n *\n * ob_get_status() returns status information on either the top level\n * output buffer or all active output buffer levels if full_status is set\n * to TRUE.\n *\n * @full_status\n *             bool    TRUE to return all active output buffer levels. If\n *                     FALSE or not set, only the top level output buffer\n *                     is returned.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "full_status", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_gzhandler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-gzhandler.php )\n *\n * ob_gzhandler() is intended to be used as a callback function for\n * ob_start() to help facilitate sending gz-encoded data to web browsers\n * that support compressed web pages. Before ob_gzhandler() actually sends\n * compressed data, it determines what type of content encoding the browser\n * will accept (\"gzip\", \"deflate\" or none at all) and will return its\n * output accordingly. All browsers are supported since it's up to the\n * browser to send the correct header saying that it accepts compressed web\n * pages. If a browser doesn't support compressed pages this function\n * returns FALSE.\n *\n * @buffer     string\n * @mode       int\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "buffer", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_implicit_flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-implicit-flush.php )\n *\n * ob_implicit_flush() will turn implicit flushing on or off. Implicit\n * flushing will result in a flush operation after every output call, so\n * that explicit calls to flush() will no longer be needed.\n *\n * @flag       bool    TRUE to turn implicit flushing on, FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "flag", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ob_list_handlers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ob-list-handlers.php )\n *\n * Lists all output handlers in use.\n *\n * @return     vector  This will return an array with the output handlers\n *                     in use (if any). If output_buffering is enabled or\n *                     an anonymous function was used with ob_start(),\n *                     ob_list_handlers() will return \"default output\n *                     handler\".\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "output_add_rewrite_var", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.output-add-rewrite-var.php )\n *\n * This function adds another name/value pair to the URL rewrite\n * mechanism. The name and value will be added to URLs (as GET parameter)\n * and forms (as hidden input fields) the same way as the session ID when\n * transparent URL rewriting is enabled with session.use_trans_sid. Please\n * note that absolute URLs (http://example.com/..) aren't rewritten.\n *\n * This function's behavior is controlled by the url_rewriter.tags php.ini\n * parameter. Calling this function will implicitly start output buffering\n * if it is not active already.\n *\n * @name       string  The variable name.\n * @value      string  The variable value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "output_reset_rewrite_vars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.output-reset-rewrite-vars.php )\n *\n * This function resets the URL rewriter and removes all rewrite variables\n * previously set by the output_add_rewrite_var() function or the session\n * mechanism (if session.use_trans_sid was set on session_start()).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_crash_log", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Adds an entry to a log file that's written when server crashes. This is\n * useful for diagnose why server crashed. For example, logged-on user's\n * ID.\n *\n * @name       string  Name of the value.\n * @value      string  Value to write to log.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_stats", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Tallies a number for server stats.\n *\n * @name       string  Name of the entry. This name can then be used with\n *                     admin commands to retrieve stats while server is\n *                     running.\n * @value      int     An integer to add up.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_get_stats", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Checks current value of a server stats.\n *\n * @name       string  Name of the entry.\n *\n * @return     int     Currently accumulated count.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_get_status", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns status of different server threads.\n *\n * @return     map     Array of thread statuses.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_get_iostatus", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns I/O status of current thread. EnableNetworkIOStatus has to be\n * turned on.\n *\n * @return     map     Array of all I/O so far for current thread.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_set_iostatus_address", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Use this name, instead of IP address or URL for I/O status reporting.\n * The name will only be effective for the upcoming I/O and it will be\n * reset immediately after. Use logical network address for grouping\n * network I/O by intention, instead of physical addresses.\n *\n * @name       string  Specifies the logical name to replace with.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_get_timers", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns timestamps of different request events.\n *\n * @get_as_float\n *             bool    same as in microtime() to specify output format,\n *                     except it defaults to true for float format.\n *\n * @return     mixed   An array of three timestamps: 'queue', the time a\n *                     request is received and queued up; 'process-wall',\n *                     the wall clock time a request starts to get\n *                     processed; and 'process-cpu', the CPU clock time a\n *                     request starts to get processed.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "get_as_float", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_output_global_state", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Dumps all variables in global state, including global variables, static\n * variables, class statics and others.\n *\n * @serialize  bool    Specifies what format to use, whether to serialize\n *                     into a string.\n *\n * @return     mixed   An array of global state.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "serialize", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_instruction_counter", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @return     int     Returns the current instruction counter value.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_get_hardware_counters", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @return     mixed   An array of hardware counters\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_set_hardware_events", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @events     string  comma separated list of hardware events\n *\n * @return     bool    returns TRUE on success and FALSE on failure\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "events", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10416040, "hphp_clear_hardware_events", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "override_function", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.override-function.php )\n *\n * Overrides built-in functions by replacing them in the symbol table.\n *\n * @name       string  The function to override.\n * @args       string  The function arguments, as a comma separated string.\n *\n *                     Usually you will want to pass this parameter, as\n *                     well as the function_code parameter, as a single\n *                     quote delimited string. The reason for using single\n *                     quoted strings, is to protect the variable names\n *                     from parsing, otherwise, if you use double quotes\n *                     there will be a need to escape the variable names,\n *                     e.g. \\$your_var.\n * @code       string  The new code for the function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "code", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rename_function", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rename-function.php )\n *\n * Renames a orig_name to new_name in the global function table. Useful\n * for temporarily overriding built-in functions.\n *\n * @orig_name  string  The original function name.\n * @new_name   string  The new name for the original_name function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "orig_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "new_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_set_browser_trace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apd-set-browser-trace.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_set_pprof_trace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apd-set-pprof-trace.php\n * )\n *\n * Starts debugging to pprof_{process_id} in the dump directory.\n *\n * @dumpdir    string  The directory in which the profile dump file is\n *                     written. If not set, the apd.dumpdir setting from\n *                     the php.ini file is used.\n * @frament    string\n *\n * @return     string  Returns path of the destination file.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "dumpdir", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "frament", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_set_session_trace_socket", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apd-set-session-trace-socket.php )\n *\n * Connects to the specified tcp_server (eg. tcplisten) and sends\n * debugging data to the socket.\n *\n * @ip_or_filename\n *             string  IP or Unix Domain socket (like a file) of the TCP\n *                     server.\n * @domain     int     Can be AF_UNIX for file based sockets or APD_AF_INET\n *                     for standard tcp/ip.\n * @port       int     You can use any port, but higher numbers are better\n *                     as most of the lower numbers may be used by other\n *                     system services.\n * @mask       int     An integer which is formed by adding together the\n *                     XXX_TRACE constants.\n *\n *                     It is not recommended to use MEMORY_TRACE. It is\n *                     very slow and does not appear to be accurate.\n *                     ASSIGNMENT_TRACE is not implemented yet.\n *\n *                     To turn on all functional traces (TIMING,\n *                     FUNCTIONS, ARGS SUMMARY (like strace -c)) use the\n *                     value 99\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "ip_or_filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "domain", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mask", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_stop_trace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apd-stop-trace.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_breakpoint", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apd-breakpoint.php )\n *\n * This can be used to stop the running of your script, and await\n * responses on the connected socket. To step the program, just send enter\n * (a blank line), or enter a php command to be executed.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_continue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apd-continue.php )\n *\n * Usually sent via the socket to restart the interpreter.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apd_echo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apd-echo.php )\n *\n * Usually sent via the socket to request information about the running\n * script.\n *\n * @output     string  The debugged variable.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "output", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readgzfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.readgzfile.php )\n *\n * Reads a file, decompresses it and writes it to standard output.\n *\n * readgzfile() can be used to read a file which is not in gzip format; in\n * this case readgzfile() will directly read from the file without\n * decompression.\n *\n * @filename   string  The file name. This file will be opened from the\n *                     filesystem and its contents written to standard\n *                     output.\n * @use_include_path\n *             bool    You can set this optional parameter to 1, if you\n *                     want to search for the file in the include_path too.\n *\n * @return     mixed   Returns the number of (uncompressed) bytes read from\n *                     the file. If an error occurs, FALSE is returned and\n *                     unless the function was called as @readgzfile, an\n *                     error message is printed.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzfile.php )\n *\n * This function is identical to readgzfile(), except that it returns the\n * file in an array.\n *\n * @filename   string  The file name.\n * @use_include_path\n *             bool    You can set this optional parameter to 1, if you\n *                     want to search for the file in the include_path too.\n *\n * @return     mixed   An array containing the file, one line per cell.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzcompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzcompress.php )\n *\n *\n * @data       string  The data to compress.\n * @level      int     The level of compression. Can be given as 0 for no\n *                     compression up to 9 for maximum compression.\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzuncompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzuncompress.php )\n *\n * This function uncompress a compressed string.\n *\n * @data       string  The data compressed by gzcompress().\n * @limit      int     The maximum length of data to decode.\n *\n * @return     mixed   The original uncompressed data or FALSE on error.\n *\n *                     The function will return an error if the\n *                     uncompressed data is more than 32768 times the\n *                     length of the compressed input data or more than the\n *                     optional parameter length.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzdeflate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzdeflate.php )\n *\n *\n * @data       string  The data to deflate.\n * @level      int     The level of compression. Can be given as 0 for no\n *                     compression up to 9 for maximum compression. If not\n *                     given, the default compression level will be the\n *                     default compression level of the zlib library.\n *\n * @return     mixed   The deflated string or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzinflate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzinflate.php )\n *\n * This function inflate a deflated string.\n *\n * @data       string  The data compressed by gzdeflate().\n * @limit      int     The maximum length of data to decode.\n *\n * @return     mixed   The original uncompressed data or FALSE on error.\n *\n *                     The function will return an error if the\n *                     uncompressed data is more than 32768 times the\n *                     length of the compressed input data or more than the\n *                     optional parameter length.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzencode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzencode.php )\n *\n *\n * @data       string  The data to encode.\n * @level      int     The level of compression. Can be given as 0 for no\n *                     compression up to 9 for maximum compression. If not\n *                     given, the default compression level will be the\n *                     default compression level of the zlib library.\n * @encoding_mode\n *             int     The encoding mode. Can be FORCE_GZIP (the default)\n *                     or FORCE_DEFLATE.\n *\n *                     If you use FORCE_DEFLATE, you get a standard zlib\n *                     deflated string (inclusive zlib headers) after the\n *                     gzip file header but without the trailing crc32\n *                     checksum.\n *\n * @return     mixed   The encoded string, or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "encoding_mode", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "FORCE_GZIP", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzdecode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzdecode.php )\n *\n * This function returns a decoded version of the input data.\n *\n * @data       string  The data to decode, encoded by gzencode().\n *\n * @return     mixed   The decoded string, or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zlib_get_coding_type", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.zlib-get-coding-type.php )\n *\n * Returns the coding type used for output compression.\n *\n * @return     string  Possible return values are gzip, deflate, or FALSE.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzopen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzopen.php )\n *\n * Opens a gzip (.gz) file for reading or writing.\n *\n * gzopen() can be used to read a file which is not in gzip format; in\n * this case gzread() will directly read from the file without\n * decompression.\n *\n * @filename   string  The file name.\n * @mode       string  As in fopen() (rb or wb) but can also include a\n *                     compression level (wb9) or a strategy: f for\n *                     filtered data as in wb6f, h for Huffman only\n *                     compression as in wb1h. (See the description of\n *                     deflateInit2 in zlib.h for more information about\n *                     the strategy parameter.)\n * @use_include_path\n *             bool    You can set this optional parameter to 1, if you\n *                     want to search for the file in the include_path too.\n *\n * @return     resource\n *                     Returns a file pointer to the file opened, after\n *                     that, everything you read from this file descriptor\n *                     will be transparently decompressed and what you\n *                     write gets compressed.\n *\n *                     If the open fails, the function returns FALSE.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "use_include_path", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzclose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzclose.php )\n *\n * Closes the given gz-file pointer.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzrewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzrewind.php )\n *\n * Sets the file position indicator of the given gz-file pointer to the\n * beginning of the file stream.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzeof", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzeof.php )\n *\n * Tests the given GZ file pointer for EOF.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     bool    Returns TRUE if the gz-file pointer is at EOF or an\n *                     error occurs; otherwise returns FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzgetc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzgetc.php )\n *\n * Returns a string containing a single (uncompressed) character read from\n * the given gz-file pointer.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     mixed   The uncompressed character or FALSE on EOF (unlike\n *                     gzeof()).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzgets", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzgets.php )\n *\n * Gets a (uncompressed) string of up to length - 1 bytes read from the\n * given file pointer. Reading ends when length - 1 bytes have been read,\n * on a newline, or on EOF (whichever comes first).\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @length     int     The length of data to get.\n *\n * @return     mixed   The uncompressed string, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:1024;", (const char *)7, "1024", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzgetss", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzgetss.php )\n *\n * Identical to gzgets(), except that gzgetss() attempts to strip any HTML\n * and PHP tags from the text it reads.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @length     int     The length of data to get.\n * @allowable_tags\n *             string  You can use this optional parameter to specify tags\n *                     which should not be stripped.\n *\n * @return     mixed   The uncompressed and striped string, or FALSE on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "allowable_tags", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzread", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzread.php )\n *\n * gzread() reads up to length bytes from the given gz-file pointer.\n * Reading stops when length (uncompressed) bytes have been read or EOF is\n * reached, whichever comes first.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @length     int     The number of bytes to read.\n *\n * @return     mixed   The data that have been read.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzpassthru", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzpassthru.php )\n *\n * Reads to EOF on the given gz-file pointer from the current position and\n * writes the (uncompressed) results to standard output.\n *\n * You may need to call gzrewind() to reset the file pointer to the\n * beginning of the file if you have already written data to it. Tip\n *\n * If you just want to dump the contents of a file to the output buffer,\n * without first modifying it or seeking to a particular offset, you may\n * want to use the readgzfile() function, which saves you the gzopen()\n * call.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     mixed   The number of uncompressed characters read from gz\n *                     and passed through to the input, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzseek", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzseek.php )\n *\n * Sets the file position indicator for the given file pointer to the\n * given offset byte into the file stream. Equivalent to calling (in C)\n * gzseek(zp, offset, SEEK_SET).\n *\n * If the file is opened for reading, this function is emulated but can be\n * extremely slow. If the file is opened for writing, only forward seeks\n * are supported; gzseek() then compresses a sequence of zeroes up to the\n * new starting position.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @offset     int     The seeked offset.\n * @whence     int     whence values are: SEEK_SET - Set position equal to\n *                     offset bytes. SEEK_CUR - Set position to current\n *                     location plus offset.\n *\n *                     If whence is not specified, it is assumed to be\n *                     SEEK_SET.\n *\n * @return     mixed   Upon success, returns 0; otherwise, returns -1. Note\n *                     that seeking past EOF is not considered an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "whence", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "SEEK_SET", (const char *)8, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gztell", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gztell.php )\n *\n * Gets the position of the given file pointer; i.e., its offset into the\n * uncompressed file stream.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     mixed   The position of the file pointer or FALSE if an\n *                     error occurs.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzwrite", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzwrite.php )\n *\n * gzwrite() writes the contents of string to the given gz-file.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @str        string  The string to write.\n * @length     int     The number of uncompressed bytes to write. If\n *                     supplied, writing will stop after length\n *                     (uncompressed) bytes have been written or the end of\n *                     string is reached, whichever comes first.\n *\n *                     Note that if the length argument is given, then the\n *                     magic_quotes_runtime configuration option will be\n *                     ignored and no slashes will be stripped from string.\n *\n * @return     mixed   Returns the number of (uncompressed) bytes written\n *                     to the given gz-file stream.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gzputs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gzputs.php )\n *\n *\n * @zp         resource\n *\n * @str        string\n * @length     int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "zp", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "qlzcompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.qlzcompress.php )\n *\n * This function compress the given string using the QuickLZ data format.\n *\n * For details on the QuickLZ compression algorithm go to\n * http://www.quicklz.com/(RFC 1950).\n *\n * @data       string  The data to compress.\n * @level      int     The level of compression. Can be given as 1, 2 or 3.\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "qlzuncompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.qlzuncompress.php )\n *\n * This function uncompress a compressed string.\n *\n * @data       string  The data compressed by qlzcompress().\n * @level      int     The level of compression. Can be given as 1, 2 or 3.\n *\n * @return     mixed   The original uncompressed data or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "level", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sncompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sncompress.php )\n *\n * This function compress the given string using the Snappy data format.\n *\n * For details on the Snappy compression algorithm go to\n * http://code.google.com/p/snappy/.\n *\n * @data       string  The data to compress.\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "snuncompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.snuncompress.php )\n *\n * This function uncompress a compressed string.\n *\n * @data       string  The data compressed by sncompress().\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "nzcompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.nzcompress.php )\n *\n * This function compresses the given string using the nzlib data format,\n * which is primarily used for compressing and uncompressing memcache\n * values\n *\n * @uncompressed\n *             string  The uncompressed data\n *\n * @return     mixed   The compressed data, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "uncompressed", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "nzuncompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.nzuncompress.php )\n *\n * This function uncompresses the given string given that it is in the\n * nzlib data format, which is primarily used for compressing and\n * uncompressing memcache values\n *\n * @compressed string  The data compressed by nzcompress().\n *\n * @return     mixed   The uncompressed data, or FALSE on error\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "compressed", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lz4compress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lz4compress.php )\n *\n * This function compresses the given string using the lz4lib data format,\n * which is primarily used for compressing and uncompressing memcache\n * values\n *\n * @uncompressed\n *             string  The uncompressed data\n *\n * @return     mixed   The compressed data, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "uncompressed", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lz4hccompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lz4hccompress.php )\n *\n * This function compresses the given string using the lz4lib data format,\n * which is primarily used for compressing and uncompressing memcache\n * values\n *\n * @uncompressed\n *             string  The uncompressed data\n *\n * @return     mixed   The compressed data, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "uncompressed", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lz4uncompress", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lz4uncompress.php )\n *\n * This function uncompresses the given string given that it is in the\n * lz4lib data format, which is primarily used for compressing and\n * uncompressing memcache values\n *\n * @compressed string  The data compressed by lz4compress().\n *\n * @return     mixed   The uncompressed data, or FALSE on error\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "compressed", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..)\n * @data       string  Message to be hashed.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "algo", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_algos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-algos.php )\n *\n *\n * @return     vector  Returns a numerically indexed array containing the\n *                     list of supported hashing algorithms.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_init", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-init.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..)\n * @options    int     Optional settings for hash generation, currently\n *                     supports only one option: HASH_HMAC. When specified,\n *                     the key must be specified.\n * @key        string  When HASH_HMAC is specified for options, a shared\n *                     secret key to be used with the HMAC hashing method\n *                     must be supplied in this parameter.\n *\n * @return     mixed   Returns a Hashing Context resource for use with\n *                     hash_update(), hash_update_stream(),\n *                     hash_update_file(), and hash_final().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "algo", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-file.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..)\n * @filename   string  URL describing location of file to be hashed;\n *                     Supports fopen wrappers.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "algo", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_final", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-final.php )\n *\n *\n * @context    resource\n *                     Hashing context returned by hash_init().\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     string  Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_hmac_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-hmac-file.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..) See hash_algos() for\n *                     a list of supported algorithms.\n * @filename   string  URL describing location of file to be hashed;\n *                     Supports fopen wrappers.\n * @key        string  Shared secret key used for generating the HMAC\n *                     variant of the message digest.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "algo", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_hmac", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-hmac.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..) See hash_algos() for\n *                     a list of supported algorithms.\n * @data       string  Message to be hashed.\n * @key        string  Shared secret key used for generating the HMAC\n *                     variant of the message digest.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "algo", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_update_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-update-file.php )\n *\n *\n * @init_context\n *             resource\n *                     Hashing context returned by hash_init().\n * @filename   string  URL describing location of file to be hashed;\n *                     Supports fopen wrappers.\n * @stream_context\n *             resource\n *                     Stream context as returned by\n *                     stream_context_create().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "init_context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "stream_context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_update_stream", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-update-stream.php\n * )\n *\n *\n * @context    resource\n *                     Hashing context returned by hash_init().\n * @handle     resource\n *                     Open file handle as returned by any stream creation\n *                     function.\n * @length     int     Maximum number of characters to copy from handle\n *                     into the hashing context.\n *\n * @return     int     Actual number of bytes added to the hashing context\n *                     from handle.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hash_update", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hash-update.php )\n *\n *\n * @context    resource\n *                     Hashing context returned by hash_init().\n * @data       string  Message to be included in the hash digest.\n *\n * @return     bool    Returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "furchash_hphp_ext", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.furchash-hphp-ext.php )\n *\n *\n * @key        string  The key to hash\n * @len        int     Number of bytes to use from the hash\n * @nPart      int     The number of buckets\n *\n * @return     int     Returns a number in the range of 0-(nPart-1)\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "nPart", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "furchash_hphp_ext_supported", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.furchash-hphp-ext-supported.php )\n *\n *\n * @return     bool    Returns whether furchash extension is supported\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hphp_murmurhash", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-murmurhash.php )\n *\n *\n * @key        string  The key to hash\n * @len        int     Number of bytes to use from the hash\n * @seed       int     The seed to use for hashing\n *\n * @return     int     Returns the Int64 hash of the first len input\n *                     characters\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "seed", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_8bit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-8bit.php )\n *\n *\n * @str        string  The 8bit string to convert\n *\n * @return     mixed   Returns a quoted-printable string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_alerts", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-alerts.php )\n *\n * Returns all of the IMAP alert messages generated since the last\n * imap_alerts() call, or the beginning of the page.\n *\n * When imap_alerts() is called, the alert stack is subsequently cleared.\n * The IMAP specification requires that these messages be passed to the\n * user.\n *\n * @return     mixed   Returns an array of all of the IMAP alert messages\n *                     generated or FALSE if no alert messages are\n *                     available.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_append", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-append.php )\n *\n * Appends a string message to the specified mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @message    string  The message to be append, as a string\n *\n *                     When talking to the Cyrus IMAP server, you must use\n *                     \"\\r\\n\" as your end-of-line terminator instead of\n *                     \"\\n\" or the operation will fail\n * @options    string  If provided, the options will also be written to the\n *                     mailbox\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_base64", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-base64.php )\n *\n * Decodes the given BASE-64 encoded text.\n *\n * @text       string  The encoded text\n *\n * @return     mixed   Returns the decoded message as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_binary", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-binary.php )\n *\n *\n * @str        string  The 8bit string\n *\n * @return     mixed   Returns a base64 encoded string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_body", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-body.php )\n *\n * imap_body() returns the body of the message, numbered msg_number in the\n * current mailbox.\n *\n * imap_body() will only return a verbatim copy of the message body. To\n * extract single parts of a multipart MIME-encoded message you have to use\n * imap_fetchstructure() to analyze its structure and imap_fetchbody() to\n * extract a copy of a single body component.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @options    int     The optional options are a bit mask with one or more\n *                     of the following: FT_UID - The msg_number is a UID\n *                     FT_PEEK - Do not set the \\Seen flag if not already\n *                     set FT_INTERNAL - The return string is in internal\n *                     format, will not canonicalize to CRLF.\n *\n * @return     mixed   Returns the body of the specified message, as a\n *                     string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_bodystruct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-bodystruct.php )\n *\n * Read the structure of a specified body section of a specific message.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @section    string  The body section to read\n *\n * @return     mixed   Returns the information in an object, for a detailed\n *                     description of the object structure and properties\n *                     see imap_fetchstructure().\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "section", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_check", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-check.php )\n *\n * Checks information about the current mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_clearflag_full", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-clearflag-full.php\n * )\n *\n * This function causes a store to delete the specified flag to the flags\n * set for the messages in the specified sequence.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @sequence   string  A sequence of message numbers. You can enumerate\n *                     desired messages with the X,Y syntax, or retrieve\n *                     all messages within an interval with the X:Y syntax\n * @flag       string\n * @options    int     options are a bit mask and may contain the single\n *                     option: ST_UID - The sequence argument contains UIDs\n *                     instead of sequence numbers\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sequence", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-close.php )\n *\n * Closes the imap stream.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @flag       int     If set to CL_EXPUNGE, the function will silently\n *                     expunge the mailbox before closing, removing all\n *                     messages marked for deletion. You can achieve the\n *                     same thing by using imap_expunge()\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_createmailbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-createmailbox.php\n * )\n *\n * Creates a new mailbox specified by mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information. Names containing international\n *                     characters should be encoded by imap_utf7_encode()\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_delete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-delete.php )\n *\n * Marks messages listed in msg_number for deletion. Messages marked for\n * deletion will stay in the mailbox until either imap_expunge() is called\n * or imap_close() is called with the optional parameter CL_EXPUNGE.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number string  The message number\n * @options    int     You can set the FT_UID which tells the function to\n *                     treat the msg_number argument as an UID.\n *\n * @return     bool    Returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_deletemailbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-deletemailbox.php\n * )\n *\n * Deletes the specified mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_errors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-errors.php )\n *\n * Gets all of the IMAP errors (if any) that have occurred during this\n * page request or since the error stack was reset.\n *\n * When imap_errors() is called, the error stack is subsequently cleared.\n *\n * @return     mixed   This function returns an array of all of the IMAP\n *                     error messages generated since the last\n *                     imap_errors() call, or the beginning of the page.\n *                     Returns FALSE if no error messages are available.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_expunge", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-expunge.php )\n *\n * Deletes all the messages marked for deletion by imap_delete(),\n * imap_mail_move(), or imap_setflag_full().\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     bool    Returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_fetch_overview", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-fetch-overview.php\n * )\n *\n * This function fetches mail headers for the given sequence and returns\n * an overview of their contents.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @sequence   string  A message sequence description. You can enumerate\n *                     desired messages with the X,Y syntax, or retrieve\n *                     all messages within an interval with the X:Y syntax\n * @options    int     sequence will contain a sequence of message indices\n *                     or UIDs, if this parameter is set to FT_UID.\n *\n * @return     mixed   Returns an array of objects describing one message\n *                     header each. The object will only define a property\n *                     if it exists. The possible properties are: subject -\n *                     the messages subject from - who sent it to -\n *                     recipient date - when was it sent message_id -\n *                     Message-ID references - is a reference to this\n *                     message id in_reply_to - is a reply to this message\n *                     id size - size in bytes uid - UID the message has in\n *                     the mailbox msgno - message sequence number in the\n *                     mailbox recent - this message is flagged as recent\n *                     flagged - this message is flagged answered - this\n *                     message is flagged as answered deleted - this\n *                     message is flagged for deletion seen - this message\n *                     is flagged as already read draft - this message is\n *                     flagged as being a draft\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sequence", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_fetchbody", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-fetchbody.php )\n *\n * Fetch of a particular section of the body of the specified messages.\n * Body parts are not decoded by this function.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @section    string  The part number. It is a string of integers\n *                     delimited by period which index into a body part\n *                     list as per the IMAP4 specification\n * @options    int     A bitmask with one or more of the following: FT_UID\n *                     - The msg_number is a UID FT_PEEK - Do not set the\n *                     \\Seen flag if not already set FT_INTERNAL - The\n *                     return string is in internal format, will not\n *                     canonicalize to CRLF.\n *\n * @return     mixed   Returns a particular section of the body of the\n *                     specified messages as a text string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "section", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_fetchheader", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-fetchheader.php )\n *\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @options    int     The possible options are: FT_UID - The msgno\n *                     argument is a UID FT_INTERNAL - The return string is\n *                     in \"internal\" format, without any attempt to\n *                     canonicalize to CRLF newlines FT_PREFETCHTEXT - The\n *                     RFC822.TEXT should be pre-fetched at the same time.\n *                     This avoids an extra RTT on an IMAP connection if a\n *                     full message text is desired (e.g. in a \"save to\n *                     local file\" operation)\n *\n * @return     mixed   Returns the header of the specified message as a\n *                     text string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_fetchstructure", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-fetchstructure.php\n * )\n *\n * Fetches all the structured information for a given message.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @options    int     This optional parameter only has a single option,\n *                     FT_UID, which tells the function to treat the\n *                     msg_number argument as a UID.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_gc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-gc.php )\n *\n * Purges the cache of entries of a specific type.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @caches     int     Specifies the cache to purge. It may one or a\n *                     combination of the following constants: IMAP_GC_ELT\n *                     (message cache elements), IMAP_GC_ENV (enveloppe and\n *                     bodies), IMAP_GC_TEXTS (texts).\n *\n * @return     bool    Returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "caches", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_get_quota", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-get-quota.php )\n *\n * Retrieve the quota level settings, and usage statics per mailbox.\n *\n * For a non-admin user version of this function, please see the\n * imap_get_quotaroot() function of PHP.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @quota_root string  quota_root should normally be in the form of\n *                     user.name where name is the mailbox you wish to\n *                     retrieve information about.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quota_root", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_get_quotaroot", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-get-quotaroot.php\n * )\n *\n * Retrieve the quota settings per user. The limit value represents the\n * total amount of space allowed for this user's total mailbox usage. The\n * usage value represents the user's current total mailbox capacity.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @quota_root string  quota_root should normally be in the form of which\n *                     mailbox (i.e. INBOX).\n *\n * @return     mixed   Returns an array of integer values pertaining to the\n *                     specified user mailbox. All values contain a key\n *                     based upon the resource name, and a corresponding\n *                     array with the usage and limit values within.\n *\n *                     This function will return FALSE in the case of call\n *                     failure, and an array of information about the\n *                     connection upon an un-parsable response from the\n *                     server.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quota_root", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_getacl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-getacl.php )\n *\n * Gets the ACL for a given mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n *\n * @return     mixed   Returns an associative array of \"folder\" => \"acl\"\n *                     pairs.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_getmailboxes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-getmailboxes.php )\n *\n * Gets information on the mailboxes.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open()\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n *\n * @return     mixed   Returns an array of objects containing mailbox\n *                     information. Each object has the attributes name,\n *                     specifying the full name of the mailbox; delimiter,\n *                     which is the hierarchy delimiter for the part of the\n *                     hierarchy this mailbox is in; and attributes.\n *                     Attributes is a bitmask that can be tested against:\n *\n *                     LATT_NOINFERIORS - This mailbox contains, and may\n *                     not contain any \"children\" (there are no mailboxes\n *                     below this one). Calling imap_createmailbox() will\n *                     not work on this mailbox.\n *\n *                     LATT_NOSELECT - This is only a container, not a\n *                     mailbox - you cannot open it.\n *\n *                     LATT_MARKED - This mailbox is marked. This means\n *                     that it may contain new messages since the last time\n *                     it was checked. Not provided by all IMAP servers.\n *\n *                     LATT_UNMARKED - This mailbox is not marked, does\n *                     not contain new messages. If either MARKED or\n *                     UNMARKED is provided, you can assume the IMAP server\n *                     supports this feature for this mailbox.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_getsubscribed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-getsubscribed.php\n * )\n *\n * Gets information about the subscribed mailboxes.\n *\n * Identical to imap_getmailboxes(), except that it only returns mailboxes\n * that the user is subscribed to.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open()\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n *\n * @return     mixed   Returns an array of objects containing mailbox\n *                     information. Each object has the attributes name,\n *                     specifying the full name of the mailbox; delimiter,\n *                     which is the hierarchy delimiter for the part of the\n *                     hierarchy this mailbox is in; and attributes.\n *                     Attributes is a bitmask that can be tested against:\n *                     LATT_NOINFERIORS - This mailbox has no \"children\"\n *                     (there are no mailboxes below this one).\n *                     LATT_NOSELECT - This is only a container, not a\n *                     mailbox - you cannot open it. LATT_MARKED - This\n *                     mailbox is marked. Only used by UW-IMAPD.\n *                     LATT_UNMARKED - This mailbox is not marked. Only\n *                     used by UW-IMAPD.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_header", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-header.php )\n *\n * Gets information about the given message number by reading its headers.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @fromlength int     Number of characters for the fetchfrom property.\n *                     Must be greater than or equal to zero.\n * @subjectlength\n *             int     Number of characters for the fetchsubject property\n *                     Must be greater than or equal to zero.\n * @defaulthost\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fromlength", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "subjectlength", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "defaulthost", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_headerinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-headerinfo.php )\n *\n * Gets information about the given message number by reading its headers.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number\n * @fromlength int     Number of characters for the fetchfrom property.\n *                     Must be greater than or equal to zero.\n * @subjectlength\n *             int     Number of characters for the fetchsubject property\n *                     Must be greater than or equal to zero.\n * @defaulthost\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fromlength", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "subjectlength", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "defaulthost", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_headers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-headers.php )\n *\n * Returns headers for all messages in a mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     mixed   Returns an array of string formatted with header\n *                     info. One element per mail message.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_last_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-last-error.php )\n *\n * Gets the full text of the last IMAP error message that occurred on the\n * current page. The error stack is untouched; calling imap_last_error()\n * subsequently, with no intervening errors, will return the same error.\n *\n * @return     mixed   Returns the full text of the last IMAP error message\n *                     that occurred on the current page. Returns FALSE if\n *                     no error messages are available.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_list", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-list.php )\n *\n * Read the list of mailboxes.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open().\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n *\n * @return     mixed   Returns an array containing the names of the\n *                     mailboxes.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_listmailbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-listmailbox.php )\n *\n * Read the list of mailboxes.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open().\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n *\n * @return     mixed   Returns an array containing the names of the\n *                     mailboxes.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_listscan", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-listscan.php )\n *\n * Returns an array containing the names of the mailboxes that have\n * content in the text of the mailbox.\n *\n * This function is similar to imap_listmailbox(), but it will\n * additionally check for the presence of the string content inside the\n * mailbox data.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open()\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n * @content    string  The searched string\n *\n * @return     mixed   Returns an array containing the names of the\n *                     mailboxes that have content in the text of the\n *                     mailbox.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_listsubscribed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-listsubscribed.php\n * )\n *\n * Gets an array of all the mailboxes that you have subscribed.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open()\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n *\n * @return     mixed   Returns an array of all the subscribed mailboxes.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_lsub", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-lsub.php )\n *\n * Gets an array of all the mailboxes that you have subscribed.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open()\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n *\n * @return     mixed   Returns an array of all the subscribed mailboxes.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_mail_compose", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-mail-compose.php )\n *\n * Create a MIME message based on the given envelope and body sections.\n *\n * @envelope   map     An associative array of headers fields. Valid keys\n *                     are: \"remail\", \"return_path\", \"date\", \"from\",\n *                     \"reply_to\", \"in_reply_to\", \"subject\", \"to\", \"cc\",\n *                     \"bcc\", \"message_id\" and \"custom_headers\" (which\n *                     contains associative array of other headers).\n * @body       map     An indexed array of bodies\n *\n *                     A body is an associative array which can consist of\n *                     the following keys: \"type\", \"encoding\", \"charset\",\n *                     \"type.parameters\", \"subtype\", \"id\", \"description\",\n *                     \"disposition.type\", \"disposition\", \"contents.data\",\n *                     \"lines\", \"bytes\" and \"md5\".\n *\n * @return     mixed   Returns the MIME message.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "envelope", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "body", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_mail_copy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-mail-copy.php )\n *\n * Copies mail messages specified by msglist to specified mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msglist    string\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @options    int     options is a bitmask of one or more of CP_UID - the\n *                     sequence numbers contain UIDS CP_MOVE - Delete the\n *                     messages from the current mailbox after copying\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msglist", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_mail_move", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-mail-move.php )\n *\n * Moves mail messages specified by msglist to the specified mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msglist    string\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @options    int     options is a bitmask and may contain the single\n *                     option: CP_UID - the sequence numbers contain UIDS\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msglist", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_mail", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-mail.php )\n *\n *\n * @to         string  The receiver\n * @subject    string  The mail subject\n * @message    string  The mail body\n * @additional_headers\n *             string  As string with additional headers to be set on the\n *                     mail\n * @cc         string\n * @bcc        string  The receivers specified in bcc will get the mail,\n *                     but are excluded from the headers.\n * @rpath      string  Use this parameter to specify return path upon mail\n *                     delivery failure. This is useful when using PHP as a\n *                     mail client for multiple users.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "to", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "additional_headers", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "cc", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "bcc", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "rpath", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_mailboxmsginfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-mailboxmsginfo.php\n * )\n *\n * Checks the current mailbox status on the server. It is similar to\n * imap_status(), but will additionally sum up the size of all messages in\n * the mailbox, which will take some additional time to execute.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     mixed   Returns the information in an object with following\n *                     properties: Mailbox properties Date date of last\n *                     change (current datetime) Driver driver Mailbox name\n *                     of the mailbox Nmsgs number of messages Recent\n *                     number of recent messages Unread number of unread\n *                     messages Deleted number of deleted messages Size\n *                     mailbox size\n *\n *                     Returns FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_mime_header_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imap-mime-header-decode.php )\n *\n *\n * @text       string  The MIME text\n *\n * @return     mixed   The decoded elements are returned in an array of\n *                     objects, where each object has two properties,\n *                     charset and text.\n *\n *                     If the element hasn't been encoded, and in other\n *                     words is in plain US-ASCII, the charset property of\n *                     that element is set to default.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_msgno", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-msgno.php )\n *\n * Returns the message sequence number for the given uid.\n *\n * This function is the inverse of imap_uid().\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @uid        int     The message UID\n *\n * @return     mixed   Returns the message sequence number for the given\n *                     uid.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_num_msg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-num-msg.php )\n *\n * Gets the number of messages in the current mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     mixed   Return the number of messages in the current\n *                     mailbox, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_num_recent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-num-recent.php )\n *\n * Gets the number of recent messages in the current mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     mixed   Returns the number of recent messages in the current\n *                     mailbox, as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-open.php )\n *\n * Opens an IMAP stream to a mailbox.\n *\n * This function can also be used to open streams to POP3 and NNTP\n * servers, but some functions and features are only available on IMAP\n * servers.\n *\n * @mailbox    string  A mailbox name consists of a server and a mailbox\n *                     path on this server. The special name INBOX stands\n *                     for the current users personal mailbox. Mailbox\n *                     names that contain international characters besides\n *                     those in the printable ASCII space have to be\n *                     encoded width imap_utf7_encode().\n *\n *                     The server part, which is enclosed in '{' and '}',\n *                     consists of the servers name or ip address, an\n *                     optional port (prefixed by ':'), and an optional\n *                     protocol specification (prefixed by '/').\n *\n *                     The server part is mandatory in all mailbox\n *                     parameters.\n *\n *                     All names which start with { are remote names, and\n *                     are in the form \"{\" remote_system_name [\":\" port]\n *                     [flags] \"}\" [mailbox_name] where: remote_system_name\n *                     - Internet domain name or bracketed IP address of\n *                     server. port - optional TCP port number, default is\n *                     the default port for that service flags - optional\n *                     flags, see following table. mailbox_name - remote\n *                     mailbox name, default is INBOX\n *\n *                     Optional flags for names Flag Description\n *                     /service=service mailbox access service, default is\n *                     \"imap\" /user=user remote user name for login on the\n *                     server /authuser=user remote authentication user; if\n *                     specified this is the user name whose password is\n *                     used (e.g. administrator) /anonymous remote access\n *                     as anonymous user /debug record protocol telemetry\n *                     in application's debug log /secure do not transmit a\n *                     plaintext password over the network /imap, /imap2,\n *                     /imap2bis, /imap4, /imap4rev1 equivalent to\n *                     /service=imap /pop3 equivalent to /service=pop3\n *                     /nntp equivalent to /service=nntp /norsh do not use\n *                     rsh or ssh to establish a preauthenticated IMAP\n *                     session /ssl use the Secure Socket Layer to encrypt\n *                     the session /validate-cert validate certificates\n *                     from TLS/SSL server (this is the default behavior)\n *                     /novalidate-cert do not validate certificates from\n *                     TLS/SSL server, needed if server uses self-signed\n *                     certificates /tls force use of start-TLS to encrypt\n *                     the session, and reject connection to servers that\n *                     do not support it /notls do not do start-TLS to\n *                     encrypt the session, even with servers that support\n *                     it /readonly request read-only mailbox open (IMAP\n *                     only; ignored on NNTP, and an error with SMTP and\n *                     POP3)\n * @username   string  The user name\n * @password   string  The password associated with the username\n * @options    int     The options are a bit mask with one or more of the\n *                     following: OP_READONLY - Open mailbox read-only\n *                     OP_ANONYMOUS - Don't use or update a .newsrc for\n *                     news (NNTP only) OP_HALFOPEN - For IMAP and NNTP\n *                     names, open a connection but don't open a mailbox.\n *                     CL_EXPUNGE - Expunge mailbox automatically upon\n *                     mailbox close (see also imap_delete() and\n *                     imap_expunge()) OP_DEBUG - Debug protocol\n *                     negotiations OP_SHORTCACHE - Short (elt-only)\n *                     caching OP_SILENT - Don't pass up events (internal\n *                     use) OP_PROTOTYPE - Return driver prototype\n *                     OP_SECURE - Don't do non-secure authentication\n * @retries    int     Number of maximum connect attempts\n *\n * @return     mixed   Returns an IMAP stream on success or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "retries", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_ping", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-ping.php )\n *\n * imap_ping() pings the stream to see if it's still active. It may\n * discover new mail; this is the preferred method for a periodic \"new mail\n * check\" as well as a \"keep alive\" for servers which have inactivity\n * timeout.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n *\n * @return     bool    Returns TRUE if the stream is still alive, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_qprint", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-qprint.php )\n *\n *\n * @str        string  A quoted-printable string\n *\n * @return     mixed   Returns an 8 bits string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_renamemailbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-renamemailbox.php\n * )\n *\n * This function renames on old mailbox to new mailbox (see imap_open()\n * for the format of mbox names).\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @old_mbox   string  The old mailbox name, see imap_open() for more\n *                     information\n * @new_mbox   string  The new mailbox name, see imap_open() for more\n *                     information\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "old_mbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "new_mbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_reopen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-reopen.php )\n *\n * Reopens the specified stream to a new mailbox on an IMAP or NNTP\n * server.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @options    int     The options are a bit mask with one or more of the\n *                     following: OP_READONLY - Open mailbox read-only\n *                     OP_ANONYMOUS - Don't use or update a .newsrc for\n *                     news (NNTP only) OP_HALFOPEN - For IMAP and NNTP\n *                     names, open a connection but don't open a mailbox.\n *                     OP_EXPUNGE - Silently expunge recycle stream\n *                     CL_EXPUNGE - Expunge mailbox automatically upon\n *                     mailbox close (see also imap_delete() and\n *                     imap_expunge())\n * @retries    int     Number of maximum connect attempts\n *\n * @return     bool    Returns TRUE if the stream is reopened, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "retries", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_rfc822_parse_adrlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imap-rfc822-parse-adrlist.php )\n *\n *\n * @address    string  A string containing addresses\n * @default_host\n *             string  The default host name\n *\n * @return     mixed   Returns an array of objects. The objects properties\n *                     are:\n *\n *                     mailbox - the mailbox name (username) host - the\n *                     host name personal - the personal name adl - at\n *                     domain source route\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "default_host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_rfc822_parse_headers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imap-rfc822-parse-headers.php )\n *\n * Gets an object of various header elements, similar to imap_header().\n *\n * @headers    string  The parsed headers data\n * @defaulthost\n *             string  The default host name\n *\n * @return     mixed   Returns an object similar to the one returned by\n *                     imap_header(), except for the flags and other\n *                     properties that come from the IMAP server.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "headers", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "defaulthost", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_rfc822_write_address", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imap-rfc822-write-address.php )\n *\n *\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @host       string  The email host part\n * @personal   string  The name of the account owner\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "personal", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_savebody", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-savebody.php )\n *\n * Saves a part or the whole body of the specified message.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @file       mixed   The path to the saved file as a string, or a valid\n *                     file descriptor returned by fopen().\n * @msg_number int     The message number\n * @part_number\n *             string  The part number. It is a string of integers\n *                     delimited by period which index into a body part\n *                     list as per the IMAP4 specification\n * @options    int     A bitmask with one or more of the following: FT_UID\n *                     - The msg_number is a UID FT_PEEK - Do not set the\n *                     \\Seen flag if not already set FT_INTERNAL - The\n *                     return string is in internal format, will not\n *                     canonicalize to CRLF.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "file", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "part_number", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_scanmailbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-scanmailbox.php )\n *\n * Returns an array containing the names of the mailboxes that have\n * content in the text of the mailbox.\n *\n * This function is similar to imap_listmailbox(), but it will\n * additionally check for the presence of the string content inside the\n * mailbox data.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @ref        string  ref should normally be just the server specification\n *                     as described in imap_open()\n * @pattern    string  Specifies where in the mailbox hierarchy to start\n *                     searching.\n *\n *                     There are two special characters you can pass as\n *                     part of the pattern: '*' and '%'. '*' means to\n *                     return all mailboxes. If you pass pattern as '*',\n *                     you will get a list of the entire mailbox hierarchy.\n *                     '%' means to return the current level only. '%' as\n *                     the pattern parameter will return only the top level\n *                     mailboxes; '~/mail/%' on UW_IMAPD will return every\n *                     mailbox in the ~/mail directory, but none in\n *                     subfolders of that directory.\n * @content    string  The searched string\n *\n * @return     mixed   Returns an array containing the names of the\n *                     mailboxes that have content in the text of the\n *                     mailbox.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ref", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_search", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-search.php )\n *\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @criteria   string  A string, delimited by spaces, in which the\n *                     following keywords are allowed. Any multi-word\n *                     arguments (e.g. FROM \"joey smith\") must be quoted.\n *                     ALL - return all messages matching the rest of the\n *                     criteria ANSWERED - match messages with the\n *                     \\\\ANSWERED flag set BCC \"string\" - match messages\n *                     with \"string\" in the Bcc: field BEFORE \"date\" -\n *                     match messages with Date: before \"date\" BODY\n *                     \"string\" - match messages with \"string\" in the body\n *                     of the message CC \"string\" - match messages with\n *                     \"string\" in the Cc: field DELETED - match deleted\n *                     messages FLAGGED - match messages with the \\\\FLAGGED\n *                     (sometimes referred to as Important or Urgent) flag\n *                     set FROM \"string\" - match messages with \"string\" in\n *                     the From: field KEYWORD \"string\" - match messages\n *                     with \"string\" as a keyword NEW - match new messages\n *                     OLD - match old messages ON \"date\" - match messages\n *                     with Date: matching \"date\" RECENT - match messages\n *                     with the \\\\RECENT flag set SEEN - match messages\n *                     that have been read (the \\\\SEEN flag is set) SINCE\n *                     \"date\" - match messages with Date: after \"date\"\n *                     SUBJECT \"string\" - match messages with \"string\" in\n *                     the Subject: TEXT \"string\" - match messages with\n *                     text \"string\" TO \"string\" - match messages with\n *                     \"string\" in the To: UNANSWERED - match messages that\n *                     have not been answered UNDELETED - match messages\n *                     that are not deleted UNFLAGGED - match messages that\n *                     are not flagged UNKEYWORD \"string\" - match messages\n *                     that do not have the keyword \"string\" UNSEEN - match\n *                     messages which have not been read yet\n * @options    int     Valid values for options are SE_UID, which causes\n *                     the returned array to contain UIDs instead of\n *                     messages sequence numbers.\n * @charset    string\n *\n * @return     mixed   Returns an array of message numbers or UIDs.\n *\n *                     Return FALSE if it does not understand the search\n *                     criteria or no messages have been found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "criteria", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_set_quota", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-set-quota.php )\n *\n * Sets an upper limit quota on a per mailbox basis.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @quota_root string  The mailbox to have a quota set. This should follow\n *                     the IMAP standard format for a mailbox: user.name.\n * @quota_limit\n *             int     The maximum size (in KB) for the quota_root\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quota_root", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quota_limit", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_setacl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-setacl.php )\n *\n * Sets the ACL for a giving mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @id         string  The user to give the rights to.\n * @rights     string  The rights to give to the user. Passing an empty\n *                     string will delete acl.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "id", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rights", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_setflag_full", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-setflag-full.php )\n *\n * Causes a store to add the specified flag to the flags set for the\n * messages in the specified sequence.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @sequence   string  A sequence of message numbers. You can enumerate\n *                     desired messages with the X,Y syntax, or retrieve\n *                     all messages within an interval with the X:Y syntax\n * @flag       string\n * @options    int     A bit mask that may contain the single option:\n *                     ST_UID - The sequence argument contains UIDs instead\n *                     of sequence numbers\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sequence", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_sort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-sort.php )\n *\n * Gets and sorts message numbers by the given parameters.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @criteria   int     Criteria can be one (and only one) of the following:\n *                     SORTDATE - message Date SORTARRIVAL - arrival date\n *                     SORTFROM - mailbox in first From address SORTSUBJECT\n *                     - message subject SORTTO - mailbox in first To\n *                     address SORTCC - mailbox in first cc address\n *                     SORTSIZE - size of message in octets\n * @reverse    int     Set this to 1 for reverse sorting\n * @options    int     The options are a bitmask of one or more of the\n *                     following: SE_UID - Return UIDs instead of sequence\n *                     numbers SE_NOPREFETCH - Don't prefetch searched\n *                     messages\n * @search_criteria\n *             string\n * @charset    string\n *\n * @return     mixed   Returns an array of message numbers sorted by the\n *                     given parameters.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "criteria", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "reverse", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "search_criteria", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-status.php )\n *\n * Gets status information about the given mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n * @options    int     Valid flags are: SA_MESSAGES - set $status->messages\n *                     to the number of messages in the mailbox SA_RECENT -\n *                     set $status->recent to the number of recent messages\n *                     in the mailbox SA_UNSEEN - set $status->unseen to\n *                     the number of unseen (new) messages in the mailbox\n *                     SA_UIDNEXT - set $status->uidnext to the next uid to\n *                     be used in the mailbox SA_UIDVALIDITY - set\n *                     $status->uidvalidity to a constant that changes when\n *                     uids for the mailbox may no longer be valid SA_ALL -\n *                     set all of the above\n *\n * @return     mixed   This function returns an object containing status\n *                     information. The object has the following\n *                     properties: messages, recent, unseen, uidnext, and\n *                     uidvalidity.\n *\n *                     flags is also set, which contains a bitmask which\n *                     can be checked against any of the above constants.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_subscribe", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-subscribe.php )\n *\n * Subscribe to a new mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_thread", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-thread.php )\n *\n * Gets a tree of a threaded message.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @options    int\n *\n * @return     mixed   imap_thread() returns an associative array\n *                     containing a tree of messages threaded by\n *                     REFERENCES, or FALSE on error.\n *\n *                     Every message in the current mailbox will be\n *                     represented by three entries in the resulting array:\n *\n *                     $thread[\"XX.num\"] - current message number\n *\n *                     $thread[\"XX.next\"]\n *\n *                     $thread[\"XX.branch\"]\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-timeout.php )\n *\n * Sets or fetches the imap timeout.\n *\n * @timeout_type\n *             int     One of the following: IMAP_OPENTIMEOUT,\n *                     IMAP_READTIMEOUT, IMAP_WRITETIMEOUT, or\n *                     IMAP_CLOSETIMEOUT.\n * @timeout    int     The timeout, in seconds.\n *\n * @return     mixed   If the timeout parameter is set, this function\n *                     returns TRUE on success and FALSE on failure.\n *\n *                     If timeout is not provided or evaluates to -1, the\n *                     current timeout value of timeout_type is returned as\n *                     an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "timeout_type", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_uid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-uid.php )\n *\n * This function returns the UID for the given message sequence number. An\n * UID is a unique identifier that will not change over time while a\n * message sequence number may change whenever the content of the mailbox\n * changes.\n *\n * This function is the inverse of imap_msgno().\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number int     The message number.\n *\n * @return     mixed   The UID of the given message.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_undelete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-undelete.php )\n *\n * Removes the deletion flag for a specified message, which is set by\n * imap_delete() or imap_mail_move().\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @msg_number string  The message number\n * @flags      int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "msg_number", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_unsubscribe", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-unsubscribe.php )\n *\n * Unsubscribe from the specified mailbox.\n *\n * @imap_stream\n *             object  An IMAP stream returned by imap_open().\n * @mailbox    string  The mailbox name, see imap_open() for more\n *                     information\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "imap_stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mailbox", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_utf7_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-utf7-decode.php )\n *\n * Decodes modified UTF-7 text into ISO-8859-1 string.\n *\n * This function is needed to decode mailbox names that contain certain\n * characters which are not in range of printable ASCII characters.\n *\n * @text       string\n *\n * @return     mixed   Returns a string that is encoded in ISO-8859-1 and\n *                     consists of the same sequence of characters in text,\n *                     or FALSE if text contains invalid modified UTF-7\n *                     sequence or text contains a character that is not\n *                     part of ISO-8859-1 character set.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_utf7_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-utf7-encode.php )\n *\n * Converts data to modified UTF-7 text.\n *\n * This is needed to encode mailbox names that contain certain characters\n * which are not in range of printable ASCII characters.\n *\n * @data       string  An ISO-8859-1 string.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imap_utf8", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imap-utf8.php )\n *\n * Converts the given mime_encoded_text to UTF-8.\n *\n * @mime_encoded_text\n *             string\n *\n * @return     mixed   Returns an UTF-8 encoded string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mime_encoded_text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addcslashes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.addcslashes.php )\n *\n * Returns a string with backslashes before characters that are listed in\n * charlist parameter.\n *\n * @str        string  The string to be escaped.\n * @charlist   string  A list of characters to be escaped. If charlist\n *                     contains characters \\n, \\r etc., they are converted\n *                     in C-like style, while other non-alphanumeric\n *                     characters with ASCII codes lower than 32 and higher\n *                     than 126 converted to octal representation.\n *\n *                     When you define a sequence of characters in the\n *                     charlist argument make sure that you know what\n *                     characters come between the characters that you set\n *                     as the start and end of the range.\n *\n *                     Also, if the first character in a range has a\n *                     higher ASCII value than the second character in the\n *                     range, no range will be constructed. Only the start,\n *                     end and period characters will be escaped. Use the\n *                     ord() function to find the ASCII value for a\n *                     character.\n *\n *\n *\n *                     Be careful if you choose to escape characters 0, a,\n *                     b, f, n, r, t and v. They will be converted to \\0,\n *                     \\a, \\b, \\f, \\n, \\r, \\t and \\v. In PHP \\0 (NULL), \\r\n *                     (carriage return), \\n (newline), \\f (form feed), \\v\n *                     (vertical tab) and \\t (tab) are predefined escape\n *                     sequences, while in C all of these are predefined\n *                     escape sequences.\n *\n * @return     string  Returns the escaped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charlist", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stripcslashes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stripcslashes.php )\n *\n * Returns a string with backslashes stripped off. Recognizes C-like \\n,\n * \\r ..., octal and hexadecimal representation.\n *\n * @str        string  The string to be unescaped.\n *\n * @return     string  Returns the unescaped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addslashes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.addslashes.php )\n *\n * Returns a string with backslashes before characters that need to be\n * quoted in database queries etc. These characters are single quote ('),\n * double quote (\"), backslash (\\) and NUL (the NULL byte).\n *\n * An example use of addslashes() is when you're entering data into a\n * database. For example, to insert the name O'reilly into a database, you\n * will need to escape it. It's highly recommended to use DBMS specific\n * escape function (e.g. mysqli_real_escape_string() for MySQL or\n * pg_escape_string() for PostgreSQL), but if the DBMS you're using does't\n * have an escape function and the DBMS uses \\ to escape special chars, you\n * can use this function. This would only be to get the data into the\n * database, the extra \\ will not be inserted. Having the PHP directive\n * magic_quotes_sybase set to on will mean ' is instead escaped with\n * another '.\n *\n * The PHP directive magic_quotes_gpc is on by default, and it essentially\n * runs addslashes() on all GET, POST, and COOKIE data. Do not use\n * addslashes() on strings that have already been escaped with\n * magic_quotes_gpc as you'll then do double escaping. The function\n * get_magic_quotes_gpc() may come in handy for checking this.\n *\n * @str        string  The string to be escaped.\n *\n * @return     string  Returns the escaped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "stripslashes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stripslashes.php )\n *\n * Un-quotes a quoted string.\n *\n * If magic_quotes_sybase is on, no backslashes are stripped off but two\n * apostrophes are replaced by one instead.\n *\n * An example use of stripslashes() is when the PHP directive\n * magic_quotes_gpc is on (it's on by default), and you aren't inserting\n * this data into a place (such as a database) that requires escaping. For\n * example, if you're simply outputting data straight from an HTML form.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns a string with backslashes stripped off. (\\'\n *                     becomes ' and so on.) Double backslashes (\\\\) are\n *                     made into a single backslash (\\).\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bin2hex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.bin2hex.php )\n *\n * Returns an ASCII string containing the hexadecimal representation of\n * str. The conversion is done byte-wise with the high-nibble first.\n *\n * @str        string  A character.\n *\n * @return     string  Returns the hexadecimal representation of the given\n *                     string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hex2bin", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hex2bin.php )\n *\n * Returns an ASCII string containing the binary representation of\n * hexidecimal str.\n *\n * @str        string  A character.\n *\n * @return     mixed   Returns the binary representation of the given\n *                     hexidecimal string or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "nl2br", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.nl2br.php )\n *\n * Returns string with '<br />' or '<br>' inserted before all newlines.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the altered string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "quotemeta", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.quotemeta.php )\n *\n * Returns a version of str with a backslash character (\\) before every\n * character that is among these: . \\ + * \? [ ^ ] ( $ )\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the string with meta characters quoted.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "str_shuffle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-shuffle.php )\n *\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the shuffled string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strrev", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strrev.php )\n *\n * Returns string, reversed.\n *\n * @str        string  The string to be reversed.\n *\n * @return     string  Returns the reversed string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strtolower", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strtolower.php )\n *\n * Returns string with all alphabetic characters converted to lowercase.\n *\n * Note that 'alphabetic' is determined by the current locale. This means\n * that in i.e. the default \"C\" locale, characters such as umlaut-A () will\n * not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the lowercased string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strtoupper", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strtoupper.php )\n *\n * Returns string with all alphabetic characters converted to uppercase.\n *\n * Note that 'alphabetic' is determined by the current locale. For\n * instance, in the default \"C\" locale characters such as umlaut-a () will\n * not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the uppercased string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ucfirst", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ucfirst.php )\n *\n * Returns a string with the first character of str capitalized, if that\n * character is alphabetic.\n *\n * Note that 'alphabetic' is determined by the current locale. For\n * instance, in the default \"C\" locale characters such as umlaut-a () will\n * not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the resulting string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lcfirst", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.lcfirst.php )\n *\n * Returns a string with the first character of str , lowercased if that\n * character is alphabetic.\n *\n * Note that 'alphabetic' is determined by the current locale. For\n * instance, in the default \"C\" locale characters such as umlaut-a (\303\244)\n * will not be converted.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the resulting string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ucwords", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ucwords.php )\n *\n * Returns a string with the first character of each word in str\n * capitalized, if that character is alphabetic.\n *\n * The definition of a word is any string of characters that is\n * immediately after a whitespace (These are: space, form-feed, newline,\n * carriage return, horizontal tab, and vertical tab).\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the modified string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strip_tags", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strip-tags.php )\n *\n * This function tries to return a string with all NUL bytes, HTML and PHP\n * tags stripped from a given str. It uses the same tag stripping state\n * machine as the fgetss() function.\n *\n * @str        string  The input string.\n * @allowable_tags\n *             string  You can use the optional second parameter to specify\n *                     tags which should not be stripped.\n *\n *                     HTML comments and PHP tags are also stripped. This\n *                     is hardcoded and can not be changed with\n *                     allowable_tags.\n *\n * @return     string  Returns the stripped string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "allowable_tags", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "trim", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.trim.php )\n *\n * This function returns a string with whitespace stripped from the\n * beginning and end of str. Without the second parameter, trim() will\n * strip these characters: \" \" (ASCII 32 (0x20)), an ordinary space. \"\\t\"\n * (ASCII 9 (0x09)), a tab. \"\\n\" (ASCII 10 (0x0A)), a new line (line feed).\n * \"\\r\" (ASCII 13 (0x0D)), a carriage return. \"\\0\" (ASCII 0 (0x00)), the\n * NUL-byte. \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab.\n *\n * @str        string  The string that will be trimmed.\n * @charlist   string  Optionally, the stripped characters can also be\n *                     specified using the charlist parameter. Simply list\n *                     all characters that you want to be stripped. With ..\n *                     you can specify a range of characters.\n *\n * @return     string  The trimmed string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charlist", "", (const char *)0x14 /* KindOfString */, "s:6:\"\n\r\t\v\000 \";", (const char *)13, "HPHP_TRIM_CHARLIST", (const char *)18, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ltrim", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ltrim.php )\n *\n * Strip whitespace (or other characters) from the beginning of a string.\n *\n * @str        string  The input string.\n * @charlist   string  You can also specify the characters you want to\n *                     strip, by means of the charlist parameter. Simply\n *                     list all characters that you want to be stripped.\n *                     With .. you can specify a range of characters.\n *\n * @return     string  This function returns a string with whitespace\n *                     stripped from the beginning of str. Without the\n *                     second parameter, ltrim() will strip these\n *                     characters: \" \" (ASCII 32 (0x20)), an ordinary\n *                     space. \"\\t\" (ASCII 9 (0x09)), a tab. \"\\n\" (ASCII 10\n *                     (0x0A)), a new line (line feed). \"\\r\" (ASCII 13\n *                     (0x0D)), a carriage return. \"\\0\" (ASCII 0 (0x00)),\n *                     the NUL-byte. \"\\x0B\" (ASCII 11 (0x0B)), a vertical\n *                     tab.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charlist", "", (const char *)0x14 /* KindOfString */, "s:6:\"\n\r\t\v\000 \";", (const char *)13, "HPHP_TRIM_CHARLIST", (const char *)18, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rtrim", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.rtrim.php )\n *\n * This function returns a string with whitespace stripped from the end of\n * str.\n *\n * Without the second parameter, rtrim() will strip these characters: \" \"\n * (ASCII 32 (0x20)), an ordinary space. \"\\t\" (ASCII 9 (0x09)), a tab. \"\\n\"\n * (ASCII 10 (0x0A)), a new line (line feed). \"\\r\" (ASCII 13 (0x0D)), a\n * carriage return. \"\\0\" (ASCII 0 (0x00)), the NUL-byte. \"\\x0B\" (ASCII 11\n * (0x0B)), a vertical tab.\n *\n * @str        string  The input string.\n * @charlist   string  You can also specify the characters you want to\n *                     strip, by means of the charlist parameter. Simply\n *                     list all characters that you want to be stripped.\n *                     With .. you can specify a range of characters.\n *\n * @return     string  Returns the modified string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charlist", "", (const char *)0x14 /* KindOfString */, "s:6:\"\n\r\t\v\000 \";", (const char *)13, "HPHP_TRIM_CHARLIST", (const char *)18, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chop", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chop.php )\n *\n *\n * @str        string\n * @charlist   string\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charlist", "", (const char *)0x14 /* KindOfString */, "s:6:\"\n\r\t\v\000 \";", (const char *)13, "HPHP_TRIM_CHARLIST", (const char *)18, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "explode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.explode.php )\n *\n * Returns an array of strings, each of which is a substring of string\n * formed by splitting it on boundaries formed by the string delimiter.\n * Although implode() can, for historical reasons, accept its parameters\n * in either order, explode() cannot. You must ensure that the delimiter\n * argument comes before the string argument.\n *\n * @delimiter  string  The boundary string.\n * @str        string  The input string.\n * @limit      int     If limit is set and positive, the returned array\n *                     will contain a maximum of limit elements with the\n *                     last element containing the rest of string.\n *\n *                     If the limit parameter is negative, all components\n *                     except the last -limit are returned.\n *\n *                     If the limit parameter is zero, then this is\n *                     treated as 1.\n *\n * @return     mixed   Returns an array of strings created by splitting the\n *                     string parameter on boundaries formed by the\n *                     delimiter.\n *\n *                     If delimiter is an empty string (\"\"), explode()\n *                     will return FALSE. If delimiter contains a value\n *                     that is not contained in string and a negative limit\n *                     is used, then an empty arraywill be returned,\n *                     otherwise an array containing string will be\n *                     returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "delimiter", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "implode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.implode.php )\n *\n * Join array elements with a glue string.\n *\n * implode() can, for historical reasons, accept its parameters in either\n * order. For consistency with explode(), however, it may be less confusing\n * to use the documented order of arguments.\n *\n * @arg1       mixed   Defaults to an empty string. This is not the\n *                     preferred usage of implode() as glue would be the\n *                     second parameter and thus, the bad prototype would\n *                     be used.\n * @arg2       mixed   The array of strings to implode.\n *\n * @return     string  Returns a string containing a string representation\n *                     of all the array elements in the same order, with\n *                     the glue string between each element.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "arg1", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "arg2", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "join", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.join.php )\n *\n *\n * @glue       mixed\n * @pieces     mixed\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "glue", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pieces", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "str_split", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-split.php )\n *\n * Converts a string to an array.\n *\n * @str        string  The input string.\n * @split_length\n *             int     Maximum length of the chunk.\n *\n * @return     mixed   If the optional split_length parameter is specified,\n *                     the returned array will be broken down into chunks\n *                     with each being split_length in length, otherwise\n *                     each chunk will be one character in length.\n *\n *                     FALSE is returned if split_length is less than 1.\n *                     If the split_length length exceeds the length of\n *                     string, the entire string is returned as the first\n *                     (and only) array element.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "split_length", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "chunk_split", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chunk-split.php )\n *\n * Can be used to split a string into smaller chunks which is useful for\n * e.g. converting base64_encode() output to match RFC 2045 semantics. It\n * inserts end every chunklen characters.\n *\n * @body       string  The string to be chunked.\n * @chunklen   int     The chunk length.\n * @end        string  The line ending sequence.\n *\n * @return     mixed   Returns the chunked string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "body", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "chunklen", "", (const char *)0xa /* KindOfInt64 */, "i:76;", (const char *)5, "76", (const char *)2, NULL,
  (const char *)0x2000, "end", "", (const char *)0x14 /* KindOfString */, "s:2:\"\r\n\";", (const char *)9, "\"\\r\\n\"", (const char *)6, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strtok", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strtok.php )\n *\n * strtok() splits a string (str) into smaller strings (tokens), with each\n * token being delimited by any character from token. That is, if you have\n * a string like \"This is an example string\" you could tokenize this string\n * into its individual words by using the space character as the token.\n *\n * Note that only the first call to strtok uses the string argument. Every\n * subsequent call to strtok only needs the token to use, as it keeps track\n * of where it is in the current string. To start over, or to tokenize a\n * new string you simply call strtok with the string argument again to\n * initialize it. Note that you may put multiple tokens in the token\n * parameter. The string will be tokenized when any one of the characters\n * in the argument are found.\n *\n * @str        string  The string being split up into smaller strings\n *                     (tokens).\n * @token      mixed   The delimiter used when splitting up str.\n *\n * @return     mixed   A string token.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "token", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "str_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-replace.php )\n *\n * This function returns a string or an array with all occurrences of\n * search in subject replaced with the given replace value.\n *\n * If you don't need fancy replacing rules (like regular expressions), you\n * should always use this function instead of ereg_replace() or\n * preg_replace().\n * If search and replace are arrays, then str_replace() takes a value from\n * each array and uses them to do search and replace on subject. If replace\n * has fewer values than search, then an empty string is used for the rest\n * of replacement values. If search is an array and replace is a string,\n * then this replacement string is used for every value of search. The\n * converse would not make sense, though.\n *\n * If search or replace are arrays, their elements are processed first to\n * last.\n *\n * @search     mixed   The value being searched for, otherwise known as the\n *                     needle. An array may be used to designate multiple\n *                     needles.\n * @replace    mixed   The replacement value that replaces found search\n *                     values. An array may be used to designate multiple\n *                     replacements.\n * @subject    mixed   The string or array being searched and replaced on,\n *                     otherwise known as the haystack.\n *\n *                     If subject is an array, then the search and replace\n *                     is performed with every entry of subject, and the\n *                     return value is an array as well.\n * @count      mixed   If passed, this will hold the number of matched and\n *                     replaced needles.\n *\n * @return     mixed   This function returns a string or an array with the\n *                     replaced values.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "search", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replace", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "count", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "str_ireplace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-ireplace.php )\n *\n * This function returns a string or an array with all occurrences of\n * search in subject (ignoring case) replaced with the given replace value.\n * If you don't need fancy replacing rules, you should generally use this\n * function instead of preg_replace() with the i modifier.\n * If search and replace are arrays, then str_ireplace() takes a value\n * from each array and uses them to do search and replace on subject. If\n * replace has fewer values than search, then an empty string is used for\n * the rest of replacement values. If search is an array and replace is a\n * string, then this replacement string is used for every value of search.\n *\n * @search     mixed   Every replacement with search array is performed on\n *                     the result of previous replacement.\n * @replace    mixed\n * @subject    mixed   If subject is an array, then the search and replace\n *                     is performed with every entry of subject, and the\n *                     return value is an array as well.\n * @count      mixed   The number of matched and replaced needles will be\n *                     returned in count which is passed by reference.\n *\n * @return     mixed   Returns a string or an array of replacements.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "search", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replace", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "count", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "substr_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.substr-replace.php )\n *\n * substr_replace() replaces a copy of string delimited by the start and\n * (optionally) length parameters with the string given in replacement.\n *\n * @str        mixed   The input string.\n * @replacement\n *             mixed   The replacement string.\n * @start      mixed   If start is positive, the replacing will begin at\n *                     the start'th offset into string.\n *\n *                     If start is negative, the replacing will begin at\n *                     the start'th character from the end of string.\n * @length     mixed   If given and is positive, it represents the length\n *                     of the portion of string which is to be replaced. If\n *                     it is negative, it represents the number of\n *                     characters from the end of string at which to stop\n *                     replacing. If it is not given, then it will default\n *                     to strlen( string ); i.e. end the replacing at the\n *                     end of string. Of course, if length is zero then\n *                     this function will have the effect of inserting\n *                     replacement into string at the given start offset.\n *\n * @return     mixed   The result string is returned. If string is an array\n *                     then array is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "substr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.substr.php )\n *\n * Returns the portion of string specified by the start and length\n * parameters.\n *\n * @str        string  The input string.\n * @start      int     If start is non-negative, the returned string will\n *                     start at the start'th position in string, counting\n *                     from zero. For instance, in the string 'abcdef', the\n *                     character at position 0 is 'a', the character at\n *                     position 2 is 'c', and so forth.\n *\n *                     If start is negative, the returned string will\n *                     start at the start'th character from the end of\n *                     string.\n *\n *                     If string is less than or equal to start characters\n *                     long, FALSE will be returned.\n *\n *                     Example #1 Using a negative start\n * @length     int     If length is given and is positive, the string\n *                     returned will contain at most length characters\n *                     beginning from start (depending on the length of\n *                     string).\n *\n *                     If length is given and is negative, then that many\n *                     characters will be omitted from the end of string\n *                     (after the start position has been calculated when a\n *                     start is negative). If start denotes a position\n *                     beyond this truncation, an empty string will be\n *                     returned.\n *\n *                     If length is given and is 0, FALSE or NULL an empty\n *                     string will be returned.\n *\n *                     If length is omitted, the substring starting from\n *                     start until the end of the string will be returned.\n *                     Example #2 Using a negative length\n *\n * @return     mixed   Returns the extracted part of string or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "str_pad", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-pad.php )\n *\n * This functions returns the input string padded on the left, the right,\n * or both sides to the specified padding length. If the optional argument\n * pad_string is not supplied, the input is padded with spaces, otherwise\n * it is padded with characters from pad_string up to the limit.\n *\n * @input      string  The input string.\n * @pad_length int     If the value of pad_length is negative, less than,\n *                     or equal to the length of the input string, no\n *                     padding takes place.\n * @pad_string string  The pad_string may be truncated if the required\n *                     number of padding characters can't be evenly divided\n *                     by the pad_string's length.\n * @pad_type   int     Optional argument pad_type can be STR_PAD_RIGHT,\n *                     STR_PAD_LEFT, or STR_PAD_BOTH. If pad_type is not\n *                     specified it is assumed to be STR_PAD_RIGHT.\n *\n * @return     string  Returns the padded string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pad_length", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pad_string", "", (const char *)0x14 /* KindOfString */, "s:1:\" \";", (const char *)8, "\" \"", (const char *)3, NULL,
  (const char *)0x2000, "pad_type", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "STR_PAD_RIGHT", (const char *)13, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "str_repeat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-repeat.php )\n *\n * Returns input repeated multiplier times.\n *\n * @input      string  The string to be repeated.\n * @multiplier int     Number of time the input string should be repeated.\n *\n *                     multiplier has to be greater than or equal to 0. If\n *                     the multiplier is set to 0, the function will return\n *                     an empty string.\n *\n * @return     string  Returns the repeated string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "multiplier", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "wordwrap", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.wordwrap.php )\n *\n * Wraps a string to a given number of characters using a string break\n * character.\n *\n * @str        string  The input string.\n * @width      int     The column width.\n * @wordbreak  string  The line is broken using the optional break\n *                     parameter.\n * @cut        bool    If the cut is set to TRUE, the string is always\n *                     wrapped at or before the specified width. So if you\n *                     have a word that is larger than the given width, it\n *                     is broken apart. (See second example).\n *\n * @return     mixed   Returns the given string wrapped at the specified\n *                     column.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "i:75;", (const char *)5, "75", (const char *)2, NULL,
  (const char *)0x2000, "wordbreak", "", (const char *)0x14 /* KindOfString */, "s:1:\"\n\";", (const char *)8, "\"\\n\"", (const char *)4, NULL,
  (const char *)0x2000, "cut", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "html_entity_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.html-entity-decode.php\n * )\n *\n * html_entity_decode() is the opposite of htmlentities() in that it\n * converts all HTML entities to their applicable characters from string.\n *\n * @str        string  The input string.\n * @quote_style\n *             int     The optional second quote_style parameter lets you\n *                     define what will be done with 'single' and \"double\"\n *                     quotes. It takes on one of three constants with the\n *                     default being ENT_COMPAT: Available quote_style\n *                     constants Constant Name Description ENT_COMPAT Will\n *                     convert double-quotes and leave single-quotes alone.\n *                     ENT_QUOTES Will convert both double and single\n *                     quotes. ENT_NOQUOTES Will leave both double and\n *                     single quotes unconverted.\n * @charset    string  The ISO-8859-1 character set is used as default for\n *                     the optional third charset. This defines the\n *                     character set used in conversion.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8  ASCII\n *                     compatible multi-byte 8-bit Unicode. cp866 ibm866,\n *                     866 DOS-specific Cyrillic charset. This charset is\n *                     supported in 4.3.2. cp1251 Windows-1251, win-1251,\n *                     1251 Windows-specific Cyrillic charset. This charset\n *                     is supported in 4.3.2. cp1252 Windows-1252, 1252\n *                     Windows specific charset for Western European.\n *                     KOI8-R koi8-ru, koi8r Russian. This charset is\n *                     supported in 4.3.2. BIG5 950 Traditional Chinese,\n *                     mainly used in Taiwan. GB2312 936 Simplified\n *                     Chinese, national standard character set. BIG5-HKSCS\n *                      Big5 with Hong Kong extensions, Traditional\n *                     Chinese. Shift_JIS SJIS, 932 Japanese EUC-JP EUCJP\n *                     Japanese Any other character sets are not recognized\n *                     and ISO-8859-1 will be used instead.\n *\n * @return     string  Returns the decoded string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quote_style", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "ENT_COMPAT", (const char *)10, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "s:10:\"ISO-8859-1\";", (const char *)18, "\"ISO-8859-1\"", (const char *)12, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "htmlentities", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.htmlentities.php )\n *\n * This function is identical to htmlspecialchars() in all ways, except\n * with htmlentities(), all characters which have HTML character entity\n * equivalents are translated into these entities.\n *\n * If you're wanting to decode instead (the reverse) you can use\n * html_entity_decode().\n *\n * @str        string  The input string.\n * @quote_style\n *             int     Like htmlspecialchars(), the optional second\n *                     quote_style parameter lets you define what will be\n *                     done with 'single' and \"double\" quotes. It takes on\n *                     one of three constants with the default being\n *                     ENT_COMPAT: Available quote_style constants Constant\n *                     Name Description ENT_COMPAT Will convert\n *                     double-quotes and leave single-quotes alone.\n *                     ENT_QUOTES Will convert both double and single\n *                     quotes. ENT_NOQUOTES Will leave both double and\n *                     single quotes unconverted.\n * @charset    string  Like htmlspecialchars(), it takes an optional third\n *                     argument charset which defines character set used in\n *                     conversion. Presently, the ISO-8859-1 character set\n *                     is used as the default.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8  ASCII\n *                     compatible multi-byte 8-bit Unicode. cp866 ibm866,\n *                     866 DOS-specific Cyrillic charset. This charset is\n *                     supported in 4.3.2. cp1251 Windows-1251, win-1251,\n *                     1251 Windows-specific Cyrillic charset. This charset\n *                     is supported in 4.3.2. cp1252 Windows-1252, 1252\n *                     Windows specific charset for Western European.\n *                     KOI8-R koi8-ru, koi8r Russian. This charset is\n *                     supported in 4.3.2. BIG5 950 Traditional Chinese,\n *                     mainly used in Taiwan. GB2312 936 Simplified\n *                     Chinese, national standard character set. BIG5-HKSCS\n *                      Big5 with Hong Kong extensions, Traditional\n *                     Chinese. Shift_JIS SJIS, 932 Japanese EUC-JP EUCJP\n *                     Japanese Any other character sets are not recognized\n *                     and ISO-8859-1 will be used instead.\n * @double_encode\n *             bool    When double_encode is turned off PHP will not encode\n *                     existing html entities. The default is to convert\n *                     everything.\n *\n * @return     string  Returns the encoded string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quote_style", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "ENT_COMPAT", (const char *)10, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "s:10:\"ISO-8859-1\";", (const char *)18, "\"ISO-8859-1\"", (const char *)12, NULL,
  (const char *)0x2000, "double_encode", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "htmlspecialchars_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.htmlspecialchars-decode.php )\n *\n * This function is the opposite of htmlspecialchars(). It converts\n * special HTML entities back to characters.\n *\n * The converted entities are: &amp;, &quot; (when ENT_NOQUOTES is not\n * set), &#039; (when ENT_QUOTES is set), &lt; and &gt;.\n *\n * @str        string  The string to decode\n * @quote_style\n *             int     The quote style. One of the following constants:\n *                     quote_style constants Constant Name Description\n *                     ENT_COMPAT Will convert double-quotes and leave\n *                     single-quotes alone (default) ENT_QUOTES Will\n *                     convert both double and single quotes ENT_NOQUOTES\n *                     Will leave both double and single quotes unconverted\n *\n * @return     string  Returns the decoded string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quote_style", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "ENT_COMPAT", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "htmlspecialchars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.htmlspecialchars.php )\n *\n * Certain characters have special significance in HTML, and should be\n * represented by HTML entities if they are to preserve their meanings.\n * This function returns a string with some of these conversions made; the\n * translations made are those most useful for everyday web programming. If\n * you require all HTML character entities to be translated, use\n * htmlentities() instead. This function is useful in preventing\n * user-supplied text from containing HTML markup, such as in a message\n * board or guest book application.\n *\n * The translations performed are: '&' (ampersand) becomes '&amp;' '\"'\n * (double quote) becomes '&quot;' when ENT_NOQUOTES is not set. '''\n * (single quote) becomes '&#039;' only when ENT_QUOTES is set. '<' (less\n * than) becomes '&lt;' '>' (greater than) becomes '&gt;'\n *\n * @str        string  The string being converted.\n * @quote_style\n *             int     The optional second argument, quote_style, tells the\n *                     function what to do with single and double quote\n *                     characters. The default mode, ENT_COMPAT, is the\n *                     backwards compatible mode which only translates the\n *                     double-quote character and leaves the single-quote\n *                     untranslated. If ENT_QUOTES is set, both single and\n *                     double quotes are translated and if ENT_NOQUOTES is\n *                     set neither single nor double quotes are translated.\n * @charset    string  Defines character set used in conversion. The\n *                     default character set is ISO-8859-1.\n *\n *                     For the purposes of this function, the charsets\n *                     ISO-8859-1, ISO-8859-15, UTF-8, cp866, cp1251,\n *                     cp1252, and KOI8-R are effectively equivalent, as\n *                     the characters affected by htmlspecialchars() occupy\n *                     the same positions in all of these charsets.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8  ASCII\n *                     compatible multi-byte 8-bit Unicode. cp866 ibm866,\n *                     866 DOS-specific Cyrillic charset. This charset is\n *                     supported in 4.3.2. cp1251 Windows-1251, win-1251,\n *                     1251 Windows-specific Cyrillic charset. This charset\n *                     is supported in 4.3.2. cp1252 Windows-1252, 1252\n *                     Windows specific charset for Western European.\n *                     KOI8-R koi8-ru, koi8r Russian. This charset is\n *                     supported in 4.3.2. BIG5 950 Traditional Chinese,\n *                     mainly used in Taiwan. GB2312 936 Simplified\n *                     Chinese, national standard character set. BIG5-HKSCS\n *                      Big5 with Hong Kong extensions, Traditional\n *                     Chinese. Shift_JIS SJIS, 932 Japanese EUC-JP EUCJP\n *                     Japanese Any other character sets are not recognized\n *                     and ISO-8859-1 will be used instead.\n * @double_encode\n *             bool    When double_encode is turned off PHP will not encode\n *                     existing html entities, the default is to convert\n *                     everything.\n *\n * @return     string  The converted string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quote_style", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "ENT_COMPAT", (const char *)10, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "s:10:\"ISO-8859-1\";", (const char *)18, "\"ISO-8859-1\"", (const char *)12, NULL,
  (const char *)0x2000, "double_encode", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fb_htmlspecialchars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fb-htmlspecialchars.php\n * )\n *\n * Certain characters have special significance in HTML, and should be\n * represented by HTML entities if they are to preserve their meanings.\n * This function returns a string with some of these conversions made; the\n * translations made are those most useful for everyday web programming. If\n * you require all HTML character entities to be translated, use\n * htmlentities() instead. This function is useful in preventing\n * user-supplied text from containing HTML markup, such as in a message\n * board or guest book application.\n *\n * The translations performed are: '&' (ampersand) becomes '&amp;' '\"'\n * (double quote) becomes '&quot;' when ENT_NOQUOTES is not set. '''\n * (single quote) becomes '&#039;' only when ENT_QUOTES is set. '<' (less\n * than) becomes '&lt;' '>' (greater than) becomes '&gt;'\n *\n * @str        string  The string being converted.\n * @quote_style\n *             int     The optional second argument, quote_style, tells the\n *                     function what to do with single and double quote\n *                     characters. The default mode, ENT_COMPAT, is the\n *                     backwards compatible mode which only translates the\n *                     double-quote character and leaves the single-quote\n *                     untranslated. If ENT_QUOTES is set, both single and\n *                     double quotes are translated and if ENT_NOQUOTES is\n *                     set neither single nor double quotes are translated.\n * @charset    string  Defines character set used in conversion. The\n *                     default character set is ISO-8859-1.\n *\n *                     For the purposes of this function, the charsets\n *                     ISO-8859-1, ISO-8859-15, UTF-8, cp866, cp1251,\n *                     cp1252, and KOI8-R are effectively equivalent, as\n *                     the characters affected by htmlspecialchars() occupy\n *                     the same positions in all of these charsets.\n *\n *                     Following character sets are supported in PHP 4.3.0\n *                     and later. Supported charsets Charset Aliases\n *                     Description ISO-8859-1 ISO8859-1 Western European,\n *                     Latin-1 ISO-8859-15 ISO8859-15 Western European,\n *                     Latin-9. Adds the Euro sign, French and Finnish\n *                     letters missing in Latin-1(ISO-8859-1). UTF-8  ASCII\n *                     compatible multi-byte 8-bit Unicode. cp866 ibm866,\n *                     866 DOS-specific Cyrillic charset. This charset is\n *                     supported in 4.3.2. cp1251 Windows-1251, win-1251,\n *                     1251 Windows-specific Cyrillic charset. This charset\n *                     is supported in 4.3.2. cp1252 Windows-1252, 1252\n *                     Windows specific charset for Western European.\n *                     KOI8-R koi8-ru, koi8r Russian. This charset is\n *                     supported in 4.3.2. BIG5 950 Traditional Chinese,\n *                     mainly used in Taiwan. GB2312 936 Simplified\n *                     Chinese, national standard character set. BIG5-HKSCS\n *                      Big5 with Hong Kong extensions, Traditional\n *                     Chinese. Shift_JIS SJIS, 932 Japanese EUC-JP EUCJP\n *                     Japanese Any other character sets are not recognized\n *                     and ISO-8859-1 will be used instead.\n * @extra      vector  An array of extra ascii chars to be encoded.\n *\n * @return     string  The converted string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "quote_style", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "ENT_COMPAT", (const char *)10, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "s:10:\"ISO-8859-1\";", (const char *)18, "\"ISO-8859-1\"", (const char *)12, NULL,
  (const char *)0x2000, "extra", "", (const char *)0x20 /* KindOfArray */, "a:0:{}", (const char *)6, "empty_array", (const char *)11, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "quoted_printable_encode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.quoted-printable-encode.php )\n *\n * Returns a quoted printable string created according to  RFC2045,\n * section 6.7.\n *\n * This function is similar to imap_8bit(), except this one does not\n * require the IMAP module to work.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the encoded string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "quoted_printable_decode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.quoted-printable-decode.php )\n *\n * This function returns an 8-bit binary string corresponding to the\n * decoded quoted printable string (according to  RFC2045, section 6.7, not\n *  RFC2821, section 4.5.2, so additional periods are not stripped from the\n * beginning of line).\n *\n * This function is similar to imap_qprint(), except this one does not\n * require the IMAP module to work.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the 8-bit binary string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "convert_uudecode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.convert-uudecode.php )\n *\n * convert_uudecode() decodes a uuencoded string.\n *\n * @data       string  The uuencoded data.\n *\n * @return     mixed   Returns the decoded data as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "convert_uuencode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.convert-uuencode.php )\n *\n * convert_uuencode() encodes a string using the uuencode algorithm.\n *\n * Uuencode translates all strings (including binary's ones) into\n * printable characters, making them safe for network transmissions.\n * Uuencoded data is about 35% larger than the original.\n *\n * @data       string  The data to be encoded.\n *\n * @return     mixed   Returns the uuencoded data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "str_rot13", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-rot13.php )\n *\n * Performs the ROT13 encoding on the str argument and returns the\n * resulting string.\n *\n * The ROT13 encoding simply shifts every letter by 13 places in the\n * alphabet while leaving non-alpha characters untouched. Encoding and\n * decoding are done by the same function, passing an encoded string as\n * argument will return the original version.\n *\n * @str        string  The input string.\n *\n * @return     string  Returns the ROT13 version of the given string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "crc32", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.crc32.php )\n *\n * Generates the cyclic redundancy checksum polynomial of 32-bit lengths\n * of the str. This is usually used to validate the integrity of data being\n * transmitted.\n *\n * Because PHP's integer type is signed, and many crc32 checksums will\n * result in negative integers, you need to use the \"%u\" formatter of\n * sprintf() or printf() to get the string representation of the unsigned\n * crc32 checksum.\n *\n * @str        string  The data.\n *\n * @return     int     Returns the crc32 checksum of str as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "crypt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.crypt.php )\n *\n * crypt() will return a hashed string using the standard Unix DES-based\n * algorithm or alternative algorithms that may be available on the system.\n *\n * Some operating systems support more than one type of hash. In fact,\n * sometimes the standard DES-based algorithm is replaced by an MD5-based\n * algorithm. The hash type is triggered by the salt argument. Prior to\n * 5.3, PHP would determine the available algorithms at install-time based\n * on the system's crypt(). If no salt is provided, PHP will auto-generate\n * either a standard two character (DES) salt, or a twelve character (MD5),\n * depending on the availability of MD5 crypt(). PHP sets a constant named\n * CRYPT_SALT_LENGTH which indicates the longest valid salt allowed by the\n * available hashes.\n *\n * The standard DES-based crypt() returns the salt as the first two\n * characters of the output. It also only uses the first eight characters\n * of str, so longer strings that start with the same eight characters will\n * generate the same result (when the same salt is used). On systems where\n * the crypt() function supports multiple hash types, the following\n * constants are set to 0 or 1 depending on whether the given type is\n * available: CRYPT_STD_DES - Standard DES-based hash with a two character\n * salt from the alphabet \"./0-9A-Za-z\". Using invalid characters in the\n * salt will cause crypt() to fail. CRYPT_EXT_DES - Extended DES-based\n * hash. The \"salt\" is a 9-character string consisting of an underscore\n * followed by 4 bytes of iteration count and 4 bytes of salt. These are\n * encoded as printable characters, 6 bits per character, least significant\n * character first. The values 0 to 63 are encoded as \"./0-9A-Za-z\". Using\n * invalid characters in the salt will cause crypt() to fail. CRYPT_MD5 -\n * MD5 hashing with a twelve character salt starting with $1$\n * CRYPT_BLOWFISH - Blowfish hashing with a salt as follows: \"$2a$\", a two\n * digit cost parameter, \"$\", and 22 base 64 digits from the alphabet\n * \"./0-9A-Za-z\". Using characters outside of this range in the salt will\n * cause crypt() to return a zero-length string. The two digit cost\n * parameter is the base-2 logarithm of the iteration count for the\n * underlying Blowfish-based hashing algorithmeter and must be in range\n * 04-31, values outside this range will cause crypt() to fail.\n * CRYPT_SHA256 - SHA-256 hash with a sixteen character salt prefixed with\n * $5$. If the salt string starts with 'rounds=<N>$', the numeric value of\n * N is used to indicate how many times the hashing loop should be\n * executed, much like the cost parameter on Blowfish. The default number\n * of rounds is 5000, there is a minimum of 1000 and a maximum of\n * 999,999,999. Any selection of N outside this range will be truncated to\n * the nearest limit. CRYPT_SHA512 - SHA-512 hash with a sixteen character\n * salt prefixed with $6$. If the salt string starts with 'rounds=<N>$',\n * the numeric value of N is used to indicate how many times the hashing\n * loop should be executed, much like the cost parameter on Blowfish. The\n * default number of rounds is 5000, there is a minimum of 1000 and a\n * maximum of 999,999,999. Any selection of N outside this range will be\n * truncated to the nearest limit.\n *\n * As of PHP 5.3.0, PHP contains its own implementation and will use that\n * if the system lacks of support for one or more of the algorithms.\n *\n * @str        string  The string to be hashed.\n * @salt       string  An optional salt string to base the hashing on. If\n *                     not provided, the behaviour is defined by the\n *                     algorithm implementation and can lead to unexpected\n *                     results.\n *\n * @return     string  Returns the hashed string or a string that is\n *                     shorter than 13 characters and is guaranteed to\n *                     differ from the salt on failure.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "salt", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "md5", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.md5.php )\n *\n * Calculates the MD5 hash of str using the RSA Data Security, Inc. MD5\n * Message-Digest Algorithm, and returns that hash.\n *\n * @str        string  The string.\n * @raw_output bool    If the optional raw_output is set to TRUE, then the\n *                     md5 digest is instead returned in raw binary format\n *                     with a length of 16.\n *\n * @return     string  Returns the hash as a 32-character hexadecimal\n *                     number.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sha1", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sha1.php )\n *\n *\n * @str        string  The input string.\n * @raw_output bool    If the optional raw_output is set to TRUE, then the\n *                     sha1 digest is instead returned in raw binary format\n *                     with a length of 20, otherwise the returned value is\n *                     a 40-character hexadecimal number.\n *\n * @return     string  Returns the sha1 hash as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "raw_output", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "strtr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strtr.php )\n *\n * This function returns a copy of str, translating all occurrences of\n * each character in from to the corresponding character in to.\n *\n * If from and to are different lengths, the extra characters in the\n * longer of the two are ignored.\n *\n * @str        string  The string being translated.\n * @from       mixed   The string being translated to to.\n * @to         mixed   The string replacing from.\n *\n * @return     mixed   Returns the translated string.\n *\n *                     If replace_pairs contains a key which is an empty\n *                     string (\"\"), FALSE will be returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "from", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "to", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "convert_cyr_string", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.convert-cyr-string.php\n * )\n *\n * Converts from one Cyrillic character set to another.\n * Supported characters are: k - koi8-r w - windows-1251 i - iso8859-5 a -\n * x-cp866 d - x-cp866 m - x-mac-cyrillic\n *\n * @str        string  The string to be converted.\n * @from       string  The source Cyrillic character set, as a single\n *                     character.\n * @to         string  The target Cyrillic character set, as a single\n *                     character.\n *\n * @return     string  Returns the converted string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "from", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "to", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_html_translation_table", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-html-translation-table.php )\n *\n * get_html_translation_table() will return the translation table that is\n * used internally for htmlspecialchars() and htmlentities() with the\n * default charset.\n *\n * Special characters can be encoded in several ways. E.g. \" can be\n * encoded as &quot;, &#34; or &#x22. get_html_translation_table() returns\n * only the most common form for them.\n *\n * @table      int     There are two new constants (HTML_ENTITIES,\n *                     HTML_SPECIALCHARS) that allow you to specify the\n *                     table you want.\n * @quote_style\n *             int     Like the htmlspecialchars() and htmlentities()\n *                     functions you can optionally specify the quote_style\n *                     you are working with. See the description of these\n *                     modes in htmlspecialchars().\n *\n * @return     map     Returns the translation table as an array.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "table", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "quote_style", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "ENT_COMPAT", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hebrev", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hebrev.php )\n *\n * Converts logical Hebrew text to visual text.\n *\n * The function tries to avoid breaking words.\n *\n * @hebrew_text\n *             string  A Hebrew input string.\n * @max_chars_per_line\n *             int     This optional parameter indicates maximum number of\n *                     characters per line that will be returned.\n *\n * @return     string  Returns the visual string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "hebrew_text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_chars_per_line", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hebrevc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.hebrevc.php )\n *\n * This function is similar to hebrev() with the difference that it\n * converts newlines (\\n) to \"<br>\\n\".\n *\n * The function tries to avoid breaking words.\n *\n * @hebrew_text\n *             string  A Hebrew input string.\n * @max_chars_per_line\n *             int     This optional parameter indicates maximum number of\n *                     characters per line that will be returned.\n *\n * @return     string  Returns the visual string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "hebrew_text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_chars_per_line", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "setlocale", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.setlocale.php )\n *\n * Sets locale information.\n * On Windows, setlocale(LC_ALL, '') sets the locale names from the\n * system's regional/language settings (accessible via Control Panel).\n *\n * @category   int     category is a named constant specifying the category\n *                     of the functions affected by the locale setting:\n *                     LC_ALL for all of the below LC_COLLATE for string\n *                     comparison, see strcoll() LC_CTYPE for character\n *                     classification and conversion, for example\n *                     strtoupper() LC_MONETARY for localeconv() LC_NUMERIC\n *                     for decimal separator (See also localeconv())\n *                     LC_TIME for date and time formatting with strftime()\n *                     LC_MESSAGES for system responses (available if PHP\n *                     was compiled with libintl)\n * @locale     mixed   If locale is NULL or the empty string \"\", the locale\n *                     names will be set from the values of environment\n *                     variables with the same names as the above\n *                     categories, or from \"LANG\".\n *\n *                     If locale is \"0\", the locale setting is not\n *                     affected, only the current setting is returned.\n *\n *                     If locale is an array or followed by additional\n *                     parameters then each array element or parameter is\n *                     tried to be set as new locale until success. This is\n *                     useful if a locale is known under different names on\n *                     different systems or for providing a fallback for a\n *                     possibly not available locale.\n *\n * @return     mixed   Returns the new current locale, or FALSE if the\n *                     locale functionality is not implemented on your\n *                     platform, the specified locale does not exist or the\n *                     category name is invalid.\n *\n *                     An invalid category name also causes a warning\n *                     message. Category/locale names can be found in  RFC\n *                     1766 and  ISO 639. Different systems have different\n *                     naming schemes for locales.\n *\n *                     The return value of setlocale() depends on the\n *                     system that PHP is running. It returns exactly what\n *                     the system setlocale function returns.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "category", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "locale", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "localeconv", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.localeconv.php )\n *\n * Returns an associative array containing localized numeric and monetary\n * formatting information.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "nl_langinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.nl-langinfo.php )\n *\n * nl_langinfo() is used to access individual elements of the locale\n * categories. Unlike localeconv(), which returns all of the elements,\n * nl_langinfo() allows you to select any specific element.\n *\n * @item       int\n *\n * @return     string  Returns the element as a string, or FALSE if item is\n *                     not valid.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "item", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "printf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.printf.php )\n *\n *\n * @format     string  See sprintf() for a description of format.\n *\n * @return     mixed   Returns the length of the outputted string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "vprintf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.vprintf.php )\n *\n * Display array values as a formatted string according to format (which\n * is described in the documentation for sprintf()).\n *\n * Operates as printf() but accepts an array of arguments, rather than a\n * variable number of arguments.\n *\n * @format     string  See sprintf() for a description of format.\n * @args       vector\n *\n * @return     mixed   Returns the length of the outputted string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10126040, "sprintf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sprintf.php )\n *\n * Returns a string produced according to the formatting string format.\n *\n * @format     string\n *\n * @return     mixed   Returns a string produced according to the\n *                     formatting string format.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "vsprintf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.vsprintf.php )\n *\n * Operates as sprintf() but accepts an array of arguments, rather than a\n * variable number of arguments.\n *\n * @format     string  See sprintf() for a description of format.\n * @args       vector\n *\n * @return     mixed   Return array values as a formatted string according\n *                     to format (which is described in the documentation\n *                     for sprintf()).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10066040, "sscanf", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.sscanf.php )\n *\n * The function sscanf() is the input analog of printf(). sscanf() reads\n * from the string str and interprets it according to the specified format,\n * which is described in the documentation for sprintf().\n *\n * Any whitespace in the format string matches any whitespace in the input\n * string. This means that even a tab \\t in the format string can match a\n * single space character in the input string.\n *\n * @str        string  The input string being parsed.\n * @format     string  The interpreted format for str, which is described\n *                     in the documentation for sprintf() with following\n *                     differences: Function is not locale-aware. F, g, G\n *                     and b are not supported. D stands for decimal\n *                     number. i stands for integer with base detection. n\n *                     stands for number of characters processed so far.\n *\n * @return     mixed   If only two parameters were passed to this function,\n *                     the values parsed will be returned as an array.\n *                     Otherwise, if optional parameters are passed, the\n *                     function will return the number of assigned values.\n *                     The optional parameters must be passed by reference.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "chr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.chr.php )\n *\n * Returns a one-character string containing the character specified by\n * ascii.\n *\n * This function complements ord().\n *\n * @ascii      int     The ascii code.\n *\n * @return     string  Returns the specified character.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "ascii", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "ord", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ord.php )\n *\n * Returns the ASCII value of the first character of string.\n *\n * This function complements chr().\n *\n * @str        string  A character.\n *\n * @return     int     Returns the ASCII value as an integer.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "money_format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.money-format.php )\n *\n * money_format() returns a formatted version of number. This function\n * wraps the C library function strfmon(), with the difference that this\n * implementation converts only one number at a time.\n *\n * @format     string  The format specification consists of the following\n *                     sequence: % character Flags\n *\n *                     One or more of the optional flags below can be\n *                     used: =f\n *\n *                     The character = followed by a (single byte)\n *                     character f to be used as the numeric fill\n *                     character. The default fill character is space.\n * @number     float   Disable the use of grouping characters (as defined\n *                     by the current locale).\n *\n * @return     mixed   Returns the formatted string. Characters before and\n *                     after the formatting string will be returned\n *                     unchanged. Non-numeric number causes returning NULL\n *                     and emitting E_WARNING.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "number", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "number_format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.number-format.php )\n *\n * This function accepts either one, two, or four parameters (not three):\n *\n * If only one parameter is given, number will be formatted without\n * decimals, but with a comma (\",\") between every group of thousands.\n *\n * If two parameters are given, number will be formatted with decimals\n * decimals with a dot (\".\") in front, and a comma (\",\") between every\n * group of thousands.\n *\n * If all four parameters are given, number will be formatted with\n * decimals decimals, dec_point instead of a dot (\".\") before the decimals\n * and thousands_sep instead of a comma (\",\") between every group of\n * thousands.\n *\n * @number     float   The number being formatted.\n * @decimals   int     Sets the number of decimal points.\n * @dec_point  string  Sets the separator for the decimal point.\n * @thousands_sep\n *             string  Sets the thousands separator.\n *\n *                     Only the first character of thousands_sep is used.\n *                     For example, if you use bar as thousands_sep on the\n *                     number 1000, number_format() will return 1b000.\n *\n * @return     string  A formatted version of number.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "number", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "decimals", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "dec_point", "", (const char *)0x14 /* KindOfString */, "s:1:\".\";", (const char *)8, "\".\"", (const char *)3, NULL,
  (const char *)0x2000, "thousands_sep", "", (const char *)0x14 /* KindOfString */, "s:1:\",\";", (const char *)8, "\",\"", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strcmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strcmp.php )\n *\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strncmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strncmp.php )\n *\n * This function is similar to strcmp(), with the difference that you can\n * specify the (upper limit of the) number of characters from each string\n * to be used in the comparison.\n *\n * Note that this comparison is case sensitive.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n * @len        int     Number of characters to use in the comparison.\n *\n * @return     mixed   Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strnatcmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strnatcmp.php )\n *\n * This function implements a comparison algorithm that orders\n * alphanumeric strings in the way a human being would, this is described\n * as a \"natural ordering\". Note that this comparison is case sensitive.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Similar to other string comparison functions, this\n *                     one returns < 0 if str1 is less than str2; > 0 if\n *                     str1 is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strcasecmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strcasecmp.php )\n *\n * Binary safe case-insensitive string comparison.\n *\n * @str1       string  The first string\n * @str2       string  The second string\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strncasecmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strncasecmp.php )\n *\n * This function is similar to strcasecmp(), with the difference that you\n * can specify the (upper limit of the) number of characters from each\n * string to be used in the comparison.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n * @len        int     The length of strings to be used in the comparison.\n *\n * @return     mixed   Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strnatcasecmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strnatcasecmp.php )\n *\n * This function implements a comparison algorithm that orders\n * alphanumeric strings in the way a human being would. The behaviour of\n * this function is similar to strnatcmp(), except that the comparison is\n * not case sensitive. For more information see: Martin Pool's  Natural\n * Order String Comparison page.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Similar to other string comparison functions, this\n *                     one returns < 0 if str1 is less than str2 > 0 if\n *                     str1 is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strcoll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strcoll.php )\n *\n * Note that this comparison is case sensitive, and unlike strcmp() this\n * function is not binary safe.\n *\n * strcoll() uses the current locale for doing the comparisons. If the\n * current locale is C or POSIX, this function is equivalent to strcmp().\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n *\n * @return     int     Returns < 0 if str1 is less than str2; > 0 if str1\n *                     is greater than str2, and 0 if they are equal.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "substr_compare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.substr-compare.php )\n *\n * substr_compare() compares main_str from position offset with str up to\n * length characters.\n *\n * @main_str   string  The main string being compared.\n * @str        string  The secondary string being compared.\n * @offset     int     The start position for the comparison. If negative,\n *                     it starts counting from the end of the string.\n * @length     int     The length of the comparison. The default value is\n *                     the largest of the length of the str compared to the\n *                     length of main_str less the offset.\n * @case_insensitivity\n *             bool    If case_insensitivity is TRUE, comparison is case\n *                     insensitive.\n *\n * @return     mixed   Returns < 0 if main_str from position offset is less\n *                     than str, > 0 if it is greater than str, and 0 if\n *                     they are equal. If offset is equal to or greater\n *                     than the length of main_str or length is set and is\n *                     less than 1, substr_compare() prints a warning and\n *                     returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "main_str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "INT_MAX", (const char *)7, NULL,
  (const char *)0x2000, "case_insensitivity", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strchr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strchr.php )\n *\n *\n * @haystack   string\n * @needle     mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strrchr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strrchr.php )\n *\n * This function returns the portion of haystack which starts at the last\n * occurrence of needle and goes until the end of haystack.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   If needle contains more than one character, only the\n *                     first is used. This behavior is different from that\n *                     of strstr().\n *\n *                     If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n *\n * @return     mixed   This function returns the portion of string, or\n *                     FALSE if needle is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strstr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strstr.php )\n *\n * Returns part of haystack string from the first occurrence of needle to\n * the end of haystack.\n *\n * This function is case-sensitive. For case-insensitive searches, use\n * stristr().\n *\n * If you only want to determine if a particular needle occurs within\n * haystack, use the faster and less memory intensive function strpos()\n * instead.\n *\n * @haystack   string  The input string.\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @before_needle\n *             bool    If TRUE, strstr() returns the part of the haystack\n *                     before the first occurrence of the needle (excluding\n *                     the needle).\n *\n * @return     mixed   Returns the portion of string, or FALSE if needle is\n *                     not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "before_needle", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "stristr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stristr.php )\n *\n * Returns all of haystack from the first occurrence of needle to the end.\n * needle and haystack are examined in a case-insensitive manner.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n *\n * @return     mixed   Returns the matched substring. If needle is not\n *                     found, returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strpbrk", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strpbrk.php )\n *\n * strpbrk() searches the haystack string for a char_list.\n *\n * @haystack   string  The string where char_list is looked for.\n * @char_list  string  This parameter is case sensitive.\n *\n * @return     mixed   Returns a string starting from the character found,\n *                     or FALSE if it is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "char_list", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strpos.php )\n *\n * Returns the numeric position of the first occurrence of needle in the\n * haystack string. Unlike the strrpos() before PHP 5, this function can\n * take a full string as the needle parameter and the entire string will be\n * used.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @offset     int     The optional offset parameter allows you to specify\n *                     which character in haystack to start searching. The\n *                     position returned is still relative to the beginning\n *                     of haystack.\n *\n * @return     mixed   Returns the position as an integer. If needle is not\n *                     found, strpos() will return boolean FALSE.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "stripos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.stripos.php )\n *\n * Returns the numeric position of the first occurrence of needle in the\n * haystack string.\n *\n * Unlike strpos(), stripos() is case-insensitive.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   Note that the needle may be a string of one or more\n *                     characters.\n *\n *                     If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @offset     int     The optional offset parameter allows you to specify\n *                     which character in haystack to start searching. The\n *                     position returned is still relative to the beginning\n *                     of haystack.\n *\n * @return     mixed   If needle is not found, stripos() will return\n *                     boolean FALSE. WarningThis function may return\n *                     Boolean FALSE, but may also return a non-Boolean\n *                     value which evaluates to FALSE, such as 0 or \"\".\n *                     Please read the section on Booleans for more\n *                     information. Use the === operator for testing the\n *                     return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strrpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strrpos.php )\n *\n * Returns the numeric position of the last occurrence of needle in the\n * haystack string. Note that the needle in this case can only be a single\n * character in PHP 4. If a string is passed as the needle, then only the\n * first character of that string will be used.\n *\n * @haystack   string  The string to search in.\n * @needle     mixed   If needle is not a string, it is converted to an\n *                     integer and applied as the ordinal value of a\n *                     character.\n * @offset     int     May be specified to begin searching an arbitrary\n *                     number of characters into the string. Negative\n *                     values will stop searching at an arbitrary point\n *                     prior to the end of the string.\n *\n * @return     mixed   Returns the position where the needle exists.\n *                     Returns FALSE if the needle was not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strripos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strripos.php )\n *\n * Find position of last occurrence of a case-insensitive string in a\n * string. Unlike strrpos(), strripos() is case-insensitive.\n *\n * @haystack   string  The string to search in\n * @needle     mixed   Note that the needle may be a string of one or more\n *                     characters.\n * @offset     int     The offset parameter may be specified to begin\n *                     searching an arbitrary number of characters into the\n *                     string.\n *\n *                     Negative offset values will start the search at\n *                     offset characters from the start of the string.\n *\n * @return     mixed   Returns the numerical position of the last\n *                     occurrence of needle. Also note that string\n *                     positions start at 0, and not 1.\n *\n *                     If needle is not found, FALSE is returned.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "substr_count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.substr-count.php )\n *\n * substr_count() returns the number of times the needle substring occurs\n * in the haystack string. Please note that needle is case sensitive.\n *\n * This function doesn't count overlapped substrings. See the example\n * below!\n *\n * @haystack   string  The string to search in\n * @needle     string  The substring to search for\n * @offset     int     The offset where to start counting\n * @length     int     The maximum length after the specified offset to\n *                     search for the substring. It outputs a warning if\n *                     the offset plus the length is greater than the\n *                     haystack length.\n *\n * @return     mixed   This functions returns an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strspn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strspn.php )\n *\n * Returns the length of the first group of consecutive characters from\n * mask found in subject.\n *\n * If start and length are omitted, then all of subject will be examined.\n * If they are included, then the effect will be the same as calling\n * strspn(substr($subject, $start, $length), $mask) (see substr for more\n * information).\n *\n * The line of code:\n *\n * will assign 2 to $var, because the string \"42\" is the first segment\n * from subject to consist only of characters contained within\n * \"1234567890\".\n *\n * @str1       string  The string to examine.\n * @str2       string  The list of allowable characters to include in\n *                     counted segments.\n * @start      int     The position in subject to start searching.\n *\n *                     If start is given and is non-negative, then\n *                     strspn() will begin examining subject at the\n *                     start'th position. For instance, in the string\n *                     'abcdef', the character at position 0 is 'a', the\n *                     character at position 2 is 'c', and so forth.\n *\n *                     If start is given and is negative, then strspn()\n *                     will begin examining subject at the start'th\n *                     position from the end of subject.\n * @length     int     The length of the segment from subject to examine.\n *\n *                     If length is given and is non-negative, then\n *                     subject will be examined for length characters after\n *                     the starting position.\n *\n *                     If lengthis given and is negative, then subject\n *                     will be examined from the starting position up to\n *                     length characters from the end of subject.\n *\n * @return     mixed   Returns the length of the initial segment of str1\n *                     which consists entirely of characters in str2.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strcspn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strcspn.php )\n *\n * Returns the length of the initial segment of str1 which does not\n * contain any of the characters in str2.\n *\n * @str1       string  The first string.\n * @str2       string  The second string.\n * @start      int     The start position of the string to examine.\n * @length     int     The length of the string to examine.\n *\n * @return     mixed   Returns the length of the segment as an integer.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "strlen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.strlen.php )\n *\n * Returns the length of the given string.\n *\n * @vstr       mixed   The string being measured for length.\n *\n * @return     mixed   The length of the string on success, and 0 if the\n *                     string is empty.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "vstr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "count_chars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.count-chars.php )\n *\n * Counts the number of occurrences of every byte-value (0..255) in string\n * and returns it in various ways.\n *\n * @str        string  The examined string.\n * @mode       int     See return values.\n *\n * @return     mixed   Depending on mode count_chars() returns one of the\n *                     following: 0 - an array with the byte-value as key\n *                     and the frequency of every byte as value. 1 - same\n *                     as 0 but only byte-values with a frequency greater\n *                     than zero are listed. 2 - same as 0 but only\n *                     byte-values with a frequency equal to zero are\n *                     listed. 3 - a string containing all unique\n *                     characters is returned. 4 - a string containing all\n *                     not used characters is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "str_word_count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.str-word-count.php )\n *\n * Counts the number of words inside string. If the optional format is not\n * specified, then the return value will be an integer representing the\n * number of words found. In the event the format is specified, the return\n * value will be an array, content of which is dependent on the format. The\n * possible value for the format and the resultant outputs are listed\n * below.\n *\n * For the purpose of this function, 'word' is defined as a locale\n * dependent string containing alphabetic characters, which also may\n * contain, but not start with \"'\" and \"-\" characters.\n *\n * @str        string  The string\n * @format     int     Specify the return value of this function. The\n *                     current supported values are: 0 - returns the number\n *                     of words found 1 - returns an array containing all\n *                     the words found inside the string 2 - returns an\n *                     associative array, where the key is the numeric\n *                     position of the word inside the string and the value\n *                     is the actual word itself\n * @charlist   string  A list of additional characters which will be\n *                     considered as 'word'\n *\n * @return     mixed   Returns an array or an integer, depending on the\n *                     format chosen.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "format", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "charlist", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "levenshtein", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.levenshtein.php )\n *\n * The Levenshtein distance is defined as the minimal number of characters\n * you have to replace, insert or delete to transform str1 into str2. The\n * complexity of the algorithm is O(m*n), where n and m are the length of\n * str1 and str2 (rather good when compared to similar_text(), which is\n * O(max(n,m)**3), but still expensive).\n *\n * In its simplest form the function will take only the two strings as\n * parameter and will calculate just the number of insert, replace and\n * delete operations needed to transform str1 into str2.\n *\n * A second variant will take three additional parameters that define the\n * cost of insert, replace and delete operations. This is more general and\n * adaptive than variant one, but not as efficient.\n *\n * @str1       string  One of the strings being evaluated for Levenshtein\n *                     distance.\n * @str2       string  One of the strings being evaluated for Levenshtein\n *                     distance.\n * @cost_ins   int     Defines the cost of insertion.\n * @cost_rep   int     Defines the cost of replacement.\n * @cost_del   int     Defines the cost of deletion.\n *\n * @return     int     This function returns the Levenshtein-Distance\n *                     between the two argument strings or -1, if one of\n *                     the argument strings is longer than the limit of 255\n *                     characters.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cost_ins", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  (const char *)0x2000, "cost_rep", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  (const char *)0x2000, "cost_del", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "similar_text", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.similar-text.php )\n *\n * This calculates the similarity between two strings as described in\n * Oliver [1993]. Note that this implementation does not use a stack as in\n * Oliver's pseudo code, but recursive calls which may or may not speed up\n * the whole process. Note also that the complexity of this algorithm is\n * O(N**3) where N is the length of the longest string.\n *\n * @first      string  The first string.\n * @second     string  The second string.\n * @percent    mixed   By passing a reference as third argument,\n *                     similar_text() will calculate the similarity in\n *                     percent for you.\n *\n * @return     int     Returns the number of matching chars in both\n *                     strings.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "first", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "second", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "percent", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "soundex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.soundex.php )\n *\n * Calculates the soundex key of str.\n *\n * Soundex keys have the property that words pronounced similarly produce\n * the same soundex key, and can thus be used to simplify searches in\n * databases where you know the pronunciation but not the spelling. This\n * soundex function returns a string 4 characters long, starting with a\n * letter.\n *\n * This particular soundex function is one described by Donald Knuth in\n * \"The Art Of Computer Programming, vol. 3: Sorting And Searching\",\n * Addison-Wesley (1973), pp. 391-392.\n *\n * @str        string  The input string.\n *\n * @return     mixed   Returns the soundex key as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10106040, "metaphone", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.metaphone.php )\n *\n * Calculates the metaphone key of str.\n *\n * Similar to soundex() metaphone creates the same key for similar\n * sounding words. It's more accurate than soundex() as it knows the basic\n * rules of English pronunciation. The metaphone generated keys are of\n * variable length.\n *\n * Metaphone was developed by Lawrence Philips <lphilips at verity dot\n * com>. It is described in [\"Practical Algorithms for Programmers\",\n * Binstock & Rex, Addison Wesley, 1995].\n *\n * @str        string  The input string.\n * @phones     int     This parameter restricts the returned metaphone key\n *                     to phonemes characters in length. The default value\n *                     of 0 means no restriction.\n *\n * @return     mixed   Returns the metaphone key as a string, or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "phones", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "parse_str", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.parse-str.php )\n *\n * Parses str as if it were the query string passed via a URL and sets\n * variables in the current scope.\n *\n * To get the current QUERY_STRING, you may use the variable\n * $_SERVER['QUERY_STRING']. Also, you may want to read the section on\n * variables from external sources.\n *\n * The magic_quotes_gpc setting affects the output of this function, as\n * parse_str() uses the same mechanism that PHP uses to populate the $_GET,\n * $_POST, etc. variables.\n *\n * @str        string  The input string.\n * @arr        mixed   If the second parameter arr is present, variables\n *                     are stored in this variable as array elements\n *                     instead.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_list_encodings", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-list-encodings.php )\n *\n * Returns an array containing all supported encodings.\n *\n * @return     vector  Returns a numerically indexed array.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_list_encodings_alias_names", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-list-encodings-alias-names.php )\n *\n *\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_list_mime_names", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-list-mime-names.php\n * )\n *\n *\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_check_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-check-encoding.php )\n *\n * Checks if the specified byte stream is valid for the specified\n * encoding. It is useful to prevent so-called \"Invalid Encoding Attack\".\n *\n * @var        string  The byte stream to check. If it is omitted, this\n *                     function checks all the input from the beginning of\n *                     the request.\n * @encoding   string  The expected encoding.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "var", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_convert_case", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-convert-case.php )\n *\n * Performs case folding on a string, converted in the way specified by\n * mode.\n *\n * @str        string  The string being converted.\n * @mode       int     The mode of the conversion. It can be one of\n *                     MB_CASE_UPPER, MB_CASE_LOWER, or MB_CASE_TITLE.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   A case folded version of string converted in the way\n *                     specified by mode.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_convert_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-convert-encoding.php\n * )\n *\n * Converts the character encoding of string str to to_encoding from\n * optionally from_encoding.\n *\n * @str        string  The string being encoded.\n * @to_encoding\n *             string  The type of encoding that str is being converted to.\n * @from_encoding\n *             mixed   Is specified by character code names before\n *                     conversion. It is either an array, or a comma\n *                     separated enumerated list. If from_encoding is not\n *                     specified, the internal encoding will be used.\n *\n *                     \"auto\" may be used, which expands to\n *                     \"ASCII,JIS,UTF-8,EUC-JP,SJIS\".\n *\n * @return     mixed   The encoded string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "to_encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "from_encoding", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_convert_kana", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-convert-kana.php )\n *\n * Performs a \"han-kaku\" - \"zen-kaku\" conversion for string str. This\n * function is only useful for Japanese.\n *\n * @str        string  The string being converted.\n * @option     string  The conversion option.\n *\n *                     Specify with a combination of following options.\n *                     Applicable Conversion Options Option Meaning r\n *                     Convert \"zen-kaku\" alphabets to \"han-kaku\" R Convert\n *                     \"han-kaku\" alphabets to \"zen-kaku\" n Convert\n *                     \"zen-kaku\" numbers to \"han-kaku\" N Convert\n *                     \"han-kaku\" numbers to \"zen-kaku\" a Convert\n *                     \"zen-kaku\" alphabets and numbers to \"han-kaku\" A\n *                     Convert \"han-kaku\" alphabets and numbers to\n *                     \"zen-kaku\" (Characters included in \"a\", \"A\" options\n *                     are U+0021 - U+007E excluding U+0022, U+0027,\n *                     U+005C, U+007E) s Convert \"zen-kaku\" space to\n *                     \"han-kaku\" (U+3000 -> U+0020) S Convert \"han-kaku\"\n *                     space to \"zen-kaku\" (U+0020 -> U+3000) k Convert\n *                     \"zen-kaku kata-kana\" to \"han-kaku kata-kana\" K\n *                     Convert \"han-kaku kata-kana\" to \"zen-kaku kata-kana\"\n *                     h Convert \"zen-kaku hira-gana\" to \"han-kaku\n *                     kata-kana\" H Convert \"han-kaku kata-kana\" to\n *                     \"zen-kaku hira-gana\" c Convert \"zen-kaku kata-kana\"\n *                     to \"zen-kaku hira-gana\" C Convert \"zen-kaku\n *                     hira-gana\" to \"zen-kaku kata-kana\" V Collapse voiced\n *                     sound notation and convert them into a character.\n *                     Use with \"K\",\"H\"\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The converted string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "mb_convert_variables", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-convert-variables.php )\n *\n * Converts character encoding of variables vars in encoding from_encoding\n * to encoding to_encoding.\n *\n * mb_convert_variables() join strings in Array or Object to detect\n * encoding, since encoding detection tends to fail for short strings.\n * Therefore, it is impossible to mix encoding in single array or object.\n *\n * @to_encoding\n *             string  The encoding that the string is being converted to.\n * @from_encoding\n *             mixed   from_encoding is specified as an array or comma\n *                     separated string, it tries to detect encoding from\n *                     from-coding. When from_encoding is omitted,\n *                     detect_order is used.\n * @vars       mixed   vars is the reference to the variable being\n *                     converted. String, Array and Object are accepted.\n *                     mb_convert_variables() assumes all parameters have\n *                     the same encoding.\n *\n * @return     mixed   The character encoding before conversion for\n *                     success, or FALSE for failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "to_encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "from_encoding", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "vars", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_decode_mimeheader", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-decode-mimeheader.php )\n *\n * Decodes encoded-word string str in MIME header.\n *\n * @str        string  The string being decoded.\n *\n * @return     mixed   The decoded string in internal character encoding.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_decode_numericentity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-decode-numericentity.php )\n *\n * Convert numeric string reference of string str in a specified block to\n * character.\n *\n * @str        string  The string being decoded.\n * @convmap    mixed   convmap is an array that specifies the code area to\n *                     convert.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The converted string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "convmap", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_detect_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-detect-encoding.php\n * )\n *\n * Detects character encoding in string str.\n *\n * @str        string  The string being detected.\n * @encoding_list\n *             mixed   encoding_list is list of character encoding.\n *                     Encoding order may be specified by array or comma\n *                     separated list string.\n *\n *                     If encoding_list is omitted, detect_order is used.\n * @strict     mixed   strict specifies whether to use the strict encoding\n *                     detection or not. Default is FALSE.\n *\n * @return     mixed   The detected character encoding or FALSE if the\n *                     encoding cannot be detected from the given string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding_list", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "strict", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_detect_order", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-detect-order.php )\n *\n * Sets the automatic character encoding detection order to encoding_list.\n *\n * @encoding_list\n *             mixed   encoding_list is an array or comma separated list of\n *                     character encoding. (\"auto\" is expanded to \"ASCII,\n *                     JIS, UTF-8, EUC-JP, SJIS\")\n *\n *                     If encoding_list is omitted, it returns the current\n *                     character encoding detection order as array.\n *\n *                     This setting affects mb_detect_encoding() and\n *                     mb_send_mail().\n *\n *                     mbstring currently implements the following\n *                     encoding detection filters. If there is an invalid\n *                     byte sequence for the following encodings, encoding\n *                     detection will fail. UTF-8, UTF-7, ASCII,\n *                     EUC-JP,SJIS, eucJP-win, SJIS-win, JIS, ISO-2022-JP\n *\n *                     For ISO-8859-*, mbstring always detects as\n *                     ISO-8859-*.\n *\n *                     For UTF-16, UTF-32, UCS2 and UCS4, encoding\n *                     detection will fail always.\n *\n *                     Example #1 Useless detect order example\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoding_list", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_encode_mimeheader", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-encode-mimeheader.php )\n *\n * Encodes a given string str by the MIME header encoding scheme.\n *\n * @str        string  The string being encoded.\n * @charset    string  charset specifies the name of the character set in\n *                     which str is represented in. The default value is\n *                     determined by the current NLS setting\n *                     (mbstring.language). mb_internal_encoding() should\n *                     be set to same encoding.\n * @transfer_encoding\n *             string  transfer_encoding specifies the scheme of MIME\n *                     encoding. It should be either \"B\" (Base64) or \"Q\"\n *                     (Quoted-Printable). Falls back to \"B\" if not given.\n * @linefeed   string\n * @indent     int     Indentation of the first line (number of characters\n *                     in the header before str).\n *\n * @return     mixed   A converted version of the string represented in\n *                     ASCII.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "charset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "transfer_encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "linefeed", "", (const char *)0x14 /* KindOfString */, "s:2:\"\r\n\";", (const char *)9, "\"\\r\\n\"", (const char *)6, NULL,
  (const char *)0x2000, "indent", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_encode_numericentity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-encode-numericentity.php )\n *\n * Converts specified character codes in string str from HTML numeric\n * character reference to character code.\n *\n * @str        string  The string being encoded.\n * @convmap    mixed   convmap is array specifies code area to convert.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The converted string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "convmap", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_match", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-match.php )\n *\n * A regular expression match for a multibyte string\n *\n * @pattern    string  The regular expression pattern.\n * @str        string  The string being evaluated.\n * @option     string\n *\n * @return     bool    Returns TRUE if string matches the regular\n *                     expression pattern, FALSE if not.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-replace.php )\n *\n *\n * @pattern    mixed   The regular expression pattern.\n *\n *                     Multibyte characters may be used in pattern.\n * @replacement\n *             string  The replacement text.\n * @str        string  The string being checked.\n * @option     string  Matching condition can be set by option parameter.\n *                     If i is specified for this parameter, the case will\n *                     be ignored. If x is specified, white space will be\n *                     ignored. If m is specified, match will be executed\n *                     in multiline mode and line break will be included in\n *                     '.'. If p is specified, match will be executed in\n *                     POSIX mode, line break will be considered as normal\n *                     character. If e is specified, replacement string\n *                     will be evaluated as PHP expression.\n *\n * @return     mixed   The resultant string on success, or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search_getpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-ereg-search-getpos.php )\n *\n *\n * @return     int     mb_ereg_search_getpos() returns the point to start\n *                     regular expression match for mb_ereg_search(),\n *                     mb_ereg_search_pos(), mb_ereg_search_regs(). The\n *                     position is represented by bytes from the head of\n *                     string.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search_getregs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-ereg-search-getregs.php )\n *\n *\n * @return     mixed   An array including the sub-string of matched part by\n *                     last mb_ereg_search(), mb_ereg_search_pos(),\n *                     mb_ereg_search_regs(). If there are some matches,\n *                     the first element will have the matched sub-string,\n *                     the second element will have the first part grouped\n *                     with brackets, the third element will have the\n *                     second part grouped with brackets, and so on. It\n *                     returns FALSE on error;\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search_init", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search-init.php\n * )\n *\n * mb_ereg_search_init() sets string and pattern for a multibyte regular\n * expression. These values are used for mb_ereg_search(),\n * mb_ereg_search_pos(), and mb_ereg_search_regs().\n *\n * @str        string  The search string.\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search_pos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search-pos.php\n * )\n *\n * Returns position and length of a matched part of the multibyte regular\n * expression for a predefined multibyte string\n *\n * The string for match is specified by mb_ereg_search_init(). If it is\n * not specified, the previous one will be used.\n *\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     mixed   An array including the position of a matched part\n *                     for a multibyte regular expression. The first\n *                     element of the array will be the beginning of\n *                     matched part, the second element will be length\n *                     (bytes) of matched part. It returns FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search_regs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search-regs.php\n * )\n *\n * Returns the matched part of a multibyte regular expression.\n *\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     mixed   mb_ereg_search_regs() executes the multibyte regular\n *                     expression match, and if there are some matched\n *                     part, it returns an array including substring of\n *                     matched part as first element, the first grouped\n *                     part with brackets as second element, the second\n *                     grouped part as third element, and so on. It returns\n *                     FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search_setpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-ereg-search-setpos.php )\n *\n *\n * @position   int     The position to set.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "position", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg_search", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search.php )\n *\n * Performs a multibyte regular expression match for a predefined\n * multibyte string.\n *\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     mixed   mb_ereg_search() returns TRUE if the multibyte\n *                     string matches with the regular expression, or FALSE\n *                     otherwise. The string for matching is set by\n *                     mb_ereg_search_init(). If pattern is not specified,\n *                     the previous one is used.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_ereg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg.php )\n *\n *\n * @pattern    mixed   The search pattern.\n * @str        string  The search string.\n * @regs       mixed   Contains a substring of the matched string.\n *\n * @return     mixed   Executes the regular expression match with multibyte\n *                     support, and returns 1 if matches are found. If the\n *                     optional regs parameter was specified, the function\n *                     returns the byte length of matched part, and the\n *                     array regs will contain the substring of matched\n *                     string. The function returns 1 if it matches with\n *                     the empty string. If no matches are found or an\n *                     error happens, FALSE will be returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "regs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_eregi_replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-eregi-replace.php )\n *\n *\n * @pattern    mixed   The regular expression pattern. Multibyte characters\n *                     may be used. The case will be ignored.\n * @replacement\n *             string  The replacement text.\n * @str        string  The searched string.\n * @option     string  option has the same meaning as in mb_ereg_replace().\n *\n * @return     mixed   The resultant string or FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_eregi", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-eregi.php )\n *\n *\n * @pattern    mixed   The regular expression pattern.\n * @str        string  The string being searched.\n * @regs       mixed   Contains a substring of the matched string.\n *\n * @return     mixed   Executes the regular expression match with multibyte\n *                     support, and returns 1 if matches are found. If the\n *                     optional regs parameter was specified, the function\n *                     returns the byte length of matched part, and the\n *                     array regs will contain the substring of matched\n *                     string. The function returns 1 if it matches with\n *                     the empty string. If no matches are found or an\n *                     error happens, FALSE will be returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "regs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_get_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-get-info.php )\n *\n *\n * @type       string  If type isn't specified or is specified to \"all\", an\n *                     array having the elements \"internal_encoding\",\n *                     \"http_output\", \"http_input\", \"func_overload\",\n *                     \"mail_charset\", \"mail_header_encoding\",\n *                     \"mail_body_encoding\" will be returned.\n *\n *                     If type is specified as \"http_output\",\n *                     \"http_input\", \"internal_encoding\", \"func_overload\",\n *                     the specified setting parameter will be returned.\n *\n * @return     mixed   An array of type information if type is not\n *                     specified, otherwise a specific type.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_http_input", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-http-input.php )\n *\n *\n * @type       string  Input string specifies the input type. \"G\" for GET,\n *                     \"P\" for POST, \"C\" for COOKIE, \"S\" for string, \"L\"\n *                     for list, and \"I\" for the whole list (will return\n *                     array). If type is omitted, it returns the last\n *                     input type processed.\n *\n * @return     mixed   The character encoding name, as per the type. If\n *                     mb_http_input() does not process specified HTTP\n *                     input, it returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_http_output", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-http-output.php )\n *\n * Set/Get the HTTP output character encoding. Output after this function\n * is converted to encoding.\n *\n * @encoding   string  If encoding is set, mb_http_output() sets the HTTP\n *                     output character encoding to encoding.\n *\n *                     If encoding is omitted, mb_http_output() returns\n *                     the current HTTP output character encoding.\n *\n * @return     mixed   If encoding is omitted, mb_http_output() returns the\n *                     current HTTP output character encoding. Otherwise,\n *                     Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_internal_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-internal-encoding.php )\n *\n * Set/Get the internal character encoding\n *\n * @encoding   string  encoding is the character encoding name used for the\n *                     HTTP input character encoding conversion, HTTP\n *                     output character encoding conversion, and the\n *                     default character encoding for string functions\n *                     defined by the mbstring module.\n *\n * @return     mixed   If encoding is set, then Returns TRUE on success or\n *                     FALSE on failure. If encoding is omitted, then the\n *                     current character encoding name is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_language", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-language.php )\n *\n * Set/Get the current language.\n *\n * @language   string  Used for encoding e-mail messages. Valid languages\n *                     are \"Japanese\", \"ja\",\"English\",\"en\" and \"uni\"\n *                     (UTF-8). mb_send_mail() uses this setting to encode\n *                     e-mail.\n *\n *                     Language and its setting is ISO-2022-JP/Base64 for\n *                     Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted\n *                     printable for English.\n *\n * @return     mixed   If language is set and language is valid, it returns\n *                     TRUE. Otherwise, it returns FALSE. When language is\n *                     omitted, it returns the language name as a string.\n *                     If no language is set previously, it then returns\n *                     FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "language", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_output_handler", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-output-handler.php )\n *\n * mb_output_handler() is ob_start() callback function.\n * mb_output_handler() converts characters in the output buffer from\n * internal character encoding to HTTP output character encoding.\n *\n * @contents   string  The contents of the output buffer.\n * @status     int     The status of the output buffer.\n *\n * @return     string  The converted string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "contents", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "status", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_parse_str", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-parse-str.php )\n *\n * Parses GET/POST/COOKIE data and sets global variables. Since PHP does\n * not provide raw POST/COOKIE data, it can only be used for GET data for\n * now. It parses URL encoded data, detects encoding, converts coding to\n * internal encoding and set values to the result array or global\n * variables.\n *\n * @encoded_string\n *             string  The URL encoded data.\n * @result     mixed   An array containing decoded and character encoded\n *                     converted values.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "encoded_string", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_preferred_mime_name", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-preferred-mime-name.php )\n *\n * Get a MIME charset string for a specific encoding.\n *\n * @encoding   string  The encoding being checked.\n *\n * @return     mixed   The MIME charset string for character encoding\n *                     encoding.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_regex_encoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-regex-encoding.php )\n *\n * Returns the current encoding for a multibyte regex as a string.\n *\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the character encoding used by multibyte\n *                     regex functions.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_regex_set_options", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-regex-set-options.php )\n *\n *\n * @options    string  The options to set. This is a a string where each\n *                     character is an option. To set a mode, the mode\n *                     character must be the last one set, however there\n *                     can only be set one mode but multiple options. Regex\n *                     options Option Meaning i Ambiguity match on x\n *                     Enables extended pattern form m '.' matches with\n *                     newlines s '^' -> '\\A', '$' -> '\\Z' p Same as both\n *                     the m and s options l Finds longest matches n\n *                     Ignores empty matches e eval() resulting code Regex\n *                     syntax modes Mode Meaning j Java (Sun\n *                     java.util.regex) u GNU regex g grep c Emacs r Ruby z\n *                     Perl b POSIX Basic regex d POSIX Extended regex\n *\n * @return     string  The previous options. If options is omitted, it\n *                     returns the string that describes the current\n *                     options.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "options", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_send_mail", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-send-mail.php )\n *\n * Sends email. Headers and messages are converted and encoded according\n * to the mb_language() setting. It's a wrapper function for mail(), so see\n * also mail() for details.\n *\n * @to         string  The mail addresses being sent to. Multiple\n *                     recipients may be specified by putting a comma\n *                     between each address in to. This parameter is not\n *                     automatically encoded.\n * @subject    string  The subject of the mail.\n * @message    string  The message of the mail.\n * @headers    string  additional_headers is inserted at the end of the\n *                     header. This is typically used to add extra headers.\n *                     Multiple extra headers are separated with a newline\n *                     (\"\\n\").\n * @extra_cmd  string  additional_parameter is a MTA command line\n *                     parameter. It is useful when setting the correct\n *                     Return-Path header when using sendmail.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "to", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "subject", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "extra_cmd", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_split", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-split.php )\n *\n *\n * @pattern    string  The regular expression pattern.\n * @str        string  The string being split.\n * @count      int     If optional parameter limit is specified, it will be\n *                     split in limit elements as maximum.\n *\n * @return     mixed   The result as an array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "pattern", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strcut", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strcut.php )\n *\n * mb_strcut() performs equivalent operation as mb_substr() with different\n * method. If start position is multi-byte character's second byte or\n * larger, it starts from first byte of multi-byte character.\n *\n * It subtracts string from str that is shorter than length AND character\n * that is not part of multi-byte string or not being middle of shift\n * sequence.\n *\n * @str        string  The string being cut.\n * @start      int     The position that begins the cut.\n * @length     int     The string being decoded.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   mb_strcut() returns the portion of str specified by\n *                     the start and length parameters.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strimwidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strimwidth.php )\n *\n * Truncates string str to specified width.\n *\n * @str        string  The string being decoded.\n * @start      int     The start position offset. Number of characters from\n *                     the beginning of string. (First character is 0)\n * @width      int     The width of the desired trim.\n * @trimmarker string  A string that is added to the end of string when\n *                     string is truncated.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The truncated string. If trimmarker is set,\n *                     trimmarker is appended to the return value.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "trimmarker", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_stripos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-stripos.php )\n *\n * mb_stripos() returns the numeric position of the first occurrence of\n * needle in the haystack string. Unlike mb_strpos(), mb_stripos() is\n * case-insensitive. If needle is not found, it returns FALSE.\n *\n * @haystack   string  The string from which to get the position of the\n *                     first occurrence of needle\n * @needle     string  The string to find in haystack\n * @offset     int     The position in haystack to start searching\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Return the numeric position of the first occurrence\n *                     of needle in the haystack string, or FALSE if needle\n *                     is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_stristr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-stristr.php )\n *\n * mb_stristr() finds the first occurrence of needle in haystack and\n * returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is\n * case-insensitive. If needle is not found, it returns FALSE.\n *\n * @haystack   string  The string from which to get the first occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the first occurrence of\n *                     needle. If set to FALSE, it returns all of haystack\n *                     from the first occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack, or FALSE if needle\n *                     is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "part", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strlen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strlen.php )\n *\n * Gets the length of a string.\n *\n * @str        string  The string being checked for length.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the number of characters in string str\n *                     having character encoding encoding. A multi-byte\n *                     character is counted as 1.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strpos.php )\n *\n * Finds position of the first occurrence of a string in a string.\n *\n * Performs a multi-byte safe strpos() operation based on number of\n * characters. The first character's position is 0, the second character\n * position is 1, and so on.\n *\n * @haystack   string  The string being checked.\n * @needle     string  The position counted from the beginning of haystack.\n * @offset     int     The search offset. If it is not specified, 0 is\n *                     used.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the numeric position of the first occurrence\n *                     of needle in the haystack string. If needle is not\n *                     found, it returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strrchr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strrchr.php )\n *\n * mb_strrchr() finds the last occurrence of needle in haystack and\n * returns the portion of haystack. If needle is not found, it returns\n * FALSE.\n *\n * @haystack   string  The string from which to get the last occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the last occurrence of needle.\n *                     If set to FALSE, it returns all of haystack from the\n *                     last occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack. or FALSE if needle\n *                     is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "part", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strrichr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strrichr.php )\n *\n * mb_strrichr() finds the last occurrence of needle in haystack and\n * returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is\n * case-insensitive. If needle is not found, it returns FALSE.\n *\n * @haystack   string  The string from which to get the last occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the last occurrence of needle.\n *                     If set to FALSE, it returns all of haystack from the\n *                     last occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack. or FALSE if needle\n *                     is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "part", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strripos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strripos.php )\n *\n * mb_strripos() performs multi-byte safe strripos() operation based on\n * number of characters. needle position is counted from the beginning of\n * haystack. First character's position is 0. Second character position is\n * 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.\n *\n * @haystack   string  The string from which to get the position of the\n *                     last occurrence of needle\n * @needle     string  The string to find in haystack\n * @offset     int     The position in haystack to start searching\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Return the numeric position of the last occurrence\n *                     of needle in the haystack string, or FALSE if needle\n *                     is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strrpos", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strrpos.php )\n *\n * Performs a multibyte safe strrpos() operation based on the number of\n * characters. needle position is counted from the beginning of haystack.\n * First character's position is 0. Second character position is 1.\n *\n * @haystack   string  The string being checked, for the last occurrence of\n *                     needle\n * @needle     string  The string to find in haystack.\n * @offset     mixed   May be specified to begin searching an arbitrary\n *                     number of characters into the string. Negative\n *                     values will stop searching at an arbitrary point\n *                     prior to the end of the string.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the numeric position of the last occurrence\n *                     of needle in the haystack string. If needle is not\n *                     found, it returns FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strstr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strstr.php )\n *\n * mb_strstr() finds the first occurrence of needle in haystack and\n * returns the portion of haystack. If needle is not found, it returns\n * FALSE.\n *\n * @haystack   string  The string from which to get the first occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the first occurrence of\n *                     needle. If set to FALSE, it returns all of haystack\n *                     from the first occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack, or FALSE if needle\n *                     is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "part", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strtolower", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strtolower.php )\n *\n * Returns str with all alphabetic characters converted to lowercase.\n *\n * @str        string  The string being lowercased.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   str with all alphabetic characters converted to\n *                     lowercase.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strtoupper", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strtoupper.php )\n *\n * Returns str with all alphabetic characters converted to uppercase.\n *\n * @str        string  The string being uppercased.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   str with all alphabetic characters converted to\n *                     uppercase.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_strwidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strwidth.php )\n *\n * Returns the width of string str.\n *\n * Multi-byte characters are usually twice the width of single byte\n * characters.\n *\n * Characters width Chars Width U+0000 - U+0019 0 U+0020 - U+1FFF 1 U+2000\n * - U+FF60 2 U+FF61 - U+FF9F 1 U+FFA0 - 2\n *\n * @str        string  The string being decoded.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The width of string str.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_substitute_character", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-substitute-character.php )\n *\n * Specifies a substitution character when input character encoding is\n * invalid or character code does not exist in output character encoding.\n * Invalid characters may be substituted NULL (no output), string or\n * integer value (Unicode character code value).\n *\n * This setting affects mb_convert_encoding(), mb_convert_variables(),\n * mb_output_handler(), and mb_send_mail().\n *\n * @substrchar mixed   Specify the Unicode value as an integer, or as one\n *                     of the following strings: \"none\" : no output \"long\"\n *                     : Output character code value (Example: U+3000,\n *                     JIS+7E7E) \"entity\" : Output character entity\n *                     (Example: \310\200)\n *\n * @return     mixed   If substchar is set, it returns TRUE for success,\n *                     otherwise returns FALSE. If substchar is not set, it\n *                     returns the Unicode value, or \"none\" or \"long\".\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "substrchar", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_substr_count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-substr-count.php )\n *\n * Counts the number of times the needle substring occurs in the haystack\n * string.\n *\n * @haystack   string  The string being checked.\n * @needle     string  The string being found.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The number of times the needle substring occurs in\n *                     the haystack string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "haystack", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "needle", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mb_substr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.mb-substr.php )\n *\n * Performs a multi-byte safe substr() operation based on number of\n * characters. Position is counted from the beginning of str. First\n * character's position is 0. Second character position is 1, and so on.\n *\n * @str        string  The string being checked.\n * @start      int     The first position used in str.\n * @length     int     The maximum length of the returned string.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   mb_substr() returns the portion of str specified by\n *                     the start and length parameters.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "length", "", (const char *)0xa /* KindOfInt64 */, "i:2147483647;", (const char *)13, "0x7FFFFFFF", (const char *)10, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_init", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-init.php )\n *\n * Initializes a new session and return a cURL handle for use with the\n * curl_setopt(), curl_exec(), and curl_close() functions.\n *\n * @url        string  If provided, the CURLOPT_URL option will be set to\n *                     its value. You can manually set this using the\n *                     curl_setopt() function.\n *\n * @return     mixed   Returns a cURL handle on success, FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_copy_handle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-copy-handle.php )\n *\n * Copies a cURL handle keeping the same preferences.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns a new cURL handle.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_version", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-version.php )\n *\n * Returns information about the cURL version.\n *\n * @uversion   int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "uversion", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "CURLVERSION_NOW", (const char *)15, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_setopt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-setopt.php )\n *\n * Sets an option on the given cURL session handle.\n *\n * @ch         resource\n *\n * @option     int\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_setopt_array", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-setopt-array.php )\n *\n * Sets multiple options for a cURL session. This function is useful for\n * setting a large amount of cURL options without repetitively calling\n * curl_setopt().\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n * @options    vector  An array specifying which options to set and their\n *                     values. The keys should be valid curl_setopt()\n *                     constants or their integer equivalents.\n *\n * @return     bool    Returns TRUE if all options were successfully set.\n *                     If an option could not be successfully set, FALSE is\n *                     immediately returned, ignoring any future options in\n *                     the options array.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fb_curl_getopt", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fb-curl-getopt.php )\n *\n * Gets options on the given cURL session handle.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n * @opt        int     This should be one of the CURLOPT_* values.\n *\n * @return     mixed   If opt is given, returns its value. Otherwise,\n *                     returns an associative array.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opt", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-exec.php )\n *\n * Execute the given cURL session.\n *\n * This function should be called after initializing a cURL session and\n * all the options for the session are set.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n *                     However, if the CURLOPT_RETURNTRANSFER option is\n *                     set, it will return the result on success, FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_getinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-getinfo.php )\n *\n * Gets information about the last transfer.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n * @opt        int     This may be one of the following constants:\n *                     CURLINFO_EFFECTIVE_URL - Last effective URL\n *                     CURLINFO_HTTP_CODE - Last received HTTP code\n *                     CURLINFO_FILETIME - Remote time of the retrieved\n *                     document, if -1 is returned the time of the document\n *                     is unknown CURLINFO_TOTAL_TIME - Total transaction\n *                     time in seconds for last transfer\n *                     CURLINFO_NAMELOOKUP_TIME - Time in seconds until\n *                     name resolving was complete CURLINFO_CONNECT_TIME -\n *                     Time in seconds it took to establish the connection\n *                     CURLINFO_PRETRANSFER_TIME - Time in seconds from\n *                     start until just before file transfer begins\n *                     CURLINFO_STARTTRANSFER_TIME - Time in seconds until\n *                     the first byte is about to be transferred\n *                     CURLINFO_REDIRECT_TIME - Time in seconds of all\n *                     redirection steps before final transaction was\n *                     started CURLINFO_SIZE_UPLOAD - Total number of bytes\n *                     uploaded CURLINFO_SIZE_DOWNLOAD - Total number of\n *                     bytes downloaded CURLINFO_SPEED_DOWNLOAD - Average\n *                     download speed CURLINFO_SPEED_UPLOAD - Average\n *                     upload speed CURLINFO_HEADER_SIZE - Total size of\n *                     all headers received CURLINFO_HEADER_OUT - The\n *                     request string sent CURLINFO_REQUEST_SIZE - Total\n *                     size of issued requests, currently only for HTTP\n *                     requests CURLINFO_SSL_VERIFYRESULT - Result of SSL\n *                     certification verification requested by setting\n *                     CURLOPT_SSL_VERIFYPEER\n *                     CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of\n *                     download, read from Content-Length: field\n *                     CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of\n *                     upload CURLINFO_CONTENT_TYPE - Content-Type: of\n *                     downloaded object, NULL indicates server did not\n *                     send valid Content-Type: header\n *\n * @return     mixed   If opt is given, returns its value as a string.\n *                     Otherwise, returns an associative array with the\n *                     following elements (which correspond to opt): \"url\"\n *                     \"content_type\" \"http_code\" \"header_size\"\n *                     \"request_size\" \"filetime\" \"ssl_verify_result\"\n *                     \"redirect_count\" \"total_time\" \"namelookup_time\"\n *                     \"connect_time\" \"pretransfer_time\" \"size_upload\"\n *                     \"size_download\" \"speed_download\" \"speed_upload\"\n *                     \"download_content_length\" \"upload_content_length\"\n *                     \"starttransfer_time\" \"redirect_time\"\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "opt", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_errno", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-errno.php )\n *\n * Returns the error number for the last cURL operation.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns the error number or 0 (zero) if no error\n *                     occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_error", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-error.php )\n *\n * Returns a clear text error message for the last cURL operation.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns the error message or '' (the empty string)\n *                     if no error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-close.php )\n *\n * Closes a cURL session and frees all resources. The cURL handle, ch, is\n * also deleted.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_init", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-init.php )\n *\n * Allows the processing of multiple cURL handles in parallel.\n *\n * @return     resource\n *                     Returns a cURL multi handle resource on success,\n *                     FALSE on failure.\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_add_handle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-add-handle.php )\n *\n * Adds the ch handle to the multi handle mh\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Returns 0 on success, or one of the CURLM_XXX errors\n *                     code.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_remove_handle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-remove-handle.php )\n *\n * Removes a given ch handle from the given mh handle. When the ch handle\n * has been removed, it is again perfectly legal to run curl_exec() on this\n * handle. Removing a handle while being used, will effectively halt all\n * transfers in progress.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   On success, returns a cURL handle, FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-exec.php )\n *\n * Processes each of the handles in the stack. This method can be called\n * whether or not a handle needs to read or write data.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @still_running\n *             mixed   A reference to a flag to tell whether the operations\n *                     are still running.\n *\n * @return     mixed   A cURL code defined in the cURL Predefined\n *                     Constants.\n *\n *                     This only returns errors regarding the whole multi\n *                     stack. There might still have occurred problems on\n *                     individual transfers even when this function returns\n *                     CURLM_OK.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "still_running", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_select", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-select.php )\n *\n * Blocks until there is activity on any of the curl_multi connections.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @timeout    float   Time, in seconds, to wait for a response.\n *\n * @return     mixed   On success, returns the number of descriptors\n *                     contained in, the descriptor sets. On failure, this\n *                     function will return -1 on a select failure or\n *                     timeout (from the underlying select system call).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xb /* KindOfDouble */, "d:1;", (const char *)4, "1.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fb_curl_multi_fdset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fb-curl-multi-fdset.php\n * )\n *\n * extracts file descriptor information from a multi handle.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @read_fd_set\n *             mixed   read set\n * @write_fd_set\n *             mixed   write set\n * @exc_fd_set mixed   exception set\n * @max_fd     mixed   If no file descriptors are set, max_fd will contain\n *                     -1. Otherwise it will contain the higher descriptor\n *                     number.\n *\n * @return     mixed   Returns 0 on success, or one of the CURLM_XXX errors\n *                     code.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "read_fd_set", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "write_fd_set", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "exc_fd_set", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "max_fd", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_getcontent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-getcontent.php )\n *\n * If CURLOPT_RETURNTRANSFER is an option that is set for a specific\n * handle, then this function will return the content of that cURL handle\n * in the form of a string.\n *\n * @ch         resource\n *                     A cURL handle returned by curl_init().\n *\n * @return     mixed   Return the content of a cURL handle if\n *                     CURLOPT_RETURNTRANSFER is set.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ch", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_info_read", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.curl-multi-info-read.php )\n *\n * Ask the multi handle if there are any messages or information from the\n * individual transfers. Messages may include information such as an error\n * code from the transfer or just the fact that a transfer is completed.\n *\n * Repeated calls to this function will return a new result each time,\n * until a FALSE is returned as a signal that there is no more to get at\n * this point. The integer pointed to with msgs_in_queue will contain the\n * number of remaining messages after this function was called. Warning\n *\n * The data the returned resource points to will not survive calling\n * curl_multi_remove_handle().\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n * @msgs_in_queue\n *             mixed   Number of messages that are still in the queue\n *\n * @return     mixed   On success, returns an associative array for the\n *                     message, FALSE on failure.\n *\n *                     Contents of the returned array Key: Value: msg The\n *                     CURLMSG_DONE constant. Other return values are\n *                     currently not available. result One of the CURLE_*\n *                     constants. If everything is OK, the CURLE_OK will be\n *                     the result. handle Resource of type curl indicates\n *                     the handle which it concerns.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "msgs_in_queue", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "curl_multi_close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.curl-multi-close.php )\n *\n * Closes a set of cURL handles.\n *\n * @mh         resource\n *                     A cURL multi handle returned by curl_multi_init().\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mh", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "evhttp_set_cache", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Specifies how many persistent connections to maintain for an HTTP\n * server.\n *\n * @address    string  Domain name for an HTTP server. Connections to this\n *                     server, regardless of what server objects to fetch\n *                     (specified by a URL), will be cached as persistent\n *                     connections for re-use.\n * @max_conn   int     Maximum number of connections to keep.\n * @port       int     Port number of the HTTP server.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "max_conn", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:80;", (const char *)5, "80", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "evhttp_get", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Synchronously HTTP GET a URL with libevent evhttp library.\n *\n * @url        string  The URL to fetch.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   HTTP response. FALSE if any failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:5;", (const char *)4, "5", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "evhttp_post", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Synchronously HTTP POST a URL with libevent evhttp library.\n *\n * @url        string  The URL to post to.\n * @data       string  POST data.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   HTTP response. FALSE if any failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:5;", (const char *)4, "5", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "evhttp_async_get", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Asynchronously HTTP GET a URL with libevent evhttp library. This is a\n * non-blocking call, without waiting for HTTP server to respond.\n *\n * @url        string  The URL to fetch.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   An object evhttp_recv() can use to eventually\n *                     retrieve HTTP response. FALSE if there was any\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:5;", (const char *)4, "5", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "evhttp_async_post", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Asynchronously HTTP POST a URL with libevent evhttp library. This is a\n * non-blocking call, without waiting for HTTP server to respond.\n *\n * @url        string  The URL to post to.\n * @data       string  POST data.\n * @headers    vector  HTTP headers.\n * @timeout    int     How many seconds to wait for response.\n *\n * @return     mixed   An object evhttp_recv() can use to eventually\n *                     retrieve HTTP response. FALSE if there was any\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "headers", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:5;", (const char *)4, "5", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "evhttp_recv", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Block and wait until HTTP response is ready.\n *\n * @handle     object  The object created by calling evhttp_async_get() or\n *                     evhttp_async_post().\n *\n * @return     mixed   HTTP response. FALSE if any failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gethostname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gethostname.php )\n *\n * Gets the standard host name for the local machine.\n *\n * @return     mixed   Returns a string with the hostname on success,\n *                     otherwise FALSE is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gethostbyaddr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gethostbyaddr.php )\n *\n * Returns the host name of the Internet host specified by ip_address.\n *\n * @ip_address string  The host IP address.\n *\n * @return     mixed   Returns the host name or the unmodified ip_address\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ip_address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gethostbyname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gethostbyname.php )\n *\n * Returns the IPv4 address of the Internet host specified by hostname.\n *\n * @hostname   string  The host name.\n *\n * @return     string  Returns the IPv4 address or a string containing the\n *                     unmodified hostname on failure.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gethostbynamel", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gethostbynamel.php )\n *\n * Returns a list of IPv4 addresses to which the Internet host specified\n * by hostname resolves.\n *\n * @hostname   string  The host name.\n *\n * @return     mixed   Returns an array of IPv4 addresses or FALSE if\n *                     hostname could not be resolved.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getprotobyname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getprotobyname.php )\n *\n * getprotobyname() returns the protocol number associated with the\n * protocol name as per /etc/protocols.\n *\n * @name       string  The protocol name.\n *\n * @return     mixed   Returns the protocol number or -1 if the protocol is\n *                     not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getprotobynumber", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getprotobynumber.php )\n *\n * getprotobynumber() returns the protocol name associated with protocol\n * number as per /etc/protocols.\n *\n * @number     int     The protocol number.\n *\n * @return     mixed   Returns the protocol name as a string, or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "number", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getservbyname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getservbyname.php )\n *\n * getservbyname() returns the Internet port which corresponds to service\n * for the specified protocol as per /etc/services.\n *\n * @service    string  The Internet service name, as a string.\n * @protocol   string  protocol is either \"tcp\" or \"udp\" (in lowercase).\n *\n * @return     mixed   Returns the port number, or FALSE if service or\n *                     protocol is not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "service", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "protocol", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getservbyport", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getservbyport.php )\n *\n * getservbyport() returns the Internet service associated with port for\n * the specified protocol as per /etc/services.\n *\n * @port       int     The port number.\n * @protocol   string  protocol is either \"tcp\" or \"udp\" (in lowercase).\n *\n * @return     mixed   Returns the Internet service name as a string.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "protocol", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "inet_ntop", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.inet-ntop.php )\n *\n *\n * @in_addr    string  A 32bit IPv4, or 128bit IPv6 address.\n *\n * @return     mixed   Returns a string representation of the address or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "in_addr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "inet_pton", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.inet-pton.php )\n *\n * This function converts a human readable IPv4 or IPv6 address (if PHP\n * was built with IPv6 support enabled) into an address family appropriate\n * 32bit or 128bit binary structure.\n *\n * @address    string  A human readable IPv4 or IPv6 address.\n *\n * @return     mixed   Returns the in_addr representation of the given\n *                     address\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "ip2long", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.ip2long.php )\n *\n *\n * @ip_address string  A standard format address.\n *\n * @return     mixed   Returns the IPv4 address or FALSE if ip_address is\n *                     invalid.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "ip_address", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "long2ip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.long2ip.php )\n *\n * The function long2ip() generates an Internet address in dotted format\n * (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.\n *\n * @proper_address\n *             int     A proper address representation.\n *\n * @return     string  Returns the Internet IP address as a string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "proper_address", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dns_check_record", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dns-check-record.php )\n *\n *\n * @host       string\n * @type       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "checkdnsrr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.checkdnsrr.php )\n *\n * Searches DNS for records of type type corresponding to host.\n *\n * @host       string  host may either be the IP address in dotted-quad\n *                     notation or the host name.\n * @type       string  type may be any one of: A, MX, NS, SOA, PTR, CNAME,\n *                     AAAA, A6, SRV, NAPTR, TXT or ANY.\n *\n * @return     bool    Returns TRUE if any records are found; returns FALSE\n *                     if no records were found or if an error occurred.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dns_get_record", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dns-get-record.php )\n *\n * Fetch DNS Resource Records associated with the given hostname.\n *\n * @hostname   string  hostname should be a valid DNS hostname such as\n *                     \"www.example.com\". Reverse lookups can be generated\n *                     using in-addr.arpa notation, but gethostbyaddr() is\n *                     more suitable for the majority of reverse lookups.\n *\n *                     Per DNS standards, email addresses are given in\n *                     user.host format (for example:\n *                     hostmaster.example.com as opposed to\n *                     hostmaster@example.com), be sure to check this value\n *                     and modify if necessary before using it with a\n *                     functions such as mail().\n * @type       int     By default, dns_get_record() will search for any\n *                     resource records associated with hostname. To limit\n *                     the query, specify the optional type parameter. May\n *                     be any one of the following: DNS_A, DNS_CNAME,\n *                     DNS_HINFO, DNS_MX, DNS_NS, DNS_PTR, DNS_SOA,\n *                     DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR, DNS_A6,\n *                     DNS_ALL or DNS_ANY.\n *\n *                     Because of eccentricities in the performance of\n *                     libresolv between platforms, DNS_ANY will not always\n *                     return every record, the slower DNS_ALL will collect\n *                     all records more reliably.\n * @authns     mixed   Passed by reference and, if given, will be populated\n *                     with Resource Records for the Authoritative Name\n *                     Servers.\n * @addtl      mixed   Passed by reference and, if given, will be populated\n *                     with any Additional Records.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2800, "authns", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "addtl", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "dns_get_mx", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.dns-get-mx.php )\n *\n *\n * @hostname   string\n * @mxhosts    mixed\n * @weights    mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "mxhosts", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "weights", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getmxrr", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getmxrr.php )\n *\n * Searches DNS for MX records corresponding to hostname.\n *\n * @hostname   string  The Internet host name.\n * @mxhosts    mixed   A list of the MX records found is placed into the\n *                     array mxhosts.\n * @weight     mixed   If the weight array is given, it will be filled with\n *                     the weight information gathered.\n *\n * @return     bool    Returns TRUE if any records are found; returns FALSE\n *                     if no records were found or if an error occurred.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "mxhosts", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "weight", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fsockopen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.fsockopen.php )\n *\n * Initiates a socket connection to the resource specified by hostname.\n *\n * PHP supports targets in the Internet and Unix domains as described in\n * List of Supported Socket Transports. A list of supported transports can\n * also be retrieved using stream_get_transports().\n *\n * The socket will by default be opened in blocking mode. You can switch\n * it to non-blocking mode by using stream_set_blocking().\n *\n * @hostname   string  If you have compiled in OpenSSL support, you may\n *                     prefix the hostname with either ssl:// or tls:// to\n *                     use an SSL or TLS client connection over TCP/IP to\n *                     connect to the remote host.\n * @port       int     The port number.\n * @errnum     mixed   If provided, holds the system level error number\n *                     that occurred in the system-level connect() call.\n *\n *                     If the value returned in errno is 0 and the\n *                     function returned FALSE, it is an indication that\n *                     the error occurred before the connect() call. This\n *                     is most likely due to a problem initializing the\n *                     socket.\n * @errstr     mixed   The error message as a string.\n * @timeout    float   The connection timeout, in seconds.\n *\n *                     If you need to set a timeout for reading/writing\n *                     data over the socket, use stream_set_timeout(), as\n *                     the timeout parameter to fsockopen() only applies\n *                     while connecting the socket.\n *\n * @return     mixed   fsockopen() returns a file pointer which may be used\n *                     together with the other file functions (such as\n *                     fgets(), fgetss(), fwrite(), fclose(), and feof()).\n *                     If the call fails, it will return FALSE\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2800, "errnum", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "errstr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pfsockopen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.pfsockopen.php )\n *\n * This function behaves exactly as fsockopen() with the difference that\n * the connection is not closed after the script finishes. It is the\n * persistent version of fsockopen().\n * For parameter information, see the fsockopen() documentation.\n *\n * @hostname   string\n * @port       int\n * @errnum     mixed\n * @errstr     mixed\n * @timeout    float\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "hostname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2800, "errnum", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "errstr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_get_status", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-get-status.php )\n *\n *\n * @stream     resource\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_set_blocking", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-blocking.php\n * )\n *\n *\n * @stream     resource\n *\n * @mode       int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "socket_set_timeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-timeout.php\n * )\n *\n *\n * @stream     resource\n *\n * @seconds    int\n * @microseconds\n *             int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "stream", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "seconds", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "microseconds", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "header", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.header.php )\n *\n *\n * @str        string  The header string.\n *\n *                     There are two special-case header calls. The first\n *                     is a header that starts with the string \"HTTP/\"\n *                     (case is not significant), which will be used to\n *                     figure out the HTTP status code to send. For\n *                     example, if you have configured Apache to use a PHP\n *                     script to handle requests for missing files (using\n *                     the ErrorDocument directive), you may want to make\n *                     sure that your script generates the proper status\n *                     code.\n *\n *\n *\n *\n *\n *                     The second special case is the \"Location:\" header.\n *                     Not only does it send this header back to the\n *                     browser, but it also returns a REDIRECT (302) status\n *                     code to the browser unless the 201 or a 3xx status\n *                     code has already been set.\n * @replace    bool    The optional replace parameter indicates whether the\n *                     header should replace a previous similar header, or\n *                     add a second header of the same type. By default it\n *                     will replace, but if you pass in FALSE as the second\n *                     argument you can force multiple headers of the same\n *                     type. For example:\n * @http_response_code\n *             int     Forces the HTTP response code to the specified\n *                     value.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "replace", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "http_response_code", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "http_response_code", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.http-response-code.php\n * )\n *\n * Get and/or Set the HTTP response code.\n *\n * @response_code\n *             int     New response code to set.\n *\n * @return     mixed   The current response code.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "response_code", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "headers_list", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.headers-list.php )\n *\n * headers_list() will return a list of headers to be sent to the browser\n * / client. To determine whether or not these headers have been sent yet,\n * use headers_sent().\n *\n * @return     vector  Returns a numerically indexed array of headers.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_http_request_size", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-http-request-size.php )\n *\n * get_http_request_size() will return the size of the http request.\n *\n * @return     int     Returns the size of the http request.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "headers_sent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.headers-sent.php )\n *\n * Checks if or where headers have been sent.\n *\n * You can't add any more header lines using the header() function once\n * the header block has already been sent. Using this function you can at\n * least prevent getting HTTP header related error messages. Another option\n * is to use Output Buffering.\n *\n * @file       mixed   If the optional file and line parameters are set,\n *                     headers_sent() will put the PHP source file name and\n *                     line number where output started in the file and\n *                     line variables.\n * @line       mixed   The line number where the output started.\n *\n * @return     bool    headers_sent() will return FALSE if no HTTP headers\n *                     have already been sent or TRUE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "file", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "line", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "header_register_callback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.header-register-callback.php )\n *\n * Registers a function that will be called when PHP starts sending\n * output.\n *\n * @callback   mixed   Function called just before the headers are sent. It\n *                     gets no parameters and the return value is ignored.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "header_remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.header-remove.php )\n *\n * Removes an HTTP header previously set using header().\n *\n * @name       string  The header name to be removed. This parameter is\n *                     case-insensitive.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setcookie", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.setcookie.php )\n *\n *\n * @name       string  The name of the cookie.\n * @value      string  The value of the cookie. This value is stored on the\n *                     clients computer; do not store sensitive\n *                     information. Assuming the name is 'cookiename', this\n *                     value is retrieved through $_COOKIE['cookiename']\n * @expire     int     The time the cookie expires. This is a Unix\n *                     timestamp so is in number of seconds since the\n *                     epoch. In other words, you'll most likely set this\n *                     with the time() function plus the number of seconds\n *                     before you want it to expire. Or you might use\n *                     mktime(). time()+60*60*24*30 will set the cookie to\n *                     expire in 30 days. If set to 0, or omitted, the\n *                     cookie will expire at the end of the session (when\n *                     the browser closes).\n *\n *\n *\n *                     You may notice the expire parameter takes on a Unix\n *                     timestamp, as opposed to the date format Wdy,\n *                     DD-Mon-YYYY HH:MM:SS GMT, this is because PHP does\n *                     this conversion internally.\n *\n *                     expire is compared to the client's time which can\n *                     differ from server's time.\n * @path       string  The path on the server in which the cookie will be\n *                     available on. If set to '/', the cookie will be\n *                     available within the entire domain. If set to\n *                     '/foo/', the cookie will only be available within\n *                     the /foo/ directory and all sub-directories such as\n *                     /foo/bar/ of domain. The default value is the\n *                     current directory that the cookie is being set in.\n * @domain     string\n * @secure     bool    Indicates that the cookie should only be transmitted\n *                     over a secure HTTPS connection from the client. When\n *                     set to TRUE, the cookie will only be set if a secure\n *                     connection exists. On the server-side, it's on the\n *                     programmer to send this kind of cookie only on\n *                     secure connection (e.g. with respect to\n *                     $_SERVER[\"HTTPS\"]).\n * @httponly   bool    When TRUE the cookie will be made accessible only\n *                     through the HTTP protocol. This means that the\n *                     cookie won't be accessible by scripting languages,\n *                     such as JavaScript. This setting can effectively\n *                     help to reduce identity theft through XSS attacks\n *                     (although it is not supported by all browsers).\n *                     Added in PHP 5.2.0. TRUE or FALSE\n *\n * @return     bool    If output exists prior to calling this function,\n *                     setcookie() will fail and return FALSE. If\n *                     setcookie() successfully runs, it will return TRUE.\n *                     This does not indicate whether the user accepted the\n *                     cookie.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "domain", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "secure", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "httponly", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setrawcookie", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.setrawcookie.php )\n *\n * setrawcookie() is exactly the same as setcookie() except that the\n * cookie value will not be automatically urlencoded when sent to the\n * browser.\n * For parameter information, see the setcookie() documentation.\n *\n * @name       string\n * @value      string\n * @expire     int\n * @path       string\n * @domain     string\n * @secure     bool\n * @httponly   bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "domain", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "secure", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "httponly", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "define_syslog_variables", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.define-syslog-variables.php )\n *\n * Initializes all variables used in the syslog functions.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openlog", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.openlog.php )\n *\n * openlog() opens a connection to the system logger for a program.\n *\n * The use of openlog() is optional. It will automatically be called by\n * syslog() if necessary, in which case ident will default to FALSE.\n *\n * @ident      string  The string ident is added to each message.\n * @option     int     The option argument is used to indicate what logging\n *                     options will be used when generating a log message.\n *                     openlog() Options Constant Description LOG_CONS if\n *                     there is an error while sending data to the system\n *                     logger, write directly to the system console\n *                     LOG_NDELAY open the connection to the logger\n *                     immediately LOG_ODELAY (default) delay opening the\n *                     connection until the first message is logged\n *                     LOG_PERROR print log message also to standard error\n *                     LOG_PID include PID with each message You can use\n *                     one or more of this options. When using multiple\n *                     options you need to OR them, i.e. to open the\n *                     connection immediately, write to the console and\n *                     include the PID in each message, you will use:\n *                     LOG_CONS | LOG_NDELAY | LOG_PID\n * @facility   int     The facility argument is used to specify what type\n *                     of program is logging the message. This allows you\n *                     to specify (in your machine's syslog configuration)\n *                     how messages coming from different facilities will\n *                     be handled. openlog() Facilities Constant\n *                     Description LOG_AUTH security/authorization messages\n *                     (use LOG_AUTHPRIV instead in systems where that\n *                     constant is defined) LOG_AUTHPRIV\n *                     security/authorization messages (private) LOG_CRON\n *                     clock daemon (cron and at) LOG_DAEMON other system\n *                     daemons LOG_KERN kernel messages LOG_LOCAL0 ...\n *                     LOG_LOCAL7 reserved for local use, these are not\n *                     available in Windows LOG_LPR line printer subsystem\n *                     LOG_MAIL mail subsystem LOG_NEWS USENET news\n *                     subsystem LOG_SYSLOG messages generated internally\n *                     by syslogd LOG_USER generic user-level messages\n *                     LOG_UUCP UUCP subsystem\n *\n *                     LOG_USER is the only valid log type under Windows\n *                     operating systems\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "ident", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "facility", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "closelog", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.closelog.php )\n *\n * closelog() closes the descriptor being used to write to the system\n * logger. The use of closelog() is optional.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "syslog", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.syslog.php )\n *\n * syslog() generates a log message that will be distributed by the system\n * logger.\n *\n * For information on setting up a user defined log handler, see the\n * syslog.conf (5) Unix manual page. More information on the syslog\n * facilities and option can be found in the man pages for syslog (3) on\n * Unix machines.\n *\n * @priority   int     priority is a combination of the facility and the\n *                     level. Possible values are: syslog() Priorities (in\n *                     descending order) Constant Description LOG_EMERG\n *                     system is unusable LOG_ALERT action must be taken\n *                     immediately LOG_CRIT critical conditions LOG_ERR\n *                     error conditions LOG_WARNING warning conditions\n *                     LOG_NOTICE normal, but significant, condition\n *                     LOG_INFO informational message LOG_DEBUG debug-level\n *                     message\n * @message    string  The message to send, except that the two characters\n *                     %m will be replaced by the error message string\n *                     (strerror) corresponding to the present value of\n *                     errno.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "priority", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "message", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-add.php )\n *\n * Caches a variable in the data store, only if it's not already stored.\n * Unlike many other mechanisms in PHP, variables stored using apc_add()\n * will persist between requests (until the value is removed from the\n * cache).\n *\n * @key        string  Store the variable using this name. keys are\n *                     cache-unique, so attempting to use apc_add() to\n *                     store data with a key that already exists will not\n *                     overwrite the existing data, and will instead return\n *                     FALSE. (This is the only difference between\n *                     apc_add() and apc_store().)\n * @var        mixed   The variable to store\n * @ttl        int     Time To Live; store var in the cache for ttl\n *                     seconds. After the ttl has passed, the stored\n *                     variable will be expunged from the cache (on the\n *                     next request). If no ttl is supplied (or if the ttl\n *                     is 0), the value will persist until it is removed\n *                     from the cache manually, or otherwise fails to exist\n *                     in the cache (clear, restart, etc.).\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ttl", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_store", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-store.php )\n *\n * Cache a variable in the data store. Unlike many other mechanisms in\n * PHP, variables stored using apc_store() will persist between requests\n * (until the value is removed from the cache).\n *\n * @key        string  Store the variable using this name. keys are\n *                     cache-unique, so storing a second value with the\n *                     same key will overwrite the original value.\n * @var        mixed   The variable to store\n * @ttl        int     Time To Live; store var in the cache for ttl\n *                     seconds. After the ttl has passed, the stored\n *                     variable will be expunged from the cache (on the\n *                     next request). If no ttl is supplied (or if the ttl\n *                     is 0), the value will persist until it is removed\n *                     from the cache manually, or otherwise fails to exist\n *                     in the cache (clear, restart, etc.).\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ttl", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_fetch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-fetch.php )\n *\n * Fetchs a stored variable from the cache.\n *\n * @key        mixed   The key used to store the value (with apc_store()).\n *                     If an array is passed then each element is fetched\n *                     and returned.\n * @success    mixed   Set to TRUE in success and FALSE in failure.\n * @cache_id   int\n *\n * @return     mixed   The stored variable or array of variables on\n *                     success; FALSE on failure\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "success", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_delete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-delete.php )\n *\n * Removes a stored variable from the cache.\n *\n * @key        mixed   The key used to store the value (with apc_store()).\n * @cache_id   int\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_compile_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-compile-file.php )\n *\n * Stores a file in the bytecode cache, bypassing all filters.\n *\n * @filename   string  Full or relative path to a PHP file that will be\n *                     compiled and stored in the bytecode cache.\n * @atomic     bool\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "atomic", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_cache_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-cache-info.php )\n *\n * Retrieves cached information and meta-data from APC's data store.\n *\n * @cache_id   int     If cache_type is \"user\", information about the user\n *                     cache will be returned.\n *\n *                     If cache_type is \"filehits\", information about\n *                     which files have been served from the bytecode cache\n *                     for the current request will be returned. This\n *                     feature must be enabled at compile time using\n *                     --enable-filehits .\n *\n *                     If an invalid or no cache_type is specified,\n *                     information about the system cache (cached files)\n *                     will be returned.\n * @limited    bool    If limited is TRUE, the return value will exclude\n *                     the individual list of cache entries. This is useful\n *                     when trying to optimize calls for statistics\n *                     gathering.\n *\n * @return     mixed   Array of cached data (and meta-data) or FALSE on\n *                     failure apc_cache_info() will raise a warning if it\n *                     is unable to retrieve APC cache data. This typically\n *                     occurs when APC is not enabled.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "limited", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_clear_cache", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-clear-cache.php )\n *\n * Clears the user/system cache.\n *\n * @cache_id   int     If cache_type is \"user\", the user cache will be\n *                     cleared; otherwise, the system cache (cached files)\n *                     will be cleared.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_define_constants", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apc-define-constants.php )\n *\n *\n * @key        string  The key serves as the name of the constant set being\n *                     stored. This key is used to retrieve the stored\n *                     constants in apc_load_constants().\n * @constants  string  An associative array of constant_name => value\n *                     pairs. The constant_name must follow the normal\n *                     constant naming rules. value must evaluate to a\n *                     scalar value.\n * @case_sensitive\n *             bool    The default behaviour for constants is to be\n *                     declared case-sensitive; i.e. CONSTANT and Constant\n *                     represent different values. If this parameter\n *                     evaluates to FALSE the constants will be declared as\n *                     case-insensitive symbols.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "constants", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "case_sensitive", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_load_constants", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-load-constants.php\n * )\n *\n * Loads a set of constants from the cache.\n *\n * @key        string  The name of the constant set (that was stored with\n *                     apc_define_constants()) to be retrieved.\n * @case_sensitive\n *             bool    The default behaviour for constants is to be\n *                     declared case-sensitive; i.e. CONSTANT and Constant\n *                     represent different values. If this parameter\n *                     evaluates to FALSE the constants will be declared as\n *                     case-insensitive symbols.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "case_sensitive", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_sma_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-sma-info.php )\n *\n * Retrieves APC's Shared Memory Allocation information.\n *\n * @limited    bool    When set to FALSE (default) apc_sma_info() will\n *                     return a detailed information about each segment.\n *\n * @return     map     Array of Shared Memory Allocation data; FALSE on\n *                     failure.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "limited", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_filehits", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-filehits.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_delete_file", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-delete-file.php )\n *\n * Deletes the given files from the opcode cache.\n *\n * @keys       mixed   The files to be deleted. Accepts a string, array of\n *                     strings, or an APCIterator object.\n * @cache_id   int\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Or if\n *                     keys is an array, then an empty array is returned on\n *                     success, or an array of failed files is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "keys", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_inc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-inc.php )\n *\n * Increases a stored number.\n *\n * @key        string  The key of the value being increased.\n * @step       int     The step, or value to increase.\n * @success    mixed   Optionally pass the success or fail boolean value to\n *                     this referenced variable.\n * @cache_id   int\n *\n * @return     mixed   Returns the current value of key's value on success,\n *                     or FALSE on failure\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "step", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  (const char *)0x2800, "success", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_dec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-dec.php )\n *\n * Decreases a stored integer value.\n *\n * @key        string  The key of the value being decreased.\n * @step       int     The step, or value to decrease.\n * @success    mixed   Optionally pass the success or fail boolean value to\n *                     this referenced variable.\n * @cache_id   int\n *\n * @return     mixed   Returns the current value of key's value on success,\n *                     or FALSE on failure\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "step", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  (const char *)0x2800, "success", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_cas", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-cas.php )\n *\n * apc_cas WarningThis function is currently not documented; only its\n * argument list is available.\n *\n * @key        string\n * @old_cas    int\n * @new_cas    int\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "old_cas", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "new_cas", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x11006040, "apc_exists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-exists.php )\n *\n * Checks if one ore more APC keys exist.\n *\n * @key        mixed   The key to check existence. If an array is passed\n *                     then each element is checked.\n * @cache_id   int\n *\n * @return     mixed   TRUE if the key exists, otherwise FALSE. If array is\n *                     passed in, then an array is returned that contains\n *                     all existing keys, or an empty array if none exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_bin_dump", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-dump.php )\n *\n * Returns a binary dump of the given files and user variables from the\n * APC cache. A NULL for files or user_vars signals a dump of every entry,\n * whereas array() will dump nothing.\n *\n * @cache_id   int     The files. Passing in NULL signals a dump of every\n *                     entry, while passing in array() will dump nothing.\n * @filter     mixed   The user vars. Passing in NULL signals a dump of\n *                     every entry, while passing in array() will dump\n *                     nothing.\n *\n * @return     mixed   Returns a binary dump of the given files and user\n *                     variables from the APC cache, FALSE if APC is not\n *                     enabled, or NULL if an unknown error is encountered.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "filter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_bin_load", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-load.php )\n *\n * Loads the given binary dump into the APC file/user cache.\n *\n * @data       string  The binary dump being loaded, likely from\n *                     apc_bin_dump().\n * @flags      int     Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or\n *                     both.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE if the binary dump data was loaded with\n *                     success, otherwise FALSE is returned. FALSE is\n *                     returned if APC is not enabled, or if the data is\n *                     not a valid APC binary dump (e.g., unexpected size).\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_bin_dumpfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-dumpfile.php )\n *\n * Outputs a binary dump of the given files and user variables from the\n * APC cache to the named file.\n *\n * @cache_id   int     The file names being dumped.\n * @filter     mixed   The user variables being dumped.\n * @filename   string  The filename where the dump is being saved.\n * @flags      int     Flags passed to the filename stream. See the\n *                     file_put_contents() documentation for details.\n * @context    resource\n *                     The context passed to the filename stream. See the\n *                     file_put_contents() documentation for details.\n *\n * @return     mixed   The number of bytes written to the file, otherwise\n *                     FALSE if APC is not enabled, filename is an invalid\n *                     file name, filename can't be opened, the file dump\n *                     can't be completed (e.g., the hard drive is out of\n *                     disk space), or an unknown error was encountered.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "apc_bin_loadfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-loadfile.php )\n *\n * Loads a binary dump from a file into the APC file/user cache.\n *\n * @filename   string  The file name containing the dump, likely from\n *                     apc_bin_dumpfile().\n * @context    resource\n *                     The files context.\n * @flags      int     Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or\n *                     both.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success, otherwise FALSE Reasons it\n *                     may return FALSE include APC is not enabled,\n *                     filename is an invalid file name or empty, filename\n *                     can't be opened, the file dump can't be completed,\n *                     or if the data is not a valid APC binary dump (e.g.,\n *                     unexpected size).\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "cache_id", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "gd_info", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.gd-info.php )\n *\n * Gets information about the version and capabilities of the installed GD\n * library.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getimagesize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.getimagesize.php )\n *\n * The getimagesize() function will determine the size of any given image\n * file and return the dimensions along with the file type and a\n * height/width text string to be used inside a normal HTML IMG tag and the\n * correspondant HTTP content type.\n *\n * getimagesize() can also return some more information in imageinfo\n * parameter. Note that JPC and JP2 are capable of having components with\n * different bit depths. In this case, the value for \"bits\" is the highest\n * bit depth encountered. Also, JP2 files may contain multiple JPEG 2000\n * codestreams. In this case, getimagesize() returns the values for the\n * first codestream it encounters in the root of the file. The information\n * about icons are retrieved from the icon with the highest bitrate.\n *\n * @filename   string  This parameter specifies the file you wish to\n *                     retrieve information about. It can reference a local\n *                     file or (configuration permitting) a remote file\n *                     using one of the supported streams.\n * @imageinfo  mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "imageinfo", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "image_type_to_extension", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.image-type-to-extension.php )\n *\n * Returns the extension for the given IMAGETYPE_XXX constant.\n *\n * @imagetype  int     One of the IMAGETYPE_XXX constant.\n * @include_dot\n *             bool    Whether to prepend a dot to the extension or not.\n *                     Default to TRUE.\n *\n * @return     string  A string with the extension corresponding to the\n *                     given image type.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "imagetype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "include_dot", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "image_type_to_mime_type", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.image-type-to-mime-type.php )\n *\n * The image_type_to_mime_type() function will determine the Mime-Type for\n * an IMAGETYPE constant.\n *\n * @imagetype  int     One of the IMAGETYPE_XXX constants.\n *\n * @return     string  The returned values are as follows Returned values\n *                     Constants imagetype Returned value IMAGETYPE_GIF\n *                     image/gif IMAGETYPE_JPEG image/jpeg IMAGETYPE_PNG\n *                     image/png IMAGETYPE_SWF\n *                     application/x-shockwave-flash IMAGETYPE_PSD\n *                     image/psd IMAGETYPE_BMP image/bmp IMAGETYPE_TIFF_II\n *                     (intel byte order) image/tiff IMAGETYPE_TIFF_MM\n *                     (motorola byte order) image/tiff IMAGETYPE_JPC\n *                     application/octet-stream IMAGETYPE_JP2 image/jp2\n *                     IMAGETYPE_JPX application/octet-stream IMAGETYPE_JB2\n *                     application/octet-stream IMAGETYPE_SWC\n *                     application/x-shockwave-flash IMAGETYPE_IFF\n *                     image/iff IMAGETYPE_WBMP image/vnd.wap.wbmp\n *                     IMAGETYPE_XBM image/xbm IMAGETYPE_ICO\n *                     image/vnd.microsoft.icon\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "imagetype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "image2wbmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.image2wbmp.php )\n *\n * image2wbmp() outputs or save a WBMP version of the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  Path to the saved file. If not given, the raw image\n *                     stream will be outputted directly.\n * @threshold  int     Threshold value, between 0 and 255 (inclusive).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagealphablending", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagealphablending.php\n * )\n *\n * imagealphablending() allows for two different modes of drawing on\n * truecolor images. In blending mode, the alpha channel component of the\n * color supplied to all drawing function, such as imagesetpixel()\n * determines how much of the underlying color should be allowed to shine\n * through. As a result, gd automatically blends the existing color at that\n * point with the drawing color, and stores the result in the image. The\n * resulting pixel is opaque. In non-blending mode, the drawing color is\n * copied literally with its alpha channel information, replacing the\n * destination pixel. Blending mode is not available when drawing on\n * palette images.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @blendmode  bool    Whether to enable the blending mode or not. On true\n *                     color images the default value is TRUE otherwise the\n *                     default value is FALSE\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blendmode", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageantialias", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageantialias.php )\n *\n * Activate the fast drawing antialiased methods for lines and wired\n * polygons. It does not support alpha components. It works using a direct\n * blend operation. It works only with truecolor images.\n *\n * Thickness and styled are not supported.\n *\n * Using antialiased primitives with transparent background color can end\n * with some unexpected results. The blend method uses the background color\n * as any other colors. The lack of alpha component support does not allow\n * an alpha based antialiasing method.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @on         bool    Whether to enable antialiasing or not.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "on", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagearc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagearc.php )\n *\n * imagearc() draws an arc of circle centered at the given coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The arc width.\n * @height     int     The arc height.\n * @start      int     The arc start angle, in degrees.\n * @end        int     The arc end angle, in degrees. 0\302\260 is located at the\n *                     three-o'clock position, and the arc is drawn\n *                     clockwise.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cx", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cy", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "end", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagechar", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagechar.php )\n *\n * imagechar() draws the first character of c in the image identified by\n * image with its upper-left at x,y (top left is 0, 0) with the color\n * color.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the start.\n * @y          int     y-coordinate of the start.\n * @c          string  The character to draw.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "c", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecharup", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecharup.php )\n *\n * Draws the character c vertically at the specified coordinate on the\n * given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the start.\n * @y          int     y-coordinate of the start.\n * @c          string  The character to draw.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "c", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorallocate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorallocate.php\n * )\n *\n * Returns a color identifier representing the color composed of the given\n * RGB components.\n *\n * imagecolorallocate() must be called to create each color that is to be\n * used in the image represented by image.\n *\n * The first call to imagecolorallocate() fills the background color in\n * palette-based images - images created using imagecreate().\n * These parameters are integers between 0 and 255 or hexadecimals between\n * 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   A color identifier or FALSE if the allocation\n *                     failed.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorallocatealpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorallocatealpha.php )\n *\n * imagecolorallocatealpha() behaves identically to imagecolorallocate()\n * with the addition of the transparency parameter alpha.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   A color identifier or FALSE if the allocation\n *                     failed.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "alpha", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorat.php )\n *\n * Returns the index of the color of the pixel at the specified location\n * in the image specified by image.\n *\n * If PHP is compiled against GD library 2.0 or higher and the image is a\n * truecolor image, this function returns the RGB value of that pixel as\n * integer. Use bitshifting and masking to access the distinct red, green\n * and blue component values:\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate of the point.\n * @y          int     y-coordinate of the point.\n *\n * @return     mixed   Returns the index of the color.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorclosest", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorclosest.php )\n *\n * Returns the index of the color in the palette of the image which is\n * \"closest\" to the specified RGB value.\n *\n * The \"distance\" between the desired color and each color in the palette\n * is calculated as if the RGB values represented points in\n * three-dimensional space.\n *\n * If you created the image from a file, only colors used in the image are\n * resolved. Colors present only in the palette are not resolved.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns the index of the closest color, in the\n *                     palette of the image, to the specified one\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorclosestalpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorclosestalpha.php )\n *\n * Returns the index of the color in the palette of the image which is\n * \"closest\" to the specified RGB value and alpha level.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   Returns the index of the closest color in the\n *                     palette.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "alpha", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorclosesthwb", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorclosesthwb.php )\n *\n * Get the index of the color which has the hue, white and blackness\n * nearest the given color.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns an integer with the index of the color which\n *                     has the hue, white and blackness nearest the given\n *                     color.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolordeallocate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolordeallocate.php )\n *\n * De-allocates a color previously allocated with imagecolorallocate() or\n * imagecolorallocatealpha().\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @color      int     The color identifier.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorexact", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorexact.php )\n *\n * Returns the index of the specified color in the palette of the image.\n *\n * If you created the image from a file, only colors used in the image are\n * resolved. Colors present only in the palette are not resolved.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns the index of the specified color in the\n *                     palette, or -1 if the color does not exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorexactalpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorexactalpha.php )\n *\n * Returns the index of the specified color+alpha in the palette of the\n * image.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   Returns the index of the specified color+alpha in\n *                     the palette of the image, or -1 if the color does\n *                     not exist in the image's palette.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "alpha", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolormatch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolormatch.php )\n *\n * Makes the colors of the palette version of an image more closely match\n * the true color version.\n *\n * @image1     resource\n *                     A truecolor image link resource.\n * @image2     resource\n *                     A palette image link resource pointing to an image\n *                     that has the same size as image1.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image1", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "image2", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorresolve", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorresolve.php )\n *\n * This function is guaranteed to return a color index for a requested\n * color, either the exact color or the closest possible alternative.\n *\n * If you created the image from a file, only colors used in the image are\n * resolved. Colors present only in the palette are not resolved.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns a color index.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorresolvealpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorresolvealpha.php )\n *\n * This function is guaranteed to return a color index for a requested\n * color, either the exact color or the closest possible alternative.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   Returns a color index.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "alpha", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorset.php )\n *\n * This sets the specified index in the palette to the specified color.\n * This is useful for creating flood-fill-like effects in palleted images\n * without the overhead of performing the actual flood-fill.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @index      int     An index in the palette.\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "red", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "green", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "blue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorsforindex", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorsforindex.php\n * )\n *\n * Gets the color for a specified index.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @index      int     The color index.\n *\n * @return     mixed   Returns an associative array with red, green, blue\n *                     and alpha keys that contain the appropriate values\n *                     for the specified color index.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolorstotal", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorstotal.php )\n *\n * Returns the number of colors in an image palette.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatefromgif().\n *\n * @return     mixed   Returns the number of colors in the specified\n *                     image's palette or 0 for truecolor images.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecolortransparent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolortransparent.php )\n *\n * Sets the transparent color in the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     mixed   The identifier of the new (or current, if none is\n *                     specified) transparent color is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageconvolution", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageconvolution.php )\n *\n * Applies a convolution matrix on the image, using the given coefficient\n * and offset.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @matrix     map     A 3x3 matrix: an array of three arrays of three\n *                     floats.\n * @div        float   The divisor of the result of the convolution, used\n *                     for normalization.\n * @offset     float   Color offset.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "matrix", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "div", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecopy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopy.php )\n *\n * Copy a part of src_im onto dst_im starting at the x,y coordinates\n * src_x, src_y with a width of src_w and a height of src_h. The portion\n * defined will be copied onto the x,y coordinates, dst_x and dst_y.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "dst_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecopymerge", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopymerge.php )\n *\n * Copy a part of src_im onto dst_im starting at the x,y coordinates\n * src_x, src_y with a width of src_w and a height of src_h. The portion\n * defined will be copied onto the x,y coordinates, dst_x and dst_y.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n * @pct        int     The two images will be merged according to pct which\n *                     can range from 0 to 100. When pct = 0, no action is\n *                     taken, when 100 this function behaves identically to\n *                     imagecopy() for pallete images, while it implements\n *                     alpha transparency for true colour images.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "dst_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pct", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecopymergegray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopymergegray.php\n * )\n *\n * imagecopymergegray() copy a part of src_im onto dst_im starting at the\n * x,y coordinates src_x, src_y with a width of src_w and a height of\n * src_h. The portion defined will be copied onto the x,y coordinates,\n * dst_x and dst_y.\n *\n * This function is identical to imagecopymerge() except that when merging\n * it preserves the hue of the source by converting the destination pixels\n * to gray scale before the copy operation.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n * @pct        int     The src_im will be changed to grayscale according to\n *                     pct where 0 is fully grayscale and 100 is unchanged.\n *                     When pct = 100 this function behaves identically to\n *                     imagecopy() for pallete images, while it implements\n *                     alpha transparency for true colour images.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "dst_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pct", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecopyresampled", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopyresampled.php\n * )\n *\n * imagecopyresampled() copies a rectangular portion of one image to\n * another image, smoothly interpolating pixel values so that, in\n * particular, reducing the size of an image still retains a great deal of\n * clarity.\n *\n * In other words, imagecopyresampled() will take an rectangular area from\n * src_image of width src_w and height src_h at position (src_x,src_y) and\n * place it in a rectangular area of dst_image of width dst_w and height\n * dst_h at position (dst_x,dst_y).\n *\n * If the source and destination coordinates and width and heights differ,\n * appropriate stretching or shrinking of the image fragment will be\n * performed. The coordinates refer to the upper left corner. This function\n * can be used to copy regions within the same image (if dst_image is the\n * same as src_image) but if the regions overlap the results will be\n * unpredictable.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @dst_w      int     Destination width.\n * @dst_h      int     Destination height.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "dst_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecopyresized", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopyresized.php )\n *\n * imagecopyresized() copies a rectangular portion of one image to another\n * image. dst_image is the destination image, src_image is the source image\n * identifier.\n *\n * In other words, imagecopyresized() will take an rectangular area from\n * src_image of width src_w and height src_h at position (src_x,src_y) and\n * place it in a rectangular area of dst_image of width dst_w and height\n * dst_h at position (dst_x,dst_y).\n *\n * If the source and destination coordinates and width and heights differ,\n * appropriate stretching or shrinking of the image fragment will be\n * performed. The coordinates refer to the upper left corner. This function\n * can be used to copy regions within the same image (if dst_image is the\n * same as src_image) but if the regions overlap the results will be\n * unpredictable.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @dst_w      int     Destination width.\n * @dst_h      int     Destination height.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "dst_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_im", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dst_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_w", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "src_h", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreate.php )\n *\n * imagecreate() returns an image identifier representing a blank image of\n * specified size.\n *\n * We recommend the use of imagecreatetruecolor().\n *\n * @width      int     The image width.\n * @height     int     The image height.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromgd2part", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecreatefromgd2part.php )\n *\n * Create a new image from a given part of GD2 file or URL. TipA URL can\n * be used as a filename with this function if the fopen wrappers have been\n * enabled. See fopen() for more details on how to specify the filename.\n * See the List of Supported Protocols/Wrappers for links to information\n * about what abilities the various wrappers have, notes on their usage,\n * and information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GD2 image.\n * @srcx       int     x-coordinate of source point.\n * @srcy       int     y-coordinate of source point.\n * @width      int     Source width.\n * @height     int     Source height.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "srcx", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "srcy", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromgd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromgd.php )\n *\n * Create a new image from GD file or URL. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GD file.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromgd2", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromgd2.php\n * )\n *\n * Create a new image from GD2 file or URL. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GD2 image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromgif", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromgif.php\n * )\n *\n * imagecreatefromgif() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GIF image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromjpeg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromjpeg.php\n * )\n *\n * imagecreatefromjpeg() returns an image identifier representing the\n * image obtained from the given filename. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the JPEG image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefrompng", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefrompng.php\n * )\n *\n * imagecreatefrompng() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the PNG image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromstring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecreatefromstring.php )\n *\n * imagecreatefromstring() returns an image identifier representing the\n * image obtained from the given data. These types will be automatically\n * detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and\n * GD2.\n *\n * @data       string  A string containing the image data.\n *\n * @return     mixed   An image resource will be returned on success. FALSE\n *                     is returned if the image type is unsupported, the\n *                     data is not in a recognised format, or the image is\n *                     corrupt and cannot be loaded.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromwbmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromwbmp.php\n * )\n *\n * imagecreatefromwbmp() returns an image identifier representing the\n * image obtained from the given filename. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the WBMP image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromxbm", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromxbm.php\n * )\n *\n * imagecreatefromxbm() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the XBM image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatefromxpm", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromxpm.php\n * )\n *\n * imagecreatefromxpm() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the XPM image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagecreatetruecolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecreatetruecolor.php )\n *\n * imagecreatetruecolor() returns an image identifier representing a black\n * image of the specified size.\n *\n * Depending on your PHP and GD versions this function is defined or not.\n * With PHP 4.0.6 through 4.1.x this function always exists if the GD\n * module is loaded, but calling it without GD2 being installed PHP will\n * issue a fatal error and exit. With PHP 4.2.x this behaviour is different\n * in issuing a warning instead of an error. Other versions only define\n * this function, if the correct GD version is installed.\n *\n * @width      int     Image width.\n * @height     int     Image height.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagedashedline", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagedashedline.php )\n *\n * This function is deprecated. Use combination of imagesetstyle() and\n * imageline() instead.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     Upper left x coordinate.\n * @y1         int     Upper left y coordinate 0, 0 is the top left corner\n *                     of the image.\n * @x2         int     Bottom right x coordinate.\n * @y2         int     Bottom right y coordinate.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Always returns true\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagedestroy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagedestroy.php )\n *\n * imagedestroy() frees any memory associated with image image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageellipse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageellipse.php )\n *\n * Draws an ellipse centered at the specified coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The ellipse width.\n * @height     int     The ellipse height.\n * @color      int     The color of the ellipse. A color identifier created\n *                     with imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cx", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cy", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefill", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefill.php )\n *\n * Performs a flood fill starting at the given coordinate (top left is 0,\n * 0) with the given color in the image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate of start point.\n * @y          int     y-coordinate of start point.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefilledarc", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilledarc.php )\n *\n * Draws a partial arc centered at the specified coordinate in the given\n * image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The arc width.\n * @height     int     The arc height.\n * @start      int     The arc start angle, in degrees.\n * @end        int     The arc end angle, in degrees. 0\302\260 is located at the\n *                     three-o'clock position, and the arc is drawn\n *                     clockwise.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n * @style      int     A bitwise OR of the following possibilities:\n *                     IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL\n *                     IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD are\n *                     mutually exclusive; IMG_ARC_CHORD just connects the\n *                     starting and ending angles with a straight line,\n *                     while IMG_ARC_PIE produces a rounded edge.\n *                     IMG_ARC_NOFILL indicates that the arc or chord\n *                     should be outlined, not filled. IMG_ARC_EDGED, used\n *                     together with IMG_ARC_NOFILL, indicates that the\n *                     beginning and ending angles should be connected to\n *                     the center - this is a good way to outline (rather\n *                     than fill) a 'pie slice'.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cx", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cy", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "start", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "end", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "style", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefilledellipse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilledellipse.php\n * )\n *\n * Draws an ellipse centered at the specified coordinate on the given\n * image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The ellipse width.\n * @height     int     The ellipse height.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cx", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cy", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefilledpolygon", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilledpolygon.php\n * )\n *\n * imagefilledpolygon() creates a filled polygon in the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @points     vector  An array containing the x and y coordinates of the\n *                     polygons vertices consecutively.\n * @num_points int     Total number of vertices, which must be at least 3.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "points", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "num_points", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefilledrectangle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagefilledrectangle.php )\n *\n * Creates a rectangle filled with color in the given image starting at\n * point 1 and ending at point 2. 0, 0 is the top left corner of the image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     x-coordinate for point 1.\n * @y1         int     y-coordinate for point 1.\n * @x2         int     x-coordinate for point 2.\n * @y2         int     y-coordinate for point 2.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefilltoborder", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilltoborder.php )\n *\n * imagefilltoborder() performs a flood fill whose border color is defined\n * by border. The starting point for the fill is x, y (top left is 0, 0)\n * and the region is filled with color color.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate of start.\n * @y          int     y-coordinate of start.\n * @border     int     The border color. A color identifier created with\n *                     imagecolorallocate().\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "border", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefilter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilter.php )\n *\n * imagefilter() applies the given filter filtertype on the image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filtertype int     filtertype can be one of the following:\n *                     IMG_FILTER_NEGATE: Reverses all colors of the image.\n *                     IMG_FILTER_GRAYSCALE: Converts the image into\n *                     grayscale. IMG_FILTER_BRIGHTNESS: Changes the\n *                     brightness of the image. Use arg1 to set the level\n *                     of brightness. IMG_FILTER_CONTRAST: Changes the\n *                     contrast of the image. Use arg1 to set the level of\n *                     contrast. IMG_FILTER_COLORIZE: Like\n *                     IMG_FILTER_GRAYSCALE, except you can specify the\n *                     color. Use arg1, arg2 and arg3 in the form of red,\n *                     blue, green and arg4 for the alpha channel. The\n *                     range for each color is 0 to 255.\n *                     IMG_FILTER_EDGEDETECT: Uses edge detection to\n *                     highlight the edges in the image. IMG_FILTER_EMBOSS:\n *                     Embosses the image. IMG_FILTER_GAUSSIAN_BLUR: Blurs\n *                     the image using the Gaussian method.\n *                     IMG_FILTER_SELECTIVE_BLUR: Blurs the image.\n *                     IMG_FILTER_MEAN_REMOVAL: Uses mean removal to\n *                     achieve a \"sketchy\" effect. IMG_FILTER_SMOOTH: Makes\n *                     the image smoother. Use arg1 to set the level of\n *                     smoothness. IMG_FILTER_PIXELATE: Applies pixelation\n *                     effect to the image, use arg1 to set the block size\n *                     and arg2 to set the pixelation effect mode.\n * @arg1       int     IMG_FILTER_BRIGHTNESS: Brightness level.\n *                     IMG_FILTER_CONTRAST: Contrast level.\n *                     IMG_FILTER_COLORIZE: Value of red component.\n *                     IMG_FILTER_SMOOTH: Smoothness level.\n *                     IMG_FILTER_PIXELATE: Block size in pixels.\n * @arg2       int     IMG_FILTER_COLORIZE: Value of green component.\n *                     IMG_FILTER_PIXELATE: Whether to use advanced\n *                     pixelation effect or not (defaults to FALSE).\n * @arg3       int     IMG_FILTER_COLORIZE: Value of blue component.\n * @arg4       int     IMG_FILTER_COLORIZE: Alpha channel, A value between\n *                     0 and 127. 0 indicates completely opaque while 127\n *                     indicates completely transparent.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filtertype", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "arg1", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "arg2", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "arg3", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "arg4", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefontheight", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefontheight.php )\n *\n * Returns the pixel height of a character in the specified font.\n *\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n *\n * @return     int     Returns the height of the pixel.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefontwidth", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefontwidth.php )\n *\n * Returns the pixel width of a character in font.\n *\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n *\n * @return     int     Returns the width of the pixel\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageftbbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageftbbox.php )\n *\n * This function calculates and returns the bounding box in pixels for a\n * FreeType text.\n *\n * @size       float   The font size. Depending on your version of GD, this\n *                     should be specified as the pixel size (GD1) or point\n *                     size (GD2).\n * @angle      float   Angle in degrees in which text will be measured.\n * @font_file  string  The name of the TrueType font file (can be a URL).\n *                     Depending on which version of the GD library that\n *                     PHP is using, it may attempt to search for files\n *                     that do not begin with a leading '/' by appending\n *                     '.ttf' to the filename and searching along a\n *                     library-defined font path.\n * @text       string  The string to be measured.\n * @extrainfo  map     Possible array indexes for extrainfo Key Type\n *                     Meaning linespacing float Defines drawing\n *                     linespacing\n *\n * @return     mixed   imageftbbox() returns an array with 8 elements\n *                     representing four points making the bounding box of\n *                     the text: 0 lower left corner, X position 1 lower\n *                     left corner, Y position 2 lower right corner, X\n *                     position 3 lower right corner, Y position 4 upper\n *                     right corner, X position 5 upper right corner, Y\n *                     position 6 upper left corner, X position 7 upper\n *                     left corner, Y position\n *\n *                     The points are relative to the text regardless of\n *                     the angle, so \"upper left\" means in the top\n *                     left-hand corner seeing the text horizontally.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "size", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font_file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "extrainfo", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagefttext", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagefttext.php )\n *\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @size       float   The font size to use in points.\n * @angle      float   The angle in degrees, with 0 degrees being\n *                     left-to-right reading text. Higher values represent\n *                     a counter-clockwise rotation. For example, a value\n *                     of 90 would result in bottom-to-top reading text.\n * @x          int     The coordinates given by x and y will define the\n *                     basepoint of the first character (roughly the\n *                     lower-left corner of the character). This is\n *                     different from the imagestring(), where x and y\n *                     define the upper-left corner of the first character.\n *                     For example, \"top left\" is 0, 0.\n * @y          int     The y-ordinate. This sets the position of the fonts\n *                     baseline, not the very bottom of the character.\n * @col        int     The index of the desired color for the text, see\n *                     imagecolorexact().\n * @font_file  string  The path to the TrueType font you wish to use.\n *\n *                     Depending on which version of the GD library PHP is\n *                     using, when fontfile does not begin with a leading /\n *                     then .ttf will be appended to the filename and the\n *                     library will attempt to search for that filename\n *                     along a library-defined font path.\n *\n *                     When using versions of the GD library lower than\n *                     2.0.18, a space character, rather than a semicolon,\n *                     was used as the 'path separator' for different font\n *                     files. Unintentional use of this feature will result\n *                     in the warning message: Warning: Could not find/open\n *                     font. For these affected versions, the only solution\n *                     is moving the font to a path which does not contain\n *                     spaces.\n *\n *                     In many cases where a font resides in the same\n *                     directory as the script using it the following trick\n *                     will alleviate any include problems.\n * @text       string  Text to be inserted into image.\n * @extrainfo  map     Possible array indexes for extrainfo Key Type\n *                     Meaning linespacing float Defines drawing\n *                     linespacing\n *\n * @return     mixed   This function returns an array defining the four\n *                     points of the box, starting in the lower left and\n *                     moving counter-clockwise: 0 lower left x-coordinate\n *                     1 lower left y-coordinate 2 lower right x-coordinate\n *                     3 lower right y-coordinate 4 upper right\n *                     x-coordinate 5 upper right y-coordinate 6 upper left\n *                     x-coordinate 7 upper left y-coordinate\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "col", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font_file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "extrainfo", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagegammacorrect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagegammacorrect.php )\n *\n * Applies gamma correction to the given gd image given an input and an\n * output gamma.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @inputgamma float   The input gamma.\n * @outputgamma\n *             float   The output gamma.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "inputgamma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "outputgamma", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagegd2", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagegd2.php )\n *\n * Outputs a GD2 image to the given filename.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n * @chunk_size int     Chunk size.\n * @type       int     Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. Default is\n *                     IMG_GD2_RAW.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "chunk_size", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagegd", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagegd.php )\n *\n * Outputs a GD image to the given filename.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagegif", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagegif.php )\n *\n * imagegif() creates the GIF file in filename from the image image. The\n * image argument is the return from the imagecreate() or imagecreatefrom*\n * function.\n *\n * The image format will be GIF87a unless the image has been made\n * transparent with imagecolortransparent(), in which case the image format\n * will be GIF89a.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagegrabscreen", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagegrabscreen.php )\n *\n * Grabs a screenshot of the whole screen.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagegrabwindow", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagegrabwindow.php )\n *\n * Grabs a window or its client area using a windows handle (HWND property\n * in COM instance)\n *\n * @window     int     The HWND window ID.\n * @client_area\n *             int     Include the client area of the application window.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "window", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "client_area", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageinterlace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageinterlace.php )\n *\n * imageinterlace() turns the interlace bit on or off.\n *\n * If the interlace bit is set and the image is used as a JPEG image, the\n * image is created as a progressive JPEG.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @interlace  int     If non-zero, the image will be interlaced, else the\n *                     interlace bit is turned off.\n *\n * @return     mixed   Returns 1 if the interlace bit is set for the image,\n *                     0 otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "interlace", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageistruecolor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageistruecolor.php )\n *\n * imageistruecolor() finds whether the image image is a truecolor image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     bool    Returns TRUE if the image is truecolor, FALSE\n *                     otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagejpeg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagejpeg.php )\n *\n * imagejpeg() creates a JPEG file from the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n *                     To skip this argument in order to provide the\n *                     quality parameter, use NULL.\n * @quality    int     quality is optional, and ranges from 0 (worst\n *                     quality, smaller file) to 100 (best quality, biggest\n *                     file). The default is the default IJG quality value\n *                     (about 75).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "quality", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagelayereffect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagelayereffect.php )\n *\n * Set the alpha blending flag to use the bundled libgd layering effects.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @effect     int     One of the following constants: IMG_EFFECT_REPLACE\n *                     Use pixel replacement (equivalent of passing TRUE to\n *                     imagealphablending())\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "effect", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageline", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageline.php )\n *\n * Draws a line between the two given points.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     x-coordinate for first point.\n * @y1         int     y-coordinate for first point.\n * @x2         int     x-coordinate for second point.\n * @y2         int     y-coordinate for second point.\n * @color      int     The line color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imageloadfont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imageloadfont.php )\n *\n * imageloadfont() loads a user-defined bitmap and returns its identifier.\n *\n * @file       string  The font file format is currently binary and\n *                     architecture dependent. This means you should\n *                     generate the font files on the same type of CPU as\n *                     the machine you are running PHP on.\n *\n *                     Font file format byte position C data type\n *                     description byte 0-3 int number of characters in the\n *                     font byte 4-7 int value of first character in the\n *                     font (often 32 for space) byte 8-11 int pixel width\n *                     of each character byte 12-15 int pixel height of\n *                     each character byte 16- char array with character\n *                     data, one byte per pixel in each character, for a\n *                     total of (nchars*width*height) bytes.\n *\n * @return     mixed   The font identifier which is always bigger than 5 to\n *                     avoid conflicts with built-in fonts or FALSE on\n *                     errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepalettecopy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepalettecopy.php )\n *\n * imagepalettecopy() copies the palette from the source image to the\n * destination image.\n *\n * @destination\n *             resource\n *                     The destination image resource.\n * @source     resource\n *                     The source image resource.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "destination", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "source", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepng", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepng.php )\n *\n * Outputs or saves a PNG image from the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n *                     NULL is invalid if the quality and filters\n *                     arguments are not used.\n * @quality    int     Compression level: from 0 (no compression) to 9.\n * @filters    int     Allows reducing the PNG file size. It is a bitmask\n *                     field which may be set to any combination of the\n *                     PNG_FILTER_XXX constants. PNG_NO_FILTER or\n *                     PNG_ALL_FILTERS may also be used to respectively\n *                     disable or activate all filters.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "quality", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  (const char *)0x2000, "filters", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepolygon", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepolygon.php )\n *\n * imagepolygon() creates a polygon in the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @points     vector  An array containing the polygon's vertices, e.g.:\n *                     points[0] = x0 points[1] = y0 points[2] = x1\n *                     points[3] = y1\n * @num_points int     Total number of points (vertices).\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "points", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "num_points", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepsbbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsbbox.php )\n *\n * Gives the bounding box of a text rectangle using PostScript Type1\n * fonts.\n *\n * The bounding box is calculated using information available from\n * character metrics, and unfortunately tends to differ slightly from the\n * results achieved by actually rasterizing the text. If the angle is 0\n * degrees, you can expect the text to need 1 pixel more to every\n * direction.\n *\n * @text       string  The text to be written.\n * @font       int     A font resource, returned by imagepsloadfont().\n * @size       int     size is expressed in pixels.\n * @space      int     Allows you to change the default value of a space in\n *                     a font. This amount is added to the normal value and\n *                     can also be negative. Expressed in character space\n *                     units, where 1 unit is 1/1000th of an em-square.\n * @tightness  int     tightness allows you to control the amount of white\n *                     space between characters. This amount is added to\n *                     the normal character width and can also be negative.\n *                     Expressed in character space units, where 1 unit is\n *                     1/1000th of an em-square.\n * @angle      float   angle is in degrees.\n *\n * @return     vector  Returns an array containing the following elements:\n *                     0 left x-coordinate 1 upper y-coordinate 2 right\n *                     x-coordinate 3 lower y-coordinate\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "space", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "tightness", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepsencodefont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsencodefont.php )\n *\n * Loads a character encoding vector from a file and changes the fonts\n * encoding vector to it. As a PostScript fonts default vector lacks most\n * of the character positions above 127, you'll definitely want to change\n * this if you use an other language than English.\n *\n * If you find yourself using this function all the time, a much better\n * way to define the encoding is to set ps.default_encoding in the\n * configuration file to point to the right encoding file and all fonts you\n * load will automatically have the right encoding.\n *\n * @font_index resource\n *                     A font resource, returned by imagepsloadfont().\n * @encodingfile\n *             string  The exact format of this file is described in T1libs\n *                     documentation. T1lib comes with two ready-to-use\n *                     files, IsoLatin1.enc and IsoLatin2.enc.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "font_index", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encodingfile", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepsextendfont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsextendfont.php )\n *\n * Extend or condense a font (font_index), if the value of the extend\n * parameter is less than one you will be condensing the font.\n *\n * @font_index int     A font resource, returned by imagepsloadfont().\n * @extend     float   Extension value, must be greater than 0.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "font_index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "extend", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepsfreefont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsfreefont.php )\n *\n * imagepsfreefont() frees memory used by a PostScript Type 1 font.\n *\n * @fontindex  resource\n *                     A font resource, returned by imagepsloadfont().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "fontindex", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepsloadfont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsloadfont.php )\n *\n * Load a PostScript Type 1 font from the given filename.\n *\n * @filename   string  Path to the Postscript font file.\n *\n * @return     resource\n *                     In the case everything went right, a valid font\n *                     index will be returned and can be used for further\n *                     purposes. Otherwise the function returns FALSE.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepsslantfont", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsslantfont.php )\n *\n * Slant a given font given.\n *\n * @font_index resource\n *                     A font resource, returned by imagepsloadfont().\n * @slant      float   Slant level.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "font_index", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "slant", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagepstext", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagepstext.php )\n *\n * Draws a text on an image using PostScript Type1 fonts.\n *\n * Refer to PostScript documentation about fonts and their measuring\n * system if you have trouble understanding how this works.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @text       string  The text to be written.\n * @font       resource\n *                     A font resource, returned by imagepsloadfont().\n * @size       int     size is expressed in pixels.\n * @foreground int     The color in which the text will be painted.\n * @background int     The color to which the text will try to fade in with\n *                     antialiasing. No pixels with the color background\n *                     are actually painted, so the background image does\n *                     not need to be of solid color.\n * @x          int     x-coordinate for the lower-left corner of the first\n *                     character.\n * @y          int     y-coordinate for the lower-left corner of the first\n *                     character.\n * @space      int     Allows you to change the default value of a space in\n *                     a font. This amount is added to the normal value and\n *                     can also be negative. Expressed in character space\n *                     units, where 1 unit is 1/1000th of an em-square.\n * @tightness  int     tightness allows you to control the amount of white\n *                     space between characters. This amount is added to\n *                     the normal character width and can also be negative.\n *                     Expressed in character space units, where 1 unit is\n *                     1/1000th of an em-square.\n * @angle      float   angle is in degrees.\n * @antialias_steps\n *             int     Allows you to control the number of colours used for\n *                     antialiasing text. Allowed values are 4 and 16. The\n *                     higher value is recommended for text sizes lower\n *                     than 20, where the effect in text quality is quite\n *                     visible. With bigger sizes, use 4. It's less\n *                     computationally intensive.\n *\n * @return     vector  This function returns an array containing the\n *                     following elements: 0 lower left x-coordinate 1\n *                     lower left y-coordinate 2 upper right x-coordinate 3\n *                     upper right y-coordinate\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "foreground", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "background", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "space", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "tightness", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "d:0;", (const char *)4, "0.0", (const char *)3, NULL,
  (const char *)0x2000, "antialias_steps", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagerectangle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagerectangle.php )\n *\n * imagerectangle() creates a rectangle starting at the specified\n * coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     Upper left x coordinate.\n * @y1         int     Upper left y coordinate 0, 0 is the top left corner\n *                     of the image.\n * @x2         int     Bottom right x coordinate.\n * @y2         int     Bottom right y coordinate.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y1", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y2", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagerotate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagerotate.php )\n *\n * Rotates the image image using the given angle in degrees.\n *\n * The center of rotation is the center of the image, and the rotated\n * image may have different dimensions than the original image.\n *\n * @source_image\n *             resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @angle      float   Rotation angle, in degrees.\n * @bgd_color  int     Specifies the color of the uncovered zone after the\n *                     rotation\n * @ignore_transparent\n *             int     If set and non-zero, transparent colors are ignored\n *                     (otherwise kept).\n *\n * @return     mixed   Returns an image resource for the rotated image, or\n *                     FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "source_image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "bgd_color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ignore_transparent", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesavealpha", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesavealpha.php )\n *\n * imagesavealpha() sets the flag to attempt to save full alpha channel\n * information (as opposed to single-color transparency) when saving PNG\n * images.\n *\n * You have to unset alphablending (imagealphablending($im, false)), to\n * use it.\n *\n * Alpha channel is not supported by all browsers, if you have problem\n * with your browser, try to load your script with an alpha channel\n * compliant browser, e.g. latest Mozilla.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @saveflag   bool    Whether to save the alpha channel or not. Default to\n *                     FALSE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "saveflag", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesetbrush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetbrush.php )\n *\n * imagesetbrush() sets the brush image to be used by all line drawing\n * functions (such as imageline() and imagepolygon()) when drawing with the\n * special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @brush      resource\n *                     An image resource.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "brush", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesetpixel", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetpixel.php )\n *\n * imagesetpixel() draws a pixel at the specified coordinate.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate.\n * @y          int     y-coordinate.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesetstyle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetstyle.php )\n *\n * imagesetstyle() sets the style to be used by all line drawing functions\n * (such as imageline() and imagepolygon()) when drawing with the special\n * color IMG_COLOR_STYLED or lines of images with color\n * IMG_COLOR_STYLEDBRUSHED.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @style      map     An array of pixel colors. You can use the\n *                     IMG_COLOR_TRANSPARENT constant to add a transparent\n *                     pixel.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "style", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesetthickness", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetthickness.php )\n *\n * imagesetthickness() sets the thickness of the lines drawn when drawing\n * rectangles, polygons, ellipses etc. etc. to thickness pixels.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @thickness  int     Thickness, in pixels.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "thickness", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesettile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesettile.php )\n *\n * imagesettile() sets the tile image to be used by all region filling\n * functions (such as imagefill() and imagefilledpolygon()) when filling\n * with the special color IMG_COLOR_TILED.\n *\n * A tile is an image used to fill an area with a repeated pattern. Any GD\n * image can be used as a tile, and by setting the transparent color index\n * of the tile image with imagecolortransparent(), a tile allows certain\n * parts of the underlying area to shine through can be created.\n *\n * You need not take special action when you are finished with a tile, but\n * if you destroy the tile image, you must not use the IMG_COLOR_TILED\n * color until you have set a new tile image!\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @tile       resource\n *                     The image resource to be used as a tile.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "tile", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagestring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagestring.php )\n *\n * Draws a string at the given coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the upper left corner.\n * @y          int     y-coordinate of the upper left corner.\n * @str        string  The string to be written.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagestringup", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagestringup.php )\n *\n * Draws a string vertically at the given coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the bottom left corner.\n * @y          int     y-coordinate of the bottom left corner.\n * @str        string  The string to be written.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "font", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesx", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesx.php )\n *\n * Returns the width of the given image resource.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     mixed   Return the width of the image or FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagesy", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagesy.php )\n *\n * Returns the height of the given image resource.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     mixed   Return the height of the image or FALSE on errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagetruecolortopalette", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagetruecolortopalette.php )\n *\n * imagetruecolortopalette() converts a truecolor image to a palette\n * image. The code for this function was originally drawn from the\n * Independent JPEG Group library code, which is excellent. The code has\n * been modified to preserve as much alpha channel information as possible\n * in the resulting palette, in addition to preserving colors as well as\n * possible. This does not work as well as might be hoped. It is usually\n * best to simply produce a truecolor output image instead, which\n * guarantees the highest output quality.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @dither     bool    Indicates if the image should be dithered - if it is\n *                     TRUE then dithering will be used which will result\n *                     in a more speckled image but with better color\n *                     approximation.\n * @ncolors    int     Sets the maximum number of colors that should be\n *                     retained in the palette.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dither", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ncolors", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagettfbbox", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagettfbbox.php )\n *\n * This function calculates and returns the bounding box in pixels for a\n * TrueType text.\n *\n * @size       float   The font size. Depending on your version of GD, this\n *                     should be specified as the pixel size (GD1) or point\n *                     size (GD2).\n * @angle      float   Angle in degrees in which text will be measured.\n * @fontfile   string  The name of the TrueType font file (can be a URL).\n *                     Depending on which version of the GD library that\n *                     PHP is using, it may attempt to search for files\n *                     that do not begin with a leading '/' by appending\n *                     '.ttf' to the filename and searching along a\n *                     library-defined font path.\n * @text       string  The string to be measured.\n *\n * @return     mixed   imagettfbbox() returns an array with 8 elements\n *                     representing four points making the bounding box of\n *                     the text on success and FALSE on error. key contents\n *                     0 lower left corner, X position 1 lower left corner,\n *                     Y position 2 lower right corner, X position 3 lower\n *                     right corner, Y position 4 upper right corner, X\n *                     position 5 upper right corner, Y position 6 upper\n *                     left corner, X position 7 upper left corner, Y\n *                     position\n *\n *                     The points are relative to the text regardless of\n *                     the angle, so \"upper left\" means in the top\n *                     left-hand corner seeing the text horizontally.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "size", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fontfile", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagettftext", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagettftext.php )\n *\n * Writes the given text into the image using TrueType fonts.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @size       float   The font size. Depending on your version of GD, this\n *                     should be specified as the pixel size (GD1) or point\n *                     size (GD2).\n * @angle      float   The angle in degrees, with 0 degrees being\n *                     left-to-right reading text. Higher values represent\n *                     a counter-clockwise rotation. For example, a value\n *                     of 90 would result in bottom-to-top reading text.\n * @x          int     The coordinates given by x and y will define the\n *                     basepoint of the first character (roughly the\n *                     lower-left corner of the character). This is\n *                     different from the imagestring(), where x and y\n *                     define the upper-left corner of the first character.\n *                     For example, \"top left\" is 0, 0.\n * @y          int     The y-ordinate. This sets the position of the fonts\n *                     baseline, not the very bottom of the character.\n * @color      int     The color index. Using the negative of a color index\n *                     has the effect of turning off antialiasing. See\n *                     imagecolorallocate().\n * @fontfile   string  The path to the TrueType font you wish to use.\n *\n *                     Depending on which version of the GD library PHP is\n *                     using, when fontfile does not begin with a leading /\n *                     then .ttf will be appended to the filename and the\n *                     library will attempt to search for that filename\n *                     along a library-defined font path.\n *\n *                     When using versions of the GD library lower than\n *                     2.0.18, a space character, rather than a semicolon,\n *                     was used as the 'path separator' for different font\n *                     files. Unintentional use of this feature will result\n *                     in the warning message: Warning: Could not find/open\n *                     font. For these affected versions, the only solution\n *                     is moving the font to a path which does not contain\n *                     spaces.\n *\n *                     In many cases where a font resides in the same\n *                     directory as the script using it the following trick\n *                     will alleviate any include problems.\n * @text       string  The text string in UTF-8 encoding.\n *\n *                     May include decimal numeric character references\n *                     (of the form: &#8364;) to access characters in a\n *                     font beyond position 127. The hexadecimal format\n *                     (like &#xA9;) is supported. Strings in UTF-8\n *                     encoding can be passed directly.\n *\n *                     Named entities, such as &copy;, are not supported.\n *                     Consider using html_entity_decode() to decode these\n *                     named entities into UTF-8 strings\n *                     (html_entity_decode() supports this as of PHP\n *                     5.0.0).\n *\n *                     If a character is used in the string which is not\n *                     supported by the font, a hollow rectangle will\n *                     replace the character.\n *\n * @return     mixed   Returns an array with 8 elements representing four\n *                     points making the bounding box of the text. The\n *                     order of the points is lower left, lower right,\n *                     upper right, upper left. The points are relative to\n *                     the text regardless of the angle, so \"upper left\"\n *                     means in the top left-hand corner when you see the\n *                     text horizontally. Returns FALSE on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "size", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "angle", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "x", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "y", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "color", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fontfile", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagetypes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagetypes.php )\n *\n * Returns the image types supported by the current PHP installation.\n *\n * @return     int     Returns a bit-field corresponding to the image\n *                     formats supported by the version of GD linked into\n *                     PHP. The following bits are returned, IMG_GIF |\n *                     IMG_JPG | IMG_PNG | IMG_WBMP | IMG_XPM.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagewbmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagewbmp.php )\n *\n * imagewbmp() outputs or save a WBMP version of the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n * @foreground int     You can set the foreground color with this parameter\n *                     by setting an identifier obtained from\n *                     imagecolorallocate(). The default foreground color\n *                     is black.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "foreground", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "imagexbm", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.imagexbm.php )\n *\n * Outputs or save an XBM version of the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n * @foreground int     You can set the foreground color with this parameter\n *                     by setting an identifier obtained from\n *                     imagecolorallocate(). The default foreground color\n *                     is black.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "image", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "foreground", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iptcembed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iptcembed.php )\n *\n * Embeds binary IPTC data into a JPEG image.\n *\n * @iptcdata   string  The data to be written.\n * @jpeg_file_name\n *             string  Path to the JPEG image.\n * @spool      int     Spool flag. If the spool flag is over 2 then the\n *                     JPEG will be returned as a string.\n *\n * @return     mixed   If success and spool flag is lower than 2 then the\n *                     JPEG will not be returned as a string, FALSE on\n *                     errors.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "iptcdata", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "jpeg_file_name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "spool", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "iptcparse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.iptcparse.php )\n *\n *\n * @iptcblock  string  A binary IPTC block.\n *\n * @return     mixed   Returns an array using the tagmarker as an index and\n *                     the value as the value. It returns FALSE on error or\n *                     if no IPTC data was found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "iptcblock", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "jpeg2wbmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.jpeg2wbmp.php )\n *\n * Converts a JPEG file into a WBMP file.\n *\n * @jpegname   string  Path to JPEG file.\n * @wbmpname   string  Path to destination WBMP file.\n * @dest_height\n *             int     Destination image height.\n * @dest_width int     Destination image width.\n * @threshold  int     Threshold value, between 0 and 8 (inclusive).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "jpegname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "wbmpname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dest_height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dest_width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "png2wbmp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.png2wbmp.php )\n *\n * Converts a PNG file into a WBMP file.\n *\n * @pngname    string  Path to PNG file.\n * @wbmpname   string  Path to destination WBMP file.\n * @dest_height\n *             int     Destination image height.\n * @dest_width int     Destination image width.\n * @threshold  int     Threshold value, between 0 and 8 (inclusive).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "pngname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "wbmpname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dest_height", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dest_width", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "threshold", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exif_imagetype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exif-imagetype.php )\n *\n * exif_imagetype() reads the first bytes of an image and checks its\n * signature.\n *\n * exif_imagetype() can be used to avoid calls to other exif functions\n * with unsupported file types or in conjunction with\n * $_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is able to\n * see a specific image in the browser.\n *\n * @filename   string  The image being checked.\n *\n * @return     mixed   When a correct signature is found, the appropriate\n *                     constant value will be returned otherwise the return\n *                     value is FALSE. The return value is the same value\n *                     that getimagesize() returns in index 2 but\n *                     exif_imagetype() is much faster.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exif_read_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exif-read-data.php )\n *\n *\n * @filename   string  The name of the image file being read. This cannot\n *                     be an URL.\n * @sections   string  Is a comma separated list of sections that need to\n *                     be present in file to produce a result array. If\n *                     none of the requested sections could be found the\n *                     return value is FALSE. FILE FileName, FileSize,\n *                     FileDateTime, SectionsFound COMPUTED html, Width,\n *                     Height, IsColor, and more if available. Height and\n *                     Width are computed the same way getimagesize() does\n *                     so their values must not be part of any header\n *                     returned. Also, html is a height/width text string\n *                     to be used inside normal HTML. ANY_TAG Any\n *                     information that has a Tag e.g. IFD0, EXIF, ... IFD0\n *                     All tagged data of IFD0. In normal imagefiles this\n *                     contains image size and so forth. THUMBNAIL A file\n *                     is supposed to contain a thumbnail if it has a\n *                     second IFD. All tagged information about the\n *                     embedded thumbnail is stored in this section.\n *                     COMMENT Comment headers of JPEG images. EXIF The\n *                     EXIF section is a sub section of IFD0. It contains\n *                     more detailed information about an image. Most of\n *                     these entries are digital camera related.\n * @arrays     bool    Specifies whether or not each section becomes an\n *                     array. The sections COMPUTED, THUMBNAIL, and COMMENT\n *                     always become arrays as they may contain values\n *                     whose names conflict with other sections.\n * @thumbnail  bool    When set to TRUE the thumbnail itself is read.\n *                     Otherwise, only the tagged data is read.\n *\n * @return     mixed   It returns an associative array where the array\n *                     indexes are the header names and the array values\n *                     are the values associated with those headers. If no\n *                     data can be returned, exif_read_data() will return\n *                     FALSE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sections", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "arrays", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "thumbnail", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "read_exif_data", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.read-exif-data.php )\n *\n *\n * @filename   string\n * @sections   string\n * @arrays     bool\n * @thumbnail  bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sections", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "arrays", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "thumbnail", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exif_tagname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exif-tagname.php )\n *\n *\n * @index      int     The image index\n *\n * @return     mixed   Returns the header name, or FALSE if index is\n *                     undefined.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exif_thumbnail", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/function.exif-thumbnail.php )\n *\n * exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image.\n *\n * If you want to deliver thumbnails through this function, you should\n * send the mimetype information using the header() function.\n *\n * It is possible that exif_thumbnail() cannot create an image but can\n * determine its size. In this case, the return value is FALSE but width\n * and height are set.\n *\n * @filename   string  The name of the image file being read. This image\n *                     contains an embedded thumbnail.\n * @width      mixed   The return width of the returned thumbnail.\n * @height     mixed   The returned height of the returned thumbnail.\n * @imagetype  mixed   The returned image type of the returned thumbnail.\n *                     This is either TIFF or JPEG.\n *\n * @return     mixed   Returns the embedded thumbnail, or FALSE if the\n *                     image contains no thumbnail.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "width", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "height", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "imagetype", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_is_service_thread", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns an indication of whether the current thread is a service thread\n * or not.\n *\n * @return     bool    TRUE if the current thread is a service thread,\n *                     FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_service_thread_started", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * A function to call to tell system a service thread has completed its\n * startup.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_service_thread_stopped", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * A function to call to ask system whether a service thread should stop.\n *\n * @timeout    int     How many seconds to wait for system to tell us.\n *\n * @return     bool    TRUE if HTTP server is stopping and service thread\n *                     should stop, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_thread_is_warmup_enabled", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Whether current thread is warmed up with some PHP document.\n *\n * @return     bool    TRUE if warmed up already, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_thread_set_warmup_enabled", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Enables warmup document.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_get_thread_id", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets current thread's ID.\n *\n * @return     int     The pthread_self() return.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "hphp_gettid", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets the kernel thread id of the current running thread.\n *\n * @return     int     The tid of the current running thread. In Linux,\n *                     this is gettid()\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "false", (const char*)4, "b:0;",
  "true", (const char*)4, "b:1;",
  "null", (const char*)2, "N;",
  "ABDAY_1", (const char*)9, "i:131072;",
  "ABDAY_2", (const char*)9, "i:131073;",
  "ABDAY_3", (const char*)9, "i:131074;",
  "ABDAY_4", (const char*)9, "i:131075;",
  "ABDAY_5", (const char*)9, "i:131076;",
  "ABDAY_6", (const char*)9, "i:131077;",
  "ABDAY_7", (const char*)9, "i:131078;",
  "ABMON_1", (const char*)9, "i:131086;",
  "ABMON_10", (const char*)9, "i:131095;",
  "ABMON_11", (const char*)9, "i:131096;",
  "ABMON_12", (const char*)9, "i:131097;",
  "ABMON_2", (const char*)9, "i:131087;",
  "ABMON_3", (const char*)9, "i:131088;",
  "ABMON_4", (const char*)9, "i:131089;",
  "ABMON_5", (const char*)9, "i:131090;",
  "ABMON_6", (const char*)9, "i:131091;",
  "ABMON_7", (const char*)9, "i:131092;",
  "ABMON_8", (const char*)9, "i:131093;",
  "ABMON_9", (const char*)9, "i:131094;",
  "AF_INET", (const char*)4, "i:2;",
  "AF_INET6", (const char*)5, "i:10;",
  "AF_UNIX", (const char*)4, "i:1;",
  "ALT_DIGITS", (const char*)9, "i:131119;",
  "AM_STR", (const char*)9, "i:131110;",
  "APACHE_MAP", (const char*)6, "i:200;",
  "ASSERT_ACTIVE", (const char*)4, "i:1;",
  "ASSERT_BAIL", (const char*)4, "i:3;",
  "ASSERT_CALLBACK", (const char*)4, "i:2;",
  "ASSERT_QUIET_EVAL", (const char*)4, "i:5;",
  "ASSERT_WARNING", (const char*)4, "i:4;",
  "CASE_LOWER", (const char*)4, "i:0;",
  "CASE_UPPER", (const char*)4, "i:1;",
  "CHAR_MAX", (const char*)6, "i:127;",
  "CLOCK_MONOTONIC", (const char*)4, "i:1;",
  "CLOCK_PROCESS_CPUTIME_ID", (const char*)4, "i:2;",
  "CLOCK_REALTIME", (const char*)4, "i:0;",
  "CLOCK_THREAD_CPUTIME_ID", (const char*)4, "i:3;",
  "CL_EXPUNGE", (const char*)8, "i:32768;",
  "CODESET", (const char*)5, "i:14;",
  "CONNECTION_ABORTED", (const char*)4, "i:1;",
  "CONNECTION_NORMAL", (const char*)4, "i:0;",
  "CONNECTION_TIMEOUT", (const char*)4, "i:2;",
  "COUNT_NORMAL", (const char*)4, "i:0;",
  "COUNT_RECURSIVE", (const char*)4, "i:1;",
  "CP_MOVE", (const char*)4, "i:2;",
  "CP_UID", (const char*)4, "i:1;",
  "CREDITS_ALL", (const char*)13, "i:4294967295;",
  "CREDITS_DOCS", (const char*)5, "i:16;",
  "CREDITS_FULLPAGE", (const char*)5, "i:32;",
  "CREDITS_GENERAL", (const char*)4, "i:2;",
  "CREDITS_GROUP", (const char*)4, "i:1;",
  "CREDITS_MODULES", (const char*)4, "i:8;",
  "CREDITS_QA", (const char*)5, "i:64;",
  "CREDITS_SAPI", (const char*)4, "i:4;",
  "CRNCYSTR", (const char*)9, "i:262159;",
  "CRYPT_BLOWFISH", (const char*)4, "i:0;",
  "CRYPT_EXT_DES", (const char*)4, "i:0;",
  "CRYPT_MD5", (const char*)4, "i:1;",
  "CRYPT_SALT_LENGTH", (const char*)5, "i:12;",
  "CRYPT_STD_DES", (const char*)4, "i:1;",
  "CURLAUTH_ANY", (const char*)5, "i:-1;",
  "CURLAUTH_ANYSAFE", (const char*)5, "i:-2;",
  "CURLAUTH_BASIC", (const char*)4, "i:1;",
  "CURLAUTH_DIGEST", (const char*)4, "i:2;",
  "CURLAUTH_GSSNEGOTIATE", (const char*)4, "i:4;",
  "CURLAUTH_NTLM", (const char*)4, "i:8;",
  "CURLCLOSEPOLICY_CALLBACK", (const char*)4, "i:5;",
  "CURLCLOSEPOLICY_LEAST_RECENTLY_USED", (const char*)4, "i:2;",
  "CURLCLOSEPOLICY_LEAST_TRAFFIC", (const char*)4, "i:3;",
  "CURLCLOSEPOLICY_OLDEST", (const char*)4, "i:1;",
  "CURLCLOSEPOLICY_SLOWEST", (const char*)4, "i:4;",
  "CURLE_ABORTED_BY_CALLBACK", (const char*)5, "i:42;",
  "CURLE_BAD_CALLING_ORDER", (const char*)5, "i:44;",
  "CURLE_BAD_CONTENT_ENCODING", (const char*)5, "i:61;",
  "CURLE_BAD_FUNCTION_ARGUMENT", (const char*)5, "i:43;",
  "CURLE_BAD_PASSWORD_ENTERED", (const char*)5, "i:46;",
  "CURLE_COULDNT_CONNECT", (const char*)4, "i:7;",
  "CURLE_COULDNT_RESOLVE_HOST", (const char*)4, "i:6;",
  "CURLE_COULDNT_RESOLVE_PROXY", (const char*)4, "i:5;",
  "CURLE_FAILED_INIT", (const char*)4, "i:2;",
  "CURLE_FILESIZE_EXCEEDED", (const char*)5, "i:63;",
  "CURLE_FILE_COULDNT_READ_FILE", (const char*)5, "i:37;",
  "CURLE_FTP_ACCESS_DENIED", (const char*)4, "i:9;",
  "CURLE_FTP_BAD_DOWNLOAD_RESUME", (const char*)5, "i:36;",
  "CURLE_FTP_CANT_GET_HOST", (const char*)5, "i:15;",
  "CURLE_FTP_CANT_RECONNECT", (const char*)5, "i:16;",
  "CURLE_FTP_COULDNT_GET_SIZE", (const char*)5, "i:32;",
  "CURLE_FTP_COULDNT_RETR_FILE", (const char*)5, "i:19;",
  "CURLE_FTP_COULDNT_SET_ASCII", (const char*)5, "i:29;",
  "CURLE_FTP_COULDNT_SET_BINARY", (const char*)5, "i:17;",
  "CURLE_FTP_COULDNT_STOR_FILE", (const char*)5, "i:25;",
  "CURLE_FTP_COULDNT_USE_REST", (const char*)5, "i:31;",
  "CURLE_FTP_PORT_FAILED", (const char*)5, "i:30;",
  "CURLE_FTP_QUOTE_ERROR", (const char*)5, "i:21;",
  "CURLE_FTP_SSL_FAILED", (const char*)5, "i:64;",
  "CURLE_FTP_USER_PASSWORD_INCORRECT", (const char*)5, "i:10;",
  "CURLE_FTP_WEIRD_227_FORMAT", (const char*)5, "i:14;",
  "CURLE_FTP_WEIRD_PASS_REPLY", (const char*)5, "i:11;",
  "CURLE_FTP_WEIRD_PASV_REPLY", (const char*)5, "i:13;",
  "CURLE_FTP_WEIRD_SERVER_REPLY", (const char*)4, "i:8;",
  "CURLE_FTP_WEIRD_USER_REPLY", (const char*)5, "i:12;",
  "CURLE_FTP_WRITE_ERROR", (const char*)5, "i:20;",
  "CURLE_FUNCTION_NOT_FOUND", (const char*)5, "i:41;",
  "CURLE_GOT_NOTHING", (const char*)5, "i:52;",
  "CURLE_HTTP_NOT_FOUND", (const char*)5, "i:22;",
  "CURLE_HTTP_PORT_FAILED", (const char*)5, "i:45;",
  "CURLE_HTTP_POST_ERROR", (const char*)5, "i:34;",
  "CURLE_HTTP_RANGE_ERROR", (const char*)5, "i:33;",
  "CURLE_LDAP_CANNOT_BIND", (const char*)5, "i:38;",
  "CURLE_LDAP_INVALID_URL", (const char*)5, "i:62;",
  "CURLE_LDAP_SEARCH_FAILED", (const char*)5, "i:39;",
  "CURLE_LIBRARY_NOT_FOUND", (const char*)5, "i:40;",
  "CURLE_MALFORMAT_USER", (const char*)5, "i:24;",
  "CURLE_OBSOLETE", (const char*)5, "i:50;",
  "CURLE_OK", (const char*)4, "i:0;",
  "CURLE_OPERATION_TIMEOUTED", (const char*)5, "i:28;",
  "CURLE_OUT_OF_MEMORY", (const char*)5, "i:27;",
  "CURLE_PARTIAL_FILE", (const char*)5, "i:18;",
  "CURLE_READ_ERROR", (const char*)5, "i:26;",
  "CURLE_RECV_ERROR", (const char*)5, "i:56;",
  "CURLE_SEND_ERROR", (const char*)5, "i:55;",
  "CURLE_SHARE_IN_USE", (const char*)5, "i:57;",
  "CURLE_SSL_CACERT", (const char*)5, "i:60;",
  "CURLE_SSL_CERTPROBLEM", (const char*)5, "i:58;",
  "CURLE_SSL_CIPHER", (const char*)5, "i:59;",
  "CURLE_SSL_CONNECT_ERROR", (const char*)5, "i:35;",
  "CURLE_SSL_ENGINE_NOTFOUND", (const char*)5, "i:53;",
  "CURLE_SSL_ENGINE_SETFAILED", (const char*)5, "i:54;",
  "CURLE_SSL_PEER_CERTIFICATE", (const char*)5, "i:51;",
  "CURLE_TELNET_OPTION_SYNTAX", (const char*)5, "i:49;",
  "CURLE_TOO_MANY_REDIRECTS", (const char*)5, "i:47;",
  "CURLE_UNKNOWN_TELNET_OPTION", (const char*)5, "i:48;",
  "CURLE_UNSUPPORTED_PROTOCOL", (const char*)4, "i:1;",
  "CURLE_URL_MALFORMAT", (const char*)4, "i:3;",
  "CURLE_URL_MALFORMAT_USER", (const char*)4, "i:4;",
  "CURLE_WRITE_ERROR", (const char*)5, "i:23;",
  "CURLFTPAUTH_DEFAULT", (const char*)4, "i:0;",
  "CURLFTPAUTH_SSL", (const char*)4, "i:1;",
  "CURLFTPAUTH_TLS", (const char*)4, "i:2;",
  "CURLFTPSSL_ALL", (const char*)4, "i:3;",
  "CURLFTPSSL_CONTROL", (const char*)4, "i:2;",
  "CURLFTPSSL_NONE", (const char*)4, "i:0;",
  "CURLFTPSSL_TRY", (const char*)4, "i:1;",
  "CURLINFO_CONNECT_TIME", (const char*)10, "i:3145733;",
  "CURLINFO_CONTENT_LENGTH_DOWNLOAD", (const char*)10, "i:3145743;",
  "CURLINFO_CONTENT_LENGTH_UPLOAD", (const char*)10, "i:3145744;",
  "CURLINFO_CONTENT_TYPE", (const char*)10, "i:1048594;",
  "CURLINFO_EFFECTIVE_URL", (const char*)10, "i:1048577;",
  "CURLINFO_FILETIME", (const char*)10, "i:2097166;",
  "CURLINFO_HEADER_OUT", (const char*)4, "i:2;",
  "CURLINFO_HEADER_SIZE", (const char*)10, "i:2097163;",
  "CURLINFO_HTTP_CODE", (const char*)10, "i:2097154;",
  "CURLINFO_NAMELOOKUP_TIME", (const char*)10, "i:3145732;",
  "CURLINFO_PRETRANSFER_TIME", (const char*)10, "i:3145734;",
  "CURLINFO_PRIVATE", (const char*)10, "i:1048597;",
  "CURLINFO_REDIRECT_COUNT", (const char*)10, "i:2097172;",
  "CURLINFO_REDIRECT_TIME", (const char*)10, "i:3145747;",
  "CURLINFO_REQUEST_SIZE", (const char*)10, "i:2097164;",
  "CURLINFO_SIZE_DOWNLOAD", (const char*)10, "i:3145736;",
  "CURLINFO_SIZE_UPLOAD", (const char*)10, "i:3145735;",
  "CURLINFO_SPEED_DOWNLOAD", (const char*)10, "i:3145737;",
  "CURLINFO_SPEED_UPLOAD", (const char*)10, "i:3145738;",
  "CURLINFO_SSL_VERIFYRESULT", (const char*)10, "i:2097165;",
  "CURLINFO_STARTTRANSFER_TIME", (const char*)10, "i:3145745;",
  "CURLINFO_TOTAL_TIME", (const char*)10, "i:3145731;",
  "CURLMSG_DONE", (const char*)4, "i:1;",
  "CURLM_BAD_EASY_HANDLE", (const char*)4, "i:2;",
  "CURLM_BAD_HANDLE", (const char*)4, "i:1;",
  "CURLM_CALL_MULTI_PERFORM", (const char*)5, "i:-1;",
  "CURLM_INTERNAL_ERROR", (const char*)4, "i:4;",
  "CURLM_OK", (const char*)4, "i:0;",
  "CURLM_OUT_OF_MEMORY", (const char*)4, "i:3;",
  "CURLOPT_AUTOREFERER", (const char*)5, "i:58;",
  "CURLOPT_BINARYTRANSFER", (const char*)8, "i:19914;",
  "CURLOPT_BUFFERSIZE", (const char*)5, "i:98;",
  "CURLOPT_CAINFO", (const char*)8, "i:10065;",
  "CURLOPT_CAPATH", (const char*)8, "i:10097;",
  "CURLOPT_CLOSEPOLICY", (const char*)5, "i:72;",
  "CURLOPT_CONNECTTIMEOUT", (const char*)5, "i:78;",
  "CURLOPT_COOKIE", (const char*)8, "i:10022;",
  "CURLOPT_COOKIEFILE", (const char*)8, "i:10031;",
  "CURLOPT_COOKIEJAR", (const char*)8, "i:10082;",
  "CURLOPT_COOKIESESSION", (const char*)5, "i:96;",
  "CURLOPT_CRLF", (const char*)5, "i:27;",
  "CURLOPT_CUSTOMREQUEST", (const char*)8, "i:10036;",
  "CURLOPT_DNS_CACHE_TIMEOUT", (const char*)5, "i:92;",
  "CURLOPT_DNS_USE_GLOBAL_CACHE", (const char*)5, "i:91;",
  "CURLOPT_EGDSOCKET", (const char*)8, "i:10077;",
  "CURLOPT_ENCODING", (const char*)8, "i:10102;",
  "CURLOPT_FAILONERROR", (const char*)5, "i:45;",
  "CURLOPT_FILE", (const char*)8, "i:10001;",
  "CURLOPT_FILETIME", (const char*)5, "i:69;",
  "CURLOPT_FOLLOWLOCATION", (const char*)5, "i:52;",
  "CURLOPT_FORBID_REUSE", (const char*)5, "i:75;",
  "CURLOPT_FRESH_CONNECT", (const char*)5, "i:74;",
  "CURLOPT_FTPAPPEND", (const char*)5, "i:50;",
  "CURLOPT_FTPLISTONLY", (const char*)5, "i:48;",
  "CURLOPT_FTPPORT", (const char*)8, "i:10017;",
  "CURLOPT_FTPSSLAUTH", (const char*)6, "i:129;",
  "CURLOPT_FTP_CREATE_MISSING_DIRS", (const char*)6, "i:110;",
  "CURLOPT_FTP_SSL", (const char*)6, "i:119;",
  "CURLOPT_FTP_USE_EPRT", (const char*)6, "i:106;",
  "CURLOPT_FTP_USE_EPSV", (const char*)5, "i:85;",
  "CURLOPT_HEADER", (const char*)5, "i:42;",
  "CURLOPT_HEADERFUNCTION", (const char*)8, "i:20079;",
  "CURLOPT_HTTP200ALIASES", (const char*)8, "i:10104;",
  "CURLOPT_HTTPAUTH", (const char*)6, "i:107;",
  "CURLOPT_HTTPGET", (const char*)5, "i:80;",
  "CURLOPT_HTTPHEADER", (const char*)8, "i:10023;",
  "CURLOPT_HTTPPROXYTUNNEL", (const char*)5, "i:61;",
  "CURLOPT_HTTP_VERSION", (const char*)5, "i:84;",
  "CURLOPT_INFILE", (const char*)8, "i:10009;",
  "CURLOPT_INFILESIZE", (const char*)5, "i:14;",
  "CURLOPT_INTERFACE", (const char*)8, "i:10062;",
  "CURLOPT_IPRESOLVE", (const char*)6, "i:113;",
  "CURLOPT_KRB4LEVEL", (const char*)8, "i:10063;",
  "CURLOPT_LOW_SPEED_LIMIT", (const char*)5, "i:19;",
  "CURLOPT_LOW_SPEED_TIME", (const char*)5, "i:20;",
  "CURLOPT_MAXCONNECTS", (const char*)5, "i:71;",
  "CURLOPT_MAXREDIRS", (const char*)5, "i:68;",
  "CURLOPT_MUTE", (const char*)5, "i:-2;",
  "CURLOPT_NETRC", (const char*)5, "i:51;",
  "CURLOPT_NOBODY", (const char*)5, "i:44;",
  "CURLOPT_NOPROGRESS", (const char*)5, "i:43;",
  "CURLOPT_NOSIGNAL", (const char*)5, "i:99;",
  "CURLOPT_PASSWDFUNCTION", (const char*)5, "i:-3;",
  "CURLOPT_PORT", (const char*)4, "i:3;",
  "CURLOPT_POST", (const char*)5, "i:47;",
  "CURLOPT_POSTFIELDS", (const char*)8, "i:10015;",
  "CURLOPT_POSTQUOTE", (const char*)8, "i:10039;",
  "CURLOPT_PRIVATE", (const char*)8, "i:10103;",
  "CURLOPT_PROXY", (const char*)8, "i:10004;",
  "CURLOPT_PROXYAUTH", (const char*)6, "i:111;",
  "CURLOPT_PROXYPORT", (const char*)5, "i:59;",
  "CURLOPT_PROXYTYPE", (const char*)6, "i:101;",
  "CURLOPT_PROXYUSERPWD", (const char*)8, "i:10006;",
  "CURLOPT_PUT", (const char*)5, "i:54;",
  "CURLOPT_QUOTE", (const char*)8, "i:10028;",
  "CURLOPT_RANDOM_FILE", (const char*)8, "i:10076;",
  "CURLOPT_RANGE", (const char*)8, "i:10007;",
  "CURLOPT_READDATA", (const char*)8, "i:10009;",
  "CURLOPT_READFUNCTION", (const char*)8, "i:20012;",
  "CURLOPT_REFERER", (const char*)8, "i:10016;",
  "CURLOPT_RESUME_FROM", (const char*)5, "i:21;",
  "CURLOPT_RETURNTRANSFER", (const char*)8, "i:19913;",
  "CURLOPT_SSLCERT", (const char*)8, "i:10025;",
  "CURLOPT_SSLCERTPASSWD", (const char*)8, "i:10026;",
  "CURLOPT_SSLCERTTYPE", (const char*)8, "i:10086;",
  "CURLOPT_SSLENGINE", (const char*)8, "i:10089;",
  "CURLOPT_SSLENGINE_DEFAULT", (const char*)5, "i:90;",
  "CURLOPT_SSLKEY", (const char*)8, "i:10087;",
  "CURLOPT_SSLKEYPASSWD", (const char*)8, "i:10026;",
  "CURLOPT_SSLKEYTYPE", (const char*)8, "i:10088;",
  "CURLOPT_SSLVERSION", (const char*)5, "i:32;",
  "CURLOPT_SSL_CIPHER_LIST", (const char*)8, "i:10083;",
  "CURLOPT_SSL_VERIFYHOST", (const char*)5, "i:81;",
  "CURLOPT_SSL_VERIFYPEER", (const char*)5, "i:64;",
  "CURLOPT_STDERR", (const char*)8, "i:10037;",
  "CURLOPT_TCP_NODELAY", (const char*)6, "i:121;",
  "CURLOPT_TIMECONDITION", (const char*)5, "i:33;",
  "CURLOPT_TIMEOUT", (const char*)5, "i:13;",
  "CURLOPT_TIMEVALUE", (const char*)5, "i:34;",
  "CURLOPT_TRANSFERTEXT", (const char*)5, "i:53;",
  "CURLOPT_UNRESTRICTED_AUTH", (const char*)6, "i:105;",
  "CURLOPT_UPLOAD", (const char*)5, "i:46;",
  "CURLOPT_URL", (const char*)8, "i:10002;",
  "CURLOPT_USERAGENT", (const char*)8, "i:10018;",
  "CURLOPT_USERPWD", (const char*)8, "i:10005;",
  "CURLOPT_VERBOSE", (const char*)5, "i:41;",
  "CURLOPT_WRITEFUNCTION", (const char*)8, "i:20011;",
  "CURLOPT_WRITEHEADER", (const char*)8, "i:10029;",
  "CURLPROXY_HTTP", (const char*)4, "i:0;",
  "CURLPROXY_SOCKS5", (const char*)4, "i:5;",
  "CURLVERSION_NOW", (const char*)4, "i:2;",
  "CURL_HTTP_VERSION_1_0", (const char*)4, "i:1;",
  "CURL_HTTP_VERSION_1_1", (const char*)4, "i:2;",
  "CURL_HTTP_VERSION_NONE", (const char*)4, "i:0;",
  "CURL_IPRESOLVE_V4", (const char*)4, "i:1;",
  "CURL_IPRESOLVE_V6", (const char*)4, "i:2;",
  "CURL_IPRESOLVE_WHATEVER", (const char*)4, "i:0;",
  "CURL_NETRC_IGNORED", (const char*)4, "i:0;",
  "CURL_NETRC_OPTIONAL", (const char*)4, "i:1;",
  "CURL_NETRC_REQUIRED", (const char*)4, "i:2;",
  "CURL_TIMECOND_IFMODSINCE", (const char*)4, "i:1;",
  "CURL_TIMECOND_IFUNMODSINCE", (const char*)4, "i:2;",
  "CURL_TIMECOND_LASTMOD", (const char*)4, "i:3;",
  "CURL_VERSION_IPV6", (const char*)4, "i:1;",
  "CURL_VERSION_KERBEROS4", (const char*)4, "i:2;",
  "CURL_VERSION_LIBZ", (const char*)4, "i:8;",
  "CURL_VERSION_SSL", (const char*)4, "i:4;",
  "DATE_ATOM", (const char*)21, "s:13:\"Y-m-d\\TH:i:sP\";",
  "DATE_COOKIE", (const char*)24, "s:16:\"l, d-M-y H:i:s T\";",
  "DATE_ISO8601", (const char*)21, "s:13:\"Y-m-d\\TH:i:sO\";",
  "DATE_RFC1036", (const char*)24, "s:16:\"D, d M y H:i:s O\";",
  "DATE_RFC1123", (const char*)24, "s:16:\"D, d M Y H:i:s O\";",
  "DATE_RFC2822", (const char*)24, "s:16:\"D, d M Y H:i:s O\";",
  "DATE_RFC3339", (const char*)21, "s:13:\"Y-m-d\\TH:i:sP\";",
  "DATE_RFC822", (const char*)24, "s:16:\"D, d M y H:i:s O\";",
  "DATE_RFC850", (const char*)24, "s:16:\"l, d-M-y H:i:s T\";",
  "DATE_RSS", (const char*)24, "s:16:\"D, d M Y H:i:s O\";",
  "DATE_W3C", (const char*)21, "s:13:\"Y-m-d\\TH:i:sP\";",
  "DAY_1", (const char*)9, "i:131079;",
  "DAY_2", (const char*)9, "i:131080;",
  "DAY_3", (const char*)9, "i:131081;",
  "DAY_4", (const char*)9, "i:131082;",
  "DAY_5", (const char*)9, "i:131083;",
  "DAY_6", (const char*)9, "i:131084;",
  "DAY_7", (const char*)9, "i:131085;",
  "DEBUG_LOG_AGENT", (const char*)4, "i:8;",
  "DEBUG_LOG_ALL", (const char*)8, "i:65535;",
  "DEBUG_LOG_COOKIE", (const char*)6, "i:128;",
  "DEBUG_LOG_DEFAULT", (const char*)6, "i:127;",
  "DEBUG_LOG_IP", (const char*)5, "i:64;",
  "DEBUG_LOG_NONE", (const char*)4, "i:0;",
  "DEBUG_LOG_POST", (const char*)5, "i:16;",
  "DEBUG_LOG_REFERER", (const char*)4, "i:4;",
  "DEBUG_LOG_TRACE", (const char*)4, "i:1;",
  "DEBUG_LOG_URL", (const char*)4, "i:2;",
  "DEBUG_LOG_USER", (const char*)5, "i:32;",
  "DEFAULT_INCLUDE_PATH", (const char*)7, "s:0:\"\";",
  "DIRECTORY_SEPARATOR", (const char*)8, "s:1:\"/\";",
  "DNS_A", (const char*)4, "i:1;",
  "DNS_A6", (const char*)11, "i:16777216;",
  "DNS_AAAA", (const char*)12, "i:134217728;",
  "DNS_ALL", (const char*)12, "i:251713587;",
  "DNS_ANY", (const char*)12, "i:268435456;",
  "DNS_CNAME", (const char*)5, "i:16;",
  "DNS_HINFO", (const char*)7, "i:4096;",
  "DNS_MX", (const char*)8, "i:16384;",
  "DNS_NAPTR", (const char*)11, "i:67108864;",
  "DNS_NS", (const char*)4, "i:2;",
  "DNS_PTR", (const char*)7, "i:2048;",
  "DNS_SOA", (const char*)5, "i:32;",
  "DNS_SRV", (const char*)11, "i:33554432;",
  "DNS_TXT", (const char*)8, "i:32768;",
  "DOMSTRING_SIZE_ERR", (const char*)4, "i:2;",
  "DOM_HIERARCHY_REQUEST_ERR", (const char*)4, "i:3;",
  "DOM_INDEX_SIZE_ERR", (const char*)4, "i:1;",
  "DOM_INUSE_ATTRIBUTE_ERR", (const char*)5, "i:10;",
  "DOM_INVALID_ACCESS_ERR", (const char*)5, "i:15;",
  "DOM_INVALID_CHARACTER_ERR", (const char*)4, "i:5;",
  "DOM_INVALID_MODIFICATION_ERR", (const char*)5, "i:13;",
  "DOM_INVALID_STATE_ERR", (const char*)5, "i:11;",
  "DOM_NAMESPACE_ERR", (const char*)5, "i:14;",
  "DOM_NOT_FOUND_ERR", (const char*)4, "i:8;",
  "DOM_NOT_SUPPORTED_ERR", (const char*)4, "i:9;",
  "DOM_NO_DATA_ALLOWED_ERR", (const char*)4, "i:6;",
  "DOM_NO_MODIFICATION_ALLOWED_ERR", (const char*)4, "i:7;",
  "DOM_PHP_ERR", (const char*)4, "i:0;",
  "DOM_SYNTAX_ERR", (const char*)5, "i:12;",
  "DOM_VALIDATION_ERR", (const char*)5, "i:16;",
  "DOM_WRONG_DOCUMENT_ERR", (const char*)4, "i:4;",
  "D_FMT", (const char*)9, "i:131113;",
  "D_T_FMT", (const char*)9, "i:131112;",
  "ENC7BIT", (const char*)4, "i:0;",
  "ENC8BIT", (const char*)4, "i:1;",
  "ENCBASE64", (const char*)4, "i:3;",
  "ENCBINARY", (const char*)4, "i:2;",
  "ENCOTHER", (const char*)4, "i:5;",
  "ENCQUOTEDPRINTABLE", (const char*)4, "i:4;",
  "ENT_COMPAT", (const char*)4, "i:2;",
  "ENT_NOQUOTES", (const char*)4, "i:0;",
  "ENT_QUOTES", (const char*)4, "i:3;",
  "ENT_FB_UTF8", (const char*)4, "i:4;",
  "ENT_FB_UTF8_ONLY", (const char*)4, "i:8;",
  "ERA", (const char*)9, "i:131116;",
  "ERA_D_FMT", (const char*)9, "i:131118;",
  "ERA_D_T_FMT", (const char*)9, "i:131120;",
  "ERA_T_FMT", (const char*)9, "i:131121;",
  "EXIF_USE_MBSTRING", (const char*)4, "i:0;",
  "EXTR_IF_EXISTS", (const char*)4, "i:6;",
  "EXTR_OVERWRITE", (const char*)4, "i:0;",
  "EXTR_PREFIX_ALL", (const char*)4, "i:3;",
  "EXTR_PREFIX_IF_EXISTS", (const char*)4, "i:5;",
  "EXTR_PREFIX_INVALID", (const char*)4, "i:4;",
  "EXTR_PREFIX_SAME", (const char*)4, "i:2;",
  "EXTR_REFS", (const char*)6, "i:256;",
  "EXTR_SKIP", (const char*)4, "i:1;",
  "E_ALL", (const char*)8, "i:30719;",
  "E_COMPILE_ERROR", (const char*)5, "i:64;",
  "E_COMPILE_WARNING", (const char*)6, "i:128;",
  "E_CORE_ERROR", (const char*)5, "i:16;",
  "E_CORE_WARNING", (const char*)5, "i:32;",
  "E_DEPRECATED", (const char*)7, "i:8192;",
  "E_ERROR", (const char*)4, "i:1;",
  "E_NOTICE", (const char*)4, "i:8;",
  "E_PARSE", (const char*)4, "i:4;",
  "E_RECOVERABLE_ERROR", (const char*)7, "i:4096;",
  "E_STRICT", (const char*)7, "i:2048;",
  "E_USER_DEPRECATED", (const char*)8, "i:16384;",
  "E_USER_ERROR", (const char*)6, "i:256;",
  "E_USER_NOTICE", (const char*)7, "i:1024;",
  "E_USER_WARNING", (const char*)6, "i:512;",
  "E_WARNING", (const char*)4, "i:2;",
  "FALSE", (const char*)4, "b:0;",
  "FILE_APPEND", (const char*)4, "i:8;",
  "FILE_IGNORE_NEW_LINES", (const char*)4, "i:2;",
  "FILE_NO_DEFAULT_CONTEXT", (const char*)5, "i:16;",
  "FILE_SKIP_EMPTY_LINES", (const char*)4, "i:4;",
  "FILE_USE_INCLUDE_PATH", (const char*)4, "i:1;",
  "FNM_CASEFOLD", (const char*)5, "i:16;",
  "FNM_NOESCAPE", (const char*)4, "i:2;",
  "FNM_PATHNAME", (const char*)4, "i:1;",
  "FNM_PERIOD", (const char*)4, "i:4;",
  "FORCE_DEFLATE", (const char*)4, "i:2;",
  "FORCE_GZIP", (const char*)4, "i:1;",
  "FT_INTERNAL", (const char*)4, "i:8;",
  "FT_NOT", (const char*)4, "i:4;",
  "FT_PEEK", (const char*)4, "i:2;",
  "FT_PREFETCHTEXT", (const char*)5, "i:32;",
  "FT_UID", (const char*)4, "i:1;",
  "GD_BUNDLED", (const char*)4, "i:1;",
  "GD_EXTRA_VERSION", (const char*)7, "s:0:\"\";",
  "GD_MAJOR_VERSION", (const char*)4, "i:2;",
  "GD_MINOR_VERSION", (const char*)4, "i:0;",
  "GD_RELEASE_VERSION", (const char*)5, "i:35;",
  "GD_VERSION", (const char*)13, "s:6:\"2.0.35\";",
  "GLOBAL_STATE_IGNORE", (const char*)4, "i:0;",
  "GLOBAL_STATE_OVERWRITE", (const char*)4, "i:1;",
  "GLOBAL_STATE_SKIP", (const char*)4, "i:2;",
  "GLOBAL_SYMBOL_CLASS_STATIC", (const char*)4, "i:2;",
  "GLOBAL_SYMBOL_DYNAMIC_CONSTANT", (const char*)4, "i:3;",
  "GLOBAL_SYMBOL_FILE_INCLUDE", (const char*)4, "i:4;",
  "GLOBAL_SYMBOL_GLOBAL_VARIABLE", (const char*)4, "i:0;",
  "GLOBAL_SYMBOL_REDECLARED_CLASS", (const char*)4, "i:6;",
  "GLOBAL_SYMBOL_REDECLARED_FUNCTION", (const char*)4, "i:5;",
  "GLOBAL_SYMBOL_STATIC_VARIABLE", (const char*)4, "i:1;",
  "GLOB_AVAILABLE_FLAGS", (const char*)7, "i:9303;",
  "GLOB_BRACE", (const char*)7, "i:1024;",
  "GLOB_ERR", (const char*)4, "i:1;",
  "GLOB_MARK", (const char*)4, "i:2;",
  "GLOB_NOCHECK", (const char*)5, "i:16;",
  "GLOB_NOESCAPE", (const char*)5, "i:64;",
  "GLOB_NOSORT", (const char*)4, "i:4;",
  "GLOB_ONLYDIR", (const char*)7, "i:8192;",
  "GRAPHEME_EXTR_COUNT", (const char*)4, "i:0;",
  "GRAPHEME_EXTR_MAXBYTES", (const char*)4, "i:1;",
  "GRAPHEME_EXTR_MAXCHARS", (const char*)4, "i:2;",
  "HASH_HMAC", (const char*)4, "i:1;",
  "HPHP_TRIM_CHARLIST", (const char*)13, "s:6:\"\n\r\t\v\000 \";",
  "HPHP_VERSION", (const char*)16, "s:9:\"2.1.0-dev\";",
  "HTML_ENTITIES", (const char*)4, "i:1;",
  "HTML_SPECIALCHARS", (const char*)4, "i:0;",
  "ICONV_IMPL", (const char*)12, "s:5:\"glibc\";",
  "ICONV_MIME_DECODE_CONTINUE_ON_ERROR", (const char*)4, "i:2;",
  "ICONV_MIME_DECODE_STRICT", (const char*)4, "i:1;",
  "ICONV_VERSION", (const char*)10, "s:3:\"2.5\";",
  "IDNA_ALLOW_UNASSIGNED", (const char*)4, "i:1;",
  "IDNA_CHECK_BIDI", (const char*)4, "i:4;",
  "IDNA_CHECK_CONTEXTJ", (const char*)4, "i:8;",
  "IDNA_CHECK_CONTEXTO", (const char*)5, "i:64;",
  "IDNA_CONTAINS_ACE_PREFIX", (const char*)4, "i:8;",
  "IDNA_CONTAINS_MINUS", (const char*)4, "i:4;",
  "IDNA_CONTAINS_NON_LDH", (const char*)4, "i:3;",
  "IDNA_DEFAULT", (const char*)4, "i:0;",
  "IDNA_ERROR_CONTEXTJ", (const char*)7, "i:4096;",
  "IDNA_ERROR_CONTEXTO_DIGITS", (const char*)7, "i:8192;",
  "IDNA_ERROR_CONTEXTO_PUNCTUATION", (const char*)8, "i:16384;",
  "IDNA_ERROR_BIDI", (const char*)7, "i:2048;",
  "IDNA_ERROR_DISALLOWED", (const char*)6, "i:128;",
  "IDNA_ERROR_DOMAIN_NAME_TOO_LONG", (const char*)4, "i:4;",
  "IDNA_ERROR_EMPTY_LABEL", (const char*)4, "i:1;",
  "IDNA_ERROR_HYPHEN_3_4", (const char*)5, "i:32;",
  "IDNA_ERROR_INVALID_ACE_LABEL", (const char*)7, "i:1024;",
  "IDNA_ERROR_LABEL_HAS_DOT", (const char*)6, "i:512;",
  "IDNA_ERROR_LABEL_TOO_LONG", (const char*)4, "i:2;",
  "IDNA_ERROR_LEADING_COMBINING_MARK", (const char*)5, "i:64;",
  "IDNA_ERROR_LEADING_HYPHEN", (const char*)4, "i:8;",
  "IDNA_ERROR_PUNYCODE", (const char*)6, "i:256;",
  "IDNA_ERROR_TRAILING_HYPHEN", (const char*)5, "i:16;",
  "IDNA_ICONV_ERROR", (const char*)4, "i:9;",
  "IDNA_INVALID_LENGTH", (const char*)4, "i:5;",
  "IDNA_MALLOC_ERROR", (const char*)6, "i:201;",
  "IDNA_NO_ACE_PREFIX", (const char*)4, "i:6;",
  "IDNA_NONTRANSITIONAL_TO_ASCII", (const char*)5, "i:16;",
  "IDNA_NONTRANSITIONAL_TO_UNICODE", (const char*)5, "i:32;",
  "IDNA_PUNYCODE_ERROR", (const char*)4, "i:2;",
  "IDNA_ROUNDTRIP_VERIFY_ERROR", (const char*)4, "i:7;",
  "IDNA_STRINGPREP_ERROR", (const char*)4, "i:1;",
  "IDNA_USE_STD3_RULES", (const char*)4, "i:2;",
  "IMAGETYPE_BMP", (const char*)4, "i:6;",
  "IMAGETYPE_GIF", (const char*)4, "i:1;",
  "IMAGETYPE_IFF", (const char*)5, "i:14;",
  "IMAGETYPE_JB2", (const char*)5, "i:12;",
  "IMAGETYPE_JP2", (const char*)5, "i:10;",
  "IMAGETYPE_JPC", (const char*)4, "i:9;",
  "IMAGETYPE_JPEG", (const char*)4, "i:2;",
  "IMAGETYPE_JPEG2000", (const char*)4, "i:9;",
  "IMAGETYPE_JPX", (const char*)5, "i:11;",
  "IMAGETYPE_PNG", (const char*)4, "i:3;",
  "IMAGETYPE_PSD", (const char*)4, "i:5;",
  "IMAGETYPE_SWC", (const char*)5, "i:13;",
  "IMAGETYPE_SWF", (const char*)4, "i:4;",
  "IMAGETYPE_TIFF_II", (const char*)4, "i:7;",
  "IMAGETYPE_TIFF_MM", (const char*)4, "i:8;",
  "IMAGETYPE_WBMP", (const char*)5, "i:15;",
  "IMAGETYPE_XBM", (const char*)5, "i:16;",
  "IMAGETYPE_ICO", (const char*)5, "i:17;",
  "IMAP_CLOSETIMEOUT", (const char*)4, "i:4;",
  "IMAP_OPENTIMEOUT", (const char*)4, "i:1;",
  "IMAP_READTIMEOUT", (const char*)4, "i:2;",
  "IMAP_WRITETIMEOUT", (const char*)4, "i:3;",
  "IMG_ARC_CHORD", (const char*)4, "i:1;",
  "IMG_ARC_EDGED", (const char*)4, "i:4;",
  "IMG_ARC_NOFILL", (const char*)4, "i:2;",
  "IMG_ARC_PIE", (const char*)4, "i:0;",
  "IMG_ARC_ROUNDED", (const char*)4, "i:0;",
  "IMG_COLOR_BRUSHED", (const char*)5, "i:-3;",
  "IMG_COLOR_STYLED", (const char*)5, "i:-2;",
  "IMG_COLOR_STYLEDBRUSHED", (const char*)5, "i:-4;",
  "IMG_COLOR_TILED", (const char*)5, "i:-5;",
  "IMG_COLOR_TRANSPARENT", (const char*)5, "i:-6;",
  "IMG_EFFECT_ALPHABLEND", (const char*)4, "i:1;",
  "IMG_EFFECT_NORMAL", (const char*)4, "i:2;",
  "IMG_EFFECT_OVERLAY", (const char*)4, "i:3;",
  "IMG_EFFECT_REPLACE", (const char*)4, "i:0;",
  "IMG_FILTER_BRIGHTNESS", (const char*)4, "i:2;",
  "IMG_FILTER_COLORIZE", (const char*)4, "i:4;",
  "IMG_FILTER_CONTRAST", (const char*)4, "i:3;",
  "IMG_FILTER_EDGEDETECT", (const char*)4, "i:5;",
  "IMG_FILTER_EMBOSS", (const char*)4, "i:6;",
  "IMG_FILTER_GAUSSIAN_BLUR", (const char*)4, "i:7;",
  "IMG_FILTER_GRAYSCALE", (const char*)4, "i:1;",
  "IMG_FILTER_MEAN_REMOVAL", (const char*)4, "i:9;",
  "IMG_FILTER_NEGATE", (const char*)4, "i:0;",
  "IMG_FILTER_SELECTIVE_BLUR", (const char*)4, "i:8;",
  "IMG_FILTER_SMOOTH", (const char*)5, "i:10;",
  "IMG_GD2_COMPRESSED", (const char*)4, "i:2;",
  "IMG_GD2_RAW", (const char*)4, "i:1;",
  "IMG_GIF", (const char*)4, "i:1;",
  "IMG_JPEG", (const char*)4, "i:2;",
  "IMG_JPG", (const char*)4, "i:2;",
  "IMG_PNG", (const char*)4, "i:4;",
  "IMG_WBMP", (const char*)4, "i:8;",
  "IMG_XPM", (const char*)5, "i:16;",
  "INFO_ALL", (const char*)13, "i:4294967295;",
  "INFO_CONFIGURATION", (const char*)4, "i:4;",
  "INFO_CREDITS", (const char*)4, "i:2;",
  "INFO_ENVIRONMENT", (const char*)5, "i:16;",
  "INFO_GENERAL", (const char*)4, "i:1;",
  "INFO_LICENSE", (const char*)5, "i:64;",
  "INFO_MODULES", (const char*)4, "i:8;",
  "INFO_VARIABLES", (const char*)5, "i:32;",
  "INI_ALL", (const char*)4, "i:7;",
  "INI_PERDIR", (const char*)4, "i:2;",
  "INI_SCANNER_NORMAL", (const char*)4, "i:0;",
  "INI_SCANNER_RAW", (const char*)4, "i:1;",
  "INI_SYSTEM", (const char*)4, "i:4;",
  "INI_USER", (const char*)4, "i:1;",
  "INTL_IDNA_VARIANT_2003", (const char*)4, "i:0;",
  "INTL_IDNA_VARIANT_UTS46", (const char*)4, "i:1;",
  "INTL_MAX_LOCALE_LEN", (const char*)5, "i:80;",
  "LATT_HASCHILDREN", (const char*)5, "i:32;",
  "LATT_HASNOCHILDREN", (const char*)5, "i:64;",
  "LATT_MARKED", (const char*)4, "i:4;",
  "LATT_NOINFERIORS", (const char*)4, "i:1;",
  "LATT_NOSELECT", (const char*)4, "i:2;",
  "LATT_REFERRAL", (const char*)5, "i:16;",
  "LATT_UNMARKED", (const char*)4, "i:8;",
  "LC_ALL", (const char*)4, "i:6;",
  "LC_COLLATE", (const char*)4, "i:3;",
  "LC_CTYPE", (const char*)4, "i:0;",
  "LC_MESSAGES", (const char*)4, "i:5;",
  "LC_MONETARY", (const char*)4, "i:4;",
  "LC_NUMERIC", (const char*)4, "i:1;",
  "LC_TIME", (const char*)4, "i:2;",
  "LDAP_DEREF_ALWAYS", (const char*)4, "i:3;",
  "LDAP_DEREF_FINDING", (const char*)4, "i:2;",
  "LDAP_DEREF_NEVER", (const char*)4, "i:0;",
  "LDAP_DEREF_SEARCHING", (const char*)4, "i:1;",
  "LDAP_OPT_CLIENT_CONTROLS", (const char*)5, "i:19;",
  "LDAP_OPT_DEBUG_LEVEL", (const char*)8, "i:20481;",
  "LDAP_OPT_DEREF", (const char*)4, "i:2;",
  "LDAP_OPT_ERROR_NUMBER", (const char*)5, "i:49;",
  "LDAP_OPT_ERROR_STRING", (const char*)5, "i:50;",
  "LDAP_OPT_HOST_NAME", (const char*)5, "i:48;",
  "LDAP_OPT_MATCHED_DN", (const char*)5, "i:51;",
  "LDAP_OPT_PROTOCOL_VERSION", (const char*)5, "i:17;",
  "LDAP_OPT_REFERRALS", (const char*)4, "i:8;",
  "LDAP_OPT_RESTART", (const char*)4, "i:9;",
  "LDAP_OPT_SERVER_CONTROLS", (const char*)5, "i:18;",
  "LDAP_OPT_SIZELIMIT", (const char*)4, "i:3;",
  "LDAP_OPT_TIMELIMIT", (const char*)4, "i:4;",
  "LIBXML_COMPACT", (const char*)8, "i:65536;",
  "LIBXML_DOTTED_VERSION", (const char*)13, "s:6:\"2.6.26\";",
  "LIBXML_DTDATTR", (const char*)4, "i:8;",
  "LIBXML_DTDLOAD", (const char*)4, "i:4;",
  "LIBXML_DTDVALID", (const char*)5, "i:16;",
  "LIBXML_ERR_ERROR", (const char*)4, "i:2;",
  "LIBXML_ERR_FATAL", (const char*)4, "i:3;",
  "LIBXML_ERR_NONE", (const char*)4, "i:0;",
  "LIBXML_ERR_WARNING", (const char*)4, "i:1;",
  "LIBXML_NOBLANKS", (const char*)6, "i:256;",
  "LIBXML_NOCDATA", (const char*)8, "i:16384;",
  "LIBXML_NOEMPTYTAG", (const char*)4, "i:4;",
  "LIBXML_NOENT", (const char*)4, "i:2;",
  "LIBXML_NOERROR", (const char*)5, "i:32;",
  "LIBXML_NONET", (const char*)7, "i:2048;",
  "LIBXML_NOWARNING", (const char*)5, "i:64;",
  "LIBXML_NOXMLDECL", (const char*)4, "i:2;",
  "LIBXML_NSCLEAN", (const char*)7, "i:8192;",
  "LIBXML_VERSION", (const char*)8, "i:20626;",
  "LIBXML_XINCLUDE", (const char*)7, "i:1024;",
  "LOCK_EX", (const char*)4, "i:2;",
  "LOCK_NB", (const char*)4, "i:4;",
  "LOCK_SH", (const char*)4, "i:1;",
  "LOCK_UN", (const char*)4, "i:3;",
  "LOG_ALERT", (const char*)4, "i:1;",
  "LOG_AUTH", (const char*)5, "i:32;",
  "LOG_AUTHPRIV", (const char*)5, "i:80;",
  "LOG_CONS", (const char*)4, "i:2;",
  "LOG_CRIT", (const char*)4, "i:2;",
  "LOG_CRON", (const char*)5, "i:72;",
  "LOG_DAEMON", (const char*)5, "i:24;",
  "LOG_DEBUG", (const char*)4, "i:7;",
  "LOG_EMERG", (const char*)4, "i:0;",
  "LOG_ERR", (const char*)4, "i:3;",
  "LOG_INFO", (const char*)4, "i:6;",
  "LOG_KERN", (const char*)4, "i:0;",
  "LOG_LOCAL0", (const char*)6, "i:128;",
  "LOG_LOCAL1", (const char*)6, "i:136;",
  "LOG_LOCAL2", (const char*)6, "i:144;",
  "LOG_LOCAL3", (const char*)6, "i:152;",
  "LOG_LOCAL4", (const char*)6, "i:160;",
  "LOG_LOCAL5", (const char*)6, "i:168;",
  "LOG_LOCAL6", (const char*)6, "i:176;",
  "LOG_LOCAL7", (const char*)6, "i:184;",
  "LOG_LPR", (const char*)5, "i:48;",
  "LOG_MAIL", (const char*)5, "i:16;",
  "LOG_NDELAY", (const char*)4, "i:8;",
  "LOG_NEWS", (const char*)5, "i:56;",
  "LOG_NOTICE", (const char*)4, "i:5;",
  "LOG_NOWAIT", (const char*)5, "i:16;",
  "LOG_ODELAY", (const char*)4, "i:4;",
  "LOG_PERROR", (const char*)5, "i:32;",
  "LOG_PID", (const char*)4, "i:1;",
  "LOG_SYSLOG", (const char*)5, "i:40;",
  "LOG_USER", (const char*)4, "i:8;",
  "LOG_UUCP", (const char*)5, "i:64;",
  "LOG_WARNING", (const char*)4, "i:4;",
  "MB_CASE_LOWER", (const char*)4, "i:1;",
  "MB_CASE_TITLE", (const char*)4, "i:2;",
  "MB_CASE_UPPER", (const char*)4, "i:0;",
  "MB_OVERLOAD_MAIL", (const char*)4, "i:1;",
  "MB_OVERLOAD_REGEX", (const char*)4, "i:4;",
  "MB_OVERLOAD_STRING", (const char*)4, "i:2;",
  "MCC_ACCESSPOINT_DOWN", (const char*)4, "i:2;",
  "MCC_ACCESSPOINT_UP", (const char*)4, "i:1;",
  "MCRYPT_3DES", (const char*)16, "s:9:\"tripledes\";",
  "MCRYPT_ARCFOUR", (const char*)14, "s:7:\"arcfour\";",
  "MCRYPT_ARCFOUR_IV", (const char*)18, "s:10:\"arcfour-iv\";",
  "MCRYPT_BLOWFISH", (const char*)15, "s:8:\"blowfish\";",
  "MCRYPT_BLOWFISH_COMPAT", (const char*)23, "s:15:\"blowfish-compat\";",
  "MCRYPT_CAST_128", (const char*)15, "s:8:\"cast-128\";",
  "MCRYPT_CAST_256", (const char*)15, "s:8:\"cast-256\";",
  "MCRYPT_CRYPT", (const char*)12, "s:5:\"crypt\";",
  "MCRYPT_DECRYPT", (const char*)4, "i:1;",
  "MCRYPT_DES", (const char*)10, "s:3:\"des\";",
  "MCRYPT_DEV_RANDOM", (const char*)4, "i:0;",
  "MCRYPT_DEV_URANDOM", (const char*)4, "i:1;",
  "MCRYPT_ENCRYPT", (const char*)4, "i:0;",
  "MCRYPT_ENIGNA", (const char*)12, "s:5:\"crypt\";",
  "MCRYPT_GOST", (const char*)11, "s:4:\"gost\";",
  "MCRYPT_IDEA", (const char*)11, "s:4:\"idea\";",
  "MCRYPT_LOKI97", (const char*)13, "s:6:\"loki97\";",
  "MCRYPT_MARS", (const char*)11, "s:4:\"mars\";",
  "MCRYPT_MODE_CBC", (const char*)10, "s:3:\"cbc\";",
  "MCRYPT_MODE_CFB", (const char*)10, "s:3:\"cfb\";",
  "MCRYPT_MODE_ECB", (const char*)10, "s:3:\"ecb\";",
  "MCRYPT_MODE_NOFB", (const char*)11, "s:4:\"nofb\";",
  "MCRYPT_MODE_OFB", (const char*)10, "s:3:\"ofb\";",
  "MCRYPT_MODE_STREAM", (const char*)13, "s:6:\"stream\";",
  "MCRYPT_PANAMA", (const char*)13, "s:6:\"panama\";",
  "MCRYPT_RAND", (const char*)4, "i:2;",
  "MCRYPT_RC2", (const char*)10, "s:3:\"rc2\";",
  "MCRYPT_RC6", (const char*)10, "s:3:\"rc6\";",
  "MCRYPT_RIJNDAEL_128", (const char*)20, "s:12:\"rijndael-128\";",
  "MCRYPT_RIJNDAEL_192", (const char*)20, "s:12:\"rijndael-192\";",
  "MCRYPT_RIJNDAEL_256", (const char*)20, "s:12:\"rijndael-256\";",
  "MCRYPT_SAFER128", (const char*)19, "s:11:\"safer-sk128\";",
  "MCRYPT_SAFER64", (const char*)18, "s:10:\"safer-sk64\";",
  "MCRYPT_SAFERPLUS", (const char*)16, "s:9:\"saferplus\";",
  "MCRYPT_SERPENT", (const char*)14, "s:7:\"serpent\";",
  "MCRYPT_SKIPJACK", (const char*)15, "s:8:\"skipjack\";",
  "MCRYPT_THREEWAY", (const char*)15, "s:8:\"threeway\";",
  "MCRYPT_TRIPLEDES", (const char*)16, "s:9:\"tripledes\";",
  "MCRYPT_TWOFISH", (const char*)14, "s:7:\"twofish\";",
  "MCRYPT_WAKE", (const char*)11, "s:4:\"wake\";",
  "MCRYPT_XTEA", (const char*)11, "s:4:\"xtea\";",
  "MON_1", (const char*)9, "i:131098;",
  "MON_10", (const char*)9, "i:131107;",
  "MON_11", (const char*)9, "i:131108;",
  "MON_12", (const char*)9, "i:131109;",
  "MON_2", (const char*)9, "i:131099;",
  "MON_3", (const char*)9, "i:131100;",
  "MON_4", (const char*)9, "i:131101;",
  "MON_5", (const char*)9, "i:131102;",
  "MON_6", (const char*)9, "i:131103;",
  "MON_7", (const char*)9, "i:131104;",
  "MON_8", (const char*)9, "i:131105;",
  "MON_9", (const char*)9, "i:131106;",
  "MSG_DONTROUTE", (const char*)4, "i:4;",
  "MSG_EAGAIN", (const char*)5, "i:11;",
  "MSG_ENOMSG", (const char*)5, "i:42;",
  "MSG_EOF", (const char*)6, "i:512;",
  "MSG_EOR", (const char*)6, "i:128;",
  "MSG_EXCEPT", (const char*)4, "i:4;",
  "MSG_IPC_NOWAIT", (const char*)4, "i:1;",
  "MSG_NOERROR", (const char*)4, "i:2;",
  "MSG_OOB", (const char*)4, "i:1;",
  "MSG_PEEK", (const char*)4, "i:2;",
  "MSG_WAITALL", (const char*)6, "i:256;",
  "MW_AbsoluteIntent", (const char*)4, "i:3;",
  "MW_AddCompositeOp", (const char*)4, "i:2;",
  "MW_AddEvaluateOperator", (const char*)4, "i:1;",
  "MW_AddNoisePreview", (const char*)5, "i:14;",
  "MW_AllChannels", (const char*)6, "i:255;",
  "MW_AlphaChannel", (const char*)4, "i:8;",
  "MW_AndEvaluateOperator", (const char*)4, "i:2;",
  "MW_AnyStretch", (const char*)5, "i:10;",
  "MW_AnyStyle", (const char*)4, "i:4;",
  "MW_AreaResource", (const char*)4, "i:1;",
  "MW_AtopCompositeOp", (const char*)4, "i:3;",
  "MW_BZipCompression", (const char*)4, "i:2;",
  "MW_BackgroundDispose", (const char*)4, "i:2;",
  "MW_BesselFilter", (const char*)5, "i:14;",
  "MW_BevelJoin", (const char*)4, "i:3;",
  "MW_BilevelType", (const char*)4, "i:1;",
  "MW_BlackChannel", (const char*)5, "i:32;",
  "MW_BlackmanFilter", (const char*)4, "i:7;",
  "MW_BlendCompositeOp", (const char*)4, "i:4;",
  "MW_BlobError", (const char*)6, "i:435;",
  "MW_BlobFatalError", (const char*)6, "i:735;",
  "MW_BlobWarning", (const char*)6, "i:335;",
  "MW_BlueChannel", (const char*)4, "i:4;",
  "MW_BlurPreview", (const char*)5, "i:16;",
  "MW_BoxFilter", (const char*)4, "i:2;",
  "MW_BrightnessPreview", (const char*)4, "i:6;",
  "MW_BumpmapCompositeOp", (const char*)4, "i:5;",
  "MW_ButtCap", (const char*)4, "i:1;",
  "MW_CMYKColorspace", (const char*)5, "i:12;",
  "MW_CacheError", (const char*)6, "i:445;",
  "MW_CacheFatalError", (const char*)6, "i:745;",
  "MW_CacheWarning", (const char*)6, "i:345;",
  "MW_CatromFilter", (const char*)5, "i:11;",
  "MW_CenterAlign", (const char*)4, "i:2;",
  "MW_CenterGravity", (const char*)4, "i:5;",
  "MW_CharPixel", (const char*)4, "i:1;",
  "MW_CharcoalDrawingPreview", (const char*)5, "i:28;",
  "MW_ClearCompositeOp", (const char*)4, "i:7;",
  "MW_CoderError", (const char*)6, "i:450;",
  "MW_CoderFatalError", (const char*)6, "i:750;",
  "MW_CoderWarning", (const char*)6, "i:350;",
  "MW_ColorBurnCompositeOp", (const char*)4, "i:8;",
  "MW_ColorDodgeCompositeOp", (const char*)4, "i:9;",
  "MW_ColorSeparationMatteType", (const char*)4, "i:9;",
  "MW_ColorSeparationType", (const char*)4, "i:8;",
  "MW_ColorizeCompositeOp", (const char*)5, "i:10;",
  "MW_ConcatenateMode", (const char*)4, "i:3;",
  "MW_CondensedStretch", (const char*)4, "i:4;",
  "MW_ConfigureError", (const char*)6, "i:495;",
  "MW_ConfigureFatalError", (const char*)6, "i:795;",
  "MW_ConfigureWarning", (const char*)6, "i:395;",
  "MW_ConstantVirtualPixelMethod", (const char*)4, "i:2;",
  "MW_CopyBlackCompositeOp", (const char*)5, "i:11;",
  "MW_CopyBlueCompositeOp", (const char*)5, "i:12;",
  "MW_CopyCompositeOp", (const char*)5, "i:13;",
  "MW_CopyCyanCompositeOp", (const char*)5, "i:14;",
  "MW_CopyGreenCompositeOp", (const char*)5, "i:15;",
  "MW_CopyMagentaCompositeOp", (const char*)5, "i:16;",
  "MW_CopyOpacityCompositeOp", (const char*)5, "i:17;",
  "MW_CopyRedCompositeOp", (const char*)5, "i:18;",
  "MW_CopyYellowCompositeOp", (const char*)5, "i:19;",
  "MW_CorruptImageError", (const char*)6, "i:425;",
  "MW_CorruptImageFatalError", (const char*)6, "i:725;",
  "MW_CorruptImageWarning", (const char*)6, "i:325;",
  "MW_CubicFilter", (const char*)5, "i:10;",
  "MW_CyanChannel", (const char*)4, "i:1;",
  "MW_DarkenCompositeOp", (const char*)5, "i:20;",
  "MW_DelegateError", (const char*)6, "i:415;",
  "MW_DelegateFatalError", (const char*)6, "i:715;",
  "MW_DelegateWarning", (const char*)6, "i:315;",
  "MW_DespecklePreview", (const char*)5, "i:12;",
  "MW_DifferenceCompositeOp", (const char*)5, "i:26;",
  "MW_DiskResource", (const char*)4, "i:2;",
  "MW_DisplaceCompositeOp", (const char*)5, "i:27;",
  "MW_DissolveCompositeOp", (const char*)5, "i:28;",
  "MW_DivideEvaluateOperator", (const char*)4, "i:3;",
  "MW_DoublePixel", (const char*)4, "i:2;",
  "MW_DrawError", (const char*)6, "i:460;",
  "MW_DrawFatalError", (const char*)6, "i:760;",
  "MW_DrawWarning", (const char*)6, "i:360;",
  "MW_DstAtopCompositeOp", (const char*)5, "i:21;",
  "MW_DstCompositeOp", (const char*)5, "i:22;",
  "MW_DstInCompositeOp", (const char*)5, "i:23;",
  "MW_DstOutCompositeOp", (const char*)5, "i:24;",
  "MW_DstOverCompositeOp", (const char*)5, "i:25;",
  "MW_DullPreview", (const char*)4, "i:9;",
  "MW_EastGravity", (const char*)4, "i:6;",
  "MW_EdgeDetectPreview", (const char*)5, "i:18;",
  "MW_EdgeVirtualPixelMethod", (const char*)4, "i:4;",
  "MW_ErrorException", (const char*)6, "i:400;",
  "MW_EvenOddRule", (const char*)4, "i:1;",
  "MW_ExclusionCompositeOp", (const char*)5, "i:29;",
  "MW_ExpandedStretch", (const char*)4, "i:7;",
  "MW_ExtraCondensedStretch", (const char*)4, "i:3;",
  "MW_ExtraExpandedStretch", (const char*)4, "i:8;",
  "MW_FatalErrorException", (const char*)6, "i:700;",
  "MW_FaxCompression", (const char*)4, "i:3;",
  "MW_FileOpenError", (const char*)6, "i:430;",
  "MW_FileOpenFatalError", (const char*)6, "i:730;",
  "MW_FileOpenWarning", (const char*)6, "i:330;",
  "MW_FileResource", (const char*)4, "i:3;",
  "MW_FillToBorderMethod", (const char*)4, "i:4;",
  "MW_FloatPixel", (const char*)4, "i:3;",
  "MW_FloodfillMethod", (const char*)4, "i:3;",
  "MW_ForgetGravity", (const char*)4, "i:0;",
  "MW_FrameMode", (const char*)4, "i:1;",
  "MW_GRAYColorspace", (const char*)4, "i:2;",
  "MW_GammaPreview", (const char*)4, "i:7;",
  "MW_GaussianFilter", (const char*)4, "i:8;",
  "MW_GaussianNoise", (const char*)4, "i:2;",
  "MW_GrayscaleMatteType", (const char*)4, "i:3;",
  "MW_GrayscalePreview", (const char*)5, "i:10;",
  "MW_GrayscaleType", (const char*)4, "i:2;",
  "MW_GreenChannel", (const char*)4, "i:2;",
  "MW_Group4Compression", (const char*)4, "i:4;",
  "MW_HSBColorspace", (const char*)5, "i:14;",
  "MW_HSLColorspace", (const char*)5, "i:15;",
  "MW_HWBColorspace", (const char*)5, "i:16;",
  "MW_HammingFilter", (const char*)4, "i:6;",
  "MW_HanningFilter", (const char*)4, "i:5;",
  "MW_HardLightCompositeOp", (const char*)5, "i:30;",
  "MW_HermiteFilter", (const char*)4, "i:4;",
  "MW_HueCompositeOp", (const char*)5, "i:31;",
  "MW_HuePreview", (const char*)4, "i:4;",
  "MW_ImageError", (const char*)6, "i:465;",
  "MW_ImageFatalError", (const char*)6, "i:765;",
  "MW_ImageWarning", (const char*)6, "i:365;",
  "MW_ImplodePreview", (const char*)5, "i:25;",
  "MW_ImpulseNoise", (const char*)4, "i:4;",
  "MW_InCompositeOp", (const char*)5, "i:32;",
  "MW_IndexChannel", (const char*)5, "i:32;",
  "MW_IntegerPixel", (const char*)4, "i:4;",
  "MW_ItalicStyle", (const char*)4, "i:2;",
  "MW_JPEGCompression", (const char*)4, "i:5;",
  "MW_JPEGPreview", (const char*)5, "i:29;",
  "MW_LABColorspace", (const char*)4, "i:5;",
  "MW_LZWCompression", (const char*)4, "i:8;",
  "MW_LanczosFilter", (const char*)5, "i:13;",
  "MW_LaplacianNoise", (const char*)4, "i:5;",
  "MW_LeftAlign", (const char*)4, "i:1;",
  "MW_LeftShiftEvaluateOperator", (const char*)4, "i:4;",
  "MW_LightenCompositeOp", (const char*)5, "i:33;",
  "MW_LineInterlace", (const char*)4, "i:2;",
  "MW_LineThroughDecoration", (const char*)4, "i:4;",
  "MW_LongPixel", (const char*)4, "i:5;",
  "MW_LosslessJPEGCompression", (const char*)4, "i:7;",
  "MW_LuminizeCompositeOp", (const char*)5, "i:35;",
  "MW_MagentaChannel", (const char*)4, "i:2;",
  "MW_MapResource", (const char*)4, "i:4;",
  "MW_MaxEvaluateOperator", (const char*)4, "i:5;",
  "MW_MaxRGB", (const char*)8, "i:65535;",
  "MW_MeanAbsoluteErrorMetric", (const char*)4, "i:2;",
  "MW_MeanSquaredErrorMetric", (const char*)4, "i:4;",
  "MW_MemoryResource", (const char*)4, "i:5;",
  "MW_MinEvaluateOperator", (const char*)4, "i:6;",
  "MW_MinusCompositeOp", (const char*)5, "i:36;",
  "MW_MirrorVirtualPixelMethod", (const char*)4, "i:5;",
  "MW_MissingDelegateError", (const char*)6, "i:420;",
  "MW_MissingDelegateFatalError", (const char*)6, "i:720;",
  "MW_MissingDelegateWarning", (const char*)6, "i:320;",
  "MW_MitchellFilter", (const char*)5, "i:12;",
  "MW_MiterJoin", (const char*)4, "i:1;",
  "MW_ModulateCompositeOp", (const char*)5, "i:37;",
  "MW_ModuleError", (const char*)6, "i:455;",
  "MW_ModuleFatalError", (const char*)6, "i:755;",
  "MW_ModuleWarning", (const char*)6, "i:355;",
  "MW_MonitorError", (const char*)6, "i:485;",
  "MW_MonitorFatalError", (const char*)6, "i:785;",
  "MW_MonitorWarning", (const char*)6, "i:385;",
  "MW_MultiplicativeGaussianNoise", (const char*)4, "i:3;",
  "MW_MultiplyCompositeOp", (const char*)5, "i:38;",
  "MW_MultiplyEvaluateOperator", (const char*)4, "i:7;",
  "MW_NoCompositeOp", (const char*)4, "i:1;",
  "MW_NoCompression", (const char*)4, "i:1;",
  "MW_NoDecoration", (const char*)4, "i:1;",
  "MW_NoInterlace", (const char*)4, "i:1;",
  "MW_NonZeroRule", (const char*)4, "i:2;",
  "MW_NoneDispose", (const char*)4, "i:1;",
  "MW_NormalStretch", (const char*)4, "i:1;",
  "MW_NormalStyle", (const char*)4, "i:1;",
  "MW_NorthEastGravity", (const char*)4, "i:3;",
  "MW_NorthGravity", (const char*)4, "i:2;",
  "MW_NorthWestGravity", (const char*)4, "i:1;",
  "MW_OHTAColorspace", (const char*)4, "i:4;",
  "MW_ObjectBoundingBox", (const char*)4, "i:3;",
  "MW_ObliqueStyle", (const char*)4, "i:3;",
  "MW_OilPaintPreview", (const char*)5, "i:27;",
  "MW_OpacityChannel", (const char*)4, "i:8;",
  "MW_OpaqueOpacity", (const char*)4, "i:0;",
  "MW_OptimizeType", (const char*)5, "i:10;",
  "MW_OptionError", (const char*)6, "i:410;",
  "MW_OptionFatalError", (const char*)6, "i:710;",
  "MW_OptionWarning", (const char*)6, "i:310;",
  "MW_OrEvaluateOperator", (const char*)4, "i:8;",
  "MW_OutCompositeOp", (const char*)5, "i:39;",
  "MW_OverCompositeOp", (const char*)5, "i:40;",
  "MW_OverlayCompositeOp", (const char*)5, "i:41;",
  "MW_OverlineDecoration", (const char*)4, "i:3;",
  "MW_PaletteMatteType", (const char*)4, "i:5;",
  "MW_PaletteType", (const char*)4, "i:4;",
  "MW_PartitionInterlace", (const char*)4, "i:4;",
  "MW_PeakAbsoluteErrorMetric", (const char*)4, "i:5;",
  "MW_PeakSignalToNoiseRatioMetric", (const char*)4, "i:6;",
  "MW_PerceptualIntent", (const char*)4, "i:2;",
  "MW_PixelsPerCentimeterResolution", (const char*)4, "i:2;",
  "MW_PixelsPerInchResolution", (const char*)4, "i:1;",
  "MW_PlaneInterlace", (const char*)4, "i:3;",
  "MW_PlusCompositeOp", (const char*)5, "i:42;",
  "MW_PointFilter", (const char*)4, "i:1;",
  "MW_PointMethod", (const char*)4, "i:1;",
  "MW_PoissonNoise", (const char*)4, "i:6;",
  "MW_PreviousDispose", (const char*)4, "i:3;",
  "MW_QuadraticFilter", (const char*)4, "i:9;",
  "MW_QuantizePreview", (const char*)5, "i:11;",
  "MW_QuantumRange", (const char*)8, "i:65535;",
  "MW_RGBColorspace", (const char*)4, "i:1;",
  "MW_RLECompression", (const char*)4, "i:9;",
  "MW_RaisePreview", (const char*)5, "i:22;",
  "MW_RedChannel", (const char*)4, "i:1;",
  "MW_ReduceNoisePreview", (const char*)5, "i:13;",
  "MW_RegistryError", (const char*)6, "i:490;",
  "MW_RegistryFatalError", (const char*)6, "i:790;",
  "MW_RegistryWarning", (const char*)6, "i:390;",
  "MW_RelativeIntent", (const char*)4, "i:4;",
  "MW_ReplaceCompositeOp", (const char*)5, "i:43;",
  "MW_ReplaceMethod", (const char*)4, "i:2;",
  "MW_ResetMethod", (const char*)4, "i:5;",
  "MW_ResourceLimitError", (const char*)6, "i:400;",
  "MW_ResourceLimitFatalError", (const char*)6, "i:700;",
  "MW_ResourceLimitWarning", (const char*)6, "i:300;",
  "MW_RightAlign", (const char*)4, "i:3;",
  "MW_RightShiftEvaluateOperator", (const char*)4, "i:9;",
  "MW_RollPreview", (const char*)4, "i:3;",
  "MW_RootMeanSquaredErrorMetric", (const char*)4, "i:7;",
  "MW_RotatePreview", (const char*)4, "i:1;",
  "MW_RoundCap", (const char*)4, "i:2;",
  "MW_RoundJoin", (const char*)4, "i:2;",
  "MW_SaturateCompositeOp", (const char*)5, "i:44;",
  "MW_SaturationIntent", (const char*)4, "i:1;",
  "MW_SaturationPreview", (const char*)4, "i:5;",
  "MW_ScreenCompositeOp", (const char*)5, "i:45;",
  "MW_SegmentPreview", (const char*)5, "i:23;",
  "MW_SemiCondensedStretch", (const char*)4, "i:5;",
  "MW_SemiExpandedStretch", (const char*)4, "i:6;",
  "MW_SetEvaluateOperator", (const char*)5, "i:10;",
  "MW_ShadePreview", (const char*)5, "i:21;",
  "MW_SharpenPreview", (const char*)5, "i:15;",
  "MW_ShearPreview", (const char*)4, "i:2;",
  "MW_ShortPixel", (const char*)4, "i:7;",
  "MW_SincFilter", (const char*)5, "i:15;",
  "MW_SoftLightCompositeOp", (const char*)5, "i:46;",
  "MW_SolarizePreview", (const char*)5, "i:20;",
  "MW_SouthEastGravity", (const char*)4, "i:9;",
  "MW_SouthGravity", (const char*)4, "i:8;",
  "MW_SouthWestGravity", (const char*)4, "i:7;",
  "MW_SpiffPreview", (const char*)4, "i:8;",
  "MW_SpreadPreview", (const char*)5, "i:19;",
  "MW_SquareCap", (const char*)4, "i:3;",
  "MW_SrcAtopCompositeOp", (const char*)5, "i:47;",
  "MW_SrcCompositeOp", (const char*)5, "i:48;",
  "MW_SrcInCompositeOp", (const char*)5, "i:49;",
  "MW_SrcOutCompositeOp", (const char*)5, "i:50;",
  "MW_SrcOverCompositeOp", (const char*)5, "i:51;",
  "MW_StaticGravity", (const char*)5, "i:10;",
  "MW_StreamError", (const char*)6, "i:440;",
  "MW_StreamFatalError", (const char*)6, "i:740;",
  "MW_StreamWarning", (const char*)6, "i:340;",
  "MW_SubtractCompositeOp", (const char*)5, "i:52;",
  "MW_SubtractEvaluateOperator", (const char*)5, "i:11;",
  "MW_SwirlPreview", (const char*)5, "i:24;",
  "MW_ThresholdCompositeOp", (const char*)5, "i:53;",
  "MW_ThresholdPreview", (const char*)5, "i:17;",
  "MW_TileVirtualPixelMethod", (const char*)4, "i:7;",
  "MW_TransparentColorspace", (const char*)4, "i:3;",
  "MW_TransparentOpacity", (const char*)8, "i:65535;",
  "MW_TriangleFilter", (const char*)4, "i:3;",
  "MW_TrueColorMatteType", (const char*)4, "i:7;",
  "MW_TrueColorType", (const char*)4, "i:6;",
  "MW_TypeError", (const char*)6, "i:405;",
  "MW_TypeFatalError", (const char*)6, "i:705;",
  "MW_TypeWarning", (const char*)6, "i:305;",
  "MW_UltraCondensedStretch", (const char*)4, "i:2;",
  "MW_UltraExpandedStretch", (const char*)4, "i:9;",
  "MW_UndefinedAlign", (const char*)4, "i:0;",
  "MW_UndefinedCap", (const char*)4, "i:0;",
  "MW_UndefinedChannel", (const char*)4, "i:0;",
  "MW_UndefinedColorspace", (const char*)4, "i:0;",
  "MW_UndefinedCompositeOp", (const char*)4, "i:0;",
  "MW_UndefinedCompression", (const char*)4, "i:0;",
  "MW_UndefinedDecoration", (const char*)4, "i:0;",
  "MW_UndefinedDispose", (const char*)4, "i:0;",
  "MW_UndefinedEvaluateOperator", (const char*)4, "i:0;",
  "MW_UndefinedException", (const char*)4, "i:0;",
  "MW_UndefinedFilter", (const char*)4, "i:0;",
  "MW_UndefinedGravity", (const char*)4, "i:0;",
  "MW_UndefinedIntent", (const char*)4, "i:0;",
  "MW_UndefinedInterlace", (const char*)4, "i:0;",
  "MW_UndefinedJoin", (const char*)4, "i:0;",
  "MW_UndefinedMethod", (const char*)4, "i:0;",
  "MW_UndefinedMetric", (const char*)4, "i:0;",
  "MW_UndefinedMode", (const char*)4, "i:0;",
  "MW_UndefinedNoise", (const char*)4, "i:0;",
  "MW_UndefinedPathUnits", (const char*)4, "i:0;",
  "MW_UndefinedPixel", (const char*)4, "i:0;",
  "MW_UndefinedPreview", (const char*)4, "i:0;",
  "MW_UndefinedResolution", (const char*)4, "i:0;",
  "MW_UndefinedResource", (const char*)4, "i:0;",
  "MW_UndefinedRule", (const char*)4, "i:0;",
  "MW_UndefinedStretch", (const char*)4, "i:0;",
  "MW_UndefinedStyle", (const char*)4, "i:0;",
  "MW_UndefinedType", (const char*)4, "i:0;",
  "MW_UndefinedVirtualPixelMethod", (const char*)4, "i:0;",
  "MW_UnderlineDecoration", (const char*)4, "i:2;",
  "MW_UnframeMode", (const char*)4, "i:2;",
  "MW_UniformNoise", (const char*)4, "i:1;",
  "MW_UnrecognizedDispose", (const char*)4, "i:0;",
  "MW_UserSpace", (const char*)4, "i:1;",
  "MW_UserSpaceOnUse", (const char*)4, "i:2;",
  "MW_WandError", (const char*)6, "i:470;",
  "MW_WandFatalError", (const char*)6, "i:770;",
  "MW_WandWarning", (const char*)6, "i:370;",
  "MW_WarningException", (const char*)6, "i:300;",
  "MW_WavePreview", (const char*)5, "i:26;",
  "MW_WestGravity", (const char*)4, "i:4;",
  "MW_XYZColorspace", (const char*)4, "i:6;",
  "MW_XorCompositeOp", (const char*)5, "i:54;",
  "MW_XorEvaluateOperator", (const char*)5, "i:12;",
  "MW_YCCColorspace", (const char*)4, "i:8;",
  "MW_YCbCrColorspace", (const char*)4, "i:7;",
  "MW_YIQColorspace", (const char*)4, "i:9;",
  "MW_YPbPrColorspace", (const char*)5, "i:10;",
  "MW_YUVColorspace", (const char*)5, "i:11;",
  "MW_YellowChannel", (const char*)4, "i:4;",
  "MW_ZipCompression", (const char*)5, "i:10;",
  "MW_sRGBColorspace", (const char*)5, "i:13;",
  "MYSQLI_ASSOC", (const char*)4, "i:1;",
  "MYSQLI_AUTO_INCREMENT_FLAG", (const char*)6, "i:512;",
  "MYSQLI_BLOB_FLAG", (const char*)5, "i:16;",
  "MYSQLI_BOTH", (const char*)4, "i:3;",
  "MYSQLI_CLIENT_COMPRESS", (const char*)5, "i:32;",
  "MYSQLI_CLIENT_FOUND_ROWS", (const char*)4, "i:2;",
  "MYSQLI_CLIENT_IGNORE_SPACE", (const char*)6, "i:256;",
  "MYSQLI_CLIENT_INTERACTIVE", (const char*)7, "i:1024;",
  "MYSQLI_CLIENT_NO_SCHEMA", (const char*)5, "i:16;",
  "MYSQLI_CLIENT_SSL", (const char*)7, "i:2048;",
  "MYSQLI_CURSOR_TYPE_FOR_UPDATE", (const char*)4, "i:2;",
  "MYSQLI_CURSOR_TYPE_NO_CURSOR", (const char*)4, "i:0;",
  "MYSQLI_CURSOR_TYPE_READ_ONLY", (const char*)4, "i:1;",
  "MYSQLI_CURSOR_TYPE_SCROLLABLE", (const char*)4, "i:4;",
  "MYSQLI_DATA_TRUNCATED", (const char*)6, "i:101;",
  "MYSQLI_GROUP_FLAG", (const char*)8, "i:32768;",
  "MYSQLI_INIT_COMMAND", (const char*)4, "i:3;",
  "MYSQLI_MULTIPLE_KEY_FLAG", (const char*)4, "i:8;",
  "MYSQLI_NOT_NULL_FLAG", (const char*)4, "i:1;",
  "MYSQLI_NO_DATA", (const char*)6, "i:100;",
  "MYSQLI_NUM", (const char*)4, "i:2;",
  "MYSQLI_NUM_FLAG", (const char*)8, "i:32768;",
  "MYSQLI_OPT_CONNECT_TIMEOUT", (const char*)4, "i:0;",
  "MYSQLI_OPT_LOCAL_INFILE", (const char*)4, "i:8;",
  "MYSQLI_PART_KEY_FLAG", (const char*)8, "i:16384;",
  "MYSQLI_PRI_KEY_FLAG", (const char*)4, "i:2;",
  "MYSQLI_READ_DEFAULT_FILE", (const char*)4, "i:4;",
  "MYSQLI_READ_DEFAULT_GROUP", (const char*)4, "i:5;",
  "MYSQLI_REPORT_ALL", (const char*)6, "i:255;",
  "MYSQLI_REPORT_ERROR", (const char*)4, "i:1;",
  "MYSQLI_REPORT_INDEX", (const char*)4, "i:4;",
  "MYSQLI_REPORT_OFF", (const char*)4, "i:0;",
  "MYSQLI_REPORT_STRICT", (const char*)4, "i:2;",
  "MYSQLI_RPL_ADMIN", (const char*)4, "i:2;",
  "MYSQLI_RPL_MASTER", (const char*)4, "i:0;",
  "MYSQLI_RPL_SLAVE", (const char*)4, "i:1;",
  "MYSQLI_SET_CHARSET_NAME", (const char*)4, "i:7;",
  "MYSQLI_SET_FLAG", (const char*)7, "i:2048;",
  "MYSQLI_STMT_ATTR_CURSOR_TYPE", (const char*)4, "i:1;",
  "MYSQLI_STMT_ATTR_PREFETCH_ROWS", (const char*)4, "i:2;",
  "MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH", (const char*)4, "i:0;",
  "MYSQLI_STORE_RESULT", (const char*)4, "i:0;",
  "MYSQLI_TIMESTAMP_FLAG", (const char*)7, "i:1024;",
  "MYSQLI_TYPE_BIT", (const char*)5, "i:16;",
  "MYSQLI_TYPE_BLOB", (const char*)6, "i:252;",
  "MYSQLI_TYPE_CHAR", (const char*)4, "i:1;",
  "MYSQLI_TYPE_DATE", (const char*)5, "i:10;",
  "MYSQLI_TYPE_DATETIME", (const char*)5, "i:12;",
  "MYSQLI_TYPE_DECIMAL", (const char*)4, "i:0;",
  "MYSQLI_TYPE_DOUBLE", (const char*)4, "i:5;",
  "MYSQLI_TYPE_ENUM", (const char*)6, "i:247;",
  "MYSQLI_TYPE_FLOAT", (const char*)4, "i:4;",
  "MYSQLI_TYPE_GEOMETRY", (const char*)6, "i:255;",
  "MYSQLI_TYPE_INT24", (const char*)4, "i:9;",
  "MYSQLI_TYPE_INTERVAL", (const char*)6, "i:247;",
  "MYSQLI_TYPE_LONG", (const char*)4, "i:3;",
  "MYSQLI_TYPE_LONGLONG", (const char*)4, "i:8;",
  "MYSQLI_TYPE_LONG_BLOB", (const char*)6, "i:251;",
  "MYSQLI_TYPE_MEDIUM_BLOB", (const char*)6, "i:250;",
  "MYSQLI_TYPE_NEWDATE", (const char*)5, "i:14;",
  "MYSQLI_TYPE_NEWDECIMAL", (const char*)6, "i:246;",
  "MYSQLI_TYPE_NULL", (const char*)4, "i:6;",
  "MYSQLI_TYPE_SET", (const char*)6, "i:248;",
  "MYSQLI_TYPE_SHORT", (const char*)4, "i:2;",
  "MYSQLI_TYPE_STRING", (const char*)6, "i:254;",
  "MYSQLI_TYPE_TIME", (const char*)5, "i:11;",
  "MYSQLI_TYPE_TIMESTAMP", (const char*)4, "i:7;",
  "MYSQLI_TYPE_TINY", (const char*)4, "i:1;",
  "MYSQLI_TYPE_TINY_BLOB", (const char*)6, "i:249;",
  "MYSQLI_TYPE_VAR_STRING", (const char*)6, "i:253;",
  "MYSQLI_TYPE_YEAR", (const char*)5, "i:13;",
  "MYSQLI_UNIQUE_KEY_FLAG", (const char*)4, "i:4;",
  "MYSQLI_UNSIGNED_FLAG", (const char*)5, "i:32;",
  "MYSQLI_USE_RESULT", (const char*)4, "i:1;",
  "MYSQLI_ZEROFILL_FLAG", (const char*)5, "i:64;",
  "MYSQL_ASSOC", (const char*)4, "i:1;",
  "MYSQL_BOTH", (const char*)4, "i:3;",
  "MYSQL_CLIENT_COMPRESS", (const char*)5, "i:32;",
  "MYSQL_CLIENT_IGNORE_SPACE", (const char*)6, "i:256;",
  "MYSQL_CLIENT_INTERACTIVE", (const char*)7, "i:1024;",
  "MYSQL_CLIENT_SSL", (const char*)7, "i:2048;",
  "MYSQL_NUM", (const char*)4, "i:2;",
  "M_1_PI", (const char*)19, "d:0.31830988618379;",
  "M_2_PI", (const char*)19, "d:0.63661977236758;",
  "M_2_SQRTPI", (const char*)18, "d:1.1283791670955;",
  "M_E", (const char*)17, "d:2.718281828459;",
  "M_EULER", (const char*)19, "d:0.57721566490153;",
  "M_LN10", (const char*)17, "d:2.302585092994;",
  "M_LN2", (const char*)19, "d:0.69314718055995;",
  "M_LNPI", (const char*)18, "d:1.1447298858494;",
  "M_LOG10E", (const char*)19, "d:0.43429448190325;",
  "M_LOG2E", (const char*)17, "d:1.442695040889;",
  "M_PI", (const char*)18, "d:3.1415926535898;",
  "M_PI_2", (const char*)18, "d:1.5707963267949;",
  "M_PI_4", (const char*)19, "d:0.78539816339745;",
  "M_SQRT1_2", (const char*)19, "d:0.70710678118655;",
  "M_SQRT2", (const char*)18, "d:1.4142135623731;",
  "M_SQRT3", (const char*)18, "d:1.7320508075689;",
  "M_SQRTPI", (const char*)18, "d:1.7724538509055;",
  "NIL", (const char*)4, "i:0;",
  "NOEXPR", (const char*)9, "i:327681;",
  "NULL", (const char*)2, "N;",
  "OCI_ASSOC", (const char*)4, "i:1;",
  "OCI_BOTH", (const char*)4, "i:3;",
  "OCI_B_BFILE", (const char*)6, "i:114;",
  "OCI_B_BIN", (const char*)5, "i:23;",
  "OCI_B_BLOB", (const char*)6, "i:113;",
  "OCI_B_CFILEE", (const char*)6, "i:115;",
  "OCI_B_CLOB", (const char*)6, "i:112;",
  "OCI_B_CURSOR", (const char*)6, "i:116;",
  "OCI_B_INT", (const char*)4, "i:3;",
  "OCI_B_NTY", (const char*)6, "i:108;",
  "OCI_B_NUM", (const char*)4, "i:2;",
  "OCI_B_ROWID", (const char*)6, "i:104;",
  "OCI_COMMIT_ON_SUCCESS", (const char*)5, "i:32;",
  "OCI_DEFAULT", (const char*)4, "i:0;",
  "OCI_DESCRIBE_ONLY", (const char*)5, "i:16;",
  "OCI_DTYPE_FILE", (const char*)5, "i:56;",
  "OCI_DTYPE_LOB", (const char*)5, "i:50;",
  "OCI_DTYPE_ROWID", (const char*)5, "i:54;",
  "OCI_D_FILE", (const char*)5, "i:56;",
  "OCI_D_LOB", (const char*)5, "i:50;",
  "OCI_D_ROWID", (const char*)5, "i:54;",
  "OCI_EXACT_FETCH", (const char*)4, "i:2;",
  "OCI_FETCHSTATEMENT_BY_COLUMN", (const char*)5, "i:16;",
  "OCI_FETCHSTATEMENT_BY_ROW", (const char*)5, "i:32;",
  "OCI_LOB_BUFFER_FREE", (const char*)4, "i:1;",
  "OCI_NUM", (const char*)4, "i:2;",
  "OCI_RETURN_LOBS", (const char*)4, "i:8;",
  "OCI_RETURN_NULLS", (const char*)4, "i:4;",
  "OCI_SEEK_CUR", (const char*)4, "i:1;",
  "OCI_SEEK_END", (const char*)4, "i:2;",
  "OCI_SEEK_SET", (const char*)4, "i:0;",
  "OCI_SYSDATE", (const char*)14, "s:7:\"SYSDATE\";",
  "OCI_SYSDBA", (const char*)4, "i:2;",
  "OCI_SYSOPER", (const char*)4, "i:4;",
  "OCI_TEMP_BLOB", (const char*)4, "i:1;",
  "OCI_TEMP_CLOB", (const char*)4, "i:2;",
  "OPENSSL_ALGO_MD2", (const char*)4, "i:4;",
  "OPENSSL_ALGO_MD4", (const char*)4, "i:3;",
  "OPENSSL_ALGO_MD5", (const char*)4, "i:2;",
  "OPENSSL_ALGO_SHA1", (const char*)4, "i:1;",
  "OPENSSL_CIPHER_3DES", (const char*)4, "i:4;",
  "OPENSSL_CIPHER_DES", (const char*)4, "i:3;",
  "OPENSSL_CIPHER_RC2_128", (const char*)4, "i:1;",
  "OPENSSL_CIPHER_RC2_40", (const char*)4, "i:0;",
  "OPENSSL_CIPHER_RC2_64", (const char*)4, "i:2;",
  "OPENSSL_KEYTYPE_DH", (const char*)4, "i:2;",
  "OPENSSL_KEYTYPE_DSA", (const char*)4, "i:1;",
  "OPENSSL_KEYTYPE_EC", (const char*)4, "i:3;",
  "OPENSSL_KEYTYPE_RSA", (const char*)4, "i:0;",
  "OPENSSL_NO_PADDING", (const char*)4, "i:3;",
  "OPENSSL_PKCS1_OAEP_PADDING", (const char*)4, "i:4;",
  "OPENSSL_PKCS1_PADDING", (const char*)4, "i:1;",
  "OPENSSL_SSLV23_PADDING", (const char*)4, "i:2;",
  "OPENSSL_VERSION_NUMBER", (const char*)10, "i:9469999;",
  "OPENSSL_VERSION_TEXT", (const char*)34, "s:26:\"OpenSSL 0.9.8b 04 May 2006\";",
  "OP_ANONYMOUS", (const char*)4, "i:4;",
  "OP_DEBUG", (const char*)4, "i:1;",
  "OP_EXPUNGE", (const char*)6, "i:128;",
  "OP_HALFOPEN", (const char*)5, "i:64;",
  "OP_PROTOTYPE", (const char*)5, "i:32;",
  "OP_READONLY", (const char*)4, "i:2;",
  "OP_SECURE", (const char*)6, "i:256;",
  "OP_SHORTCACHE", (const char*)4, "i:8;",
  "OP_SILENT", (const char*)5, "i:16;",
  "PATHINFO_BASENAME", (const char*)4, "i:2;",
  "PATHINFO_DIRNAME", (const char*)4, "i:1;",
  "PATHINFO_EXTENSION", (const char*)4, "i:4;",
  "PATHINFO_FILENAME", (const char*)4, "i:8;",
  "PATH_SEPARATOR", (const char*)8, "s:1:\":\";",
  "PCRE_VERSION", (const char*)22, "s:14:\"7.3 2007-08-28\";",
  "PEAR_EXTENSION_DIR", (const char*)7, "s:0:\"\";",
  "PEAR_INSTALL_DIR", (const char*)7, "s:0:\"\";",
  "PHP_BINARY_READ", (const char*)4, "i:2;",
  "PHP_BINDIR", (const char*)7, "s:0:\"\";",
  "PHP_CONFIG_FILE_PATH", (const char*)7, "s:0:\"\";",
  "PHP_CONFIG_FILE_SCAN_DIR", (const char*)7, "s:0:\"\";",
  "PHP_DATADIR", (const char*)7, "s:0:\"\";",
  "PHP_EOL", (const char*)8, "s:1:\"\n\";",
  "PHP_EXTENSION_DIR", (const char*)7, "s:0:\"\";",
  "PHP_INT_MAX", (const char*)22, "i:9223372036854775807;",
  "PHP_INT_SIZE", (const char*)4, "i:8;",
  "PHP_LIBDIR", (const char*)7, "s:0:\"\";",
  "PHP_LOCALSTATEDIR", (const char*)7, "s:0:\"\";",
  "PHP_NORMAL_READ", (const char*)4, "i:1;",
  "PHP_OS", (const char*)12, "s:5:\"Linux\";",
  "PHP_OUTPUT_HANDLER_CONT", (const char*)4, "i:2;",
  "PHP_OUTPUT_HANDLER_END", (const char*)4, "i:4;",
  "PHP_OUTPUT_HANDLER_START", (const char*)4, "i:1;",
  "PHP_PREFIX", (const char*)7, "s:0:\"\";",
  "PHP_SAPI", (const char*)10, "s:3:\"cli\";",
  "PHP_SHLIB_SUFFIX", (const char*)9, "s:2:\"so\";",
  "PHP_SYSCONFDIR", (const char*)7, "s:0:\"\";",
  "PHP_URL_FRAGMENT", (const char*)4, "i:7;",
  "PHP_URL_HOST", (const char*)4, "i:1;",
  "PHP_URL_PASS", (const char*)4, "i:4;",
  "PHP_URL_PATH", (const char*)4, "i:5;",
  "PHP_URL_PORT", (const char*)4, "i:2;",
  "PHP_URL_QUERY", (const char*)4, "i:6;",
  "PHP_URL_SCHEME", (const char*)4, "i:0;",
  "PHP_URL_USER", (const char*)4, "i:3;",
  "PHP_VERSION", (const char*)20, "s:12:\"5.3.3.hiphop\";",
  "PKCS7_BINARY", (const char*)6, "i:128;",
  "PKCS7_DETACHED", (const char*)5, "i:64;",
  "PKCS7_NOATTR", (const char*)6, "i:256;",
  "PKCS7_NOCERTS", (const char*)4, "i:2;",
  "PKCS7_NOCHAIN", (const char*)4, "i:8;",
  "PKCS7_NOINTERN", (const char*)5, "i:16;",
  "PKCS7_NOSIGS", (const char*)4, "i:4;",
  "PKCS7_NOVERIFY", (const char*)5, "i:32;",
  "PKCS7_TEXT", (const char*)4, "i:1;",
  "PM_STR", (const char*)9, "i:131111;",
  "PNG_ALL_FILTERS", (const char*)6, "i:248;",
  "PNG_FILTER_AVG", (const char*)5, "i:64;",
  "PNG_FILTER_NONE", (const char*)4, "i:8;",
  "PNG_FILTER_PAETH", (const char*)6, "i:128;",
  "PNG_FILTER_SUB", (const char*)5, "i:16;",
  "PNG_FILTER_UP", (const char*)5, "i:32;",
  "PNG_NO_FILTER", (const char*)4, "i:0;",
  "POSIX_F_OK", (const char*)4, "i:0;",
  "POSIX_R_OK", (const char*)4, "i:4;",
  "POSIX_S_IFBLK", (const char*)8, "i:24576;",
  "POSIX_S_IFCHR", (const char*)7, "i:8192;",
  "POSIX_S_IFIFO", (const char*)7, "i:4096;",
  "POSIX_S_IFREG", (const char*)8, "i:32768;",
  "POSIX_S_IFSOCK", (const char*)8, "i:49152;",
  "POSIX_W_OK", (const char*)4, "i:2;",
  "POSIX_X_OK", (const char*)4, "i:1;",
  "PREG_BACKTRACK_LIMIT_ERROR", (const char*)4, "i:2;",
  "PREG_BAD_UTF8_ERROR", (const char*)4, "i:4;",
  "PREG_GREP_INVERT", (const char*)4, "i:1;",
  "PREG_INTERNAL_ERROR", (const char*)4, "i:1;",
  "PREG_NO_ERROR", (const char*)4, "i:0;",
  "PREG_OFFSET_CAPTURE", (const char*)6, "i:256;",
  "PREG_PATTERN_ORDER", (const char*)4, "i:1;",
  "PREG_RECURSION_LIMIT_ERROR", (const char*)4, "i:3;",
  "PREG_SET_ORDER", (const char*)4, "i:2;",
  "PREG_SPLIT_DELIM_CAPTURE", (const char*)4, "i:2;",
  "PREG_SPLIT_NO_EMPTY", (const char*)4, "i:1;",
  "PREG_SPLIT_OFFSET_CAPTURE", (const char*)4, "i:4;",
  "PRIO_PGRP", (const char*)4, "i:1;",
  "PRIO_PROCESS", (const char*)4, "i:0;",
  "PRIO_USER", (const char*)4, "i:2;",
  "PSFS_ERR_FATAL", (const char*)4, "i:0;",
  "PSFS_FEED_ME", (const char*)4, "i:1;",
  "PSFS_FLAG_FLUSH_CLOSE", (const char*)4, "i:2;",
  "PSFS_FLAG_FLUSH_INC", (const char*)4, "i:1;",
  "PSFS_FLAG_NORMAL", (const char*)4, "i:0;",
  "PSFS_PASS_ON", (const char*)4, "i:2;",
  "RADIXCHAR", (const char*)8, "i:65536;",
  "SA_ALL", (const char*)5, "i:31;",
  "SA_MESSAGES", (const char*)4, "i:1;",
  "SA_RECENT", (const char*)4, "i:2;",
  "SA_UIDNEXT", (const char*)4, "i:8;",
  "SA_UIDVALIDITY", (const char*)5, "i:16;",
  "SA_UNSEEN", (const char*)4, "i:4;",
  "SEEK_CUR", (const char*)4, "i:1;",
  "SEEK_END", (const char*)4, "i:2;",
  "SEEK_SET", (const char*)4, "i:0;",
  "SE_FREE", (const char*)4, "i:2;",
  "SE_NOPREFETCH", (const char*)4, "i:4;",
  "SE_UID", (const char*)4, "i:1;",
  "SIGABRT", (const char*)4, "i:6;",
  "SIGALRM", (const char*)5, "i:14;",
  "SIGBABY", (const char*)5, "i:31;",
  "SIGBUS", (const char*)4, "i:7;",
  "SIGCHLD", (const char*)5, "i:17;",
  "SIGCLD", (const char*)5, "i:17;",
  "SIGCONT", (const char*)5, "i:18;",
  "SIGFPE", (const char*)4, "i:8;",
  "SIGHUP", (const char*)4, "i:1;",
  "SIGILL", (const char*)4, "i:4;",
  "SIGINT", (const char*)4, "i:2;",
  "SIGIO", (const char*)5, "i:29;",
  "SIGIOT", (const char*)4, "i:6;",
  "SIGKILL", (const char*)4, "i:9;",
  "SIGPIPE", (const char*)5, "i:13;",
  "SIGPOLL", (const char*)5, "i:29;",
  "SIGPROF", (const char*)5, "i:27;",
  "SIGPWR", (const char*)5, "i:30;",
  "SIGQUIT", (const char*)4, "i:3;",
  "SIGSEGV", (const char*)5, "i:11;",
  "SIGSTKFLT", (const char*)5, "i:16;",
  "SIGSTOP", (const char*)5, "i:19;",
  "SIGSYS", (const char*)5, "i:31;",
  "SIGTERM", (const char*)5, "i:15;",
  "SIGTRAP", (const char*)4, "i:5;",
  "SIGTSTP", (const char*)5, "i:20;",
  "SIGTTIN", (const char*)5, "i:21;",
  "SIGTTOU", (const char*)5, "i:22;",
  "SIGURG", (const char*)5, "i:23;",
  "SIGUSR1", (const char*)5, "i:10;",
  "SIGUSR2", (const char*)5, "i:12;",
  "SIGVTALRM", (const char*)5, "i:26;",
  "SIGWINCH", (const char*)5, "i:28;",
  "SIGXCPU", (const char*)5, "i:24;",
  "SIGXFSZ", (const char*)5, "i:25;",
  "SIG_DFL", (const char*)4, "i:0;",
  "SIG_ERR", (const char*)5, "i:-1;",
  "SIG_IGN", (const char*)4, "i:1;",
  "SOAP_1_1", (const char*)4, "i:1;",
  "SOAP_1_2", (const char*)4, "i:2;",
  "SOAP_ACTOR_NEXT", (const char*)4, "i:1;",
  "SOAP_ACTOR_NONE", (const char*)4, "i:2;",
  "SOAP_ACTOR_UNLIMATERECEIVER", (const char*)4, "i:3;",
  "SOAP_AUTHENTICATION_BASIC", (const char*)4, "i:0;",
  "SOAP_AUTHENTICATION_DIGEST", (const char*)4, "i:1;",
  "SOAP_COMPRESSION_ACCEPT", (const char*)5, "i:32;",
  "SOAP_COMPRESSION_DEFLATE", (const char*)5, "i:16;",
  "SOAP_COMPRESSION_GZIP", (const char*)4, "i:0;",
  "SOAP_DOCUMENT", (const char*)4, "i:2;",
  "SOAP_ENCODED", (const char*)4, "i:1;",
  "SOAP_ENC_ARRAY", (const char*)6, "i:300;",
  "SOAP_ENC_OBJECT", (const char*)6, "i:301;",
  "SOAP_FUNCTIONS_ALL", (const char*)6, "i:999;",
  "SOAP_LITERAL", (const char*)4, "i:2;",
  "SOAP_PERSISTENCE_REQUEST", (const char*)4, "i:2;",
  "SOAP_PERSISTENCE_SESSION", (const char*)4, "i:1;",
  "SOAP_RPC", (const char*)4, "i:1;",
  "SOAP_SINGLE_ELEMENT_ARRAYS", (const char*)4, "i:1;",
  "SOAP_USE_XSI_ARRAY_TYPE", (const char*)4, "i:4;",
  "SOAP_WAIT_ONE_WAY_CALLS", (const char*)4, "i:2;",
  "SOCKET_E2BIG", (const char*)4, "i:7;",
  "SOCKET_EACCES", (const char*)5, "i:13;",
  "SOCKET_EADDRINUSE", (const char*)5, "i:98;",
  "SOCKET_EADDRNOTAVAIL", (const char*)5, "i:99;",
  "SOCKET_EADV", (const char*)5, "i:68;",
  "SOCKET_EAFNOSUPPORT", (const char*)5, "i:97;",
  "SOCKET_EAGAIN", (const char*)5, "i:11;",
  "SOCKET_EALREADY", (const char*)6, "i:114;",
  "SOCKET_EBADE", (const char*)5, "i:52;",
  "SOCKET_EBADF", (const char*)4, "i:9;",
  "SOCKET_EBADFD", (const char*)5, "i:77;",
  "SOCKET_EBADMSG", (const char*)5, "i:74;",
  "SOCKET_EBADR", (const char*)5, "i:53;",
  "SOCKET_EBADRQC", (const char*)5, "i:56;",
  "SOCKET_EBADSLT", (const char*)5, "i:57;",
  "SOCKET_EBUSY", (const char*)5, "i:16;",
  "SOCKET_ECHRNG", (const char*)5, "i:44;",
  "SOCKET_ECOMM", (const char*)5, "i:70;",
  "SOCKET_ECONNABORTED", (const char*)6, "i:103;",
  "SOCKET_ECONNREFUSED", (const char*)6, "i:111;",
  "SOCKET_ECONNRESET", (const char*)6, "i:104;",
  "SOCKET_EDESTADDRREQ", (const char*)5, "i:89;",
  "SOCKET_EDQUOT", (const char*)6, "i:122;",
  "SOCKET_EEXIST", (const char*)5, "i:17;",
  "SOCKET_EFAULT", (const char*)5, "i:14;",
  "SOCKET_EHOSTDOWN", (const char*)6, "i:112;",
  "SOCKET_EHOSTUNREACH", (const char*)6, "i:113;",
  "SOCKET_EIDRM", (const char*)5, "i:43;",
  "SOCKET_EINPROGRESS", (const char*)6, "i:115;",
  "SOCKET_EINTR", (const char*)4, "i:4;",
  "SOCKET_EINVAL", (const char*)5, "i:22;",
  "SOCKET_EIO", (const char*)4, "i:5;",
  "SOCKET_EISCONN", (const char*)6, "i:106;",
  "SOCKET_EISDIR", (const char*)5, "i:21;",
  "SOCKET_EISNAM", (const char*)6, "i:120;",
  "SOCKET_EL2HLT", (const char*)5, "i:51;",
  "SOCKET_EL2NSYNC", (const char*)5, "i:45;",
  "SOCKET_EL3HLT", (const char*)5, "i:46;",
  "SOCKET_EL3RST", (const char*)5, "i:47;",
  "SOCKET_ELNRNG", (const char*)5, "i:48;",
  "SOCKET_ELOOP", (const char*)5, "i:40;",
  "SOCKET_EMEDIUMTYPE", (const char*)6, "i:124;",
  "SOCKET_EMFILE", (const char*)5, "i:24;",
  "SOCKET_EMLINK", (const char*)5, "i:31;",
  "SOCKET_EMSGSIZE", (const char*)5, "i:90;",
  "SOCKET_EMULTIHOP", (const char*)5, "i:72;",
  "SOCKET_ENAMETOOLONG", (const char*)5, "i:36;",
  "SOCKET_ENETDOWN", (const char*)6, "i:100;",
  "SOCKET_ENETRESET", (const char*)6, "i:102;",
  "SOCKET_ENETUNREACH", (const char*)6, "i:101;",
  "SOCKET_ENFILE", (const char*)5, "i:23;",
  "SOCKET_ENOANO", (const char*)5, "i:55;",
  "SOCKET_ENOBUFS", (const char*)6, "i:105;",
  "SOCKET_ENOCSI", (const char*)5, "i:50;",
  "SOCKET_ENODATA", (const char*)5, "i:61;",
  "SOCKET_ENODEV", (const char*)5, "i:19;",
  "SOCKET_ENOENT", (const char*)4, "i:2;",
  "SOCKET_ENOLCK", (const char*)5, "i:37;",
  "SOCKET_ENOLINK", (const char*)5, "i:67;",
  "SOCKET_ENOMEDIUM", (const char*)6, "i:123;",
  "SOCKET_ENOMEM", (const char*)5, "i:12;",
  "SOCKET_ENOMSG", (const char*)5, "i:42;",
  "SOCKET_ENONET", (const char*)5, "i:64;",
  "SOCKET_ENOPROTOOPT", (const char*)5, "i:92;",
  "SOCKET_ENOSPC", (const char*)5, "i:28;",
  "SOCKET_ENOSR", (const char*)5, "i:63;",
  "SOCKET_ENOSTR", (const char*)5, "i:60;",
  "SOCKET_ENOSYS", (const char*)5, "i:38;",
  "SOCKET_ENOTBLK", (const char*)5, "i:15;",
  "SOCKET_ENOTCONN", (const char*)6, "i:107;",
  "SOCKET_ENOTDIR", (const char*)5, "i:20;",
  "SOCKET_ENOTEMPTY", (const char*)5, "i:39;",
  "SOCKET_ENOTSOCK", (const char*)5, "i:88;",
  "SOCKET_ENOTTY", (const char*)5, "i:25;",
  "SOCKET_ENOTUNIQ", (const char*)5, "i:76;",
  "SOCKET_ENXIO", (const char*)4, "i:6;",
  "SOCKET_EOPNOTSUPP", (const char*)5, "i:95;",
  "SOCKET_EPERM", (const char*)4, "i:1;",
  "SOCKET_EPFNOSUPPORT", (const char*)5, "i:96;",
  "SOCKET_EPIPE", (const char*)5, "i:32;",
  "SOCKET_EPROTO", (const char*)5, "i:71;",
  "SOCKET_EPROTONOSUPPORT", (const char*)5, "i:93;",
  "SOCKET_EPROTOTYPE", (const char*)5, "i:91;",
  "SOCKET_EREMCHG", (const char*)5, "i:78;",
  "SOCKET_EREMOTE", (const char*)5, "i:66;",
  "SOCKET_EREMOTEIO", (const char*)6, "i:121;",
  "SOCKET_ERESTART", (const char*)5, "i:85;",
  "SOCKET_EROFS", (const char*)5, "i:30;",
  "SOCKET_ESHUTDOWN", (const char*)6, "i:108;",
  "SOCKET_ESOCKTNOSUPPORT", (const char*)5, "i:94;",
  "SOCKET_ESPIPE", (const char*)5, "i:29;",
  "SOCKET_ESRMNT", (const char*)5, "i:69;",
  "SOCKET_ESTRPIPE", (const char*)5, "i:86;",
  "SOCKET_ETIME", (const char*)5, "i:62;",
  "SOCKET_ETIMEDOUT", (const char*)6, "i:110;",
  "SOCKET_ETOOMANYREFS", (const char*)6, "i:109;",
  "SOCKET_EUNATCH", (const char*)5, "i:49;",
  "SOCKET_EUSERS", (const char*)5, "i:87;",
  "SOCKET_EWOULDBLOCK", (const char*)5, "i:11;",
  "SOCKET_EXDEV", (const char*)5, "i:18;",
  "SOCKET_EXFULL", (const char*)5, "i:54;",
  "SOCK_DGRAM", (const char*)4, "i:2;",
  "SOCK_RAW", (const char*)4, "i:3;",
  "SOCK_RDM", (const char*)4, "i:4;",
  "SOCK_SEQPACKET", (const char*)4, "i:5;",
  "SOCK_STREAM", (const char*)4, "i:1;",
  "SOL_SOCKET", (const char*)4, "i:1;",
  "SOL_TCP", (const char*)4, "i:6;",
  "SOL_UDP", (const char*)5, "i:17;",
  "SOMAXCONN", (const char*)6, "i:128;",
  "SORTARRIVAL", (const char*)4, "i:1;",
  "SORTCC", (const char*)4, "i:5;",
  "SORTDATE", (const char*)4, "i:0;",
  "SORTFROM", (const char*)4, "i:2;",
  "SORTSIZE", (const char*)4, "i:6;",
  "SORTSUBJECT", (const char*)4, "i:3;",
  "SORTTO", (const char*)4, "i:4;",
  "SORT_ASC", (const char*)4, "i:4;",
  "SORT_DESC", (const char*)4, "i:3;",
  "SORT_LOCALE_STRING", (const char*)4, "i:5;",
  "SORT_NUMERIC", (const char*)4, "i:1;",
  "SORT_REGULAR", (const char*)4, "i:0;",
  "SORT_STRING", (const char*)4, "i:2;",
  "SO_BROADCAST", (const char*)4, "i:6;",
  "SO_DEBUG", (const char*)4, "i:1;",
  "SO_DONTROUTE", (const char*)4, "i:5;",
  "SO_ERROR", (const char*)4, "i:4;",
  "SO_FREE", (const char*)4, "i:8;",
  "SO_KEEPALIVE", (const char*)4, "i:9;",
  "SO_LINGER", (const char*)5, "i:13;",
  "SO_NOSERVER", (const char*)5, "i:16;",
  "SO_OOBINLINE", (const char*)5, "i:10;",
  "SO_RCVBUF", (const char*)4, "i:8;",
  "SO_RCVLOWAT", (const char*)5, "i:18;",
  "SO_RCVTIMEO", (const char*)5, "i:20;",
  "SO_REUSEADDR", (const char*)4, "i:2;",
  "SO_SNDBUF", (const char*)4, "i:7;",
  "SO_SNDLOWAT", (const char*)5, "i:19;",
  "SO_SNDTIMEO", (const char*)5, "i:21;",
  "SO_TYPE", (const char*)4, "i:3;",
  "SQLT_AFC", (const char*)5, "i:96;",
  "SQLT_AVC", (const char*)5, "i:97;",
  "SQLT_BDOUBLE", (const char*)5, "i:22;",
  "SQLT_BFILEE", (const char*)6, "i:114;",
  "SQLT_BFLOAT", (const char*)5, "i:21;",
  "SQLT_BIN", (const char*)5, "i:23;",
  "SQLT_BLOB", (const char*)6, "i:113;",
  "SQLT_CFILEE", (const char*)6, "i:115;",
  "SQLT_CHR", (const char*)4, "i:1;",
  "SQLT_CLOB", (const char*)6, "i:112;",
  "SQLT_FLT", (const char*)4, "i:4;",
  "SQLT_INT", (const char*)4, "i:3;",
  "SQLT_LBI", (const char*)5, "i:24;",
  "SQLT_LNG", (const char*)4, "i:8;",
  "SQLT_LVC", (const char*)5, "i:94;",
  "SQLT_NTY", (const char*)6, "i:108;",
  "SQLT_NUM", (const char*)4, "i:2;",
  "SQLT_ODT", (const char*)6, "i:156;",
  "SQLT_RDD", (const char*)6, "i:104;",
  "SQLT_RSET", (const char*)6, "i:116;",
  "SQLT_STR", (const char*)4, "i:5;",
  "SQLT_UIN", (const char*)5, "i:68;",
  "SQLT_VCS", (const char*)4, "i:9;",
  "STREAM_CLIENT_ASYNC_CONNECT", (const char*)4, "i:2;",
  "STREAM_CLIENT_CONNECT", (const char*)4, "i:4;",
  "STREAM_CLIENT_PERSISTENT", (const char*)4, "i:1;",
  "STREAM_CRYPTO_METHOD_SSLv23_CLIENT", (const char*)4, "i:2;",
  "STREAM_CRYPTO_METHOD_SSLv23_SERVER", (const char*)4, "i:6;",
  "STREAM_CRYPTO_METHOD_SSLv2_CLIENT", (const char*)4, "i:0;",
  "STREAM_CRYPTO_METHOD_SSLv2_SERVER", (const char*)4, "i:4;",
  "STREAM_CRYPTO_METHOD_SSLv3_CLIENT", (const char*)4, "i:1;",
  "STREAM_CRYPTO_METHOD_SSLv3_SERVER", (const char*)4, "i:5;",
  "STREAM_CRYPTO_METHOD_TLS_CLIENT", (const char*)4, "i:3;",
  "STREAM_CRYPTO_METHOD_TLS_SERVER", (const char*)4, "i:7;",
  "STREAM_ENFORCE_SAFE_MODE", (const char*)4, "i:4;",
  "STREAM_FILTER_ALL", (const char*)4, "i:3;",
  "STREAM_FILTER_READ", (const char*)4, "i:1;",
  "STREAM_FILTER_WRITE", (const char*)4, "i:2;",
  "STREAM_IGNORE_URL", (const char*)4, "i:2;",
  "STREAM_IPPROTO_ICMP", (const char*)4, "i:1;",
  "STREAM_IPPROTO_IP", (const char*)4, "i:0;",
  "STREAM_IPPROTO_RAW", (const char*)6, "i:255;",
  "STREAM_IPPROTO_TCP", (const char*)4, "i:6;",
  "STREAM_IPPROTO_UDP", (const char*)5, "i:17;",
  "STREAM_IS_URL", (const char*)4, "i:1;",
  "STREAM_MKDIR_RECURSIVE", (const char*)4, "i:1;",
  "STREAM_MUST_SEEK", (const char*)5, "i:16;",
  "STREAM_NOTIFY_AUTH_REQUIRED", (const char*)4, "i:3;",
  "STREAM_NOTIFY_AUTH_RESULT", (const char*)5, "i:10;",
  "STREAM_NOTIFY_COMPLETED", (const char*)4, "i:8;",
  "STREAM_NOTIFY_CONNECT", (const char*)4, "i:2;",
  "STREAM_NOTIFY_FAILURE", (const char*)4, "i:9;",
  "STREAM_NOTIFY_FILE_SIZE_IS", (const char*)4, "i:5;",
  "STREAM_NOTIFY_MIME_TYPE_IS", (const char*)4, "i:4;",
  "STREAM_NOTIFY_PROGRESS", (const char*)4, "i:7;",
  "STREAM_NOTIFY_REDIRECTED", (const char*)4, "i:6;",
  "STREAM_NOTIFY_RESOLVE", (const char*)4, "i:1;",
  "STREAM_NOTIFY_SEVERITY_ERR", (const char*)4, "i:2;",
  "STREAM_NOTIFY_SEVERITY_INFO", (const char*)4, "i:0;",
  "STREAM_NOTIFY_SEVERITY_WARN", (const char*)4, "i:1;",
  "STREAM_OOB", (const char*)4, "i:1;",
  "STREAM_PEEK", (const char*)4, "i:2;",
  "STREAM_PF_INET", (const char*)4, "i:2;",
  "STREAM_PF_INET6", (const char*)5, "i:10;",
  "STREAM_PF_UNIX", (const char*)4, "i:1;",
  "STREAM_REPORT_ERRORS", (const char*)4, "i:8;",
  "STREAM_SERVER_BIND", (const char*)4, "i:4;",
  "STREAM_SERVER_LISTEN", (const char*)4, "i:8;",
  "STREAM_SHUT_RD", (const char*)4, "i:0;",
  "STREAM_SHUT_RDWR", (const char*)4, "i:2;",
  "STREAM_SHUT_WR", (const char*)4, "i:1;",
  "STREAM_SOCK_DGRAM", (const char*)4, "i:2;",
  "STREAM_SOCK_RAW", (const char*)4, "i:3;",
  "STREAM_SOCK_RDM", (const char*)4, "i:4;",
  "STREAM_SOCK_SEQPACKET", (const char*)4, "i:5;",
  "STREAM_SOCK_STREAM", (const char*)4, "i:1;",
  "STREAM_URL_STAT_LINK", (const char*)4, "i:1;",
  "STREAM_URL_STAT_QUIET", (const char*)4, "i:2;",
  "STREAM_USE_PATH", (const char*)4, "i:1;",
  "STR_PAD_BOTH", (const char*)4, "i:2;",
  "STR_PAD_LEFT", (const char*)4, "i:0;",
  "STR_PAD_RIGHT", (const char*)4, "i:1;",
  "ST_SET", (const char*)4, "i:4;",
  "ST_SILENT", (const char*)4, "i:2;",
  "ST_UID", (const char*)4, "i:1;",
  "SUNFUNCS_RET_DOUBLE", (const char*)4, "i:2;",
  "SUNFUNCS_RET_STRING", (const char*)4, "i:1;",
  "SUNFUNCS_RET_TIMESTAMP", (const char*)4, "i:0;",
  "THOUSEP", (const char*)8, "i:65537;",
  "TRUE", (const char*)4, "b:1;",
  "TYPEAPPLICATION", (const char*)4, "i:3;",
  "TYPEAUDIO", (const char*)4, "i:4;",
  "TYPEIMAGE", (const char*)4, "i:5;",
  "TYPEMESSAGE", (const char*)4, "i:2;",
  "TYPEMODEL", (const char*)4, "i:7;",
  "TYPEMULTIPART", (const char*)4, "i:1;",
  "TYPEOTHER", (const char*)4, "i:8;",
  "TYPETEXT", (const char*)4, "i:0;",
  "TYPEVIDEO", (const char*)4, "i:6;",
  "T_ABSTRACT", (const char*)6, "i:346;",
  "T_AND_EQUAL", (const char*)6, "i:271;",
  "T_ARRAY", (const char*)6, "i:360;",
  "T_ARRAY_CAST", (const char*)6, "i:292;",
  "T_AS", (const char*)6, "i:326;",
  "T_BAD_CHARACTER", (const char*)6, "i:313;",
  "T_BOOLEAN_AND", (const char*)6, "i:279;",
  "T_BOOLEAN_OR", (const char*)6, "i:278;",
  "T_BOOL_CAST", (const char*)6, "i:290;",
  "T_BREAK", (const char*)6, "i:331;",
  "T_CASE", (const char*)6, "i:329;",
  "T_CATCH", (const char*)6, "i:338;",
  "T_CHARACTER", (const char*)6, "i:312;",
  "T_CLASS", (const char*)6, "i:353;",
  "T_CLASS_C", (const char*)6, "i:361;",
  "T_CLONE", (const char*)6, "i:298;",
  "T_CLOSE_TAG", (const char*)6, "i:370;",
  "T_COMMENT", (const char*)6, "i:366;",
  "T_COMPILER_HALT_OFFSET", (const char*)6, "i:405;",
  "T_CONCAT_EQUAL", (const char*)6, "i:273;",
  "T_CONST", (const char*)6, "i:335;",
  "T_CONSTANT_ENCAPSED_STRING", (const char*)6, "i:315;",
  "T_CONTINUE", (const char*)6, "i:332;",
  "T_CURLY_OPEN", (const char*)6, "i:375;",
  "T_DEC", (const char*)6, "i:296;",
  "T_DECLARE", (const char*)6, "i:324;",
  "T_DEFAULT", (const char*)6, "i:330;",
  "T_DIR", (const char*)6, "i:379;",
  "T_DIV_EQUAL", (const char*)6, "i:274;",
  "T_DNUMBER", (const char*)6, "i:306;",
  "T_DO", (const char*)6, "i:317;",
  "T_DOC_COMMENT", (const char*)6, "i:367;",
  "T_DOLLAR_OPEN_CURLY_BRACES", (const char*)6, "i:374;",
  "T_DOUBLE_ARROW", (const char*)6, "i:358;",
  "T_DOUBLE_CAST", (const char*)6, "i:294;",
  "T_DOUBLE_COLON", (const char*)6, "i:376;",
  "T_ECHO", (const char*)6, "i:316;",
  "T_ELSE", (const char*)6, "i:303;",
  "T_ELSEIF", (const char*)6, "i:302;",
  "T_EMPTY", (const char*)6, "i:351;",
  "T_ENCAPSED_AND_WHITESPACE", (const char*)6, "i:314;",
  "T_ENDDECLARE", (const char*)6, "i:325;",
  "T_ENDFOR", (const char*)6, "i:321;",
  "T_ENDFOREACH", (const char*)6, "i:323;",
  "T_ENDIF", (const char*)6, "i:304;",
  "T_ENDSWITCH", (const char*)6, "i:328;",
  "T_ENDWHILE", (const char*)6, "i:319;",
  "T_END_HEREDOC", (const char*)6, "i:373;",
  "T_EVAL", (const char*)6, "i:260;",
  "T_EXIT", (const char*)6, "i:300;",
  "T_EXTENDS", (const char*)6, "i:355;",
  "T_FILE", (const char*)6, "i:365;",
  "T_FINAL", (const char*)6, "i:345;",
  "T_FMT", (const char*)4, "i:3;",
  "T_FMT_AMPM", (const char*)4, "i:4;",
  "T_FOR", (const char*)6, "i:320;",
  "T_FOREACH", (const char*)6, "i:322;",
  "T_FUNCTION", (const char*)6, "i:334;",
  "T_FUNC_C", (const char*)6, "i:363;",
  "T_GLOBAL", (const char*)6, "i:341;",
  "T_GOTO", (const char*)6, "i:333;",
  "T_HALT_COMPILER", (const char*)6, "i:352;",
  "T_IF", (const char*)6, "i:301;",
  "T_IMPLEMENTS", (const char*)6, "i:356;",
  "T_INC", (const char*)6, "i:297;",
  "T_INCLUDE", (const char*)6, "i:262;",
  "T_INCLUDE_ONCE", (const char*)6, "i:261;",
  "T_INLINE_HTML", (const char*)6, "i:311;",
  "T_INSTANCEOF", (const char*)6, "i:288;",
  "T_INTERFACE", (const char*)6, "i:354;",
  "T_INT_CAST", (const char*)6, "i:295;",
  "T_ISSET", (const char*)6, "i:350;",
  "T_IS_EQUAL", (const char*)6, "i:283;",
  "T_IS_GREATER_OR_EQUAL", (const char*)6, "i:284;",
  "T_IS_IDENTICAL", (const char*)6, "i:281;",
  "T_IS_NOT_EQUAL", (const char*)6, "i:282;",
  "T_IS_NOT_IDENTICAL", (const char*)6, "i:280;",
  "T_IS_SMALLER_OR_EQUAL", (const char*)6, "i:285;",
  "T_LINE", (const char*)6, "i:364;",
  "T_LIST", (const char*)6, "i:359;",
  "T_LNUMBER", (const char*)6, "i:305;",
  "T_LOGICAL_AND", (const char*)6, "i:265;",
  "T_LOGICAL_OR", (const char*)6, "i:263;",
  "T_LOGICAL_XOR", (const char*)6, "i:264;",
  "T_METHOD_C", (const char*)6, "i:362;",
  "T_MINUS_EQUAL", (const char*)6, "i:276;",
  "T_MOD_EQUAL", (const char*)6, "i:272;",
  "T_MUL_EQUAL", (const char*)6, "i:275;",
  "T_NAMESPACE", (const char*)6, "i:377;",
  "T_NEW", (const char*)6, "i:299;",
  "T_NS_C", (const char*)6, "i:378;",
  "T_NS_SEPARATOR", (const char*)6, "i:380;",
  "T_NUM_STRING", (const char*)6, "i:310;",
  "T_OBJECT_CAST", (const char*)6, "i:291;",
  "T_OBJECT_OPERATOR", (const char*)6, "i:357;",
  "T_OPEN_TAG", (const char*)6, "i:368;",
  "T_OPEN_TAG_WITH_ECHO", (const char*)6, "i:369;",
  "T_OR_EQUAL", (const char*)6, "i:270;",
  "T_PAAMAYIM_NEKUDOTAYIM", (const char*)6, "i:376;",
  "T_PLUS_EQUAL", (const char*)6, "i:277;",
  "T_PRINT", (const char*)6, "i:266;",
  "T_PRIVATE", (const char*)6, "i:344;",
  "T_PROTECTED", (const char*)6, "i:343;",
  "T_PUBLIC", (const char*)6, "i:342;",
  "T_REQUIRE", (const char*)6, "i:259;",
  "T_REQUIRE_ONCE", (const char*)6, "i:258;",
  "T_RETURN", (const char*)6, "i:336;",
  "T_SL", (const char*)6, "i:287;",
  "T_SL_EQUAL", (const char*)6, "i:268;",
  "T_SR", (const char*)6, "i:286;",
  "T_SR_EQUAL", (const char*)6, "i:267;",
  "T_START_HEREDOC", (const char*)6, "i:372;",
  "T_STATIC", (const char*)6, "i:347;",
  "T_STRING", (const char*)6, "i:307;",
  "T_STRING_CAST", (const char*)6, "i:293;",
  "T_STRING_VARNAME", (const char*)6, "i:308;",
  "T_SWITCH", (const char*)6, "i:327;",
  "T_THROW", (const char*)6, "i:339;",
  "T_TRY", (const char*)6, "i:337;",
  "T_UNSET", (const char*)6, "i:349;",
  "T_UNSET_CAST", (const char*)6, "i:289;",
  "T_USE", (const char*)6, "i:340;",
  "T_VAR", (const char*)6, "i:348;",
  "T_VARIABLE", (const char*)6, "i:309;",
  "T_WHILE", (const char*)6, "i:318;",
  "T_WHITESPACE", (const char*)6, "i:371;",
  "T_XOR_EQUAL", (const char*)6, "i:269;",
  "ULOC_ACTUAL_LOCALE", (const char*)4, "i:0;",
  "ULOC_VALID_LOCALE", (const char*)4, "i:1;",
  "UNKNOWN_TYPE", (const char*)9, "i:999998;",
  "UPLOAD_ERR_CANT_WRITE", (const char*)4, "i:7;",
  "UPLOAD_ERR_EXTENSION", (const char*)4, "i:8;",
  "UPLOAD_ERR_FORM_SIZE", (const char*)4, "i:2;",
  "UPLOAD_ERR_INI_SIZE", (const char*)4, "i:1;",
  "UPLOAD_ERR_NO_FILE", (const char*)4, "i:4;",
  "UPLOAD_ERR_NO_TMP_DIR", (const char*)4, "i:6;",
  "UPLOAD_ERR_OK", (const char*)4, "i:0;",
  "UPLOAD_ERR_PARTIAL", (const char*)4, "i:3;",
  "U_AMBIGUOUS_ALIAS_WARNING", (const char*)7, "i:-122;",
  "U_BAD_VARIABLE_DEFINITION", (const char*)8, "i:65536;",
  "U_BRK_ASSIGN_ERROR", (const char*)8, "i:66053;",
  "U_BRK_ERROR_LIMIT", (const char*)8, "i:66062;",
  "U_BRK_ERROR_START", (const char*)8, "i:66048;",
  "U_BRK_HEX_DIGITS_EXPECTED", (const char*)8, "i:66049;",
  "U_BRK_INIT_ERROR", (const char*)8, "i:66058;",
  "U_BRK_INTERNAL_ERROR", (const char*)8, "i:66048;",
  "U_BRK_MALFORMED_RULE_TAG", (const char*)8, "i:66061;",
  "U_BRK_MISMATCHED_PAREN", (const char*)8, "i:66055;",
  "U_BRK_NEW_LINE_IN_QUOTED_STRING", (const char*)8, "i:66056;",
  "U_BRK_RULE_EMPTY_SET", (const char*)8, "i:66059;",
  "U_BRK_RULE_SYNTAX", (const char*)8, "i:66051;",
  "U_BRK_SEMICOLON_EXPECTED", (const char*)8, "i:66050;",
  "U_BRK_UNCLOSED_SET", (const char*)8, "i:66052;",
  "U_BRK_UNDEFINED_VARIABLE", (const char*)8, "i:66057;",
  "U_BRK_UNRECOGNIZED_OPTION", (const char*)8, "i:66060;",
  "U_BRK_VARIABLE_REDFINITION", (const char*)8, "i:66054;",
  "U_BUFFER_OVERFLOW_ERROR", (const char*)5, "i:15;",
  "U_CE_NOT_FOUND_ERROR", (const char*)5, "i:21;",
  "U_COLLATOR_VERSION_MISMATCH", (const char*)5, "i:28;",
  "U_DIFFERENT_UCA_VERSION", (const char*)7, "i:-121;",
  "U_ENUM_OUT_OF_SYNC_ERROR", (const char*)5, "i:25;",
  "U_ERROR_LIMIT", (const char*)8, "i:66568;",
  "U_ERROR_WARNING_LIMIT", (const char*)7, "i:-120;",
  "U_ERROR_WARNING_START", (const char*)7, "i:-128;",
  "U_FILE_ACCESS_ERROR", (const char*)4, "i:4;",
  "U_FMT_PARSE_ERROR_LIMIT", (const char*)8, "i:65804;",
  "U_FMT_PARSE_ERROR_START", (const char*)8, "i:65792;",
  "U_ILLEGAL_ARGUMENT_ERROR", (const char*)4, "i:1;",
  "U_ILLEGAL_CHARACTER", (const char*)8, "i:65567;",
  "U_ILLEGAL_CHAR_FOUND", (const char*)5, "i:12;",
  "U_ILLEGAL_CHAR_IN_SEGMENT", (const char*)8, "i:65564;",
  "U_ILLEGAL_ESCAPE_SEQUENCE", (const char*)5, "i:18;",
  "U_ILLEGAL_PAD_POSITION", (const char*)8, "i:65800;",
  "U_INDEX_OUTOFBOUNDS_ERROR", (const char*)4, "i:8;",
  "U_INTERNAL_PROGRAM_ERROR", (const char*)4, "i:5;",
  "U_INTERNAL_TRANSLITERATOR_ERROR", (const char*)8, "i:65568;",
  "U_INVALID_CHAR_FOUND", (const char*)5, "i:10;",
  "U_INVALID_FORMAT_ERROR", (const char*)4, "i:3;",
  "U_INVALID_FUNCTION", (const char*)8, "i:65570;",
  "U_INVALID_ID", (const char*)8, "i:65569;",
  "U_INVALID_PROPERTY_PATTERN", (const char*)8, "i:65561;",
  "U_INVALID_RBT_SYNTAX", (const char*)8, "i:65560;",
  "U_INVALID_STATE_ERROR", (const char*)5, "i:27;",
  "U_INVALID_TABLE_FILE", (const char*)5, "i:14;",
  "U_INVALID_TABLE_FORMAT", (const char*)5, "i:13;",
  "U_INVARIANT_CONVERSION_ERROR", (const char*)5, "i:26;",
  "U_MALFORMED_EXPONENTIAL_PATTERN", (const char*)8, "i:65795;",
  "U_MALFORMED_PRAGMA", (const char*)8, "i:65562;",
  "U_MALFORMED_RULE", (const char*)8, "i:65537;",
  "U_MALFORMED_SET", (const char*)8, "i:65538;",
  "U_MALFORMED_SYMBOL_REFERENCE", (const char*)8, "i:65539;",
  "U_MALFORMED_UNICODE_ESCAPE", (const char*)8, "i:65540;",
  "U_MALFORMED_VARIABLE_DEFINITION", (const char*)8, "i:65541;",
  "U_MALFORMED_VARIABLE_REFERENCE", (const char*)8, "i:65542;",
  "U_MEMORY_ALLOCATION_ERROR", (const char*)4, "i:7;",
  "U_MESSAGE_PARSE_ERROR", (const char*)4, "i:6;",
  "U_MISMATCHED_SEGMENT_DELIMITERS", (const char*)8, "i:65543;",
  "U_MISPLACED_ANCHOR_START", (const char*)8, "i:65544;",
  "U_MISPLACED_COMPOUND_FILTER", (const char*)8, "i:65558;",
  "U_MISPLACED_CURSOR_OFFSET", (const char*)8, "i:65545;",
  "U_MISPLACED_QUANTIFIER", (const char*)8, "i:65546;",
  "U_MISSING_OPERATOR", (const char*)8, "i:65547;",
  "U_MISSING_RESOURCE_ERROR", (const char*)4, "i:2;",
  "U_MISSING_SEGMENT_CLOSE", (const char*)8, "i:65548;",
  "U_MULTIPLE_ANTE_CONTEXTS", (const char*)8, "i:65549;",
  "U_MULTIPLE_COMPOUND_FILTERS", (const char*)8, "i:65559;",
  "U_MULTIPLE_CURSORS", (const char*)8, "i:65550;",
  "U_MULTIPLE_DECIMAL_SEPARATORS", (const char*)8, "i:65793;",
  "U_MULTIPLE_DECIMAL_SEPERATORS", (const char*)8, "i:65793;",
  "U_MULTIPLE_EXPONENTIAL_SYMBOLS", (const char*)8, "i:65794;",
  "U_MULTIPLE_PAD_SPECIFIERS", (const char*)8, "i:65798;",
  "U_MULTIPLE_PERCENT_SYMBOLS", (const char*)8, "i:65796;",
  "U_MULTIPLE_PERMILL_SYMBOLS", (const char*)8, "i:65797;",
  "U_MULTIPLE_POST_CONTEXTS", (const char*)8, "i:65551;",
  "U_NO_SPACE_AVAILABLE", (const char*)5, "i:20;",
  "U_NO_WRITE_PERMISSION", (const char*)5, "i:30;",
  "U_PARSE_ERROR", (const char*)4, "i:9;",
  "U_PARSE_ERROR_LIMIT", (const char*)8, "i:65571;",
  "U_PARSE_ERROR_START", (const char*)8, "i:65536;",
  "U_PATTERN_SYNTAX_ERROR", (const char*)8, "i:65799;",
  "U_PRIMARY_TOO_LONG_ERROR", (const char*)5, "i:22;",
  "U_REGEX_BAD_ESCAPE_SEQUENCE", (const char*)8, "i:66307;",
  "U_REGEX_BAD_INTERVAL", (const char*)8, "i:66312;",
  "U_REGEX_ERROR_LIMIT", (const char*)8, "i:66318;",
  "U_REGEX_ERROR_START", (const char*)8, "i:66304;",
  "U_REGEX_INTERNAL_ERROR", (const char*)8, "i:66304;",
  "U_REGEX_INVALID_BACK_REF", (const char*)8, "i:66314;",
  "U_REGEX_INVALID_FLAG", (const char*)8, "i:66315;",
  "U_REGEX_INVALID_STATE", (const char*)8, "i:66306;",
  "U_REGEX_LOOK_BEHIND_LIMIT", (const char*)8, "i:66316;",
  "U_REGEX_MAX_LT_MIN", (const char*)8, "i:66313;",
  "U_REGEX_MISMATCHED_PAREN", (const char*)8, "i:66310;",
  "U_REGEX_NUMBER_TOO_BIG", (const char*)8, "i:66311;",
  "U_REGEX_PROPERTY_SYNTAX", (const char*)8, "i:66308;",
  "U_REGEX_RULE_SYNTAX", (const char*)8, "i:66305;",
  "U_REGEX_SET_CONTAINS_STRING", (const char*)8, "i:66317;",
  "U_REGEX_UNIMPLEMENTED", (const char*)8, "i:66309;",
  "U_RESOURCE_TYPE_MISMATCH", (const char*)5, "i:17;",
  "U_RULE_MASK_ERROR", (const char*)8, "i:65557;",
  "U_SAFECLONE_ALLOCATED_WARNING", (const char*)7, "i:-126;",
  "U_SORT_KEY_TOO_SHORT_WARNING", (const char*)7, "i:-123;",
  "U_STANDARD_ERROR_LIMIT", (const char*)5, "i:31;",
  "U_STATE_OLD_WARNING", (const char*)7, "i:-125;",
  "U_STATE_TOO_OLD_ERROR", (const char*)5, "i:23;",
  "U_STRINGPREP_CHECK_BIDI_ERROR", (const char*)8, "i:66562;",
  "U_STRINGPREP_PROHIBITED_ERROR", (const char*)8, "i:66560;",
  "U_STRINGPREP_UNASSIGNED_ERROR", (const char*)8, "i:66561;",
  "U_STRING_NOT_TERMINATED_WARNING", (const char*)7, "i:-124;",
  "U_TOO_MANY_ALIASES_ERROR", (const char*)5, "i:24;",
  "U_TRAILING_BACKSLASH", (const char*)8, "i:65552;",
  "U_TRUNCATED_CHAR_FOUND", (const char*)5, "i:11;",
  "U_UNCLOSED_SEGMENT", (const char*)8, "i:65563;",
  "U_UNDEFINED_SEGMENT_REFERENCE", (const char*)8, "i:65553;",
  "U_UNDEFINED_VARIABLE", (const char*)8, "i:65554;",
  "U_UNEXPECTED_TOKEN", (const char*)8, "i:65792;",
  "U_UNMATCHED_BRACES", (const char*)8, "i:65801;",
  "U_UNQUOTED_SPECIAL", (const char*)8, "i:65555;",
  "U_UNSUPPORTED_ATTRIBUTE", (const char*)8, "i:65803;",
  "U_UNSUPPORTED_ERROR", (const char*)5, "i:16;",
  "U_UNSUPPORTED_ESCAPE_SEQUENCE", (const char*)5, "i:19;",
  "U_UNSUPPORTED_PROPERTY", (const char*)8, "i:65802;",
  "U_UNTERMINATED_QUOTE", (const char*)8, "i:65556;",
  "U_USELESS_COLLATOR_ERROR", (const char*)5, "i:29;",
  "U_USING_DEFAULT_WARNING", (const char*)7, "i:-127;",
  "U_USING_FALLBACK_WARNING", (const char*)7, "i:-128;",
  "U_VARIABLE_RANGE_EXHAUSTED", (const char*)8, "i:65565;",
  "U_VARIABLE_RANGE_OVERLAP", (const char*)8, "i:65566;",
  "U_ZERO_ERROR", (const char*)4, "i:0;",
  "WNOHANG", (const char*)4, "i:1;",
  "WSDL_CACHE_BOTH", (const char*)4, "i:3;",
  "WSDL_CACHE_DISK", (const char*)4, "i:1;",
  "WSDL_CACHE_MEMORY", (const char*)4, "i:2;",
  "WSDL_CACHE_NONE", (const char*)4, "i:0;",
  "WUNTRACED", (const char*)4, "i:2;",
  "X509_PURPOSE_ANY", (const char*)4, "i:7;",
  "X509_PURPOSE_CRL_SIGN", (const char*)4, "i:6;",
  "X509_PURPOSE_NS_SSL_SERVER", (const char*)4, "i:3;",
  "X509_PURPOSE_SMIME_ENCRYPT", (const char*)4, "i:5;",
  "X509_PURPOSE_SMIME_SIGN", (const char*)4, "i:4;",
  "X509_PURPOSE_SSL_CLIENT", (const char*)4, "i:1;",
  "X509_PURPOSE_SSL_SERVER", (const char*)4, "i:2;",
  "XML_ATTRIBUTE_CDATA", (const char*)4, "i:1;",
  "XML_ATTRIBUTE_DECL_NODE", (const char*)5, "i:16;",
  "XML_ATTRIBUTE_ENTITY", (const char*)4, "i:6;",
  "XML_ATTRIBUTE_ENUMERATION", (const char*)4, "i:9;",
  "XML_ATTRIBUTE_ID", (const char*)4, "i:2;",
  "XML_ATTRIBUTE_IDREF", (const char*)4, "i:3;",
  "XML_ATTRIBUTE_IDREFS", (const char*)4, "i:4;",
  "XML_ATTRIBUTE_NMTOKEN", (const char*)4, "i:7;",
  "XML_ATTRIBUTE_NMTOKENS", (const char*)4, "i:8;",
  "XML_ATTRIBUTE_NODE", (const char*)4, "i:2;",
  "XML_ATTRIBUTE_NOTATION", (const char*)5, "i:10;",
  "XML_CDATA_SECTION_NODE", (const char*)4, "i:4;",
  "XML_COMMENT_NODE", (const char*)4, "i:8;",
  "XML_DOCUMENT_FRAG_NODE", (const char*)5, "i:11;",
  "XML_DOCUMENT_NODE", (const char*)4, "i:9;",
  "XML_DOCUMENT_TYPE_NODE", (const char*)5, "i:10;",
  "XML_DTD_NODE", (const char*)5, "i:14;",
  "XML_ELEMENT_DECL_NODE", (const char*)5, "i:15;",
  "XML_ELEMENT_NODE", (const char*)4, "i:1;",
  "XML_ENTITY_DECL_NODE", (const char*)5, "i:17;",
  "XML_ENTITY_NODE", (const char*)4, "i:6;",
  "XML_ENTITY_REF_NODE", (const char*)4, "i:5;",
  "XML_ERROR_ASYNC_ENTITY", (const char*)5, "i:13;",
  "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", (const char*)5, "i:16;",
  "XML_ERROR_BAD_CHAR_REF", (const char*)5, "i:14;",
  "XML_ERROR_BINARY_ENTITY_REF", (const char*)5, "i:15;",
  "XML_ERROR_DUPLICATE_ATTRIBUTE", (const char*)4, "i:8;",
  "XML_ERROR_EXTERNAL_ENTITY_HANDLING", (const char*)5, "i:21;",
  "XML_ERROR_INCORRECT_ENCODING", (const char*)5, "i:19;",
  "XML_ERROR_INVALID_TOKEN", (const char*)4, "i:4;",
  "XML_ERROR_JUNK_AFTER_DOC_ELEMENT", (const char*)4, "i:9;",
  "XML_ERROR_MISPLACED_XML_PI", (const char*)5, "i:17;",
  "XML_ERROR_NONE", (const char*)4, "i:0;",
  "XML_ERROR_NO_ELEMENTS", (const char*)4, "i:3;",
  "XML_ERROR_NO_MEMORY", (const char*)4, "i:1;",
  "XML_ERROR_PARAM_ENTITY_REF", (const char*)5, "i:10;",
  "XML_ERROR_PARTIAL_CHAR", (const char*)4, "i:6;",
  "XML_ERROR_RECURSIVE_ENTITY_REF", (const char*)5, "i:12;",
  "XML_ERROR_SYNTAX", (const char*)4, "i:2;",
  "XML_ERROR_TAG_MISMATCH", (const char*)4, "i:7;",
  "XML_ERROR_UNCLOSED_CDATA_SECTION", (const char*)5, "i:20;",
  "XML_ERROR_UNCLOSED_TOKEN", (const char*)4, "i:5;",
  "XML_ERROR_UNDEFINED_ENTITY", (const char*)5, "i:11;",
  "XML_ERROR_UNKNOWN_ENCODING", (const char*)5, "i:18;",
  "XML_HTML_DOCUMENT_NODE", (const char*)5, "i:13;",
  "XML_LOCAL_NAMESPACE", (const char*)5, "i:18;",
  "XML_NAMESPACE_DECL_NODE", (const char*)5, "i:18;",
  "XML_NOTATION_NODE", (const char*)5, "i:12;",
  "XML_OPTION_CASE_FOLDING", (const char*)4, "i:1;",
  "XML_OPTION_SKIP_TAGSTART", (const char*)4, "i:3;",
  "XML_OPTION_SKIP_WHITE", (const char*)4, "i:4;",
  "XML_OPTION_TARGET_ENCODING", (const char*)4, "i:2;",
  "XML_PI_NODE", (const char*)4, "i:7;",
  "XML_SAX_IMPL", (const char*)12, "s:5:\"expat\";",
  "XML_TEXT_NODE", (const char*)4, "i:3;",
  "XSD_1999_NAMESPACE", (const char*)40, "s:32:\"http://www.w3.org/1999/XMLSchema\";",
  "XSD_1999_TIMEINSTANT", (const char*)6, "i:401;",
  "XSD_ANYTYPE", (const char*)6, "i:145;",
  "XSD_ANYURI", (const char*)6, "i:117;",
  "XSD_ANYXML", (const char*)6, "i:147;",
  "XSD_BASE64BINARY", (const char*)6, "i:116;",
  "XSD_BOOLEAN", (const char*)6, "i:102;",
  "XSD_BYTE", (const char*)6, "i:137;",
  "XSD_DATE", (const char*)6, "i:109;",
  "XSD_DATETIME", (const char*)6, "i:107;",
  "XSD_DECIMAL", (const char*)6, "i:103;",
  "XSD_DOUBLE", (const char*)6, "i:105;",
  "XSD_DURATION", (const char*)6, "i:106;",
  "XSD_ENTITIES", (const char*)6, "i:130;",
  "XSD_ENTITY", (const char*)6, "i:129;",
  "XSD_FLOAT", (const char*)6, "i:104;",
  "XSD_GDAY", (const char*)6, "i:113;",
  "XSD_GMONTH", (const char*)6, "i:114;",
  "XSD_GMONTHDAY", (const char*)6, "i:112;",
  "XSD_GYEAR", (const char*)6, "i:111;",
  "XSD_GYEARMONTH", (const char*)6, "i:110;",
  "XSD_HEXBINARY", (const char*)6, "i:115;",
  "XSD_ID", (const char*)6, "i:126;",
  "XSD_IDREF", (const char*)6, "i:127;",
  "XSD_IDREFS", (const char*)6, "i:128;",
  "XSD_INT", (const char*)6, "i:135;",
  "XSD_INTEGER", (const char*)6, "i:131;",
  "XSD_LANGUAGE", (const char*)6, "i:122;",
  "XSD_LONG", (const char*)6, "i:134;",
  "XSD_NAME", (const char*)6, "i:124;",
  "XSD_NAMESPACE", (const char*)40, "s:32:\"http://www.w3.org/2001/XMLSchema\";",
  "XSD_NCNAME", (const char*)6, "i:125;",
  "XSD_NEGATIVEINTEGER", (const char*)6, "i:133;",
  "XSD_NMTOKEN", (const char*)6, "i:123;",
  "XSD_NMTOKENS", (const char*)6, "i:144;",
  "XSD_NONNEGATIVEINTEGER", (const char*)6, "i:138;",
  "XSD_NONPOSITIVEINTEGER", (const char*)6, "i:132;",
  "XSD_NORMALIZEDSTRING", (const char*)6, "i:120;",
  "XSD_NOTATION", (const char*)6, "i:119;",
  "XSD_POSITIVEINTEGER", (const char*)6, "i:143;",
  "XSD_QNAME", (const char*)6, "i:118;",
  "XSD_SHORT", (const char*)6, "i:136;",
  "XSD_STRING", (const char*)6, "i:101;",
  "XSD_TIME", (const char*)6, "i:108;",
  "XSD_TOKEN", (const char*)6, "i:121;",
  "XSD_UNSIGNEDBYTE", (const char*)6, "i:142;",
  "XSD_UNSIGNEDINT", (const char*)6, "i:140;",
  "XSD_UNSIGNEDLONG", (const char*)6, "i:139;",
  "XSD_UNSIGNEDSHORT", (const char*)6, "i:141;",
  "YESEXPR", (const char*)9, "i:327680;",
  "ZEND_THREAD_SAFE", (const char*)4, "b:0;",
  "UREGEX_CASE_INSENSITIVE", (const char *)&k_UREGEX_CASE_INSENSITIVE, (const char *)0xc /* KindOfInt64 */, 
  "UREGEX_COMMENTS", (const char *)&k_UREGEX_COMMENTS, (const char *)0xc /* KindOfInt64 */, 
  "UREGEX_DOTALL", (const char *)&k_UREGEX_DOTALL, (const char *)0xc /* KindOfInt64 */, 
  "UREGEX_MULTILINE", (const char *)&k_UREGEX_MULTILINE, (const char *)0xc /* KindOfInt64 */, 
  "UREGEX_UWORD", (const char *)&k_UREGEX_UWORD, (const char *)0xc /* KindOfInt64 */, 
  "UREGEX_OFFSET_CAPTURE", (const char *)&k_UREGEX_OFFSET_CAPTURE, (const char *)0xc /* KindOfInt64 */, 
  "JSON_HEX_TAG", (const char *)&k_JSON_HEX_TAG, (const char *)0xc /* KindOfInt64 */, 
  "JSON_HEX_AMP", (const char *)&k_JSON_HEX_AMP, (const char *)0xc /* KindOfInt64 */, 
  "JSON_HEX_APOS", (const char *)&k_JSON_HEX_APOS, (const char *)0xc /* KindOfInt64 */, 
  "JSON_HEX_QUOT", (const char *)&k_JSON_HEX_QUOT, (const char *)0xc /* KindOfInt64 */, 
  "JSON_FORCE_OBJECT", (const char *)&k_JSON_FORCE_OBJECT, (const char *)0xc /* KindOfInt64 */, 
  "JSON_NUMERIC_CHECK", (const char *)&k_JSON_NUMERIC_CHECK, (const char *)0xc /* KindOfInt64 */, 
  "JSON_UNESCAPED_SLASHES", (const char *)&k_JSON_UNESCAPED_SLASHES, (const char *)0xc /* KindOfInt64 */, 
  "JSON_PRETTY_PRINT", (const char *)&k_JSON_PRETTY_PRINT, (const char *)0xc /* KindOfInt64 */, 
  "JSON_FB_LOOSE", (const char *)&k_JSON_FB_LOOSE, (const char *)0xc /* KindOfInt64 */, 
  "JSON_FB_UNLIMITED", (const char *)&k_JSON_FB_UNLIMITED, (const char *)0xc /* KindOfInt64 */, 
  "JSON_FB_EXTRA_ESCAPES", (const char *)&k_JSON_FB_EXTRA_ESCAPES, (const char *)0xc /* KindOfInt64 */, 
  "FB_UNSERIALIZE_NONSTRING_VALUE", (const char *)&k_FB_UNSERIALIZE_NONSTRING_VALUE, (const char *)0xc /* KindOfInt64 */, 
  "FB_UNSERIALIZE_UNEXPECTED_END", (const char *)&k_FB_UNSERIALIZE_UNEXPECTED_END, (const char *)0xc /* KindOfInt64 */, 
  "FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE", (const char *)&k_FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE, (const char *)0xc /* KindOfInt64 */, 
  "FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE", (const char *)&k_FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_NO_BUILTINS", (const char *)&k_XHPROF_FLAGS_NO_BUILTINS, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_CPU", (const char *)&k_XHPROF_FLAGS_CPU, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_MEMORY", (const char *)&k_XHPROF_FLAGS_MEMORY, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_VTSC", (const char *)&k_XHPROF_FLAGS_VTSC, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_TRACE", (const char *)&k_XHPROF_FLAGS_TRACE, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_MEASURE_XHPROF_DISABLE", (const char *)&k_XHPROF_FLAGS_MEASURE_XHPROF_DISABLE, (const char *)0xc /* KindOfInt64 */, 
  "XHPROF_FLAGS_MALLOC", (const char *)&k_XHPROF_FLAGS_MALLOC, (const char *)0xc /* KindOfInt64 */, 
  "ASYNC_OP_INVALID", (const char *)&k_ASYNC_OP_INVALID, (const char *)0xc /* KindOfInt64 */, 
  "ASYNC_OP_UNSET", (const char *)&k_ASYNC_OP_UNSET, (const char *)0xc /* KindOfInt64 */, 
  "ASYNC_OP_CONNECT", (const char *)&k_ASYNC_OP_CONNECT, (const char *)0xc /* KindOfInt64 */, 
  "ASYNC_OP_QUERY", (const char *)&k_ASYNC_OP_QUERY, (const char *)0xc /* KindOfInt64 */, 
  "ASYNC_OP_FETCH_ROW", (const char *)&k_ASYNC_OP_FETCH_ROW, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_ASSOC", (const char *)&k_SQLITE3_ASSOC, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_NUM", (const char *)&k_SQLITE3_NUM, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_BOTH", (const char *)&k_SQLITE3_BOTH, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_INTEGER", (const char *)&k_SQLITE3_INTEGER, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_FLOAT", (const char *)&k_SQLITE3_FLOAT, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_TEXT", (const char *)&k_SQLITE3_TEXT, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_BLOB", (const char *)&k_SQLITE3_BLOB, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_NULL", (const char *)&k_SQLITE3_NULL, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_OPEN_READONLY", (const char *)&k_SQLITE3_OPEN_READONLY, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_OPEN_READWRITE", (const char *)&k_SQLITE3_OPEN_READWRITE, (const char *)0xc /* KindOfInt64 */, 
  "SQLITE3_OPEN_CREATE", (const char *)&k_SQLITE3_OPEN_CREATE, (const char *)0xc /* KindOfInt64 */, 
  "OPENSSL_RAW_DATA", (const char *)&k_OPENSSL_RAW_DATA, (const char *)0xc /* KindOfInt64 */, 
  "OPENSSL_ZERO_PADDING", (const char *)&k_OPENSSL_ZERO_PADDING, (const char *)0xc /* KindOfInt64 */, 
  "INF", (const char *)&k_INF, (const char *)0xd /* KindOfDouble */, 
  "NAN", (const char *)&k_NAN, (const char *)0xd /* KindOfDouble */, 
  "PHP_ROUND_HALF_UP", (const char *)&k_PHP_ROUND_HALF_UP, (const char *)0xc /* KindOfInt64 */, 
  "PHP_ROUND_HALF_DOWN", (const char *)&k_PHP_ROUND_HALF_DOWN, (const char *)0xc /* KindOfInt64 */, 
  "PHP_ROUND_HALF_EVEN", (const char *)&k_PHP_ROUND_HALF_EVEN, (const char *)0xc /* KindOfInt64 */, 
  "PHP_ROUND_HALF_ODD", (const char *)&k_PHP_ROUND_HALF_ODD, (const char *)0xc /* KindOfInt64 */, 
  "STDIN", (const char *)&BuiltinFiles::GetSTDIN, nullptr,
  "STDOUT", (const char *)&BuiltinFiles::GetSTDOUT, nullptr,
  "STDERR", (const char *)&BuiltinFiles::GetSTDERR, nullptr,
  "PAGELET_NOT_READY", (const char *)&k_PAGELET_NOT_READY, (const char *)0xc /* KindOfInt64 */, 
  "PAGELET_READY", (const char *)&k_PAGELET_READY, (const char *)0xc /* KindOfInt64 */, 
  "PAGELET_DONE", (const char *)&k_PAGELET_DONE, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_DEFAULT", (const char *)&k_UCOL_DEFAULT, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_PRIMARY", (const char *)&k_UCOL_PRIMARY, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_SECONDARY", (const char *)&k_UCOL_SECONDARY, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_TERTIARY", (const char *)&k_UCOL_TERTIARY, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_DEFAULT_STRENGTH", (const char *)&k_UCOL_DEFAULT_STRENGTH, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_QUATERNARY", (const char *)&k_UCOL_QUATERNARY, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_IDENTICAL", (const char *)&k_UCOL_IDENTICAL, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_OFF", (const char *)&k_UCOL_OFF, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_ON", (const char *)&k_UCOL_ON, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_SHIFTED", (const char *)&k_UCOL_SHIFTED, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_NON_IGNORABLE", (const char *)&k_UCOL_NON_IGNORABLE, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_LOWER_FIRST", (const char *)&k_UCOL_LOWER_FIRST, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_UPPER_FIRST", (const char *)&k_UCOL_UPPER_FIRST, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_FRENCH_COLLATION", (const char *)&k_UCOL_FRENCH_COLLATION, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_ALTERNATE_HANDLING", (const char *)&k_UCOL_ALTERNATE_HANDLING, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_CASE_FIRST", (const char *)&k_UCOL_CASE_FIRST, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_CASE_LEVEL", (const char *)&k_UCOL_CASE_LEVEL, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_NORMALIZATION_MODE", (const char *)&k_UCOL_NORMALIZATION_MODE, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_STRENGTH", (const char *)&k_UCOL_STRENGTH, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_HIRAGANA_QUATERNARY_MODE", (const char *)&k_UCOL_HIRAGANA_QUATERNARY_MODE, (const char *)0xc /* KindOfInt64 */, 
  "UCOL_NUMERIC_COLLATION", (const char *)&k_UCOL_NUMERIC_COLLATION, (const char *)0xc /* KindOfInt64 */, 
  "CURLINFO_LOCAL_PORT", (const char *)&k_CURLINFO_LOCAL_PORT, (const char *)0xc /* KindOfInt64 */, 
  "CURLOPT_TIMEOUT_MS", (const char *)&k_CURLOPT_TIMEOUT_MS, (const char *)0xc /* KindOfInt64 */, 
  "CURLOPT_CONNECTTIMEOUT_MS", (const char *)&k_CURLOPT_CONNECTTIMEOUT_MS, (const char *)0xc /* KindOfInt64 */, 
  "SID", (const char *)((offsetof(SystemGlobals, k_SID) - offsetof(SystemGlobals, stgv_Variant)) / sizeof(Variant)), (const char *)1,
  NULL, // End of constants
  NULL,
  (const char *)0x10006000, "PDO", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.pdo.php )\n *\n * Represents a connection between PHP and a database server.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.construct.php )\n *\n *\n * @dsn        string\n * @username   string\n * @password   string\n * @options    map\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "dsn", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "username", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "password", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "prepare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.prepare.php )\n *\n * Prepares an SQL statement to be executed by the PDOStatement::execute()\n * method. The SQL statement can contain zero or more named (:name) or\n * question mark (\?) parameter markers for which real values will be\n * substituted when the statement is executed. You cannot use both named\n * and question mark parameter markers within the same SQL statement; pick\n * one or the other parameter style. Use these parameters to bind any\n * user-input, do not include the user-input directly in the query.\n *\n * You must include a unique parameter marker for each value you wish to\n * pass in to the statement when you call PDOStatement::execute(). You\n * cannot use a named parameter marker of the same name twice in a prepared\n * statement. You cannot bind multiple values to a single named parameter\n * in, for example, the IN() clause of an SQL statement.\n *\n * Calling PDO::prepare() and PDOStatement::execute() for statements that\n * will be issued multiple times with different parameter values optimizes\n * the performance of your application by allowing the driver to negotiate\n * client and/or server side caching of the query plan and meta\n * information, and helps to prevent SQL injection attacks by eliminating\n * the need to manually quote the parameters.\n *\n * PDO will emulate prepared statements/bound parameters for drivers that\n * do not natively support them, and can also rewrite named or question\n * mark style parameter markers to something more appropriate, if the\n * driver supports one style but not the other.\n *\n * @statement  string  This must be a valid SQL statement for the target\n *                     database server.\n * @options    map     This array holds one or more key=>value pairs to set\n *                     attribute values for the PDOStatement object that\n *                     this method returns. You would most commonly use\n *                     this to set the PDO::ATTR_CURSOR value to\n *                     PDO::CURSOR_SCROLL to request a scrollable cursor.\n *                     Some drivers have driver specific options that may\n *                     be set at prepare-time.\n *\n * @return     mixed   If the database server successfully prepares the\n *                     statement, PDO::prepare() returns a PDOStatement\n *                     object. If the database server cannot successfully\n *                     prepare the statement, PDO::prepare() returns FALSE\n *                     or emits PDOException (depending on error handling).\n *\n *                     Emulated prepared statements does not communicate\n *                     with the database server so PDO::prepare() does not\n *                     check the statement.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "statement", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "begintransaction", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.begintransaction.php )\n *\n * Turns off autocommit mode. While autocommit mode is turned off, changes\n * made to the database via the PDO object instance are not committed until\n * you end the transaction by calling PDO::commit(). Calling\n * PDO::rollBack() will roll back all changes to the database and return\n * the connection to autocommit mode.\n *\n * Some databases, including MySQL, automatically issue an implicit COMMIT\n * when a database definition language (DDL) statement such as DROP TABLE\n * or CREATE TABLE is issued within a transaction. The implicit COMMIT will\n * prevent you from rolling back any other changes within the transaction\n * boundary.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "commit", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.commit.php )\n *\n * Commits a transaction, returning the database connection to autocommit\n * mode until the next call to PDO::beginTransaction() starts a new\n * transaction.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rollback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.rollback.php )\n *\n * Rolls back the current transaction, as initiated by\n * PDO::beginTransaction(). It is an error to call this method if no\n * transaction is active.\n *\n * If the database was set to autocommit mode, this function will restore\n * autocommit mode after it has rolled back the transaction.\n *\n * Some databases, including MySQL, automatically issue an implicit COMMIT\n * when a database definition language (DDL) statement such as DROP TABLE\n * or CREATE TABLE is issued within a transaction. The implicit COMMIT will\n * prevent you from rolling back any other changes within the transaction\n * boundary.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setattribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.setattribute.php )\n *\n * Sets an attribute on the database handle. Some of the available generic\n * attributes are listed below; some drivers may make use of additional\n * driver specific attributes.\n *\n * PDO::ATTR_CASE: Force column names to a specific case.\n *\n * PDO::CASE_LOWER: Force column names to lower case.\n *\n * PDO::CASE_NATURAL: Leave column names as returned by the database\n * driver.\n *\n * PDO::CASE_UPPER: Force column names to upper case. PDO::ATTR_ERRMODE:\n * Error reporting. PDO::ERRMODE_SILENT: Just set error codes.\n * PDO::ERRMODE_WARNING: Raise E_WARNING. PDO::ERRMODE_EXCEPTION: Throw\n * exceptions. PDO::ATTR_ORACLE_NULLS (available with all drivers, not just\n * Oracle): Conversion of NULL and empty strings. PDO::NULL_NATURAL: No\n * conversion. PDO::NULL_EMPTY_STRING: Empty string is converted to NULL.\n * PDO::NULL_TO_STRING: NULL is converted to an empty string.\n * PDO::ATTR_STRINGIFY_FETCHES: Convert numeric values to strings when\n * fetching. Requires bool. PDO::ATTR_STATEMENT_CLASS: Set user-supplied\n * statement class derived from PDOStatement. Cannot be used with\n * persistent PDO instances. Requires array(string classname, array(mixed\n * constructor_args)). PDO::ATTR_TIMEOUT: Specifies the timeout duration in\n * seconds. Not all drivers support this option, and it's meaning may\n * differ from driver to driver. For example, sqlite will wait for up to\n * this time value before giving up on obtaining an writable lock, but\n * other drivers may interpret this as a connect or a read timeout\n * interval. Requires int. PDO::ATTR_AUTOCOMMIT (available in OCI, Firebird\n * and MySQL): Whether to autocommit every single statement.\n * PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (available in MySQL): Use buffered\n * queries.\n *\n * @attribute  int\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "attribute", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getattribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.getattribute.php )\n *\n * This function returns the value of a database connection attribute. To\n * retrieve PDOStatement attributes, refer to PDOStatement::getAttribute().\n *\n * Note that some database/driver combinations may not support all of the\n * database connection attributes.\n *\n * @attribute  int     One of the PDO::ATTR_* constants. The constants that\n *                     apply to database connections are as follows:\n *                     PDO::ATTR_AUTOCOMMIT PDO::ATTR_CASE\n *                     PDO::ATTR_CLIENT_VERSION PDO::ATTR_CONNECTION_STATUS\n *                     PDO::ATTR_DRIVER_NAME PDO::ATTR_ERRMODE\n *                     PDO::ATTR_ORACLE_NULLS PDO::ATTR_PERSISTENT\n *                     PDO::ATTR_PREFETCH PDO::ATTR_SERVER_INFO\n *                     PDO::ATTR_SERVER_VERSION PDO::ATTR_TIMEOUT\n *\n * @return     mixed   A successful call returns the value of the requested\n *                     PDO attribute. An unsuccessful call returns null.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "attribute", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.exec.php )\n *\n * PDO::exec() executes an SQL statement in a single function call,\n * returning the number of rows affected by the statement.\n *\n * PDO::exec() does not return results from a SELECT statement. For a\n * SELECT statement that you only need to issue once during your program,\n * consider issuing PDO::query(). For a statement that you need to issue\n * multiple times, prepare a PDOStatement object with PDO::prepare() and\n * issue the statement with PDOStatement::execute().\n *\n * @query      string  The SQL statement to prepare and execute.\n *\n *                     Data inside the query should be properly escaped.\n *\n * @return     mixed   PDO::exec() returns the number of rows that were\n *                     modified or deleted by the SQL statement you issued.\n *                     If no rows were affected, PDO::exec() returns 0.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n *\n *                     The following example incorrectly relies on the\n *                     return value of PDO::exec(), wherein a statement\n *                     that affected 0 rows results in a call to die():\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "query", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lastinsertid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.lastinsertid.php )\n *\n * Returns the ID of the last inserted row, or the last value from a\n * sequence object, depending on the underlying driver. For example,\n * PDO_PGSQL() requires you to specify the name of a sequence object for\n * the name parameter.\n *\n * This method may not return a meaningful or consistent result across\n * different PDO drivers, because the underlying database may not even\n * support the notion of auto-increment fields or sequences.\n *\n * @seqname    string  Name of the sequence object from which the ID should\n *                     be returned.\n *\n * @return     mixed   If a sequence name was not specified for the name\n *                     parameter, PDO::lastInsertId() returns a string\n *                     representing the row ID of the last row that was\n *                     inserted into the database.\n *\n *                     If a sequence name was specified for the name\n *                     parameter, PDO::lastInsertId() returns a string\n *                     representing the last value retrieved from the\n *                     specified sequence object.\n *\n *                     If the PDO driver does not support this capability,\n *                     PDO::lastInsertId() triggers an IM001 SQLSTATE.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "seqname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "errorcode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.errorcode.php )\n *\n *\n * @return     mixed   Returns an SQLSTATE, a five characters alphanumeric\n *                     identifier defined in the ANSI SQL-92 standard.\n *                     Briefly, an SQLSTATE consists of a two characters\n *                     class value followed by a three characters subclass\n *                     value. A class value of 01 indicates a warning and\n *                     is accompanied by a return code of\n *                     SQL_SUCCESS_WITH_INFO. Class values other than '01',\n *                     except for the class 'IM', indicate an error. The\n *                     class 'IM' is specific to warnings and errors that\n *                     derive from the implementation of PDO (or perhaps\n *                     ODBC, if you're using the ODBC driver) itself. The\n *                     subclass value '000' in any class indicates that\n *                     there is no subclass for that SQLSTATE.\n *\n *                     PDO::errorCode() only retrieves error codes for\n *                     operations performed directly on the database\n *                     handle. If you create a PDOStatement object through\n *                     PDO::prepare() or PDO::query() and invoke an error\n *                     on the statement handle, PDO::errorCode() will not\n *                     reflect that error. You must call\n *                     PDOStatement::errorCode() to return the error code\n *                     for an operation performed on a particular statement\n *                     handle.\n *\n *                     Returns NULL if no operation has been run on the\n *                     database handle.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "errorinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.errorinfo.php )\n *\n *\n * @return     vector  PDO::errorInfo() returns an array of error\n *                     information about the last operation performed by\n *                     this database handle. The array consists of the\n *                     following fields: Element Information 0 SQLSTATE\n *                     error code (a five characters alphanumeric\n *                     identifier defined in the ANSI SQL standard). 1\n *                     Driver-specific error code. 2 Driver-specific error\n *                     message.\n *\n *                     If the SQLSTATE error code is not set or there is\n *                     no driver-specific error, the elements following\n *                     element 0 will be set to NULL.\n *\n *                     PDO::errorInfo() only retrieves error information\n *                     for operations performed directly on the database\n *                     handle. If you create a PDOStatement object through\n *                     PDO::prepare() or PDO::query() and invoke an error\n *                     on the statement handle, PDO::errorInfo() will not\n *                     reflect the error from the statement handle. You\n *                     must call PDOStatement::errorInfo() to return the\n *                     error information for an operation performed on a\n *                     particular statement handle.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.query.php )\n *\n * PDO::query() executes an SQL statement in a single function call,\n * returning the result set (if any) returned by the statement as a\n * PDOStatement object.\n *\n * For a query that you need to issue multiple times, you will realize\n * better performance if you prepare a PDOStatement object using\n * PDO::prepare() and issue the statement with multiple calls to\n * PDOStatement::execute().\n *\n * If you do not fetch all of the data in a result set before issuing your\n * next call to PDO::query(), your call may fail. Call\n * PDOStatement::closeCursor() to release the database resources associated\n * with the PDOStatement object before issuing your next call to\n * PDO::query().\n *\n * Although this function is only documented as having a single parameter,\n * you may pass additional arguments to this function. They will be treated\n * as though you called PDOStatement::setFetchMode() on the resultant\n * statement object.\n *\n * @sql        string  The SQL statement to prepare and execute.\n *\n *                     Data inside the query should be properly escaped.\n *\n * @return     mixed   PDO::query() returns a PDOStatement object, or FALSE\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "quote", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.quote.php )\n *\n * PDO::quote() places quotes around the input string (if required) and\n * escapes special characters within the input string, using a quoting\n * style appropriate to the underlying driver.\n *\n * If you are using this function to build SQL statements, you are\n * strongly recommended to use PDO::prepare() to prepare SQL statements\n * with bound parameters instead of using PDO::quote() to interpolate user\n * input into an SQL statement. Prepared statements with bound parameters\n * are not only more portable, more convenient, immune to SQL injection,\n * but are often much faster to execute than interpolated queries, as both\n * the server and client side can cache a compiled form of the query.\n *\n * Not all PDO drivers implement this method (notably PDO_ODBC). Consider\n * using prepared statements instead.\n *\n * @str        string  The string to be quoted.\n * @paramtype  int     Provides a data type hint for drivers that have\n *                     alternate quoting styles.\n *\n * @return     mixed   Returns a quoted string that is theoretically safe\n *                     to pass into an SQL statement. Returns FALSE if the\n *                     driver does not support quoting in this way.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "paramtype", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "q_PDO$$PARAM_STR", (const char *)16, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__wakeup", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.wakeup.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__sleep", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.sleep.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getavailabledrivers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdo.getavailabledrivers.php )\n *\n * This function returns all currently available PDO drivers which can be\n * used in DSN parameter of PDO::__construct(). This is a static method.\n *\n * @return     vector  PDO::getAvailableDrivers() returns an array of PDO\n *                     driver names. If no drivers are available, it\n *                     returns an empty array.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "PARAM_BOOL", (const char*)&q_PDO$$PARAM_BOOL, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_NULL", (const char*)&q_PDO$$PARAM_NULL, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_INT", (const char*)&q_PDO$$PARAM_INT, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_STR", (const char*)&q_PDO$$PARAM_STR, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_LOB", (const char*)&q_PDO$$PARAM_LOB, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_STMT", (const char*)&q_PDO$$PARAM_STMT, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_INPUT_OUTPUT", (const char*)&q_PDO$$PARAM_INPUT_OUTPUT, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_ALLOC", (const char*)&q_PDO$$PARAM_EVT_ALLOC, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_FREE", (const char*)&q_PDO$$PARAM_EVT_FREE, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_EXEC_PRE", (const char*)&q_PDO$$PARAM_EVT_EXEC_PRE, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_EXEC_POST", (const char*)&q_PDO$$PARAM_EVT_EXEC_POST, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_FETCH_PRE", (const char*)&q_PDO$$PARAM_EVT_FETCH_PRE, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_FETCH_POST", (const char*)&q_PDO$$PARAM_EVT_FETCH_POST, (const char *)0xc /* KindOfInt64 */, 
  "PARAM_EVT_NORMALIZE", (const char*)&q_PDO$$PARAM_EVT_NORMALIZE, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_USE_DEFAULT", (const char*)&q_PDO$$FETCH_USE_DEFAULT, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_LAZY", (const char*)&q_PDO$$FETCH_LAZY, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_ASSOC", (const char*)&q_PDO$$FETCH_ASSOC, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_NUM", (const char*)&q_PDO$$FETCH_NUM, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_BOTH", (const char*)&q_PDO$$FETCH_BOTH, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_OBJ", (const char*)&q_PDO$$FETCH_OBJ, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_BOUND", (const char*)&q_PDO$$FETCH_BOUND, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_COLUMN", (const char*)&q_PDO$$FETCH_COLUMN, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_CLASS", (const char*)&q_PDO$$FETCH_CLASS, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_INTO", (const char*)&q_PDO$$FETCH_INTO, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_FUNC", (const char*)&q_PDO$$FETCH_FUNC, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_GROUP", (const char*)&q_PDO$$FETCH_GROUP, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_UNIQUE", (const char*)&q_PDO$$FETCH_UNIQUE, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_KEY_PAIR", (const char*)&q_PDO$$FETCH_KEY_PAIR, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_CLASSTYPE", (const char*)&q_PDO$$FETCH_CLASSTYPE, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_SERIALIZE", (const char*)&q_PDO$$FETCH_SERIALIZE, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_PROPS_LATE", (const char*)&q_PDO$$FETCH_PROPS_LATE, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_NAMED", (const char*)&q_PDO$$FETCH_NAMED, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_AUTOCOMMIT", (const char*)&q_PDO$$ATTR_AUTOCOMMIT, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_PREFETCH", (const char*)&q_PDO$$ATTR_PREFETCH, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_TIMEOUT", (const char*)&q_PDO$$ATTR_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_ERRMODE", (const char*)&q_PDO$$ATTR_ERRMODE, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_SERVER_VERSION", (const char*)&q_PDO$$ATTR_SERVER_VERSION, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_CLIENT_VERSION", (const char*)&q_PDO$$ATTR_CLIENT_VERSION, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_SERVER_INFO", (const char*)&q_PDO$$ATTR_SERVER_INFO, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_CONNECTION_STATUS", (const char*)&q_PDO$$ATTR_CONNECTION_STATUS, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_CASE", (const char*)&q_PDO$$ATTR_CASE, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_CURSOR_NAME", (const char*)&q_PDO$$ATTR_CURSOR_NAME, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_CURSOR", (const char*)&q_PDO$$ATTR_CURSOR, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_ORACLE_NULLS", (const char*)&q_PDO$$ATTR_ORACLE_NULLS, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_PERSISTENT", (const char*)&q_PDO$$ATTR_PERSISTENT, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_STATEMENT_CLASS", (const char*)&q_PDO$$ATTR_STATEMENT_CLASS, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_FETCH_TABLE_NAMES", (const char*)&q_PDO$$ATTR_FETCH_TABLE_NAMES, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_FETCH_CATALOG_NAMES", (const char*)&q_PDO$$ATTR_FETCH_CATALOG_NAMES, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_DRIVER_NAME", (const char*)&q_PDO$$ATTR_DRIVER_NAME, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_STRINGIFY_FETCHES", (const char*)&q_PDO$$ATTR_STRINGIFY_FETCHES, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_MAX_COLUMN_LEN", (const char*)&q_PDO$$ATTR_MAX_COLUMN_LEN, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_EMULATE_PREPARES", (const char*)&q_PDO$$ATTR_EMULATE_PREPARES, (const char *)0xc /* KindOfInt64 */, 
  "ATTR_DEFAULT_FETCH_MODE", (const char*)&q_PDO$$ATTR_DEFAULT_FETCH_MODE, (const char *)0xc /* KindOfInt64 */, 
  "ERRMODE_SILENT", (const char*)&q_PDO$$ERRMODE_SILENT, (const char *)0xc /* KindOfInt64 */, 
  "ERRMODE_WARNING", (const char*)&q_PDO$$ERRMODE_WARNING, (const char *)0xc /* KindOfInt64 */, 
  "ERRMODE_EXCEPTION", (const char*)&q_PDO$$ERRMODE_EXCEPTION, (const char *)0xc /* KindOfInt64 */, 
  "CASE_NATURAL", (const char*)&q_PDO$$CASE_NATURAL, (const char *)0xc /* KindOfInt64 */, 
  "CASE_LOWER", (const char*)&q_PDO$$CASE_LOWER, (const char *)0xc /* KindOfInt64 */, 
  "CASE_UPPER", (const char*)&q_PDO$$CASE_UPPER, (const char *)0xc /* KindOfInt64 */, 
  "NULL_NATURAL", (const char*)&q_PDO$$NULL_NATURAL, (const char *)0xc /* KindOfInt64 */, 
  "NULL_EMPTY_STRING", (const char*)&q_PDO$$NULL_EMPTY_STRING, (const char *)0xc /* KindOfInt64 */, 
  "NULL_TO_STRING", (const char*)&q_PDO$$NULL_TO_STRING, (const char *)0xc /* KindOfInt64 */, 
  "ERR_NONE", (const char*)&q_PDO$$ERR_NONE, (const char *)0x16 /* KindOfString */, 
  "FETCH_ORI_NEXT", (const char*)&q_PDO$$FETCH_ORI_NEXT, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_ORI_PRIOR", (const char*)&q_PDO$$FETCH_ORI_PRIOR, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_ORI_FIRST", (const char*)&q_PDO$$FETCH_ORI_FIRST, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_ORI_LAST", (const char*)&q_PDO$$FETCH_ORI_LAST, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_ORI_ABS", (const char*)&q_PDO$$FETCH_ORI_ABS, (const char *)0xc /* KindOfInt64 */, 
  "FETCH_ORI_REL", (const char*)&q_PDO$$FETCH_ORI_REL, (const char *)0xc /* KindOfInt64 */, 
  "CURSOR_FWDONLY", (const char*)&q_PDO$$CURSOR_FWDONLY, (const char *)0xc /* KindOfInt64 */, 
  "CURSOR_SCROLL", (const char*)&q_PDO$$CURSOR_SCROLL, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_USE_BUFFERED_QUERY", (const char*)&q_PDO$$MYSQL_ATTR_USE_BUFFERED_QUERY, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_LOCAL_INFILE", (const char*)&q_PDO$$MYSQL_ATTR_LOCAL_INFILE, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_MAX_BUFFER_SIZE", (const char*)&q_PDO$$MYSQL_ATTR_MAX_BUFFER_SIZE, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_INIT_COMMAND", (const char*)&q_PDO$$MYSQL_ATTR_INIT_COMMAND, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_READ_DEFAULT_FILE", (const char*)&q_PDO$$MYSQL_ATTR_READ_DEFAULT_FILE, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_READ_DEFAULT_GROUP", (const char*)&q_PDO$$MYSQL_ATTR_READ_DEFAULT_GROUP, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_COMPRESS", (const char*)&q_PDO$$MYSQL_ATTR_COMPRESS, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_DIRECT_QUERY", (const char*)&q_PDO$$MYSQL_ATTR_DIRECT_QUERY, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_FOUND_ROWS", (const char*)&q_PDO$$MYSQL_ATTR_FOUND_ROWS, (const char *)0xc /* KindOfInt64 */, 
  "MYSQL_ATTR_IGNORE_SPACE", (const char*)&q_PDO$$MYSQL_ATTR_IGNORE_SPACE, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "PDOStatement", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.pdostatement.php )\n *\n * Represents a prepared statement and, after the statement is executed,\n * an associated result set.\n *\n */",
  "iterator", NULL,
  (const char *)0x10006080, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "execute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.execute.php )\n *\n * Execute the prepared statement. If the prepared statement included\n * parameter markers, you must either: PDOStatement::bindParam() to bind\n * PHP variables to the parameter markers: bound variables pass their value\n * as input and receive the output value, if any, of their associated\n * parameter markers\n *\n * @params     map     An array of values with as many elements as there\n *                     are bound parameters in the SQL statement being\n *                     executed. All values are treated as PDO::PARAM_STR.\n *\n *                     You cannot bind multiple values to a single\n *                     parameter; for example, you cannot bind two values\n *                     to a single named parameter in an IN() clause.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "params", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetch.php )\n *\n * Fetches a row from a result set associated with a PDOStatement object.\n * The fetch_style parameter determines how PDO returns the row.\n *\n * @how        int     Controls how the next row will be returned to the\n *                     caller. This value must be one of the PDO::FETCH_*\n *                     constants, defaulting to PDO::FETCH_BOTH.\n *\n *                     PDO::FETCH_ASSOC: returns an array indexed by\n *                     column name as returned in your result set\n *\n *                     PDO::FETCH_BOTH (default): returns an array indexed\n *                     by both column name and 0-indexed column number as\n *                     returned in your result set\n *\n *                     PDO::FETCH_BOUND: returns TRUE and assigns the\n *                     values of the columns in your result set to the PHP\n *                     variables to which they were bound with the\n *                     PDOStatement::bindColumn() method\n *\n *                     PDO::FETCH_CLASS: returns a new instance of the\n *                     requested class, mapping the columns of the result\n *                     set to named properties in the class. If fetch_style\n *                     includes PDO::FETCH_CLASSTYPE (e.g. PDO::FETCH_CLASS\n *                     | PDO::FETCH_CLASSTYPE) then the name of the class\n *                     is determined from a value of the first column.\n *\n *                     PDO::FETCH_INTO: updates an existing instance of\n *                     the requested class, mapping the columns of the\n *                     result set to named properties in the class\n *\n *                     PDO::FETCH_LAZY: combines PDO::FETCH_BOTH and\n *                     PDO::FETCH_OBJ, creating the object variable names\n *                     as they are accessed\n *\n *                     PDO::FETCH_NUM: returns an array indexed by column\n *                     number as returned in your result set, starting at\n *                     column 0\n *\n *                     PDO::FETCH_OBJ: returns an anonymous object with\n *                     property names that correspond to the column names\n *                     returned in your result set\n * @orientation\n *             int     For a PDOStatement object representing a scrollable\n *                     cursor, this value determines which row will be\n *                     returned to the caller. This value must be one of\n *                     the PDO::FETCH_ORI_* constants, defaulting to\n *                     PDO::FETCH_ORI_NEXT. To request a scrollable cursor\n *                     for your PDOStatement object, you must set the\n *                     PDO::ATTR_CURSOR attribute to PDO::CURSOR_SCROLL\n *                     when you prepare the SQL statement with\n *                     PDO::prepare().\n * @offset     int     For a PDOStatement object representing a scrollable\n *                     cursor for which the cursor_orientation parameter is\n *                     set to PDO::FETCH_ORI_ABS, this value specifies the\n *                     absolute number of the row in the result set that\n *                     shall be fetched.\n *\n *                     For a PDOStatement object representing a scrollable\n *                     cursor for which the cursor_orientation parameter is\n *                     set to PDO::FETCH_ORI_REL, this value specifies the\n *                     row to fetch relative to the cursor position before\n *                     PDOStatement::fetch() was called.\n *\n * @return     mixed   The return value of this function on success depends\n *                     on the fetch type. In all cases, FALSE is returned\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "how", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "orientation", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "q_PDO$$FETCH_ORI_NEXT", (const char *)21, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetchobject", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetchobject.php )\n *\n * Fetches the next row and returns it as an object. This function is an\n * alternative to PDOStatement::fetch() with PDO::FETCH_CLASS or\n * PDO::FETCH_OBJ style.\n *\n * @class_name string  Name of the created class.\n * @ctor_args  mixed   Elements of this array are passed to the\n *                     constructor.\n *\n * @return     mixed   Returns an instance of the required class with\n *                     property names that correspond to the column names\n *                     or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "class_name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ctor_args", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetchcolumn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetchcolumn.php )\n *\n * Returns a single column from the next row of a result set or FALSE if\n * there are no more rows.\n *\n * @column_numner\n *             int     0-indexed number of the column you wish to retrieve\n *                     from the row. If no value is supplied,\n *                     PDOStatement::fetchColumn() fetches the first\n *                     column.\n *\n * @return     mixed   PDOStatement::fetchColumn() returns a single column\n *                     in the next row of a result set. Warning\n *\n *                     There is no way to return another column from the\n *                     same row if you use PDOStatement::fetchColumn() to\n *                     retrieve data.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "column_numner", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetchall", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetchall.php )\n *\n *\n * @how        int     Controls the contents of the returned array as\n *                     documented in PDOStatement::fetch().\n *\n *                     To return an array consisting of all values of a\n *                     single column from the result set, specify\n *                     PDO::FETCH_COLUMN. You can specify which column you\n *                     want with the column-index parameter.\n *\n *                     To fetch only the unique values of a single column\n *                     from the result set, bitwise-OR PDO::FETCH_COLUMN\n *                     with PDO::FETCH_UNIQUE.\n *\n *                     To return an associative array grouped by the\n *                     values of a specified column, bitwise-OR\n *                     PDO::FETCH_COLUMN with PDO::FETCH_GROUP.\n * @class_name mixed   Returns the indicated 0-indexed column when the\n *                     value of fetch_style is PDO::FETCH_COLUMN.\n * @ctor_args  mixed   Arguments of custom class constructor.\n *\n * @return     mixed   PDOStatement::fetchAll() returns an array containing\n *                     all of the remaining rows in the result set. The\n *                     array represents each row as either an array of\n *                     column values or an object with properties\n *                     corresponding to each column name.\n *\n *                     Using this method to fetch large result sets will\n *                     result in a heavy demand on system and possibly\n *                     network resources. Rather than retrieving all of the\n *                     data and manipulating it in PHP, consider using the\n *                     database server to manipulate the result sets. For\n *                     example, use the WHERE and SORT BY clauses in SQL to\n *                     restrict results before retrieving and processing\n *                     them with PHP.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "how", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "class_name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ctor_args", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bindvalue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.bindvalue.php )\n *\n * Binds a value to a corresponding named or question mark placeholder in\n * the SQL statement that was use to prepare the statement.\n *\n * @paramno    mixed   Parameter identifier. For a prepared statement using\n *                     named placeholders, this will be a parameter name of\n *                     the form :name. For a prepared statement using\n *                     question mark placeholders, this will be the\n *                     1-indexed position of the parameter.\n * @param      mixed   The value to bind to the parameter.\n * @type       int     Explicit data type for the parameter using the\n *                     PDO::PARAM_* constants.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "paramno", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "param", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "q_PDO$$PARAM_STR", (const char *)16, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bindparam", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.bindparam.php )\n *\n * Binds a PHP variable to a corresponding named or question mark\n * placeholder in the SQL statement that was use to prepare the statement.\n * Unlike PDOStatement::bindValue(), the variable is bound as a reference\n * and will only be evaluated at the time that PDOStatement::execute() is\n * called.\n *\n * Most parameters are input parameters, that is, parameters that are used\n * in a read-only fashion to build up the query. Some drivers support the\n * invocation of stored procedures that return data as output parameters,\n * and some also as input/output parameters that both send in data and are\n * updated to receive it.\n *\n * @paramno    mixed   Parameter identifier. For a prepared statement using\n *                     named placeholders, this will be a parameter name of\n *                     the form :name. For a prepared statement using\n *                     question mark placeholders, this will be the\n *                     1-indexed position of the parameter.\n * @param      mixed   Name of the PHP variable to bind to the SQL\n *                     statement parameter.\n * @type       int     Explicit data type for the parameter using the\n *                     PDO::PARAM_* constants. To return an INOUT parameter\n *                     from a stored procedure, use the bitwise OR operator\n *                     to set the PDO::PARAM_INPUT_OUTPUT bits for the\n *                     data_type parameter.\n * @max_value_len\n *             int     Length of the data type. To indicate that a\n *                     parameter is an OUT parameter from a stored\n *                     procedure, you must explicitly set the length.\n * @driver_params\n *             mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "paramno", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "param", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "q_PDO$$PARAM_STR", (const char *)16, NULL,
  (const char *)0x2000, "max_value_len", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "driver_params", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bindcolumn", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.bindcolumn.php )\n *\n * PDOStatement::bindColumn() arranges to have a particular variable bound\n * to a given column in the result-set from a query. Each call to\n * PDOStatement::fetch() or PDOStatement::fetchAll() will update all the\n * variables that are bound to columns.\n *\n * Since information about the columns is not always available to PDO\n * until the statement is executed, portable applications should call this\n * function after PDOStatement::execute().\n *\n * However, to be able to bind a LOB column as a stream when using the\n * PgSQL driver, applications should call this method before calling\n * PDOStatement::execute(), otherwise the large object OID will be returned\n * as an integer.\n *\n * @paramno    mixed   Number of the column (1-indexed) or name of the\n *                     column in the result set. If using the column name,\n *                     be aware that the name should match the case of the\n *                     column, as returned by the driver.\n * @param      mixed   Name of the PHP variable to which the column will be\n *                     bound.\n * @type       int     Data type of the parameter, specified by the\n *                     PDO::PARAM_* constants.\n * @max_value_len\n *             int     A hint for pre-allocation.\n * @driver_params\n *             mixed   Optional parameter(s) for the driver.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "paramno", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "param", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:2;", (const char *)4, "q_PDO$$PARAM_STR", (const char *)16, NULL,
  (const char *)0x2000, "max_value_len", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "driver_params", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rowcount", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.rowcount.php )\n *\n * PDOStatement::rowCount() returns the number of rows affected by the\n * last DELETE, INSERT, or UPDATE statement executed by the corresponding\n * PDOStatement object.\n *\n * If the last SQL statement executed by the associated PDOStatement was a\n * SELECT statement, some databases may return the number of rows returned\n * by that statement. However, this behaviour is not guaranteed for all\n * databases and should not be relied on for portable applications.\n *\n * @return     int     Returns the number of rows.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "errorcode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.errorcode.php )\n *\n *\n * @return     mixed   Identical to PDO::errorCode(), except that\n *                     PDOStatement::errorCode() only retrieves error codes\n *                     for operations performed with PDOStatement objects.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "errorinfo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.errorinfo.php )\n *\n *\n * @return     vector  PDOStatement::errorInfo() returns an array of error\n *                     information about the last operation performed by\n *                     this statement handle. The array consists of the\n *                     following fields: Element Information 0 SQLSTATE\n *                     error code (a five characters alphanumeric\n *                     identifier defined in the ANSI SQL standard). 1\n *                     Driver specific error code. 2 Driver specific error\n *                     message.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setattribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.setattribute.php )\n *\n * Sets an attribute on the statement. Currently, no generic attributes\n * are set but only driver specific: PDO::ATTR_CURSOR_NAME (Firebird and\n * ODBC specific): Set the name of cursor for UPDATE ... WHERE CURRENT OF.\n *\n * @attribute  int\n * @value      mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "attribute", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getattribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.getattribute.php )\n *\n * Gets an attribute of the statement. Currently, no generic attributes\n * exist but only driver specific: PDO::ATTR_CURSOR_NAME (Firebird and ODBC\n * specific): Get the name of cursor for UPDATE ... WHERE CURRENT OF.\n *\n * @attribute  int\n *\n * @return     mixed   Returns the attribute value.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "attribute", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "columncount", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.columncount.php )\n *\n * Use PDOStatement::columnCount() to return the number of columns in the\n * result set represented by the PDOStatement object.\n *\n * If the PDOStatement object was returned from PDO::query(), the column\n * count is immediately available.\n *\n * If the PDOStatement object was returned from PDO::prepare(), an\n * accurate column count will not be available until you invoke\n * PDOStatement::execute().\n *\n * @return     int     Returns the number of columns in the result set\n *                     represented by the PDOStatement object. If there is\n *                     no result set, PDOStatement::columnCount() returns\n *                     0.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getcolumnmeta", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.getcolumnmeta.php )\n *\n *\n * @column     int     The 0-indexed column in the result set.\n *\n * @return     mixed   Returns an associative array containing the\n *                     following values representing the metadata for a\n *                     single column: Column metadata Name Value\n *                     native_type The PHP native type used to represent\n *                     the column value. driver:decl_type The SQL type used\n *                     to represent the column value in the database. If\n *                     the column in the result set is the result of a\n *                     function, this value is not returned by\n *                     PDOStatement::getColumnMeta(). flags Any flags set\n *                     for this column. name The name of this column as\n *                     returned by the database. table The name of this\n *                     column's table as returned by the database. len The\n *                     length of this column. Normally -1 for types other\n *                     than floating point decimals. precision The numeric\n *                     precision of this column. Normally 0 for types other\n *                     than floating point decimals. pdo_type The type of\n *                     this column as represented by the PDO::PARAM_*\n *                     constants.\n *\n *                     Returns FALSE if the requested column does not\n *                     exist in the result set, or if no result set exists.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "column", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "setfetchmode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.setfetchmode.php )\n *\n *\n * @mode       int     The fetch mode must be one of the PDO::FETCH_*\n *                     constants.\n *\n * @return     bool    Returns 1 on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "nextrowset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.nextrowset.php )\n *\n * Some database servers support stored procedures that return more than\n * one rowset (also known as a result set). PDOStatement::nextRowset()\n * enables you to access the second and subsequent rowsets associated with\n * a PDOStatement object. Each rowset can have a different set of columns\n * from the preceding rowset.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "closecursor", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.closecursor.php )\n *\n * PDOStatement::closeCursor() frees up the connection to the server so\n * that other SQL statements may be issued, but leaves the statement in a\n * state that enables it to be executed again.\n *\n * This method is useful for database drivers that do not support\n * executing a PDOStatement object when a previously executed PDOStatement\n * object still has unfetched rows. If your database driver suffers from\n * this limitation, the problem may manifest itself in an out-of-sequence\n * error.\n *\n * PDOStatement::closeCursor() is implemented either as an optional driver\n * specific method (allowing for maximum efficiency), or as the generic PDO\n * fallback if no driver specific function is installed. The PDO generic\n * fallback is semantically the same as writing the following code in your\n * PHP script:\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "debugdumpparams", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.debugdumpparams.php\n * )\n *\n * Dumps the informations contained by a prepared statement directly on\n * the output. It will provide the SQL query in use, the number of\n * parameters used (Params), the list of parameters, with their name, type\n * (paramtype) as an integer, their key name or position, the value, and\n * the position in the query (if this is supported by the PDO driver,\n * otherwise, it will be -1).\n *\n * This is a debug function, which dump directly the data on the normal\n * output. TipAs with anything that outputs its result directly to the\n * browser, the output-control functions can be used to capture the output\n * of this function, and save it in a string (for example).\n *\n * This will only dumps the parameters in the statement at the moment of\n * the dump. Extra parameters are not stored in the statement, and not\n * displayed.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.current.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.key.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.next.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.rewind.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.valid.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__wakeup", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.wakeup.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__sleep", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.sleep.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "Vector", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.vector.php )\n *\n * An ordered collection where values are keyed using integers 0 thru n-1\n * in order.\n *\n */",
  "mutablevector", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.construct.php )\n *\n * Returns a Vector built from the values produced by the specified\n * Iterable.\n *\n * @iterable   mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.isempty.php )\n *\n * Returns true if the Vector is empty, false otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.count.php )\n *\n * Returns the number of values in the Vector.\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.items.php )\n *\n * Returns an Iterable that produces the values from this Vector.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.keys.php )\n *\n * Returns an Iterable that produces the keys from this Vector.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "view", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.view.php )\n *\n * Returns a lazy iterable view of this Vector.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "kvzip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.kvzip.php )\n *\n * Returns an Iterable that produces the key/value pairs from this Vector.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.at.php )\n *\n * Returns the value at the specified key. If the key is not present, an\n * exception is thrown.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.get.php )\n *\n * Returns the value at the specified key. If the key is not present, null\n * is returned.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.set.php )\n *\n * Stores a value into the Vector with the specified key, overwriting any\n * previous value that was associated with the key; if the key is outside\n * the bounds of the Vector, an exception is thrown.\n *\n * @key        mixed\n * @value      mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.setall.php )\n *\n * Stores each value produced by the specified KeyedIterable into the\n * Vector using its corresponding key, overwriting any previous value that\n * was associated with that key; if the key is outside the bounds of the\n * Vector, an exception is thrown.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "put", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.put.php )\n *\n * Stores a value into the Vector with the specified key, overwriting any\n * previous value that was associated with the key. If the key is outside\n * the bounds of the Vector, an exception is thrown.\n *\n * @key        mixed\n * @value      mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.clear.php )\n *\n * Removes all values from the Vector.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.contains.php )\n *\n * Returns true if the specified key is present in the Vector, returns\n * false otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.containskey.php )\n *\n * Returns true if the specified key is present in the Vector, returns\n * false otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.removekey.php )\n *\n * Removes the element with the specified key from this Vector and\n * renumbers the keys of all subsequent elements.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "append", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.append.php )\n *\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.add.php )\n *\n * Adds the specified value to the end of this Vector using the next\n * available integer key.\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.addall.php )\n *\n * Adds the values produced by the specified Iterable to the end of this\n * Vector using the next available integer keys.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pop", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.pop.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "resize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.resize.php )\n *\n *\n * @sz         mixed\n * @value      mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "sz", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.toarray.php )\n *\n * Returns an array built from the values from this Vector.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.getiterator.php )\n *\n * Returns an iterator that points to beginning of this Vector.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.map.php )\n *\n * Returns a KeyedIterable of the values produced by applying the\n * specified callback on the values of this Vector.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.filter.php )\n *\n * Returns a KeyedIterable of all the values from this Vector for which\n * the specified callback returns true.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.zip.php )\n *\n * Returns a KeyedIterable produced by combined the specified Iterables\n * pair-wise.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.sort.php )\n *\n * Uses the specified Collator to sort the Vector in place.\n *\n * @col        mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "col", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "reverse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.reverse.php )\n *\n * Reverses the values of the Vector in place.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "splice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.splice.php )\n *\n * Splices the values of the Vector in place (see the documentation for\n * array_splice() on php.net for more details.\n *\n * @offset     mixed\n * @len        mixed\n * @replacement\n *             mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "offset", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "replacement", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "linearSearch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.linearsearch.php )\n *\n * Returns index of the specified value if it is present, -1 otherwise.\n *\n * @search_value\n *             mixed\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "search_value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "shuffle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.shuffle.php )\n *\n * Shuffles the values of the Vector randomly in place.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.tostring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.unset.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.fromitems.php )\n *\n * Returns a Vector built from the values produced by the specified\n * Iterable.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.fromarray.php )\n *\n * Returns a Vector built from the values from the specified array.\n *\n * @arr        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromVector", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.fromvector.php )\n *\n * Returns a copy of the specified Vector.\n *\n * @vec        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "vec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "slice", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vector.slice.php )\n *\n * Returns a Vector built from the specified slice of values from the\n * specified Vector.\n *\n * @vec        mixed\n * @offset     mixed\n * @len        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "vec", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "len", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "VectorIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.vectoriterator.php )\n *\n * An iterator implementation for iterating over a Vector.\n *\n */",
  "keyediterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vectoriterator.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vectoriterator.current.php )\n *\n * Returns the current value that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vectoriterator.key.php )\n *\n * Returns the current key that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vectoriterator.valid.php )\n *\n * Returns true if the iterator points to a valid value, returns false\n * otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vectoriterator.next.php )\n *\n * Advance this iterator forward one position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/vectoriterator.rewind.php )\n *\n * Move this iterator back to the first position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "Map", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.map.php )\n *\n * An unordered dictionary-style collection.\n *\n */",
  "mutablemap", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.construct.php )\n *\n * Returns a Map built from the keys and values produced by the specified\n * KeyedIterable.\n *\n * @iterable   mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.isempty.php )\n *\n * Returns true if the Map is empty, false otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.count.php )\n *\n * Returns the number of key/value pairs in the Map.\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.items.php )\n *\n * Returns an Iterable that produces the key/value Pairs from this Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.keys.php )\n *\n * Returns an Iterable that produces the keys from this Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "view", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.view.php )\n *\n * Returns a lazy iterable view of this Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "kvzip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.kvzip.php )\n *\n * Returns an Iterable that produces the key/value pairs from this Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.at.php )\n *\n * Returns the value at the specified key. If the key is not present, an\n * exception is thrown.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.get.php )\n *\n * Returns the value at the specified key. If the key is not present, null\n * is returned.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.set.php )\n *\n * Stores a value into the Map with the specified key, overwriting any\n * previous value that was associated with the key.\n *\n * @key        mixed\n * @value      mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.setall.php )\n *\n * Stores each value produced by the specified KeyedIterable into the Map\n * using its corresponding key, overwriting any previous value that was\n * associated with that key.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "put", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.put.php )\n *\n * Stores a value into the Map with the specified key, overwriting any\n * previous value that was associated with the key.\n *\n * @key        mixed\n * @value      mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.clear.php )\n *\n * Removes all key/value pairs from the Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.contains.php )\n *\n * Returns true if the specified key is present in the Map, false\n * otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.containskey.php )\n *\n * Returns true if the specified key is present in the Map, false\n * otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.remove.php )\n *\n * Removes the specified key from this Map.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.removekey.php )\n *\n * Removes the specified key from this Map.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "discard", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.discard.php )\n *\n * Removes the specified key from this Map.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.add.php )\n *\n * Adds the specified key/value Pair to this Map. If an element with the\n * same key is already present, an exception is thrown.\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.addall.php )\n *\n * Adds the key/value Pairs produced by the specified Iterable to this\n * Map.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.toarray.php )\n *\n * Returns an array built from the keys and values from this Map.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "copyAsArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.copyasarray.php )\n *\n * Returns an array built from the keys and values from this Map.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.tokeysarray.php )\n *\n * Returns an array built from the keys from this Map.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.values.php )\n *\n * Returns a Vector built from the values from this Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.tovaluesarray.php )\n *\n * Returns an array built from the values from this Map.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "updateFromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.updatefromarray.php )\n *\n * Inserts the keys and values from the specified array into this Map.\n *\n * @arr        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "updateFromIterable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.updatefromiterable.php )\n *\n * Inserts the keys and values produced by the specified KeyedIterable.\n *\n * @it         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "it", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "differenceByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.differencebykey.php )\n *\n *\n * @it         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "it", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.getiterator.php )\n *\n * Returns an iterator that points to beginning of this Map.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.map.php )\n *\n * Returns a KeyedIterable of the values produced by applying the\n * specified callback on the values of this Map.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.filter.php )\n *\n * Returns a KeyedIterable of all the values from this Map for which the\n * specified callback returns true.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.zip.php )\n *\n * Returns a KeyedIterable produced by combined the specified Iterables\n * pair-wise.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.tostring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.unset.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.fromitems.php )\n *\n * Returns a Map built from the key/value Pairs produced by the specified\n * Iterable.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.fromarray.php )\n *\n * Returns a Map built from the keys and values from the specified array.\n *\n * @mp         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mp", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromIterable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/map.fromiterable.php )\n *\n * Returns a Map built from the keys and values produced by the specified\n * KeyedIterable.\n *\n * @mp         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mp", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "MapIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.mapiterator.php )\n *\n * An iterator implementation for iterating over a Map.\n *\n */",
  "keyediterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/mapiterator.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/mapiterator.current.php )\n *\n * Returns the current value that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/mapiterator.key.php )\n *\n * Returns the current key that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/mapiterator.valid.php )\n *\n * Returns true if the iterator points to a valid value, returns false\n * otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/mapiterator.next.php )\n *\n * Advance this iterator forward one position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/mapiterator.rewind.php )\n *\n * Move this iterator back to the first position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "StableMap", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.stablemap.php )\n *\n * An ordered dictionary-style collection.\n *\n */",
  "mutablemap", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.construct.php )\n *\n * Returns a StableMap built from the keys and values produced by the\n * specified KeyedIterable.\n *\n * @iterable   mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.isempty.php )\n *\n * Returns true if the StableMap is empty, false otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.count.php )\n *\n * Returns the number of key/value pairs in the StableMap.\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.items.php )\n *\n * Returns an Iterable that produces the key/value Pairs from this\n * StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.keys.php )\n *\n * Returns an Iterable that produces the keys from this StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "view", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.view.php )\n *\n * Returns a lazy iterable view of this StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "kvzip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.kvzip.php )\n *\n * Returns an Iterable that produces the key/value pairs from this\n * StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.at.php )\n *\n * Returns the value at the specified key. If the key is not present, an\n * exception is thrown.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.get.php )\n *\n * Returns the value at the specified key. If the key is not present, null\n * is returned.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.set.php )\n *\n * Stores a value into the StableMap with the specified key, overwriting\n * any previous value that was associated with the key.\n *\n * @key        mixed\n * @value      mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.setall.php )\n *\n * Stores each value produced by the specified KeyedIterable into the\n * StableMap using its corresponding key, overwriting any previous value\n * that was associated with that key.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "put", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.put.php )\n *\n * Stores a value into the StableMap with the specified key, overwriting\n * any previous value that was associated with the key.\n *\n * @key        mixed\n * @value      mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.clear.php )\n *\n * Removes all key/value pairs from the StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.contains.php )\n *\n * Returns true if the specified key is present in the StableMap, false\n * otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.containskey.php )\n *\n * Returns true if the specified key is present in the StableMap, false\n * otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.remove.php )\n *\n * Removes the specified key from this StableMap.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.removekey.php )\n *\n * Removes the specified key from this StableMap.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "discard", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.discard.php )\n *\n * Removes the specified key from this StableMap.\n *\n * @key        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.add.php )\n *\n * Adds the specified key/value Pair to this StableMap. If an element with\n * the same key is already present, an exception is thrown.\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.addall.php )\n *\n * Adds the key/value Pairs produced by the specified Iterable to the end\n * of this StableMap.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.toarray.php )\n *\n * Returns an array built from the keys and values from this StableMap.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "copyAsArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.copyasarray.php )\n *\n * Returns an array built from the keys and values from this StableMap.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toKeysArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.tokeysarray.php )\n *\n * Returns an array built from the keys from this StableMap.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "values", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.values.php )\n *\n * Returns a Vector built from the values from this StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toValuesArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.tovaluesarray.php )\n *\n * Returns an array built from the values from this StableMap.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "updateFromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.updatefromarray.php )\n *\n * Inserts the key/value pairs from the specified array into this\n * StableMap.\n *\n * @arr        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "updateFromIterable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.updatefromiterable.php\n * )\n *\n * Inserts the keys and values produced by the specified KeyedIterable.\n *\n * @it         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "it", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "differenceByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.differencebykey.php )\n *\n *\n * @it         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "it", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.getiterator.php )\n *\n * Returns an iterator that points to beginning of this StableMap.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.map.php )\n *\n * Returns a KeyedIterable of the values produced by applying the\n * specified callback on the values of this StableMap.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.filter.php )\n *\n * Returns a KeyedIterable of all the values from this StableMap for which\n * the specified callback returns true.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.zip.php )\n *\n * Returns a KeyedIterable produced by combined the specified Iterables\n * pair-wise.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.unset.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.fromitems.php )\n *\n * Returns a StableMap built from the key/value Pairs produced by the\n * specified Iterable.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.tostring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.fromarray.php )\n *\n * Returns a StableMap built from the keys and values from the specified\n * array.\n *\n * @mp         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mp", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromIterable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemap.fromiterable.php )\n *\n * Returns a StableMap built from the keys and values produced by the\n * specified KeyedIterable.\n *\n * @mp         mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "mp", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "StableMapIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.stablemapiterator.php )\n *\n * An iterator implementation for iterating over a StableMap.\n *\n */",
  "keyediterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemapiterator.construct.php\n * )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemapiterator.current.php )\n *\n * Returns the current value that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemapiterator.key.php )\n *\n * Returns the current key that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemapiterator.valid.php )\n *\n * Returns true if the iterator points to a valid value, returns false\n * otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemapiterator.next.php )\n *\n * Advance this iterator forward one position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/stablemapiterator.rewind.php )\n *\n * Move this iterator back to the first position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "Set", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.set.php )\n *\n * An unordered set-style collection.\n *\n */",
  "mutableset", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.construct.php )\n *\n * Returns a Set built from the values produced by the specified Iterable.\n *\n * @iterable   mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.isempty.php )\n *\n * Returns true if the Set is empty, false otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.count.php )\n *\n * Returns the number of values in the Set.\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.items.php )\n *\n * Returns an Iterable that produces the values from this Set.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "view", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.view.php )\n *\n * Returns a lazy iterable view of this Set.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.clear.php )\n *\n * Removes all values from the Set.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "contains", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.contains.php )\n *\n * Returns true if the specified value is present in the Set, returns\n * false otherwise.\n *\n * @val        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "remove", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.remove.php )\n *\n * Removes the specified value from this Set.\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "discard", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.discard.php )\n *\n * Removes the specified value from this Set.\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.add.php )\n *\n * Adds the specified value to this Set.\n *\n * @val        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "val", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.addall.php )\n *\n * Adds the values produced by the specified Iterable to this Set.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.toarray.php )\n *\n * Returns an array built from the values from this Set.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.getiterator.php )\n *\n * Returns an iterator that points to beginning of this Set.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.map.php )\n *\n * Returns an Iterable of the values produced by applying the specified\n * callback on the values of this Set.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.filter.php )\n *\n * Returns a Iterable of all the values from this Set for which the\n * specified callback returns true.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.zip.php )\n *\n * Returns a Iterable produced by combined the specified Iterables\n * pair-wise.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "difference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.difference.php )\n *\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "updateFromArrayValues", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.updatefromarrayvalues.php )\n *\n *\n * @arr        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "updateFromIterableValues", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.updatefromiterablevalues.php\n * )\n *\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.tostring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.unset.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromItems", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.fromitems.php )\n *\n * Returns a Set built from the values produced by the specified Iterable.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.fromarray.php )\n *\n * Returns a Set built from the values from the specified array.\n *\n * @arr        mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026240, "fromArrays", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.fromarrays.php )\n *\n * Returns a Set built from the values from the specified arrays.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "fromIterableValues", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/set.fromiterablevalues.php )\n *\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "SetIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.setiterator.php )\n *\n * An iterator implementation for iterating over a Set.\n *\n */",
  "iterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/setiterator.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/setiterator.current.php )\n *\n * Returns the current value that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/setiterator.key.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/setiterator.valid.php )\n *\n * Returns true if the iterator points to a valid value, returns false\n * otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/setiterator.next.php )\n *\n * Advance this iterator forward one position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/setiterator.rewind.php )\n *\n * Move this iterator back to the first position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "Pair", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.pair.php )\n *\n * An ordered fixed-sized container.\n *\n */",
  "constvector", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isEmpty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.isempty.php )\n *\n * Returns true if this Pair is empty, false otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.count.php )\n *\n * Returns the number of values in the Pair.\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "items", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.items.php )\n *\n * Returns an Iterable that produces the values from this Pair.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "keys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.keys.php )\n *\n * Returns an Iterable that produces the keys from this Pair.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "view", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.view.php )\n *\n * Returns a lazy iterable view of this Pair.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "kvzip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.kvzip.php )\n *\n * Returns an Iterable that produces the key/value pairs from this Pair.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toArray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.toarray.php )\n *\n * Returns an array built from the values from this Pair.\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.getiterator.php )\n *\n * Returns an iterator that points to beginning of this Pair.\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "map", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.map.php )\n *\n * Returns a KeyedIterable of the values produced by applying the\n * specified callback on the values of this Pair.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "filter", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.filter.php )\n *\n * Returns a KeyedIterable of all the values from this Pair for which the\n * specified callback returns true.\n *\n * @callback   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "zip", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.zip.php )\n *\n * Returns a KeyedIterable produced by combined the specified Iterables\n * pair-wise.\n *\n * @iterable   mixed\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "iterable", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "at", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.at.php )\n *\n * Returns the value at the specified key. If the key is not present, an\n * exception is thrown.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.get.php )\n *\n * Returns the value at the specified key. If the key is not present, null\n * is returned.\n *\n * @key        mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "containsKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pair.containskey.php )\n *\n * Returns true if the specified key is present in the Pair, returns false\n * otherwise.\n *\n * @key        mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006020, "PairIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.pairiterator.php )\n *\n * An iterator implementation for iterating over a Pair.\n *\n */",
  "keyediterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pairiterator.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pairiterator.current.php )\n *\n * Returns the current value that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pairiterator.key.php )\n *\n * Returns the current key that the iterator points to.\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pairiterator.valid.php )\n *\n * Returns true if the iterator points to a valid value, returns false\n * otherwise.\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pairiterator.next.php )\n *\n * Advance this iterator forward one position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/pairiterator.rewind.php )\n *\n * Move this iterator back to the first position.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "Memcached", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.memcached.php )\n *\n * Represents a connection to a set of memcached servers.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.construct.php )\n *\n *\n * @persistent_id\n *             string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "persistent_id", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.add.php )\n *\n * Memcached::add() is similar to Memcached::set(), but the operation\n * fails if the key already exists on the server.\n *\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key already exists.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.addbykey.php )\n *\n * Memcached::addByKey() is functionally equivalent to Memcached::add(),\n * except that the free-form server_key can be used to map the key to a\n * specific server. This is useful if you need to keep a bunch of related\n * keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key already exists.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addServer", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.addserver.php )\n *\n * Memcached::addServer() adds the specified server to the server pool. No\n * connection is established to the server at this time, but if you are\n * using consistent key distribution option (via\n * Memcached::DISTRIBUTION_CONSISTENT or\n * Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data\n * structures will have to be updated. Thus, if you need to add multiple\n * servers, it is better to use Memcached::addServers() as the update then\n * happens only once.\n *\n * The same server may appear multiple times in the server pool, because\n * no duplication checks are made. This is not advisable; instead, use the\n * weight option to increase the selection weighting of this server.\n *\n * @host       string  The hostname of the memcache server. If the hostname\n *                     is invalid, data-related operations will set\n *                     Memcached::RES_HOST_LOOKUP_FAILURE result code.\n * @port       int     The port on which memcache is running. Usually, this\n *                     is 11211.\n * @weight     int     The weight of the server relative to the total\n *                     weight of all the servers in the pool. This controls\n *                     the probability of the server being selected for\n *                     operations. This is used only with consistent\n *                     distribution option and usually corresponds to the\n *                     amount of memory available to memcache on that\n *                     server.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "weight", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addServers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.addservers.php )\n *\n * Memcached::addServers() adds servers to the server pool. Each entry in\n * servers is supposed to be an array containing hostname, port, and,\n * optionally, weight of the server. No connection is established to the\n * servers at this time.\n *\n * The same server may appear multiple times in the server pool, because\n * no duplication checks are made. This is not advisable; instead, use the\n * weight option to increase the selection weighting of this server.\n *\n * @servers    vector  Array of the servers to add to the pool.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "servers", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "append", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.append.php )\n *\n * Memcached::append() appends the given value string to the value of an\n * existing item. The reason that value is forced to be a string is that\n * appending mixed types is not well-defined.\n *\n * If the Memcached::OPT_COMPRESSION is enabled, the operation will fail\n * and a warning will be issued, because appending compressed data to a\n * value that is potentially already compressed is not possible.\n *\n * @key        string  The key under which to store the value.\n * @value      string  The string to append.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "appendByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.appendbykey.php )\n *\n * Memcached::appendByKey() is functionally equivalent to\n * Memcached::append(), except that the free-form server_key can be used to\n * map the key to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      string  The string to append.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "cas", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.cas.php )\n *\n * Memcached::cas() performs a \"check and set\" operation, so that the item\n * will be stored only if no other client has updated it since it was last\n * fetched by this client. The check is done via the cas_token parameter\n * which is a unique 64-bit value assigned to the existing item by\n * memcache. See the documentation for Memcached::get*() methods for how to\n * obtain this token. Note that the token is represented as a double due to\n * the limitations of PHP's integer space.\n *\n * @cas_token  float   Unique value associated with the existing item.\n *                     Generated by memcache.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_DATA_EXISTS if the item you are\n *                     trying to store has been modified since you last\n *                     fetched it.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "cas_token", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "casByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.casbykey.php )\n *\n * Memcached::casByKey() is functionally equivalent to Memcached::cas(),\n * except that the free-form server_key can be used to map the key to a\n * specific server. This is useful if you need to keep a bunch of related\n * keys on a certain server.\n *\n * @cas_token  float   Unique value associated with the existing item.\n *                     Generated by memcache.\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_DATA_EXISTS if the item you are\n *                     trying to store has been modified since you last\n *                     fetched it.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "cas_token", "", (const char *)0xb /* KindOfDouble */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "decrement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.decrement.php )\n *\n * Memcached::decrement() decrements a numeric item's value by the\n * specified offset. If the item's value is not numeric, it is treated as\n * if the value were 0. If the operation would decrease the value below 0,\n * the new value will be 0. Memcached::decrement() will fail if the item\n * does not exist.\n *\n * @key        string  The key of the item to decrement.\n * @offset     int     The amount by which to decrement the item's value.\n *\n * @return     mixed   Returns item's new value on success or FALSE on\n *                     failure. The Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "delete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.delete.php )\n *\n * Memcached::delete() deletes the key from the server. The time parameter\n * is the amount of time in seconds (or Unix time until which) the client\n * wishes the server to refuse add and replace commands for this key. For\n * this amount of time, the item is put into a delete queue, which means\n * that it won't possible to retrieve it by the get command, but add and\n * replace command with this key will also fail (the set command will\n * succeed, however). After the time passes, the item is finally deleted\n * from server memory. The parameter time defaults to 0 (which means that\n * the item will be deleted immediately and further storage commands with\n * this key will succeed).\n *\n * @key        string  The key to be deleted.\n * @time       int     The amount of time the server will wait to delete\n *                     the item.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "time", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "deleteByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.deletebykey.php )\n *\n * Memcached::deleteByKey() is functionally equivalent to\n * Memcached::delete(), except that the free-form server_key can be used to\n * map the key to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key to be deleted.\n * @time       int     The amount of time the server will wait to delete\n *                     the item.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "time", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetch", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.fetch.php )\n *\n * Memcached::fetch() retrieves the next result from the last request.\n *\n * @return     mixed   Returns the next result or FALSE otherwise. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_END if result set is exhausted.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetchAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.fetchall.php )\n *\n * Memcached::fetchAll() retrieves all the remaining results from the last\n * request.\n *\n * @return     mixed   Returns the results or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.flush.php )\n *\n * Memcached::flush() invalidates all existing cache items immediately (by\n * default) or after the delay specified. After invalidation none of the\n * items will be returned in response to a retrieval command (unless it's\n * stored again under the same key after Memcached::flush() has invalidated\n * the items). The flush does not actually free all the memory taken up by\n * the existing items; that will happen gradually as new items are stored.\n *\n * @delay      int     Numer of seconds to wait before invalidating the\n *                     items.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "delay", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.get.php )\n *\n * Memcached::get() returns the item that was previously stored under the\n * key. If the item is found and cas_token variable is provided, it will\n * contain the CAS token value for the item. See Memcached::cas() for how\n * to use CAS tokens. Read-through caching callback may be specified via\n * cache_cb parameter.\n *\n * @key        string  The key of the item to retrieve.\n * @cache_cb   mixed   Read-through caching callback or NULL.\n * @cas_token  mixed   The variable to store the CAS token in.\n *\n * @return     mixed   Returns the value stored in the cache or FALSE\n *                     otherwise. The Memcached::getResultCode() will\n *                     return Memcached::RES_NOTFOUND if the key does not\n *                     exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cache_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "cas_token", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getbykey.php )\n *\n * Memcached::getByKey() is functionally equivalent to Memcached::get(),\n * except that the free-form server_key can be used to map the key to a\n * specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key of the item to fetch.\n * @cache_cb   mixed   Read-through caching callback or NULL\n * @cas_token  mixed   The variable to store the CAS token in.\n *\n * @return     mixed   Returns the value stored in the cache or FALSE\n *                     otherwise. The Memcached::getResultCode() will\n *                     return Memcached::RES_NOTFOUND if the key does not\n *                     exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "cache_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "cas_token", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getDelayed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getdelayed.php )\n *\n * Memcached::getDelayed() issues a request to memcache for multiple items\n * the keys of which are specified in the keys array. The method does not\n * wait for response and returns right away. When you are ready to collect\n * the items, call either Memcached::fetch() or Memcached::fetchAll(). If\n * with_cas is true, the CAS token values will also be requested.\n *\n * Instead of fetching the results explicitly, you can specify a result\n * callback via value_cb parameter.\n *\n * @keys       vector  Array of keys to request.\n * @with_cas   bool    Whether to request CAS token values also.\n * @value_cb   mixed   The result callback or NULL.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "keys", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "with_cas", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "value_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getDelayedByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getdelayedbykey.php )\n *\n * Memcached::getDelayedByKey() is functionally equivalent to\n * Memcached::getDelayed(), except that the free-form server_key can be\n * used to map the keys to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @keys       vector  Array of keys to request.\n * @with_cas   bool    Whether to request CAS token values also.\n * @value_cb   mixed   The result callback or NULL.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "keys", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "with_cas", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "value_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getMulti", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getmulti.php )\n *\n * Memcached::getMulti() is similar to Memcached::get(), but instead of a\n * single key item, it retrieves multiple items the keys of which are\n * specified in the keys array. If cas_tokens variable is provided, it is\n * filled with the CAS token values for the found items.\n *\n * Unlike Memcached::get() it is not possible to specify a read-through\n * cache callback for Memcached::getMulti(), because the memcache protocol\n * does not provide information on which keys were not found in the\n * multi-key request.\n *\n * The flags parameter can be used to specify additional options for\n * Memcached::getMulti(). Currently, the only available option is\n * Memcached::GET_PRESERVE_ORDER that ensures that the keys are returned in\n * the same order as they were requested in.\n *\n * @keys       vector  Array of keys to retrieve.\n * @cas_tokens mixed   The variable to store the CAS tokens for the found\n *                     items.\n * @flags      int     The flags for the get operation.\n *\n * @return     mixed   Returns the array of found items or FALSE on\n *                     failure. Use Memcached::getResultCode() if\n *                     necessary.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "keys", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "cas_tokens", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getMultiByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getmultibykey.php )\n *\n * Memcached::getMultiByKey() is functionally equivalent to\n * Memcached::getMulti(), except that the free-form server_key can be used\n * to map the keys to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @keys       vector  Array of keys to retrieve.\n * @cas_tokens mixed   The variable to store the CAS tokens for the found\n *                     items.\n * @flags      int     The flags for the get operation.\n *\n * @return     mixed   Returns the array of found items or FALSE on\n *                     failure. Use Memcached::getResultCode() if\n *                     necessary.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "keys", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "cas_tokens", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getOption", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getoption.php )\n *\n * This method returns the value of a Memcached option. Some options\n * correspond to the ones defined by libmemcached, and some are specific to\n * the extension. See Memcached Constants for more information.\n *\n * @option     int     One of the Memcached::OPT_* constants.\n *\n * @return     mixed   Returns the value of the requested option, or FALSE\n *                     on error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getResultCode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getresultcode.php )\n *\n * Memcached::getResultCode() returns one of the Memcached::RES_*\n * constants that is the result of the last executed Memcached method.\n *\n * @return     int     Result code of the last Memcached operation.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getResultMessage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getresultmessage.php )\n *\n * Memcached::getResultMessage() returns a string that describes the\n * result code of the last executed Memcached method.\n *\n * @return     string  Message describing the result of the last Memcached\n *                     operation.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getServerByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getserverbykey.php )\n *\n * Memcached::getServerByKey() returns the server that would be selected\n * by a particular server_key in all the Memcached::*ByKey() operations.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getServerList", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getserverlist.php )\n *\n * Memcached::getServerList() returns the list of all servers that are in\n * its server pool.\n *\n * @return     vector  The list of all servers in the server pool.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getStats", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getstats.php )\n *\n * Memcached::getStats() returns an array containing the state of all\n * available memcache servers. See \357\277\275 memcache protocol specification for\n * details on these statistics.\n *\n * @return     mixed   Array of server statistics, one entry per server.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getVersion", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.getversion.php )\n *\n * Memcached::getVersion() returns an array containing the version info\n * for all available memcache servers.\n *\n * @return     mixed   Array of server versions, one entry per server.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "increment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.increment.php )\n *\n * Memcached::increment() increments a numeric item's value by the\n * specified offset. If the item's value is not numeric, it is treated as\n * if the value were 0. Memcached::increment() will fail if the item does\n * not exist.\n *\n * @key        string  The key of the item to increment.\n * @offset     int     The amount by which to increment the item's value.\n *\n * @return     mixed   Returns new item's value on success or FALSE on\n *                     failure. The Memcached::getResultCode() will return\n *                     Memcached::RES_NOTFOUND if the key does not exist.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "prepend", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.prepend.php )\n *\n * Memcached::prepend() prepends the given value string to the value of an\n * existing item. The reason that value is forced to be a string is that\n * prepending mixed types is not well-defined.\n *\n * If the Memcached::OPT_COMPRESSION is enabled, the operation will fail\n * and a warning will be issued, because prepending compressed data to a\n * value that is potentially already compressed is not possible.\n *\n * @key        string  The key of the item to prepend the data to.\n * @value      string  The string to prepend.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "prependByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.prependbykey.php )\n *\n * Memcached::prependByKey() is functionally equivalent to\n * Memcached::prepend(), except that the free-form server_key can be used\n * to map the key to a specific server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key of the item to prepend the data to.\n * @value      string  The string to prepend.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.replace.php )\n *\n * Memcached::replace() is similar to Memcached::set(), but the operation\n * fails if the key does not exist on the server.\n *\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "replaceByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.replacebykey.php )\n *\n * Memcached::replaceByKey() is functionally equivalent to\n * Memcached::replace(), except that the free-form server_key can be used\n * to map the key to a specific server. This is useful if you need to keep\n * a bunch of related keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     Memcached::getResultCode() will return\n *                     Memcached::RES_NOTSTORED if the key does not exist.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.set.php )\n *\n * Memcached::set() stores the value on a memcache server under the\n * specified key. The expiration parameter can be used to control when the\n * value is considered expired.\n *\n * The value can be any valid PHP type except for resources, because those\n * cannot be represented in a serialized form. If the\n * Memcached::OPT_COMPRESSION option is turned on, the serialized value\n * will also be compressed before storage.\n *\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.setbykey.php )\n *\n * Memcached::setByKey() is functionally equivalent to Memcached::set(),\n * except that the free-form server_key can be used to map the key to a\n * specific server. This is useful if you need to keep a bunch of related\n * keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @key        string  The key under which to store the value.\n * @value      mixed   The value to store.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setMulti", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.setmulti.php )\n *\n * Memcached::setMulti() is similar to Memcached::set(), but instead of a\n * single key/value item, it works on multiple items specified in items.\n * The expiration time applies to all the items at once.\n *\n * @items      map     An array of key/value pairs to store on the server.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "items", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setMultiByKey", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.setmultibykey.php )\n *\n * Memcached::setMultiByKey() is functionally equivalent to\n * Memcached::setMulti(), except that the free-form server_key can be used\n * to map the keys from items to a specific server. This is useful if you\n * need to keep a bunch of related keys on a certain server.\n *\n * @server_key string  The key identifying the server to store the value\n *                     on.\n * @items      map     An array of key/value pairs to store on the server.\n * @expiration int     The expiration time, defaults to 0. See Expiration\n *                     Times for more info.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Use\n *                     Memcached::getResultCode() if necessary.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "server_key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "items", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expiration", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setOption", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcached.setoption.php )\n *\n * This method sets the value of a Memcached option. Some options\n * correspond to the ones defined by libmemcached, and some are specific to\n * the extension. See Memcached Constants for more information.\n *\n * The options listed below require values specified via constants.\n *\n * Memcached::OPT_HASH requires Memcached::HASH_* values.\n *\n * Memcached::OPT_DISTRIBUTION requires Memcached::DISTRIBUTION_* values.\n *\n * @option     int\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "option", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "OPT_COMPRESSION", (const char*)&q_Memcached$$OPT_COMPRESSION, (const char *)0xc /* KindOfInt64 */, 
  "OPT_SERIALIZER", (const char*)&q_Memcached$$OPT_SERIALIZER, (const char *)0xc /* KindOfInt64 */, 
  "SERIALIZER_PHP", (const char*)&q_Memcached$$SERIALIZER_PHP, (const char *)0xc /* KindOfInt64 */, 
  "SERIALIZER_IGBINARY", (const char*)&q_Memcached$$SERIALIZER_IGBINARY, (const char *)0xc /* KindOfInt64 */, 
  "SERIALIZER_JSON", (const char*)&q_Memcached$$SERIALIZER_JSON, (const char *)0xc /* KindOfInt64 */, 
  "OPT_PREFIX_KEY", (const char*)&q_Memcached$$OPT_PREFIX_KEY, (const char *)0xc /* KindOfInt64 */, 
  "OPT_HASH", (const char*)&q_Memcached$$OPT_HASH, (const char *)0xc /* KindOfInt64 */, 
  "HASH_DEFAULT", (const char*)&q_Memcached$$HASH_DEFAULT, (const char *)0xc /* KindOfInt64 */, 
  "HASH_MD5", (const char*)&q_Memcached$$HASH_MD5, (const char *)0xc /* KindOfInt64 */, 
  "HASH_CRC", (const char*)&q_Memcached$$HASH_CRC, (const char *)0xc /* KindOfInt64 */, 
  "HASH_FNV1_64", (const char*)&q_Memcached$$HASH_FNV1_64, (const char *)0xc /* KindOfInt64 */, 
  "HASH_FNV1A_64", (const char*)&q_Memcached$$HASH_FNV1A_64, (const char *)0xc /* KindOfInt64 */, 
  "HASH_FNV1_32", (const char*)&q_Memcached$$HASH_FNV1_32, (const char *)0xc /* KindOfInt64 */, 
  "HASH_FNV1A_32", (const char*)&q_Memcached$$HASH_FNV1A_32, (const char *)0xc /* KindOfInt64 */, 
  "HASH_HSIEH", (const char*)&q_Memcached$$HASH_HSIEH, (const char *)0xc /* KindOfInt64 */, 
  "HASH_MURMUR", (const char*)&q_Memcached$$HASH_MURMUR, (const char *)0xc /* KindOfInt64 */, 
  "OPT_DISTRIBUTION", (const char*)&q_Memcached$$OPT_DISTRIBUTION, (const char *)0xc /* KindOfInt64 */, 
  "DISTRIBUTION_MODULA", (const char*)&q_Memcached$$DISTRIBUTION_MODULA, (const char *)0xc /* KindOfInt64 */, 
  "DISTRIBUTION_CONSISTENT", (const char*)&q_Memcached$$DISTRIBUTION_CONSISTENT, (const char *)0xc /* KindOfInt64 */, 
  "OPT_LIBKETAMA_COMPATIBLE", (const char*)&q_Memcached$$OPT_LIBKETAMA_COMPATIBLE, (const char *)0xc /* KindOfInt64 */, 
  "OPT_BUFFER_WRITES", (const char*)&q_Memcached$$OPT_BUFFER_WRITES, (const char *)0xc /* KindOfInt64 */, 
  "OPT_BINARY_PROTOCOL", (const char*)&q_Memcached$$OPT_BINARY_PROTOCOL, (const char *)0xc /* KindOfInt64 */, 
  "OPT_NO_BLOCK", (const char*)&q_Memcached$$OPT_NO_BLOCK, (const char *)0xc /* KindOfInt64 */, 
  "OPT_TCP_NODELAY", (const char*)&q_Memcached$$OPT_TCP_NODELAY, (const char *)0xc /* KindOfInt64 */, 
  "OPT_SOCKET_SEND_SIZE", (const char*)&q_Memcached$$OPT_SOCKET_SEND_SIZE, (const char *)0xc /* KindOfInt64 */, 
  "OPT_SOCKET_RECV_SIZE", (const char*)&q_Memcached$$OPT_SOCKET_RECV_SIZE, (const char *)0xc /* KindOfInt64 */, 
  "OPT_CONNECT_TIMEOUT", (const char*)&q_Memcached$$OPT_CONNECT_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "OPT_RETRY_TIMEOUT", (const char*)&q_Memcached$$OPT_RETRY_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "OPT_SEND_TIMEOUT", (const char*)&q_Memcached$$OPT_SEND_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "OPT_RECV_TIMEOUT", (const char*)&q_Memcached$$OPT_RECV_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "OPT_POLL_TIMEOUT", (const char*)&q_Memcached$$OPT_POLL_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "OPT_CACHE_LOOKUPS", (const char*)&q_Memcached$$OPT_CACHE_LOOKUPS, (const char *)0xc /* KindOfInt64 */, 
  "OPT_SERVER_FAILURE_LIMIT", (const char*)&q_Memcached$$OPT_SERVER_FAILURE_LIMIT, (const char *)0xc /* KindOfInt64 */, 
  "HAVE_IGBINARY", (const char*)&q_Memcached$$HAVE_IGBINARY, (const char *)0xb /* KindOfBoolean */, 
  "HAVE_JSON", (const char*)&q_Memcached$$HAVE_JSON, (const char *)0xb /* KindOfBoolean */, 
  "GET_PRESERVE_ORDER", (const char*)&q_Memcached$$GET_PRESERVE_ORDER, (const char *)0xc /* KindOfInt64 */, 
  "RES_SUCCESS", (const char*)&q_Memcached$$RES_SUCCESS, (const char *)0xc /* KindOfInt64 */, 
  "RES_FAILURE", (const char*)&q_Memcached$$RES_FAILURE, (const char *)0xc /* KindOfInt64 */, 
  "RES_HOST_LOOKUP_FAILURE", (const char*)&q_Memcached$$RES_HOST_LOOKUP_FAILURE, (const char *)0xc /* KindOfInt64 */, 
  "RES_UNKNOWN_READ_FAILURE", (const char*)&q_Memcached$$RES_UNKNOWN_READ_FAILURE, (const char *)0xc /* KindOfInt64 */, 
  "RES_PROTOCOL_ERROR", (const char*)&q_Memcached$$RES_PROTOCOL_ERROR, (const char *)0xc /* KindOfInt64 */, 
  "RES_CLIENT_ERROR", (const char*)&q_Memcached$$RES_CLIENT_ERROR, (const char *)0xc /* KindOfInt64 */, 
  "RES_SERVER_ERROR", (const char*)&q_Memcached$$RES_SERVER_ERROR, (const char *)0xc /* KindOfInt64 */, 
  "RES_WRITE_FAILURE", (const char*)&q_Memcached$$RES_WRITE_FAILURE, (const char *)0xc /* KindOfInt64 */, 
  "RES_DATA_EXISTS", (const char*)&q_Memcached$$RES_DATA_EXISTS, (const char *)0xc /* KindOfInt64 */, 
  "RES_NOTSTORED", (const char*)&q_Memcached$$RES_NOTSTORED, (const char *)0xc /* KindOfInt64 */, 
  "RES_NOTFOUND", (const char*)&q_Memcached$$RES_NOTFOUND, (const char *)0xc /* KindOfInt64 */, 
  "RES_PARTIAL_READ", (const char*)&q_Memcached$$RES_PARTIAL_READ, (const char *)0xc /* KindOfInt64 */, 
  "RES_SOME_ERRORS", (const char*)&q_Memcached$$RES_SOME_ERRORS, (const char *)0xc /* KindOfInt64 */, 
  "RES_NO_SERVERS", (const char*)&q_Memcached$$RES_NO_SERVERS, (const char *)0xc /* KindOfInt64 */, 
  "RES_END", (const char*)&q_Memcached$$RES_END, (const char *)0xc /* KindOfInt64 */, 
  "RES_ERRNO", (const char*)&q_Memcached$$RES_ERRNO, (const char *)0xc /* KindOfInt64 */, 
  "RES_BUFFERED", (const char*)&q_Memcached$$RES_BUFFERED, (const char *)0xc /* KindOfInt64 */, 
  "RES_TIMEOUT", (const char*)&q_Memcached$$RES_TIMEOUT, (const char *)0xc /* KindOfInt64 */, 
  "RES_BAD_KEY_PROVIDED", (const char*)&q_Memcached$$RES_BAD_KEY_PROVIDED, (const char *)0xc /* KindOfInt64 */, 
  "RES_CONNECTION_SOCKET_CREATE_FAILURE", (const char*)&q_Memcached$$RES_CONNECTION_SOCKET_CREATE_FAILURE, (const char *)0xc /* KindOfInt64 */, 
  "RES_PAYLOAD_FAILURE", (const char*)&q_Memcached$$RES_PAYLOAD_FAILURE, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "ImageSprite", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.imagesprite.php )\n *\n * Represents a set of images sprited into a single image.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.construct.php )\n *\n * Creates a new ImageSprite object\n *\n * @return     mixed   TODO\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addFile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.addfile.php )\n *\n * Adds the image specified by the file path to the sprite.\n *\n * @file       string  The path to the image. Must be a path to the local\n *                     filesystem or a a stream format php supports.\n * @options    map     Associative array of options for this image. May\n *                     include the image's 'width' and 'height' (if\n *                     previously known to the developer), or spacing\n *                     requirements via the padding_DIRECTION keys, where\n *                     DIRECTION may be top, bottom, left, or right.  May\n *                     also include flush requirements that will force this\n *                     image to be 'flush_left' or 'flush_right' within the\n *                     sprite.\n *\n * @return     object  The ImageSprite object itself (for method chaining).\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.addstring.php )\n *\n * Adds the image defined by the string to the sprite.\n *\n * @id         string  An identifier for this image. This will be the key\n *                     to referencing this image in the mapping.\n * @data       string  The data of this image.\n * @options    map     Associative array of options for this image. May\n *                     include the image's 'width' and 'height' (if\n *                     previously known to the developer), or spacing\n *                     requirements via the padding_DIRECTION keys, where\n *                     DIRECTION may be top, bottom, left, or right.  May\n *                     also include flush requirements that will force this\n *                     image to be 'flush_left' or 'flush_right' within the\n *                     sprite.\n *\n * @return     object  The ImageSprite object itself (for method chaining).\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "id", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addUrl", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.addurl.php )\n *\n * Adds the image located at the specified URL to the sprite.\n *\n * @url        string  The url of the image. The URL must be using the http\n *                     protocol; secure connections are not supported.\n * @timeout_ms int     The timeout in milliseconds for this request. A\n *                     value of 0 or lower will disable the timeout.\n * @Options    map     Associative array of options for this image. May\n *                     include the image's 'width' and 'height' (if\n *                     previously known to the developer), or spacing\n *                     requirements via the padding_DIRECTION keys, where\n *                     DIRECTION may be top, bottom, left, or right.  May\n *                     also include flush requirements that will force this\n *                     image to be 'flush_left' or 'flush_right' within the\n *                     sprite.\n *\n * @return     object  The ImageSprite object itself (for method chaining).\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "url", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timeout_ms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "Options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.clear.php )\n *\n * Removes images from the sprite and frees the memory associated with\n * that image.\n *\n * @paths      mixed   When passed a string, it will remove the images\n *                     specified by that path or identifier from the\n *                     sprite, if they exist. You may also pass an array of\n *                     strings, and it will remove each.  a null value will\n *                     remove all images from the sprite.\n *\n * @return     object  The ImageSprite object itself (for method chaining).\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "paths", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "loadDims", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.loaddims.php )\n *\n * Loads the dimensions for the images in the sprite, but not necessarily\n * their data.\n *\n * @block      bool    Whether this call should block until all the data is\n *                     loaded or allow them to load in the background.\n *\n * @return     object  The ImageSprite object itself (for method chaining).\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "block", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "loadImages", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.loadimages.php )\n *\n * Loads the images in the sprite and sets the correct dimensions.\n *\n * @block      bool    Whether this call should block until all the data is\n *                     loaded or allow them to load in the background.\n *\n * @return     object  The ImageSprite object itself (for method chaining).\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "block", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "output", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.output.php )\n *\n * Retrieves the resulting sprite image.\n *\n * @output_file\n *             string  Path to where the output image should be saved. If\n *                     empty or null, the image data is returned as a\n *                     string.\n * @format     string  The format the output image should be returned in.\n *                     Defaults to png.\n * @quality    int     The output quality of the image. Only applies to\n *                     jpeg output, and defaults to 75.\n *\n * @return     string  The image data, if the $output_file is not\n *                     specified.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "output_file", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "s:3:\"png\";", (const char *)10, "\"png\"", (const char *)5, NULL,
  (const char *)0x2000, "quality", "", (const char *)0xa /* KindOfInt64 */, "i:75;", (const char *)5, "75", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "css", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.css.php )\n *\n * Retrieves css for the sprite, mapping ids to images.\n *\n * @css_namespace\n *             string  The css class namespace of the sprite. Should be\n *                     unique within your css.\n * @sprite_file\n *             string  Path to the sprite image relative to wherever this\n *                     css is being served. The output image may be passed\n *                     in datauri format to use inlined sprite images. If\n *                     this is not set, the image location must be\n *                     specified elsewhere in the css manually.\n * @output_file\n *             string  Path to where the css should be saved. If empty or\n *                     null, the css is returned as a string.\n * @verbose    bool    Determines whether the css should include comments\n *                     with information about the sprite.\n *\n * @return     string  The css output, if the $output_file is not\n *                     specified.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "css_namespace", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sprite_file", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "output_file", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "verbose", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getErrors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.geterrors.php )\n *\n * Retrieves an associative array of errors encountered while putting\n * together the sprite.\n *\n * @return     vector  Associative array of errors\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "mapping", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.mapping.php )\n *\n * Returns an associative array mapping the images in the sprite to their\n * dimensions, placement, and css id.\n *\n * @return     vector  Associative array of mapping\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__destruct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/imagesprite.destruct.php )\n *\n * Recovers all memory allocated to the sprite.\n *\n * @return     mixed   null\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SoapServer", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.soapserver.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.construct.php )\n *\n *\n * @wsdl       mixed\n * @options    map\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "wsdl", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10026040, "setclass", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.setclass.php )\n *\n * Exports all methods from specified class.\n *\n * The object can be made persistent across request for a given PHP\n * session with the SoapServer::setPersistence() method.\n *\n * @name       string  The name of the exported class.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setobject", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.setobject.php )\n *\n * This sets a specific object as the handler for SOAP requests, rather\n * than just a class as in SoapServer::setClass().\n *\n * @obj        object  The object to handle the requests.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "obj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addfunction", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.addfunction.php )\n *\n * Exports one or more functions for remote clients\n *\n * @func       mixed   To export one function, pass the function name into\n *                     this parameter as a string.\n *\n *                     To export several functions, pass an array of\n *                     function names.\n *\n *                     To export all the functions, pass a special\n *                     constant SOAP_FUNCTIONS_ALL.\n *\n *                     functions must receive all input arguments in the\n *                     same order as defined in the WSDL file (They should\n *                     not receive any output parameters as arguments) and\n *                     return one or more values. To return several values\n *                     they must return an array with named output\n *                     parameters.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "func", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getfunctions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.getfunctions.php )\n *\n * Returns a list of the defined functions in the SoapServer object. This\n * method returns the list of all functions added by\n * SoapServer::addFunction() or SoapServer::setClass().\n *\n * @return     mixed   An array of the defined functions.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "handle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.handle.php )\n *\n * Processes a SOAP request, calls necessary functions, and sends a\n * response back.\n *\n * @request    string  The SOAP request. If this argument is omitted, the\n *                     request is assumed to be in the raw POST data of the\n *                     HTTP request.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "request", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setpersistence", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.setpersistence.php )\n *\n * This function allows saving data between requests in a PHP session. It\n * works only with a server that exports functions from a class with\n * SoapServer::setClass() or SoapServer::setObject().\n *\n * The persistence SOAP_PERSISTENCE_SESSION makes only objects of the\n * given class persistent, but not the class static data. In this case, use\n * $this->bar instead of self::$bar.\n *\n * @mode       int     One of the SOAP_PERSISTENCE_XXX constants.\n *\n *                     SOAP_PERSISTENCE_REQUEST - persist the object for\n *                     the duration of a request.\n *\n *                     SOAP_PERSISTENCE_SESSION - persist the object for\n *                     the duration of a session.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fault", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.fault.php )\n *\n * Sends a response to the client of the current request indicating an\n * error.\n *\n * This can only be called when handling a request.\n *\n * @code       mixed   The error code to return\n * @fault      string  A brief description of the error\n * @actor      string  A string identifying the actor that caused the\n *                     fault.\n * @detail     mixed   More details of the fault\n * @name       string  The name of the fault. This can be used to select a\n *                     name from a WSDL file.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "code", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fault", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "actor", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "detail", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addsoapheader", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapserver.addsoapheader.php )\n *\n * Adds a SOAP header to be returned with the response to the current\n * request.\n *\n * @fault      object  The header to be returned.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "fault", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SoapClient", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.soapclient.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.construct.php )\n *\n *\n * @wsdl       mixed\n * @options    map\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "wsdl", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__call", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.call.php )\n *\n *\n * @name       mixed\n * @args       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__soapcall", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.soapcall.php )\n *\n *\n * @name       string\n * @args       map\n * @options    map\n * @input_headers\n *             mixed\n * @output_headers\n *             mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "input_headers", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2800, "output_headers", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__getlastrequest", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.getlastrequest.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__getlastresponse", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.getlastresponse.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__getlastrequestheaders", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/soapclient.getlastrequestheaders.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__getlastresponseheaders", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/soapclient.getlastresponseheaders.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__getfunctions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.getfunctions.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__gettypes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.gettypes.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__dorequest", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.dorequest.php )\n *\n *\n * @buf        string\n * @location   string\n * @action     string\n * @version    int\n * @oneway     bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "buf", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "location", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "action", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "version", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "oneway", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__setcookie", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.setcookie.php )\n *\n *\n * @name       string\n * @value      string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__setlocation", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.setlocation.php )\n *\n *\n * @new_location\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "new_location", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__setsoapheaders", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapclient.setsoapheaders.php )\n *\n *\n * @headers    mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "headers", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SoapVar", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.soapvar.php )\n *\n * A class representing a variable or object for use with SOAP services.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapvar.construct.php )\n *\n *\n * @data       mixed\n * @type       mixed\n * @type_name  string\n * @type_namespace\n *             string\n * @node_name  string\n * @node_namespace\n *             string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type_name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "type_namespace", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "node_name", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "node_namespace", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SoapParam", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.soapparam.php )\n *\n * Represents parameter to a SOAP call.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapparam.construct.php )\n *\n *\n * @data       mixed\n * @name       string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SoapHeader", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.soapheader.php )\n *\n * Represents a SOAP header.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/soapheader.construct.php )\n *\n *\n * @ns         string\n * @name       string\n * @data       mixed\n * @mustunderstand\n *             bool\n * @actor      mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "mustunderstand", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "actor", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "XMLReader", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.xmlreader.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.open.php )\n *\n *\n * @uri        string\n * @encoding   string\n * @options    int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "XML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.xml.php )\n *\n *\n * @source     string\n * @encoding   string\n * @options    int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.close.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "read", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.read.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.next.php )\n *\n *\n * @localname  string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.readstring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readInnerXML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.readinnerxml.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "readOuterXML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.readouterxml.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "moveToNextAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/xmlreader.movetonextattribute.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.getattribute.php )\n *\n *\n * @name       string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttributeNo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.getattributeno.php )\n *\n *\n * @index      int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttributeNs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.getattributens.php )\n *\n *\n * @name       string\n * @namespaceURI\n *             string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceURI", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "moveToAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.movetoattribute.php )\n *\n *\n * @name       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "moveToAttributeNo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.movetoattributeno.php\n * )\n *\n *\n * @index      int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "moveToAttributeNs", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.movetoattributens.php\n * )\n *\n *\n * @name       string\n * @namespaceURI\n *             string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "namespaceURI", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "moveToElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.movetoelement.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "moveToFirstAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/xmlreader.movetofirstattribute.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isValid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.isvalid.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "expand", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.expand.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getParserProperty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.getparserproperty.php\n * )\n *\n *\n * @property   int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "property", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lookupNamespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.lookupnamespace.php )\n *\n *\n * @prefix     string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setSchema", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.setschema.php )\n *\n *\n * @source     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setParserProperty", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.setparserproperty.php\n * )\n *\n *\n * @property   int\n * @value      bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "property", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setRelaxNGSchema", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlreader.setrelaxngschema.php )\n *\n *\n * @filename   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setRelaxNGSchemaSource", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/xmlreader.setrelaxngschemasource.php )\n *\n *\n * @source     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "NONE", (const char*)&q_XMLReader$$NONE, (const char *)0xc /* KindOfInt64 */, 
  "ELEMENT", (const char*)&q_XMLReader$$ELEMENT, (const char *)0xc /* KindOfInt64 */, 
  "ATTRIBUTE", (const char*)&q_XMLReader$$ATTRIBUTE, (const char *)0xc /* KindOfInt64 */, 
  "TEXT", (const char*)&q_XMLReader$$TEXT, (const char *)0xc /* KindOfInt64 */, 
  "CDATA", (const char*)&q_XMLReader$$CDATA, (const char *)0xc /* KindOfInt64 */, 
  "ENTITY_REF", (const char*)&q_XMLReader$$ENTITY_REF, (const char *)0xc /* KindOfInt64 */, 
  "ENTITY", (const char*)&q_XMLReader$$ENTITY, (const char *)0xc /* KindOfInt64 */, 
  "PI", (const char*)&q_XMLReader$$PI, (const char *)0xc /* KindOfInt64 */, 
  "COMMENT", (const char*)&q_XMLReader$$COMMENT, (const char *)0xc /* KindOfInt64 */, 
  "DOC", (const char*)&q_XMLReader$$DOC, (const char *)0xc /* KindOfInt64 */, 
  "DOC_TYPE", (const char*)&q_XMLReader$$DOC_TYPE, (const char *)0xc /* KindOfInt64 */, 
  "DOC_FRAGMENT", (const char*)&q_XMLReader$$DOC_FRAGMENT, (const char *)0xc /* KindOfInt64 */, 
  "NOTATION", (const char*)&q_XMLReader$$NOTATION, (const char *)0xc /* KindOfInt64 */, 
  "WHITESPACE", (const char*)&q_XMLReader$$WHITESPACE, (const char *)0xc /* KindOfInt64 */, 
  "SIGNIFICANT_WHITESPACE", (const char*)&q_XMLReader$$SIGNIFICANT_WHITESPACE, (const char *)0xc /* KindOfInt64 */, 
  "END_ELEMENT", (const char*)&q_XMLReader$$END_ELEMENT, (const char *)0xc /* KindOfInt64 */, 
  "END_ENTITY", (const char*)&q_XMLReader$$END_ENTITY, (const char *)0xc /* KindOfInt64 */, 
  "XML_DECLARATION", (const char*)&q_XMLReader$$XML_DECLARATION, (const char *)0xc /* KindOfInt64 */, 
  "LOADDTD", (const char*)&q_XMLReader$$LOADDTD, (const char *)0xc /* KindOfInt64 */, 
  "DEFAULTATTRS", (const char*)&q_XMLReader$$DEFAULTATTRS, (const char *)0xc /* KindOfInt64 */, 
  "VALIDATE", (const char*)&q_XMLReader$$VALIDATE, (const char *)0xc /* KindOfInt64 */, 
  "SUBST_ENTITIES", (const char*)&q_XMLReader$$SUBST_ENTITIES, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x18006000, "SimpleXMLElement", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.simplexmlelement.php )\n *\n * Represents an element in an XML document.\n *\n */",
  "arrayaccess", "iteratoraggregate", "countable", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.construct.php )\n *\n *\n * @data       string\n * @options    int\n * @data_is_url\n *             bool\n * @ns         string\n * @is_prefix  bool\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "data_is_url", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "is_prefix", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "offsetExists", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelement.offsetexists.php )\n *\n *\n * @index      mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "index", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "offsetGet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.offsetget.php )\n *\n *\n * @index      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "index", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "offsetSet", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.offsetset.php )\n *\n *\n * @index      mixed\n * @newvalue   mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "index", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "newvalue", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "offsetUnset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.offsetunset.php\n * )\n *\n *\n * @index      mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "index", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.getiterator.php\n * )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "count", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.count.php )\n *\n * This method counts the number of children of an element.\n *\n * @return     int     Returns the number of elements of an element.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xpath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.xpath.php )\n *\n *\n * @path       string  An XPath path\n *\n * @return     mixed   Returns an array of SimpleXMLElement objects or\n *                     FALSE in case of an error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "path", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "registerXPathNamespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelement.registerxpathnamespace.php )\n *\n *\n * @prefix     string\n * @ns         string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asXML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.asxml.php )\n *\n *\n * @filename   string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getNamespaces", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelement.getnamespaces.php )\n *\n *\n * @recursive  bool\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "recursive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getDocNamespaces", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelement.getdocnamespaces.php )\n *\n *\n * @recursive  bool\n *\n * @return     map\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "recursive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "children", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.children.php )\n *\n *\n * @ns         string  An XML namespace.\n * @is_prefix  bool    If is_prefix is TRUE, ns will be regarded as a\n *                     prefix. If FALSE, ns will be regarded as a namespace\n *                     URL.\n *\n * @return     object  Returns a SimpleXMLElement element, whether the node\n *                     has children or not.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "is_prefix", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.getname.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "attributes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.attributes.php\n * )\n *\n *\n * @ns         string  An optional namespace for the retrieved attributes\n * @is_prefix  bool    Default to FALSE\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "s:0:\"\";", (const char *)7, "\"\"", (const char *)2, NULL,
  (const char *)0x2000, "is_prefix", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addChild", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.addchild.php )\n *\n *\n * @qname      string\n * @value      string\n * @ns         string\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "qname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelement.addattribute.php )\n *\n *\n * @qname      string\n * @value      string\n * @ns         string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "qname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ns", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__toString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.tostring.php )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__unset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelement.unset.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "LibXMLError", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.libxmlerror.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/libxmlerror.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x18006000, "SimpleXMLElementIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/class.simplexmlelementiterator.php )\n *\n *\n */",
  "iterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelementiterator.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelementiterator.current.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/simplexmlelementiterator.key.php\n * )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelementiterator.next.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelementiterator.rewind.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/simplexmlelementiterator.valid.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "Memcache", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.memcache.php )\n *\n * Represents a connection to a set of memcache servers.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "connect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.connect.php )\n *\n * Memcache::connect() establishes a connection to the memcached server.\n * The connection, which was opened using Memcache::connect() will be\n * automatically closed at the end of script execution. Also you can close\n * it with Memcache::close(). Also you can use memcache_connect() function.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections. This parameter may also specify other\n *                     transports like unix:///path/to/memcached.sock to\n *                     use UNIX domain sockets, in this case port must also\n *                     be set to 0.\n * @port       int     Point to the port where memcached is listening for\n *                     connections. Set this parameter to 0 when using UNIX\n *                     domain sockets.\n * @timeout    int     Value in seconds which will be used for connecting\n *                     to the daemon. Think twice before changing the\n *                     default value of 1 second - you can lose all the\n *                     advantages of caching if your connection is too\n *                     slow.\n * @timeoutms  int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "pconnect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.pconnect.php )\n *\n * Memcache::pconnect() is similar to Memcache::connect() with the\n * difference, that the connection it establishes is persistent. This\n * connection is not closed after the end of script execution and by\n * Memcache::close() function. Also you can use memcache_pconnect()\n * function.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections. This parameter may also specify other\n *                     transports like unix:///path/to/memcached.sock to\n *                     use UNIX domain sockets, in this case port must also\n *                     be set to 0.\n * @port       int     Point to the port where memcached is listening for\n *                     connections. Set this parameter to 0 when using UNIX\n *                     domain sockets.\n * @timeout    int     Value in seconds which will be used for connecting\n *                     to the daemon. Think twice before changing the\n *                     default value of 1 second - you can lose all the\n *                     advantages of caching if your connection is too\n *                     slow.\n * @timeoutms  int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.add.php )\n *\n * Memcache::add() stores variable var with key only if such key doesn't\n * exist at the server yet. Also you can use memcache_add() function.\n *\n * @key        string  The key that will be associated with the item.\n * @var        mixed   The variable to store. Strings and integers are\n *                     stored as is, other types are stored serialized.\n * @flag       int     Use MEMCACHE_COMPRESSED to store the item compressed\n *                     (uses zlib).\n * @expire     int     Expiration time of the item. If it's equal to zero,\n *                     the item will never expire. You can also use Unix\n *                     timestamp or a number of seconds starting from\n *                     current time, but in the latter case the number of\n *                     seconds may not exceed 2592000 (30 days).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Returns\n *                     FALSE if such key already exist. For the rest\n *                     Memcache::add() behaves similarly to\n *                     Memcache::set().\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.set.php )\n *\n * Memcache::set() stores an item var with key on the memcached server.\n * Parameter expire is expiration time in seconds. If it's 0, the item\n * never expires (but memcached server doesn't guarantee this item to be\n * stored all the time, it could be deleted from the cache to make place\n * for other items). You can use MEMCACHE_COMPRESSED constant as flag value\n * if you want to use on-the-fly compression (uses zlib).\n *\n * Remember that resource variables (i.e. file and connection descriptors)\n * cannot be stored in the cache, because they cannot be adequately\n * represented in serialized state. Also you can use memcache_set()\n * function.\n *\n * @key        string  The key that will be associated with the item.\n * @var        mixed   The variable to store. Strings and integers are\n *                     stored as is, other types are stored serialized.\n * @flag       int     Use MEMCACHE_COMPRESSED to store the item compressed\n *                     (uses zlib).\n * @expire     int     Expiration time of the item. If it's equal to zero,\n *                     the item will never expire. You can also use Unix\n *                     timestamp or a number of seconds starting from\n *                     current time, but in the latter case the number of\n *                     seconds may not exceed 2592000 (30 days).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "replace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.replace.php )\n *\n * Memcache::replace() should be used to replace value of existing item\n * with key. In case if item with such key doesn't exists,\n * Memcache::replace() returns FALSE. For the rest Memcache::replace()\n * behaves similarly to Memcache::set(). Also you can use\n * memcache_replace() function.\n *\n * @key        string  The key that will be associated with the item.\n * @var        mixed   The variable to store. Strings and integers are\n *                     stored as is, other types are stored serialized.\n * @flag       int     Use MEMCACHE_COMPRESSED to store the item compressed\n *                     (uses zlib).\n * @expire     int     Expiration time of the item. If it's equal to zero,\n *                     the item will never expire. You can also use Unix\n *                     timestamp or a number of seconds starting from\n *                     current time, but in the latter case the number of\n *                     seconds may not exceed 2592000 (30 days).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "var", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.get.php )\n *\n * Memcache::get() returns previously stored data if an item with such key\n * exists on the server at this moment.\n *\n * You can pass array of keys to Memcache::get() to get array of values.\n * The result array will contain only found key-value pairs.\n *\n * @key        mixed   The key or array of keys to fetch.\n * @flags      mixed   If present, flags fetched along with the values will\n *                     be written to this parameter. These flags are the\n *                     same as the ones given to for example\n *                     Memcache::set(). The lowest byte of the int is\n *                     reserved for pecl/memcache internal usage (e.g. to\n *                     indicate compression and serialization status).\n *\n * @return     mixed   Returns the string associated with the key or FALSE\n *                     on failure or if such key was not found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "key", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "flags", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "delete", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.delete.php )\n *\n * Memcache::delete() deletes item with the key. If parameter timeout is\n * specified, the item will expire after timeout seconds. Also you can use\n * memcache_delete() function.\n *\n * @key        string  The key associated with the item to delete.\n * @expire     int     Execution time of the item. If it's equal to zero,\n *                     the item will be deleted right away whereas if you\n *                     set it to 30, the item will be deleted in 30\n *                     seconds.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "increment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.increment.php )\n *\n * Memcache::increment() increments value of an item by the specified\n * value. If item specified by key was not numeric and cannot be converted\n * to a number, it will change its value to value. Memcache::increment()\n * does not create an item if it doesn't already exist.\n *\n * Do not use Memcache::increment() with items that have been stored\n * compressed because subsequent calls to Memcache::get() will fail. Also\n * you can use memcache_increment() function.\n *\n * @key        string  Key of the item to increment.\n * @offset     int     Increment the item by value.\n *\n * @return     int     Returns new items value on success or FALSE on\n *                     failure.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "decrement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.decrement.php )\n *\n * Memcache::decrement() decrements value of the item by value. Similarly\n * to Memcache::increment(), current value of the item is being converted\n * to numerical and after that value is substracted.\n *\n * New item's value will not be less than zero.\n *\n * Do not use Memcache::decrement() with item, which was stored\n * compressed, because consequent call to Memcache::get() will fail.\n * Memcache::decrement() does not create an item if it didn't exist. Also\n * you can use memcache_decrement() function.\n *\n * @key        string  Key of the item do decrement.\n * @offset     int     Decrement the item by value.\n *\n * @return     int     Returns item's new value on success or FALSE on\n *                     failure.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "key", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getversion", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.getversion.php )\n *\n * Memcache::getVersion() returns a string with server's version number.\n * Also you can use memcache_get_version() function.\n *\n * @return     mixed   Returns a string of server version number or FALSE\n *                     on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.flush.php )\n *\n * Memcache::flush() immediately invalidates all existing items.\n * Memcache::flush() doesn't actually free any resources, it only marks all\n * the items as expired, so occupied memory will be overwritten by new\n * items. Also you can use memcache_flush() function.\n *\n * @expire     int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "expire", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setoptimeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.setoptimeout.php )\n *\n *\n * @timeoutms  int\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.close.php )\n *\n * Memcache::close() closes connection to memcached server. This function\n * doesn't close persistent connections, which are closed only during\n * web-server shutdown/restart. Also you can use memcache_close() function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getserverstatus", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.getserverstatus.php )\n *\n * Memcache::getServerStatus() returns a the servers online/offline\n * status. You can also use memcache_get_server_status() function.\n *\n * This function has been added to Memcache version 2.1.0.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections.\n * @port       int     Point to the port where memcached is listening for\n *                     connections.\n *\n * @return     int     Returns a the servers status. 0 if server is failed,\n *                     non-zero otherwise\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setcompressthreshold", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/memcache.setcompressthreshold.php )\n *\n * Memcache::setCompressThreshold() enables automatic compression of large\n * values. You can also use the memcache_set_compress_threshold() function.\n *\n * This function has been added to Memcache version 2.0.0.\n *\n * @threshold  int     Controls the minimum value length before attempting\n *                     to compress automatically.\n * @min_savings\n *             float   Specifies the minimum amount of savings to actually\n *                     store the value compressed. The supplied value must\n *                     be between 0 and 1. Default value is 0.2 giving a\n *                     minimum 20% compression savings.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "threshold", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "min_savings", "", (const char *)0xb /* KindOfDouble */, "d:0.2;", (const char *)6, "0.2", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getstats", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.getstats.php )\n *\n * Memcache::getStats() returns an associative array with server's\n * statistics. Array keys correspond to stats parameters and values to\n * parameter's values. Also you can use memcache_get_stats() function.\n *\n * @type       string  The type of statistics to fetch. Valid values are\n *                     {reset, malloc, maps, cachedump, slabs, items,\n *                     sizes}. According to the memcached protocol spec\n *                     these additional arguments \"are subject to change\n *                     for the convenience of memcache developers\".\n * @slabid     int     Used in conjunction with type set to cachedump to\n *                     identify the slab to dump from. The cachedump\n *                     command ties up the server and is strictly to be\n *                     used for debugging purposes.\n * @limit      int     Used in conjunction with type set to cachedump to\n *                     limit the number of entries to dump.\n *\n * @return     map     Returns an associative array of server statistics or\n *                     FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "slabid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:100;", (const char *)6, "100", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getextendedstats", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.getextendedstats.php )\n *\n * Memcache::getExtendedStats() returns a two-dimensional associative\n * array with server statistics. Array keys correspond to host:port of\n * server and values contain the individual server statistics. A failed\n * server will have its corresponding entry set to FALSE. You can also use\n * the memcache_get_extended_stats() function.\n *\n * This function has been added to Memcache version 2.0.0.\n *\n * @type       string  The type of statistics to fetch. Valid values are\n *                     {reset, malloc, maps, cachedump, slabs, items,\n *                     sizes}. According to the memcached protocol spec\n *                     these additional arguments \"are subject to change\n *                     for the convenience of memcache developers\".\n * @slabid     int     Used in conjunction with type set to cachedump to\n *                     identify the slab to dump from. The cachedump\n *                     command ties up the server and is strictly to be\n *                     used for debugging purposes.\n * @limit      int     Used in conjunction with type set to cachedump to\n *                     limit the number of entries to dump.\n *\n * @return     map     Returns a two-dimensional associative array of\n *                     server statistics or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "type", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "slabid", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "limit", "", (const char *)0xa /* KindOfInt64 */, "i:100;", (const char *)6, "100", (const char *)3, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setserverparams", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.setserverparams.php )\n *\n * Memcache::setServerParams() changes server parameters at runtime. You\n * can also use the memcache_set_server_params() function.\n *\n * This function has been added to Memcache version 2.1.0.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections.\n * @port       int     Point to the port where memcached is listening for\n *                     connections.\n * @timeout    int     Value in seconds which will be used for connecting\n *                     to the daemon. Think twice before changing the\n *                     default value of 1 second - you can lose all the\n *                     advantages of caching if your connection is too\n *                     slow.\n * @retry_interval\n *             int     Controls how often a failed server will be retried,\n *                     the default value is 15 seconds. Setting this\n *                     parameter to -1 disables automatic retry. Neither\n *                     this nor the persistent parameter has any effect\n *                     when the extension is loaded dynamically via dl().\n * @status     bool    Controls if the server should be flagged as online.\n *                     Setting this parameter to FALSE and retry_interval\n *                     to -1 allows a failed server to be kept in the pool\n *                     so as not to affect the key distribution algoritm.\n *                     Requests for this server will then failover or fail\n *                     immediately depending on the memcache.allow_failover\n *                     setting. Default to TRUE, meaning the server should\n *                     be considered online.\n * @failure_callback\n *             mixed   Allows the user to specify a callback function to\n *                     run upon encountering an error. The callback is run\n *                     before failover is attempted. The function takes two\n *                     parameters, the hostname and port of the failed\n *                     server.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:11211;", (const char *)8, "11211", (const char *)5, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "retry_interval", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "status", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "failure_callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "addserver", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.addserver.php )\n *\n * Memcache::addServer() adds a server to the connection pool. The\n * connection, which was opened using Memcache::addServer() will be\n * automatically closed at the end of script execution, you can also close\n * it manually with Memcache::close(). You can also use the\n * memcache_add_server() function.\n *\n * When using this method (as opposed to Memcache::connect() and\n * Memcache::pconnect()) the network connection is not established until\n * actually needed. Thus there is no overhead in adding a large number of\n * servers to the pool, even though they might not all be used.\n *\n * Failover may occur at any stage in any of the methods, as long as other\n * servers are available the request the user won't notice. Any kind of\n * socket or Memcached server level errors (except out-of-memory) may\n * trigger the failover. Normal client errors such as adding an existing\n * key will not trigger a failover.\n *\n * This function has been added to Memcache version 2.0.0.\n *\n * @host       string  Point to the host where memcached is listening for\n *                     connections. This parameter may also specify other\n *                     transports like unix:///path/to/memcached.sock to\n *                     use UNIX domain sockets, in this case port must also\n *                     be set to 0.\n * @port       int     Point to the port where memcached is listening for\n *                     connections. Set this parameter to 0 when using UNIX\n *                     domain sockets.\n * @persistent bool    Controls the use of a persistent connection. Default\n *                     to TRUE.\n * @weight     int     Number of buckets to create for this server which in\n *                     turn control its probability of it being selected.\n *                     The probability is relative to the total weight of\n *                     all servers.\n * @timeout    int     Value in seconds which will be used for connecting\n *                     to the daemon. Think twice before changing the\n *                     default value of 1 second - you can lose all the\n *                     advantages of caching if your connection is too\n *                     slow.\n * @retry_interval\n *             int     Controls how often a failed server will be retried,\n *                     the default value is 15 seconds. Setting this\n *                     parameter to -1 disables automatic retry. Neither\n *                     this nor the persistent parameter has any effect\n *                     when the extension is loaded dynamically via dl().\n *\n *                     Each failed connection struct has its own timeout\n *                     and before it has expired the struct will be skipped\n *                     when selecting backends to serve a request. Once\n *                     expired the connection will be successfully\n *                     reconnected or marked as failed for another\n *                     retry_interval seconds. The typical effect is that\n *                     each web server child will retry the connection\n *                     about every retry_interval seconds when serving a\n *                     page.\n * @status     bool    Controls if the server should be flagged as online.\n *                     Setting this parameter to FALSE and retry_interval\n *                     to -1 allows a failed server to be kept in the pool\n *                     so as not to affect the key distribution algorithm.\n *                     Requests for this server will then failover or fail\n *                     immediately depending on the memcache.allow_failover\n *                     setting. Default to TRUE, meaning the server should\n *                     be considered online.\n * @failure_callback\n *             mixed   Allows the user to specify a callback function to\n *                     run upon encountering an error. The callback is run\n *                     before failover is attempted. The function takes two\n *                     parameters, the hostname and port of the failed\n *                     server.\n * @timeoutms  int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "host", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "port", "", (const char *)0xa /* KindOfInt64 */, "i:11211;", (const char *)8, "11211", (const char *)5, NULL,
  (const char *)0x2000, "persistent", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "weight", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "timeout", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "retry_interval", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "status", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  (const char *)0x2000, "failure_callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "timeoutms", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__destruct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/memcache.destruct.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SQLite3", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.sqlite3.php )\n *\n * A class that interfaces SQLite 3 databases.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.construct.php )\n *\n *\n * @filename   string  Path to the SQLite database.\n * @flags      int     Optional flags used to determine how to open the\n *                     SQLite database. By default, open uses\n *                     SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE.\n *\n *                     SQLITE3_OPEN_READONLY: Open the database for\n *                     reading only.\n *\n *                     SQLITE3_OPEN_READWRITE: Open the database for\n *                     reading and writing.\n *\n *                     SQLITE3_OPEN_CREATE: Create the database if it does\n *                     not exist.\n * @encryption_key\n *             string  An optional encryption key used when encrypting and\n *                     decrypting an SQLite database.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "SQLITE3_OPEN_READWRITE|SQLITE3_OPEN_CREATE", (const char *)42, NULL,
  (const char *)0x2000, "encryption_key", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "open", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.open.php )\n *\n * Opens an SQLite 3 Database. If the build includes encryption, then it\n * will attempt to use the key.\n *\n * @filename   string  Path to the SQLite database.\n * @flags      int     Optional flags used to determine how to open the\n *                     SQLite database. By default, open uses\n *                     SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE.\n *\n *                     SQLITE3_OPEN_READONLY: Open the database for\n *                     reading only.\n *\n *                     SQLITE3_OPEN_READWRITE: Open the database for\n *                     reading and writing.\n *\n *                     SQLITE3_OPEN_CREATE: Create the database if it does\n *                     not exist.\n * @encryption_key\n *             string  An optional encryption key used when encrypting and\n *                     decrypting an SQLite database.\n *\n * @return     mixed   Returns TRUE on success, FALSE on failure to open\n *                     the database.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "flags", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "SQLITE3_OPEN_READWRITE|SQLITE3_OPEN_CREATE", (const char *)42, NULL,
  (const char *)0x2000, "encryption_key", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "busytimeout", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.busytimeout.php )\n *\n * Sets a busy handler that will sleep until the database is not locked or\n * the timeout is reached.\n *\n * @msecs      int     The milliseconds to sleep. Setting this value to a\n *                     value less than or equal to zero, will turn off an\n *                     already set timeout handler.\n *\n * @return     bool    Returns TRUE on success, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "msecs", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.close.php )\n *\n * Closes the database connection.\n *\n * @return     bool    Returns TRUE on success, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "exec", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.exec.php )\n *\n * Executes a result-less query against a given database.\n *\n * @sql        string  The SQL query to execute (typically an INSERT,\n *                     UPDATE, or DELETE query).\n *\n * @return     bool    Returns TRUE if the query succeeded, FALSE on\n *                     failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "version", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.version.php )\n *\n * Returns the SQLite3 library version as a string constant and as a\n * number.\n *\n * @return     map     Returns an associative array with the keys\n *                     \"versionString\" and \"versionNumber\".\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lastinsertrowid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.lastinsertrowid.php )\n *\n * Returns the row ID of the most recent INSERT into the database.\n *\n * @return     int     Returns the row ID of the most recent INSERT into\n *                     the database\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lasterrorcode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.lasterrorcode.php )\n *\n * Returns the numeric result code of the most recent failed SQLite\n * request.\n *\n * @return     int     Returns an integer value representing the numeric\n *                     result code of the most recent failed SQLite\n *                     request.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lasterrormsg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.lasterrormsg.php )\n *\n * Returns English text describing the most recent failed SQLite request.\n *\n * @return     string  Returns an English string describing the most recent\n *                     failed SQLite request.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "loadextension", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.loadextension.php )\n *\n * Attempts to load an SQLite extension library.\n *\n * @extension  string  The name of the library to load. The library must be\n *                     located in the directory specified in the configure\n *                     option sqlite3.extension_dir.\n *\n * @return     bool    Returns TRUE if the extension is successfully\n *                     loaded, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "extension", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "changes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.changes.php )\n *\n * Returns the number of database rows that were changed (or inserted or\n * deleted) by the most recent SQL statement.\n *\n * @return     int     Returns an integer value corresponding to the number\n *                     of database rows changed (or inserted or deleted) by\n *                     the most recent SQL statement.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "escapestring", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.escapestring.php )\n *\n * Returns a string that has been properly escaped for safe inclusion in\n * an SQL statement.\n *\n * @sql        string  The string to be escaped.\n *\n * @return     string  Returns a properly escaped string that may be used\n *                     safely in an SQL statement.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "prepare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.prepare.php )\n *\n * Prepares an SQL statement for execution and returns an SQLite3Stmt\n * object.\n *\n * @sql        string  The SQL query to prepare.\n *\n * @return     mixed   Returns an SQLite3Stmt object on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.query.php )\n *\n * Executes an SQL query, returning an SQLite3Result object if the query\n * returns results.\n *\n * @sql        string  The SQL query to execute.\n *\n * @return     mixed   Returns an SQLite3Result object if the query returns\n *                     results. Otherwise, returns TRUE if the query\n *                     succeeded, FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "querysingle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.querysingle.php )\n *\n * Executes a query and returns a single result.\n *\n * @sql        string  The SQL query to execute.\n * @entire_row bool    By default, querySingle returns the value of the\n *                     first column returned by the query. If entire_row is\n *                     TRUE, then it returns an array of the entire first\n *                     row.\n *\n * @return     mixed   Returns the value of the first column of results or\n *                     an array of the entire first row (if entire_row is\n *                     TRUE), otherwise FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "sql", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "entire_row", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createfunction", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.createfunction.php )\n *\n * Registers a PHP function or user-defined function for use as an SQL\n * scalar function for use within SQL statements.\n *\n * @name       string  Name of the SQL function to be created or redefined.\n * @callback   mixed   The name of a PHP function or user-defined function\n *                     to apply as a callback, defining the behavior of the\n *                     SQL function.\n * @argcount   int     The number of arguments that the SQL function takes.\n *                     If this parameter is negative, then the SQL function\n *                     may take any number of arguments.\n *\n * @return     bool    Returns TRUE upon successful creation of the\n *                     function, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "callback", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "argcount", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createaggregate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.createaggregate.php )\n *\n * Registers a PHP function or user-defined function for use as an SQL\n * aggregate function for use within SQL statements.\n *\n * @name       string  Name of the SQL aggregate to be created or\n *                     redefined.\n * @step       mixed   The name of a PHP function or user-defined function\n *                     to apply as a callback for every item in the\n *                     aggregate.\n * @final      mixed   The name of a PHP function or user-defined function\n *                     to apply as a callback at the end of the aggregate\n *                     data.\n * @argcount   int     The number of arguments that the SQL aggregate\n *                     takes. If this parameter is negative, then the SQL\n *                     aggregate may take any number of arguments.\n *\n * @return     bool    Returns TRUE upon successful creation of the\n *                     aggregate, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "step", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "final", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "argcount", "", (const char *)0xa /* KindOfInt64 */, "i:-1;", (const char *)5, "-1", (const char *)2, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openblob", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.openblob.php )\n *\n *\n * @table      string\n * @column     string\n * @rowid      int\n * @dbname     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "table", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "column", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "rowid", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "dbname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SQLite3Stmt", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.sqlite3stmt.php )\n *\n * A class that handles prepared statements for the SQLite 3 extension.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.construct.php )\n *\n *\n * @dbobject   object\n * @statement  string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "dbobject", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "statement", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "paramcount", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.paramcount.php )\n *\n * Returns the number of parameters within the prepared statement.\n *\n * @return     int     Returns the number of parameters within the prepared\n *                     statement.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "close", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.close.php )\n *\n * Closes the prepared statement.\n *\n * @return     bool    Returns TRUE\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "reset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.reset.php )\n *\n * Resets the prepared statement to its state prior to execution. All\n * bindings remain intact after reset.\n *\n * @return     bool    Returns TRUE if the statement is successfully reset,\n *                     FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "clear", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.clear.php )\n *\n * Clears all current bound parameters.\n *\n * @return     bool    Returns TRUE on successful clearing of bound\n *                     parameters, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bindparam", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.bindparam.php )\n *\n * Binds a parameter to a statement variable.\n *\n * @name       mixed   An string identifying the statement variable to\n *                     which the parameter should be bound.\n * @parameter  mixed   The parameter to bind to a statement variable.\n * @type       int     The data type of the parameter to bind.\n *\n *                     SQLITE3_INTEGER: The value is a signed integer,\n *                     stored in 1, 2, 3, 4, 6, or 8 bytes depending on the\n *                     magnitude of the value.\n *\n *                     SQLITE3_FLOAT: The value is a floating point value,\n *                     stored as an 8-byte IEEE floating point number.\n *\n *                     SQLITE3_TEXT: The value is a text string, stored\n *                     using the database encoding (UTF-8, UTF-16BE or\n *                     UTF-16-LE).\n *\n *                     SQLITE3_BLOB: The value is a blob of data, stored\n *                     exactly as it was input.\n *\n *                     SQLITE3_NULL: The value is a NULL value.\n *\n * @return     bool    Returns TRUE if the parameter is bound to the\n *                     statement variable, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "parameter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "SQLITE3_TEXT", (const char *)12, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "bindvalue", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.bindvalue.php )\n *\n * Binds the value of a parameter to a statement variable.\n *\n * @name       mixed   An string identifying the statement variable to\n *                     which the value should be bound.\n * @parameter  mixed   The value to bind to a statement variable.\n * @type       int     The data type of the value to bind.\n *\n *                     SQLITE3_INTEGER: The value is a signed integer,\n *                     stored in 1, 2, 3, 4, 6, or 8 bytes depending on the\n *                     magnitude of the value.\n *\n *                     SQLITE3_FLOAT: The value is a floating point value,\n *                     stored as an 8-byte IEEE floating point number.\n *\n *                     SQLITE3_TEXT: The value is a text string, stored\n *                     using the database encoding (UTF-8, UTF-16BE or\n *                     UTF-16-LE).\n *\n *                     SQLITE3_BLOB: The value is a blob of data, stored\n *                     exactly as it was input.\n *\n *                     SQLITE3_NULL: The value is a NULL value.\n *\n * @return     bool    Returns TRUE if the value is bound to the statement\n *                     variable, FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "parameter", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "SQLITE3_TEXT", (const char *)12, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "execute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.execute.php )\n *\n * Executes a prepared statement and returns a result set object.\n *\n * @return     mixed   Returns an SQLite3Result object on successful\n *                     execution of the prepared statement, FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SQLite3Result", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.sqlite3result.php )\n *\n * A class that handles result sets for the SQLite 3 extension.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "numcolumns", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.numcolumns.php )\n *\n * Returns the number of columns in the result set.\n *\n * @return     int     Returns the number of columns in the result set.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "columnname", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.columnname.php )\n *\n * Returns the name of the column specified by the column_number.\n *\n * @column     int     The numeric zero-based index of the column.\n *\n * @return     string  Returns the string name of the column identified by\n *                     column_number.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "column", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "columntype", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.columntype.php )\n *\n * Returns the type of the column identified by column_number.\n *\n * @column     int     The numeric zero-based index of the column.\n *\n * @return     int     Returns the data type index of the column identified\n *                     by column_number (one of SQLITE3_INTEGER,\n *                     SQLITE3_FLOAT, SQLITE3_TEXT, SQLITE3_BLOB, or\n *                     SQLITE3_NULL).\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "column", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fetcharray", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.fetcharray.php )\n *\n * Fetches a result row as an associative or numerically indexed array or\n * both. By default, fetches as both.\n *\n * @mode       int     Controls how the next row will be returned to the\n *                     caller. This value must be one of either\n *                     SQLITE3_ASSOC, SQLITE3_NUM, or SQLITE3_BOTH.\n *\n *                     SQLITE3_ASSOC: returns an array indexed by column\n *                     name as returned in the corresponding result set\n *\n *                     SQLITE3_NUM: returns an array indexed by column\n *                     number as returned in the corresponding result set,\n *                     starting at column 0\n *\n *                     SQLITE3_BOTH: returns an array indexed by both\n *                     column name and number as returned in the\n *                     corresponding result set, starting at column 0\n *\n * @return     mixed   Returns a result row as an associatively or\n *                     numerically indexed array or both.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "mode", "", (const char *)0xa /* KindOfInt64 */, "\001", (const char *)1, "SQLITE3_BOTH", (const char *)12, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "reset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.reset.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "finalize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.finalize.php )\n *\n * Closes the result set.\n *\n * @return     bool    Returns TRUE.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016000, "DebuggerProxyCmdUser", "", "", (const char *)0, (const char *)0,
  "/**\n * ( HipHop specific )\n *\n * DebuggerProxy wrapper for CmdUser\n *\n */",
  NULL,
  (const char *)0x10016040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Constructor of DebuggerProxyCmdUser.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "isLocal", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Whether this proxy is running locally for debugging a local script, or\n * running remotely on a server.\n *\n * @return     bool    TRUE if locally, FALSE if remote.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "send", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sends a command back to DebuggerClientCmdUser.\n *\n * @cmd        object  The command to send to client.\n *\n * @return     mixed   TRUE if successful, FALSE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cmd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016000, "DebuggerClientCmdUser", "", "", (const char *)0, (const char *)0,
  "/**\n * ( HipHop specific )\n *\n * DebuggerClient wrapper for CmdUser\n *\n */",
  NULL,
  (const char *)0x10016040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Constructor of DebuggerClientCmdUser.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "quit", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Quits the client.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "print", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Prints some text without any color.\n *\n * @format     string  Format string in printf() style.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "help", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Prints some text in help color.\n *\n * @format     string  Format string in printf() style.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "info", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Prints some text in information color.\n *\n * @format     string  Format string in printf() style.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "output", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Prints some text in script output color.\n *\n * @format     string  Format string in printf() style.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "error", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Prints some text in error color.\n *\n * @format     string  Format string in printf() style.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "code", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Pretty print PHP source code.\n *\n * @source     string  PHP source code to print.\n * @highlight_line\n *             int     Which line to focus or highlight.\n * @start_line_no\n *             int     Starting line number. 0 for no line no.\n * @end_line_no\n *             int     End line number. 0 for no end line no.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "highlight_line", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "start_line_no", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  (const char *)0x2000, "end_line_no", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "ask", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Ask end user a question.\n *\n * @format     string  Format string in printf() style.\n *\n * @return     mixed   Single letter response from end user.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "wrap", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Wraps some text to fit screen width.\n *\n * @str        string  String to wrap.\n *\n * @return     string  Formatted string.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "helpTitle", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Displays a title for a help topic.\n *\n * @str        string  Title text.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10036040, "helpCmds", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Displays a list of commands in help format. Each command has a name and\n * a short description, and specify more commands in pairs. For example,\n * $client->helpCmds('cmd1', 'desc1', 'cmd2', 'desc2').\n *\n * @cmd        string  Command name.\n * @desc       string  Command description.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "cmd", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "desc", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "helpBody", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Displays help contents. A help body is a help section with one empty\n * line before and one empty line after.\n *\n * @str        string  The help text.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "helpSection", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Displays a section of help text.\n *\n * @str        string  One section of help text.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "tutorial", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Tutorials are help texts displayed according to user's preference. In\n * auto mode (vs. always on or always off modes), one tutorial text is only\n * displayed just once to end user.\n *\n * @str        string  Help texts guiding end user for learning how to use\n *                     debugger.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "getCode", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * PHP code snippet user just typed in manually.\n *\n * @return     string  The PHP source code.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "getCommand", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Debugger command end user typed.\n *\n * @return     string  The command text.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "arg", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Tests if an argument matches a pre-defined keyword. As long as it\n * matches the keyword partially and case-insensitively, it is considered\n * as a match. For example, $client->arg(2, 'foo') will return TRUE if user\n * inputs 'f' or 'fo' or 'Fo' for the 2nd argument.\n *\n * @index      int     Argument index.\n * @str        string  The string to compare with.\n *\n * @return     bool    TRUE if matched. FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "argCount", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Count of total arguments.\n *\n * @return     int     The count, not including user command itself.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "argValue", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets value of an argument.\n *\n * @index      int     Argument index.\n *\n * @return     string  String value of an argument.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "lineRest", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets rest of line all together as a single string.\n *\n * @index      int     The starting index to include arguments.\n *\n * @return     string  The string that has all argument at and after\n *                     certain index.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "args", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "send", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Sends a debugger command to debugger proxy.\n *\n * @cmd        object  The command to send.\n *\n * @return     mixed   TRUE if successful, FALSE otherwise.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cmd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "xend", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Exchanges command with proxy: sends a command to debugger and expects\n * and receives a command from debugger.\n *\n * @cmd        object  The command to send.\n *\n * @return     mixed   The received command, and it is always the same type\n *                     as what it sends, so the same command class can\n *                     handle processing at both sending and receiving\n *                     sides.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cmd", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "getCurrentLocation", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets current source location.\n *\n * @return     mixed   An array in a format of array('file' => {source file\n *                     name}, 'line' => {line number}, 'namespace' =>\n *                     {namespace code is in}, 'class' => {class code is\n *                     in}, 'function' => {function code is in}, 'text' =>\n *                     {human readable description of current source\n *                     location}).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "getStackTrace", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Gets current stacktrace.\n *\n * @return     mixed   An array of stacktrace frames.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "getFrame", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Returns current frame index.\n *\n * @return     int     An index indicating which frame end user has moved\n *                     to for inspection.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "printFrame", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Prints a stacktrace frame.\n *\n * @index      int     Which frame to print.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "addCompletion", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Adds string(s) to auto-completion. This function is only effective\n * inside DebuggerClientCmdUser::onAutoComplete().\n *\n * @list       mixed   A single string, an AUTO_COMPLETE_ constant or an\n *                     array of strings.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "list", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "AUTO_COMPLETE_FILENAMES", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_FILENAMES, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_VARIABLES", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_VARIABLES, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_CONSTANTS", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_CONSTANTS, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_CLASSES", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_CLASSES, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_FUNCTIONS", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_FUNCTIONS, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_CLASS_METHODS", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_CLASS_METHODS, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_CLASS_PROPERTIES", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_CLASS_PROPERTIES, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_CLASS_CONSTANTS", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_CLASS_CONSTANTS, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_KEYWORDS", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_KEYWORDS, (const char *)0xc /* KindOfInt64 */, 
  "AUTO_COMPLETE_CODE", (const char*)&q_DebuggerClientCmdUser$$AUTO_COMPLETE_CODE, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x18016000, "DebuggerClient", "", "", (const char *)0, (const char *)0,
  "/**\n * ( HipHop specific )\n *\n *\n */",
  NULL,
  (const char *)0x10016040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Constructor\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "getState", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * get current state of the debugger client\n *\n * @return     int     One of the constants\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "init", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * initialize the debugger client\n *\n * @options    mixed   array for passing options\n *\n * @return     mixed   TBD\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "options", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016040, "processCmd", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * issue a command to debugger client\n *\n * @cmdName    mixed   name of the command to be executed\n * @args       mixed   A vector array of strings to be used as arguments\n *\n * @return     mixed   TBD\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "cmdName", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "args", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "STATE_INVALID", (const char*)&q_DebuggerClient$$STATE_INVALID, (const char *)0xc /* KindOfInt64 */, 
  "STATE_UNINIT", (const char*)&q_DebuggerClient$$STATE_UNINIT, (const char *)0xc /* KindOfInt64 */, 
  "STATE_INITIALIZING", (const char*)&q_DebuggerClient$$STATE_INITIALIZING, (const char *)0xc /* KindOfInt64 */, 
  "STATE_READY_FOR_COMMAND", (const char*)&q_DebuggerClient$$STATE_READY_FOR_COMMAND, (const char *)0xc /* KindOfInt64 */, 
  "STATE_BUSY", (const char*)&q_DebuggerClient$$STATE_BUSY, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "XMLWriter", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.xmlwriter.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openMemory", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.openmemory.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "openURI", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.openuri.php )\n *\n *\n * @uri        string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setIndentString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.setindentstring.php )\n *\n *\n * @indentstring\n *             string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "indentstring", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setIndent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.setindent.php )\n *\n *\n * @indent     bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "indent", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startDocument", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startdocument.php )\n *\n *\n * @version    string\n * @encoding   string\n * @standalone string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "version", "", (const char *)0x14 /* KindOfString */, "s:3:\"1.0\";", (const char *)10, "\"1.0\"", (const char *)5, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "standalone", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startelement.php )\n *\n *\n * @name       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startElementNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startelementns.php )\n *\n *\n * @prefix     string\n * @name       string\n * @uri        string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeElementNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writeelementns.php )\n *\n *\n * @prefix     string\n * @name       string\n * @uri        string\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writeelement.php )\n *\n *\n * @name       string\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.endelement.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fullEndElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.fullendelement.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startAttributens", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startattributens.php )\n *\n *\n * @prefix     string\n * @name       string\n * @uri        string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startattribute.php )\n *\n *\n * @name       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeAttributeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writeattributens.php )\n *\n *\n * @prefix     string\n * @name       string\n * @uri        string\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writeattribute.php )\n *\n *\n * @name       string\n * @value      string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.endattribute.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startCData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startcdata.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeCData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writecdata.php )\n *\n *\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endCData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.endcdata.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startComment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startcomment.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeComment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writecomment.php )\n *\n *\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endComment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.endcomment.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endDocument", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.enddocument.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startPI", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startpi.php )\n *\n *\n * @target     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writePI", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writepi.php )\n *\n *\n * @target     string\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endPI", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.endpi.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "text", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.text.php )\n *\n *\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeRaw", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writeraw.php )\n *\n *\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startDTD", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startdtd.php )\n *\n *\n * @qualifiedname\n *             string\n * @publicid   string\n * @systemid   string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeDTD", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writedtd.php )\n *\n *\n * @name       string\n * @publicid   string\n * @systemid   string\n * @subset     string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "subset", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startDTDElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startdtdelement.php )\n *\n *\n * @qualifiedname\n *             string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeDTDElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writedtdelement.php )\n *\n *\n * @name       string\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endDTDElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.enddtdelement.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startDTDAttlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startdtdattlist.php )\n *\n *\n * @name       string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeDTDAttlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writedtdattlist.php )\n *\n *\n * @name       string\n * @content    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endDTDAttlist", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.enddtdattlist.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "startDTDEntity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.startdtdentity.php )\n *\n *\n * @name       string\n * @isparam    bool\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isparam", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "writeDTDEntity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.writedtdentity.php )\n *\n *\n * @name       string\n * @content    string\n * @pe         bool\n * @publicid   string\n * @systemid   string\n * @ndataid    string\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "content", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "pe", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ndataid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endDTDEntity", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.enddtdentity.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "endDTD", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.enddtd.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "flush", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.flush.php )\n *\n *\n * @empty      bool\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "empty", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "outputMemory", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/xmlwriter.outputmemory.php )\n *\n *\n * @flush      bool\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "flush", "", (const char *)0x9 /* KindOfBoolean */, "b:1;", (const char *)4, "true", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "Collator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.collator.php )\n *\n * Provides string comparison capability with support for appropriate\n * locale-sensitive sort orderings.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.construct.php )\n *\n *\n * @locale     string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "locale", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "asort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.asort.php )\n *\n * Procedural style bool collator_asort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array such that array indices\n * maintain their correlation with the array elements they are associated\n * with. This is used mainly when sorting associative arrays where the\n * actual element order is significant. Array elements will have sort order\n * according to current locale rules.\n *\n * Equivalent to standard PHP asort().\n *\n * @arr        mixed   Collator object.\n * @sort_flag  int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "q_Collator$$SORT_REGULAR", (const char *)24, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "compare", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.compare.php )\n *\n * Procedural style int collator_compare ( Collator $coll , string $str1 ,\n * string $str2 ) Compare two Unicode strings according to collation rules.\n *\n * @str1       string  Collator object.\n * @str2       string  The first string to compare.\n *\n * @return     mixed   1 if str1 is greater than str2 ;\n *\n *                     0 if str1 is equal to str2;\n *\n *                     -1 if str1 is less than str2 . On error boolean\n *                     FALSE is returned. WarningThis function may return\n *                     Boolean FALSE, but may also return a non-Boolean\n *                     value which evaluates to FALSE, such as 0 or \"\".\n *                     Please read the section on Booleans for more\n *                     information. Use the === operator for testing the\n *                     return value of this function.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "str2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.create.php )\n *\n * Procedural style Collator collator_create ( string $locale ) The\n * strings will be compared using the options already specified.\n *\n * @locale     string  The locale containing the required collation rules.\n *                     Special values for locales can be passed in - if\n *                     null is passed for the locale, the default locale\n *                     collation rules will be used. If empty string (\"\")\n *                     or \"root\" are passed, UCA rules will be used.\n *\n * @return     mixed   Return new instance of Collator object, or NULL on\n *                     error.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "locale", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getattribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.getattribute.php )\n *\n * Procedural style int collator_get_attribute ( Collator $coll , int\n * $attr ) Get a value of an integer collator attribute.\n *\n * @attr       int     Collator object.\n *\n * @return     int     Attribute value, or boolean FALSE on error.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "attr", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "geterrorcode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.geterrorcode.php )\n *\n * Procedural style int collator_get_error_code ( Collator $coll )\n *\n * @return     int     Error code returned by the last Collator API\n *                     function call.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "geterrormessage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.geterrormessage.php )\n *\n * Procedural style string collator_get_error_message ( Collator $coll )\n * Retrieves the message for the last error.\n *\n * @return     string  Description of an error occurred in the last\n *                     Collator API function call.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getlocale", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.getlocale.php )\n *\n * Procedural style string collator_get_locale ( Collator $coll , int\n * $type ) Get collector locale name.\n *\n * @type       int     Collator object.\n *\n * @return     string  Real locale name from which the collation data\n *                     comes. If the collator was instantiated from rules\n *                     or an error occurred, returns boolean FALSE.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "type", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getstrength", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.getstrength.php )\n *\n * Procedural style int collator_get_strength ( Collator $coll )\n *\n * @return     int     Returns current collation strength, or boolean FALSE\n *                     on error.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setattribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.setattribute.php )\n *\n * Procedural style bool collator_set_attribute ( Collator $coll , int\n * $attr , int $val )\n *\n * @attr       int     Collator object.\n * @val        int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "attr", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "val", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setstrength", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.setstrength.php )\n *\n * Procedural style bool collator_set_strength ( Collator $coll , int\n * $strength ) The ICU Collation Service supports many levels of comparison\n * (named \"Levels\", but also known as \"Strengths\"). Having these categories\n * enables ICU to sort strings precisely according to local conventions.\n * However, by allowing the levels to be selectively employed, searching\n * for a string in text can be performed with various matching conditions.\n *\n *\n *\n * Primary Level: Typically, this is used to denote differences between\n * base characters (for example, \"a\" < \"b\"). It is the strongest\n * difference. For example, dictionaries are divided into different\n * sections by base character. This is also called the level1 strength.\n *\n * Secondary Level: Accents in the characters are considered secondary\n * differences. Other differences between letters can also be considered\n * secondary differences, depending on the language. A secondary difference\n * is ignored when there is a primary difference anywhere in the strings.\n * This is also called the level2 strength.\n *\n * Note: In some languages (such as Danish), certain accented letters are\n * considered to be separate base characters. In most languages, however,\n * an accented letter only has a secondary difference from the unaccented\n * version of that letter.\n *\n * Tertiary Level: Upper and lower case differences in characters are\n * distinguished at the tertiary level. In addition, a variant of a letter\n * differs from the base form on the tertiary level (such as \"A\" and \" \").\n * Another example is the difference between large and small Kana. A\n * tertiary difference is ignored when there is a primary or secondary\n * difference anywhere in the strings. This is also called the level3\n * strength.\n *\n * Quaternary Level: When punctuation is ignored (see Ignoring\n * Punctuations ) at level 13, an additional level can be used to\n * distinguish words with and without punctuation (for example, \"ab\" <\n * \"a-b\" < \"aB\"). This difference is ignored when there is a primary,\n * secondary or tertiary difference. This is also known as the level4\n * strength. The quaternary level should only be used if ignoring\n * punctuation is required or when processing Japanese text (see Hiragana\n * processing).\n *\n * Identical Level: When all other levels are equal, the identical level\n * is used as a tiebreaker. The Unicode code point values of the NFD form\n * of each string are compared at this level, just in case there is no\n * difference at levels 14. For example, Hebrew cantillation marks are only\n * distinguished at this level. This level should be used sparingly, as\n * only code point values differences between two strings is an extremely\n * rare occurrence. Using this level substantially decreases the\n * performance for both incremental comparison and sort key generation (as\n * well as increasing the sort key length). It is also known as level 5\n * strength.\n *\n * For example, people may choose to ignore accents or ignore accents and\n * case when searching for text. Almost all characters are distinguished by\n * the first three levels, and in most locales the default value is thus\n * Tertiary. However, if Alternate is set to be Shifted, then the\n * Quaternary strength can be used to break ties among whitespace,\n * punctuation, and symbols that would otherwise be ignored. If very fine\n * distinctions among characters are required, then the Identical strength\n * can be used (for example, Identical Strength distinguishes between the\n * Mathematical Bold Small A and the Mathematical Italic Small A.).\n * However, using levels higher than Tertiary the Identical strength result\n * in significantly longer sort keys, and slower string comparison\n * performance for equal strings.\n *\n * @strength   int     Collator object.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "strength", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sortwithsortkeys", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.sortwithsortkeys.php )\n *\n * Procedural style bool collator_sort_with_sort_keys ( Collator $coll ,\n * array &$arr ) Similar to collator_sort() but uses ICU sorting keys\n * produced by ucol_getSortKey() to gain more speed on large arrays.\n *\n * @arr        mixed   Collator object.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sort", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/collator.sort.php )\n *\n * Procedural style bool collator_sort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array according to current\n * locale rules.\n *\n * Equivalent to standard PHP sort() .\n *\n * @arr        mixed   Collator object.\n * @sort_flag  int     Array of strings to sort.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2800, "arr", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "sort_flag", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "q_Collator$$SORT_REGULAR", (const char *)24, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "SORT_REGULAR", (const char*)&q_Collator$$SORT_REGULAR, (const char *)0xc /* KindOfInt64 */, 
  "SORT_NUMERIC", (const char*)&q_Collator$$SORT_NUMERIC, (const char *)0xc /* KindOfInt64 */, 
  "SORT_STRING", (const char*)&q_Collator$$SORT_STRING, (const char *)0xc /* KindOfInt64 */, 
  "FRENCH_COLLATION", (const char*)&q_Collator$$FRENCH_COLLATION, (const char *)0xc /* KindOfInt64 */, 
  "ALTERNATE_HANDLING", (const char*)&q_Collator$$ALTERNATE_HANDLING, (const char *)0xc /* KindOfInt64 */, 
  "CASE_FIRST", (const char*)&q_Collator$$CASE_FIRST, (const char *)0xc /* KindOfInt64 */, 
  "CASE_LEVEL", (const char*)&q_Collator$$CASE_LEVEL, (const char *)0xc /* KindOfInt64 */, 
  "NORMALIZATION_MODE", (const char*)&q_Collator$$NORMALIZATION_MODE, (const char *)0xc /* KindOfInt64 */, 
  "STRENGTH", (const char*)&q_Collator$$STRENGTH, (const char *)0xc /* KindOfInt64 */, 
  "HIRAGANA_QUATERNARY_MODE", (const char*)&q_Collator$$HIRAGANA_QUATERNARY_MODE, (const char *)0xc /* KindOfInt64 */, 
  "NUMERIC_COLLATION", (const char*)&q_Collator$$NUMERIC_COLLATION, (const char *)0xc /* KindOfInt64 */, 
  "DEFAULT_VALUE", (const char*)&q_Collator$$DEFAULT_VALUE, (const char *)0xc /* KindOfInt64 */, 
  "PRIMARY", (const char*)&q_Collator$$PRIMARY, (const char *)0xc /* KindOfInt64 */, 
  "SECONDARY", (const char*)&q_Collator$$SECONDARY, (const char *)0xc /* KindOfInt64 */, 
  "TERTIARY", (const char*)&q_Collator$$TERTIARY, (const char *)0xc /* KindOfInt64 */, 
  "DEFAULT_STRENGTH", (const char*)&q_Collator$$DEFAULT_STRENGTH, (const char *)0xc /* KindOfInt64 */, 
  "QUATERNARY", (const char*)&q_Collator$$QUATERNARY, (const char *)0xc /* KindOfInt64 */, 
  "IDENTICAL", (const char*)&q_Collator$$IDENTICAL, (const char *)0xc /* KindOfInt64 */, 
  "OFF", (const char*)&q_Collator$$OFF, (const char *)0xc /* KindOfInt64 */, 
  "ON", (const char*)&q_Collator$$ON, (const char *)0xc /* KindOfInt64 */, 
  "SHIFTED", (const char*)&q_Collator$$SHIFTED, (const char *)0xc /* KindOfInt64 */, 
  "NON_IGNORABLE", (const char*)&q_Collator$$NON_IGNORABLE, (const char *)0xc /* KindOfInt64 */, 
  "LOWER_FIRST", (const char*)&q_Collator$$LOWER_FIRST, (const char *)0xc /* KindOfInt64 */, 
  "UPPER_FIRST", (const char*)&q_Collator$$UPPER_FIRST, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "Locale", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.locale.php )\n *\n * A \"Locale\" is an identifier used to get language, culture, or\n * regionally-specific behavior from an API. PHP locales are organized and\n * identified the same way that the CLDR locales used by ICU (and many\n * vendors of Unix-like operating systems, the Mac, Java, and so forth)\n * use. Locales are identified using RFC 4646 language tags (which use\n * hyphen, not underscore) in addition to the more traditional\n * underscore-using identifiers. Unless otherwise noted the functions in\n * this class are tolerant of both formats.\n *\n * Examples of identifiers include: en-US (English, United States)\n * zh-Hant-TW (Chinese, Traditional Script, Taiwan) fr-CA, fr-FR (French\n * for Canada and France respectively) The Locale class (and related\n * procedural functions) are used to interact with locale identifiers--to\n * verify that an ID is well-formed, valid, etc. The extensions used by\n * CLDR in UAX #35 (and inherited by ICU) are valid and used wherever they\n * would be in ICU normally. Locales cannot be instantiated as objects. All\n * of the functions/methods provided are static. The null or empty string\n * obtains the \"root\" locale. The \"root\" locale is equivalent to\n * \"en_US_POSIX\" in CLDR. Language tags (and thus locale identifiers) are\n * case insensitive. There exists a canonicalization function to make case\n * match the specification.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/locale.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "ACTUAL_LOCALE", (const char*)&q_Locale$$ACTUAL_LOCALE, (const char *)0xc /* KindOfInt64 */, 
  "VALID_LOCALE", (const char*)&q_Locale$$VALID_LOCALE, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "Normalizer", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.normalizer.php )\n *\n * Normalization is a process that involves transforming characters and\n * sequences of characters into a formally-defined underlying\n * representation. This process is most important when text needs to be\n * compared for sorting and searching, but it is also used when storing\n * text to ensure that the text is stored in a consistent representation.\n *\n * The Unicode Consortium has defined a number of normalization forms\n * reflecting the various needs of applications: Normalization Form D (NFD)\n * - Canonical Decomposition Normalization Form C (NFC) - Canonical\n * Decomposition followed by Canonical Composition Normalization Form KD\n * (NFKD) - Compatibility Decomposition Normalization Form KC (NFKC) -\n * Compatibility Decomposition followed by Canonical Composition The\n * different forms are defined in terms of a set of transformations on the\n * text, transformations that are expressed by both an algorithm and a set\n * of data files.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/normalizer.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "isnormalized", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/normalizer.isnormalized.php )\n *\n * Procedural style bool normalizer_is_normalized ( string $input [,\n * string $form = Normalizer::FORM_C ] ) Checks if the provided string is\n * already in the specified normalization form.\n *\n * @input      string\n * @form       int     One of the normalization forms.\n *\n * @return     mixed   TRUE if normalized, FALSE otherwise or if there an\n *                     error\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "form", "", (const char *)0xa /* KindOfInt64 */, "i:4;", (const char *)4, "q_Normalizer$$FORM_C", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "normalize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/normalizer.normalize.php )\n *\n * Procedural style string normalizer_normalize ( string $input [, string\n * $form = Normalizer::FORM_C ] ) Normalizes the input provided and returns\n * the normalized string\n *\n * @input      string\n * @form       int\n *\n * @return     mixed   NULL if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "input", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "form", "", (const char *)0xa /* KindOfInt64 */, "i:4;", (const char *)4, "q_Normalizer$$FORM_C", (const char *)20, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "NONE", (const char*)&q_Normalizer$$NONE, (const char *)0xc /* KindOfInt64 */, 
  "FORM_D", (const char*)&q_Normalizer$$FORM_D, (const char *)0xc /* KindOfInt64 */, 
  "NFD", (const char*)&q_Normalizer$$NFD, (const char *)0xc /* KindOfInt64 */, 
  "FORM_KD", (const char*)&q_Normalizer$$FORM_KD, (const char *)0xc /* KindOfInt64 */, 
  "NFKD", (const char*)&q_Normalizer$$NFKD, (const char *)0xc /* KindOfInt64 */, 
  "FORM_C", (const char*)&q_Normalizer$$FORM_C, (const char *)0xc /* KindOfInt64 */, 
  "NFC", (const char*)&q_Normalizer$$NFC, (const char *)0xc /* KindOfInt64 */, 
  "FORM_KC", (const char*)&q_Normalizer$$FORM_KC, (const char *)0xc /* KindOfInt64 */, 
  "NFKC", (const char*)&q_Normalizer$$NFKC, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "DOMNode", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domnode.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "appendChild", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.appendchild.php )\n *\n * This functions appends a child to an existing list of children or\n * creates a new list of children. The child can be created with e.g.\n * DOMDocument::createElement(), DOMDocument::createTextNode() etc. or\n * simply by using any other node.\n *\n * @newnode    object  The appended child.\n *\n * @return     mixed   The node added.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "newnode", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "cloneNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.clonenode.php )\n *\n * Creates a copy of the node.\n *\n * @deep       bool    Indicates whether to copy all descendant nodes. This\n *                     parameter is defaulted to FALSE.\n *\n * @return     mixed   The cloned node.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "deep", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getLineNo", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.getlineno.php )\n *\n * Gets line number for where the node is defined.\n *\n * @return     int     Always returns the line number where the node was\n *                     defined in.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hasAttributes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.hasattributes.php )\n *\n * This method checks if the node has attributes. The tested node have to\n * be an XML_ELEMENT_NODE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hasChildNodes", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.haschildnodes.php )\n *\n * This function checks if the node has children.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "insertBefore", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.insertbefore.php )\n *\n * This function inserts a new node right before the reference node. If\n * you plan to do further modifications on the appended child you must use\n * the returned node.\n *\n * @newnode    object  The new node.\n * @refnode    object  The reference node. If not supplied, newnode is\n *                     appended to the children.\n *\n * @return     mixed   The inserted node.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "newnode", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "refnode", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isDefaultNamespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.isdefaultnamespace.php )\n *\n * Tells whether namespaceURI is the default namespace.\n *\n * @namespaceuri\n *             string  The namespace URI to look for.\n *\n * @return     bool    Return TRUE if namespaceURI is the default\n *                     namespace, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isSameNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.issamenode.php )\n *\n * This function indicates if two nodes are the same node. The comparison\n * is not based on content\n *\n * @node       object  The compared node.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "node", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isSupported", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.issupported.php )\n *\n * Checks if the asked feature is supported for the specified version.\n *\n * @feature    string  The feature to test. See the example of\n *                     DOMImplementation::hasFeature() for a list of\n *                     features.\n * @version    string  The version number of the feature to test.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "feature", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "version", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lookupNamespaceUri", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.lookupnamespaceuri.php )\n *\n * Gets the namespace URI of the node based on the prefix.\n *\n * @namespaceuri\n *             string  The prefix of the namespace.\n *\n * @return     mixed   The namespace URI of the node.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "lookupPrefix", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.lookupprefix.php )\n *\n * Gets the namespace prefix of the node based on the namespace URI.\n *\n * @prefix     string  The namespace URI.\n *\n * @return     mixed   The prefix of the namespace.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "normalize", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.normalize.php )\n *\n * Normalizes the node.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeChild", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.removechild.php )\n *\n * This functions removes a child from a list of children.\n *\n * @node       object  The removed child.\n *\n * @return     mixed   If the child could be removed the functions returns\n *                     the old child.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "node", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "replaceChild", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.replacechild.php )\n *\n * This function replaces the child oldnode with the passed new node. If\n * the new node is already a child it will not be added a second time. If\n * the replacement succeeds the old node is returned.\n *\n * @newchildobj\n *             object  The new node. It must be a member of the target\n *                     document, i.e. created by one of the\n *                     DOMDocument->createXXX() methods or imported in the\n *                     document by DOMDocument::importNode.\n * @oldchildobj\n *             object  The old node.\n *\n * @return     mixed   The old node or FALSE if an error occur.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "newchildobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "oldchildobj", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "c14n", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.c14n.php )\n *\n *\n * @exclusive  bool\n * @with_comments\n *             bool\n * @xpath      mixed\n * @ns_prefixes\n *             mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "exclusive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "with_comments", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "xpath", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ns_prefixes", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "c14nfile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.c14nfile.php )\n *\n *\n * @uri        string\n * @exclusive  bool\n * @with_comments\n *             bool\n * @xpath      mixed\n * @ns_prefixes\n *             mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "exclusive", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "with_comments", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  (const char *)0x2000, "xpath", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "ns_prefixes", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getNodePath", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.getnodepath.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnode.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMAttr", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domattr.php )\n *\n * DOMAttr represents an attribute in the DOMElement object.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domattr.construct.php )\n *\n *\n * @name       string\n * @value      string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isId", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domattr.isid.php )\n *\n * This function checks if the attribute is a defined ID.\n *\n * According to the DOM standard this requires a DTD which defines the\n * attribute ID to be of type ID. You need to validate your document with\n * DOMDocument::validate or DOMDocument::validateOnParse before using this\n * function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domattr.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domattr.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domattr.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMCharacterData", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domcharacterdata.php )\n *\n * Represents nodes with character data. No nodes directly correspond to\n * this class, but other nodes do inherit from it.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "appendData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.appenddata.php\n * )\n *\n * Append the string data to the end of the character data of the node.\n *\n * @arg        string  The string to append.\n *\n * @return     bool    No value is returned.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "arg", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "deleteData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.deletedata.php\n * )\n *\n * Deletes count characters starting from position offset.\n *\n * @offset     int     The offset from which to start removing.\n * @count      int     The number of characters to delete. If the sum of\n *                     offset and count exceeds the length, then all\n *                     characters to the end of the data are deleted.\n *\n * @return     bool    No value is returned.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "insertData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.insertdata.php\n * )\n *\n * Inserts string data at position offset.\n *\n * @offset     int     The character offset at which to insert.\n * @data       string  The string to insert.\n *\n * @return     bool    No value is returned.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "replaceData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.replacedata.php\n * )\n *\n * Replace count characters starting from position offset with data.\n *\n * @offset     int     The offset from which to start replacing.\n * @count      int     The number of characters to replace. If the sum of\n *                     offset and count exceeds the length, then all\n *                     characters to the end of the data are replaced.\n * @data       string  The string with which the range must be replaced.\n *\n * @return     bool    No value is returned.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "substringData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domcharacterdata.substringdata.php )\n *\n * Returns the specified substring.\n *\n * @offset     int     Start offset of substring to extract.\n * @count      int     The number of characters to extract.\n *\n * @return     string  The specified substring. If the sum of offset and\n *                     count exceeds the length, then all 16-bit units to\n *                     the end of the data are returned.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "count", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMComment", "domcharacterdata", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domcomment.php )\n *\n * Represents comment nodes, characters delimited by <!-- and -->.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcomment.construct.php )\n *\n *\n * @value      string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMText", "domcharacterdata", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domtext.php )\n *\n * The DOMText class inherits from DOMCharacterData and represents the\n * textual content of a DOMElement or DOMAttr.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domtext.construct.php )\n *\n *\n * @value      string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isWhitespaceInElementContent", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domtext.iswhitespaceinelementcontent.php )\n *\n * Indicates whether this text node contains whitespace. The text node is\n * determined to contain whitespace in element content during the load of\n * the document.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "splitText", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domtext.splittext.php )\n *\n * Breaks this node into two nodes at the specified offset, keeping both\n * in the tree as siblings.\n *\n * After being split, this node will contain all the content up to the\n * offset. If the original node had a parent node, the new node is inserted\n * as the next sibling of the original node. When the offset is equal to\n * the length of this node, the new node has no data.\n *\n * @offset     int     The offset at which to split, starting from 0.\n *\n * @return     mixed   The new node of the same type, which contains all\n *                     the content at and after the offset.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "offset", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domtext.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domtext.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domtext.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMCDATASection", "domtext", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domcdatasection.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domcdatasection.construct.php )\n *\n *\n * @value      string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x18006000, "DOMDocument", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domdocument.php )\n *\n * Represents an entire HTML or XML document; serves as the root of the\n * document tree.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.construct.php )\n *\n *\n * @version    string\n * @encoding   string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "version", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createattribute.php\n * )\n *\n * This function creates a new instance of class DOMAttr. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @name       string  The name of the attribute.\n *\n * @return     mixed   The new DOMAttr or FALSE if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createAttributens", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createattributens.php )\n *\n * This function creates a new instance of class DOMAttr. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @namespaceuri\n *             string  The URI of the namespace.\n * @qualifiedname\n *             string  The tag name and prefix of the attribute, as\n *                     prefix:tagname.\n *\n * @return     mixed   The new DOMAttr or FALSE if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createCDATASection", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createcdatasection.php )\n *\n * This function creates a new instance of class DOMCDATASection. This\n * node will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @data       string  The content of the cdata.\n *\n * @return     mixed   The new DOMCDATASection or FALSE if an error\n *                     occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createComment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createcomment.php )\n *\n * This function creates a new instance of class DOMComment. This node\n * will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @data       string  The content of the comment.\n *\n * @return     mixed   The new DOMComment or FALSE if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createDocumentFragment", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createdocumentfragment.php )\n *\n * This function creates a new instance of class DOMDocumentFragment. This\n * node will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @return     mixed   The new DOMDocumentFragment or FALSE if an error\n *                     occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createElement", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createelement.php )\n *\n * This function creates a new instance of class DOMElement. This node\n * will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @name       string  The tag name of the element.\n * @value      string  The value of the element. By default, an empty\n *                     element will be created. The value can also be set\n *                     later with DOMElement->nodeValue.\n *\n * @return     mixed   Returns a new instance of class DOMElement or FALSE\n *                     if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createElementNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createelementns.php\n * )\n *\n * This function creates a new element node with an associated namespace.\n * This node will not show up in the document unless it is inserted with\n * (e.g.) DOMNode->appendChild().\n *\n * @namespaceuri\n *             string  The URI of the namespace.\n * @qualifiedname\n *             string  The qualified name of the element, as\n *                     prefix:tagname.\n * @value      string  The value of the element. By default, an empty\n *                     element will be created. You can also set the value\n *                     later with DOMElement->nodeValue.\n *\n * @return     mixed   The new DOMElement or FALSE if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createEntityReference", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createentityreference.php )\n *\n * This function creates a new instance of class DOMEntityReference. This\n * node will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @name       string  The content of the entity reference, e.g. the entity\n *                     reference minus the leading & and the trailing ;\n *                     characters.\n *\n * @return     mixed   The new DOMEntityReference or FALSE if an error\n *                     occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createProcessingInstruction", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createprocessinginstruction.php )\n *\n * This function creates a new instance of class DOMProcessingInstruction.\n * This node will not show up in the document unless it is inserted with\n * (e.g.) DOMNode->appendChild().\n *\n * @target     string  The target of the processing instruction.\n * @data       string  The content of the processing instruction.\n *\n * @return     mixed   The new DOMProcessingInstruction or FALSE if an\n *                     error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "target", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createTextNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createtextnode.php )\n *\n * This function creates a new instance of class DOMText. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @data       string  The content of the text.\n *\n * @return     mixed   The new DOMText or FALSE if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getElementById", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.getelementbyid.php )\n *\n * This function is similar to DOMDocument::getElementsByTagName but\n * searches for an element with a given id.\n *\n * For this function to work, you will need either to set some ID\n * attributes with DOMElement::setIdAttribute or a DTD which defines an\n * attribute to be of type ID. In the later case, you will need to validate\n * your document with DOMDocument::validate or DOMDocument->validateOnParse\n * before using this function.\n *\n * @elementid  string  The unique id value for an element.\n *\n * @return     mixed   Returns the DOMElement or NULL if the element is not\n *                     found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "elementid", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getElementsByTagName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.getelementsbytagname.php )\n *\n * This function returns a new instance of class DOMNodeList containing\n * the elements with a given tag name.\n *\n * @name       string  The name of the tag to match on. The special value *\n *                     matches all tags.\n *\n * @return     mixed   A new DOMNodeList object containing all the matched\n *                     elements.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getElementsByTagNameNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.getelementsbytagnamens.php )\n *\n * Returns a DOMNodeList of all elements with a given local name and a\n * namespace URI.\n *\n * @namespaceuri\n *             string  The namespace URI of the elements to match on. The\n *                     special value * matches all namespaces.\n * @localname  string  The local name of the elements to match on. The\n *                     special value * matches all local names.\n *\n * @return     mixed   A new DOMNodeList object containing all the matched\n *                     elements.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "importNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.importnode.php )\n *\n * This function returns a copy of the node to import and associates it\n * with the current document.\n *\n * @importednode\n *             object  The node to import.\n * @deep       bool    If set to TRUE, this method will recursively import\n *                     the subtree under the importedNode.\n *\n *                     To copy the nodes attributes deep needs to be set\n *                     to TRUE\n *\n * @return     mixed   The copied node or FALSE, if it cannot be copied.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "importednode", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "deep", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "load", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.load.php )\n *\n * Loads an XML document from a file. Warning Unix style paths with\n * forward slashes can cause significant performance degradation on Windows\n * systems; be sure to call realpath() in such a case.\n *\n * @filename   string  The path to the XML document.\n * @options    int     Bitwise OR of the libxml option constants.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "loadHTML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.loadhtml.php )\n *\n * The function parses the HTML contained in the string source. Unlike\n * loading XML, HTML does not have to be well-formed to load. This function\n * may also be called statically to load and create a DOMDocument object.\n * The static invocation may be used when no DOMDocument properties need to\n * be set prior to loading.\n *\n * @source     string  The HTML string.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "loadHTMLFile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.loadhtmlfile.php )\n *\n * The function parses the HTML document in the file named filename.\n * Unlike loading XML, HTML does not have to be well-formed to load.\n *\n * Though not recommended, this function may also be called statically to\n * load and create a DOMDocument object. The static invocation may be used\n * when no DOMDocument properties need to be set prior to loading. However,\n * doing so will result an in E_STRICT error being generated.\n *\n * @filename   string  The path to the HTML file.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "loadXML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.loadxml.php )\n *\n * Loads an XML document from a string.\n *\n * This method may also be called statically to load and create a\n * DOMDocument object. The static invocation may be used when no\n * DOMDocument properties need to be set prior to loading.\n *\n * @source     string  The string containing the XML.\n * @options    int     Bitwise OR of the libxml option constants.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "normalizeDocument", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.normalizedocument.php )\n *\n * This method acts as if you saved and then loaded the document, putting\n * the document in a \"normal\" form.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "registerNodeClass", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.registernodeclass.php )\n *\n * This method allows you to register your own extended DOM class to be\n * used afterward by the PHP DOM extension.\n *\n * This method is not part of the DOM standard.\n *\n * @baseclass  string  The DOM class that you want to extend. You can find\n *                     a list of these classes in the chapter introduction.\n * @extendedclass\n *             string  Your extended class name. If NULL is provided, any\n *                     previously registered class extending baseclass will\n *                     be removed.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "baseclass", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "extendedclass", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "relaxNGValidate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.relaxngvalidate.php\n * )\n *\n *\n * @filename   string  The RNG file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "relaxNGValidateSource", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.relaxngvalidatesource.php )\n *\n *\n * @source     string  A string containing the RNG schema.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "save", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.save.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @file       string  The path to the saved XML document.\n * @options    int     Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n *\n * @return     mixed   Returns the number of bytes written or FALSE if an\n *                     error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "saveHTML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.savehtml.php )\n *\n * Creates an HTML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @return     mixed   Returns the HTML, or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "saveHTMLFile", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.savehtmlfile.php )\n *\n * Creates an HTML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @file       string  The path to the saved HTML document.\n *\n * @return     mixed   Returns the number of bytes written or FALSE if an\n *                     error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "file", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "saveXML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.savexml.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @node       object  Use this parameter to output only a specific node\n *                     without XML declaration rather than the entire\n *                     document.\n * @options    int     Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n *\n * @return     mixed   Returns the XML, or FALSE if an error occurred.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "node", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "schemaValidate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.schemavalidate.php )\n *\n * Validates a document based on the given schema file.\n *\n * @filename   string  The path to the schema.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "filename", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "schemaValidateSource", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.schemavalidatesource.php )\n *\n * Validates a document based on a schema defined in the given string.\n *\n * @source     string  A string containing the schema.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "validate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.validate.php )\n *\n * Validates the document based on its DTD.\n *\n * You can also use the validateOnParse property of DOMDocument to make a\n * DTD validation.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. If the\n *                     document have no DTD attached, this method will\n *                     return FALSE.\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "xinclude", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.xinclude.php )\n *\n *\n * @options    int     libxml parameters. Available since PHP 5.1.0 and\n *                     Libxml 2.6.7.\n *\n * @return     mixed   Returns the number of XIncludes in the document, -1\n *                     if some processing failed, or FALSE if there were no\n *                     substitutions.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "options", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocument.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMDocumentFragment", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domdocumentfragment.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocumentfragment.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "appendXML", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocumentfragment.appendxml.php )\n *\n * Appends raw XML data to a DOMDocumentFragment.\n *\n * This method is not part of the DOM standard. It was created as a\n * simpler approach for appending an XML DocumentFragment in a DOMDocument.\n *\n * If you want to stick to the standards, you will have to create a\n * temporary DOMDocument with a dummy root and then loop through the child\n * nodes of the root of your XML data to append them.\n *\n * @data       string  XML to append.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "data", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMDocumentType", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domdocumenttype.php )\n *\n * Each DOMDocument has a doctype attribute whose value is either NULL or\n * a DOMDocumentType object.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMElement", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domelement.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.construct.php )\n *\n *\n * @name       string\n * @value      string\n * @namespaceuri\n *             string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.getattribute.php )\n *\n * Gets the value of the attribute with name name for the current node.\n *\n * @name       string  The name of the attribute.\n *\n * @return     string  The value of the attribute, or an empty string if no\n *                     attribute with the given name is found.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttributeNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.getattributenode.php\n * )\n *\n * Returns the attribute node with name name for the current element.\n *\n * @name       string  The name of the attribute.\n *\n * @return     mixed   The attribute node.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttributeNodeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.getattributenodens.php )\n *\n * Returns the attribute node in namespace namespaceURI with local name\n * localName for the current node.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     object  The attribute node.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getAttributeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.getattributens.php )\n *\n * Gets the value of the attribute in namespace namespaceURI with local\n * name localName for the current node.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     string  The value of the attribute, or an empty string if no\n *                     attribute with the given localName and namespaceURI\n *                     is found.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getElementsByTagName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.getelementsbytagname.php )\n *\n * This function returns a new instance of the class DOMNodeList of all\n * descendant elements with a given tag name, in the order in which they\n * are encountered in a preorder traversal of this element tree.\n *\n * @name       string  The tag name. Use * to return all elements within\n *                     the element tree.\n *\n * @return     object  This function returns a new instance of the class\n *                     DOMNodeList of all matched elements.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getElementsByTagNameNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.getelementsbytagnamens.php )\n *\n * This function fetch all the descendant elements with a given localName\n * and namespaceURI.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name. Use * to return all elements within\n *                     the element tree.\n *\n * @return     object  This function returns a new instance of the class\n *                     DOMNodeList of all matched elements in the order in\n *                     which they are encountered in a preorder traversal\n *                     of this element tree.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hasAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.hasattribute.php )\n *\n * Indicates whether attribute named name exists as a member of the\n * element.\n *\n * @name       string  The attribute name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hasAttributeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.hasattributens.php )\n *\n * Indicates whether attribute in namespace namespaceURI named localName\n * exists as a member of the element.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.removeattribute.php )\n *\n * Removes attribute named name from the element.\n *\n * @name       string  The name of the attribute.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeAttributeNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.removeattributenode.php )\n *\n * Removes attribute oldnode from the element.\n *\n * @oldattr    object  The attribute node.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "oldattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "removeAttributeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.removeattributens.php\n * )\n *\n * Removes attribute is namespace namespaceURI named localName from the\n * element.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.setattribute.php )\n *\n * Sets an attribute with name name to the given value. If the attribute\n * does not exist, it will be created.\n *\n * @name       string  The name of the attribute.\n * @value      string  The value of the attribute.\n *\n * @return     mixed   The new DOMAttr or FALSE if an error occured.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAttributeNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.setattributenode.php\n * )\n *\n * Adds new attribute node attr to element.\n *\n * @newattr    object  The attribute node.\n *\n * @return     mixed   Returns old node if the attribute has been replaced\n *                     or NULL.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "newattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAttributeNodeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.setattributenodens.php )\n *\n * Adds new attribute node attr to element.\n *\n * @newattr    object  The attribute node.\n *\n * @return     mixed   Returns the old node if the attribute has been\n *                     replaced.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "newattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAttributeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.setattributens.php )\n *\n * Sets an attribute with namespace namespaceURI and name name to the\n * given value. If the attribute does not exist, it will be created.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @name       string  The qualified name of the attribute, as\n *                     prefix:tagname.\n * @value      string  The value of the attribute.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setIDAttribute", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.setidattribute.php )\n *\n * Declares the attribute name to be of type ID.\n *\n * @name       string  The name of the attribute.\n * @isid       bool    Set it to TRUE if you want name to be of type ID,\n *                     FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isid", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setIDAttributeNode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.setidattributenode.php )\n *\n * Declares the attribute specified by attr to be of type ID.\n *\n * @idattr     object  The attribute node.\n * @isid       bool    Set it to TRUE if you want name to be of type ID,\n *                     FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "idattr", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isid", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setIDAttributeNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.setidattributens.php\n * )\n *\n * Declares the attribute specified by localName and namespaceURI to be of\n * type ID.\n *\n * @namespaceuri\n *             string  The namespace URI of the attribute.\n * @localname  string  The local name of the attribute, as prefix:tagname.\n * @isid       bool    Set it to TRUE if you want name to be of type ID,\n *                     FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "isid", "", (const char *)0x9 /* KindOfBoolean */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domelement.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMEntity", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domentity.php )\n *\n * This interface represents a known entity, either parsed or unparsed, in\n * an XML document.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domentity.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domentity.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domentity.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domentity.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMEntityReference", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domentityreference.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domentityreference.construct.php\n * )\n *\n *\n * @name       string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMNotation", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domnotation.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnotation.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnotation.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnotation.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnotation.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMProcessingInstruction", "domnode", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/class.domprocessinginstruction.php )\n *\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.construct.php )\n *\n *\n * @name       string\n * @value      string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domprocessinginstruction.get.php\n * )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domprocessinginstruction.set.php\n * )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x18006000, "DOMNodeIterator", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domnodeiterator.php )\n *\n *\n */",
  "iterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.current.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.key.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.next.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.rewind.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.valid.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMNamedNodeMap", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domnamednodemap.php )\n *\n *\n */",
  "iteratoraggregate", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getNamedItem", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.getnameditem.php\n * )\n *\n * Retrieves a node specified by its nodeName.\n *\n * @name       string  The nodeName of the node to retrieve.\n *\n * @return     mixed   A node (of any type) with the specified nodeName, or\n *                     NULL if no node is found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getNamedItemNS", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domnamednodemap.getnameditemns.php )\n *\n * Retrieves a node specified by localName and namespaceURI.\n *\n * @namespaceuri\n *             string  The namespace URI of the node to retrieve.\n * @localname  string  The local name of the node to retrieve.\n *\n * @return     mixed   A node (of any type) with the specified local name\n *                     and namespace URI, or NULL if no node is found.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "localname", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "item", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.item.php )\n *\n * Retrieves a node specified by index within the DOMNamedNodeMap object.\n *\n * @index      int     Index into this map.\n *\n * @return     mixed   The node at the indexth position in the map, or NULL\n *                     if that is not a valid index (greater than or equal\n *                     to the number of nodes in this map).\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.getiterator.php\n * )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMNodeList", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domnodelist.php )\n *\n *\n */",
  "iteratoraggregate", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "item", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.item.php )\n *\n * Retrieves a node specified by index within the DOMNodeList object. Tip\n *\n * If you need to know the number of nodes in the collection, use the\n * length property of the DOMNodeList object.\n *\n * @index      int     Index of the node into the collection.\n *\n * @return     mixed   The node at the indexth position in the DOMNodeList,\n *                     or NULL if that is not a valid index.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "index", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getIterator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.getiterator.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DOMImplementation", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domimplementation.php )\n *\n * The DOMImplementation interface provides a number of methods for\n * performing operations that are independent of any particular instance of\n * the document object model.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domimplementation.construct.php\n * )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createDocument", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domimplementation.createdocument.php )\n *\n * Creates a DOMDocument object of the specified type with its document\n * element.\n *\n * @namespaceuri\n *             string  The namespace URI of the document element to create.\n * @qualifiedname\n *             string  The qualified name of the document element to\n *                     create.\n * @doctypeobj object  The type of document to create or NULL.\n *\n * @return     mixed   A new DOMDocument object. If namespaceURI,\n *                     qualifiedName, and doctype are null, the returned\n *                     DOMDocument is empty with no document element\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "namespaceuri", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "doctypeobj", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "createDocumentType", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domimplementation.createdocumenttype.php )\n *\n * Creates an empty DOMDocumentType object. Entity declarations and\n * notations are not made available. Entity reference expansions and\n * default attribute additions do not occur.\n *\n * @qualifiedname\n *             string  The qualified name of the document type to create.\n * @publicid   string  The external subset public identifier.\n * @systemid   string  The external subset system identifier.\n *\n * @return     mixed   A new DOMDocumentType node with its ownerDocument\n *                     set to NULL.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "qualifiedname", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "publicid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  (const char *)0x2000, "systemid", "", (const char *)0x14 /* KindOfString */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "hasFeature", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domimplementation.hasfeature.php\n * )\n *\n *\n * @feature    string  The feature to test.\n * @version    string  The version number of the feature to test. In level\n *                     2, this can be either 2.0 or 1.0.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "feature", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "version", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x18006000, "DOMXPath", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.domxpath.php )\n *\n * Supports XPath 1.0\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.construct.php )\n *\n *\n * @doc        mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "doc", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "evaluate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.evaluate.php )\n *\n * Executes the given XPath expression and returns a typed result if\n * possible.\n *\n * @expr       string  The XPath expression to execute.\n * @context    object  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n *\n * @return     mixed   Returns a typed result if possible or a DOMNodeList\n *                     containing all nodes matching the given XPath\n *                     expression.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "expr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "query", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.query.php )\n *\n * Executes the given XPath expression.\n *\n * @expr       string  The XPath expression to execute.\n * @context    object  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n *\n * @return     mixed   Returns a DOMNodeList containing all nodes matching\n *                     the given XPath expression. Any expression which do\n *                     not return nodes will return an empty DOMNodeList.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "expr", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "context", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "registerNamespace", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.registernamespace.php )\n *\n * Registers the namespaceURI and prefix with the DOMXPath object.\n *\n * @prefix     string  The prefix.\n * @uri        string  The URI of the namespace.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "prefix", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "uri", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "registerPHPFunctions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/domxpath.registerphpfunctions.php )\n *\n * This method enables the ability to use PHP functions within XPath\n * expressions.\n *\n * @funcs      mixed   Use this parameter to only allow certain functions\n *                     to be called from XPath.\n *\n *                     This parameter can be either a string (a function\n *                     name) or an array of function names.\n *\n * @return     mixed   No value is returned.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "funcs", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__isset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/domxpath.isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "name", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DateTime", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.datetime.php )\n *\n * Representation of date and time.\n *\n */",
  NULL,
  (const char *)0x10006040, "add", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.add.php )\n *\n * Add an interval to a datetime object\n *\n * @interval   object  DateInterval object containing the time to add.\n *\n * @return     object  Returns the DateTime object for method chaining\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "interval", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.construct.php )\n *\n *\n * @time       string\n * @timezone   object\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "time", "", (const char *)0x14 /* KindOfString */, "s:3:\"now\";", (const char *)10, "\"now\"", (const char *)5, NULL,
  (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "createFromFormat", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.createfromformat.php )\n *\n * Parse a date according to a format and create a DateTime object\n *\n * @format     string  DateTime format specifier\n * @time       string  Date and time to parse\n * @timezone   object  DateTimeZone for the given time\n *\n * @return     object  Returns a new DateTime object\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "time", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "diff", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.diff.php )\n *\n * Find the interval between two DateTime objects\n *\n * @datetime2  object  DateTime object to compare agains\n * @absolute   bool    Whether to return absolute difference\n *\n * @return     object  Returns a DateIntervalobject representing the\n *                     distance between two times\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "datetime2", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "absolute", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.format.php )\n *\n * Procedural style string date_format ( DateTime $object , string $format\n * ) Returns date formatted according to given format.\n *\n * @format     string  DateTime object returned by date_create()\n *\n * @return     string  Returns the formatted date string on success or\n *                     FALSE on failure.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getLastErrors", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.getlasterrors.php )\n *\n * Returns the last errors encountered by the datetime extension\n *\n * @return     vector  Vector of error messages\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getOffset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.getoffset.php )\n *\n * Procedural style int date_offset_get ( DateTime $object ) Returns the\n * timezone offset.\n *\n * @return     int     Returns the timezone offset in seconds from UTC on\n *                     success or FALSE on failure.\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getTimestamp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.gettimestamp.php )\n *\n * Returns the unix timestamp representing the date.\n *\n * @return     int     Epoch representing the datetime object\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getTimezone", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.gettimezone.php )\n *\n * Procedural style DateTimeZone date_timezone_get ( DateTime $object )\n * Return time zone relative to given DateTime.\n *\n * @return     mixed   Returns a DateTimeZone object on success or FALSE on\n *                     failure.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "modify", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.modify.php )\n *\n * Procedural style DateTime date_modify ( DateTime $object , string\n * $modify ) Alter the timestamp of a DateTime object by incrementing or\n * decrementing in a format accepted by strtotime().\n *\n * @modify     string  DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "modify", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setDate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.setdate.php )\n *\n * Procedural style DateTime date_date_set ( DateTime $object , int $year\n * , int $month , int $day ) Resets the current date of the DateTime object\n * to a different date.\n *\n * @year       int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n * @month      int     Year of the date.\n * @day        int     Month of the date.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "month", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setISODate", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.setisodate.php )\n *\n * Procedural style DateTime date_isodate_set ( DateTime $object , int\n * $year , int $week [, int $day = 1 ] ) Set a date according to the ISO\n * 8601 standard - using weeks and day offsets rather than specific dates.\n *\n * @year       int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n * @week       int     Year of the date.\n * @day        int     Week of the date.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "year", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "week", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "day", "", (const char *)0xa /* KindOfInt64 */, "i:1;", (const char *)4, "1", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setTime", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.settime.php )\n *\n * Procedural style DateTime date_time_set ( DateTime $object , int $hour\n * , int $minute [, int $second = 0 ] ) Resets the current time of the\n * DateTime object to a different time.\n *\n * @hour       int     DateTime object returned by date_create(). The\n *                     function modifies this object.\n * @minute     int     Hour of the time.\n * @second     int     Minute of the time.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "hour", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "minute", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "second", "", (const char *)0xa /* KindOfInt64 */, "i:0;", (const char *)4, "0", (const char *)1, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setTimestamp", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.settimestamp.php )\n *\n * Set the DateTime object according to the timestamp provided\n *\n * @unixtimestamp\n *             int     Unix timestamp to update the DateTime object to.\n *\n * @return     object  Returns the DateTime object for method chaining\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "unixtimestamp", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setTimezone", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.settimezone.php )\n *\n * Procedural style DateTime date_timezone_set ( DateTime $object ,\n * DateTimeZone $timezone )\n *\n * @timezone   object  DateTime object returned by date_create(). The\n *                     function modifies this object.\n *\n * @return     object  Returns the modified DateTime object or FALSE on\n *                     failure.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "timezone", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "sub", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetime.sub.php )\n *\n * Subtract an interval from a datetime object\n *\n * @interval   object  DateInterval object containing the time to subtract.\n *\n * @return     object  Returns the DateTime object for method chaining\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "interval", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "ATOM", (const char*)&q_DateTime$$ATOM, (const char *)0x16 /* KindOfString */, 
  "COOKIE", (const char*)&q_DateTime$$COOKIE, (const char *)0x16 /* KindOfString */, 
  "ISO8601", (const char*)&q_DateTime$$ISO8601, (const char *)0x16 /* KindOfString */, 
  "RFC822", (const char*)&q_DateTime$$RFC822, (const char *)0x16 /* KindOfString */, 
  "RFC850", (const char*)&q_DateTime$$RFC850, (const char *)0x16 /* KindOfString */, 
  "RFC1036", (const char*)&q_DateTime$$RFC1036, (const char *)0x16 /* KindOfString */, 
  "RFC1123", (const char*)&q_DateTime$$RFC1123, (const char *)0x16 /* KindOfString */, 
  "RFC2822", (const char*)&q_DateTime$$RFC2822, (const char *)0x16 /* KindOfString */, 
  "RFC3339", (const char*)&q_DateTime$$RFC3339, (const char *)0x16 /* KindOfString */, 
  "RSS", (const char*)&q_DateTime$$RSS, (const char *)0x16 /* KindOfString */, 
  "W3C", (const char*)&q_DateTime$$W3C, (const char *)0x16 /* KindOfString */, 
  NULL,
  NULL,
  (const char *)0x10006000, "DateTimeZone", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.datetimezone.php )\n *\n * Representation of time zone.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.construct.php )\n *\n *\n * @timezone   string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "timezone", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getLocation", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.getlocation.php )\n *\n * Returns location information for a timezone\n *\n * @return     vector  Array containing location information about\n *                     timezone.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.getname.php )\n *\n * Procedural style string timezone_name_get ( void ) Returns the name of\n * the timezone.\n *\n * @return     string  One of timezones.\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getOffset", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.getoffset.php )\n *\n * Procedural style int timezone_offset_get ( DateTimeZone $object ,\n * DateTime $datetime ) This function returns the offset to GMT for the\n * date/time specified in the datetime parameter. The GMT offset is\n * calculated with the timezone information contained in the DateTimeZone\n * object being used.\n *\n * @datetime   object  DateTimeZone object returned by timezone_open()\n *\n * @return     int     Returns time zone offset in seconds on success or\n *                     FALSE on failure.\n */",
  (const char *)0xa /* KindOfInt64 */, (const char *)0x2000, "datetime", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getTransitions", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.gettransitions.php\n * )\n *\n * Procedural style array timezone_transitions_get ( DateTimeZone $object\n * [, int $timestamp_begin [, int $timestamp_end ]] )\n *\n * @return     map     Returns numerically indexed array containing\n *                     associative array with all transitions on success or\n *                     FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "listAbbreviations", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/datetimezone.listabbreviations.php )\n *\n * Procedural style array timezone_abbreviations_list ( void )\n *\n * @return     map     Returns array on success or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "listIdentifiers", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/datetimezone.listidentifiers.php\n * )\n *\n * Procedural style array timezone_identifiers_list ([ int $what =\n * DateTimeZone::ALL [, string $country = NULL ]] )\n *\n * @return     map     Returns array on success or FALSE on failure.\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "AFRICA", (const char*)&q_DateTimeZone$$AFRICA, (const char *)0xc /* KindOfInt64 */, 
  "AMERICA", (const char*)&q_DateTimeZone$$AMERICA, (const char *)0xc /* KindOfInt64 */, 
  "ANTARCTICA", (const char*)&q_DateTimeZone$$ANTARCTICA, (const char *)0xc /* KindOfInt64 */, 
  "ARCTIC", (const char*)&q_DateTimeZone$$ARCTIC, (const char *)0xc /* KindOfInt64 */, 
  "ASIA", (const char*)&q_DateTimeZone$$ASIA, (const char *)0xc /* KindOfInt64 */, 
  "ATLANTIC", (const char*)&q_DateTimeZone$$ATLANTIC, (const char *)0xc /* KindOfInt64 */, 
  "AUSTRALIA", (const char*)&q_DateTimeZone$$AUSTRALIA, (const char *)0xc /* KindOfInt64 */, 
  "EUROPE", (const char*)&q_DateTimeZone$$EUROPE, (const char *)0xc /* KindOfInt64 */, 
  "INDIAN", (const char*)&q_DateTimeZone$$INDIAN, (const char *)0xc /* KindOfInt64 */, 
  "PACIFIC", (const char*)&q_DateTimeZone$$PACIFIC, (const char *)0xc /* KindOfInt64 */, 
  "UTC", (const char*)&q_DateTimeZone$$UTC, (const char *)0xc /* KindOfInt64 */, 
  "ALL", (const char*)&q_DateTimeZone$$ALL, (const char *)0xc /* KindOfInt64 */, 
  "ALL_WITH_BC", (const char*)&q_DateTimeZone$$ALL_WITH_BC, (const char *)0xc /* KindOfInt64 */, 
  "PER_COUNTRY", (const char*)&q_DateTimeZone$$PER_COUNTRY, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006000, "DateInterval", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.dateinterval.php )\n *\n * Represents a date interval.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.construct.php )\n *\n * Creates a new DateInterval object\n *\n * @interval_spec\n *             string\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "interval_spec", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__get", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.get.php )\n *\n * Retreives interval partials (y, m, d, etc...)\n *\n * @member     mixed   One of 'y', 'm', 'd', 'h', 'i', 's', 'invert', or\n *                     'days'.  All other vales will return null and throw\n *                     undefined property notice.\n *\n * @return     mixed   Number of years, months, days, hours, minutes,\n *                     seconds, or total days for DateInterval, or\n *                     true/false for date inversion.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "member", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__set", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.set.php )\n *\n * Sets interval partials (y, m, d, etc...)\n *\n * @member     mixed   One of 'y', 'm', 'd', 'h', 'i', 's', 'invert', or\n *                     'days'.  All other vales will throw undefined\n *                     property notice and ignore value.\n * @value      mixed   Either a boolean for 'invert', or a number.\n *\n * @return     mixed   Always returns NULL.\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "member", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "createFromDateString", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/dateinterval.createfromdatestring.php )\n *\n * Sets up a DateInterval from the relative parts of the string\n *\n * @time       string  A date with relative parts. Specifically, the\n *                     relative formats supported by the parser used for\n *                     strtotime() and DateTime will be used to construct\n *                     the DateInterval.\n *\n * @return     object  Returns a new DateInterval instance.\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "time", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "format", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dateinterval.format.php )\n *\n * Formats the interval\n *\n * @format     string  DateInterval format specifier.\n *\n * @return     string  Returns the formatted interval.\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "format", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "EncodingDetector", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.encodingdetector.php )\n *\n * Guesses the encoding of an array of bytes in an unknown encoding (see\n * http://icu-project.org/apiref/icu4c/ucsdet_8h.html)\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingdetector.construct.php )\n *\n * Creates an encoding detector.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setText", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingdetector.settext.php )\n *\n * Sets the input byte array whose encoding is to be guessed.\n *\n * @text       string  A byte array whose encoding is to be guessed.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setDeclaredEncoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/encodingdetector.setdeclaredencoding.php )\n *\n * If the user provided an encoding in metadata (like an HTTP or XML\n * declaration), this can be used as an additional hint to the detector.\n *\n * @text       string  Possible encoding for the byte array obtained from\n *                     associated metadata\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "detect", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingdetector.detect.php )\n *\n * Returns an EncodingMatch object containing the best guess for the\n * encoding of the byte array\n *\n * @return     object  EncodingMatch object for the best guess of the\n *                     encoding of the byte array\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "detectAll", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingdetector.detectall.php )\n *\n * Returns an array of EncodingMatch objects containing all guesses for\n * the encoding of the byte array\n *\n * @return     vector  Array of EncodingMatch objects for all guesses of\n *                     the encoding of the byte array\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "EncodingMatch", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.encodingmatch.php )\n *\n * Result of detecting the encoding of an array of bytes\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingmatch.construct.php )\n *\n * Internal only: Creates an encoding match.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isValid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingmatch.isvalid.php )\n *\n * Checks if the encoding match succeeded.\n *\n * @return     bool    true if the match succeeded, false otherwise\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getEncoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingmatch.getencoding.php )\n *\n * Gets the name of the detected encoding\n *\n * @return     string  The name of the detected encoding\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getConfidence", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingmatch.getconfidence.php\n * )\n *\n * Gets the confidence number of the encoding match\n *\n * @return     int     Confidence number from 0 (no confidence) to 100\n *                     (complete confidence)\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getLanguage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingmatch.getlanguage.php )\n *\n * Gets a rough guess at the language of the encoded bytes\n *\n * @return     string  A rough guess at the language of the encoded bytes\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getUTF8", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/encodingmatch.getutf8.php )\n *\n * Gets the UTF-8 encoded version of the encoded byte array\n *\n * @return     string  The result of converting the bytes to UTF-8 with the\n *                     detected encoding\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "Closure", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.closure.php )\n *\n * Used as the base class for all closures\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/closure.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DummyClosure", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.dummyclosure.php )\n *\n * Represents an invalid closure which will fatal when used.\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummyclosure.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SpoofChecker", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.spoofchecker.php )\n *\n * Unicode Security and Spoofing Detection (see\n * http://icu-project.org/apiref/icu4c/uspoof_8h.html for details)\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/spoofchecker.construct.php )\n *\n * Creates a spoof checker that checks for visually confusing characters\n * in a string.  By default, runs the following tests:\n * SINGLE_SCRIPT_CONFUSABLE, MIXED_SCRIPT_CONFUSABLE,\n * WHOLE_SCRIPT_CONFUSABLE, ANY_CASE, INVISIBLE.\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isSuspicious", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/spoofchecker.issuspicious.php )\n *\n * Check the specified UTF-8 string for possible security or spoofing\n * issues.\n *\n * @text       string  A UTF-8 string to be checked for possible security\n *                     issues.\n * @issuesFound\n *             mixed   If passed, this will hold an integer value with bits\n *                     set for any potential security or spoofing issues\n *                     detected. Zero is returned if no issues are found\n *                     with the input string.\n *\n * @return     bool    Returns TRUE if the string has possible security or\n *                     spoofing issues, FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "text", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "issuesFound", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "areConfusable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/spoofchecker.areconfusable.php )\n *\n * Check the whether two specified UTF-8 strings are visually confusable.\n * The types of confusability to be tested - single script, mixed script,\n * or whole script - are determined by the check options set for this\n * instance.\n *\n * @s1         string  The first of the two UTF-8 strings to be compared\n *                     for confusability.\n * @s2         string  The second of the two UTF-8 strings to be compared\n *                     for confusability.\n * @issuesFound\n *             mixed   If passed, this will hold an integer value with\n *                     bit(s) set corresponding to the type of\n *                     confusability found, as defined by the constant\n *                     values stored in this class. Zero is returned if the\n *                     strings are not confusable.\n *\n * @return     bool    Returns TRUE if the two strings are confusable,\n *                     FALSE otherwise.\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "s1", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "s2", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "issuesFound", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setAllowedLocales", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/spoofchecker.setallowedlocales.php )\n *\n * Limit characters that are acceptable in identifiers being checked to\n * those normally used with the languages associated with the specified\n * locales.\n *\n * @localesList\n *             string  A list of locales, from which the language and\n *                     associated script are extracted. The locales are\n *                     comma-separated if there is more than one. White\n *                     space may not appear within an individual locale,\n *                     but is ignored otherwise. The locales are\n *                     syntactically like those from the HTTP\n *                     Accept-Language header. If the localesList is empty,\n *                     no restrictions will be placed on the allowed\n *                     characters.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "localesList", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setChecks", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/spoofchecker.setchecks.php )\n *\n * Specify the set of checks that will be performed by the check function\n *\n * @checks     int     The set of checks that this spoof checker will\n *                     perform. The value is a bit set, obtained by OR-ing\n *                     together the constant values in this class.\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "checks", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "SINGLE_SCRIPT_CONFUSABLE", (const char*)&q_SpoofChecker$$SINGLE_SCRIPT_CONFUSABLE, (const char *)0xc /* KindOfInt64 */, 
  "MIXED_SCRIPT_CONFUSABLE", (const char*)&q_SpoofChecker$$MIXED_SCRIPT_CONFUSABLE, (const char *)0xc /* KindOfInt64 */, 
  "WHOLE_SCRIPT_CONFUSABLE", (const char*)&q_SpoofChecker$$WHOLE_SCRIPT_CONFUSABLE, (const char *)0xc /* KindOfInt64 */, 
  "ANY_CASE", (const char*)&q_SpoofChecker$$ANY_CASE, (const char *)0xc /* KindOfInt64 */, 
  "SINGLE_SCRIPT", (const char*)&q_SpoofChecker$$SINGLE_SCRIPT, (const char *)0xc /* KindOfInt64 */, 
  "INVISIBLE", (const char*)&q_SpoofChecker$$INVISIBLE, (const char *)0xc /* KindOfInt64 */, 
  "CHAR_LIMIT", (const char*)&q_SpoofChecker$$CHAR_LIMIT, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x10006020, "Continuation", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.continuation.php )\n *\n *\n */",
  "iterator", "awaitable", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "update", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.update.php )\n *\n *\n * @label      int\n * @value      mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "label", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "value", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getWaitHandle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.getwaithandle.php )\n *\n * Start asynchronous execution of this Continuation and return the wait\n * handle\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getLabel", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.getlabel.php )\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "num_args", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.num-args.php )\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_args", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.get-args.php )\n *\n *\n * @return     vector\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "get_arg", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.get-arg.php )\n *\n *\n * @id         int\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "id", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.current.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.key.php )\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.next.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.rewind.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.valid.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "send", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.send.php )\n *\n *\n * @v          mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "raise", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.raise.php )\n *\n *\n * @v          mixed\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "v", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getOrigFuncName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.getorigfuncname.php\n * )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getCalledClass", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.getcalledclass.php\n * )\n *\n *\n * @return     string\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__clone", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/continuation.clone.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "DummyContinuation", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.dummycontinuation.php )\n *\n * Represents an invalid continuation which will fatal when used.\n *\n */",
  "iterator", NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummycontinuation.construct.php\n * )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "current", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummycontinuation.current.php )\n *\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "key", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummycontinuation.key.php )\n *\n *\n * @return     int\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "next", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummycontinuation.next.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "rewind", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummycontinuation.rewind.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "valid", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/dummycontinuation.valid.php )\n *\n *\n * @return     bool\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006010, "WaitHandle", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.waithandle.php )\n *\n * A wait handle representing asynchronous operation\n *\n */",
  "awaitable", NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnJoinCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback for when join() is called\n *\n * @on_join_cb mixed   A Closure to be called on join()\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_join_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getWaitHandle", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.getwaithandle.php )\n *\n * Return this wait handle (for Awaitable interface)\n *\n * @return     object\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "import", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.import.php )\n *\n * Import this wait handle to the current scheduler context\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "join", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.join.php )\n *\n * Wait until this wait handle is finished and return its result (operates\n * in a new scheduler context)\n *\n * @return     mixed   A result of the operation represented by given wait\n *                     handle\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isFinished", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.isfinished.php )\n *\n * Check if this wait handle finished (succeeded or failed)\n *\n * @return     bool    A boolean indicating whether this wait handle\n *                     finished\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isSucceeded", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.issucceeded.php )\n *\n * Check if this wait handle succeeded\n *\n * @return     bool    A boolean indicating whether this wait handle\n *                     succeeded\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "isFailed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.isfailed.php )\n *\n * Check if this wait handle failed\n *\n * @return     bool    A boolean indicating whether this wait handle failed\n */",
  (const char *)0x9 /* KindOfBoolean */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getID", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.getid.php )\n *\n * Get unique ID of this wait handle (amongst existing ones)\n *\n * @return     int     An integer representing unique ID of this wait\n *                     handle\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waithandle.getname.php )\n *\n * Get name of the operation behind this wait handle\n *\n * @return     string  A name of the operation behind this wait handle\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getExceptionIfFailed", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/waithandle.getexceptioniffailed.php )\n *\n * Get exception if this wait handle has failed, or null\n *\n * @return     object  An exception if this wait handle has failed, or null\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006010, "StaticWaitHandle", "waithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.staticwaithandle.php )\n *\n * A wait handle that is always finished\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/staticwaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "StaticResultWaitHandle", "staticwaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.staticresultwaithandle.php\n * )\n *\n * A wait handle representing static result\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/staticresultwaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/staticresultwaithandle.create.php )\n *\n * Create a wait handle that always succeeds with a given result\n *\n * @result     mixed   A result wait handle will succeed with\n *\n * @return     object  A StaticResultWaitHandle representing given result\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "result", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "StaticExceptionWaitHandle", "staticwaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/class.staticexceptionwaithandle.php )\n *\n * A wait handle representing statically failed operation\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/staticexceptionwaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/staticexceptionwaithandle.create.php )\n *\n * Create a wait handle that always fails with a given exception\n *\n * @exception  object  An exception wait handle will fail with\n *\n * @return     object  A StaticExceptionWaitHandle representing given\n *                     exception\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "exception", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006010, "WaitableWaitHandle", "waithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.waitablewaithandle.php )\n *\n * A wait handle that can be waited upon\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/waitablewaithandle.construct.php\n * )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getContextIdx", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/waitablewaithandle.getcontextidx.php )\n *\n * Get index of the scheduler context this wait handle operates in\n *\n * @return     int     An index of scheduler context this wait handle\n *                     operates in\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getCreator", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/waitablewaithandle.getcreator.php )\n *\n * Get wait handle that created this wait handle\n *\n * @return     object  A ContinuationWaitHandle that was being executed\n *                     when this wait handle was constructed\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getParents", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/waitablewaithandle.getparents.php )\n *\n * Get wait handles blocked on this wait handle\n *\n * @return     vector  An array of BlockableWaitHandles blocked on this\n *                     wait handle\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006010, "BlockableWaitHandle", "waitablewaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.blockablewaithandle.php )\n *\n * A wait handle that can be blocked on a dependency\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/blockablewaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "ContinuationWaitHandle", "blockablewaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.continuationwaithandle.php\n * )\n *\n * A wait handle representing asynchronous execution powered by\n * Continuation\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnCreateCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback to be called when a continuation wait handle is created\n *\n * @on_create_cb\n *             mixed   A Closure to be called when continuation is created\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_create_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnYieldCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback to be called when a continuation yields\n *\n * @on_yield_cb\n *             mixed   A Closure to be called when continuations yields\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_yield_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnSuccessCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback to be called when a continuation finishes successfully\n *\n * @on_success_cb\n *             mixed   A Closure to be called when continuations finishes\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_success_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnFailCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback to be called when a continuation fails\n *\n * @on_fail_cb mixed   A Closure to be called when continuations fails\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_fail_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getPrivData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.getprivdata.php )\n *\n * Get user's private data\n *\n * @return     object  An Object with user's private data\n */",
  (const char *)0x40 /* KindOfObject */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setPrivData", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/continuationwaithandle.setprivdata.php )\n *\n * Set user's private data\n *\n * @data       object  An Object with user's private data\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "data", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "GenArrayWaitHandle", "blockablewaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.genarraywaithandle.php )\n *\n * A wait handle representing an array of asynchronous operations\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/genarraywaithandle.construct.php\n * )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/genarraywaithandle.create.php )\n *\n * Create a wait handle that waits for a given array of dependencies\n *\n * @dependencies\n *             map     An Array of dependencies to wait for\n *\n * @return     object  A WaitHandle that will wait for a given array of\n *                     dependencies and return their results\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "dependencies", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnCreateCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback for when a GenArrayWaitHandle is created\n *\n * @on_create_cb\n *             mixed   A Closure to be called on creation\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_create_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "SetResultToRefWaitHandle", "blockablewaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/class.setresulttorefwaithandle.php )\n *\n * A wait handle proxy that sets result to a given reference\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/setresulttorefwaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/setresulttorefwaithandle.create.php )\n *\n * Create a wait handle that stores result of a dependency to a given\n * reference\n *\n * @wait_handle\n *             object  A wait handle to wait for\n * @ref        mixed   A reference to set the result to\n *\n * @return     object  A WaitHandle that will store the result of a\n *                     dependency to a given reference\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "wait_handle", "", (const char *)0x40 /* KindOfObject */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "ref", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10016240, "setOnCreateCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( HipHop specific )\n *\n * Set callback for when a SetResultToRefWaitHandle is created\n *\n * @on_create_cb\n *             mixed   A Closure to be called on creation\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "on_create_cb", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "RescheduleWaitHandle", "waitablewaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.reschedulewaithandle.php )\n *\n * A wait handle that succeeds with null once desired scheduling priority\n * is eligible for execution\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/reschedulewaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "create", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/reschedulewaithandle.create.php\n * )\n *\n * Create a wait handle that succeeds once desired scheduling priority is\n * eligible for execution\n *\n * @queue      int     A scheduling queue to use (defined by QUEUE_*\n *                     constants)\n * @priority   int     A non-negative number indicating scheduling priority\n *                     (0 runs first)\n *\n * @return     object  A RescheduleWaitHandle that succeeds once desired\n *                     scheduling priority is eligible for execution\n */",
  (const char *)0x40 /* KindOfObject */, (const char *)0x2000, "queue", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "priority", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "QUEUE_DEFAULT", (const char*)&q_RescheduleWaitHandle$$QUEUE_DEFAULT, (const char *)0xc /* KindOfInt64 */, 
  "QUEUE_NO_PENDING_IO", (const char*)&q_RescheduleWaitHandle$$QUEUE_NO_PENDING_IO, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  (const char *)0x18006000, "ExternalThreadEventWaitHandle", "waitablewaithandle", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/class.externalthreadeventwaithandle.php )\n *\n * A wait handle that synchronizes against C++ operation in external\n * thread\n *\n */",
  NULL,
  (const char *)0x10006100, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/externalthreadeventwaithandle.construct.php )\n *\n *\n */",
  (const char *)0x8 /* KindOfNull */, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006000, "UConverter", "", "", (const char *)0, (const char *)0,
  "/**\n * ( excerpt from http://php.net/manual/en/class.uconverter.php )\n *\n * ICU UConverter class\n *\n */",
  NULL,
  (const char *)0x10006040, "__construct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.construct.php )\n *\n * Object constructor\n *\n * @toEncoding string  Target character encoding\n * @fromEncoding\n *             string  Source character encoding\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "toEncoding", "", (const char *)0x14 /* KindOfString */, "s:5:\"utf-8\";", (const char *)12, "\"utf-8\"", (const char *)7, NULL,
  (const char *)0x2000, "fromEncoding", "", (const char *)0x14 /* KindOfString */, "s:5:\"utf-8\";", (const char *)12, "\"utf-8\"", (const char *)7, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "__destruct", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.destruct.php )\n *\n * Object destructor\n *\n * @return     mixed\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getSourceEncoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getsourceencoding.php\n * )\n *\n * Returns the name of the source encoding\n *\n * @return     string  Cannonical name of source encoding\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setSourceEncoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.setsourceencoding.php\n * )\n *\n * Changes the source encoding converter to the named encoding\n *\n * @encoding   string  Name of encoding to use\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getDestinationEncoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/uconverter.getdestinationencoding.php )\n *\n * Returns the name of the destination encoding\n *\n * @return     string  Cannonical name of destination encoding\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setDestinationEncoding", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/uconverter.setdestinationencoding.php )\n *\n * Changes the destination encoding converter to the named encoding\n *\n * @encoding   string  Name of encoding to use\n */",
  (const char *)0x8 /* KindOfNull */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getSourceType", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getsourcetype.php )\n *\n * Returns the source algorithmic encoding type (e.g. SBCS, DBCS, LATIN_1,\n * UTF8, etc...)\n *\n * @return     int     Algorithmic encoding type\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getDestinationType", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from\n * http://php.net/manual/en/uconverter.getdestinationtype.php )\n *\n * Returns the destination algorithmic encoding type (e.g. SBCS, DBCS,\n * LATIN_1, UTF8, etc...)\n *\n * @return     int     Algorithmic encoding type\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getSubstChars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getsubstchars.php )\n *\n * Returns the current substitution character used for conversion failures\n *\n * @return     string  One or more codeunits representing a single\n *                     codepoint\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "setSubstChars", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.setsubstchars.php )\n *\n * Set the substitution character to use for conversion failures\n *\n * @chars      string  One or more codeunits representing a codepoint\n *\n * @return     bool    Whether or not setting substitution characters\n *                     succeeded\n */",
  (const char *)0x9 /* KindOfBoolean */, (const char *)0x2000, "chars", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "fromUCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.fromucallback.php )\n *\n * Issued by the object when converting to the target encoding\n *\n * @reason     int     Event which caused the callback\n * @source     vector  Contextual codepoints from the string being\n *                     converted\n * @codepoint  int     The specific codepoint in question\n * @error      mixed   Reference param, error condition on the way in,\n *                     should be U_ZERO_ERROR on the way out\n *\n * @return     mixed   Substitution codeunits for\n *                     illegal/irregular/unassigned codepoints\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "reason", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "source", "", (const char *)0x20 /* KindOfArray */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "codepoint", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "error", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "toUCallback", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.toucallback.php )\n *\n * Issued by the object when converting from the source encoding\n *\n * @reason     int     Event which caused the callback\n * @source     string  Contextual codeunits from the string being converted\n * @codeunits  string  The specific codeunits in question\n * @error      mixed   Reference param, error condition on the way in,\n *                     should be U_ZERO_ERROR on the way out\n *\n * @return     mixed   Substitution codepoints for\n *                     illegal/irregular/unassigned codeunits\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "reason", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "source", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "codeunits", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2800, "error", "", (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "convert", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.convert.php )\n *\n * Convert a string between the source/destination encodings\n *\n * @str        string  String to be transcoded\n * @reverse    bool    Convert from destination to source encodings instead\n *\n * @return     mixed   Transcoded string\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "reverse", "", (const char *)0x9 /* KindOfBoolean */, "b:0;", (const char *)4, "false", (const char *)5, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "transcode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.transcode.php )\n *\n * Convert a string between two encodings\n *\n * @str        string  String to be transcoded\n * @toEncoding string  Source encoding\n * @fromEncoding\n *             string  Destination encoding\n * @options    map     Optional configuration for converters\n *\n * @return     mixed   Transcoded string\n */",
  (const char *)0xffffffff /* KindOfUnknown: $t: Variant */, (const char *)0x2000, "str", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "toEncoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "fromEncoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "options", "", (const char *)0x20 /* KindOfArray */, "N;", (const char *)2, "null", (const char *)4, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getErrorCode", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.geterrorcode.php )\n *\n * Last UErrorCode associated with this converter\n *\n * @return     int     UErrorCode U_* value\n */",
  (const char *)0xa /* KindOfInt64 */, NULL,
  NULL,
  NULL,
  (const char *)0x10006040, "getErrorMessage", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.geterrormessage.php )\n *\n * Last error message associated with this converter\n *\n * @return     string  Descriptive error message\n */",
  (const char *)0x14 /* KindOfString */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "reasonText", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.reasontext.php )\n *\n * Name of REASON_* constant\n *\n * @reason     int     REASON_* constant\n *\n * @return     string  Printable REASON_* constant name\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "reason", "", (const char *)0xa /* KindOfInt64 */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getAvailable", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getavailable.php )\n *\n * Returns list of available encodings\n *\n * @return     vector  Available encodings\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getAliases", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getaliases.php )\n *\n * Returns valid aliases of the named encoding\n *\n * @encoding   string  Encoding to get aliases of\n *\n * @return     vector  Valid aliases of the named encoding\n */",
  (const char *)0x20 /* KindOfArray */, (const char *)0x2000, "encoding", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getStandards", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getstandards.php )\n *\n * Returns list supported standards\n *\n * @return     vector  Available standards\n */",
  (const char *)0x20 /* KindOfArray */, NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getStandardName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getstandardname.php )\n *\n * Returns a standard name for a given converter name.\n *\n * @name       string  Original converter name\n * @standard   string  Name of the standard governing the names, e.g.\n *                     'MIME' or 'IANA'\n *\n * @return     string  Standard name of converter\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  (const char *)0x2000, "standard", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  (const char *)0x10006240, "getMIMEName", "", (const char*)0, (const char*)0,
  "/**\n * ( excerpt from http://php.net/manual/en/uconverter.getmimename.php )\n *\n * Returns the MIME name for a given converter name.\n *\n * @name       string  Original converter name\n *\n * @return     string  Converter's MIME name\n */",
  (const char *)0x14 /* KindOfString */, (const char *)0x2000, "name", "", (const char *)0x14 /* KindOfString */, "", (const char *)0, "", (const char *)0, NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  "REASON_UNASSIGNED", (const char*)&q_UConverter$$REASON_UNASSIGNED, (const char *)0xc /* KindOfInt64 */, 
  "REASON_ILLEGAL", (const char*)&q_UConverter$$REASON_ILLEGAL, (const char *)0xc /* KindOfInt64 */, 
  "REASON_IRREGULAR", (const char*)&q_UConverter$$REASON_IRREGULAR, (const char *)0xc /* KindOfInt64 */, 
  "REASON_RESET", (const char*)&q_UConverter$$REASON_RESET, (const char *)0xc /* KindOfInt64 */, 
  "REASON_CLOSE", (const char*)&q_UConverter$$REASON_CLOSE, (const char *)0xc /* KindOfInt64 */, 
  "REASON_CLONE", (const char*)&q_UConverter$$REASON_CLONE, (const char *)0xc /* KindOfInt64 */, 
  "UNSUPPORTED_CONVERTER", (const char*)&q_UConverter$$UNSUPPORTED_CONVERTER, (const char *)0xc /* KindOfInt64 */, 
  "SBCS", (const char*)&q_UConverter$$SBCS, (const char *)0xc /* KindOfInt64 */, 
  "DBCS", (const char*)&q_UConverter$$DBCS, (const char *)0xc /* KindOfInt64 */, 
  "MBCS", (const char*)&q_UConverter$$MBCS, (const char *)0xc /* KindOfInt64 */, 
  "LATIN_1", (const char*)&q_UConverter$$LATIN_1, (const char *)0xc /* KindOfInt64 */, 
  "UTF8", (const char*)&q_UConverter$$UTF8, (const char *)0xc /* KindOfInt64 */, 
  "UTF16_BigEndian", (const char*)&q_UConverter$$UTF16_BigEndian, (const char *)0xc /* KindOfInt64 */, 
  "UTF16_LittleEndian", (const char*)&q_UConverter$$UTF16_LittleEndian, (const char *)0xc /* KindOfInt64 */, 
  "UTF32_BigEndian", (const char*)&q_UConverter$$UTF32_BigEndian, (const char *)0xc /* KindOfInt64 */, 
  "UTF32_LittleEndian", (const char*)&q_UConverter$$UTF32_LittleEndian, (const char *)0xc /* KindOfInt64 */, 
  "EBCDIC_STATEFUL", (const char*)&q_UConverter$$EBCDIC_STATEFUL, (const char *)0xc /* KindOfInt64 */, 
  "ISO_2022", (const char*)&q_UConverter$$ISO_2022, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_1", (const char*)&q_UConverter$$LMBCS_1, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_2", (const char*)&q_UConverter$$LMBCS_2, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_3", (const char*)&q_UConverter$$LMBCS_3, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_4", (const char*)&q_UConverter$$LMBCS_4, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_5", (const char*)&q_UConverter$$LMBCS_5, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_6", (const char*)&q_UConverter$$LMBCS_6, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_8", (const char*)&q_UConverter$$LMBCS_8, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_11", (const char*)&q_UConverter$$LMBCS_11, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_16", (const char*)&q_UConverter$$LMBCS_16, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_17", (const char*)&q_UConverter$$LMBCS_17, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_18", (const char*)&q_UConverter$$LMBCS_18, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_19", (const char*)&q_UConverter$$LMBCS_19, (const char *)0xc /* KindOfInt64 */, 
  "LMBCS_LAST", (const char*)&q_UConverter$$LMBCS_LAST, (const char *)0xc /* KindOfInt64 */, 
  "HZ", (const char*)&q_UConverter$$HZ, (const char *)0xc /* KindOfInt64 */, 
  "SCSU", (const char*)&q_UConverter$$SCSU, (const char *)0xc /* KindOfInt64 */, 
  "ISCII", (const char*)&q_UConverter$$ISCII, (const char *)0xc /* KindOfInt64 */, 
  "US_ASCII", (const char*)&q_UConverter$$US_ASCII, (const char *)0xc /* KindOfInt64 */, 
  "UTF7", (const char*)&q_UConverter$$UTF7, (const char *)0xc /* KindOfInt64 */, 
  "BOCU1", (const char*)&q_UConverter$$BOCU1, (const char *)0xc /* KindOfInt64 */, 
  "UTF16", (const char*)&q_UConverter$$UTF16, (const char *)0xc /* KindOfInt64 */, 
  "UTF32", (const char*)&q_UConverter$$UTF32, (const char *)0xc /* KindOfInt64 */, 
  "CESU8", (const char*)&q_UConverter$$CESU8, (const char *)0xc /* KindOfInt64 */, 
  "IMAP_MAILBOX", (const char*)&q_UConverter$$IMAP_MAILBOX, (const char *)0xc /* KindOfInt64 */, 
  NULL,
  NULL,
  NULL,
  NULL
};
}
