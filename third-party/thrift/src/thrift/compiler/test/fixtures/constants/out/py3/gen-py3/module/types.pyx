#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr
from libcpp.optional cimport optional as __optional
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
from thrift.py3.types import _IsSet as _fbthrift_IsSet
from thrift.py3.types cimport make_unique
cimport thrift.py3.types
cimport thrift.py3.exceptions
cimport thrift.python.exceptions
import thrift.python.converter
from thrift.python.types import EnumMeta as __EnumMeta
from thrift.python.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.python.types cimport BadEnum as __BadEnum
from thrift.py3.types cimport (
    richcmp as __richcmp,
    init_unicode_from_cpp as __init_unicode_from_cpp,
    set_iter as __set_iter,
    map_iter as __map_iter,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    const_pointer_cast,
    make_const_shared,
    constant_shared_ptr,
)
from thrift.py3.types cimport _ensure_py3_or_raise, _ensure_py3_container_or_raise
cimport thrift.py3.serializer as serializer
from thrift.python.protocol cimport Protocol as __Protocol
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
import importlib

import module.thrift_types as _fbthrift_python_types
from module.thrift_enums import (
    EmptyEnum,
    City,
    Company,
)
from module.types_impl_FBTHRIFT_ONLY_DO_NOT_USE import (
    __union1Type,
    __union2Type,
)

from module.containers_FBTHRIFT_ONLY_DO_NOT_USE import (
    List__i32,
    Map__string_i32,
    List__Map__string_i32,
    Map__string_string,
    List__Company,
    List__Range,
    List__Internship,
    List__string,
    Set__i32,
    Set__string,
    Map__i32_i32,
    Map__i32_string,
    Map__i32_bool,
)

_fbthrift__module_name__ = "module.types"

cdef object get_types_reflection():
    return importlib.import_module(
        "module.types_reflection"
    )

@__cython.auto_pickle(False)
@__cython.final
cdef class Internship(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(Internship self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cInternship]()
        self._fields_setter = _fbthrift_types_fields.__Internship_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(Internship self, **kwargs):
        if not kwargs:
            return self
        cdef Internship __fbthrift_inst = Internship.__new__(Internship)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cInternship](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__Internship_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("Internship", {
          "weeks": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).weeks_ref().has_value(),
          "title": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).title_ref().has_value(),
          "employer": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).employer_ref().has_value(),
          "compensation": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).compensation_ref().has_value(),
          "school": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).school_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cInternship] cpp_obj):
        __fbthrift_inst = <Internship>Internship.__new__(Internship)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline weeks_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).weeks_ref().value()

    @property
    def weeks(self):
        return self.weeks_impl()

    cdef inline title_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).title_ref().value()).decode('UTF-8')

    @property
    def title(self):
        return self.title_impl()

    cdef inline employer_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).employer_ref().has_value():
            return None
        if self.__fbthrift_cached_employer is None:
            self.__fbthrift_cached_employer = translate_cpp_enum_to_python(Company, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).employer_ref().value_unchecked()))
        return self.__fbthrift_cached_employer

    @property
    def employer(self):
        return self.employer_impl()

    cdef inline compensation_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).compensation_ref().has_value():
            return None
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).compensation_ref().value_unchecked()

    @property
    def compensation(self):
        return self.compensation_impl()

    cdef inline school_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).school_ref().has_value():
            return None
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).school_ref().value_unchecked()).decode('UTF-8')

    @property
    def school(self):
        return self.school_impl()


    def __hash__(Internship self):
        return super().__hash__()

    def __repr__(Internship self):
        return super().__repr__()

    def __str__(Internship self):
        return super().__str__()


    def __copy__(Internship self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cInternship](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<Internship>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__Internship()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cInternship].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.Internship"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cInternship](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 5

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(Internship self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cInternship](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(Internship self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cInternship]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cInternship](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.Internship,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.Internship, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class Range(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(Range self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cRange]()
        self._fields_setter = _fbthrift_types_fields.__Range_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(Range self, **kwargs):
        if not kwargs:
            return self
        cdef Range __fbthrift_inst = Range.__new__(Range)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cRange](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__Range_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("Range", {
          "min": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).min_ref().has_value(),
          "max": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).max_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cRange] cpp_obj):
        __fbthrift_inst = <Range>Range.__new__(Range)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline min_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).min_ref().value()

    @property
    def min(self):
        return self.min_impl()

    cdef inline max_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).max_ref().value()

    @property
    def max(self):
        return self.max_impl()


    def __hash__(Range self):
        return super().__hash__()

    def __repr__(Range self):
        return super().__repr__()

    def __str__(Range self):
        return super().__str__()


    def __copy__(Range self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cRange](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<Range>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__Range()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cRange].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.Range"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cRange](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(Range self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cRange](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(Range self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cRange]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cRange](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.Range,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.Range, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class struct1(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(struct1 self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct1]()
        self._fields_setter = _fbthrift_types_fields.__struct1_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(struct1 self, **kwargs):
        if not kwargs:
            return self
        cdef struct1 __fbthrift_inst = struct1.__new__(struct1)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct1](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__struct1_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("struct1", {
          "a": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().has_value(),
          "b": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cstruct1] cpp_obj):
        __fbthrift_inst = <struct1>struct1.__new__(struct1)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().value()

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().value()).decode('UTF-8')

    @property
    def b(self):
        return self.b_impl()


    def __hash__(struct1 self):
        return super().__hash__()

    def __repr__(struct1 self):
        return super().__repr__()

    def __str__(struct1 self):
        return super().__str__()


    def __copy__(struct1 self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cstruct1](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<struct1>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__struct1()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cstruct1].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.struct1"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cstruct1](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(struct1 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cstruct1](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(struct1 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct1]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cstruct1](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.struct1,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.struct1, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class struct2(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(struct2 self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct2]()
        self._fields_setter = _fbthrift_types_fields.__struct2_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(struct2 self, **kwargs):
        if not kwargs:
            return self
        cdef struct2 __fbthrift_inst = struct2.__new__(struct2)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct2](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__struct2_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("struct2", {
          "a": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().has_value(),
          "b": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().has_value(),
          "c": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().has_value(),
          "d": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).d_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cstruct2] cpp_obj):
        __fbthrift_inst = <struct2>struct2.__new__(struct2)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().value()

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().value()).decode('UTF-8')

    @property
    def b(self):
        return self.b_impl()

    cdef inline c_impl(self):
        if self.__fbthrift_cached_c is None:
            self.__fbthrift_cached_c = struct1._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_c

    @property
    def c(self):
        return self.c_impl()

    cdef inline d_impl(self):
        if self.__fbthrift_cached_d is None:
            self.__fbthrift_cached_d = List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).d_ref().ref())
        return self.__fbthrift_cached_d

    @property
    def d(self):
        return self.d_impl()


    def __hash__(struct2 self):
        return super().__hash__()

    def __repr__(struct2 self):
        return super().__repr__()

    def __str__(struct2 self):
        return super().__str__()


    def __copy__(struct2 self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cstruct2](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<struct2>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__struct2()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cstruct2].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.struct2"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cstruct2](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 4

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(struct2 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cstruct2](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(struct2 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct2]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cstruct2](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.struct2,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.struct2, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class struct3(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(struct3 self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct3]()
        self._fields_setter = _fbthrift_types_fields.__struct3_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(struct3 self, **kwargs):
        if not kwargs:
            return self
        cdef struct3 __fbthrift_inst = struct3.__new__(struct3)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct3](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__struct3_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("struct3", {
          "a": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().has_value(),
          "b": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().has_value(),
          "c": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cstruct3] cpp_obj):
        __fbthrift_inst = <struct3>struct3.__new__(struct3)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().value()).decode('UTF-8')

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().value()

    @property
    def b(self):
        return self.b_impl()

    cdef inline c_impl(self):
        if self.__fbthrift_cached_c is None:
            self.__fbthrift_cached_c = struct2._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_c

    @property
    def c(self):
        return self.c_impl()


    def __hash__(struct3 self):
        return super().__hash__()

    def __repr__(struct3 self):
        return super().__repr__()

    def __str__(struct3 self):
        return super().__str__()


    def __copy__(struct3 self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cstruct3](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<struct3>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__struct3()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cstruct3].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.struct3"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cstruct3](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 3

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(struct3 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cstruct3](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(struct3 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct3]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cstruct3](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.struct3,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.struct3, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class struct4(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(struct4 self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct4]()
        self._fields_setter = _fbthrift_types_fields.__struct4_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(struct4 self, **kwargs):
        if not kwargs:
            return self
        cdef struct4 __fbthrift_inst = struct4.__new__(struct4)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct4](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__struct4_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("struct4", {
          "a": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().has_value(),
          "b": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().has_value(),
          "c": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cstruct4] cpp_obj):
        __fbthrift_inst = <struct4>struct4.__new__(struct4)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_ref().value()

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().has_value():
            return None
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).b_ref().value_unchecked()

    @property
    def b(self):
        return self.b_impl()

    cdef inline c_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().has_value():
            return None
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).c_ref().value_unchecked()

    @property
    def c(self):
        return self.c_impl()


    def __hash__(struct4 self):
        return super().__hash__()

    def __repr__(struct4 self):
        return super().__repr__()

    def __str__(struct4 self):
        return super().__str__()


    def __copy__(struct4 self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cstruct4](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<struct4>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__struct4()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cstruct4].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.struct4"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cstruct4](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 3

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(struct4 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cstruct4](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(struct4 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cstruct4]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cstruct4](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.struct4,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.struct4, self)



@__cython.auto_pickle(False)
@__cython.final
cdef class union1(thrift.py3.types.Union):
    __module__ = _fbthrift__module_name__
    Type = __union1Type

    def __init__(
        self, *,
        i=None,
        d=None
    ):
        if i is not None:
            if not isinstance(i, int):
                raise TypeError(f'i is not a { int !r}.')

            i = <cint32_t> i

        if d is not None:
            if not isinstance(d, (float, int)):
                raise TypeError(f'd is not a { float !r}.')

        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = __to_shared_ptr(cmove(union1._make_instance(
          NULL,
          i,
          d,
        )))
        self._initialize_py()

    @staticmethod
    def fromValue(value):
        if value is None:
            return union1()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return union1(i=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return union1(d=value)
                except OverflowError:
                    pass
        if isinstance(value, (float, int)):
            try:
                <double> value
                return union1(d=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[_module_cbindings.cunion1] _make_instance(
        _module_cbindings.cunion1* base_instance,
        object i,
        object d
    ) except *:
        cdef unique_ptr[_module_cbindings.cunion1] c_inst = make_unique[_module_cbindings.cunion1]()
        cdef bint any_set = False
        if i is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i(i)
            any_set = True
        if d is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_d(d)
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cunion1] cpp_obj):
        __fbthrift_inst = <union1>union1.__new__(union1)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        __fbthrift_inst._initialize_py()
        return __fbthrift_inst

    @property
    def i(union1 self not None):
        if self.type_int != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not i')
        return self.value

    @property
    def d(union1 self not None):
        if self.type_int != 2:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not d')
        return self.value


    def __hash__(union1 self):
        return  super().__hash__()

    @property
    def type(union1 self not None):
        if self.py_type is None:
            self.py_type = union1.Type(self.type_int)
        return self.py_type

    @property
    def value(union1 self not None):
        if self.py_value is not None or self.type_int == 0:
            return self.py_value
        elif self.type_int == 1:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_i()
        elif self.type_int == 2:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_d()
        return self.py_value

    cdef _initialize_py(union1 self):
        self.py_type = None
        self.type_int = int(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).getType())
        self.py_value = None

    def __copy__(union1 self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cunion1](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<union1>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__union1()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cunion1].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.union1"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cunion1](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(union1 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cunion1](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(union1 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cunion1]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cunion1](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        # clear cache reload since the underlying data's changed
        self._initialize_py()
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.union1,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.union1, self)



@__cython.auto_pickle(False)
@__cython.final
cdef class union2(thrift.py3.types.Union):
    __module__ = _fbthrift__module_name__
    Type = __union2Type

    def __init__(
        self, *,
        i=None,
        d=None,
        s=None,
        u=None
    ):
        if i is not None:
            if not isinstance(i, int):
                raise TypeError(f'i is not a { int !r}.')

            i = <cint32_t> i

        if d is not None:
            if not isinstance(d, (float, int)):
                raise TypeError(f'd is not a { float !r}.')

        s = _ensure_py3_or_raise(s, "s", struct1)

        u = _ensure_py3_or_raise(u, "u", union1)

        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = __to_shared_ptr(cmove(union2._make_instance(
          NULL,
          i,
          d,
          s,
          u,
        )))
        self._initialize_py()

    @staticmethod
    def fromValue(value):
        if value is None:
            return union2()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return union2(i=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return union2(d=value)
                except OverflowError:
                    pass
        if isinstance(value, struct1):
            return union2(s=value)
        if isinstance(value, union1):
            return union2(u=value)
        if isinstance(value, (float, int)):
            try:
                <double> value
                return union2(d=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[_module_cbindings.cunion2] _make_instance(
        _module_cbindings.cunion2* base_instance,
        object i,
        object d,
        struct1 s,
        union1 u
    ) except *:
        cdef unique_ptr[_module_cbindings.cunion2] c_inst = make_unique[_module_cbindings.cunion2]()
        cdef bint any_set = False
        if i is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i(i)
            any_set = True
        if d is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_d(d)
            any_set = True
        if s is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_s(deref((<struct1?> s)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        if u is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_u(deref((<union1?> u)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cunion2] cpp_obj):
        __fbthrift_inst = <union2>union2.__new__(union2)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        __fbthrift_inst._initialize_py()
        return __fbthrift_inst

    @property
    def i(union2 self not None):
        if self.type_int != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not i')
        return self.value

    @property
    def d(union2 self not None):
        if self.type_int != 2:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not d')
        return self.value

    @property
    def s(union2 self not None):
        if self.type_int != 3:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not s')
        return self.value

    @property
    def u(union2 self not None):
        if self.type_int != 4:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not u')
        return self.value


    def __hash__(union2 self):
        return  super().__hash__()

    @property
    def type(union2 self not None):
        if self.py_type is None:
            self.py_type = union2.Type(self.type_int)
        return self.py_type

    @property
    def value(union2 self not None):
        if self.py_value is not None or self.type_int == 0:
            return self.py_value
        elif self.type_int == 1:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_i()
        elif self.type_int == 2:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_d()
        elif self.type_int == 3:
            self.py_value = struct1._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cstruct1](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_s()))
        elif self.type_int == 4:
            self.py_value = union1._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cunion1](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_u()))
        return self.py_value

    cdef _initialize_py(union2 self):
        self.py_type = None
        self.type_int = int(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).getType())
        self.py_value = None

    def __copy__(union2 self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cunion2](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<union2>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__union2()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cunion2].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.union2"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cunion2](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 4

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(union2 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cunion2](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(union2 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cunion2]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cunion2](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        # clear cache reload since the underlying data's changed
        self._initialize_py()
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.union2,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.union2, self)

cdef vector[cint32_t] List__i32__make_instance(object items) except *:
    cdef vector[cint32_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__i32__from_cpp(const vector[cint32_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,cint32_t] Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cint32_t] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_i32__from_cpp(const cmap[string,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cint32_t]] iter = __map_iter[cmap[string,cint32_t]](c_map)
    cdef string ckey
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cmap[string,cint32_t]] List__Map__string_i32__make_instance(object items) except *:
    cdef vector[cmap[string,cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Mapping[str, int]")
        if not isinstance(item, Map__string_i32):
            item = Map__string_i32(item)
        c_inst.push_back(Map__string_i32__make_instance(item))
    return cmove(c_inst)

cdef object List__Map__string_i32__from_cpp(const vector[cmap[string,cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Map__string_i32__from_cpp(c_vec[idx]))
    return List__Map__string_i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,string] Map__string_string__make_instance(object items) except *:
    cdef cmap[string,string] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__string_string__from_cpp(const cmap[string,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,string]] iter = __map_iter[cmap[string,string]](c_map)
    cdef string ckey
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = __init_unicode_from_cpp(cval)
    return Map__string_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[_module_cbindings.cCompany] List__Company__make_instance(object items) except *:
    cdef vector[_module_cbindings.cCompany] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, Company):
            raise TypeError(f"{item!r} is not of type Company")
        c_inst.push_back(<_module_cbindings.cCompany><int>item)
    return cmove(c_inst)

cdef object List__Company__from_cpp(const vector[_module_cbindings.cCompany]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(translate_cpp_enum_to_python(Company, <int> c_vec[idx]))
    return List__Company(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[_module_cbindings.cRange] List__Range__make_instance(object items) except *:
    cdef vector[_module_cbindings.cRange] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, Range):
            raise TypeError(f"{item!r} is not of type Range")
        c_inst.push_back(deref((<Range>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
    return cmove(c_inst)

cdef object List__Range__from_cpp(const vector[_module_cbindings.cRange]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Range._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cRange](c_vec[idx])))
    return List__Range(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[_module_cbindings.cInternship] List__Internship__make_instance(object items) except *:
    cdef vector[_module_cbindings.cInternship] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, Internship):
            raise TypeError(f"{item!r} is not of type Internship")
        c_inst.push_back(deref((<Internship>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
    return cmove(c_inst)

cdef object List__Internship__from_cpp(const vector[_module_cbindings.cInternship]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Internship._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cInternship](c_vec[idx])))
    return List__Internship(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[string] List__string__make_instance(object items) except *:
    cdef vector[string] c_inst
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_inst.push_back(item.encode('UTF-8'))
    return cmove(c_inst)

cdef object List__string__from_cpp(const vector[string]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(__init_unicode_from_cpp(c_vec[idx]))
    return List__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[cint32_t] Set__i32__make_instance(object items) except *:
    cdef cset[cint32_t] c_inst
    cdef cint32_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint32_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__i32__from_cpp(const cset[cint32_t]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cint32_t]] iter = __set_iter[cset[cint32_t]](c_set)
    cdef cint32_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[string] Set__string__make_instance(object items) except *:
    cdef cset[string] c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_item = item.encode('UTF-8')
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__string__from_cpp(const cset[string]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[string]] iter = __set_iter[cset[string]](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(__init_unicode_from_cpp(citem))
    return Set__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cmap[cint32_t,cint32_t] Map__i32_i32__make_instance(object items) except *:
    cdef cmap[cint32_t,cint32_t] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__i32_i32__from_cpp(const cmap[cint32_t,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint32_t,cint32_t]] iter = __map_iter[cmap[cint32_t,cint32_t]](c_map)
    cdef cint32_t ckey = 0
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return Map__i32_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[cint32_t,string] Map__i32_string__make_instance(object items) except *:
    cdef cmap[cint32_t,string] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__i32_string__from_cpp(const cmap[cint32_t,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint32_t,string]] iter = __map_iter[cmap[cint32_t,string]](c_map)
    cdef cint32_t ckey = 0
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = __init_unicode_from_cpp(cval)
    return Map__i32_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[cint32_t,cbool] Map__i32_bool__make_instance(object items) except *:
    cdef cmap[cint32_t,cbool] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, bool):
            raise TypeError(f"{item!r} is not of type bool")

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__i32_bool__from_cpp(const cmap[cint32_t,cbool]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint32_t,cbool]] iter = __map_iter[cmap[cint32_t,cbool]](c_map)
    cdef cint32_t ckey = 0
    cdef cbool cval = False
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return Map__i32_bool(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)


myInt = 1337
name = "Mark Zuckerberg"
multi_line_string = "This\nis a\nmulti line string.\n"
states = List__Map__string_i32__from_cpp(_module_cbindings.cstates())
x = 1
y = 1000000.0
z = 1000000000
zeroDoubleValue = 0
longDoubleValue = 2.59961000990301e-05
bin = b"a\000z"
my_company = Company.FACEBOOK
foo = "foo"
bar = 42
mymap = Map__string_string__from_cpp(_module_cbindings.cmymap())
my_apps = List__Company__from_cpp(_module_cbindings.cmy_apps())
instagram = Internship._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cinstagram()))
partial_const = Internship._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpartial_const()))
kRanges = List__Range__from_cpp(_module_cbindings.ckRanges())
internList = List__Internship__from_cpp(_module_cbindings.cinternList())
pod_0 = struct1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_0()))
pod_s_0 = struct1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_s_0()))
pod_1 = struct1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_1()))
pod_s_1 = struct1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_s_1()))
pod_2 = struct2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_2()))
pod_trailing_commas = struct2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_trailing_commas()))
pod_s_2 = struct2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_s_2()))
pod_3 = struct3._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_3()))
pod_s_3 = struct3._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_s_3()))
pod_4 = struct4._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cpod_4()))
u_1_1 = union1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_1_1()))
u_1_2 = union1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_1_2()))
u_1_3 = union1._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_1_3()))
u_2_1 = union2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_2_1()))
u_2_2 = union2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_2_2()))
u_2_3 = union2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_2_3()))
u_2_4 = union2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_2_4()))
u_2_5 = union2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_2_5()))
u_2_6 = union2._create_FBTHRIFT_ONLY_DO_NOT_USE(constant_shared_ptr(_module_cbindings.cu_2_6()))
apostrophe = "'"
tripleApostrophe = "'''"
quotationMark = "\""
backslash = "\\"
escaped_a = "a"
char2ascii = Map__string_i32__from_cpp(_module_cbindings.cchar2ascii())
escaped_strings = List__string__from_cpp(_module_cbindings.cescaped_strings())
unicode_list = List__string__from_cpp(_module_cbindings.cunicode_list())
false_c = False
true_c = True
zero_byte = 0
zero16 = 0
zero32 = 0
zero64 = 0
zero_dot_zero = 0
empty_string = ""
empty_int_list = List__i32__from_cpp(_module_cbindings.cempty_int_list())
empty_string_list = List__string__from_cpp(_module_cbindings.cempty_string_list())
empty_int_set = Set__i32__from_cpp(_module_cbindings.cempty_int_set())
empty_string_set = Set__string__from_cpp(_module_cbindings.cempty_string_set())
empty_int_int_map = Map__i32_i32__from_cpp(_module_cbindings.cempty_int_int_map())
empty_int_string_map = Map__i32_string__from_cpp(_module_cbindings.cempty_int_string_map())
empty_string_int_map = Map__string_i32__from_cpp(_module_cbindings.cempty_string_int_map())
empty_string_string_map = Map__string_string__from_cpp(_module_cbindings.cempty_string_string_map())
unicode_map = Map__string_string__from_cpp(_module_cbindings.cunicode_map())
maxIntDec = 9223372036854775807
maxIntOct = 9223372036854775807
maxIntHex = 9223372036854775807
maxIntBin = 9223372036854775807
maxDub = 1.7976931348623157e+308
minDub = 2.2250738585072014e-308
minSDub = 5e-324
maxPIntDec = 9223372036854775807
maxPIntOct = 9223372036854775807
maxPIntHex = 9223372036854775807
maxPIntBin = 9223372036854775807
maxPDub = 1.7976931348623157e+308
minPDub = 2.2250738585072014e-308
minPSDub = 5e-324
minIntDec = -9223372036854775808
minIntOct = -9223372036854775808
minIntHex = -9223372036854775808
minIntBin = -9223372036854775808
maxNDub = -1.7976931348623157e+308
minNDub = -2.2250738585072014e-308
minNSDub = -5e-324
I2B = Map__i32_bool__from_cpp(_module_cbindings.cI2B())
I2B_REF = Map__i32_bool__from_cpp(_module_cbindings.cI2B_REF())
MyCompany = Company
MyStringIdentifier = str
MyIntIdentifier = int
MyMapIdentifier = Map__string_string
