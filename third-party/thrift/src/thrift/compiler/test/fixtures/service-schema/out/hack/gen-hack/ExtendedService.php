<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace facebook\thrift\test;

/**
 * Original thrift service:-
 * ExtendedService
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/ExtendedService'))>>
interface ExtendedServiceAsyncIf extends \facebook\thrift\test\BaseServiceAsyncIf {
  /**
   * Original thrift definition:-
   * i64
   *   init(1: i64 param0,
   *        2: i64 param1);
   */
  public function init(int $param0, int $param1): Awaitable<int>;
}

/**
 * Original thrift service:-
 * ExtendedService
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/ExtendedService'))>>
interface ExtendedServiceAsyncClientIf extends ExtendedServiceAsyncIf, \facebook\thrift\test\BaseServiceAsyncClientIf {
}

/**
 * Original thrift service:-
 * ExtendedService
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/test/ExtendedService'))>>
interface ExtendedServiceClientIf extends \facebook\thrift\test\BaseServiceClientIf {
  /**
   * Original thrift definition:-
   * i64
   *   init(1: i64 param0,
   *        2: i64 param1);
   */
  public function init(int $param0, int $param1): Awaitable<int>;
}

/**
 * Original thrift service:-
 * ExtendedService
 */
trait ExtendedServiceClientBase {
  require extends \ThriftClientBase;

  /**
   * Original thrift definition:-
   * i64
   *   init(1: i64 param0,
   *        2: i64 param1);
   */
  public async function init(int $param0, int $param1): Awaitable<int> {
    $rpc_options = $this->getAndResetOptions() ?? \ThriftClientBase::defaultOptions();
    $args = \facebook\thrift\test\ExtendedService_init_args::fromShape(shape(
      'param0' => $param0,
      'param1' => $param1,
    ));
    await $this->asyncHandler_->genBefore(ExtendedServiceStaticMetadata::THRIFT_SVC_NAME, "init", $args);
    $currentseqid = $this->sendImplHelper($args, "init", false, ExtendedServiceStaticMetadata::THRIFT_SVC_NAME );
    return (await $this->genAwaitResponse(\facebook\thrift\test\ExtendedService_init_result::class, "init", false, $currentseqid, $rpc_options))[0];
  }

}

class ExtendedServiceAsyncClient extends \facebook\thrift\test\BaseServiceAsyncClient implements ExtendedServiceAsyncClientIf {
  use ExtendedServiceClientBase;

  const string THRIFT_SVC_NAME = ExtendedServiceStaticMetadata::THRIFT_SVC_NAME;

}

class ExtendedServiceClient extends \facebook\thrift\test\BaseServiceClient implements ExtendedServiceClientIf {
  use ExtendedServiceClientBase;

  const string THRIFT_SVC_NAME = ExtendedServiceStaticMetadata::THRIFT_SVC_NAME;

}

// HELPER FUNCTIONS AND STRUCTURES

class ExtendedService_init_args implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'param0',
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'param1',
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'param0' => 1,
    'param1' => 2,
  ];

  const type TConstructorShape = shape(
    ?'param0' => ?int,
    ?'param1' => ?int,
  );

  const int STRUCTURAL_ID = 6761775133478352856;
  public int $param0;
  public int $param1;

  public function __construct(?int $param0 = null, ?int $param1 = null)[] {
    $this->param0 = $param0 ?? 0;
    $this->param1 = $param1 ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'param0'),
      Shapes::idx($shape, 'param1'),
    );
  }

  public function getName()[]: string {
    return 'ExtendedService_init_args';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.init_args",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "param0",
            )
          ),
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "param1",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class ExtendedService_init_result extends \ThriftSyncStructWithResult implements \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const type TResult = int;

  const \ThriftStructTypes::TSpec SPEC = dict[
    0 => shape(
      'var' => 'success',
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'success' => 0,
  ];

  const type TConstructorShape = shape(
    ?'success' => ?this::TResult,
  );

  const int STRUCTURAL_ID = 3715007529104411015;
  public ?this::TResult $success;

  public function __construct(?this::TResult $success = null)[] {
    $this->success = $success;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'success'),
    );
  }

  public function getName()[]: string {
    return 'ExtendedService_init_result';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return \tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.ExtendedService_init_result",
        "fields" => vec[
          \tmeta_ThriftField::fromShape(
            shape(
              "id" => 0,
              "type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "success",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

class ExtendedServiceStaticMetadata implements \IThriftServiceStaticMetadata {
  const string THRIFT_SVC_NAME = 'ExtendedService';

  public static function getServiceMetadata()[]: \tmeta_ThriftService {
    return \tmeta_ThriftService::fromShape(
      shape(
        "name" => "module.ExtendedService",
        "functions" => vec[
          \tmeta_ThriftFunction::fromShape(
            shape(
              "name" => "init",
              "return_type" => \tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "arguments" => vec[
                \tmeta_ThriftField::fromShape(
                  shape(
                    "id" => 1,
                    "type" => \tmeta_ThriftType::fromShape(
                      shape(
                        "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                      )
                    ),
                    "name" => "param0",
                  )
                ),
                \tmeta_ThriftField::fromShape(
                  shape(
                    "id" => 2,
                    "type" => \tmeta_ThriftType::fromShape(
                      shape(
                        "t_primitive" => \tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                      )
                    ),
                    "name" => "param1",
                  )
                ),
              ],
            )
          ),
        ],
        "parent" => "extend.BaseService",
      )
    );
  }

  public static function getServiceMetadataResponse()[]: \tmeta_ThriftServiceMetadataResponse {
    return \tmeta_ThriftServiceMetadataResponse::fromShape(
      shape(
        'context' => \tmeta_ThriftServiceContext::fromShape(
          shape(
            'service_info' => self::getServiceMetadata(),
            'module' => \tmeta_ThriftModuleContext::fromShape(
              shape(
                'name' => 'module',
              )
            ),
          )
        ),
        'metadata' => \tmeta_ThriftMetadata::fromShape(
          shape(
            'enums' => dict[
            ],
            'structs' => dict[
            ],
            'exceptions' => dict[
            ],
            'services' => dict[
              'extend.BaseService' => \facebook\thrift\test\BaseServiceStaticMetadata::getServiceMetadata(),
            ],
          )
        ),
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TServiceAnnotations {
    return shape(
      'service' => dict[],
      'functions' => dict[
      ],
    );
  }
}

