/**
 * Autogenerated by Thrift for 
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_types.h"



// For method decorators
#include <thrift/lib/cpp2/gen/module_method_decorator_h.h>


namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class DecoratedService;
class DecoratedServiceAsyncProcessor;

class DecoratedServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {

template <>
class ServiceMethodDecorator<::cpp2::DecoratedService> : public ServiceMethodDecoratorBase {
 public:
  virtual ~ServiceMethodDecorator() = default;
  virtual void before_noop(BeforeParams /*beforeParams*/) {}
  virtual void after_noop(AfterParams /*afterParams*/) {}
  virtual void before_echo(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/) {}
  virtual void after_echo(AfterParams /*afterParams*/, const ::std::string& /*result*/) {}
  virtual void before_increment(BeforeParams /*beforeParams*/, ::std::int64_t /*p_num*/) {}
  virtual void after_increment(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_sum(BeforeParams /*beforeParams*/, const ::std::vector<::std::int64_t>& /*p_nums*/) {}
  virtual void after_sum(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_withStruct(BeforeParams /*beforeParams*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_withStruct(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  virtual void before_multiParam(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/, ::std::int64_t /*p_num*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_multiParam(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
};

template <>
class ServiceHandler<::cpp2::DecoratedService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "DecoratedService"; }

  typedef ::cpp2::DecoratedServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_noop();
  [[deprecated("Use sync_noop instead")]] virtual void noop();
  virtual folly::Future<folly::Unit> future_noop();
  virtual folly::SemiFuture<folly::Unit> semifuture_noop();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_noop();
  virtual folly::coro::Task<void> co_noop(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_noop(apache::thrift::HandlerCallbackPtr<void> callback);
  virtual void sync_echo(::std::string& /*_return*/, std::unique_ptr<::std::string> /*text*/);
  [[deprecated("Use sync_echo instead")]] virtual void echo(::std::string& /*_return*/, std::unique_ptr<::std::string> /*text*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_echo(std::unique_ptr<::std::string> p_text);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_echo(std::unique_ptr<::std::string> p_text);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_echo(std::unique_ptr<::std::string> p_text);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_echo(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_text);
#endif
  virtual void async_tm_echo(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>> callback, std::unique_ptr<::std::string> p_text);
  virtual ::std::int64_t sync_increment(::std::int64_t /*num*/);
  [[deprecated("Use sync_increment instead")]] virtual ::std::int64_t increment(::std::int64_t /*num*/);
  virtual folly::Future<::std::int64_t> future_increment(::std::int64_t p_num);
  virtual folly::SemiFuture<::std::int64_t> semifuture_increment(::std::int64_t p_num);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int64_t> co_increment(::std::int64_t p_num);
  virtual folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RequestParams params, ::std::int64_t p_num);
#endif
  virtual void async_tm_increment(apache::thrift::HandlerCallbackPtr<::std::int64_t> callback, ::std::int64_t p_num);
  virtual ::std::int64_t sync_sum(std::unique_ptr<::std::vector<::std::int64_t>> /*nums*/);
  [[deprecated("Use sync_sum instead")]] virtual ::std::int64_t sum(std::unique_ptr<::std::vector<::std::int64_t>> /*nums*/);
  virtual folly::Future<::std::int64_t> future_sum(std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
  virtual folly::SemiFuture<::std::int64_t> semifuture_sum(std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int64_t> co_sum(std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
  virtual folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
#endif
  virtual void async_tm_sum(apache::thrift::HandlerCallbackPtr<::std::int64_t> callback, std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
  virtual void sync_withStruct(::cpp2::Response& /*_return*/, std::unique_ptr<::cpp2::Request> /*request*/);
  [[deprecated("Use sync_withStruct instead")]] virtual void withStruct(::cpp2::Response& /*_return*/, std::unique_ptr<::cpp2::Request> /*request*/);
  virtual folly::Future<std::unique_ptr<::cpp2::Response>> future_withStruct(std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::Response>> semifuture_withStruct(std::unique_ptr<::cpp2::Request> p_request);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_withStruct(std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_withStruct(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::Request> p_request);
#endif
  virtual void async_tm_withStruct(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>> callback, std::unique_ptr<::cpp2::Request> p_request);
  virtual void sync_multiParam(::cpp2::Response& /*_return*/, std::unique_ptr<::std::string> /*text*/, ::std::int64_t /*num*/, std::unique_ptr<::cpp2::Request> /*request*/);
  [[deprecated("Use sync_multiParam instead")]] virtual void multiParam(::cpp2::Response& /*_return*/, std::unique_ptr<::std::string> /*text*/, ::std::int64_t /*num*/, std::unique_ptr<::cpp2::Request> /*request*/);
  virtual folly::Future<std::unique_ptr<::cpp2::Response>> future_multiParam(std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::Response>> semifuture_multiParam(std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_multiParam(std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_multiParam(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
#endif
  virtual void async_tm_multiParam(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>> callback, std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
 private:
  static ::cpp2::DecoratedServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_noop{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_echo{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_increment{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_withStruct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_multiParam{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::DecoratedService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -1820116457509237888;
  static constexpr ::std::string_view definitionKey = {"\xad\xe2\xe9\x37\xab\x52\x37\x46\x63\x5e\x9a\x4c\xb5\x4f\xc3\xf2", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using DecoratedServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<DecoratedService> instead")]] = ::apache::thrift::ServiceHandler<DecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedServiceSvNull : public ::apache::thrift::ServiceHandler<DecoratedService> {
 public:
  void noop() override;
  void echo(::std::string& /*_return*/, std::unique_ptr<::std::string> /*text*/) override;
  ::std::int64_t increment(::std::int64_t /*num*/) override;
  ::std::int64_t sum(std::unique_ptr<::std::vector<::std::int64_t>> /*nums*/) override;
  void withStruct(::cpp2::Response& /*_return*/, std::unique_ptr<::cpp2::Request> /*request*/) override;
  void multiParam(::cpp2::Response& /*_return*/, std::unique_ptr<::std::string> /*text*/, ::std::int64_t /*num*/, std::unique_ptr<::cpp2::Request> /*request*/) override;
};

class DecoratedServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::DecoratedService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<DecoratedServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const DecoratedServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const DecoratedServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'noop'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_noop(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_noop(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_noop(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_noop(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'noop'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'echo'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_echo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_echo(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_echo(
      apache::thrift::ContextStack* ctx,
      ::std::string const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_echo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'echo'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'increment'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_increment(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_increment(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_increment(
      apache::thrift::ContextStack* ctx,
      ::std::int64_t const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_increment(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'increment'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'sum'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum(
      apache::thrift::ContextStack* ctx,
      ::std::int64_t const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'sum'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'withStruct'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_withStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_withStruct(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_withStruct(
      apache::thrift::ContextStack* ctx,
      ::cpp2::Response const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_withStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'withStruct'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'multiParam'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_multiParam(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_multiParam(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_multiParam(
      apache::thrift::ContextStack* ctx,
      ::cpp2::Response const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiParam(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'multiParam'
  //

  //
  // End of Service Methods
  //
 public:
  DecoratedServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::DecoratedService>* iface) :
      iface_(iface) {}
  ~DecoratedServiceAsyncProcessor() override {}
};

} // namespace cpp2

namespace cpp2 {
class UndecoratedService;
class UndecoratedServiceAsyncProcessor;

class UndecoratedServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::UndecoratedService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::UndecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "UndecoratedService"; }

  typedef ::cpp2::UndecoratedServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_noop();
  [[deprecated("Use sync_noop instead")]] virtual void noop();
  virtual folly::Future<folly::Unit> future_noop();
  virtual folly::SemiFuture<folly::Unit> semifuture_noop();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_noop();
  virtual folly::coro::Task<void> co_noop(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_noop(apache::thrift::HandlerCallbackPtr<void> callback);
  virtual void sync_echo(::std::string& /*_return*/, std::unique_ptr<::std::string> /*text*/);
  [[deprecated("Use sync_echo instead")]] virtual void echo(::std::string& /*_return*/, std::unique_ptr<::std::string> /*text*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_echo(std::unique_ptr<::std::string> p_text);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_echo(std::unique_ptr<::std::string> p_text);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_echo(std::unique_ptr<::std::string> p_text);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_echo(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_text);
#endif
  virtual void async_tm_echo(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>> callback, std::unique_ptr<::std::string> p_text);
  virtual ::std::int64_t sync_increment(::std::int64_t /*num*/);
  [[deprecated("Use sync_increment instead")]] virtual ::std::int64_t increment(::std::int64_t /*num*/);
  virtual folly::Future<::std::int64_t> future_increment(::std::int64_t p_num);
  virtual folly::SemiFuture<::std::int64_t> semifuture_increment(::std::int64_t p_num);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int64_t> co_increment(::std::int64_t p_num);
  virtual folly::coro::Task<::std::int64_t> co_increment(apache::thrift::RequestParams params, ::std::int64_t p_num);
#endif
  virtual void async_tm_increment(apache::thrift::HandlerCallbackPtr<::std::int64_t> callback, ::std::int64_t p_num);
  virtual ::std::int64_t sync_sum(std::unique_ptr<::std::vector<::std::int64_t>> /*nums*/);
  [[deprecated("Use sync_sum instead")]] virtual ::std::int64_t sum(std::unique_ptr<::std::vector<::std::int64_t>> /*nums*/);
  virtual folly::Future<::std::int64_t> future_sum(std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
  virtual folly::SemiFuture<::std::int64_t> semifuture_sum(std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int64_t> co_sum(std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
  virtual folly::coro::Task<::std::int64_t> co_sum(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
#endif
  virtual void async_tm_sum(apache::thrift::HandlerCallbackPtr<::std::int64_t> callback, std::unique_ptr<::std::vector<::std::int64_t>> p_nums);
  virtual void sync_withStruct(::cpp2::Response& /*_return*/, std::unique_ptr<::cpp2::Request> /*request*/);
  [[deprecated("Use sync_withStruct instead")]] virtual void withStruct(::cpp2::Response& /*_return*/, std::unique_ptr<::cpp2::Request> /*request*/);
  virtual folly::Future<std::unique_ptr<::cpp2::Response>> future_withStruct(std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::Response>> semifuture_withStruct(std::unique_ptr<::cpp2::Request> p_request);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_withStruct(std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_withStruct(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::Request> p_request);
#endif
  virtual void async_tm_withStruct(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>> callback, std::unique_ptr<::cpp2::Request> p_request);
  virtual void sync_multiParam(::cpp2::Response& /*_return*/, std::unique_ptr<::std::string> /*text*/, ::std::int64_t /*num*/, std::unique_ptr<::cpp2::Request> /*request*/);
  [[deprecated("Use sync_multiParam instead")]] virtual void multiParam(::cpp2::Response& /*_return*/, std::unique_ptr<::std::string> /*text*/, ::std::int64_t /*num*/, std::unique_ptr<::cpp2::Request> /*request*/);
  virtual folly::Future<std::unique_ptr<::cpp2::Response>> future_multiParam(std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::Response>> semifuture_multiParam(std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_multiParam(std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
  virtual folly::coro::Task<std::unique_ptr<::cpp2::Response>> co_multiParam(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
#endif
  virtual void async_tm_multiParam(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::Response>> callback, std::unique_ptr<::std::string> p_text, ::std::int64_t p_num, std::unique_ptr<::cpp2::Request> p_request);
 private:
  static ::cpp2::UndecoratedServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_noop{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_echo{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_increment{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sum{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_withStruct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_multiParam{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::UndecoratedService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -1820116457509237888;
  static constexpr ::std::string_view definitionKey = {"\x5a\xfd\x47\xb5\x43\xbd\x46\xcf\x62\x07\x1b\x11\xe9\x72\x86\x5b", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using UndecoratedServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<UndecoratedService> instead")]] = ::apache::thrift::ServiceHandler<UndecoratedService>;
} // namespace cpp2

namespace cpp2 {
class UndecoratedServiceSvNull : public ::apache::thrift::ServiceHandler<UndecoratedService> {
 public:
  void noop() override;
  void echo(::std::string& /*_return*/, std::unique_ptr<::std::string> /*text*/) override;
  ::std::int64_t increment(::std::int64_t /*num*/) override;
  ::std::int64_t sum(std::unique_ptr<::std::vector<::std::int64_t>> /*nums*/) override;
  void withStruct(::cpp2::Response& /*_return*/, std::unique_ptr<::cpp2::Request> /*request*/) override;
  void multiParam(::cpp2::Response& /*_return*/, std::unique_ptr<::std::string> /*text*/, ::std::int64_t /*num*/, std::unique_ptr<::cpp2::Request> /*request*/) override;
};

class UndecoratedServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::UndecoratedService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<UndecoratedServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const UndecoratedServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const UndecoratedServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'noop'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_noop(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_noop(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_noop(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_noop(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'noop'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'echo'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_echo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_echo(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_echo(
      apache::thrift::ContextStack* ctx,
      ::std::string const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_echo(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'echo'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'increment'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_increment(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_increment(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_increment(
      apache::thrift::ContextStack* ctx,
      ::std::int64_t const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_increment(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'increment'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'sum'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sum(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_sum(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sum(
      apache::thrift::ContextStack* ctx,
      ::std::int64_t const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sum(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'sum'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'withStruct'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_withStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_withStruct(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_withStruct(
      apache::thrift::ContextStack* ctx,
      ::cpp2::Response const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_withStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'withStruct'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'multiParam'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_multiParam(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_multiParam(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_multiParam(
      apache::thrift::ContextStack* ctx,
      ::cpp2::Response const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiParam(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'multiParam'
  //

  //
  // End of Service Methods
  //
 public:
  UndecoratedServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::UndecoratedService>* iface) :
      iface_(iface) {}
  ~UndecoratedServiceAsyncProcessor() override {}
};

} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService;
class DecoratedService_ExtendsUndecoratedServiceAsyncProcessor;

class DecoratedService_ExtendsUndecoratedServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {

template <>
class ServiceMethodDecorator<::cpp2::DecoratedService_ExtendsUndecoratedService> : public ServiceMethodDecoratorBase {
 public:
  virtual ~ServiceMethodDecorator() = default;
  // BEGIN inherited methods from ::cpp2::DecoratedService_ExtendsUndecoratedService
  virtual void before_noop(BeforeParams /*beforeParams*/) {}
  virtual void after_noop(AfterParams /*afterParams*/) {}
  virtual void before_echo(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/) {}
  virtual void after_echo(AfterParams /*afterParams*/, const ::std::string& /*result*/) {}
  virtual void before_increment(BeforeParams /*beforeParams*/, ::std::int64_t /*p_num*/) {}
  virtual void after_increment(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_sum(BeforeParams /*beforeParams*/, const ::std::vector<::std::int64_t>& /*p_nums*/) {}
  virtual void after_sum(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_withStruct(BeforeParams /*beforeParams*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_withStruct(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  virtual void before_multiParam(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/, ::std::int64_t /*p_num*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_multiParam(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  // END inherited methods from ::cpp2::DecoratedService_ExtendsUndecoratedService
  virtual void before_extension(BeforeParams /*beforeParams*/) {}
  virtual void after_extension(AfterParams /*afterParams*/) {}
};

template <>
class ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService> : virtual public ::cpp2::UndecoratedServiceSvIf {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService_ExtendsUndecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "DecoratedService_ExtendsUndecoratedService"; }

  typedef ::cpp2::DecoratedService_ExtendsUndecoratedServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_extension();
  [[deprecated("Use sync_extension instead")]] virtual void extension();
  virtual folly::Future<folly::Unit> future_extension();
  virtual folly::SemiFuture<folly::Unit> semifuture_extension();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_extension();
  virtual folly::coro::Task<void> co_extension(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_extension(apache::thrift::HandlerCallbackPtr<void> callback);
 private:
  static ::cpp2::DecoratedService_ExtendsUndecoratedServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_extension{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::DecoratedService_ExtendsUndecoratedService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -1820116457509237888;
  static constexpr ::std::string_view definitionKey = {"\x87\x6f\x27\x54\x43\x5f\xe2\xde\xaf\x33\xbc\x79\xe3\x21\x59\xe0", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using DecoratedService_ExtendsUndecoratedServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<DecoratedService_ExtendsUndecoratedService> instead")]] = ::apache::thrift::ServiceHandler<DecoratedService_ExtendsUndecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsUndecoratedServiceSvNull : public ::apache::thrift::ServiceHandler<DecoratedService_ExtendsUndecoratedService>, virtual public ::apache::thrift::ServiceHandler<::cpp2::UndecoratedService> {
 public:
  void extension() override;
};

class DecoratedService_ExtendsUndecoratedServiceAsyncProcessor : public ::cpp2::UndecoratedServiceAsyncProcessor {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = ::cpp2::UndecoratedServiceAsyncProcessor;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<DecoratedService_ExtendsUndecoratedServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const DecoratedService_ExtendsUndecoratedServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'extension'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_extension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_extension(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_extension(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_extension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'extension'
  //

  //
  // End of Service Methods
  //
 public:
  DecoratedService_ExtendsUndecoratedServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService>* iface) :
      ::cpp2::UndecoratedServiceAsyncProcessor(iface),
      iface_(iface) {}
  ~DecoratedService_ExtendsUndecoratedServiceAsyncProcessor() override {}
};

} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsDecoratedService;
class DecoratedService_ExtendsDecoratedServiceAsyncProcessor;

class DecoratedService_ExtendsDecoratedServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {

template <>
class ServiceMethodDecorator<::cpp2::DecoratedService_ExtendsDecoratedService> : public ServiceMethodDecoratorBase {
 public:
  virtual ~ServiceMethodDecorator() = default;
  // BEGIN inherited methods from ::cpp2::DecoratedService_ExtendsDecoratedService
  virtual void before_noop(BeforeParams /*beforeParams*/) {}
  virtual void after_noop(AfterParams /*afterParams*/) {}
  virtual void before_echo(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/) {}
  virtual void after_echo(AfterParams /*afterParams*/, const ::std::string& /*result*/) {}
  virtual void before_increment(BeforeParams /*beforeParams*/, ::std::int64_t /*p_num*/) {}
  virtual void after_increment(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_sum(BeforeParams /*beforeParams*/, const ::std::vector<::std::int64_t>& /*p_nums*/) {}
  virtual void after_sum(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_withStruct(BeforeParams /*beforeParams*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_withStruct(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  virtual void before_multiParam(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/, ::std::int64_t /*p_num*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_multiParam(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  // END inherited methods from ::cpp2::DecoratedService_ExtendsDecoratedService
  virtual void before_extension(BeforeParams /*beforeParams*/) {}
  virtual void after_extension(AfterParams /*afterParams*/) {}
};

template <>
class ServiceHandler<::cpp2::DecoratedService_ExtendsDecoratedService> : virtual public ::cpp2::DecoratedServiceSvIf {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService_ExtendsDecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "DecoratedService_ExtendsDecoratedService"; }

  typedef ::cpp2::DecoratedService_ExtendsDecoratedServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_extension();
  [[deprecated("Use sync_extension instead")]] virtual void extension();
  virtual folly::Future<folly::Unit> future_extension();
  virtual folly::SemiFuture<folly::Unit> semifuture_extension();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_extension();
  virtual folly::coro::Task<void> co_extension(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_extension(apache::thrift::HandlerCallbackPtr<void> callback);
 private:
  static ::cpp2::DecoratedService_ExtendsDecoratedServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_extension{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::DecoratedService_ExtendsDecoratedService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -1820116457509237888;
  static constexpr ::std::string_view definitionKey = {"\xf2\x54\x4e\x82\x47\xca\x03\xea\xcc\x89\xad\x66\xee\x51\xd1\x84", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using DecoratedService_ExtendsDecoratedServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<DecoratedService_ExtendsDecoratedService> instead")]] = ::apache::thrift::ServiceHandler<DecoratedService_ExtendsDecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsDecoratedServiceSvNull : public ::apache::thrift::ServiceHandler<DecoratedService_ExtendsDecoratedService>, virtual public ::apache::thrift::ServiceHandler<::cpp2::DecoratedService> {
 public:
  void extension() override;
};

class DecoratedService_ExtendsDecoratedServiceAsyncProcessor : public ::cpp2::DecoratedServiceAsyncProcessor {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = ::cpp2::DecoratedServiceAsyncProcessor;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsDecoratedService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<DecoratedService_ExtendsDecoratedServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const DecoratedService_ExtendsDecoratedServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const DecoratedService_ExtendsDecoratedServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'extension'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_extension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_extension(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_extension(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_extension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'extension'
  //

  //
  // End of Service Methods
  //
 public:
  DecoratedService_ExtendsDecoratedServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsDecoratedService>* iface) :
      ::cpp2::DecoratedServiceAsyncProcessor(iface),
      iface_(iface) {}
  ~DecoratedService_ExtendsDecoratedServiceAsyncProcessor() override {}
};

} // namespace cpp2

namespace cpp2 {
class UndecoratedService_ExtendsDecoratedService;
class UndecoratedService_ExtendsDecoratedServiceAsyncProcessor;

class UndecoratedService_ExtendsDecoratedServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::UndecoratedService_ExtendsDecoratedService> : virtual public ::cpp2::DecoratedServiceSvIf {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::UndecoratedService_ExtendsDecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "UndecoratedService_ExtendsDecoratedService"; }

  typedef ::cpp2::UndecoratedService_ExtendsDecoratedServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_extension();
  [[deprecated("Use sync_extension instead")]] virtual void extension();
  virtual folly::Future<folly::Unit> future_extension();
  virtual folly::SemiFuture<folly::Unit> semifuture_extension();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_extension();
  virtual folly::coro::Task<void> co_extension(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_extension(apache::thrift::HandlerCallbackPtr<void> callback);
 private:
  static ::cpp2::UndecoratedService_ExtendsDecoratedServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_extension{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::UndecoratedService_ExtendsDecoratedService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -1820116457509237888;
  static constexpr ::std::string_view definitionKey = {"\x51\x75\x7d\x96\xf5\x1a\xb0\x9b\xad\x1b\x6f\xa7\x5f\xce\x98\x3d", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using UndecoratedService_ExtendsDecoratedServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<UndecoratedService_ExtendsDecoratedService> instead")]] = ::apache::thrift::ServiceHandler<UndecoratedService_ExtendsDecoratedService>;
} // namespace cpp2

namespace cpp2 {
class UndecoratedService_ExtendsDecoratedServiceSvNull : public ::apache::thrift::ServiceHandler<UndecoratedService_ExtendsDecoratedService>, virtual public ::apache::thrift::ServiceHandler<::cpp2::DecoratedService> {
 public:
  void extension() override;
};

class UndecoratedService_ExtendsDecoratedServiceAsyncProcessor : public ::cpp2::DecoratedServiceAsyncProcessor {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = ::cpp2::DecoratedServiceAsyncProcessor;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::UndecoratedService_ExtendsDecoratedService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<UndecoratedService_ExtendsDecoratedServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const UndecoratedService_ExtendsDecoratedServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'extension'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_extension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_extension(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_extension(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_extension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'extension'
  //

  //
  // End of Service Methods
  //
 public:
  UndecoratedService_ExtendsDecoratedServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::UndecoratedService_ExtendsDecoratedService>* iface) :
      ::cpp2::DecoratedServiceAsyncProcessor(iface),
      iface_(iface) {}
  ~UndecoratedService_ExtendsDecoratedServiceAsyncProcessor() override {}
};

} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService;
class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor;

class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {

template <>
class ServiceMethodDecorator<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService> : public ServiceMethodDecoratorBase {
 public:
  virtual ~ServiceMethodDecorator() = default;
  // BEGIN inherited methods from ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService
  // BEGIN inherited methods from ::cpp2::UndecoratedService_ExtendsDecoratedService
  virtual void before_noop(BeforeParams /*beforeParams*/) {}
  virtual void after_noop(AfterParams /*afterParams*/) {}
  virtual void before_echo(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/) {}
  virtual void after_echo(AfterParams /*afterParams*/, const ::std::string& /*result*/) {}
  virtual void before_increment(BeforeParams /*beforeParams*/, ::std::int64_t /*p_num*/) {}
  virtual void after_increment(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_sum(BeforeParams /*beforeParams*/, const ::std::vector<::std::int64_t>& /*p_nums*/) {}
  virtual void after_sum(AfterParams /*afterParams*/, ::std::int64_t /*result*/) {}
  virtual void before_withStruct(BeforeParams /*beforeParams*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_withStruct(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  virtual void before_multiParam(BeforeParams /*beforeParams*/, const ::std::string& /*p_text*/, ::std::int64_t /*p_num*/, const ::cpp2::Request& /*p_request*/) {}
  virtual void after_multiParam(AfterParams /*afterParams*/, const ::cpp2::Response& /*result*/) {}
  // END inherited methods from ::cpp2::UndecoratedService_ExtendsDecoratedService
  virtual void before_extension(BeforeParams /*beforeParams*/) {}
  virtual void after_extension(AfterParams /*afterParams*/) {}
  // END inherited methods from ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService
  virtual void before_secondExtension(BeforeParams /*beforeParams*/, const ::std::string& /*p_input*/) {}
  virtual void after_secondExtension(AfterParams /*afterParams*/, const ::std::string& /*result*/) {}
};

template <>
class ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService> : virtual public ::cpp2::UndecoratedService_ExtendsDecoratedServiceSvIf {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService"; }

  typedef ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual void sync_secondExtension(::std::string& /*_return*/, std::unique_ptr<::std::string> /*input*/);
  [[deprecated("Use sync_secondExtension instead")]] virtual void secondExtension(::std::string& /*_return*/, std::unique_ptr<::std::string> /*input*/);
  virtual folly::Future<std::unique_ptr<::std::string>> future_secondExtension(std::unique_ptr<::std::string> p_input);
  virtual folly::SemiFuture<std::unique_ptr<::std::string>> semifuture_secondExtension(std::unique_ptr<::std::string> p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_secondExtension(std::unique_ptr<::std::string> p_input);
  virtual folly::coro::Task<std::unique_ptr<::std::string>> co_secondExtension(apache::thrift::RequestParams params, std::unique_ptr<::std::string> p_input);
#endif
  virtual void async_tm_secondExtension(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::string>> callback, std::unique_ptr<::std::string> p_input);
 private:
  static ::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_secondExtension{apache::thrift::detail::si::InvocationType::AsyncTm};
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -1820116457509237888;
  static constexpr ::std::string_view definitionKey = {"\x42\xf1\x80\xf5\x23\xa5\xa5\xfe\xcd\x59\xf4\x25\x71\x82\x50\x34", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService> instead")]] = ::apache::thrift::ServiceHandler<DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>;
} // namespace cpp2

namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceSvNull : public ::apache::thrift::ServiceHandler<DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>, virtual public ::apache::thrift::ServiceHandler<::cpp2::UndecoratedService_ExtendsDecoratedService> {
 public:
  void secondExtension(::std::string& /*_return*/, std::unique_ptr<::std::string> /*input*/) override;
};

class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor : public ::cpp2::UndecoratedService_ExtendsDecoratedServiceAsyncProcessor {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = ::cpp2::UndecoratedService_ExtendsDecoratedServiceAsyncProcessor;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'secondExtension'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_secondExtension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_secondExtension(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_secondExtension(
      apache::thrift::ContextStack* ctx,
      ::std::string const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_secondExtension(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'secondExtension'
  //

  //
  // End of Service Methods
  //
 public:
  DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>* iface) :
      ::cpp2::UndecoratedService_ExtendsDecoratedServiceAsyncProcessor(iface),
      iface_(iface) {}
  ~DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedServiceAsyncProcessor() override {}
};

} // namespace cpp2

