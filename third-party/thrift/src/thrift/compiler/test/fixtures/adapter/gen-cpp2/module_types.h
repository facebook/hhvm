/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/annotation/gen-cpp2/cpp_types.h"
#include "thrift/annotation/gen-cpp2/python_types.h"
#include "thrift/annotation/gen-cpp2/thrift_types.h"
#include "thrift/annotation/gen-cpp2/scope_types.h"
#include "thrift/annotation/gen-cpp2/hack_types.h"
#include "adapter_dependency.h"

namespace apache {
namespace thrift {
namespace ident {
struct signature;
struct intField;
struct optionalIntField;
struct intFieldWithDefault;
struct setField;
struct optionalSetField;
struct mapField;
struct optionalMapField;
struct binaryField;
struct longField;
struct adaptedLongField;
struct doubleAdaptedField;
struct intField;
struct setField;
struct mapField;
struct binaryField;
struct longField;
struct field;
struct structField;
struct optionalStructField;
struct structListField;
struct optionalStructListField;
struct unionField;
struct optionalUnionField;
struct adaptedStructField;
struct field;
struct shared_field;
struct opt_shared_field;
struct opt_boxed_field;
struct int_field;
struct string_field;
struct set_field;
struct a;
struct path;
struct field;
struct set_string;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_signature
#define APACHE_THRIFT_ACCESSOR_signature
APACHE_THRIFT_DEFINE_ACCESSOR(signature);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intField
#define APACHE_THRIFT_ACCESSOR_intField
APACHE_THRIFT_DEFINE_ACCESSOR(intField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalIntField
#define APACHE_THRIFT_ACCESSOR_optionalIntField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intFieldWithDefault
#define APACHE_THRIFT_ACCESSOR_intFieldWithDefault
APACHE_THRIFT_DEFINE_ACCESSOR(intFieldWithDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setField
#define APACHE_THRIFT_ACCESSOR_setField
APACHE_THRIFT_DEFINE_ACCESSOR(setField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalSetField
#define APACHE_THRIFT_ACCESSOR_optionalSetField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalSetField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalMapField
#define APACHE_THRIFT_ACCESSOR_optionalMapField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalMapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryField
#define APACHE_THRIFT_ACCESSOR_binaryField
APACHE_THRIFT_DEFINE_ACCESSOR(binaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longField
#define APACHE_THRIFT_ACCESSOR_longField
APACHE_THRIFT_DEFINE_ACCESSOR(longField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedLongField
#define APACHE_THRIFT_ACCESSOR_adaptedLongField
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleAdaptedField
#define APACHE_THRIFT_ACCESSOR_doubleAdaptedField
APACHE_THRIFT_DEFINE_ACCESSOR(doubleAdaptedField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intField
#define APACHE_THRIFT_ACCESSOR_intField
APACHE_THRIFT_DEFINE_ACCESSOR(intField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setField
#define APACHE_THRIFT_ACCESSOR_setField
APACHE_THRIFT_DEFINE_ACCESSOR(setField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryField
#define APACHE_THRIFT_ACCESSOR_binaryField
APACHE_THRIFT_DEFINE_ACCESSOR(binaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longField
#define APACHE_THRIFT_ACCESSOR_longField
APACHE_THRIFT_DEFINE_ACCESSOR(longField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structField
#define APACHE_THRIFT_ACCESSOR_structField
APACHE_THRIFT_DEFINE_ACCESSOR(structField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalStructField
#define APACHE_THRIFT_ACCESSOR_optionalStructField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalStructField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structListField
#define APACHE_THRIFT_ACCESSOR_structListField
APACHE_THRIFT_DEFINE_ACCESSOR(structListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalStructListField
#define APACHE_THRIFT_ACCESSOR_optionalStructListField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalStructListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionField
#define APACHE_THRIFT_ACCESSOR_unionField
APACHE_THRIFT_DEFINE_ACCESSOR(unionField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalUnionField
#define APACHE_THRIFT_ACCESSOR_optionalUnionField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalUnionField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedStructField
#define APACHE_THRIFT_ACCESSOR_adaptedStructField
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedStructField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shared_field
#define APACHE_THRIFT_ACCESSOR_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_shared_field
#define APACHE_THRIFT_ACCESSOR_opt_shared_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_shared_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opt_boxed_field
#define APACHE_THRIFT_ACCESSOR_opt_boxed_field
APACHE_THRIFT_DEFINE_ACCESSOR(opt_boxed_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_path
#define APACHE_THRIFT_ACCESSOR_path
APACHE_THRIFT_DEFINE_ACCESSOR(path);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_string
#define APACHE_THRIFT_ACCESSOR_set_string
APACHE_THRIFT_DEFINE_ACCESSOR(set_string);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace thrift { namespace test {
class MyAnnotation;
class Foo;
class Baz;
namespace detail {
class DirectlyAdapted;
} // namespace detail
class Bar;
class StructWithFieldAdapter;
class TerseAdaptedFields;
class A;
class B;
class Config;
class MyStruct;
}}} // facebook::thrift::test
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace thrift { namespace test {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::std::set<::std::string>> SetWithAdapter;
typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::std::string> StringWithAdapter;
typedef ::std::vector<::facebook::thrift::test::StringWithAdapter> ListWithElemAdapter;
typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::facebook::thrift::test::ListWithElemAdapter> ListWithElemAdapter_withAdapter;
typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::std::int64_t> MyI64;
typedef ::facebook::thrift::test::MyI64 DoubleTypedefI64;
typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::std::int32_t> MyI32;

class Foo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 11;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<6>,
                                                   ::apache::thrift::field_id<7>,
                                                   ::apache::thrift::field_id<8>,
                                                   ::apache::thrift::field_id<9>,
                                                   ::apache::thrift::field_id<10>,
                                                   ::apache::thrift::field_id<11>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::binary_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::intField,
                                                      ::apache::thrift::ident::optionalIntField,
                                                      ::apache::thrift::ident::intFieldWithDefault,
                                                      ::apache::thrift::ident::setField,
                                                      ::apache::thrift::ident::optionalSetField,
                                                      ::apache::thrift::ident::mapField,
                                                      ::apache::thrift::ident::optionalMapField,
                                                      ::apache::thrift::ident::binaryField,
                                                      ::apache::thrift::ident::longField,
                                                      ::apache::thrift::ident::adaptedLongField,
                                                      ::apache::thrift::ident::doubleAdaptedField>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::intField> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::ident::optionalIntField> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::ident::intFieldWithDefault> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::ident::setField> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 5;
    template<> static constexpr int value<::apache::thrift::ident::optionalSetField> = 5;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 6;
    template<> static constexpr int value<::apache::thrift::ident::mapField> = 6;
    template<> static constexpr int value<::apache::thrift::field_id<7>> = 7;
    template<> static constexpr int value<::apache::thrift::ident::optionalMapField> = 7;
    template<> static constexpr int value<::apache::thrift::field_id<8>> = 8;
    template<> static constexpr int value<::apache::thrift::ident::binaryField> = 8;
    template<> static constexpr int value<::apache::thrift::field_id<9>> = 9;
    template<> static constexpr int value<::apache::thrift::ident::longField> = 9;
    template<> static constexpr int value<::apache::thrift::field_id<10>> = 10;
    template<> static constexpr int value<::apache::thrift::ident::adaptedLongField> = 10;
    template<> static constexpr int value<::apache::thrift::field_id<11>> = 11;
    template<> static constexpr int value<::apache::thrift::ident::doubleAdaptedField> = 11;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::intField>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::optionalIntField>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::intFieldWithDefault>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::setField>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::optionalSetField>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::mapField>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<7>>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::optionalMapField>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<8>>) { return 8; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::binaryField>) { return 8; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<9>>) { return 9; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::longField>) { return 9; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<10>>) { return 10; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::adaptedLongField>) { return 10; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<11>>) { return 11; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::doubleAdaptedField>) { return 11; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>, T, std::enable_if_t<sizeof(T) != -6>> { static constexpr int value = 6; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>, T, std::enable_if_t<sizeof(T) != -7>> { static constexpr int value = 7; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::binary_t>, T, std::enable_if_t<sizeof(T) != -8>> { static constexpr int value = 8; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>, T, std::enable_if_t<sizeof(T) != -9>> { static constexpr int value = 9; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>>, T, std::enable_if_t<sizeof(T) != -10>> { static constexpr int value = 10; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>, T, std::enable_if_t<sizeof(T) != -11>> { static constexpr int value = 11; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Foo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Foo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Foo(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo> intField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo> optionalIntField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo> intFieldWithDefault__arg, ::facebook::thrift::test::SetWithAdapter setField__arg, ::facebook::thrift::test::SetWithAdapter optionalSetField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo> mapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo> optionalMapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo> binaryField__arg, ::facebook::thrift::test::MyI64 longField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo> adaptedLongField__arg, ::facebook::thrift::test::DoubleTypedefI64 doubleAdaptedField__arg);

  Foo(Foo&&) noexcept;
  Foo(const Foo& src);


  Foo& operator=(Foo&&) noexcept;
  Foo& operator=(const Foo& src);

  ~Foo();

 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo> __fbthrift_field_intField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo> __fbthrift_field_optionalIntField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo> __fbthrift_field_intFieldWithDefault;
 private:
  ::facebook::thrift::test::SetWithAdapter __fbthrift_field_setField;
 private:
  ::facebook::thrift::test::SetWithAdapter __fbthrift_field_optionalSetField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo> __fbthrift_field_mapField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo> __fbthrift_field_optionalMapField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo> __fbthrift_field_binaryField;
 private:
  ::facebook::thrift::test::MyI64 __fbthrift_field_longField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo> __fbthrift_field_adaptedLongField;
 private:
  ::facebook::thrift::test::DoubleTypedefI64 __fbthrift_field_doubleAdaptedField;
 private:
  apache::thrift::detail::isset_bitset<11, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Foo&) const;
  bool operator<(const Foo&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intField_ref() const& {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intField_ref() & {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intField() const& {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intField() & {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intField() && {
    return {static_cast<T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalIntField_ref() const& {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalIntField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalIntField_ref() & {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalIntField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalIntField() const& {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalIntField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalIntField() & {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalIntField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intFieldWithDefault_ref() const& {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intFieldWithDefault_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intFieldWithDefault_ref() & {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intFieldWithDefault_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intFieldWithDefault() const& {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intFieldWithDefault() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intFieldWithDefault() & {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intFieldWithDefault() && {
    return {static_cast<T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setField_ref() const& {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setField_ref() & {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setField() const& {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setField() & {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setField() && {
    return {static_cast<T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalSetField_ref() const& {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalSetField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalSetField_ref() & {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalSetField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalSetField() const& {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalSetField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalSetField() & {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalSetField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapField_ref() const& {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapField_ref() & {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapField() const& {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapField() & {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapField() && {
    return {static_cast<T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalMapField_ref() const& {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalMapField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalMapField_ref() & {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalMapField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalMapField() const& {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalMapField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalMapField() & {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 7, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalMapField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryField_ref() const& {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryField_ref() & {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryField() const& {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryField() & {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 8, ::std::string, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryField() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> longField_ref() const& {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> longField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_longField), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> longField_ref() & {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> longField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_longField), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> longField() const& {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> longField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_longField), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> longField() & {
    return {this->__fbthrift_field_longField, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> longField() && {
    return {static_cast<T&&>(this->__fbthrift_field_longField), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> adaptedLongField_ref() const& {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> adaptedLongField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_adaptedLongField), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> adaptedLongField_ref() & {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> adaptedLongField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_adaptedLongField), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> adaptedLongField() const& {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> adaptedLongField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_adaptedLongField), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> adaptedLongField() & {
    return {this->__fbthrift_field_adaptedLongField, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter2, 10, ::facebook::thrift::test::MyI64, Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> adaptedLongField() && {
    return {static_cast<T&&>(this->__fbthrift_field_adaptedLongField), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleAdaptedField_ref() const& {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleAdaptedField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleAdaptedField), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleAdaptedField_ref() & {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleAdaptedField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleAdaptedField), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleAdaptedField() const& {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleAdaptedField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleAdaptedField), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleAdaptedField() & {
    return {this->__fbthrift_field_doubleAdaptedField, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DoubleTypedefI64>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleAdaptedField() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleAdaptedField), __isset.at(10), __isset.bit(10)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Foo>;
  friend void swap(Foo& a, Foo& b);
};

template <class Protocol_>
unsigned long Foo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter1, ::facebook::thrift::test::Foo> FooWithAdapter;

namespace detail {
class DirectlyAdapted final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::i32_t>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::field>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::field> = 1;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::field>) { return 1; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::i32_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DirectlyAdapted;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  DirectlyAdapted() :
      __fbthrift_field_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg);

  DirectlyAdapted(DirectlyAdapted&&) = default;

  DirectlyAdapted(const DirectlyAdapted&) = default;


  DirectlyAdapted& operator=(DirectlyAdapted&&) = default;

  DirectlyAdapted& operator=(const DirectlyAdapted&) = default;
 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DirectlyAdapted&) const;
  bool operator<(const DirectlyAdapted&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  ::std::int32_t get_field() const {
    return __fbthrift_field_field;
  }

  [[deprecated("Use `FOO.field_ref() = BAR;` instead of `FOO.set_field(BAR);`")]]
  ::std::int32_t& set_field(::std::int32_t field_) {
    field_ref() = field_;
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DirectlyAdapted>;
  friend void swap(DirectlyAdapted& a, DirectlyAdapted& b);
};

template <class Protocol_>
unsigned long DirectlyAdapted::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DirectlyAdapted = ::apache::thrift::adapt_detail::adapted_t<::my::Adapter, ::facebook::thrift::test::detail::DirectlyAdapted>;


class Baz final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>,
                                                   ::apache::thrift::field_id<8>,
                                                   ::apache::thrift::field_id<9>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::binary_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::intField,
                                                      ::apache::thrift::ident::setField,
                                                      ::apache::thrift::ident::mapField,
                                                      ::apache::thrift::ident::binaryField,
                                                      ::apache::thrift::ident::longField>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::intField> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 2;
    template<> static constexpr int value<::apache::thrift::ident::setField> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 3;
    template<> static constexpr int value<::apache::thrift::ident::mapField> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<8>> = 4;
    template<> static constexpr int value<::apache::thrift::ident::binaryField> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<9>> = 5;
    template<> static constexpr int value<::apache::thrift::ident::longField> = 5;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::intField>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::setField>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::mapField>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<8>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::binaryField>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<9>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::longField>) { return 5; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter3, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>>>>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::binary_t>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i64_t>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Baz;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    intField = 1,
    setField = 4,
    mapField = 6,
    binaryField = 8,
    longField = 9,
  } ;

  Baz()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  Baz(Baz&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::intField:
      {
        set_intField(std::move(rhs.value_.intField));
        break;
      }
      case Type::setField:
      {
        set_setField(std::move(rhs.value_.setField));
        break;
      }
      case Type::mapField:
      {
        set_mapField(std::move(rhs.value_.mapField));
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(std::move(rhs.value_.binaryField));
        break;
      }
      case Type::longField:
      {
        set_longField(std::move(rhs.value_.longField));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  Baz(const Baz& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::intField:
      {
        set_intField(rhs.value_.intField);
        break;
      }
      case Type::setField:
      {
        set_setField(rhs.value_.setField);
        break;
      }
      case Type::mapField:
      {
        set_mapField(rhs.value_.mapField);
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(rhs.value_.binaryField);
        break;
      }
      case Type::longField:
      {
        set_longField(rhs.value_.longField);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  Baz& operator=(Baz&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::intField:
      {
        set_intField(std::move(rhs.value_.intField));
        break;
      }
      case Type::setField:
      {
        set_setField(std::move(rhs.value_.setField));
        break;
      }
      case Type::mapField:
      {
        set_mapField(std::move(rhs.value_.mapField));
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(std::move(rhs.value_.binaryField));
        break;
      }
      case Type::longField:
      {
        set_longField(std::move(rhs.value_.longField));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  Baz& operator=(const Baz& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::intField:
      {
        set_intField(rhs.value_.intField);
        break;
      }
      case Type::setField:
      {
        set_setField(rhs.value_.setField);
        break;
      }
      case Type::mapField:
      {
        set_mapField(rhs.value_.mapField);
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(rhs.value_.binaryField);
        break;
      }
      case Type::longField:
      {
        set_longField(rhs.value_.longField);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~Baz() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz> intField;
    ::facebook::thrift::test::SetWithAdapter setField;
    ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz> mapField;
    ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz> binaryField;
    ::facebook::thrift::test::MyI64 longField;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const Baz&) const;
  bool operator<(const Baz&) const;

  ::std::int32_t& set_intField(::std::int32_t t = ::std::int32_t()) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::intField);
    ::new (std::addressof(value_.intField)) ::std::int32_t(t);
    return value_.intField;
  }

  ::facebook::thrift::test::SetWithAdapter& set_setField(::facebook::thrift::test::SetWithAdapter const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::setField);
    ::new (std::addressof(value_.setField)) ::facebook::thrift::test::SetWithAdapter(t);
    return value_.setField;
  }

  ::facebook::thrift::test::SetWithAdapter& set_setField(::facebook::thrift::test::SetWithAdapter&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::setField);
    ::new (std::addressof(value_.setField)) ::facebook::thrift::test::SetWithAdapter(std::move(t));
    return value_.setField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::facebook::thrift::test::SetWithAdapter, T...>> ::facebook::thrift::test::SetWithAdapter& set_setField(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::setField);
    ::new (std::addressof(value_.setField)) ::facebook::thrift::test::SetWithAdapter(std::forward<T>(t)...);
    return value_.setField;
  }

  ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>& set_mapField(::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter> const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::mapField);
    ::new (std::addressof(value_.mapField)) ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>(t);
    return value_.mapField;
  }

  ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>& set_mapField(::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::mapField);
    ::new (std::addressof(value_.mapField)) ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>(std::move(t));
    return value_.mapField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, T...>> ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>& set_mapField(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::mapField);
    ::new (std::addressof(value_.mapField)) ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>(std::forward<T>(t)...);
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>& set_binaryField(::std::string const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::binaryField);
    ::new (std::addressof(value_.binaryField)) ::std::string(t);
    return value_.binaryField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>& set_binaryField(::std::string&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::binaryField);
    ::new (std::addressof(value_.binaryField)) ::std::string(std::move(t));
    return value_.binaryField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>& set_binaryField(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::binaryField);
    ::new (std::addressof(value_.binaryField)) ::std::string(std::forward<T>(t)...);
    return value_.binaryField;
  }

  ::facebook::thrift::test::MyI64& set_longField(::facebook::thrift::test::MyI64 t = ::facebook::thrift::test::MyI64()) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::longField);
    ::new (std::addressof(value_.longField)) ::facebook::thrift::test::MyI64(t);
    return value_.longField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz> const& get_intField() const {
    if (getType() != Type::intField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.intField;
  }

  ::facebook::thrift::test::SetWithAdapter const& get_setField() const {
    if (getType() != Type::setField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.setField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz> const& get_mapField() const {
    if (getType() != Type::mapField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz> const& get_binaryField() const {
    if (getType() != Type::binaryField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.binaryField;
  }

  ::facebook::thrift::test::MyI64 const& get_longField() const {
    if (getType() != Type::longField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.longField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz>& mutable_intField() {
    assert(getType() == Type::intField);
    return value_.intField;
  }

  ::facebook::thrift::test::SetWithAdapter& mutable_setField() {
    assert(getType() == Type::setField);
    return value_.setField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz>& mutable_mapField() {
    assert(getType() == Type::mapField);
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>& mutable_binaryField() {
    assert(getType() == Type::binaryField);
    return value_.binaryField;
  }

  ::facebook::thrift::test::MyI64& mutable_longField() {
    assert(getType() == Type::longField);
    return value_.longField;
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz> move_intField() {
    assert(getType() == Type::intField);
    return std::move(value_.intField);
  }

  ::facebook::thrift::test::SetWithAdapter move_setField() {
    assert(getType() == Type::setField);
    return std::move(value_.setField);
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz> move_mapField() {
    assert(getType() == Type::mapField);
    return std::move(value_.mapField);
  }

  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz> move_binaryField() {
    assert(getType() == Type::binaryField);
    return std::move(value_.binaryField);
  }

  ::facebook::thrift::test::MyI64 move_longField() {
    assert(getType() == Type::longField);
    return std::move(value_.longField);
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intField_ref() const& {
    return {value_.intField, type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intField_ref() const&& {
    return {std::move(value_.intField), type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intField_ref() & {
    return {value_.intField, type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intField_ref() && {
    return {std::move(value_.intField), type_, folly::to_underlying(Type::intField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> setField_ref() const& {
    return {value_.setField, type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> setField_ref() const&& {
    return {std::move(value_.setField), type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> setField_ref() & {
    return {value_.setField, type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> setField_ref() && {
    return {std::move(value_.setField), type_, folly::to_underlying(Type::setField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> mapField_ref() const& {
    return {value_.mapField, type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> mapField_ref() const&& {
    return {std::move(value_.mapField), type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> mapField_ref() & {
    return {value_.mapField, type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter3, 6, ::std::map<::std::string, ::facebook::thrift::test::ListWithElemAdapter_withAdapter>, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> mapField_ref() && {
    return {std::move(value_.mapField), type_, folly::to_underlying(Type::mapField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> binaryField_ref() const& {
    return {value_.binaryField, type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> binaryField_ref() const&& {
    return {std::move(value_.binaryField), type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> binaryField_ref() & {
    return {value_.binaryField, type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 8, ::std::string, Baz>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> binaryField_ref() && {
    return {std::move(value_.binaryField), type_, folly::to_underlying(Type::binaryField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> longField_ref() const& {
    return {value_.longField, type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> longField_ref() const&& {
    return {std::move(value_.longField), type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> longField_ref() & {
    return {value_.longField, type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::facebook::thrift::test::MyI64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> longField_ref() && {
    return {std::move(value_.longField), type_, folly::to_underlying(Type::longField), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Baz>;
  friend void swap(Baz& a, Baz& b);
};

template <class Protocol_>
unsigned long Baz::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Bar final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<6>,
                                                   ::apache::thrift::field_id<7>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>,
                                                         ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>>,
                                                         ::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::union_t<::facebook::thrift::test::Baz>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::union_t<::facebook::thrift::test::Baz>>,
                                                         ::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::DirectlyAdapted>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::structField,
                                                      ::apache::thrift::ident::optionalStructField,
                                                      ::apache::thrift::ident::structListField,
                                                      ::apache::thrift::ident::optionalStructListField,
                                                      ::apache::thrift::ident::unionField,
                                                      ::apache::thrift::ident::optionalUnionField,
                                                      ::apache::thrift::ident::adaptedStructField>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::structField> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::ident::optionalStructField> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::ident::structListField> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::ident::optionalStructListField> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 5;
    template<> static constexpr int value<::apache::thrift::ident::unionField> = 5;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 6;
    template<> static constexpr int value<::apache::thrift::ident::optionalUnionField> = 6;
    template<> static constexpr int value<::apache::thrift::field_id<7>> = 7;
    template<> static constexpr int value<::apache::thrift::ident::adaptedStructField> = 7;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::structField>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::optionalStructField>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::structListField>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::optionalStructListField>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::unionField>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::optionalUnionField>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<7>>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::adaptedStructField>) { return 7; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::struct_t<::facebook::thrift::test::Foo>>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::union_t<::facebook::thrift::test::Baz>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::union_t<::facebook::thrift::test::Baz>>, T, std::enable_if_t<sizeof(T) != -6>> { static constexpr int value = 6; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::detail::DirectlyAdapted>>, T, std::enable_if_t<sizeof(T) != -7>> { static constexpr int value = 7; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Bar;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Bar();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Bar(apache::thrift::FragileConstructor, ::my::Cpp::Type1 structField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar> optionalStructField__arg, ::std::vector<::facebook::thrift::test::FooWithAdapter> structListField__arg, ::std::vector<::facebook::thrift::test::FooWithAdapter> optionalStructListField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar> unionField__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar> optionalUnionField__arg, ::facebook::thrift::test::DirectlyAdapted adaptedStructField__arg);

  Bar(Bar&&) noexcept;
  Bar(const Bar& src);


  Bar& operator=(Bar&&) noexcept;
  Bar& operator=(const Bar& src);

  ~Bar();

 private:
  ::my::Cpp::Type1 __fbthrift_field_structField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar> __fbthrift_field_optionalStructField;
 private:
  ::std::vector<::facebook::thrift::test::FooWithAdapter> __fbthrift_field_structListField;
 private:
  ::std::vector<::facebook::thrift::test::FooWithAdapter> __fbthrift_field_optionalStructListField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar> __fbthrift_field_unionField;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar> __fbthrift_field_optionalUnionField;
 private:
  ::facebook::thrift::test::DirectlyAdapted __fbthrift_field_adaptedStructField;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Bar&) const;
  bool operator<(const Bar&) const;

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structField_ref() const& {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structField_ref() & {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structField() const& {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structField() & {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::my::Cpp::Type1>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structField() && {
    return {static_cast<T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructField_ref() const& {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructField_ref() & {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructField() const& {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructField() & {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::facebook::thrift::test::Foo, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structListField_ref() const& {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structListField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structListField_ref() & {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structListField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structListField() const& {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structListField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structListField() & {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structListField() && {
    return {static_cast<T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructListField_ref() const& {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructListField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructListField_ref() & {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructListField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructListField() const& {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructListField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructListField() & {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructListField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unionField_ref() const& {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unionField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unionField_ref() & {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unionField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unionField() const& {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unionField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unionField() & {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 5, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unionField() && {
    return {static_cast<T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalUnionField_ref() const& {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalUnionField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalUnionField_ref() & {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalUnionField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalUnionField() const& {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalUnionField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalUnionField() & {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 6, ::facebook::thrift::test::Baz, Bar>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalUnionField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> adaptedStructField_ref() const& {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> adaptedStructField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_adaptedStructField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> adaptedStructField_ref() & {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> adaptedStructField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_adaptedStructField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> adaptedStructField() const& {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> adaptedStructField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_adaptedStructField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> adaptedStructField() & {
    return {this->__fbthrift_field_adaptedStructField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::facebook::thrift::test::DirectlyAdapted>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> adaptedStructField() && {
    return {static_cast<T&&>(this->__fbthrift_field_adaptedStructField), __isset.at(6), __isset.bit(6)};
  }
  const ::std::vector<::facebook::thrift::test::FooWithAdapter>& get_structListField() const&;
  ::std::vector<::facebook::thrift::test::FooWithAdapter> get_structListField() &&;

  template <typename T_Bar_structListField_struct_setter = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  [[deprecated("Use `FOO.structListField_ref() = BAR;` instead of `FOO.set_structListField(BAR);`")]]
  ::std::vector<::facebook::thrift::test::FooWithAdapter>& set_structListField(T_Bar_structListField_struct_setter&& structListField_) {
    structListField_ref() = std::forward<T_Bar_structListField_struct_setter>(structListField_);
    return __fbthrift_field_structListField;
  }
  const ::std::vector<::facebook::thrift::test::FooWithAdapter>* get_optionalStructListField() const&;
  ::std::vector<::facebook::thrift::test::FooWithAdapter>* get_optionalStructListField() &;
  ::std::vector<::facebook::thrift::test::FooWithAdapter>* get_optionalStructListField() && = delete;

  template <typename T_Bar_optionalStructListField_struct_setter = ::std::vector<::facebook::thrift::test::FooWithAdapter>>
  [[deprecated("Use `FOO.optionalStructListField_ref() = BAR;` instead of `FOO.set_optionalStructListField(BAR);`")]]
  ::std::vector<::facebook::thrift::test::FooWithAdapter>& set_optionalStructListField(T_Bar_optionalStructListField_struct_setter&& optionalStructListField_) {
    optionalStructListField_ref() = std::forward<T_Bar_optionalStructListField_struct_setter>(optionalStructListField_);
    return __fbthrift_field_optionalStructListField;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Bar>;
  friend void swap(Bar& a, Bar& b);
};

template <class Protocol_>
unsigned long Bar::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::facebook::thrift::test::Bar> StructWithAdapter;
typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter2, ::facebook::thrift::test::Baz> UnionWithAdapter;

class A final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = A;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  A() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  A(apache::thrift::FragileConstructor);

  A(A&&) = default;

  A(const A&) = default;


  A& operator=(A&&) = default;

  A& operator=(const A&) = default;

 public:

  bool operator==(const A&) const;
  bool operator<(const A&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<A>;
  friend void swap(A& a, A& b);
};

template <class Protocol_>
unsigned long A::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

typedef ::apache::thrift::adapt_detail::adapted_t<::my::Adapter, ::facebook::thrift::test::A> AdaptedA;

class MyAnnotation final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::string_t>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::signature>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::signature> = 1;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::signature>) { return 1; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::string_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyAnnotation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyAnnotation() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyAnnotation(apache::thrift::FragileConstructor, ::std::string signature__arg);

  MyAnnotation(MyAnnotation&&) noexcept;

  MyAnnotation(const MyAnnotation& src);


  MyAnnotation& operator=(MyAnnotation&&) noexcept;
  MyAnnotation& operator=(const MyAnnotation& src);
 private:
  ::std::string __fbthrift_field_signature;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyAnnotation&) const;
  bool operator<(const MyAnnotation&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> signature_ref() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> signature_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> signature_ref() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> signature_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> signature() const& {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> signature() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> signature() & {
    return {this->__fbthrift_field_signature, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> signature() && {
    return {static_cast<T&&>(this->__fbthrift_field_signature), __isset.at(0), __isset.bit(0)};
  }

  const ::std::string& get_signature() const& {
    return __fbthrift_field_signature;
  }

  ::std::string get_signature() && {
    return std::move(__fbthrift_field_signature);
  }

  template <typename T_MyAnnotation_signature_struct_setter = ::std::string>
  [[deprecated("Use `FOO.signature_ref() = BAR;` instead of `FOO.set_signature(BAR);`")]]
  ::std::string& set_signature(T_MyAnnotation_signature_struct_setter&& signature_) {
    signature_ref() = std::forward<T_MyAnnotation_signature_struct_setter>(signature_);
    return __fbthrift_field_signature;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyAnnotation>;
  friend void swap(MyAnnotation& a, MyAnnotation& b);
};

template <class Protocol_>
unsigned long MyAnnotation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructWithFieldAdapter final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::field,
                                                      ::apache::thrift::ident::shared_field,
                                                      ::apache::thrift::ident::opt_shared_field,
                                                      ::apache::thrift::ident::opt_boxed_field>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::field> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::ident::shared_field> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::ident::opt_shared_field> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::ident::opt_boxed_field> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::field>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::shared_field>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::opt_shared_field>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::opt_boxed_field>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithFieldAdapter;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithFieldAdapter() :
      __fbthrift_field_field(),
      __fbthrift_field_shared_field(std::make_shared<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>()) {
    ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_field, *this);
    ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(*__fbthrift_field_shared_field, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithFieldAdapter(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter> field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>> shared_field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>> opt_shared_field__arg, ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>> opt_boxed_field__arg);

  StructWithFieldAdapter(StructWithFieldAdapter&&) noexcept;
  StructWithFieldAdapter(const StructWithFieldAdapter& src);


  StructWithFieldAdapter& operator=(StructWithFieldAdapter&&) noexcept;
  StructWithFieldAdapter& operator=(const StructWithFieldAdapter& src);
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter> __fbthrift_field_field;
 private:
  ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>> __fbthrift_field_shared_field;
 private:
  ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>> __fbthrift_field_opt_shared_field;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>> __fbthrift_field_opt_boxed_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithFieldAdapter&) const;
  bool operator<(const StructWithFieldAdapter&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T& shared_field_ref() & {
    return __fbthrift_field_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T& shared_field_ref() const& {
    return __fbthrift_field_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T&& shared_field_ref() && {
    return static_cast<T&&>(__fbthrift_field_shared_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T&& shared_field_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_shared_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T& shared_field() & {
    return __fbthrift_field_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T& shared_field() const& {
    return __fbthrift_field_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T&& shared_field() && {
    return static_cast<T&&>(__fbthrift_field_shared_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T&& shared_field() const&& {
    return static_cast<const T&&>(__fbthrift_field_shared_field);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T& opt_shared_field_ref() & {
    return __fbthrift_field_opt_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T& opt_shared_field_ref() const& {
    return __fbthrift_field_opt_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T&& opt_shared_field_ref() && {
    return static_cast<T&&>(__fbthrift_field_opt_shared_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T&& opt_shared_field_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_opt_shared_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T& opt_shared_field() & {
    return __fbthrift_field_opt_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T& opt_shared_field() const& {
    return __fbthrift_field_opt_shared_field;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE T&& opt_shared_field() && {
    return static_cast<T&&>(__fbthrift_field_opt_shared_field);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE const T&& opt_shared_field() const&& {
    return static_cast<const T&&>(__fbthrift_field_opt_shared_field);
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> opt_boxed_field_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_opt_boxed_field};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> opt_boxed_field_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_opt_boxed_field)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> opt_boxed_field_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_opt_boxed_field};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> opt_boxed_field_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_opt_boxed_field)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> opt_boxed_field() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_opt_boxed_field};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> opt_boxed_field() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_opt_boxed_field)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> opt_boxed_field() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_opt_boxed_field};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> opt_boxed_field() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_opt_boxed_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithFieldAdapter>;
  friend void swap(StructWithFieldAdapter& a, StructWithFieldAdapter& b);
};

template <class Protocol_>
unsigned long StructWithFieldAdapter::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class TerseAdaptedFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::int_field,
                                                      ::apache::thrift::ident::string_field,
                                                      ::apache::thrift::ident::set_field>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::int_field> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::ident::string_field> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::ident::set_field> = 3;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::int_field>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::string_field>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::set_field>) { return 3; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::i32_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter1, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TerseAdaptedFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TerseAdaptedFields() :
      __fbthrift_field_int_field() {
    ::apache::thrift::adapt_detail::construct<::my::Adapter1, 1>(__fbthrift_field_int_field, *this);
    ::apache::thrift::adapt_detail::construct<::my::Adapter1, 2>(__fbthrift_field_string_field, *this);
    ::apache::thrift::adapt_detail::construct<::my::Adapter1, 3>(__fbthrift_field_set_field, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TerseAdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields> int_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields> string_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields> set_field__arg);

  TerseAdaptedFields(TerseAdaptedFields&&) noexcept;
  TerseAdaptedFields(const TerseAdaptedFields& src);


  TerseAdaptedFields& operator=(TerseAdaptedFields&&) noexcept;
  TerseAdaptedFields& operator=(const TerseAdaptedFields& src);
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields> __fbthrift_field_int_field;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields> __fbthrift_field_string_field;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields> __fbthrift_field_set_field;

 public:

  bool operator==(const TerseAdaptedFields&) const;
  bool operator<(const TerseAdaptedFields&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> int_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> int_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> int_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> int_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> int_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> int_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> int_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> string_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> string_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> string_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> string_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> string_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> string_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 2, ::std::string, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> string_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> set_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> set_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> set_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> set_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> set_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> set_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> set_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_set_field)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TerseAdaptedFields>;
  friend void swap(TerseAdaptedFields& a, TerseAdaptedFields& b);
};

template <class Protocol_>
unsigned long TerseAdaptedFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class B final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::A>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::a>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::a> = 1;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::a>) { return 1; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter, ::apache::thrift::type::struct_t<::facebook::thrift::test::A>>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = B;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  B() {
    ::apache::thrift::adapt_detail::construct<::my::Adapter, 1>(__fbthrift_field_a, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  B(apache::thrift::FragileConstructor, ::facebook::thrift::test::AdaptedA a__arg);

  B(B&&) noexcept;
  B(const B& src);


  B& operator=(B&&) noexcept;
  B& operator=(const B& src);
 private:
  ::facebook::thrift::test::AdaptedA __fbthrift_field_a;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const B&) const;
  bool operator<(const B&) const;

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::AdaptedA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a() && {
    return {static_cast<T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<B>;
  friend void swap(B& a, B& b);
};

template <class Protocol_>
unsigned long B::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Config final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::string_t>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::path>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::path> = 1;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::path>) { return 1; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::string_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Config;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Config() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Config(apache::thrift::FragileConstructor, ::std::string path__arg);

  Config(Config&&) noexcept;

  Config(const Config& src);


  Config& operator=(Config&&) noexcept;
  Config& operator=(const Config& src);
 private:
  ::std::string __fbthrift_field_path;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Config&) const;
  bool operator<(const Config&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> path_ref() const& {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> path_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_path), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> path_ref() & {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> path_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_path), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> path() const& {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> path() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_path), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> path() & {
    return {this->__fbthrift_field_path, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> path() && {
    return {static_cast<T&&>(this->__fbthrift_field_path), __isset.at(0), __isset.bit(0)};
  }

  const ::std::string& get_path() const& {
    return __fbthrift_field_path;
  }

  ::std::string get_path() && {
    return std::move(__fbthrift_field_path);
  }

  template <typename T_Config_path_struct_setter = ::std::string>
  [[deprecated("Use `FOO.path_ref() = BAR;` instead of `FOO.set_path(BAR);`")]]
  ::std::string& set_path(T_Config_path_struct_setter&& path_) {
    path_ref() = std::forward<T_Config_path_struct_setter>(path_);
    return __fbthrift_field_path;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Config>;
  friend void swap(Config& a, Config& b);
};

template <class Protocol_>
unsigned long Config::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::i32_t,
                                                         ::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::ident::field,
                                                      ::apache::thrift::ident::set_string>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::ident::field> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::ident::set_string> = 2;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::field>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::ident::set_string>) { return 2; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::i32_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::my::Adapter2, ::apache::thrift::type::set<::apache::thrift::type::string_t>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct() :
      __fbthrift_field_field() {
    ::apache::thrift::adapt_detail::construct<::my::Adapter2, 2>(__fbthrift_field_set_string, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int32_t field__arg, ::facebook::thrift::test::SetWithAdapter set_string__arg);

  MyStruct(MyStruct&&) noexcept;
  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);
 private:
  ::std::int32_t __fbthrift_field_field;
 private:
  ::facebook::thrift::test::SetWithAdapter __fbthrift_field_set_string;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> set_string_ref() const& {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> set_string_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_set_string), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> set_string_ref() & {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> set_string_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_set_string), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> set_string() const& {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> set_string() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_set_string), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> set_string() & {
    return {this->__fbthrift_field_set_string, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> set_string() && {
    return {static_cast<T&&>(this->__fbthrift_field_set_string), __isset.at(1), __isset.bit(1)};
  }

  ::std::int32_t get_field() const {
    return __fbthrift_field_field;
  }

  [[deprecated("Use `FOO.field_ref() = BAR;` instead of `FOO.set_field(BAR);`")]]
  ::std::int32_t& set_field(::std::int32_t field_) {
    field_ref() = field_;
    return __fbthrift_field_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}} // facebook::thrift::test

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::facebook::thrift::test::Baz::Type>;

template <> struct TEnumTraits<::facebook::thrift::test::Baz::Type> {
  using type = ::facebook::thrift::test::Baz::Type;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
