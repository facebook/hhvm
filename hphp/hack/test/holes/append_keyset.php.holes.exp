[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-29], "\\array_append_keyset");
      fd_fun =
      { f_span = [3:1-7:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([3:40-44], (Hprim Tvoid))));
        f_params =
        [{ param_annotation = (bool); param_type_hint = ((bool), (Some ([3:30-34], (Hprim Tbool)))); 
           param_pos = [3:35-37]; param_name = "$x"; param_info = Param_required; 
           param_readonly = None; param_splat = None; param_callconv = Pnormal; 
           param_named = None; param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([4:3-18],
            (Expr ((keyset<nothing>), [4:3-17], (Assign (((keyset<nothing>), [4:3-6], (Lvar ([4:3-6], $xs))), None, ((keyset<nothing>), [4:9-17], (ValCollection (([4:9-15], Keyset), None, []))))))));
            ([6:3-14],
             (Expr
                ((bool), [6:3-13],
                 (Assign (((bool), [6:3-8], (Array_get (((keyset<nothing>), [6:3-6], (Lvar ([6:3-6], $xs))), None))), None,
                    ((bool), [6:11-13], (Hole (((bool), [6:11-13], (Lvar ([6:11-13], $x))), (bool), (arraykey), Typing))))))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([3:10-29], "__SupportDynamicType"); ua_params = [] }]; 
        f_external = false; f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
      fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([9:10-40], "\\array_append_keyset_string_opt");
       fd_fun =
       { f_span = [9:1-13:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([9:54-58], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (?string); param_type_hint = ((?string), (Some ([9:41-48], (Hoption ([9:42-48], (Hprim Tstring)))))); 
            param_pos = [9:49-51]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([10:3-18],
             (Expr
                ((keyset<nothing>), [10:3-17], (Assign (((keyset<nothing>), [10:3-6], (Lvar ([10:3-6], $xs))), None, ((keyset<nothing>), [10:9-17], (ValCollection (([10:9-15], Keyset), None, []))))))));
             ([12:3-14],
              (Expr
                 ((?string), [12:3-13],
                  (Assign (((?string), [12:3-8], (Array_get (((keyset<string>), [12:3-6], (Lvar ([12:3-6], $xs))), None))), None,
                     ((?string), [12:11-13], (Hole (((?string), [12:11-13], (Lvar ([12:11-13], $x))), (?string), (string), Typing))))))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([9:10-40], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None })