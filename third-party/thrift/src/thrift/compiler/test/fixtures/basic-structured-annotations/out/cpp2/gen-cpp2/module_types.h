/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>
#include "thrift/compiler/test/fixtures/basic-structured-annotations/gen-cpp2/included_types.h"
#include "thrift/compiler/test/fixtures/basic-structured-annotations/gen-cpp2/namespaced_types.h"

namespace apache::thrift {
namespace ident {
struct count;
struct name;
struct name;
struct name;
struct recurse;
struct forward;
struct count;
struct name;
struct nest;
struct annotated_field;
struct annotated_type;
struct annotated_recursive;
struct annotated_nested;
struct context;
struct first;
struct second;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_count
#define APACHE_THRIFT_ACCESSOR_count
APACHE_THRIFT_DEFINE_ACCESSOR(count);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_recurse
#define APACHE_THRIFT_ACCESSOR_recurse
APACHE_THRIFT_DEFINE_ACCESSOR(recurse);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_forward
#define APACHE_THRIFT_ACCESSOR_forward
APACHE_THRIFT_DEFINE_ACCESSOR(forward);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_count
#define APACHE_THRIFT_ACCESSOR_count
APACHE_THRIFT_DEFINE_ACCESSOR(count);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nest
#define APACHE_THRIFT_ACCESSOR_nest
APACHE_THRIFT_DEFINE_ACCESSOR(nest);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_field
#define APACHE_THRIFT_ACCESSOR_annotated_field
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_type
#define APACHE_THRIFT_ACCESSOR_annotated_type
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_recursive
#define APACHE_THRIFT_ACCESSOR_annotated_recursive
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_recursive);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_nested
#define APACHE_THRIFT_ACCESSOR_annotated_nested
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_nested);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_context
#define APACHE_THRIFT_ACCESSOR_context
APACHE_THRIFT_DEFINE_ACCESSOR(context);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_first
#define APACHE_THRIFT_ACCESSOR_first
APACHE_THRIFT_DEFINE_ACCESSOR(first);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_second
#define APACHE_THRIFT_ACCESSOR_second
APACHE_THRIFT_DEFINE_ACCESSOR(second);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace test::fixtures::basic-structured-annotations {

/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  UNKNOWN = 0,
  ONE = 1,
};

} // namespace test::fixtures::basic-structured-annotations

template<> struct std::hash<::test::fixtures::basic-structured-annotations::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic-structured-annotations::MyEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::test::fixtures::basic-structured-annotations::MyEnum> {
  using type = ::test::fixtures::basic-structured-annotations::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "test.dev/fixtures/basic-structured-annotations/MyEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::ONE; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::basic-structured-annotations {
class runtime_annotation;
class structured_annotation_inline;
class structured_annotation_with_default;
class structured_annotation_recursive;
class structured_annotation_forward;
class structured_annotation_nested;
class MyStruct;
class MyException;
class MyUnion;
} // namespace test::fixtures::basic-structured-annotations
// END forward_declare
namespace apache::thrift::detail::annotation {
template<>
const std::vector<std::any>& field_annotation_values<::test::fixtures::basic-structured-annotations::MyStruct>(FieldId);
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::test::fixtures::basic-structured-annotations::structured_annotation_recursive,::apache::thrift::type::field_id<2>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::basic-structured-annotations {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "annotated_with_default_string", "kind": "typedef" } */
using annotated_with_default_string = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "annotated_inline_string", "kind": "typedef" } */
using annotated_inline_string = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "annotated_inline_i64", "kind": "typedef" } */
using annotated_inline_i64 = ::std::int64_t;

/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "runtime_annotation", "kind": "struct" } */
class runtime_annotation final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = true;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = runtime_annotation;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  runtime_annotation() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  runtime_annotation(apache::thrift::FragileConstructor);

  runtime_annotation(runtime_annotation&&) = default;

  runtime_annotation(const runtime_annotation&) = default;


  runtime_annotation& operator=(runtime_annotation&&) = default;

  runtime_annotation& operator=(const runtime_annotation&) = default;

 public:

  bool operator==(const runtime_annotation&) const;
  bool operator<(const runtime_annotation&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<runtime_annotation>;
  friend void swap(runtime_annotation& a, runtime_annotation& b);
};

template <class Protocol_>
unsigned long runtime_annotation::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "structured_annotation_inline", "kind": "struct" } */
class structured_annotation_inline final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::count,
    ::apache::thrift::ident::name
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_inline;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  structured_annotation_inline();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_inline(apache::thrift::FragileConstructor, ::std::int64_t count__arg, ::std::string name__arg);

  structured_annotation_inline(structured_annotation_inline&&) noexcept;

  structured_annotation_inline(const structured_annotation_inline& src);


  structured_annotation_inline& operator=(structured_annotation_inline&&) noexcept;
  structured_annotation_inline& operator=(const structured_annotation_inline& src);

  ~structured_annotation_inline();

 private:
  ::std::int64_t __fbthrift_field_count;
 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_inline&) const;
  bool operator<(const structured_annotation_inline&) const;

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count_ref() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count_ref() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count().value()` instead of `FOO.get_count()`")]]
  ::std::int64_t get_count() const;

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count() = BAR` instead of `FOO.set_count(BAR)`")]]
  ::std::int64_t& set_count(::std::int64_t count_);

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_structured_annotation_inline_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_structured_annotation_inline_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_inline_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_inline>;
  friend void swap(structured_annotation_inline& a, structured_annotation_inline& b);
};

template <class Protocol_>
unsigned long structured_annotation_inline::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "structured_annotation_with_default", "kind": "struct" } */
class structured_annotation_with_default final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_with_default;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  structured_annotation_with_default();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_with_default(apache::thrift::FragileConstructor, ::std::string name__arg);

  structured_annotation_with_default(structured_annotation_with_default&&) noexcept;

  structured_annotation_with_default(const structured_annotation_with_default& src);


  structured_annotation_with_default& operator=(structured_annotation_with_default&&) noexcept;
  structured_annotation_with_default& operator=(const structured_annotation_with_default& src);

  ~structured_annotation_with_default();

 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_with_default&) const;
  bool operator<(const structured_annotation_with_default&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_structured_annotation_with_default_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_structured_annotation_with_default_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_with_default_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_with_default>;
  friend void swap(structured_annotation_with_default& a, structured_annotation_with_default& b);
};

template <class Protocol_>
unsigned long structured_annotation_with_default::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "structured_annotation_forward", "kind": "struct" } */
class structured_annotation_forward final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::count
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_forward;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  structured_annotation_forward() :
      __fbthrift_field_count() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_forward(apache::thrift::FragileConstructor, ::std::int64_t count__arg);

  structured_annotation_forward(structured_annotation_forward&&) = default;

  structured_annotation_forward(const structured_annotation_forward&) = default;


  structured_annotation_forward& operator=(structured_annotation_forward&&) = default;

  structured_annotation_forward& operator=(const structured_annotation_forward&) = default;
 private:
  ::std::int64_t __fbthrift_field_count;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_forward&) const;
  bool operator<(const structured_annotation_forward&) const;

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count_ref() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count_ref() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> count() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> count() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> count() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count().value()` instead of `FOO.get_count()`")]]
  ::std::int64_t get_count() const;

  /** Glean { "field": "count" } */
  [[deprecated("Use `FOO.count() = BAR` instead of `FOO.set_count(BAR)`")]]
  ::std::int64_t& set_count(::std::int64_t count_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_forward>;
  friend void swap(structured_annotation_forward& a, structured_annotation_forward& b);
};

template <class Protocol_>
unsigned long structured_annotation_forward::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "structured_annotation_recursive", "kind": "struct" } */
class structured_annotation_recursive final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::recurse,
    ::apache::thrift::ident::forward
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_recursive;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  structured_annotation_recursive();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_recursive(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive> recurse__arg, ::test::fixtures::basic-structured-annotations::structured_annotation_forward forward__arg);

  structured_annotation_recursive(structured_annotation_recursive&&) noexcept;
  structured_annotation_recursive(const structured_annotation_recursive& src);


  structured_annotation_recursive& operator=(structured_annotation_recursive&&) noexcept;
  structured_annotation_recursive& operator=(const structured_annotation_recursive& src);

  ~structured_annotation_recursive();

 private:
  ::std::string __fbthrift_field_name;
 private:
  ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive> __fbthrift_field_recurse;
 private:
  ::test::fixtures::basic-structured-annotations::structured_annotation_forward __fbthrift_field_forward;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_recursive&) const;
  bool operator<(const structured_annotation_recursive&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }
  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE fbthrift_T& recurse_ref() & {
    return __fbthrift_field_recurse;
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const fbthrift_T& recurse_ref() const& {
    return __fbthrift_field_recurse;
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE fbthrift_T&& recurse_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_recurse);
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const fbthrift_T&& recurse_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_recurse);
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE fbthrift_T& recurse() & {
    return __fbthrift_field_recurse;
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const fbthrift_T& recurse() const& {
    return __fbthrift_field_recurse;
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE fbthrift_T&& recurse() && {
    return static_cast<fbthrift_T&&>(__fbthrift_field_recurse);
  }

  /** Glean { "field": "recurse" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const fbthrift_T&& recurse() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_field_recurse);
  }

  /** Glean { "field": "forward" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> forward_ref() const& {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "forward" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> forward_ref() & {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "forward" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> forward_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_forward), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "forward" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> forward() const& {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "forward" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> forward() & {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "forward" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> forward() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_forward), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_structured_annotation_recursive_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_structured_annotation_recursive_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_recursive_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "forward" } */
  [[deprecated("Use `FOO.forward().value()` instead of `FOO.get_forward()`")]]
  const ::test::fixtures::basic-structured-annotations::structured_annotation_forward& get_forward() const&;

  /** Glean { "field": "forward" } */
  [[deprecated("Use `FOO.forward().value()` instead of `FOO.get_forward()`")]]
  ::test::fixtures::basic-structured-annotations::structured_annotation_forward get_forward() &&;

  /** Glean { "field": "forward" } */
  template <typename T_structured_annotation_recursive_forward_struct_setter = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  [[deprecated("Use `FOO.forward() = BAR` instead of `FOO.set_forward(BAR)`")]]
  ::test::fixtures::basic-structured-annotations::structured_annotation_forward& set_forward(T_structured_annotation_recursive_forward_struct_setter&& forward_) {
    forward_ref() = std::forward<T_structured_annotation_recursive_forward_struct_setter>(forward_);
    return __fbthrift_field_forward;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_recursive>;
  friend void swap(structured_annotation_recursive& a, structured_annotation_recursive& b);
};

template <class Protocol_>
unsigned long structured_annotation_recursive::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "structured_annotation_nested", "kind": "struct" } */
class structured_annotation_nested final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::nest
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_nested;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  structured_annotation_nested();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_nested(apache::thrift::FragileConstructor, ::std::string name__arg, ::test::fixtures::basic-structured-annotations::structured_annotation_with_default nest__arg);

  structured_annotation_nested(structured_annotation_nested&&) noexcept;

  structured_annotation_nested(const structured_annotation_nested& src);


  structured_annotation_nested& operator=(structured_annotation_nested&&) noexcept;
  structured_annotation_nested& operator=(const structured_annotation_nested& src);

  ~structured_annotation_nested();

 private:
  ::std::string __fbthrift_field_name;
 private:
  ::test::fixtures::basic-structured-annotations::structured_annotation_with_default __fbthrift_field_nest;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_nested&) const;
  bool operator<(const structured_annotation_nested&) const;

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "name" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> name() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "nest" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nest_ref() const& {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "nest" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nest_ref() & {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "nest" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nest_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nest), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "nest" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> nest() const& {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "nest" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> nest() & {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "nest" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> nest() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_nest), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  /** Glean { "field": "name" } */
  [[deprecated("Use `FOO.name().value()` instead of `FOO.get_name()`")]]
  ::std::string get_name() && {
    return static_cast<::std::string&&>(__fbthrift_field_name);
  }

  /** Glean { "field": "name" } */
  template <typename T_structured_annotation_nested_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name() = BAR` instead of `FOO.set_name(BAR)`")]]
  ::std::string& set_name(T_structured_annotation_nested_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_nested_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  /** Glean { "field": "nest" } */
  [[deprecated("Use `FOO.nest().value()` instead of `FOO.get_nest()`")]]
  const ::test::fixtures::basic-structured-annotations::structured_annotation_with_default& get_nest() const&;

  /** Glean { "field": "nest" } */
  [[deprecated("Use `FOO.nest().value()` instead of `FOO.get_nest()`")]]
  ::test::fixtures::basic-structured-annotations::structured_annotation_with_default get_nest() &&;

  /** Glean { "field": "nest" } */
  template <typename T_structured_annotation_nested_nest_struct_setter = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  [[deprecated("Use `FOO.nest() = BAR` instead of `FOO.set_nest(BAR)`")]]
  ::test::fixtures::basic-structured-annotations::structured_annotation_with_default& set_nest(T_structured_annotation_nested_nest_struct_setter&& nest_) {
    nest_ref() = std::forward<T_structured_annotation_nested_nest_struct_setter>(nest_);
    return __fbthrift_field_nest;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_nested>;
  friend void swap(structured_annotation_nested& a, structured_annotation_nested& b);
};

template <class Protocol_>
unsigned long structured_annotation_nested::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::annotated_field,
    ::apache::thrift::ident::annotated_type,
    ::apache::thrift::ident::annotated_recursive,
    ::apache::thrift::ident::annotated_nested
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t annotated_field__arg, ::test::fixtures::basic-structured-annotations::annotated_inline_string annotated_type__arg, ::std::string annotated_recursive__arg, ::std::int64_t annotated_nested__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_annotated_field;
 private:
  ::test::fixtures::basic-structured-annotations::annotated_inline_string __fbthrift_field_annotated_type;
 private:
  ::std::string __fbthrift_field_annotated_recursive;
 private:
  ::std::int64_t __fbthrift_field_annotated_nested;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "annotated_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_field_ref() const& {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "annotated_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_field_ref() & {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "annotated_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "annotated_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_field() const& {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "annotated_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_field() & {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "annotated_field" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "annotated_type" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_type_ref() const& {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotated_type" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_type_ref() & {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotated_type" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_type_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_type), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotated_type" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_type() const& {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotated_type" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_type() & {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotated_type" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_type() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_type), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_recursive_ref() const& {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_recursive_ref() & {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_recursive_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_recursive), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_recursive() const& {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_recursive() & {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_recursive() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_recursive), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "annotated_nested" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_nested_ref() const& {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotated_nested" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_nested_ref() & {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotated_nested" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_nested_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_nested), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotated_nested" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> annotated_nested() const& {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotated_nested" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> annotated_nested() & {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotated_nested" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> annotated_nested() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_annotated_nested), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "annotated_field" } */
  [[deprecated("Use `FOO.annotated_field().value()` instead of `FOO.get_annotated_field()`")]]
  ::std::int64_t get_annotated_field() const;

  /** Glean { "field": "annotated_field" } */
  [[deprecated("Use `FOO.annotated_field() = BAR` instead of `FOO.set_annotated_field(BAR)`")]]
  ::std::int64_t& set_annotated_field(::std::int64_t annotated_field_);

  /** Glean { "field": "annotated_type" } */
  [[deprecated("Use `FOO.annotated_type().value()` instead of `FOO.get_annotated_type()`")]]
  const ::test::fixtures::basic-structured-annotations::annotated_inline_string& get_annotated_type() const& {
    return __fbthrift_field_annotated_type;
  }

  /** Glean { "field": "annotated_type" } */
  [[deprecated("Use `FOO.annotated_type().value()` instead of `FOO.get_annotated_type()`")]]
  ::test::fixtures::basic-structured-annotations::annotated_inline_string get_annotated_type() && {
    return static_cast<::test::fixtures::basic-structured-annotations::annotated_inline_string&&>(__fbthrift_field_annotated_type);
  }

  /** Glean { "field": "annotated_type" } */
  template <typename T_MyStruct_annotated_type_struct_setter = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  [[deprecated("Use `FOO.annotated_type() = BAR` instead of `FOO.set_annotated_type(BAR)`")]]
  ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_annotated_type(T_MyStruct_annotated_type_struct_setter&& annotated_type_) {
    annotated_type_ref() = std::forward<T_MyStruct_annotated_type_struct_setter>(annotated_type_);
    return __fbthrift_field_annotated_type;
  }

  /** Glean { "field": "annotated_recursive" } */
  [[deprecated("Use `FOO.annotated_recursive().value()` instead of `FOO.get_annotated_recursive()`")]]
  const ::std::string& get_annotated_recursive() const& {
    return __fbthrift_field_annotated_recursive;
  }

  /** Glean { "field": "annotated_recursive" } */
  [[deprecated("Use `FOO.annotated_recursive().value()` instead of `FOO.get_annotated_recursive()`")]]
  ::std::string get_annotated_recursive() && {
    return static_cast<::std::string&&>(__fbthrift_field_annotated_recursive);
  }

  /** Glean { "field": "annotated_recursive" } */
  template <typename T_MyStruct_annotated_recursive_struct_setter = ::std::string>
  [[deprecated("Use `FOO.annotated_recursive() = BAR` instead of `FOO.set_annotated_recursive(BAR)`")]]
  ::std::string& set_annotated_recursive(T_MyStruct_annotated_recursive_struct_setter&& annotated_recursive_) {
    annotated_recursive_ref() = std::forward<T_MyStruct_annotated_recursive_struct_setter>(annotated_recursive_);
    return __fbthrift_field_annotated_recursive;
  }

  /** Glean { "field": "annotated_nested" } */
  [[deprecated("Use `FOO.annotated_nested().value()` instead of `FOO.get_annotated_nested()`")]]
  ::std::int64_t get_annotated_nested() const;

  /** Glean { "field": "annotated_nested" } */
  [[deprecated("Use `FOO.annotated_nested() = BAR` instead of `FOO.set_annotated_nested(BAR)`")]]
  ::std::int64_t& set_annotated_nested(::std::int64_t annotated_nested_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "MyException", "kind": "exception" } */
class FOLLY_EXPORT MyException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::context
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = MyException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyException(apache::thrift::FragileConstructor, ::std::string context__arg);

  MyException(MyException&&) noexcept;

  MyException(const MyException& src);


  MyException& operator=(MyException&&) noexcept;
  MyException& operator=(const MyException& src);

  ~MyException() override;

 private:
  ::std::string __fbthrift_field_context;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyException&) const;
  bool operator<(const MyException&) const;

  /** Glean { "field": "context" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> context_ref() const& {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "context" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> context_ref() & {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "context" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> context_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_context), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "context" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> context() const& {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "context" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> context() & {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "context" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> context() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_context), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "context" } */
  [[deprecated("Use `FOO.context().value()` instead of `FOO.get_context()`")]]
  const ::std::string& get_context() const& {
    return __fbthrift_field_context;
  }

  /** Glean { "field": "context" } */
  [[deprecated("Use `FOO.context().value()` instead of `FOO.get_context()`")]]
  ::std::string get_context() && {
    return static_cast<::std::string&&>(__fbthrift_field_context);
  }

  /** Glean { "field": "context" } */
  template <typename T_MyException_context_struct_setter = ::std::string>
  [[deprecated("Use `FOO.context() = BAR` instead of `FOO.set_context(BAR)`")]]
  ::std::string& set_context(T_MyException_context_struct_setter&& context_) {
    context_ref() = std::forward<T_MyException_context_struct_setter>(context_);
    return __fbthrift_field_context;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::test::fixtures::basic-structured-annotations::MyException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyException>;
  friend void swap(MyException& a, MyException& b);
};

template <class Protocol_>
unsigned long MyException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift", "name": "MyUnion", "kind": "union" } */
class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::first,
    ::apache::thrift::ident::second
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    first = 1,
    second = 2,
  } ;

  MyUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::first:
      {
        set_first(std::move(rhs.value_.first));
        break;
      }
      case Type::second:
      {
        set_second(std::move(rhs.value_.second));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs);

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::first:
      {
        set_first(std::move(rhs.value_.first));
        break;
      }
      case Type::second:
      {
        set_second(std::move(rhs.value_.second));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs);

  ~MyUnion();

  union storage_type {
    ::test::fixtures::basic-structured-annotations::annotated_inline_string first;
    ::test::fixtures::basic-structured-annotations::annotated_inline_i64 second;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  /** Glean { "field": "first" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_first(::test::fixtures::basic-structured-annotations::annotated_inline_string const &t) {
    using T0 = ::test::fixtures::basic-structured-annotations::annotated_inline_string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::first);
    ::new (std::addressof(value_.first)) T(t);
    return value_.first;
  }

  /** Glean { "field": "first" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_first(::test::fixtures::basic-structured-annotations::annotated_inline_string&& t) {
    using T0 = ::test::fixtures::basic-structured-annotations::annotated_inline_string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::first);
    ::new (std::addressof(value_.first)) T(std::move(t));
    return value_.first;
  }

  /** Glean { "field": "first" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic-structured-annotations::annotated_inline_string, T...>> ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_first(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::first);
    ::new (std::addressof(value_.first)) ::test::fixtures::basic-structured-annotations::annotated_inline_string(std::forward<T>(t)...);
    return value_.first;
  }


  /** Glean { "field": "second" } */
  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-structured-annotations::annotated_inline_i64& set_second(::test::fixtures::basic-structured-annotations::annotated_inline_i64 t = ::test::fixtures::basic-structured-annotations::annotated_inline_i64()) {
    using T0 = ::test::fixtures::basic-structured-annotations::annotated_inline_i64;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::second);
    ::new (std::addressof(value_.second)) T(t);
    return value_.second;
  }


  /** Glean { "field": "first" } */
  ::test::fixtures::basic-structured-annotations::annotated_inline_string const& get_first() const {
    if (getType() != Type::first) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.first;
  }

  /** Glean { "field": "second" } */
  ::test::fixtures::basic-structured-annotations::annotated_inline_i64 const& get_second() const {
    if (getType() != Type::second) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.second;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_string& mutable_first() {
    assert(getType() == Type::first);
    return value_.first;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_i64& mutable_second() {
    assert(getType() == Type::second);
    return value_.second;
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  T move_first() {
    assert(getType() == Type::first);
    return std::move(value_.first);
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  T move_second() {
    assert(getType() == Type::second);
    return std::move(value_.second);
  }

  /** Glean { "field": "first" } */
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> first_ref() const& {
    return {value_.first, fbthrift_type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "first" } */
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> first_ref() & {
    return {value_.first, fbthrift_type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "first" } */
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> first_ref() && {
    return {std::move(value_.first), fbthrift_type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "first" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::basic-structured-annotations::annotated_inline_string&> first() const& {
    return {value_.first, fbthrift_type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "first" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic-structured-annotations::annotated_inline_string&> first() & {
    return {value_.first, fbthrift_type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "first" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic-structured-annotations::annotated_inline_string&&> first() && {
    return {std::move(value_.first), fbthrift_type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "second" } */
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> second_ref() const& {
    return {value_.second, fbthrift_type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "second" } */
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> second_ref() & {
    return {value_.second, fbthrift_type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "second" } */
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> second_ref() && {
    return {std::move(value_.second), fbthrift_type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "second" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::basic-structured-annotations::annotated_inline_i64&> second() const& {
    return {value_.second, fbthrift_type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "second" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic-structured-annotations::annotated_inline_i64&> second() & {
    return {value_.second, fbthrift_type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "second" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic-structured-annotations::annotated_inline_i64&&> second() && {
    return {std::move(value_.second), fbthrift_type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::basic-structured-annotations

namespace apache::thrift {

template <> struct TEnumDataStorage<::test::fixtures::basic-structured-annotations::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::basic-structured-annotations::MyUnion::Type> {
  using type = ::test::fixtures::basic-structured-annotations::MyUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::first; }
  static constexpr type max() { return type::second; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::runtime_annotation, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x9b\x73\x29\x2b\x7b\x87\x4b\xea\xa0\x24\xba\xdf\xf7\x43\xcf\x1e", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::structured_annotation_inline, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\xe7\x56\x35\x0d\x01\x80\x9e\xdb\xbb\xf3\x90\xe2\xc3\x46\xea\xf1", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::structured_annotation_with_default, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x17\x84\x45\x64\xcb\x5c\x2f\x2f\xd7\x36\x3e\xf3\x0f\x42\x76\x67", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::structured_annotation_recursive, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x76\x90\x39\x7a\x8f\x1c\x0b\x47\x1a\xab\x8c\xea\xdd\xf5\x1a\xf0", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::structured_annotation_forward, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x3f\x2d\x8b\x27\x04\xa7\x8a\x8d\xad\x89\xdd\x30\x95\x23\x3b\xc3", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::structured_annotation_nested, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x6f\x78\x42\xfb\x7e\x81\x31\xf7\x45\xd0\x66\xe9\x6d\x78\x2d\xb0", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::MyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x6d\x6c\x67\x3e\x71\xd8\xe5\xd6\xbd\x84\x93\xe0\xab\x73\xbb\xc8", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::MyException, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x63\xa1\xed\x67\xd7\x4d\x5b\x56\xee\xdf\x01\x12\x64\xc7\x76\xac", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::MyUnion, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\x13\x6c\xb4\xf2\x3d\xbd\xd7\x25\x50\x6f\xa3\x74\xa9\x2f\x24\x83", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic-structured-annotations::MyEnum, true> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -5948438589959711339;
  static constexpr ::std::string_view definitionKey = {"\xbe\x7c\x5e\xb8\x14\xd8\xb7\x4d\xcb\x18\x07\x53\xad\x26\x1d\x3b", 16};
};
} // namespace apache::thrift::detail
