/**
 * Autogenerated by Thrift for src/deprecated_tag_incompatible_terse_write.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/annotation/gen-cpp2/cpp_types.h"
#include "thrift/annotation/gen-cpp2/thrift_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct field1;
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct terse_bool_field;
struct terse_byte_field;
struct terse_short_field;
struct terse_int_field;
struct terse_long_field;
struct terse_float_field;
struct terse_double_field;
struct terse_string_field;
struct terse_binary_field;
struct terse_enum_field;
struct terse_list_field;
struct terse_set_field;
struct terse_map_field;
struct terse_struct_field;
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct bool_field;
struct byte_field;
struct short_field;
struct int_field;
struct long_field;
struct float_field;
struct double_field;
struct string_field;
struct binary_field;
struct enum_field;
struct list_field;
struct set_field;
struct map_field;
struct struct_field;
struct field1;
struct field2;
struct field3;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_bool_field
#define APACHE_THRIFT_ACCESSOR_terse_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_byte_field
#define APACHE_THRIFT_ACCESSOR_terse_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_short_field
#define APACHE_THRIFT_ACCESSOR_terse_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_int_field
#define APACHE_THRIFT_ACCESSOR_terse_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_long_field
#define APACHE_THRIFT_ACCESSOR_terse_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_float_field
#define APACHE_THRIFT_ACCESSOR_terse_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_double_field
#define APACHE_THRIFT_ACCESSOR_terse_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_string_field
#define APACHE_THRIFT_ACCESSOR_terse_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_binary_field
#define APACHE_THRIFT_ACCESSOR_terse_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_enum_field
#define APACHE_THRIFT_ACCESSOR_terse_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_list_field
#define APACHE_THRIFT_ACCESSOR_terse_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_set_field
#define APACHE_THRIFT_ACCESSOR_terse_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_map_field
#define APACHE_THRIFT_ACCESSOR_terse_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_terse_struct_field
#define APACHE_THRIFT_ACCESSOR_terse_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(terse_struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bool_field
#define APACHE_THRIFT_ACCESSOR_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byte_field
#define APACHE_THRIFT_ACCESSOR_byte_field
APACHE_THRIFT_DEFINE_ACCESSOR(byte_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_short_field
#define APACHE_THRIFT_ACCESSOR_short_field
APACHE_THRIFT_DEFINE_ACCESSOR(short_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_int_field
#define APACHE_THRIFT_ACCESSOR_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_long_field
#define APACHE_THRIFT_ACCESSOR_long_field
APACHE_THRIFT_DEFINE_ACCESSOR(long_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_float_field
#define APACHE_THRIFT_ACCESSOR_float_field
APACHE_THRIFT_DEFINE_ACCESSOR(float_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_double_field
#define APACHE_THRIFT_ACCESSOR_double_field
APACHE_THRIFT_DEFINE_ACCESSOR(double_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_field
#define APACHE_THRIFT_ACCESSOR_enum_field
APACHE_THRIFT_DEFINE_ACCESSOR(enum_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_field
#define APACHE_THRIFT_ACCESSOR_set_field
APACHE_THRIFT_DEFINE_ACCESSOR(set_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_field
#define APACHE_THRIFT_ACCESSOR_map_field
APACHE_THRIFT_DEFINE_ACCESSOR(map_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_struct_field
#define APACHE_THRIFT_ACCESSOR_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace facebook { namespace thrift { namespace test { namespace terse_write { namespace deprecated_tag_incompatible {

enum class MyEnum {
  ME0 = 0,
  ME1 = 1,
};



}}}}} // facebook::thrift::test::terse_write::deprecated_tag_incompatible

namespace std {
template<> struct hash<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum> :
  ::apache::thrift::detail::enum_hash<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>;

template <> struct TEnumTraits<::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum> {
  using type = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ME0; }
  static constexpr type max() { return type::ME1; }
};


}} // apache::thrift

namespace facebook { namespace thrift { namespace test { namespace terse_write { namespace deprecated_tag_incompatible {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::NamesToValuesMapType _MyEnum_NAMES_TO_VALUES;
#endif
}}}}} // facebook::thrift::test::terse_write::deprecated_tag_incompatible

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace thrift { namespace test { namespace terse_write { namespace deprecated_tag_incompatible {
class MyStruct;
class MyStructWithCustomDefault;
class StructLevelTerseStruct;
class FieldLevelTerseStruct;
class TerseStructWithCustomDefault;
class AdaptedFields;
}}}}} // facebook::thrift::test::terse_write::deprecated_tag_incompatible
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace thrift { namespace test { namespace terse_write { namespace deprecated_tag_incompatible {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef ::apache::thrift::adapt_detail::adapted_t<my::Adapter, ::std::int32_t> MyInteger;

class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor);

  MyStruct(MyStruct&&) = default;

  MyStruct(const MyStruct&) = default;


  MyStruct& operator=(MyStruct&&) = default;

  MyStruct& operator=(const MyStruct&) = default;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStructWithCustomDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructWithCustomDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructWithCustomDefault() :
      __fbthrift_field_field1(static_cast<::std::int64_t>(1)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructWithCustomDefault(apache::thrift::FragileConstructor, ::std::int64_t field1__arg);

  MyStructWithCustomDefault(MyStructWithCustomDefault&&) = default;

  MyStructWithCustomDefault(const MyStructWithCustomDefault&) = default;


  MyStructWithCustomDefault& operator=(MyStructWithCustomDefault&&) = default;

  MyStructWithCustomDefault& operator=(const MyStructWithCustomDefault&) = default;
 private:
  ::std::int64_t __fbthrift_field_field1;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructWithCustomDefault&) const;
  bool operator<(const MyStructWithCustomDefault&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field1() && {
    return {static_cast<T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  ::std::int64_t get_field1() const {
    return __fbthrift_field_field1;
  }

  [[deprecated("Use `FOO.field1_ref() = BAR;` instead of `FOO.set_field1(BAR);`")]]
  ::std::int64_t& set_field1(::std::int64_t field1_) {
    field1_ref() = field1_;
    return __fbthrift_field_field1;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructWithCustomDefault>;
  friend void swap(MyStructWithCustomDefault& a, MyStructWithCustomDefault& b);
};

template <class Protocol_>
unsigned long MyStructWithCustomDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class StructLevelTerseStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructLevelTerseStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructLevelTerseStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructLevelTerseStruct(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct struct_field__arg);

  StructLevelTerseStruct(StructLevelTerseStruct&&) noexcept;

  StructLevelTerseStruct(const StructLevelTerseStruct& src);


  StructLevelTerseStruct& operator=(StructLevelTerseStruct&&) noexcept;
  StructLevelTerseStruct& operator=(const StructLevelTerseStruct& src);

  ~StructLevelTerseStruct();

 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct __fbthrift_field_struct_field;

 public:

  bool operator==(const StructLevelTerseStruct&) const;
  bool operator<(const StructLevelTerseStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> bool_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> bool_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> bool_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> bool_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> bool_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> bool_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> bool_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> bool_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byte_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byte_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byte_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byte_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byte_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byte_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byte_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byte_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> short_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> short_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> short_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> short_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> short_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> short_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> short_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> short_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> int_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> int_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> int_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> int_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> int_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> int_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> int_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> long_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> long_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> long_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> long_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> long_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> long_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> long_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> long_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> float_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> float_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> float_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> float_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> float_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> float_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> float_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> float_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> double_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> double_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> double_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> double_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> double_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> double_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> double_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> double_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> string_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> string_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> string_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> string_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> string_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> string_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> string_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binary_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binary_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binary_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binary_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binary_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binary_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binary_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binary_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> enum_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> enum_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> enum_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> enum_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> enum_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> enum_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> enum_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> enum_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> list_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> list_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> list_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> list_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> list_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> list_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> list_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> list_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> set_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> set_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> set_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> set_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> set_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> set_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> set_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> map_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> map_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> map_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> map_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> map_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> map_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> map_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> map_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> struct_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> struct_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> struct_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> struct_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> struct_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> struct_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> struct_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> struct_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_struct_field)};
  }

  bool get_bool_field() const {
    return __fbthrift_field_bool_field;
  }

  [[deprecated("Use `FOO.bool_field_ref() = BAR;` instead of `FOO.set_bool_field(BAR);`")]]
  bool& set_bool_field(bool bool_field_) {
    bool_field_ref() = bool_field_;
    return __fbthrift_field_bool_field;
  }

  ::std::int8_t get_byte_field() const {
    return __fbthrift_field_byte_field;
  }

  [[deprecated("Use `FOO.byte_field_ref() = BAR;` instead of `FOO.set_byte_field(BAR);`")]]
  ::std::int8_t& set_byte_field(::std::int8_t byte_field_) {
    byte_field_ref() = byte_field_;
    return __fbthrift_field_byte_field;
  }

  ::std::int16_t get_short_field() const {
    return __fbthrift_field_short_field;
  }

  [[deprecated("Use `FOO.short_field_ref() = BAR;` instead of `FOO.set_short_field(BAR);`")]]
  ::std::int16_t& set_short_field(::std::int16_t short_field_) {
    short_field_ref() = short_field_;
    return __fbthrift_field_short_field;
  }

  ::std::int32_t get_int_field() const {
    return __fbthrift_field_int_field;
  }

  [[deprecated("Use `FOO.int_field_ref() = BAR;` instead of `FOO.set_int_field(BAR);`")]]
  ::std::int32_t& set_int_field(::std::int32_t int_field_) {
    int_field_ref() = int_field_;
    return __fbthrift_field_int_field;
  }

  ::std::int64_t get_long_field() const {
    return __fbthrift_field_long_field;
  }

  [[deprecated("Use `FOO.long_field_ref() = BAR;` instead of `FOO.set_long_field(BAR);`")]]
  ::std::int64_t& set_long_field(::std::int64_t long_field_) {
    long_field_ref() = long_field_;
    return __fbthrift_field_long_field;
  }

  float get_float_field() const {
    return __fbthrift_field_float_field;
  }

  [[deprecated("Use `FOO.float_field_ref() = BAR;` instead of `FOO.set_float_field(BAR);`")]]
  float& set_float_field(float float_field_) {
    float_field_ref() = float_field_;
    return __fbthrift_field_float_field;
  }

  double get_double_field() const {
    return __fbthrift_field_double_field;
  }

  [[deprecated("Use `FOO.double_field_ref() = BAR;` instead of `FOO.set_double_field(BAR);`")]]
  double& set_double_field(double double_field_) {
    double_field_ref() = double_field_;
    return __fbthrift_field_double_field;
  }

  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  ::std::string get_string_field() && {
    return std::move(__fbthrift_field_string_field);
  }

  template <typename T_StructLevelTerseStruct_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field_ref() = BAR;` instead of `FOO.set_string_field(BAR);`")]]
  ::std::string& set_string_field(T_StructLevelTerseStruct_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_StructLevelTerseStruct_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  const ::std::string& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  ::std::string get_binary_field() && {
    return std::move(__fbthrift_field_binary_field);
  }

  template <typename T_StructLevelTerseStruct_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binary_field_ref() = BAR;` instead of `FOO.set_binary_field(BAR);`")]]
  ::std::string& set_binary_field(T_StructLevelTerseStruct_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_StructLevelTerseStruct_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum get_enum_field() const {
    return __fbthrift_field_enum_field;
  }

  [[deprecated("Use `FOO.enum_field_ref() = BAR;` instead of `FOO.set_enum_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum& set_enum_field(::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum enum_field_) {
    enum_field_ref() = enum_field_;
    return __fbthrift_field_enum_field;
  }
  const ::std::vector<::std::int16_t>& get_list_field() const&;
  ::std::vector<::std::int16_t> get_list_field() &&;

  template <typename T_StructLevelTerseStruct_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.list_field_ref() = BAR;` instead of `FOO.set_list_field(BAR);`")]]
  ::std::vector<::std::int16_t>& set_list_field(T_StructLevelTerseStruct_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_StructLevelTerseStruct_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }
  const ::std::set<::std::int16_t>& get_set_field() const&;
  ::std::set<::std::int16_t> get_set_field() &&;

  template <typename T_StructLevelTerseStruct_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.set_field_ref() = BAR;` instead of `FOO.set_set_field(BAR);`")]]
  ::std::set<::std::int16_t>& set_set_field(T_StructLevelTerseStruct_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_StructLevelTerseStruct_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }
  const ::std::map<::std::int16_t, ::std::int16_t>& get_map_field() const&;
  ::std::map<::std::int16_t, ::std::int16_t> get_map_field() &&;

  template <typename T_StructLevelTerseStruct_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.map_field_ref() = BAR;` instead of `FOO.set_map_field(BAR);`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_map_field(T_StructLevelTerseStruct_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_StructLevelTerseStruct_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }
  const ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct& get_struct_field() const&;
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct get_struct_field() &&;

  template <typename T_StructLevelTerseStruct_struct_field_struct_setter = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  [[deprecated("Use `FOO.struct_field_ref() = BAR;` instead of `FOO.set_struct_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct& set_struct_field(T_StructLevelTerseStruct_struct_field_struct_setter&& struct_field_) {
    struct_field_ref() = std::forward<T_StructLevelTerseStruct_struct_field_struct_setter>(struct_field_);
    return __fbthrift_field_struct_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructLevelTerseStruct>;
  friend void swap(StructLevelTerseStruct& a, StructLevelTerseStruct& b);
};

template <class Protocol_>
unsigned long StructLevelTerseStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class FieldLevelTerseStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = FieldLevelTerseStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  FieldLevelTerseStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  FieldLevelTerseStruct(apache::thrift::FragileConstructor, bool terse_bool_field__arg, ::std::int8_t terse_byte_field__arg, ::std::int16_t terse_short_field__arg, ::std::int32_t terse_int_field__arg, ::std::int64_t terse_long_field__arg, float terse_float_field__arg, double terse_double_field__arg, ::std::string terse_string_field__arg, ::std::string terse_binary_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum terse_enum_field__arg, ::std::vector<::std::int16_t> terse_list_field__arg, ::std::set<::std::int16_t> terse_set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> terse_map_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct terse_struct_field__arg, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct struct_field__arg);

  FieldLevelTerseStruct(FieldLevelTerseStruct&&) noexcept;

  FieldLevelTerseStruct(const FieldLevelTerseStruct& src);


  FieldLevelTerseStruct& operator=(FieldLevelTerseStruct&&) noexcept;
  FieldLevelTerseStruct& operator=(const FieldLevelTerseStruct& src);

  ~FieldLevelTerseStruct();

 private:
  bool __fbthrift_field_terse_bool_field;
 private:
  ::std::int8_t __fbthrift_field_terse_byte_field;
 private:
  ::std::int16_t __fbthrift_field_terse_short_field;
 private:
  ::std::int32_t __fbthrift_field_terse_int_field;
 private:
  ::std::int64_t __fbthrift_field_terse_long_field;
 private:
  float __fbthrift_field_terse_float_field;
 private:
  double __fbthrift_field_terse_double_field;
 private:
  ::std::string __fbthrift_field_terse_string_field;
 private:
  ::std::string __fbthrift_field_terse_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum __fbthrift_field_terse_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_terse_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_terse_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_terse_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct __fbthrift_field_terse_struct_field;
 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct __fbthrift_field_struct_field;
 private:
  apache::thrift::detail::isset_bitset<14, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const FieldLevelTerseStruct&) const;
  bool operator<(const FieldLevelTerseStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_bool_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_bool_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_bool_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_bool_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_bool_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_bool_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_bool_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_bool_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_bool_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_byte_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_byte_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_byte_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_byte_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_byte_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_byte_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_byte_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_byte_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_byte_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_short_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_short_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_short_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_short_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_short_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_short_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_short_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_short_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_short_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_int_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_int_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_int_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_int_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_int_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_int_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_int_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_int_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_long_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_long_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_long_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_long_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_long_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_long_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_long_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_long_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_long_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_float_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_float_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_float_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_float_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_float_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_float_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_float_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_float_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_float_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_double_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_double_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_double_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_double_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_double_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_double_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_double_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_double_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_double_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_string_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_string_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_string_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_string_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_string_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_string_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_string_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_binary_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_binary_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_binary_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_binary_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_binary_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_binary_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_binary_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_binary_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_binary_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_enum_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_enum_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_enum_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_enum_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_enum_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_enum_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_enum_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_enum_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_enum_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_list_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_list_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_list_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_list_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_list_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_list_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_list_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_list_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_list_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_set_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_set_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_set_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_set_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_set_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_set_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_set_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_set_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_map_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_map_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_map_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_map_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_map_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_map_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_map_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_map_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_map_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_struct_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_struct_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_struct_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_struct_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> terse_struct_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_terse_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> terse_struct_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_terse_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> terse_struct_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_terse_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> terse_struct_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_terse_struct_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> bool_field_ref() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> bool_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> bool_field_ref() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> bool_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> bool_field() const& {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> bool_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> bool_field() & {
    return {this->__fbthrift_field_bool_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> bool_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_bool_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byte_field_ref() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byte_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byte_field_ref() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byte_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byte_field() const& {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byte_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byte_field() & {
    return {this->__fbthrift_field_byte_field, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byte_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_byte_field), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> short_field_ref() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> short_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> short_field_ref() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> short_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> short_field() const& {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> short_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> short_field() & {
    return {this->__fbthrift_field_short_field, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> short_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_short_field), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> int_field_ref() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> int_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> int_field_ref() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> int_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> int_field() const& {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> int_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> int_field() & {
    return {this->__fbthrift_field_int_field, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> int_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_int_field), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> long_field_ref() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> long_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> long_field_ref() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> long_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> long_field() const& {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> long_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> long_field() & {
    return {this->__fbthrift_field_long_field, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> long_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_long_field), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> float_field_ref() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> float_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> float_field_ref() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> float_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> float_field() const& {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> float_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> float_field() & {
    return {this->__fbthrift_field_float_field, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> float_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_float_field), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> double_field_ref() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> double_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> double_field_ref() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> double_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> double_field() const& {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> double_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> double_field() & {
    return {this->__fbthrift_field_double_field, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> double_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_double_field), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> string_field_ref() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> string_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> string_field_ref() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> string_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> string_field() const& {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> string_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> string_field() & {
    return {this->__fbthrift_field_string_field, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> string_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_string_field), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binary_field_ref() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binary_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binary_field_ref() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binary_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binary_field() const& {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binary_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binary_field() & {
    return {this->__fbthrift_field_binary_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binary_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_binary_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enum_field_ref() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enum_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enum_field_ref() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enum_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enum_field() const& {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enum_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enum_field() & {
    return {this->__fbthrift_field_enum_field, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enum_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_enum_field), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_field_ref() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_field_ref() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_field() const& {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_field() & {
    return {this->__fbthrift_field_list_field, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_list_field), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> set_field_ref() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> set_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> set_field_ref() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> set_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> set_field() const& {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> set_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> set_field() & {
    return {this->__fbthrift_field_set_field, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> set_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_set_field), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> map_field_ref() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> map_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> map_field_ref() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> map_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> map_field() const& {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> map_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> map_field() & {
    return {this->__fbthrift_field_map_field, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> map_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_map_field), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> struct_field_ref() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> struct_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_struct_field), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> struct_field_ref() & {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> struct_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_struct_field), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> struct_field() const& {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> struct_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_struct_field), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> struct_field() & {
    return {this->__fbthrift_field_struct_field, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> struct_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_struct_field), __isset.at(13), __isset.bit(13)};
  }

  bool get_terse_bool_field() const {
    return __fbthrift_field_terse_bool_field;
  }

  [[deprecated("Use `FOO.terse_bool_field_ref() = BAR;` instead of `FOO.set_terse_bool_field(BAR);`")]]
  bool& set_terse_bool_field(bool terse_bool_field_) {
    terse_bool_field_ref() = terse_bool_field_;
    return __fbthrift_field_terse_bool_field;
  }

  ::std::int8_t get_terse_byte_field() const {
    return __fbthrift_field_terse_byte_field;
  }

  [[deprecated("Use `FOO.terse_byte_field_ref() = BAR;` instead of `FOO.set_terse_byte_field(BAR);`")]]
  ::std::int8_t& set_terse_byte_field(::std::int8_t terse_byte_field_) {
    terse_byte_field_ref() = terse_byte_field_;
    return __fbthrift_field_terse_byte_field;
  }

  ::std::int16_t get_terse_short_field() const {
    return __fbthrift_field_terse_short_field;
  }

  [[deprecated("Use `FOO.terse_short_field_ref() = BAR;` instead of `FOO.set_terse_short_field(BAR);`")]]
  ::std::int16_t& set_terse_short_field(::std::int16_t terse_short_field_) {
    terse_short_field_ref() = terse_short_field_;
    return __fbthrift_field_terse_short_field;
  }

  ::std::int32_t get_terse_int_field() const {
    return __fbthrift_field_terse_int_field;
  }

  [[deprecated("Use `FOO.terse_int_field_ref() = BAR;` instead of `FOO.set_terse_int_field(BAR);`")]]
  ::std::int32_t& set_terse_int_field(::std::int32_t terse_int_field_) {
    terse_int_field_ref() = terse_int_field_;
    return __fbthrift_field_terse_int_field;
  }

  ::std::int64_t get_terse_long_field() const {
    return __fbthrift_field_terse_long_field;
  }

  [[deprecated("Use `FOO.terse_long_field_ref() = BAR;` instead of `FOO.set_terse_long_field(BAR);`")]]
  ::std::int64_t& set_terse_long_field(::std::int64_t terse_long_field_) {
    terse_long_field_ref() = terse_long_field_;
    return __fbthrift_field_terse_long_field;
  }

  float get_terse_float_field() const {
    return __fbthrift_field_terse_float_field;
  }

  [[deprecated("Use `FOO.terse_float_field_ref() = BAR;` instead of `FOO.set_terse_float_field(BAR);`")]]
  float& set_terse_float_field(float terse_float_field_) {
    terse_float_field_ref() = terse_float_field_;
    return __fbthrift_field_terse_float_field;
  }

  double get_terse_double_field() const {
    return __fbthrift_field_terse_double_field;
  }

  [[deprecated("Use `FOO.terse_double_field_ref() = BAR;` instead of `FOO.set_terse_double_field(BAR);`")]]
  double& set_terse_double_field(double terse_double_field_) {
    terse_double_field_ref() = terse_double_field_;
    return __fbthrift_field_terse_double_field;
  }

  const ::std::string& get_terse_string_field() const& {
    return __fbthrift_field_terse_string_field;
  }

  ::std::string get_terse_string_field() && {
    return std::move(__fbthrift_field_terse_string_field);
  }

  template <typename T_FieldLevelTerseStruct_terse_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.terse_string_field_ref() = BAR;` instead of `FOO.set_terse_string_field(BAR);`")]]
  ::std::string& set_terse_string_field(T_FieldLevelTerseStruct_terse_string_field_struct_setter&& terse_string_field_) {
    terse_string_field_ref() = std::forward<T_FieldLevelTerseStruct_terse_string_field_struct_setter>(terse_string_field_);
    return __fbthrift_field_terse_string_field;
  }

  const ::std::string& get_terse_binary_field() const& {
    return __fbthrift_field_terse_binary_field;
  }

  ::std::string get_terse_binary_field() && {
    return std::move(__fbthrift_field_terse_binary_field);
  }

  template <typename T_FieldLevelTerseStruct_terse_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.terse_binary_field_ref() = BAR;` instead of `FOO.set_terse_binary_field(BAR);`")]]
  ::std::string& set_terse_binary_field(T_FieldLevelTerseStruct_terse_binary_field_struct_setter&& terse_binary_field_) {
    terse_binary_field_ref() = std::forward<T_FieldLevelTerseStruct_terse_binary_field_struct_setter>(terse_binary_field_);
    return __fbthrift_field_terse_binary_field;
  }

  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum get_terse_enum_field() const {
    return __fbthrift_field_terse_enum_field;
  }

  [[deprecated("Use `FOO.terse_enum_field_ref() = BAR;` instead of `FOO.set_terse_enum_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum& set_terse_enum_field(::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum terse_enum_field_) {
    terse_enum_field_ref() = terse_enum_field_;
    return __fbthrift_field_terse_enum_field;
  }
  const ::std::vector<::std::int16_t>& get_terse_list_field() const&;
  ::std::vector<::std::int16_t> get_terse_list_field() &&;

  template <typename T_FieldLevelTerseStruct_terse_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.terse_list_field_ref() = BAR;` instead of `FOO.set_terse_list_field(BAR);`")]]
  ::std::vector<::std::int16_t>& set_terse_list_field(T_FieldLevelTerseStruct_terse_list_field_struct_setter&& terse_list_field_) {
    terse_list_field_ref() = std::forward<T_FieldLevelTerseStruct_terse_list_field_struct_setter>(terse_list_field_);
    return __fbthrift_field_terse_list_field;
  }
  const ::std::set<::std::int16_t>& get_terse_set_field() const&;
  ::std::set<::std::int16_t> get_terse_set_field() &&;

  template <typename T_FieldLevelTerseStruct_terse_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.terse_set_field_ref() = BAR;` instead of `FOO.set_terse_set_field(BAR);`")]]
  ::std::set<::std::int16_t>& set_terse_set_field(T_FieldLevelTerseStruct_terse_set_field_struct_setter&& terse_set_field_) {
    terse_set_field_ref() = std::forward<T_FieldLevelTerseStruct_terse_set_field_struct_setter>(terse_set_field_);
    return __fbthrift_field_terse_set_field;
  }
  const ::std::map<::std::int16_t, ::std::int16_t>& get_terse_map_field() const&;
  ::std::map<::std::int16_t, ::std::int16_t> get_terse_map_field() &&;

  template <typename T_FieldLevelTerseStruct_terse_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.terse_map_field_ref() = BAR;` instead of `FOO.set_terse_map_field(BAR);`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_terse_map_field(T_FieldLevelTerseStruct_terse_map_field_struct_setter&& terse_map_field_) {
    terse_map_field_ref() = std::forward<T_FieldLevelTerseStruct_terse_map_field_struct_setter>(terse_map_field_);
    return __fbthrift_field_terse_map_field;
  }
  const ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct& get_terse_struct_field() const&;
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct get_terse_struct_field() &&;

  template <typename T_FieldLevelTerseStruct_terse_struct_field_struct_setter = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  [[deprecated("Use `FOO.terse_struct_field_ref() = BAR;` instead of `FOO.set_terse_struct_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct& set_terse_struct_field(T_FieldLevelTerseStruct_terse_struct_field_struct_setter&& terse_struct_field_) {
    terse_struct_field_ref() = std::forward<T_FieldLevelTerseStruct_terse_struct_field_struct_setter>(terse_struct_field_);
    return __fbthrift_field_terse_struct_field;
  }

  bool get_bool_field() const {
    return __fbthrift_field_bool_field;
  }

  [[deprecated("Use `FOO.bool_field_ref() = BAR;` instead of `FOO.set_bool_field(BAR);`")]]
  bool& set_bool_field(bool bool_field_) {
    bool_field_ref() = bool_field_;
    return __fbthrift_field_bool_field;
  }

  ::std::int8_t get_byte_field() const {
    return __fbthrift_field_byte_field;
  }

  [[deprecated("Use `FOO.byte_field_ref() = BAR;` instead of `FOO.set_byte_field(BAR);`")]]
  ::std::int8_t& set_byte_field(::std::int8_t byte_field_) {
    byte_field_ref() = byte_field_;
    return __fbthrift_field_byte_field;
  }

  ::std::int16_t get_short_field() const {
    return __fbthrift_field_short_field;
  }

  [[deprecated("Use `FOO.short_field_ref() = BAR;` instead of `FOO.set_short_field(BAR);`")]]
  ::std::int16_t& set_short_field(::std::int16_t short_field_) {
    short_field_ref() = short_field_;
    return __fbthrift_field_short_field;
  }

  ::std::int32_t get_int_field() const {
    return __fbthrift_field_int_field;
  }

  [[deprecated("Use `FOO.int_field_ref() = BAR;` instead of `FOO.set_int_field(BAR);`")]]
  ::std::int32_t& set_int_field(::std::int32_t int_field_) {
    int_field_ref() = int_field_;
    return __fbthrift_field_int_field;
  }

  ::std::int64_t get_long_field() const {
    return __fbthrift_field_long_field;
  }

  [[deprecated("Use `FOO.long_field_ref() = BAR;` instead of `FOO.set_long_field(BAR);`")]]
  ::std::int64_t& set_long_field(::std::int64_t long_field_) {
    long_field_ref() = long_field_;
    return __fbthrift_field_long_field;
  }

  float get_float_field() const {
    return __fbthrift_field_float_field;
  }

  [[deprecated("Use `FOO.float_field_ref() = BAR;` instead of `FOO.set_float_field(BAR);`")]]
  float& set_float_field(float float_field_) {
    float_field_ref() = float_field_;
    return __fbthrift_field_float_field;
  }

  double get_double_field() const {
    return __fbthrift_field_double_field;
  }

  [[deprecated("Use `FOO.double_field_ref() = BAR;` instead of `FOO.set_double_field(BAR);`")]]
  double& set_double_field(double double_field_) {
    double_field_ref() = double_field_;
    return __fbthrift_field_double_field;
  }

  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  ::std::string get_string_field() && {
    return std::move(__fbthrift_field_string_field);
  }

  template <typename T_FieldLevelTerseStruct_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field_ref() = BAR;` instead of `FOO.set_string_field(BAR);`")]]
  ::std::string& set_string_field(T_FieldLevelTerseStruct_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_FieldLevelTerseStruct_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  const ::std::string& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  ::std::string get_binary_field() && {
    return std::move(__fbthrift_field_binary_field);
  }

  template <typename T_FieldLevelTerseStruct_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binary_field_ref() = BAR;` instead of `FOO.set_binary_field(BAR);`")]]
  ::std::string& set_binary_field(T_FieldLevelTerseStruct_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_FieldLevelTerseStruct_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum get_enum_field() const {
    return __fbthrift_field_enum_field;
  }

  [[deprecated("Use `FOO.enum_field_ref() = BAR;` instead of `FOO.set_enum_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum& set_enum_field(::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum enum_field_) {
    enum_field_ref() = enum_field_;
    return __fbthrift_field_enum_field;
  }
  const ::std::vector<::std::int16_t>& get_list_field() const&;
  ::std::vector<::std::int16_t> get_list_field() &&;

  template <typename T_FieldLevelTerseStruct_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.list_field_ref() = BAR;` instead of `FOO.set_list_field(BAR);`")]]
  ::std::vector<::std::int16_t>& set_list_field(T_FieldLevelTerseStruct_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_FieldLevelTerseStruct_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }
  const ::std::set<::std::int16_t>& get_set_field() const&;
  ::std::set<::std::int16_t> get_set_field() &&;

  template <typename T_FieldLevelTerseStruct_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.set_field_ref() = BAR;` instead of `FOO.set_set_field(BAR);`")]]
  ::std::set<::std::int16_t>& set_set_field(T_FieldLevelTerseStruct_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_FieldLevelTerseStruct_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }
  const ::std::map<::std::int16_t, ::std::int16_t>& get_map_field() const&;
  ::std::map<::std::int16_t, ::std::int16_t> get_map_field() &&;

  template <typename T_FieldLevelTerseStruct_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.map_field_ref() = BAR;` instead of `FOO.set_map_field(BAR);`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_map_field(T_FieldLevelTerseStruct_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_FieldLevelTerseStruct_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }
  const ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct& get_struct_field() const&;
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct get_struct_field() &&;

  template <typename T_FieldLevelTerseStruct_struct_field_struct_setter = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct>
  [[deprecated("Use `FOO.struct_field_ref() = BAR;` instead of `FOO.set_struct_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStruct& set_struct_field(T_FieldLevelTerseStruct_struct_field_struct_setter&& struct_field_) {
    struct_field_ref() = std::forward<T_FieldLevelTerseStruct_struct_field_struct_setter>(struct_field_);
    return __fbthrift_field_struct_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<FieldLevelTerseStruct>;
  friend void swap(FieldLevelTerseStruct& a, FieldLevelTerseStruct& b);
};

template <class Protocol_>
unsigned long FieldLevelTerseStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class TerseStructWithCustomDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TerseStructWithCustomDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TerseStructWithCustomDefault();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TerseStructWithCustomDefault(apache::thrift::FragileConstructor, bool bool_field__arg, ::std::int8_t byte_field__arg, ::std::int16_t short_field__arg, ::std::int32_t int_field__arg, ::std::int64_t long_field__arg, float float_field__arg, double double_field__arg, ::std::string string_field__arg, ::std::string binary_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum enum_field__arg, ::std::vector<::std::int16_t> list_field__arg, ::std::set<::std::int16_t> set_field__arg, ::std::map<::std::int16_t, ::std::int16_t> map_field__arg, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault struct_field__arg);

  TerseStructWithCustomDefault(TerseStructWithCustomDefault&&) noexcept;

  TerseStructWithCustomDefault(const TerseStructWithCustomDefault& src);


  TerseStructWithCustomDefault& operator=(TerseStructWithCustomDefault&&) noexcept;
  TerseStructWithCustomDefault& operator=(const TerseStructWithCustomDefault& src);

  ~TerseStructWithCustomDefault();

 private:
  bool __fbthrift_field_bool_field;
 private:
  ::std::int8_t __fbthrift_field_byte_field;
 private:
  ::std::int16_t __fbthrift_field_short_field;
 private:
  ::std::int32_t __fbthrift_field_int_field;
 private:
  ::std::int64_t __fbthrift_field_long_field;
 private:
  float __fbthrift_field_float_field;
 private:
  double __fbthrift_field_double_field;
 private:
  ::std::string __fbthrift_field_string_field;
 private:
  ::std::string __fbthrift_field_binary_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum __fbthrift_field_enum_field;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_list_field;
 private:
  ::std::set<::std::int16_t> __fbthrift_field_set_field;
 private:
  ::std::map<::std::int16_t, ::std::int16_t> __fbthrift_field_map_field;
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault __fbthrift_field_struct_field;

 public:

  bool operator==(const TerseStructWithCustomDefault&) const;
  bool operator<(const TerseStructWithCustomDefault&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> bool_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> bool_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> bool_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> bool_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> bool_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> bool_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> bool_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_bool_field};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> bool_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_bool_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byte_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byte_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byte_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byte_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byte_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byte_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byte_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byte_field};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byte_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byte_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> short_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> short_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> short_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> short_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> short_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> short_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> short_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_short_field};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> short_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_short_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> int_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> int_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> int_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> int_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> int_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> int_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> int_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_int_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> int_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_int_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> long_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> long_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> long_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> long_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> long_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> long_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> long_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_long_field};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> long_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_long_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> float_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> float_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> float_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> float_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> float_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> float_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> float_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_float_field};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> float_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_float_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> double_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> double_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> double_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> double_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> double_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> double_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> double_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_double_field};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> double_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_double_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> string_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> string_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> string_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> string_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> string_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> string_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> string_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_string_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> string_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_string_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binary_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binary_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binary_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binary_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binary_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binary_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binary_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binary_field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binary_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binary_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> enum_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> enum_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> enum_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> enum_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> enum_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> enum_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> enum_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_enum_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> enum_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_enum_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> list_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> list_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> list_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> list_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> list_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> list_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> list_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_list_field};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> list_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_list_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> set_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> set_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> set_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> set_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> set_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> set_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> set_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_set_field};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> set_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_set_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> map_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> map_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> map_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> map_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> map_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> map_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> map_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_map_field};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> map_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_map_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> struct_field_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> struct_field_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> struct_field_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> struct_field_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> struct_field() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> struct_field() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_struct_field)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> struct_field() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_struct_field};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> struct_field() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_struct_field)};
  }

  bool get_bool_field() const {
    return __fbthrift_field_bool_field;
  }

  [[deprecated("Use `FOO.bool_field_ref() = BAR;` instead of `FOO.set_bool_field(BAR);`")]]
  bool& set_bool_field(bool bool_field_) {
    bool_field_ref() = bool_field_;
    return __fbthrift_field_bool_field;
  }

  ::std::int8_t get_byte_field() const {
    return __fbthrift_field_byte_field;
  }

  [[deprecated("Use `FOO.byte_field_ref() = BAR;` instead of `FOO.set_byte_field(BAR);`")]]
  ::std::int8_t& set_byte_field(::std::int8_t byte_field_) {
    byte_field_ref() = byte_field_;
    return __fbthrift_field_byte_field;
  }

  ::std::int16_t get_short_field() const {
    return __fbthrift_field_short_field;
  }

  [[deprecated("Use `FOO.short_field_ref() = BAR;` instead of `FOO.set_short_field(BAR);`")]]
  ::std::int16_t& set_short_field(::std::int16_t short_field_) {
    short_field_ref() = short_field_;
    return __fbthrift_field_short_field;
  }

  ::std::int32_t get_int_field() const {
    return __fbthrift_field_int_field;
  }

  [[deprecated("Use `FOO.int_field_ref() = BAR;` instead of `FOO.set_int_field(BAR);`")]]
  ::std::int32_t& set_int_field(::std::int32_t int_field_) {
    int_field_ref() = int_field_;
    return __fbthrift_field_int_field;
  }

  ::std::int64_t get_long_field() const {
    return __fbthrift_field_long_field;
  }

  [[deprecated("Use `FOO.long_field_ref() = BAR;` instead of `FOO.set_long_field(BAR);`")]]
  ::std::int64_t& set_long_field(::std::int64_t long_field_) {
    long_field_ref() = long_field_;
    return __fbthrift_field_long_field;
  }

  float get_float_field() const {
    return __fbthrift_field_float_field;
  }

  [[deprecated("Use `FOO.float_field_ref() = BAR;` instead of `FOO.set_float_field(BAR);`")]]
  float& set_float_field(float float_field_) {
    float_field_ref() = float_field_;
    return __fbthrift_field_float_field;
  }

  double get_double_field() const {
    return __fbthrift_field_double_field;
  }

  [[deprecated("Use `FOO.double_field_ref() = BAR;` instead of `FOO.set_double_field(BAR);`")]]
  double& set_double_field(double double_field_) {
    double_field_ref() = double_field_;
    return __fbthrift_field_double_field;
  }

  const ::std::string& get_string_field() const& {
    return __fbthrift_field_string_field;
  }

  ::std::string get_string_field() && {
    return std::move(__fbthrift_field_string_field);
  }

  template <typename T_TerseStructWithCustomDefault_string_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.string_field_ref() = BAR;` instead of `FOO.set_string_field(BAR);`")]]
  ::std::string& set_string_field(T_TerseStructWithCustomDefault_string_field_struct_setter&& string_field_) {
    string_field_ref() = std::forward<T_TerseStructWithCustomDefault_string_field_struct_setter>(string_field_);
    return __fbthrift_field_string_field;
  }

  const ::std::string& get_binary_field() const& {
    return __fbthrift_field_binary_field;
  }

  ::std::string get_binary_field() && {
    return std::move(__fbthrift_field_binary_field);
  }

  template <typename T_TerseStructWithCustomDefault_binary_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binary_field_ref() = BAR;` instead of `FOO.set_binary_field(BAR);`")]]
  ::std::string& set_binary_field(T_TerseStructWithCustomDefault_binary_field_struct_setter&& binary_field_) {
    binary_field_ref() = std::forward<T_TerseStructWithCustomDefault_binary_field_struct_setter>(binary_field_);
    return __fbthrift_field_binary_field;
  }

  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum get_enum_field() const {
    return __fbthrift_field_enum_field;
  }

  [[deprecated("Use `FOO.enum_field_ref() = BAR;` instead of `FOO.set_enum_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum& set_enum_field(::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyEnum enum_field_) {
    enum_field_ref() = enum_field_;
    return __fbthrift_field_enum_field;
  }
  const ::std::vector<::std::int16_t>& get_list_field() const&;
  ::std::vector<::std::int16_t> get_list_field() &&;

  template <typename T_TerseStructWithCustomDefault_list_field_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.list_field_ref() = BAR;` instead of `FOO.set_list_field(BAR);`")]]
  ::std::vector<::std::int16_t>& set_list_field(T_TerseStructWithCustomDefault_list_field_struct_setter&& list_field_) {
    list_field_ref() = std::forward<T_TerseStructWithCustomDefault_list_field_struct_setter>(list_field_);
    return __fbthrift_field_list_field;
  }
  const ::std::set<::std::int16_t>& get_set_field() const&;
  ::std::set<::std::int16_t> get_set_field() &&;

  template <typename T_TerseStructWithCustomDefault_set_field_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.set_field_ref() = BAR;` instead of `FOO.set_set_field(BAR);`")]]
  ::std::set<::std::int16_t>& set_set_field(T_TerseStructWithCustomDefault_set_field_struct_setter&& set_field_) {
    set_field_ref() = std::forward<T_TerseStructWithCustomDefault_set_field_struct_setter>(set_field_);
    return __fbthrift_field_set_field;
  }
  const ::std::map<::std::int16_t, ::std::int16_t>& get_map_field() const&;
  ::std::map<::std::int16_t, ::std::int16_t> get_map_field() &&;

  template <typename T_TerseStructWithCustomDefault_map_field_struct_setter = ::std::map<::std::int16_t, ::std::int16_t>>
  [[deprecated("Use `FOO.map_field_ref() = BAR;` instead of `FOO.set_map_field(BAR);`")]]
  ::std::map<::std::int16_t, ::std::int16_t>& set_map_field(T_TerseStructWithCustomDefault_map_field_struct_setter&& map_field_) {
    map_field_ref() = std::forward<T_TerseStructWithCustomDefault_map_field_struct_setter>(map_field_);
    return __fbthrift_field_map_field;
  }
  const ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault& get_struct_field() const&;
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault get_struct_field() &&;

  template <typename T_TerseStructWithCustomDefault_struct_field_struct_setter = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault>
  [[deprecated("Use `FOO.struct_field_ref() = BAR;` instead of `FOO.set_struct_field(BAR);`")]]
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyStructWithCustomDefault& set_struct_field(T_TerseStructWithCustomDefault_struct_field_struct_setter&& struct_field_) {
    struct_field_ref() = std::forward<T_TerseStructWithCustomDefault_struct_field_struct_setter>(struct_field_);
    return __fbthrift_field_struct_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TerseStructWithCustomDefault>;
  friend void swap(TerseStructWithCustomDefault& a, TerseStructWithCustomDefault& b);
};

template <class Protocol_>
unsigned long TerseStructWithCustomDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class AdaptedFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AdaptedFields() :
      __fbthrift_field_field1(),
      __fbthrift_field_field2(),
      __fbthrift_field_field3() {
    ::apache::thrift::adapt_detail::construct<my::Adapter, 1>(__fbthrift_field_field1, *this);
    ::apache::thrift::adapt_detail::construct<my::Adapter, 2>(__fbthrift_field_field2, *this);
    ::apache::thrift::adapt_detail::construct<my::Adapter, 3>(__fbthrift_field_field3, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedFields(apache::thrift::FragileConstructor, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger field1__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields> field2__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields> field3__arg);

  AdaptedFields(AdaptedFields&&) noexcept;
  AdaptedFields(const AdaptedFields& src);


  AdaptedFields& operator=(AdaptedFields&&) noexcept;
  AdaptedFields& operator=(const AdaptedFields& src);
 private:
  ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger __fbthrift_field_field1;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields> __fbthrift_field_field2;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields> __fbthrift_field_field3;

 public:

  bool operator==(const AdaptedFields&) const;
  bool operator<(const AdaptedFields&) const;

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> field1_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_field1};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> field1_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_field1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> field1_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_field1};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> field1_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_field1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> field1() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_field1};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> field1() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_field1)};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> field1() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_field1};
  }

  template <typename..., typename T = ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> field1() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_field1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> field2_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_field2};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> field2_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_field2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> field2_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_field2};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> field2_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_field2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> field2() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_field2};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> field2() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_field2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> field2() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_field2};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 2, ::std::int32_t, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> field2() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_field2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> field3_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_field3};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> field3_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_field3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> field3_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_field3};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> field3_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_field3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> field3() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_field3};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> field3() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_field3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> field3() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_field3};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter, 3, ::facebook::thrift::test::terse_write::deprecated_tag_incompatible::MyInteger, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> field3() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_field3)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedFields>;
  friend void swap(AdaptedFields& a, AdaptedFields& b);
};

template <class Protocol_>
unsigned long AdaptedFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}}}} // facebook::thrift::test::terse_write::deprecated_tag_incompatible
