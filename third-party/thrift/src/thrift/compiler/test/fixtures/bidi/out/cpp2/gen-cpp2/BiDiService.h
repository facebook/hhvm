/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/bidi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/bidi/gen-cpp2/BiDiServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/bidi/gen-cpp2/module_types.h"
#include <thrift/lib/cpp2/async/ServerStream.h>
#include <thrift/lib/cpp2/async/Sink.h>

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class BiDiService;
class BiDiServiceAsyncProcessor;

class BiDiServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::BiDiService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::BiDiService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "BiDiService"; }

  typedef ::cpp2::BiDiServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:

  virtual /* TODO (@sazonovk) */ sync_simple();
  [[deprecated("Use sync_simple instead")]] virtual /* TODO (@sazonovk) */ simple();
  virtual folly::Future</* TODO (@sazonovk) */> future_simple();
  virtual folly::SemiFuture</* TODO (@sazonovk) */> semifuture_simple();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task</* TODO (@sazonovk) */> co_simple();
  virtual folly::coro::Task</* TODO (@sazonovk) */> co_simple(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_simple(apache::thrift::HandlerCallbackPtr</* TODO (@sazonovk) */> callback);
  virtual /* TODO (@sazonovk) */ sync_response();
  [[deprecated("Use sync_response instead")]] virtual /* TODO (@sazonovk) */ response();
  virtual folly::Future</* TODO (@sazonovk) */> future_response();
  virtual folly::SemiFuture</* TODO (@sazonovk) */> semifuture_response();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task</* TODO (@sazonovk) */> co_response();
  virtual folly::coro::Task</* TODO (@sazonovk) */> co_response(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_response(apache::thrift::HandlerCallbackPtr</* TODO (@sazonovk) */> callback);
 private:
  static ::cpp2::BiDiServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_simple{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_response{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_simple(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_simple(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_simple(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2::BiDiService>*>(iface)->fbthrift_execute_decorators_after_simple(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_response(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_response(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType</* TODO (@sazonovk) */>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_response(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType</* TODO (@sazonovk) */>::type result) {
    static_cast<ServiceHandler<::cpp2::BiDiService>*>(iface)->fbthrift_execute_decorators_after_response(*ctx, result);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::BiDiService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 469164823722770924;
  static constexpr ::std::string_view definitionKey = {"\xc0\x56\x46\x64\xbe\xe2\xa6\xd1\x27\xc6\x36\x25\xc4\x5a\xed\x87", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using BiDiServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<BiDiService> instead")]] = ::apache::thrift::ServiceHandler<BiDiService>;
} // namespace cpp2

namespace cpp2 {
class BiDiServiceSvNull : public ::apache::thrift::ServiceHandler<BiDiService> {
 public:
};

class BiDiServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::BiDiService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<BiDiServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  static const BiDiServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const BiDiServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'simple'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_simple(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_simple(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_simple(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      /* TODO (@sazonovk) */&& _return);

  static std::pair<
      apache::thrift::SerializedResponse,
      apache::thrift::detail::SinkConsumerImpl>
  return_simple(
      apache::thrift::ContextStack* ctx,
      /* TODO (@sazonovk) */&& _return,
      folly::Executor::KeepAlive<> executor);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_simple(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'simple'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'response'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_response(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_response(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_response(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      /* TODO (@sazonovk) */&& _return);

  static std::pair<
      apache::thrift::SerializedResponse,
      apache::thrift::detail::SinkConsumerImpl>
  return_response(
      apache::thrift::ContextStack* ctx,
      /* TODO (@sazonovk) */&& _return,
      folly::Executor::KeepAlive<> executor);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_response(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'response'
  //

  //
  // End of Service Methods
  //
 public:
  BiDiServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::BiDiService>* iface) :
      iface_(iface) {}
  ~BiDiServiceAsyncProcessor() override {}
};

} // namespace cpp2
