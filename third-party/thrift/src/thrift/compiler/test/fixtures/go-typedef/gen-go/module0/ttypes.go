// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module0

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var GoUnusedProtection__ int;

// Attributes:
//  - InventoryId
//  - Name
type Accessory struct {
  InventoryId int32 `thrift:"InventoryId,1" db:"InventoryId" json:"InventoryId"`
  Name string `thrift:"Name,2" db:"Name" json:"Name"`
}

func NewAccessory() *Accessory {
  return &Accessory{}
}


func (p *Accessory) GetInventoryId() int32 {
  return p.InventoryId
}

func (p *Accessory) GetName() string {
  return p.Name
}
type AccessoryBuilder struct {
  obj *Accessory
}

func NewAccessoryBuilder() *AccessoryBuilder{
  return &AccessoryBuilder{
    obj: NewAccessory(),
  }
}

func (p AccessoryBuilder) Emit() *Accessory{
  return &Accessory{
    InventoryId: p.obj.InventoryId,
    Name: p.obj.Name,
  }
}

func (a *AccessoryBuilder) InventoryId(inventoryId int32) *AccessoryBuilder {
  a.obj.InventoryId = inventoryId
  return a
}

func (a *AccessoryBuilder) Name(name string) *AccessoryBuilder {
  a.obj.Name = name
  return a
}

func (a *Accessory) SetInventoryId(inventoryId int32) *Accessory {
  a.InventoryId = inventoryId
  return a
}

func (a *Accessory) SetName(name string) *Accessory {
  a.Name = name
  return a
}

func (p *Accessory) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Accessory)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.InventoryId = v
  }
  return nil
}

func (p *Accessory)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *Accessory) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Accessory"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Accessory) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("InventoryId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:InventoryId: ", p), err) }
  if err := oprot.WriteI32(int32(p.InventoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InventoryId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:InventoryId: ", p), err) }
  return err
}

func (p *Accessory) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err) }
  return err
}

func (p *Accessory) String() string {
  if p == nil {
    return "<nil>"
  }

  inventoryIdVal := fmt.Sprintf("%v", p.InventoryId)
  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("Accessory({InventoryId:%s Name:%s})", inventoryIdVal, nameVal)
}

// Attributes:
//  - InventoryId
//  - Name
type PartName struct {
  InventoryId int32 `thrift:"InventoryId,1" db:"InventoryId" json:"InventoryId"`
  Name string `thrift:"Name,2" db:"Name" json:"Name"`
}

func NewPartName() *PartName {
  return &PartName{}
}


func (p *PartName) GetInventoryId() int32 {
  return p.InventoryId
}

func (p *PartName) GetName() string {
  return p.Name
}
type PartNameBuilder struct {
  obj *PartName
}

func NewPartNameBuilder() *PartNameBuilder{
  return &PartNameBuilder{
    obj: NewPartName(),
  }
}

func (p PartNameBuilder) Emit() *PartName{
  return &PartName{
    InventoryId: p.obj.InventoryId,
    Name: p.obj.Name,
  }
}

func (p *PartNameBuilder) InventoryId(inventoryId int32) *PartNameBuilder {
  p.obj.InventoryId = inventoryId
  return p
}

func (p *PartNameBuilder) Name(name string) *PartNameBuilder {
  p.obj.Name = name
  return p
}

func (p *PartName) SetInventoryId(inventoryId int32) *PartName {
  p.InventoryId = inventoryId
  return p
}

func (p *PartName) SetName(name string) *PartName {
  p.Name = name
  return p
}

func (p *PartName) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartName)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.InventoryId = v
  }
  return nil
}

func (p *PartName)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *PartName) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartName) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("InventoryId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:InventoryId: ", p), err) }
  if err := oprot.WriteI32(int32(p.InventoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InventoryId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:InventoryId: ", p), err) }
  return err
}

func (p *PartName) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err) }
  return err
}

func (p *PartName) String() string {
  if p == nil {
    return "<nil>"
  }

  inventoryIdVal := fmt.Sprintf("%v", p.InventoryId)
  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("PartName({InventoryId:%s Name:%s})", inventoryIdVal, nameVal)
}

