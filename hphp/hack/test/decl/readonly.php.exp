[("\\Foo",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_is_xhp = false; sc_has_xhp_keyword = false;
       sc_kind = (Cclass Concrete); sc_module = None;
       sc_name = ([3:7-10], "\\Foo"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_xhp_enum_values = {}; sc_req_extends = [];
       sc_req_implements = []; sc_implements = [];
       sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
       sc_enum_type = None }));
  ("\\returns_readonly",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([6:16-32]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [6:16-32]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([6:46-60]),
                 (Tapply (([6:46-55], "\\HH\\Awaitable"),
                    [(Rhint ([6:56-59]), (Tapply (([6:56-59], "\\Foo"), [])))
                      ]
                    )))
                };
              ft_flags =
              (make_ft_flags FAsync ~return_disposable:false
                ~returns_readonly:true ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [6:16-32]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\returns_normal",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([10:16-30]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [10:16-30]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([10:34-48]),
                 (Tapply (([10:34-43], "\\HH\\Awaitable"),
                    [(Rhint ([10:44-47]),
                      (Tapply (([10:44-47], "\\Foo"), [])))]
                    )))
                };
              ft_flags =
              (make_ft_flags FAsync ~return_disposable:false
                ~returns_readonly:false ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [10:16-30]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\Bar",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_is_xhp = false; sc_has_xhp_keyword = false;
        sc_kind = (Cclass Concrete); sc_module = None;
        sc_name = ([14:7-10], "\\Bar"); sc_tparams = [];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_xhp_enum_values = {}; sc_req_extends = [];
        sc_req_implements = []; sc_implements = [];
        sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
        sc_props =
        [{ Shallow_decl_defs.sp_name = ([15:23-25], "x"); sp_xhp_attr = None;
           sp_type =
           (Some (Rhint ([15:19-22]), (Tapply (([15:19-22], "\\Foo"), []))));
           sp_visibility = Public; sp_flags = needs_init | readonly };
          { Shallow_decl_defs.sp_name = ([18:25-27], "y");
            sp_xhp_attr = None;
            sp_type =
            (Some (Rhint ([18:21-24]), (Tapply (([18:21-24], "\\Foo"), []))));
            sp_visibility = Public; sp_flags = needs_init | readonly }
          ];
        sc_sprops = [];
        sc_constructor =
        (Some { Shallow_decl_defs.sm_name = ([17:19-30], "__construct");
                sm_type =
                (Rwitness_from_decl ([17:19-30]),
                 (Tfun
                    { ft_arity = (Fstandard ()); ft_tparams = [];
                      ft_where_constraints = [];
                      ft_params =
                      [{ fp_pos = [18:25-27]; fp_name = (Some "$y");
                         fp_type =
                         { et_enforced = Typing_defs_core.Unenforced;
                           et_type =
                           (Rhint ([18:21-24]),
                            (Tapply (([18:21-24], "\\Foo"), [])))
                           };
                         fp_flags =
                         (make_fp_flags ~accept_disposable:false
                           ~has_default:false ~mode:Typing_defs_core.FPnormal
                           ~ifc_external:false ~ifc_can_call:false
                           ~via_label:false ~readonly:true);
                          }
                        ];
                      ft_implicit_params =
                      { capability = (CapDefaults [17:19-30]) };
                      ft_ret =
                      { et_enforced = Typing_defs_core.Unenforced;
                        et_type =
                        (Rwitness_from_decl ([17:19-30]), (Tprim Tvoid)) };
                      ft_flags =
                      (make_ft_flags FSync ~return_disposable:false
                        ~returns_readonly:false ~readonly_this:false);
                      ft_ifc_decl = FDPolicied {PUBLIC} }));
                sm_visibility = Public; sm_deprecated = None;
                sm_flags = (empty) });
        sc_static_methods = [];
        sc_methods =
        [{ Shallow_decl_defs.sm_name = ([22:28-34], "getFoo");
           sm_type =
           (Rwitness_from_decl ([22:28-34]),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = [];
                 ft_params =
                 [{ fp_pos = [22:63-65]; fp_name = (Some "$v");
                    fp_type =
                    { et_enforced = Typing_defs_core.Unenforced;
                      et_type =
                      (Rhint ([22:35-62]),
                       (Tfun
                          { ft_arity = (Fstandard ()); ft_tparams = [];
                            ft_where_constraints = []; ft_params = [];
                            ft_implicit_params =
                            { capability = (CapDefaults [22:35-62]) };
                            ft_ret =
                            { et_enforced = Typing_defs_core.Unenforced;
                              et_type = (Rhint ([22:57-61]), (Tprim Tvoid)) };
                            ft_flags =
                            (make_ft_flags FSync ~return_disposable:false
                              ~returns_readonly:false ~readonly_this:true);
                            ft_ifc_decl = FDPolicied {PUBLIC} }))
                      };
                    fp_flags =
                    (make_fp_flags ~accept_disposable:false
                      ~has_default:false ~mode:Typing_defs_core.FPnormal
                      ~ifc_external:false ~ifc_can_call:false
                      ~via_label:false ~readonly:false);
                     }
                   ];
                 ft_implicit_params =
                 { capability = (CapDefaults [22:28-34]) };
                 ft_ret =
                 { et_enforced = Typing_defs_core.Unenforced;
                   et_type = (Rhint ([22:69-73]), (Tprim Tvoid)) };
                 ft_flags =
                 (make_ft_flags FSync ~return_disposable:false
                   ~returns_readonly:false ~readonly_this:true);
                 ft_ifc_decl = FDPolicied {PUBLIC} }));
           sm_visibility = Public; sm_deprecated = None; sm_flags = (empty) }
          ];
        sc_user_attributes = []; sc_enum_type = None }))
  ]

They matched!
