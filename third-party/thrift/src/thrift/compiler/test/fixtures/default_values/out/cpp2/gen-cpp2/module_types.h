/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/default_values/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct int_value;
struct unqualified_integer;
struct optional_integer;
struct required_integer;
struct unqualified_struct;
struct optional_struct;
struct required_struct;
struct unqualified_integer;
struct optional_integer;
struct required_integer;
struct unqualified_struct;
struct optional_struct;
struct required_struct;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_int_value
#define APACHE_THRIFT_ACCESSOR_int_value
APACHE_THRIFT_DEFINE_ACCESSOR(int_value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_integer
#define APACHE_THRIFT_ACCESSOR_unqualified_integer
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_integer
#define APACHE_THRIFT_ACCESSOR_optional_integer
APACHE_THRIFT_DEFINE_ACCESSOR(optional_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_required_integer
#define APACHE_THRIFT_ACCESSOR_required_integer
APACHE_THRIFT_DEFINE_ACCESSOR(required_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_struct
#define APACHE_THRIFT_ACCESSOR_unqualified_struct
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_struct
#define APACHE_THRIFT_ACCESSOR_optional_struct
APACHE_THRIFT_DEFINE_ACCESSOR(optional_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_required_struct
#define APACHE_THRIFT_ACCESSOR_required_struct
APACHE_THRIFT_DEFINE_ACCESSOR(required_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_integer
#define APACHE_THRIFT_ACCESSOR_unqualified_integer
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_integer
#define APACHE_THRIFT_ACCESSOR_optional_integer
APACHE_THRIFT_DEFINE_ACCESSOR(optional_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_required_integer
#define APACHE_THRIFT_ACCESSOR_required_integer
APACHE_THRIFT_DEFINE_ACCESSOR(required_integer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_struct
#define APACHE_THRIFT_ACCESSOR_unqualified_struct
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_struct
#define APACHE_THRIFT_ACCESSOR_optional_struct
APACHE_THRIFT_DEFINE_ACCESSOR(optional_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_required_struct
#define APACHE_THRIFT_ACCESSOR_required_struct
APACHE_THRIFT_DEFINE_ACCESSOR(required_struct);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::compiler::test::fixtures::default_values {
class TrivialStruct;
class StructWithNoCustomDefaultValues;
class StructWithCustomDefaultValues;
} // namespace facebook::thrift::compiler::test::fixtures::default_values
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::compiler::test::fixtures::default_values {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/default_values/src/module.thrift", "name": "TrivialStruct", "kind": "struct" } */
class TrivialStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::int_value
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TrivialStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TrivialStruct() :
      __fbthrift_field_int_value() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialStruct(apache::thrift::FragileConstructor, ::std::int32_t int_value__arg);

  TrivialStruct(TrivialStruct&&) = default;

  TrivialStruct(const TrivialStruct&) = default;


  TrivialStruct& operator=(TrivialStruct&&) = default;

  TrivialStruct& operator=(const TrivialStruct&) = default;
 private:
  ::std::int32_t __fbthrift_field_int_value;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TrivialStruct&) const;
  bool operator<(const TrivialStruct&) const;

  /** Glean { "field": "int_value" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_value_ref() const& {
    return {this->__fbthrift_field_int_value, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_value_ref() & {
    return {this->__fbthrift_field_int_value, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_value_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_value), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> int_value() const& {
    return {this->__fbthrift_field_int_value, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> int_value() & {
    return {this->__fbthrift_field_int_value, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "int_value" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> int_value() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_int_value), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "int_value" } */
  [[deprecated("Use `FOO.int_value().value()` instead of `FOO.get_int_value()`")]]
  ::std::int32_t get_int_value() const;

  /** Glean { "field": "int_value" } */
  [[deprecated("Use `FOO.int_value() = BAR` instead of `FOO.set_int_value(BAR)`")]]
  ::std::int32_t& set_int_value(::std::int32_t int_value_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialStruct>;
  friend void swap(TrivialStruct& a, TrivialStruct& b);
};

template <class Protocol_>
unsigned long TrivialStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/default_values/src/module.thrift", "name": "StructWithNoCustomDefaultValues", "kind": "struct" } */
class StructWithNoCustomDefaultValues final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::unqualified_integer,
    ::apache::thrift::ident::optional_integer,
    ::apache::thrift::ident::required_integer,
    ::apache::thrift::ident::unqualified_struct,
    ::apache::thrift::ident::optional_struct,
    ::apache::thrift::ident::required_struct
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithNoCustomDefaultValues;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithNoCustomDefaultValues() :
      __fbthrift_field_unqualified_integer(),
      __fbthrift_field_optional_integer(),
      __fbthrift_field_required_integer() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithNoCustomDefaultValues(apache::thrift::FragileConstructor, ::std::int32_t unqualified_integer__arg, ::std::int32_t optional_integer__arg, ::std::int32_t required_integer__arg, ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct unqualified_struct__arg, ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct optional_struct__arg, ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct required_struct__arg);

  StructWithNoCustomDefaultValues(StructWithNoCustomDefaultValues&&) = default;

  StructWithNoCustomDefaultValues(const StructWithNoCustomDefaultValues&) = default;


  StructWithNoCustomDefaultValues& operator=(StructWithNoCustomDefaultValues&&) = default;

  StructWithNoCustomDefaultValues& operator=(const StructWithNoCustomDefaultValues&) = default;
 private:
  ::std::int32_t __fbthrift_field_unqualified_integer;
 private:
  ::std::int32_t __fbthrift_field_optional_integer;
 private:
  ::std::int32_t __fbthrift_field_required_integer;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct __fbthrift_field_unqualified_struct;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct __fbthrift_field_optional_struct;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct __fbthrift_field_required_struct;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithNoCustomDefaultValues&) const;
  bool operator<(const StructWithNoCustomDefaultValues&) const;

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_integer_ref() const& {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_integer_ref() & {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_integer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_integer), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_integer() const& {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_integer() & {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_integer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_integer), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_integer_ref() const& {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_integer_ref() & {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_integer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_integer), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_integer() const& {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_integer() & {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_integer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_integer), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_integer_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_integer_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_integer_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_integer)};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_integer() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_integer() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_integer() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_integer)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_struct_ref() const& {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_struct_ref() & {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_struct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_struct() const& {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_struct() & {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_struct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_struct_ref() const& {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_struct_ref() & {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_struct), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_struct() const& {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_struct() & {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_struct), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_struct_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_struct_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_struct_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_struct)};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_struct() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_struct() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_struct() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_struct)};
  }

  /** Glean { "field": "unqualified_integer" } */
  [[deprecated("Use `FOO.unqualified_integer().value()` instead of `FOO.get_unqualified_integer()`")]]
  ::std::int32_t get_unqualified_integer() const;

  /** Glean { "field": "unqualified_integer" } */
  [[deprecated("Use `FOO.unqualified_integer() = BAR` instead of `FOO.set_unqualified_integer(BAR)`")]]
  ::std::int32_t& set_unqualified_integer(::std::int32_t unqualified_integer_);

  /** Glean { "field": "optional_integer" } */
  [[deprecated("Use `FOO.optional_integer().value()` instead of `FOO.get_optional_integer()`")]]
  const ::std::int32_t* get_optional_integer() const&;

  /** Glean { "field": "optional_integer" } */
  [[deprecated("Use `FOO.optional_integer().value()` instead of `FOO.get_optional_integer()`")]]
  ::std::int32_t* get_optional_integer() &;

  ::std::int32_t* get_optional_integer() && = delete;

  /** Glean { "field": "optional_integer" } */
  [[deprecated("Use `FOO.optional_integer() = BAR` instead of `FOO.set_optional_integer(BAR)`")]]
  ::std::int32_t& set_optional_integer(::std::int32_t optional_integer_);

  /** Glean { "field": "required_integer" } */
  [[deprecated("Use `FOO.required_integer().value()` instead of `FOO.get_required_integer()`")]]
  ::std::int32_t get_required_integer() const;

  /** Glean { "field": "required_integer" } */
  [[deprecated("Use `FOO.required_integer() = BAR` instead of `FOO.set_required_integer(BAR)`")]]
  ::std::int32_t& set_required_integer(::std::int32_t required_integer_);

  /** Glean { "field": "unqualified_struct" } */
  [[deprecated("Use `FOO.unqualified_struct().value()` instead of `FOO.get_unqualified_struct()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& get_unqualified_struct() const&;

  /** Glean { "field": "unqualified_struct" } */
  [[deprecated("Use `FOO.unqualified_struct().value()` instead of `FOO.get_unqualified_struct()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct get_unqualified_struct() &&;

  /** Glean { "field": "unqualified_struct" } */
  template <typename T_StructWithNoCustomDefaultValues_unqualified_struct_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  [[deprecated("Use `FOO.unqualified_struct() = BAR` instead of `FOO.set_unqualified_struct(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& set_unqualified_struct(T_StructWithNoCustomDefaultValues_unqualified_struct_struct_setter&& unqualified_struct_) {
    unqualified_struct_ref() = std::forward<T_StructWithNoCustomDefaultValues_unqualified_struct_struct_setter>(unqualified_struct_);
    return __fbthrift_field_unqualified_struct;
  }

  /** Glean { "field": "optional_struct" } */
  [[deprecated("Use `FOO.optional_struct().value()` instead of `FOO.get_optional_struct()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct* get_optional_struct() const&;

  /** Glean { "field": "optional_struct" } */
  [[deprecated("Use `FOO.optional_struct().value()` instead of `FOO.get_optional_struct()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct* get_optional_struct() &;

  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct* get_optional_struct() && = delete;

  /** Glean { "field": "optional_struct" } */
  template <typename T_StructWithNoCustomDefaultValues_optional_struct_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  [[deprecated("Use `FOO.optional_struct() = BAR` instead of `FOO.set_optional_struct(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& set_optional_struct(T_StructWithNoCustomDefaultValues_optional_struct_struct_setter&& optional_struct_) {
    optional_struct_ref() = std::forward<T_StructWithNoCustomDefaultValues_optional_struct_struct_setter>(optional_struct_);
    return __fbthrift_field_optional_struct;
  }

  /** Glean { "field": "required_struct" } */
  [[deprecated("Use `FOO.required_struct().value()` instead of `FOO.get_required_struct()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& get_required_struct() const&;

  /** Glean { "field": "required_struct" } */
  [[deprecated("Use `FOO.required_struct().value()` instead of `FOO.get_required_struct()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct get_required_struct() &&;

  /** Glean { "field": "required_struct" } */
  template <typename T_StructWithNoCustomDefaultValues_required_struct_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  [[deprecated("Use `FOO.required_struct() = BAR` instead of `FOO.set_required_struct(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& set_required_struct(T_StructWithNoCustomDefaultValues_required_struct_struct_setter&& required_struct_) {
    required_struct_ref() = std::forward<T_StructWithNoCustomDefaultValues_required_struct_struct_setter>(required_struct_);
    return __fbthrift_field_required_struct;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithNoCustomDefaultValues>;
  friend void swap(StructWithNoCustomDefaultValues& a, StructWithNoCustomDefaultValues& b);
};

template <class Protocol_>
unsigned long StructWithNoCustomDefaultValues::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/default_values/src/module.thrift", "name": "StructWithCustomDefaultValues", "kind": "struct" } */
class StructWithCustomDefaultValues final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::unqualified_integer,
    ::apache::thrift::ident::optional_integer,
    ::apache::thrift::ident::required_integer,
    ::apache::thrift::ident::unqualified_struct,
    ::apache::thrift::ident::optional_struct,
    ::apache::thrift::ident::required_struct
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StructWithCustomDefaultValues;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  StructWithCustomDefaultValues() :
      __fbthrift_field_unqualified_integer(static_cast<::std::int32_t>(42)),
      __fbthrift_field_optional_integer(static_cast<::std::int32_t>(43)),
      __fbthrift_field_required_integer(static_cast<::std::int32_t>(44)),
      __fbthrift_field_unqualified_struct(::apache::thrift::detail::make_structured_constant<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::int_value>(static_cast<::std::int32_t>(123)))),
      __fbthrift_field_optional_struct(::apache::thrift::detail::make_structured_constant<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::int_value>(static_cast<::std::int32_t>(456)))),
      __fbthrift_field_required_struct(::apache::thrift::detail::make_structured_constant<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::int_value>(static_cast<::std::int32_t>(789)))) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithCustomDefaultValues(apache::thrift::FragileConstructor, ::std::int32_t unqualified_integer__arg, ::std::int32_t optional_integer__arg, ::std::int32_t required_integer__arg, ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct unqualified_struct__arg, ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct optional_struct__arg, ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct required_struct__arg);

  StructWithCustomDefaultValues(StructWithCustomDefaultValues&&) = default;

  StructWithCustomDefaultValues(const StructWithCustomDefaultValues&) = default;


  StructWithCustomDefaultValues& operator=(StructWithCustomDefaultValues&&) = default;

  StructWithCustomDefaultValues& operator=(const StructWithCustomDefaultValues&) = default;
 private:
  ::std::int32_t __fbthrift_field_unqualified_integer;
 private:
  ::std::int32_t __fbthrift_field_optional_integer;
 private:
  ::std::int32_t __fbthrift_field_required_integer;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct __fbthrift_field_unqualified_struct;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct __fbthrift_field_optional_struct;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct __fbthrift_field_required_struct;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StructWithCustomDefaultValues&) const;
  bool operator<(const StructWithCustomDefaultValues&) const;

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_integer_ref() const& {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_integer_ref() & {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_integer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_integer), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_integer() const& {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_integer() & {
    return {this->__fbthrift_field_unqualified_integer, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_integer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_integer), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_integer_ref() const& {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_integer_ref() & {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_integer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_integer), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_integer() const& {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_integer() & {
    return {this->__fbthrift_field_optional_integer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "optional_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_integer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_integer), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_integer_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_integer_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_integer_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_integer)};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_integer() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_integer() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_integer};
  }

  /** Glean { "field": "required_integer" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_integer() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_integer)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_struct_ref() const& {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_struct_ref() & {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_struct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_struct() const& {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_struct() & {
    return {this->__fbthrift_field_unqualified_struct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_struct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_struct_ref() const& {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_struct_ref() & {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_struct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_struct), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_struct() const& {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_struct() & {
    return {this->__fbthrift_field_optional_struct, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_struct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_struct), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_struct_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_struct_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_struct_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_struct)};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> required_struct() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> required_struct() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_required_struct};
  }

  /** Glean { "field": "required_struct" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> required_struct() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_required_struct)};
  }

  /** Glean { "field": "unqualified_integer" } */
  [[deprecated("Use `FOO.unqualified_integer().value()` instead of `FOO.get_unqualified_integer()`")]]
  ::std::int32_t get_unqualified_integer() const;

  /** Glean { "field": "unqualified_integer" } */
  [[deprecated("Use `FOO.unqualified_integer() = BAR` instead of `FOO.set_unqualified_integer(BAR)`")]]
  ::std::int32_t& set_unqualified_integer(::std::int32_t unqualified_integer_);

  /** Glean { "field": "optional_integer" } */
  [[deprecated("Use `FOO.optional_integer().value()` instead of `FOO.get_optional_integer()`")]]
  const ::std::int32_t* get_optional_integer() const&;

  /** Glean { "field": "optional_integer" } */
  [[deprecated("Use `FOO.optional_integer().value()` instead of `FOO.get_optional_integer()`")]]
  ::std::int32_t* get_optional_integer() &;

  ::std::int32_t* get_optional_integer() && = delete;

  /** Glean { "field": "optional_integer" } */
  [[deprecated("Use `FOO.optional_integer() = BAR` instead of `FOO.set_optional_integer(BAR)`")]]
  ::std::int32_t& set_optional_integer(::std::int32_t optional_integer_);

  /** Glean { "field": "required_integer" } */
  [[deprecated("Use `FOO.required_integer().value()` instead of `FOO.get_required_integer()`")]]
  ::std::int32_t get_required_integer() const;

  /** Glean { "field": "required_integer" } */
  [[deprecated("Use `FOO.required_integer() = BAR` instead of `FOO.set_required_integer(BAR)`")]]
  ::std::int32_t& set_required_integer(::std::int32_t required_integer_);

  /** Glean { "field": "unqualified_struct" } */
  [[deprecated("Use `FOO.unqualified_struct().value()` instead of `FOO.get_unqualified_struct()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& get_unqualified_struct() const&;

  /** Glean { "field": "unqualified_struct" } */
  [[deprecated("Use `FOO.unqualified_struct().value()` instead of `FOO.get_unqualified_struct()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct get_unqualified_struct() &&;

  /** Glean { "field": "unqualified_struct" } */
  template <typename T_StructWithCustomDefaultValues_unqualified_struct_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  [[deprecated("Use `FOO.unqualified_struct() = BAR` instead of `FOO.set_unqualified_struct(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& set_unqualified_struct(T_StructWithCustomDefaultValues_unqualified_struct_struct_setter&& unqualified_struct_) {
    unqualified_struct_ref() = std::forward<T_StructWithCustomDefaultValues_unqualified_struct_struct_setter>(unqualified_struct_);
    return __fbthrift_field_unqualified_struct;
  }

  /** Glean { "field": "optional_struct" } */
  [[deprecated("Use `FOO.optional_struct().value()` instead of `FOO.get_optional_struct()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct* get_optional_struct() const&;

  /** Glean { "field": "optional_struct" } */
  [[deprecated("Use `FOO.optional_struct().value()` instead of `FOO.get_optional_struct()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct* get_optional_struct() &;

  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct* get_optional_struct() && = delete;

  /** Glean { "field": "optional_struct" } */
  template <typename T_StructWithCustomDefaultValues_optional_struct_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  [[deprecated("Use `FOO.optional_struct() = BAR` instead of `FOO.set_optional_struct(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& set_optional_struct(T_StructWithCustomDefaultValues_optional_struct_struct_setter&& optional_struct_) {
    optional_struct_ref() = std::forward<T_StructWithCustomDefaultValues_optional_struct_struct_setter>(optional_struct_);
    return __fbthrift_field_optional_struct;
  }

  /** Glean { "field": "required_struct" } */
  [[deprecated("Use `FOO.required_struct().value()` instead of `FOO.get_required_struct()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& get_required_struct() const&;

  /** Glean { "field": "required_struct" } */
  [[deprecated("Use `FOO.required_struct().value()` instead of `FOO.get_required_struct()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct get_required_struct() &&;

  /** Glean { "field": "required_struct" } */
  template <typename T_StructWithCustomDefaultValues_required_struct_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct>
  [[deprecated("Use `FOO.required_struct() = BAR` instead of `FOO.set_required_struct(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct& set_required_struct(T_StructWithCustomDefaultValues_required_struct_struct_setter&& required_struct_) {
    required_struct_ref() = std::forward<T_StructWithCustomDefaultValues_required_struct_struct_setter>(required_struct_);
    return __fbthrift_field_required_struct;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithCustomDefaultValues>;
  friend void swap(StructWithCustomDefaultValues& a, StructWithCustomDefaultValues& b);
};

template <class Protocol_>
unsigned long StructWithCustomDefaultValues::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::thrift::compiler::test::fixtures::default_values

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::compiler::test::fixtures::default_values::TrivialStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6296185559367434976;
  static constexpr ::std::string_view definitionKey = {"\x4b\x28\xe6\xb1\xc3\x3b\xe1\xfd\x90\x8a\xd2\x29\xc6\xe9\x4d\xad", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::compiler::test::fixtures::default_values::StructWithNoCustomDefaultValues, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6296185559367434976;
  static constexpr ::std::string_view definitionKey = {"\x46\x57\x61\x05\xad\x36\x12\xc9\x89\xb3\xcf\x94\xfb\xb1\xf7\x4a", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::compiler::test::fixtures::default_values::StructWithCustomDefaultValues, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 6296185559367434976;
  static constexpr ::std::string_view definitionKey = {"\x7f\x8a\x3f\x87\x74\xe4\xf6\x8a\x92\x77\xb1\xb0\x2e\x59\xfe\x74", 16};
};
} // namespace apache::thrift::detail
