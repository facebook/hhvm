/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/templated-deserialize/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct small_A;
struct small_B;
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldF;
struct fieldG;
struct fieldH;
struct fieldI;
struct fieldJ;
struct fieldK;
struct fieldL;
struct fieldM;
struct fieldN;
struct fieldO;
struct fieldP;
struct fieldQ;
struct fieldR;
struct fieldS;
struct fieldT;
struct fieldU;
struct fieldX;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_small_A
#define APACHE_THRIFT_ACCESSOR_small_A
APACHE_THRIFT_DEFINE_ACCESSOR(small_A);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small_B
#define APACHE_THRIFT_ACCESSOR_small_B
APACHE_THRIFT_DEFINE_ACCESSOR(small_B);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldF
#define APACHE_THRIFT_ACCESSOR_fieldF
APACHE_THRIFT_DEFINE_ACCESSOR(fieldF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldG
#define APACHE_THRIFT_ACCESSOR_fieldG
APACHE_THRIFT_DEFINE_ACCESSOR(fieldG);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldH
#define APACHE_THRIFT_ACCESSOR_fieldH
APACHE_THRIFT_DEFINE_ACCESSOR(fieldH);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldI
#define APACHE_THRIFT_ACCESSOR_fieldI
APACHE_THRIFT_DEFINE_ACCESSOR(fieldI);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldJ
#define APACHE_THRIFT_ACCESSOR_fieldJ
APACHE_THRIFT_DEFINE_ACCESSOR(fieldJ);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldK
#define APACHE_THRIFT_ACCESSOR_fieldK
APACHE_THRIFT_DEFINE_ACCESSOR(fieldK);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldL
#define APACHE_THRIFT_ACCESSOR_fieldL
APACHE_THRIFT_DEFINE_ACCESSOR(fieldL);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldM
#define APACHE_THRIFT_ACCESSOR_fieldM
APACHE_THRIFT_DEFINE_ACCESSOR(fieldM);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldN
#define APACHE_THRIFT_ACCESSOR_fieldN
APACHE_THRIFT_DEFINE_ACCESSOR(fieldN);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldO
#define APACHE_THRIFT_ACCESSOR_fieldO
APACHE_THRIFT_DEFINE_ACCESSOR(fieldO);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldP
#define APACHE_THRIFT_ACCESSOR_fieldP
APACHE_THRIFT_DEFINE_ACCESSOR(fieldP);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldQ
#define APACHE_THRIFT_ACCESSOR_fieldQ
APACHE_THRIFT_DEFINE_ACCESSOR(fieldQ);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldR
#define APACHE_THRIFT_ACCESSOR_fieldR
APACHE_THRIFT_DEFINE_ACCESSOR(fieldR);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldS
#define APACHE_THRIFT_ACCESSOR_fieldS
APACHE_THRIFT_DEFINE_ACCESSOR(fieldS);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldT
#define APACHE_THRIFT_ACCESSOR_fieldT
APACHE_THRIFT_DEFINE_ACCESSOR(fieldT);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldU
#define APACHE_THRIFT_ACCESSOR_fieldU
APACHE_THRIFT_DEFINE_ACCESSOR(fieldU);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldX
#define APACHE_THRIFT_ACCESSOR_fieldX
APACHE_THRIFT_DEFINE_ACCESSOR(fieldX);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class MyEnumA {
  fieldA = 1,
  fieldB = 2,
  fieldC = 4,
};



} // cpp2

namespace std {
template<> struct hash<::cpp2::MyEnumA> :
  ::apache::thrift::detail::enum_hash<::cpp2::MyEnumA> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::MyEnumA>;

template <> struct TEnumTraits<::cpp2::MyEnumA> {
  using type = ::cpp2::MyEnumA;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::fieldA; }
  static constexpr type max() { return type::fieldC; }
};


}} // apache::thrift

namespace cpp2 {

using _MyEnumA_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnumA>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES;
#endif
} // cpp2

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class SmallStruct;
class containerStruct;
} // cpp2
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef Foo IndirectionA;
typedef Baz IndirectionC;
typedef Bar IndirectionB;

class SmallStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::small_A,
    ::apache::thrift::ident::small_B
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SmallStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SmallStruct() :
      __fbthrift_field_small_A(),
      __fbthrift_field_small_B() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SmallStruct(apache::thrift::FragileConstructor, bool small_A__arg, ::std::int32_t small_B__arg);

  SmallStruct(SmallStruct&&) = default;

  SmallStruct(const SmallStruct&) = default;


  SmallStruct& operator=(SmallStruct&&) = default;

  SmallStruct& operator=(const SmallStruct&) = default;
 private:
  bool __fbthrift_field_small_A;
 private:
  ::std::int32_t __fbthrift_field_small_B;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SmallStruct&) const;
  bool operator<(const SmallStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> small_A_ref() const& {
    return {this->__fbthrift_field_small_A, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> small_A_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_small_A), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> small_A_ref() & {
    return {this->__fbthrift_field_small_A, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> small_A_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_small_A), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> small_A() const& {
    return {this->__fbthrift_field_small_A, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> small_A() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_small_A), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> small_A() & {
    return {this->__fbthrift_field_small_A, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> small_A() && {
    return {static_cast<T&&>(this->__fbthrift_field_small_A), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> small_B_ref() const& {
    return {this->__fbthrift_field_small_B, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> small_B_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_small_B), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> small_B_ref() & {
    return {this->__fbthrift_field_small_B, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> small_B_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_small_B), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> small_B() const& {
    return {this->__fbthrift_field_small_B, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> small_B() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_small_B), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> small_B() & {
    return {this->__fbthrift_field_small_B, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> small_B() && {
    return {static_cast<T&&>(this->__fbthrift_field_small_B), __isset.at(1), __isset.bit(1)};
  }

  bool get_small_A() const {
    return __fbthrift_field_small_A;
  }

  [[deprecated("Use `FOO.small_A_ref() = BAR;` instead of `FOO.set_small_A(BAR);`")]]
  bool& set_small_A(bool small_A_) {
    small_A_ref() = small_A_;
    return __fbthrift_field_small_A;
  }

  ::std::int32_t get_small_B() const {
    return __fbthrift_field_small_B;
  }

  [[deprecated("Use `FOO.small_B_ref() = BAR;` instead of `FOO.set_small_B(BAR);`")]]
  ::std::int32_t& set_small_B(::std::int32_t small_B_) {
    small_B_ref() = small_B_;
    return __fbthrift_field_small_B;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SmallStruct>;
  friend void swap(SmallStruct& a, SmallStruct& b);
};

template <class Protocol_>
unsigned long SmallStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class containerStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB,
    ::apache::thrift::ident::fieldC,
    ::apache::thrift::ident::fieldD,
    ::apache::thrift::ident::fieldE,
    ::apache::thrift::ident::fieldF,
    ::apache::thrift::ident::fieldG,
    ::apache::thrift::ident::fieldH,
    ::apache::thrift::ident::fieldI,
    ::apache::thrift::ident::fieldJ,
    ::apache::thrift::ident::fieldK,
    ::apache::thrift::ident::fieldL,
    ::apache::thrift::ident::fieldM,
    ::apache::thrift::ident::fieldN,
    ::apache::thrift::ident::fieldO,
    ::apache::thrift::ident::fieldP,
    ::apache::thrift::ident::fieldQ,
    ::apache::thrift::ident::fieldR,
    ::apache::thrift::ident::fieldS,
    ::apache::thrift::ident::fieldT,
    ::apache::thrift::ident::fieldU,
    ::apache::thrift::ident::fieldX
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::i32_t>>>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>,
    ::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::i32_t>>>>,
    ::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::set<::apache::thrift::type::bool_t>>>,
    ::apache::thrift::type::map<::apache::thrift::type::set<::apache::thrift::type::list<::apache::thrift::type::i32_t>>, ::apache::thrift::type::map<::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::string_t>>, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::indirected<Foo, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::indirected<Bar, ::apache::thrift::type::double_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::indirected<Baz, ::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::enum_t<::cpp2::MyEnumA>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::struct_t<::cpp2::SmallStruct>,
    ::apache::thrift::type::struct_t<::cpp2::SmallStruct>,
    ::apache::thrift::type::struct_t<::cpp2::SmallStruct>,
    ::apache::thrift::type::struct_t<::cpp2::SmallStruct>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 22;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = containerStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  containerStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  containerStruct(apache::thrift::FragileConstructor, bool fieldA__arg, ::std::map<::std::string, bool> fieldB__arg, ::std::set<::std::int32_t> fieldC__arg, ::std::string fieldD__arg, ::std::string fieldE__arg, ::std::vector<::std::vector<::std::vector<::std::int32_t>>> fieldF__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> fieldG__arg, ::std::vector<::std::set<::std::int32_t>> fieldH__arg, bool fieldI__arg, ::std::map<::std::string, ::std::vector<::std::int32_t>> fieldJ__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> fieldK__arg, ::std::set<::std::set<::std::set<bool>>> fieldL__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> fieldM__arg, ::std::vector<::cpp2::IndirectionA> fieldN__arg, ::std::vector<::cpp2::IndirectionB> fieldO__arg, ::std::vector<::cpp2::IndirectionC> fieldP__arg, ::cpp2::MyEnumA fieldQ__arg, ::std::unique_ptr<::std::map<::std::string, bool>> fieldR__arg, ::std::unique_ptr<::cpp2::SmallStruct> fieldS__arg, ::std::shared_ptr<::cpp2::SmallStruct> fieldT__arg, ::std::shared_ptr<const ::cpp2::SmallStruct> fieldU__arg, ::std::unique_ptr<::cpp2::SmallStruct> fieldX__arg);

  containerStruct(containerStruct&&) noexcept;
  containerStruct(const containerStruct& src);


  containerStruct& operator=(containerStruct&&) noexcept;
  containerStruct& operator=(const containerStruct& src);

  ~containerStruct();

 private:
  bool __fbthrift_field_fieldA;
 private:
  ::std::map<::std::string, bool> __fbthrift_field_fieldB;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_fieldC;
 private:
  ::std::string __fbthrift_field_fieldD;
 private:
  ::std::string __fbthrift_field_fieldE;
 private:
  ::std::vector<::std::vector<::std::vector<::std::int32_t>>> __fbthrift_field_fieldF;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> __fbthrift_field_fieldG;
 private:
  ::std::vector<::std::set<::std::int32_t>> __fbthrift_field_fieldH;
 private:
  bool __fbthrift_field_fieldI;
 private:
  ::std::map<::std::string, ::std::vector<::std::int32_t>> __fbthrift_field_fieldJ;
 private:
  ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> __fbthrift_field_fieldK;
 private:
  ::std::set<::std::set<::std::set<bool>>> __fbthrift_field_fieldL;
 private:
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> __fbthrift_field_fieldM;
 private:
  ::std::vector<::cpp2::IndirectionA> __fbthrift_field_fieldN;
 private:
  ::std::vector<::cpp2::IndirectionB> __fbthrift_field_fieldO;
 private:
  ::std::vector<::cpp2::IndirectionC> __fbthrift_field_fieldP;
 private:
  ::cpp2::MyEnumA __fbthrift_field_fieldQ;
 private:
  ::std::unique_ptr<::std::map<::std::string, bool>> __fbthrift_field_fieldR;
 private:
  ::std::unique_ptr<::cpp2::SmallStruct> __fbthrift_field_fieldS;
 private:
  ::std::shared_ptr<::cpp2::SmallStruct> __fbthrift_field_fieldT;
 private:
  ::std::shared_ptr<const ::cpp2::SmallStruct> __fbthrift_field_fieldU;
 private:
  ::std::unique_ptr<::cpp2::SmallStruct> __fbthrift_field_fieldX;
 private:
  apache::thrift::detail::isset_bitset<17, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const containerStruct&) const;
  bool operator<(const containerStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldB_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldB_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldB() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldB() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldC_ref() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldC_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldC_ref() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldC_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldC() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldC() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldC() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldC() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldD_ref() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldD_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldD_ref() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldD_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldD() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldD() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldD() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldD() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE_ref() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE_ref() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldF_ref() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldF_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldF_ref() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldF_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldF() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldF() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldF() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldF() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldG_ref() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldG_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldG_ref() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldG_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldG() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldG() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldG() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldG() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldH_ref() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldH_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldH_ref() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldH_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldH() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldH() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldH() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldH() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldI_ref() const& {
    return {this->__fbthrift_field_fieldI, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldI_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldI), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldI_ref() & {
    return {this->__fbthrift_field_fieldI, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldI_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldI), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldI() const& {
    return {this->__fbthrift_field_fieldI, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldI() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldI), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldI() & {
    return {this->__fbthrift_field_fieldI, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldI() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldI), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldJ_ref() const& {
    return {this->__fbthrift_field_fieldJ, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldJ_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldJ), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldJ_ref() & {
    return {this->__fbthrift_field_fieldJ, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldJ_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldJ), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldJ() const& {
    return {this->__fbthrift_field_fieldJ, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldJ() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldJ), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldJ() & {
    return {this->__fbthrift_field_fieldJ, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldJ() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldJ), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldK_ref() const& {
    return {this->__fbthrift_field_fieldK, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldK_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldK), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldK_ref() & {
    return {this->__fbthrift_field_fieldK, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldK_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldK), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldK() const& {
    return {this->__fbthrift_field_fieldK, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldK() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldK), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldK() & {
    return {this->__fbthrift_field_fieldK, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldK() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldK), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldL_ref() const& {
    return {this->__fbthrift_field_fieldL, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldL_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldL), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldL_ref() & {
    return {this->__fbthrift_field_fieldL, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldL_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldL), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldL() const& {
    return {this->__fbthrift_field_fieldL, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldL() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldL), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldL() & {
    return {this->__fbthrift_field_fieldL, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldL() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldL), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldM_ref() const& {
    return {this->__fbthrift_field_fieldM, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldM_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldM), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldM_ref() & {
    return {this->__fbthrift_field_fieldM, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldM_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldM), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldM() const& {
    return {this->__fbthrift_field_fieldM, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldM() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldM), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldM() & {
    return {this->__fbthrift_field_fieldM, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldM() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldM), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldN_ref() const& {
    return {this->__fbthrift_field_fieldN, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldN_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldN), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldN_ref() & {
    return {this->__fbthrift_field_fieldN, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldN_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldN), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldN() const& {
    return {this->__fbthrift_field_fieldN, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldN() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldN), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldN() & {
    return {this->__fbthrift_field_fieldN, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldN() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldN), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldO_ref() const& {
    return {this->__fbthrift_field_fieldO, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldO_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldO), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldO_ref() & {
    return {this->__fbthrift_field_fieldO, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldO_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldO), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldO() const& {
    return {this->__fbthrift_field_fieldO, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldO() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldO), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldO() & {
    return {this->__fbthrift_field_fieldO, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldO() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldO), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldP_ref() const& {
    return {this->__fbthrift_field_fieldP, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldP_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldP), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldP_ref() & {
    return {this->__fbthrift_field_fieldP, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldP_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldP), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldP() const& {
    return {this->__fbthrift_field_fieldP, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldP() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldP), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldP() & {
    return {this->__fbthrift_field_fieldP, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldP() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldP), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldQ_ref() const& {
    return {this->__fbthrift_field_fieldQ, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldQ_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldQ), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldQ_ref() & {
    return {this->__fbthrift_field_fieldQ, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldQ_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldQ), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldQ() const& {
    return {this->__fbthrift_field_fieldQ, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldQ() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldQ), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldQ() & {
    return {this->__fbthrift_field_fieldQ, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldQ() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldQ), __isset.at(16), __isset.bit(16)};
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE T& fieldR_ref() & {
    return __fbthrift_field_fieldR;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE const T& fieldR_ref() const& {
    return __fbthrift_field_fieldR;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE T&& fieldR_ref() && {
    return static_cast<T&&>(__fbthrift_field_fieldR);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE const T&& fieldR_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldR);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE T& fieldR() & {
    return __fbthrift_field_fieldR;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE const T& fieldR() const& {
    return __fbthrift_field_fieldR;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE T&& fieldR() && {
    return static_cast<T&&>(__fbthrift_field_fieldR);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE const T&& fieldR() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldR);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldS_ref() & {
    return __fbthrift_field_fieldS;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldS_ref() const& {
    return __fbthrift_field_fieldS;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldS_ref() && {
    return static_cast<T&&>(__fbthrift_field_fieldS);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldS_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldS);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldS() & {
    return __fbthrift_field_fieldS;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldS() const& {
    return __fbthrift_field_fieldS;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldS() && {
    return static_cast<T&&>(__fbthrift_field_fieldS);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldS() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldS);
  }
  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldT_ref() & {
    return __fbthrift_field_fieldT;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldT_ref() const& {
    return __fbthrift_field_fieldT;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldT_ref() && {
    return static_cast<T&&>(__fbthrift_field_fieldT);
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldT_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldT);
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldT() & {
    return __fbthrift_field_fieldT;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldT() const& {
    return __fbthrift_field_fieldT;
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldT() && {
    return static_cast<T&&>(__fbthrift_field_fieldT);
  }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldT() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldT);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldU_ref() & {
    return __fbthrift_field_fieldU;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldU_ref() const& {
    return __fbthrift_field_fieldU;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldU_ref() && {
    return static_cast<T&&>(__fbthrift_field_fieldU);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldU_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldU);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldU() & {
    return __fbthrift_field_fieldU;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldU() const& {
    return __fbthrift_field_fieldU;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldU() && {
    return static_cast<T&&>(__fbthrift_field_fieldU);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldU() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldU);
  }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldX_ref() & {
    return __fbthrift_field_fieldX;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldX_ref() const& {
    return __fbthrift_field_fieldX;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldX_ref() && {
    return static_cast<T&&>(__fbthrift_field_fieldX);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldX_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldX);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldX() & {
    return __fbthrift_field_fieldX;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldX() const& {
    return __fbthrift_field_fieldX;
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldX() && {
    return static_cast<T&&>(__fbthrift_field_fieldX);
  }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldX() const&& {
    return static_cast<const T&&>(__fbthrift_field_fieldX);
  }

  bool get_fieldA() const {
    return __fbthrift_field_fieldA;
  }

  [[deprecated("Use `FOO.fieldA_ref() = BAR;` instead of `FOO.set_fieldA(BAR);`")]]
  bool& set_fieldA(bool fieldA_) {
    fieldA_ref() = fieldA_;
    return __fbthrift_field_fieldA;
  }
  const ::std::map<::std::string, bool>& get_fieldB() const&;
  ::std::map<::std::string, bool> get_fieldB() &&;

  template <typename T_containerStruct_fieldB_struct_setter = ::std::map<::std::string, bool>>
  [[deprecated("Use `FOO.fieldB_ref() = BAR;` instead of `FOO.set_fieldB(BAR);`")]]
  ::std::map<::std::string, bool>& set_fieldB(T_containerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_containerStruct_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }
  const ::std::set<::std::int32_t>& get_fieldC() const&;
  ::std::set<::std::int32_t> get_fieldC() &&;

  template <typename T_containerStruct_fieldC_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.fieldC_ref() = BAR;` instead of `FOO.set_fieldC(BAR);`")]]
  ::std::set<::std::int32_t>& set_fieldC(T_containerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC_ref() = std::forward<T_containerStruct_fieldC_struct_setter>(fieldC_);
    return __fbthrift_field_fieldC;
  }

  const ::std::string& get_fieldD() const& {
    return __fbthrift_field_fieldD;
  }

  ::std::string get_fieldD() && {
    return std::move(__fbthrift_field_fieldD);
  }

  template <typename T_containerStruct_fieldD_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldD_ref() = BAR;` instead of `FOO.set_fieldD(BAR);`")]]
  ::std::string& set_fieldD(T_containerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD_ref() = std::forward<T_containerStruct_fieldD_struct_setter>(fieldD_);
    return __fbthrift_field_fieldD;
  }

  const ::std::string& get_fieldE() const& {
    return __fbthrift_field_fieldE;
  }

  ::std::string get_fieldE() && {
    return std::move(__fbthrift_field_fieldE);
  }

  template <typename T_containerStruct_fieldE_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldE_ref() = BAR;` instead of `FOO.set_fieldE(BAR);`")]]
  ::std::string& set_fieldE(T_containerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE_ref() = std::forward<T_containerStruct_fieldE_struct_setter>(fieldE_);
    return __fbthrift_field_fieldE;
  }
  const ::std::vector<::std::vector<::std::vector<::std::int32_t>>>& get_fieldF() const&;
  ::std::vector<::std::vector<::std::vector<::std::int32_t>>> get_fieldF() &&;

  template <typename T_containerStruct_fieldF_struct_setter = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  [[deprecated("Use `FOO.fieldF_ref() = BAR;` instead of `FOO.set_fieldF(BAR);`")]]
  ::std::vector<::std::vector<::std::vector<::std::int32_t>>>& set_fieldF(T_containerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF_ref() = std::forward<T_containerStruct_fieldF_struct_setter>(fieldF_);
    return __fbthrift_field_fieldF;
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>& get_fieldG() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> get_fieldG() &&;

  template <typename T_containerStruct_fieldG_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  [[deprecated("Use `FOO.fieldG_ref() = BAR;` instead of `FOO.set_fieldG(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>& set_fieldG(T_containerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG_ref() = std::forward<T_containerStruct_fieldG_struct_setter>(fieldG_);
    return __fbthrift_field_fieldG;
  }
  const ::std::vector<::std::set<::std::int32_t>>& get_fieldH() const&;
  ::std::vector<::std::set<::std::int32_t>> get_fieldH() &&;

  template <typename T_containerStruct_fieldH_struct_setter = ::std::vector<::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.fieldH_ref() = BAR;` instead of `FOO.set_fieldH(BAR);`")]]
  ::std::vector<::std::set<::std::int32_t>>& set_fieldH(T_containerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH_ref() = std::forward<T_containerStruct_fieldH_struct_setter>(fieldH_);
    return __fbthrift_field_fieldH;
  }

  bool get_fieldI() const {
    return __fbthrift_field_fieldI;
  }

  [[deprecated("Use `FOO.fieldI_ref() = BAR;` instead of `FOO.set_fieldI(BAR);`")]]
  bool& set_fieldI(bool fieldI_) {
    fieldI_ref() = fieldI_;
    return __fbthrift_field_fieldI;
  }
  const ::std::map<::std::string, ::std::vector<::std::int32_t>>& get_fieldJ() const&;
  ::std::map<::std::string, ::std::vector<::std::int32_t>> get_fieldJ() &&;

  template <typename T_containerStruct_fieldJ_struct_setter = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.fieldJ_ref() = BAR;` instead of `FOO.set_fieldJ(BAR);`")]]
  ::std::map<::std::string, ::std::vector<::std::int32_t>>& set_fieldJ(T_containerStruct_fieldJ_struct_setter&& fieldJ_) {
    fieldJ_ref() = std::forward<T_containerStruct_fieldJ_struct_setter>(fieldJ_);
    return __fbthrift_field_fieldJ;
  }
  const ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>& get_fieldK() const&;
  ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> get_fieldK() &&;

  template <typename T_containerStruct_fieldK_struct_setter = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  [[deprecated("Use `FOO.fieldK_ref() = BAR;` instead of `FOO.set_fieldK(BAR);`")]]
  ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>& set_fieldK(T_containerStruct_fieldK_struct_setter&& fieldK_) {
    fieldK_ref() = std::forward<T_containerStruct_fieldK_struct_setter>(fieldK_);
    return __fbthrift_field_fieldK;
  }
  const ::std::set<::std::set<::std::set<bool>>>& get_fieldL() const&;
  ::std::set<::std::set<::std::set<bool>>> get_fieldL() &&;

  template <typename T_containerStruct_fieldL_struct_setter = ::std::set<::std::set<::std::set<bool>>>>
  [[deprecated("Use `FOO.fieldL_ref() = BAR;` instead of `FOO.set_fieldL(BAR);`")]]
  ::std::set<::std::set<::std::set<bool>>>& set_fieldL(T_containerStruct_fieldL_struct_setter&& fieldL_) {
    fieldL_ref() = std::forward<T_containerStruct_fieldL_struct_setter>(fieldL_);
    return __fbthrift_field_fieldL;
  }
  const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& get_fieldM() const&;
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> get_fieldM() &&;

  template <typename T_containerStruct_fieldM_struct_setter = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  [[deprecated("Use `FOO.fieldM_ref() = BAR;` instead of `FOO.set_fieldM(BAR);`")]]
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& set_fieldM(T_containerStruct_fieldM_struct_setter&& fieldM_) {
    fieldM_ref() = std::forward<T_containerStruct_fieldM_struct_setter>(fieldM_);
    return __fbthrift_field_fieldM;
  }
  const ::std::vector<::cpp2::IndirectionA>& get_fieldN() const&;
  ::std::vector<::cpp2::IndirectionA> get_fieldN() &&;

  template <typename T_containerStruct_fieldN_struct_setter = ::std::vector<::cpp2::IndirectionA>>
  [[deprecated("Use `FOO.fieldN_ref() = BAR;` instead of `FOO.set_fieldN(BAR);`")]]
  ::std::vector<::cpp2::IndirectionA>& set_fieldN(T_containerStruct_fieldN_struct_setter&& fieldN_) {
    fieldN_ref() = std::forward<T_containerStruct_fieldN_struct_setter>(fieldN_);
    return __fbthrift_field_fieldN;
  }
  const ::std::vector<::cpp2::IndirectionB>& get_fieldO() const&;
  ::std::vector<::cpp2::IndirectionB> get_fieldO() &&;

  template <typename T_containerStruct_fieldO_struct_setter = ::std::vector<::cpp2::IndirectionB>>
  [[deprecated("Use `FOO.fieldO_ref() = BAR;` instead of `FOO.set_fieldO(BAR);`")]]
  ::std::vector<::cpp2::IndirectionB>& set_fieldO(T_containerStruct_fieldO_struct_setter&& fieldO_) {
    fieldO_ref() = std::forward<T_containerStruct_fieldO_struct_setter>(fieldO_);
    return __fbthrift_field_fieldO;
  }
  const ::std::vector<::cpp2::IndirectionC>& get_fieldP() const&;
  ::std::vector<::cpp2::IndirectionC> get_fieldP() &&;

  template <typename T_containerStruct_fieldP_struct_setter = ::std::vector<::cpp2::IndirectionC>>
  [[deprecated("Use `FOO.fieldP_ref() = BAR;` instead of `FOO.set_fieldP(BAR);`")]]
  ::std::vector<::cpp2::IndirectionC>& set_fieldP(T_containerStruct_fieldP_struct_setter&& fieldP_) {
    fieldP_ref() = std::forward<T_containerStruct_fieldP_struct_setter>(fieldP_);
    return __fbthrift_field_fieldP;
  }

  ::cpp2::MyEnumA get_fieldQ() const {
    return __fbthrift_field_fieldQ;
  }

  [[deprecated("Use `FOO.fieldQ_ref() = BAR;` instead of `FOO.set_fieldQ(BAR);`")]]
  ::cpp2::MyEnumA& set_fieldQ(::cpp2::MyEnumA fieldQ_) {
    fieldQ_ref() = fieldQ_;
    return __fbthrift_field_fieldQ;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<containerStruct>;
  friend void swap(containerStruct& a, containerStruct& b);
};

template <class Protocol_>
unsigned long containerStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // cpp2
