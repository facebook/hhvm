#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations
import builtins


import typing as _typing
import types as _py_types

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import folly.iobuf as _fbthrift_iobuf
from thrift.python.client import (
    AsyncClient as _fbthrift_python_AsyncClient,
    SyncClient as _fbthrift_python_SyncClient,
    Client as _fbthrift_python_Client,
)
from thrift.python.client.omni_client import InteractionMethodPosition as _fbthrift_InteractionMethodPosition, FunctionQualifier as _fbthrift_FunctionQualifier
from thrift.python.streaming.sink import ClientSink as _fbthrift_ClientSink
from thrift.python.common import RpcOptions
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers
import thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import thrift.python.mutable_types as _fbthrift_python_mutable_types
import thrift.python.exceptions as _fbthrift_python_exceptions
import thrift.python.types as _fbthrift_python_types
import module.thrift_mutable_types as _fbthrift__module__thrift_mutable_types
import module.thrift_metadata as _fbthrift__module__thrift_metadata

class SinkService(_fbthrift_python_Client["SinkService.Async", "SinkService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.SinkService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__module__thrift_metadata.gen_metadata_service_SinkService()
    
    class Async(_fbthrift_python_AsyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.SinkService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_SinkService()
    
        async def method(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "method",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_method_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_method_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_method_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_method_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            return _fbthrift_sink_or_stream
    
        async def methodAndReponse(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.Tuple[_fbthrift__module__thrift_mutable_types.InitialResponse, _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "methodAndReponse",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodAndReponse_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodAndReponse_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodAndReponse_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodAndReponse_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success, _fbthrift_sink_or_stream
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def methodThrow(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "methodThrow",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodThrow_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodThrow_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodThrow_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodThrow_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__ex`
            if (_fbthrift_ex := _fbthrift_resp._ex0__ex) is not None:
                raise _fbthrift_ex
            return _fbthrift_sink_or_stream
    
        async def methodSinkThrow(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "methodSinkThrow",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodSinkThrow_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodSinkThrow_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodSinkThrow_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodSinkThrow_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            return _fbthrift_sink_or_stream
    
        async def methodFinalThrow(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "methodFinalThrow",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFinalThrow_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFinalThrow_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFinalThrow_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFinalThrow_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            return _fbthrift_sink_or_stream
    
        async def methodBothThrow(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "methodBothThrow",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodBothThrow_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodBothThrow_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodBothThrow_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodBothThrow_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            return _fbthrift_sink_or_stream
    
        async def methodFast(
            self,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift_ClientSink[_fbthrift__module__thrift_mutable_types.SinkPayload, _fbthrift__module__thrift_mutable_types.FinalResponse]:
            _fbthrift_resp = await self._send_request(
                "SinkService",
                "methodFast",
                _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFast_args(),
                (_fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFast_result, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFast_result_sink_elem, _fbthrift__module__thrift_mutable_types._fbthrift_SinkService_methodFast_result_sink_final),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="SinkService",
                rpc_options=rpc_options,
                is_mutable_types=True,
            )
            _fbthrift_resp, _fbthrift_sink_or_stream = _fbthrift_resp
            return _fbthrift_sink_or_stream
    
    
    # pyre-ignore[4]: Missing annotation.
    method = Async.method
    # pyre-ignore[4]: Missing annotation.
    methodAndReponse = Async.methodAndReponse
    # pyre-ignore[4]: Missing annotation.
    methodThrow = Async.methodThrow
    # pyre-ignore[4]: Missing annotation.
    methodSinkThrow = Async.methodSinkThrow
    # pyre-ignore[4]: Missing annotation.
    methodFinalThrow = Async.methodFinalThrow
    # pyre-ignore[4]: Missing annotation.
    methodBothThrow = Async.methodBothThrow
    # pyre-ignore[4]: Missing annotation.
    methodFast = Async.methodFast
    
    class Sync(_fbthrift_python_SyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.SinkService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_SinkService()

