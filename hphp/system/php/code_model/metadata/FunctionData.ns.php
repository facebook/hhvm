<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  A namespace function or a class method.
 */
class FunctionData /*implements IFunctionData*/ {
  use NamespaceMember;
  use TypeMember;
  use NamedNode;
  use Node;

  private /*?Vector<IAttribute>*/ $attributes;
  private /*?Vector<ITypeData>*/ $typeArguments;
  private /*?Vector<IParameterData>*/ $parameters;
  private /*?Vector<IVariable>*/ $capturedVariables;
  private /*?ITypeData*/ $returnType;
  private /*?IBlockStatement*/ $block;

  /** Zero or more attributes, for example: << __Native >>. */
  public function getAttributes() /*: Vector<IAttribute>*/ {
    if ($this->attributes === null) {
      $this->attributes = Vector {};
    }
    return $this->attributes;
  }
  /** Zero or more attributes, for example: << __Native >>. */
  public function setAttributes(/*Vector<IAttribute>*/ $value) /*: this*/ {
    $this->attributes = $value;
    return $this;
  }

  /** Zero or more type references representing generic arguments. */
  public function getTypeArguments() /*: Vector<ITypeData>*/ {
    if ($this->typeArguments === null) {
      $this->typeArguments = Vector {};
    }
    return $this->typeArguments;
  }
  /** Zero or more type references representing generic arguments. */
  public function setTypeArguments(/*Vector<ITypeData>*/ $value) /*: this*/ {
    $this->typeArguments = $value;
    return $this;
  }

  /** Zero or more parameters. */
  public function getParameters() /*: Vector<IParameterData>*/ {
    if ($this->parameters === null) {
      $this->parameters = Vector {};
    }
    return $this->parameters;
  }
  /** Zero or more parameters. */
  public function setParameters(/*Vector<IParameterData>*/ $value) /*: this*/ {
    $this->parameters = $value;
    return $this;
  }

  /** Zero or more variables captured from the enclosing environment */
  public function getCapturedVariables() /*: Vector<IVariable>*/ {
    if ($this->capturedVariables === null) {
      $this->capturedVariables = Vector {};
    }
    return $this->capturedVariables;
  }
  /** Zero or more variables captured from the enclosing environment */
  public function setCapturedVariables(/*Vector<IVariable>*/ $value) /*: this*/ {
    $this->capturedVariables = $value;
    return $this;
  }

  /** A reference to the return type, if any. */
  public function getReturnType() /*: ?ITypeData*/ {
    return $this->returnType;
  }
  /** A reference to the return type, if any. */
  public function setReturnType(/*?ITypeData*/ $value) /*: this*/ {
    $this->returnType = $value;
    return $this;
  }

  /** A block of statements making up the function body. */
  public function getBlock() /*: IBlockStatement*/ {
    if ($this->block === null) {
      throw new \Exception("Block is not initialized");
    }
    return $this->block;
  }
  /** A block of statements making up the function body. */
  public function setBlock(/*IBlockStatement*/ $value) /*: this*/ {
    $this->block = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitFunctionData($this) if
   * such a method exists on $visitor.
   * Falls back to a base interface visit method if possible.
   * Otherwise it returns $visitor->visitNode() .
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitFunctionData")) {
      // UNSAFE
      return $visitor->visitFunctionData($this);
    }
    if ($this->getContainingNamespace() !== null) {
      if (method_exists($visitor, "visitINamespaceMember")) {
        // UNSAFE
        return $visitor->visitINamespaceMember($this);
      }
      }
    if ($this->getContainingType() !== null) {
      if (method_exists($visitor, "visitITypeMember")) {
        // UNSAFE
        return $visitor->visitITypeMember($this);
      }
      }
    if (method_exists($visitor, "visitINamedNode")) {
      // UNSAFE
      return $visitor->visitINamedNode($this);
    }
    // UNSAFE
    return $visitor->visitNode($this);
  }

  /**
   * Calls $visitor->visitFunctionDataReference($this) if
   * such a method exists on $visitor. If not it returns null.
   */
  public function acceptAsReference(/*mixed*/ $visitor)/*: mixed*/{
    if (method_exists($visitor, "visitFunctionDataReference")) {
      // UNSAFE
      return $visitor->visitFunctionDataReference($this);
    }
    if ($this->getContainingNamespace() !== null) {
      if (method_exists($visitor, "visitINamespaceMemberReference")) {
        // UNSAFE
        return $visitor->visitINamespaceMemberReference($this);
      }
      }
    if ($this->getContainingType() !== null) {
      if (method_exists($visitor, "visitITypeMemberReference")) {
        // UNSAFE
        return $visitor->visitITypeMemberReference($this);
      }
      }
    if (method_exists($visitor, "visitINamedNodeReference")) {
      // UNSAFE
      return $visitor->visitINamedNodeReference($this);
    }
    // UNSAFE
    return $visitor->visitNodeReference($this);
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->block !== null) {
      yield $this->block;
    }
  }

  /**
   * Yields a list of nodes that can be reached from this
   * node but are not children of this node. Most traversals
   * will not traverse the children of nodes reached via
   * getReferences.
   */
  public function getReferences() /*: Continuation<INode>*/ {
    if ($this->returnType !== null) {
      yield $this->returnType;
    }
    if ($this->containingNamespace !== null) {
      yield $this->containingNamespace;
    }
    if ($this->containingType !== null) {
      yield $this->containingType;
    }
  }

}
}
