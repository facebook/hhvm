<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  a compile time constant of some type
 */
class ScalarExpression /*implements IScalarExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?mixed*/ $value;

  /**
   *  a compile time constant of some type
   */
  public function getValue() /*: mixed*/ {
    if ($this->value === null) {
      throw new \Exception("Value is not initialized");
    }
    return $this->value;
  }
  /**
   *  a compile time constant of some type
   */
  public function setValue(/*mixed*/ $value) /*: this*/ {
    $this->value = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitScalarExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitScalarExpression")) {
      // UNSAFE
      return $visitor->visitScalarExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    // UNSAFE
    yield break;
  }
}
}
