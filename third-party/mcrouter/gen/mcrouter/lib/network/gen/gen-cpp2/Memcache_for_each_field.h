/**
 * Autogenerated by Thrift for Memcache.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "mcrouter/lib/network/gen/gen-cpp2/Memcache_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::facebook::memcache::thrift::McGetRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGetRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).flags_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGetReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGetReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McSetRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McSetRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McSetReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McSetReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McDeleteRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McDeleteRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).attributes_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McDeleteReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McDeleteReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McLeaseGetRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McLeaseGetRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).flags_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McLeaseGetReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McLeaseGetReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).leaseToken_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(5), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McLeaseSetRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McLeaseSetRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).leaseToken_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McLeaseSetReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McLeaseSetReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McAddRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McAddRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McAddReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McAddReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McReplaceRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McReplaceRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McReplaceReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McReplaceReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGetsRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGetsRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).flags_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGetsReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGetsReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).casToken_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(5), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McCasRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McCasRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).casToken_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McCasReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McCasReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McIncrRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McIncrRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).delta_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McIncrReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McIncrReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).delta_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McDecrRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McDecrRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).delta_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McDecrReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McDecrReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).delta_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McMetagetRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McMetagetRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McMetagetReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McMetagetReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).age_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).ipv_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).ipAddress_ref()...);
    f(get_metadata(5), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(6), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McAppendRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McAppendRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McAppendReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McAppendReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McPrependRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McPrependRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McPrependReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McPrependReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McTouchRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McTouchRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).exptime_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McTouchReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McTouchReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McFlushReRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McFlushReRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McFlushReReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McFlushReReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McFlushAllRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McFlushAllRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).delay_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McFlushAllReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McFlushAllReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGatRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGatRequest>;

    f(get_metadata(0), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGatReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGatReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGatsRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGatsRequest>;

    f(get_metadata(0), static_cast<T&&>(t).exptime_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McGatsReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McGatsReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).casToken_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).flags_ref()...);
    f(get_metadata(4), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(5), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
