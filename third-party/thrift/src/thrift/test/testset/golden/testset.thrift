# This file was generated by `thrift/test/testset/generator.py`
# @generated

include "thrift/annotation/cpp.thrift"
include "thrift/annotation/hack.thrift"
include "thrift/annotation/java.thrift"
include "thrift/annotation/python.thrift"
include "thrift/annotation/thrift.thrift"

cpp_include "thrift/test/AdapterTest.h"

@thrift.Experimental
package "apache.org/thrift/test/testset"

namespace cpp2 apache.thrift.test.testset
namespace py3 thrift.test
namespace php apache_thrift
namespace py thrift.test.testset
namespace py.asyncio thrift_asyncio.test.testset
namespace java.swift org.apache.thrift.test
namespace go thrift.test.testset

struct struct_empty {
} (thrift.uri="facebook.com/thrift/test/testset/struct_empty")
struct struct_list_bool {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool")
struct struct_list_byte {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte")
struct struct_list_i16 {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16")
struct struct_list_i32 {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32")
struct struct_list_i64 {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64")
struct struct_list_float {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float")
struct struct_list_double {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double")
struct struct_list_binary {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary")
struct struct_list_string {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string")
struct struct_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string")
struct struct_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64")
struct struct_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool")
struct struct_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte")
struct struct_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16")
struct struct_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32")
struct struct_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64")
struct struct_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float")
struct struct_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double")
struct struct_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary")
struct struct_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string")
struct struct_map_i64_bool {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool")
struct struct_map_i64_byte {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte")
struct struct_map_i64_i16 {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16")
struct struct_map_i64_i32 {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32")
struct struct_map_i64_i64 {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64")
struct struct_map_i64_float {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float")
struct struct_map_i64_double {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double")
struct struct_map_i64_binary {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary")
struct struct_map_i64_string {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string")
struct struct_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string")
struct struct_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64")
struct struct_map_i64_set_string {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string")
struct struct_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64")
struct struct_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_cpp_ref")
struct struct_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_cpp_ref")
struct struct_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_cpp_ref")
struct struct_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_cpp_ref")
struct struct_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_cpp_ref")
struct struct_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_cpp_ref")
struct struct_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_cpp_ref")
struct struct_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_cpp_ref")
struct struct_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_cpp_ref")
struct struct_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_cpp_ref")
struct struct_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_cpp_ref")
struct struct_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_cpp_ref")
struct struct_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_cpp_ref")
struct struct_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_cpp_ref")
struct struct_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_cpp_ref")
struct struct_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_cpp_ref")
struct struct_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_cpp_ref")
struct struct_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_cpp_ref")
struct struct_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_cpp_ref")
struct struct_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_cpp_ref")
struct struct_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_cpp_ref")
struct struct_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_cpp_ref")
struct struct_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_cpp_ref")
struct struct_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_cpp_ref")
struct struct_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_cpp_ref")
struct struct_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_cpp_ref")
struct struct_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_cpp_ref")
struct struct_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_cpp_ref")
struct struct_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_cpp_ref")
struct struct_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_cpp_ref")
struct struct_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_cpp_ref")
struct struct_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_cpp_ref")
struct struct_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_cpp_ref")
struct struct_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_shared_cpp_ref")
struct struct_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_shared_cpp_ref")
struct struct_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_shared_cpp_ref")
struct struct_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_shared_cpp_ref")
struct struct_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_shared_cpp_ref")
struct struct_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_shared_cpp_ref")
struct struct_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_shared_cpp_ref")
struct struct_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_shared_cpp_ref")
struct struct_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_shared_cpp_ref")
struct struct_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_shared_cpp_ref")
struct struct_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_shared_cpp_ref")
struct struct_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_shared_cpp_ref")
struct struct_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_shared_cpp_ref")
struct struct_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_shared_cpp_ref")
struct struct_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_shared_cpp_ref")
struct struct_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_shared_cpp_ref")
struct struct_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_shared_cpp_ref")
struct struct_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_shared_cpp_ref")
struct struct_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_shared_cpp_ref")
struct struct_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_shared_cpp_ref")
struct struct_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_shared_cpp_ref")
struct struct_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_shared_cpp_ref")
struct struct_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_shared_cpp_ref")
struct struct_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_shared_cpp_ref")
struct struct_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_shared_cpp_ref")
struct struct_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_shared_cpp_ref")
struct struct_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_shared_cpp_ref")
struct struct_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_shared_cpp_ref")
struct struct_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_shared_cpp_ref")
struct struct_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_shared_cpp_ref")
struct struct_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_shared_cpp_ref")
struct struct_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_shared_cpp_ref")
struct struct_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_shared_cpp_ref")
struct struct_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool")
struct struct_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte")
struct struct_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16")
struct struct_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32")
struct struct_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64")
struct struct_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float")
struct struct_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double")
struct struct_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary")
struct struct_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string")
struct struct_bool_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_custom_default")
struct struct_byte_custom_default {
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_custom_default")
struct struct_i16_custom_default {
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_custom_default")
struct struct_i32_custom_default {
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_custom_default")
struct struct_i64_custom_default {
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_custom_default")
struct struct_float_custom_default {
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_custom_default")
struct struct_double_custom_default {
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_custom_default")
struct struct_binary_custom_default {
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_custom_default")
struct struct_string_custom_default {
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_custom_default")
struct struct_bool_alternative_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_alternative_custom_default")
struct struct_byte_alternative_custom_default {
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_alternative_custom_default")
struct struct_i16_alternative_custom_default {
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_alternative_custom_default")
struct struct_i32_alternative_custom_default {
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_alternative_custom_default")
struct struct_i64_alternative_custom_default {
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_alternative_custom_default")
struct struct_float_alternative_custom_default {
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_alternative_custom_default")
struct struct_double_alternative_custom_default {
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_alternative_custom_default")
struct struct_binary_alternative_custom_default {
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_alternative_custom_default")
struct struct_string_alternative_custom_default {
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_alternative_custom_default")
struct struct_optional_list_bool {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool")
struct struct_optional_list_byte {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte")
struct struct_optional_list_i16 {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16")
struct struct_optional_list_i32 {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32")
struct struct_optional_list_i64 {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64")
struct struct_optional_list_float {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float")
struct struct_optional_list_double {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double")
struct struct_optional_list_binary {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary")
struct struct_optional_list_string {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string")
struct struct_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string")
struct struct_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64")
struct struct_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool")
struct struct_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte")
struct struct_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16")
struct struct_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32")
struct struct_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64")
struct struct_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float")
struct struct_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double")
struct struct_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary")
struct struct_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string")
struct struct_optional_map_i64_bool {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool")
struct struct_optional_map_i64_byte {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte")
struct struct_optional_map_i64_i16 {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16")
struct struct_optional_map_i64_i32 {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32")
struct struct_optional_map_i64_i64 {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64")
struct struct_optional_map_i64_float {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float")
struct struct_optional_map_i64_double {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double")
struct struct_optional_map_i64_binary {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary")
struct struct_optional_map_i64_string {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string")
struct struct_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string")
struct struct_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64")
struct struct_optional_map_i64_set_string {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string")
struct struct_optional_map_i64_set_i64 {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64")
struct struct_optional_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_cpp_ref")
struct struct_optional_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_cpp_ref")
struct struct_optional_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_cpp_ref")
struct struct_optional_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_cpp_ref")
struct struct_optional_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_cpp_ref")
struct struct_optional_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_cpp_ref")
struct struct_optional_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_cpp_ref")
struct struct_optional_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_cpp_ref")
struct struct_optional_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_cpp_ref")
struct struct_optional_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_cpp_ref")
struct struct_optional_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_cpp_ref")
struct struct_optional_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_cpp_ref")
struct struct_optional_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_cpp_ref")
struct struct_optional_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_cpp_ref")
struct struct_optional_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_cpp_ref")
struct struct_optional_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_cpp_ref")
struct struct_optional_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_cpp_ref")
struct struct_optional_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_cpp_ref")
struct struct_optional_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_cpp_ref")
struct struct_optional_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_cpp_ref")
struct struct_optional_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_cpp_ref")
struct struct_optional_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_cpp_ref")
struct struct_optional_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_cpp_ref")
struct struct_optional_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_cpp_ref")
struct struct_optional_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_cpp_ref")
struct struct_optional_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_cpp_ref")
struct struct_optional_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_cpp_ref")
struct struct_optional_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_cpp_ref")
struct struct_optional_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_cpp_ref")
struct struct_optional_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_cpp_ref")
struct struct_optional_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_cpp_ref")
struct struct_optional_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_cpp_ref")
struct struct_optional_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_cpp_ref")
struct struct_optional_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_shared_cpp_ref")
struct struct_optional_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_shared_cpp_ref")
struct struct_optional_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_shared_cpp_ref")
struct struct_optional_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_shared_cpp_ref")
struct struct_optional_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_shared_cpp_ref")
struct struct_optional_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_shared_cpp_ref")
struct struct_optional_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_shared_cpp_ref")
struct struct_optional_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_shared_cpp_ref")
struct struct_optional_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_shared_cpp_ref")
struct struct_optional_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_shared_cpp_ref")
struct struct_optional_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_shared_cpp_ref")
struct struct_optional_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_shared_cpp_ref")
struct struct_optional_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_shared_cpp_ref")
struct struct_optional_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_shared_cpp_ref")
struct struct_optional_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_shared_cpp_ref")
struct struct_optional_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_shared_cpp_ref")
struct struct_optional_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_shared_cpp_ref")
struct struct_optional_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_shared_cpp_ref")
struct struct_optional_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_shared_cpp_ref")
struct struct_optional_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_shared_cpp_ref")
struct struct_optional_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_shared_cpp_ref")
struct struct_optional_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_shared_cpp_ref")
struct struct_optional_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_shared_cpp_ref")
struct struct_optional_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_shared_cpp_ref")
struct struct_optional_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_shared_cpp_ref")
struct struct_optional_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_shared_cpp_ref")
struct struct_optional_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_shared_cpp_ref")
struct struct_optional_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_shared_cpp_ref")
struct struct_optional_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_shared_cpp_ref")
struct struct_optional_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_shared_cpp_ref")
struct struct_optional_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_shared_cpp_ref")
struct struct_optional_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_shared_cpp_ref")
struct struct_optional_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_shared_cpp_ref")
struct struct_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool")
struct struct_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte")
struct struct_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16")
struct struct_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32")
struct struct_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64")
struct struct_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float")
struct struct_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double")
struct struct_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary")
struct struct_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string")
struct struct_optional_bool_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_custom_default")
struct struct_optional_byte_custom_default {
  1: optional byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_custom_default")
struct struct_optional_i16_custom_default {
  1: optional i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_custom_default")
struct struct_optional_i32_custom_default {
  1: optional i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_custom_default")
struct struct_optional_i64_custom_default {
  1: optional i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_custom_default")
struct struct_optional_float_custom_default {
  1: optional float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_custom_default")
struct struct_optional_double_custom_default {
  1: optional double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_custom_default")
struct struct_optional_binary_custom_default {
  1: optional binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_custom_default")
struct struct_optional_string_custom_default {
  1: optional string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_custom_default")
struct struct_optional_bool_alternative_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_alternative_custom_default")
struct struct_optional_byte_alternative_custom_default {
  1: optional byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_alternative_custom_default")
struct struct_optional_i16_alternative_custom_default {
  1: optional i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_alternative_custom_default")
struct struct_optional_i32_alternative_custom_default {
  1: optional i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_alternative_custom_default")
struct struct_optional_i64_alternative_custom_default {
  1: optional i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_alternative_custom_default")
struct struct_optional_float_alternative_custom_default {
  1: optional float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_alternative_custom_default")
struct struct_optional_double_alternative_custom_default {
  1: optional double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_alternative_custom_default")
struct struct_optional_binary_alternative_custom_default {
  1: optional binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_alternative_custom_default")
struct struct_optional_string_alternative_custom_default {
  1: optional string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_alternative_custom_default")
struct struct_required_list_bool {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool")
struct struct_required_list_byte {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte")
struct struct_required_list_i16 {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16")
struct struct_required_list_i32 {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32")
struct struct_required_list_i64 {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64")
struct struct_required_list_float {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float")
struct struct_required_list_double {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double")
struct struct_required_list_binary {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary")
struct struct_required_list_string {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string")
struct struct_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string")
struct struct_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64")
struct struct_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool")
struct struct_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte")
struct struct_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16")
struct struct_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32")
struct struct_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64")
struct struct_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float")
struct struct_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double")
struct struct_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary")
struct struct_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string")
struct struct_required_map_i64_bool {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool")
struct struct_required_map_i64_byte {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte")
struct struct_required_map_i64_i16 {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16")
struct struct_required_map_i64_i32 {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32")
struct struct_required_map_i64_i64 {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64")
struct struct_required_map_i64_float {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float")
struct struct_required_map_i64_double {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double")
struct struct_required_map_i64_binary {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary")
struct struct_required_map_i64_string {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string")
struct struct_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string")
struct struct_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64")
struct struct_required_map_i64_set_string {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string")
struct struct_required_map_i64_set_i64 {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64")
struct struct_required_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_cpp_ref")
struct struct_required_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_cpp_ref")
struct struct_required_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_cpp_ref")
struct struct_required_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_cpp_ref")
struct struct_required_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_cpp_ref")
struct struct_required_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_cpp_ref")
struct struct_required_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_cpp_ref")
struct struct_required_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_cpp_ref")
struct struct_required_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_cpp_ref")
struct struct_required_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_cpp_ref")
struct struct_required_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_cpp_ref")
struct struct_required_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_cpp_ref")
struct struct_required_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_cpp_ref")
struct struct_required_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_cpp_ref")
struct struct_required_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_cpp_ref")
struct struct_required_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_cpp_ref")
struct struct_required_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_cpp_ref")
struct struct_required_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_cpp_ref")
struct struct_required_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_cpp_ref")
struct struct_required_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_cpp_ref")
struct struct_required_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_cpp_ref")
struct struct_required_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_cpp_ref")
struct struct_required_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_cpp_ref")
struct struct_required_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_cpp_ref")
struct struct_required_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_cpp_ref")
struct struct_required_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_cpp_ref")
struct struct_required_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_cpp_ref")
struct struct_required_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_cpp_ref")
struct struct_required_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_cpp_ref")
struct struct_required_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_cpp_ref")
struct struct_required_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_cpp_ref")
struct struct_required_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_cpp_ref")
struct struct_required_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_cpp_ref")
struct struct_required_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_shared_cpp_ref")
struct struct_required_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_shared_cpp_ref")
struct struct_required_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_shared_cpp_ref")
struct struct_required_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_shared_cpp_ref")
struct struct_required_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_shared_cpp_ref")
struct struct_required_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_shared_cpp_ref")
struct struct_required_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_shared_cpp_ref")
struct struct_required_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_shared_cpp_ref")
struct struct_required_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_shared_cpp_ref")
struct struct_required_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_shared_cpp_ref")
struct struct_required_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_shared_cpp_ref")
struct struct_required_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_shared_cpp_ref")
struct struct_required_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_shared_cpp_ref")
struct struct_required_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_shared_cpp_ref")
struct struct_required_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_shared_cpp_ref")
struct struct_required_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_shared_cpp_ref")
struct struct_required_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_shared_cpp_ref")
struct struct_required_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_shared_cpp_ref")
struct struct_required_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_shared_cpp_ref")
struct struct_required_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_shared_cpp_ref")
struct struct_required_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_shared_cpp_ref")
struct struct_required_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_shared_cpp_ref")
struct struct_required_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_shared_cpp_ref")
struct struct_required_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_shared_cpp_ref")
struct struct_required_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_shared_cpp_ref")
struct struct_required_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_shared_cpp_ref")
struct struct_required_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_shared_cpp_ref")
struct struct_required_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_shared_cpp_ref")
struct struct_required_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_shared_cpp_ref")
struct struct_required_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_shared_cpp_ref")
struct struct_required_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_shared_cpp_ref")
struct struct_required_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_shared_cpp_ref")
struct struct_required_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_shared_cpp_ref")
struct struct_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool")
struct struct_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte")
struct struct_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16")
struct struct_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32")
struct struct_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64")
struct struct_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float")
struct struct_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double")
struct struct_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary")
struct struct_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string")
struct struct_required_bool_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_custom_default")
struct struct_required_byte_custom_default {
  1: required byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_custom_default")
struct struct_required_i16_custom_default {
  1: required i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_custom_default")
struct struct_required_i32_custom_default {
  1: required i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_custom_default")
struct struct_required_i64_custom_default {
  1: required i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_custom_default")
struct struct_required_float_custom_default {
  1: required float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_custom_default")
struct struct_required_double_custom_default {
  1: required double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_custom_default")
struct struct_required_binary_custom_default {
  1: required binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_custom_default")
struct struct_required_string_custom_default {
  1: required string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_custom_default")
struct struct_required_bool_alternative_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_alternative_custom_default")
struct struct_required_byte_alternative_custom_default {
  1: required byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_alternative_custom_default")
struct struct_required_i16_alternative_custom_default {
  1: required i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_alternative_custom_default")
struct struct_required_i32_alternative_custom_default {
  1: required i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_alternative_custom_default")
struct struct_required_i64_alternative_custom_default {
  1: required i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_alternative_custom_default")
struct struct_required_float_alternative_custom_default {
  1: required float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_alternative_custom_default")
struct struct_required_double_alternative_custom_default {
  1: required double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_alternative_custom_default")
struct struct_required_binary_alternative_custom_default {
  1: required binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_alternative_custom_default")
struct struct_required_string_alternative_custom_default {
  1: required string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_alternative_custom_default")
struct struct_terse_list_bool {
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool")
struct struct_terse_list_byte {
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte")
struct struct_terse_list_i16 {
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16")
struct struct_terse_list_i32 {
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32")
struct struct_terse_list_i64 {
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64")
struct struct_terse_list_float {
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float")
struct struct_terse_list_double {
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double")
struct struct_terse_list_binary {
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary")
struct struct_terse_list_string {
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string")
struct struct_terse_set_string {
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string")
struct struct_terse_set_i64 {
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64")
struct struct_terse_map_string_bool {
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool")
struct struct_terse_map_string_byte {
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte")
struct struct_terse_map_string_i16 {
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16")
struct struct_terse_map_string_i32 {
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32")
struct struct_terse_map_string_i64 {
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64")
struct struct_terse_map_string_float {
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float")
struct struct_terse_map_string_double {
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double")
struct struct_terse_map_string_binary {
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary")
struct struct_terse_map_string_string {
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string")
struct struct_terse_map_i64_bool {
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool")
struct struct_terse_map_i64_byte {
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte")
struct struct_terse_map_i64_i16 {
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16")
struct struct_terse_map_i64_i32 {
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32")
struct struct_terse_map_i64_i64 {
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64")
struct struct_terse_map_i64_float {
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float")
struct struct_terse_map_i64_double {
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double")
struct struct_terse_map_i64_binary {
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary")
struct struct_terse_map_i64_string {
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string")
struct struct_terse_map_string_set_string {
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string")
struct struct_terse_map_string_set_i64 {
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64")
struct struct_terse_map_i64_set_string {
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string")
struct struct_terse_map_i64_set_i64 {
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64")
struct struct_terse_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_cpp_ref")
struct struct_terse_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_cpp_ref")
struct struct_terse_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_cpp_ref")
struct struct_terse_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_cpp_ref")
struct struct_terse_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_cpp_ref")
struct struct_terse_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_cpp_ref")
struct struct_terse_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_cpp_ref")
struct struct_terse_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_cpp_ref")
struct struct_terse_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_cpp_ref")
struct struct_terse_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_cpp_ref")
struct struct_terse_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_cpp_ref")
struct struct_terse_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_cpp_ref")
struct struct_terse_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_cpp_ref")
struct struct_terse_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_cpp_ref")
struct struct_terse_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_cpp_ref")
struct struct_terse_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_cpp_ref")
struct struct_terse_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_cpp_ref")
struct struct_terse_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_cpp_ref")
struct struct_terse_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_cpp_ref")
struct struct_terse_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_cpp_ref")
struct struct_terse_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_cpp_ref")
struct struct_terse_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_cpp_ref")
struct struct_terse_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_cpp_ref")
struct struct_terse_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_cpp_ref")
struct struct_terse_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_cpp_ref")
struct struct_terse_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_cpp_ref")
struct struct_terse_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_cpp_ref")
struct struct_terse_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_cpp_ref")
struct struct_terse_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_cpp_ref")
struct struct_terse_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_cpp_ref")
struct struct_terse_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_cpp_ref")
struct struct_terse_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_cpp_ref")
struct struct_terse_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_cpp_ref")
struct struct_terse_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_shared_cpp_ref")
struct struct_terse_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_shared_cpp_ref")
struct struct_terse_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_shared_cpp_ref")
struct struct_terse_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_shared_cpp_ref")
struct struct_terse_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_shared_cpp_ref")
struct struct_terse_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_shared_cpp_ref")
struct struct_terse_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_shared_cpp_ref")
struct struct_terse_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_shared_cpp_ref")
struct struct_terse_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_shared_cpp_ref")
struct struct_terse_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_shared_cpp_ref")
struct struct_terse_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_shared_cpp_ref")
struct struct_terse_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_shared_cpp_ref")
struct struct_terse_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_shared_cpp_ref")
struct struct_terse_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_shared_cpp_ref")
struct struct_terse_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_shared_cpp_ref")
struct struct_terse_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_shared_cpp_ref")
struct struct_terse_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_shared_cpp_ref")
struct struct_terse_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_shared_cpp_ref")
struct struct_terse_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_shared_cpp_ref")
struct struct_terse_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_shared_cpp_ref")
struct struct_terse_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_shared_cpp_ref")
struct struct_terse_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_shared_cpp_ref")
struct struct_terse_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_shared_cpp_ref")
struct struct_terse_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_shared_cpp_ref")
struct struct_terse_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_shared_cpp_ref")
struct struct_terse_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_shared_cpp_ref")
struct struct_terse_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_shared_cpp_ref")
struct struct_terse_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_shared_cpp_ref")
struct struct_terse_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_shared_cpp_ref")
struct struct_terse_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_shared_cpp_ref")
struct struct_terse_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_shared_cpp_ref")
struct struct_terse_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_shared_cpp_ref")
struct struct_terse_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_shared_cpp_ref")
struct struct_terse_bool {
  @thrift.TerseWrite
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool")
struct struct_terse_byte {
  @thrift.TerseWrite
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte")
struct struct_terse_i16 {
  @thrift.TerseWrite
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16")
struct struct_terse_i32 {
  @thrift.TerseWrite
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32")
struct struct_terse_i64 {
  @thrift.TerseWrite
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64")
struct struct_terse_float {
  @thrift.TerseWrite
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float")
struct struct_terse_double {
  @thrift.TerseWrite
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double")
struct struct_terse_binary {
  @thrift.TerseWrite
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary")
struct struct_terse_string {
  @thrift.TerseWrite
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string")
struct struct_terse_bool_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_custom_default")
struct struct_terse_byte_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_custom_default")
struct struct_terse_i16_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_custom_default")
struct struct_terse_i32_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_custom_default")
struct struct_terse_i64_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_custom_default")
struct struct_terse_float_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_custom_default")
struct struct_terse_double_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_custom_default")
struct struct_terse_binary_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_custom_default")
struct struct_terse_string_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_custom_default")
struct struct_terse_bool_alternative_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_alternative_custom_default")
struct struct_terse_byte_alternative_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_alternative_custom_default")
struct struct_terse_i16_alternative_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_alternative_custom_default")
struct struct_terse_i32_alternative_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_alternative_custom_default")
struct struct_terse_i64_alternative_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_alternative_custom_default")
struct struct_terse_float_alternative_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_alternative_custom_default")
struct struct_terse_double_alternative_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_alternative_custom_default")
struct struct_terse_binary_alternative_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_alternative_custom_default")
struct struct_terse_string_alternative_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_alternative_custom_default")
struct struct_optional_list_bool_box {
  @thrift.Box
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_box")
struct struct_optional_list_byte_box {
  @thrift.Box
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_box")
struct struct_optional_list_i16_box {
  @thrift.Box
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_box")
struct struct_optional_list_i32_box {
  @thrift.Box
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_box")
struct struct_optional_list_i64_box {
  @thrift.Box
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_box")
struct struct_optional_list_float_box {
  @thrift.Box
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_box")
struct struct_optional_list_double_box {
  @thrift.Box
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_box")
struct struct_optional_list_binary_box {
  @thrift.Box
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_box")
struct struct_optional_list_string_box {
  @thrift.Box
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_box")
struct struct_optional_set_string_box {
  @thrift.Box
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_box")
struct struct_optional_set_i64_box {
  @thrift.Box
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_box")
struct struct_optional_map_string_bool_box {
  @thrift.Box
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_box")
struct struct_optional_map_string_byte_box {
  @thrift.Box
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_box")
struct struct_optional_map_string_i16_box {
  @thrift.Box
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_box")
struct struct_optional_map_string_i32_box {
  @thrift.Box
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_box")
struct struct_optional_map_string_i64_box {
  @thrift.Box
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_box")
struct struct_optional_map_string_float_box {
  @thrift.Box
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_box")
struct struct_optional_map_string_double_box {
  @thrift.Box
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_box")
struct struct_optional_map_string_binary_box {
  @thrift.Box
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_box")
struct struct_optional_map_string_string_box {
  @thrift.Box
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_box")
struct struct_optional_map_i64_bool_box {
  @thrift.Box
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_box")
struct struct_optional_map_i64_byte_box {
  @thrift.Box
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_box")
struct struct_optional_map_i64_i16_box {
  @thrift.Box
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_box")
struct struct_optional_map_i64_i32_box {
  @thrift.Box
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_box")
struct struct_optional_map_i64_i64_box {
  @thrift.Box
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_box")
struct struct_optional_map_i64_float_box {
  @thrift.Box
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_box")
struct struct_optional_map_i64_double_box {
  @thrift.Box
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_box")
struct struct_optional_map_i64_binary_box {
  @thrift.Box
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_box")
struct struct_optional_map_i64_string_box {
  @thrift.Box
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_box")
struct struct_optional_map_string_set_string_box {
  @thrift.Box
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_box")
struct struct_optional_map_string_set_i64_box {
  @thrift.Box
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_box")
struct struct_optional_map_i64_set_string_box {
  @thrift.Box
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_box")
struct struct_optional_map_i64_set_i64_box {
  @thrift.Box
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_box")
struct struct_adapted_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_bool'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_bool")
struct struct_adapted_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_byte'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_byte")
struct struct_adapted_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i16'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_i16")
struct struct_adapted_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i32'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_i32")
struct struct_adapted_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i64'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_i64")
struct struct_adapted_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_float'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_float")
struct struct_adapted_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_double'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_double")
struct struct_adapted_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_binary'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_binary")
struct struct_adapted_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_string'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_string")
struct struct_adapted_list_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_bool'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_bool")
struct struct_adapted_list_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_byte'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_byte")
struct struct_adapted_list_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i16'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_i16")
struct struct_adapted_list_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i32'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_i32")
struct struct_adapted_list_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i64'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_i64")
struct struct_adapted_list_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_float'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_float")
struct struct_adapted_list_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_double'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_double")
struct struct_adapted_list_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_binary'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_binary")
struct struct_adapted_list_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_string'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_string")
struct struct_adapted_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_string'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_set_string")
struct struct_adapted_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_i64'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_set_i64")
struct struct_adapted_map_string_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_bool'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_bool")
struct struct_adapted_map_string_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_byte'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_byte")
struct struct_adapted_map_string_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i16'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_i16")
struct struct_adapted_map_string_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i32'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_i32")
struct struct_adapted_map_string_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i64'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_i64")
struct struct_adapted_map_string_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_float'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_float")
struct struct_adapted_map_string_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_double'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_double")
struct struct_adapted_map_string_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_binary'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_binary")
struct struct_adapted_map_string_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_string'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_string")
struct struct_adapted_map_i64_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_bool'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_bool")
struct struct_adapted_map_i64_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_byte'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_byte")
struct struct_adapted_map_i64_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i16'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_i16")
struct struct_adapted_map_i64_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i32'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_i32")
struct struct_adapted_map_i64_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i64'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_i64")
struct struct_adapted_map_i64_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_float'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_float")
struct struct_adapted_map_i64_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_double'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_double")
struct struct_adapted_map_i64_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_binary'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_binary")
struct struct_adapted_map_i64_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_string'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_string")
struct struct_adapted_map_string_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_string'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_set_string")
struct struct_adapted_map_string_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_i64'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_set_i64")
struct struct_adapted_map_i64_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_string'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_set_string")
struct struct_adapted_map_i64_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_i64'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_set_i64")
struct struct_field_adapted_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_bool")
struct struct_field_adapted_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_byte")
struct struct_field_adapted_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_i16")
struct struct_field_adapted_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_i32")
struct struct_field_adapted_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_i64")
struct struct_field_adapted_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_float")
struct struct_field_adapted_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_double")
struct struct_field_adapted_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_binary")
struct struct_field_adapted_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_string")
struct struct_field_adapted_list_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_bool")
struct struct_field_adapted_list_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_byte")
struct struct_field_adapted_list_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_i16")
struct struct_field_adapted_list_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_i32")
struct struct_field_adapted_list_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_i64")
struct struct_field_adapted_list_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_float")
struct struct_field_adapted_list_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_double")
struct struct_field_adapted_list_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_binary")
struct struct_field_adapted_list_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_string")
struct struct_field_adapted_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_set_string")
struct struct_field_adapted_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_set_i64")
struct struct_field_adapted_map_string_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_bool")
struct struct_field_adapted_map_string_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_byte")
struct struct_field_adapted_map_string_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_i16")
struct struct_field_adapted_map_string_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_i32")
struct struct_field_adapted_map_string_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_i64")
struct struct_field_adapted_map_string_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_float")
struct struct_field_adapted_map_string_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_double")
struct struct_field_adapted_map_string_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_binary")
struct struct_field_adapted_map_string_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_string")
struct struct_field_adapted_map_i64_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_bool")
struct struct_field_adapted_map_i64_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_byte")
struct struct_field_adapted_map_i64_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_i16")
struct struct_field_adapted_map_i64_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_i32")
struct struct_field_adapted_map_i64_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_i64")
struct struct_field_adapted_map_i64_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_float")
struct struct_field_adapted_map_i64_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_double")
struct struct_field_adapted_map_i64_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_binary")
struct struct_field_adapted_map_i64_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_string")
struct struct_field_adapted_map_string_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_set_string")
struct struct_field_adapted_map_string_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_set_i64")
struct struct_field_adapted_map_i64_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_set_string")
struct struct_field_adapted_map_i64_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_set_i64")
struct struct_list_bool_lazy {
  @cpp.Lazy
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_lazy")
struct struct_list_byte_lazy {
  @cpp.Lazy
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_lazy")
struct struct_list_i16_lazy {
  @cpp.Lazy
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_lazy")
struct struct_list_i32_lazy {
  @cpp.Lazy
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_lazy")
struct struct_list_i64_lazy {
  @cpp.Lazy
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_lazy")
struct struct_list_float_lazy {
  @cpp.Lazy
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_lazy")
struct struct_list_double_lazy {
  @cpp.Lazy
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_lazy")
struct struct_list_binary_lazy {
  @cpp.Lazy
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_lazy")
struct struct_list_string_lazy {
  @cpp.Lazy
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_lazy")
struct struct_set_string_lazy {
  @cpp.Lazy
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_lazy")
struct struct_set_i64_lazy {
  @cpp.Lazy
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_lazy")
struct struct_map_string_bool_lazy {
  @cpp.Lazy
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_lazy")
struct struct_map_string_byte_lazy {
  @cpp.Lazy
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_lazy")
struct struct_map_string_i16_lazy {
  @cpp.Lazy
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_lazy")
struct struct_map_string_i32_lazy {
  @cpp.Lazy
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_lazy")
struct struct_map_string_i64_lazy {
  @cpp.Lazy
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_lazy")
struct struct_map_string_float_lazy {
  @cpp.Lazy
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_lazy")
struct struct_map_string_double_lazy {
  @cpp.Lazy
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_lazy")
struct struct_map_string_binary_lazy {
  @cpp.Lazy
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_lazy")
struct struct_map_string_string_lazy {
  @cpp.Lazy
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_lazy")
struct struct_map_i64_bool_lazy {
  @cpp.Lazy
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_lazy")
struct struct_map_i64_byte_lazy {
  @cpp.Lazy
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_lazy")
struct struct_map_i64_i16_lazy {
  @cpp.Lazy
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_lazy")
struct struct_map_i64_i32_lazy {
  @cpp.Lazy
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_lazy")
struct struct_map_i64_i64_lazy {
  @cpp.Lazy
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_lazy")
struct struct_map_i64_float_lazy {
  @cpp.Lazy
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_lazy")
struct struct_map_i64_double_lazy {
  @cpp.Lazy
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_lazy")
struct struct_map_i64_binary_lazy {
  @cpp.Lazy
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_lazy")
struct struct_map_i64_string_lazy {
  @cpp.Lazy
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_lazy")
struct struct_map_string_set_string_lazy {
  @cpp.Lazy
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_lazy")
struct struct_map_string_set_i64_lazy {
  @cpp.Lazy
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_lazy")
struct struct_map_i64_set_string_lazy {
  @cpp.Lazy
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_lazy")
struct struct_map_i64_set_i64_lazy {
  @cpp.Lazy
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_lazy")
struct struct_string_lazy {
  @cpp.Lazy
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_lazy")
@cpp.UseOpEncode
struct struct_empty_op_encoded {
} (thrift.uri="facebook.com/thrift/test/testset/struct_empty_op_encoded")
@cpp.UseOpEncode
struct struct_list_bool_op_encoded {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_op_encoded")
@cpp.UseOpEncode
struct struct_list_byte_op_encoded {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_op_encoded")
@cpp.UseOpEncode
struct struct_list_i16_op_encoded {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_op_encoded")
@cpp.UseOpEncode
struct struct_list_i32_op_encoded {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_op_encoded")
@cpp.UseOpEncode
struct struct_list_i64_op_encoded {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_op_encoded")
@cpp.UseOpEncode
struct struct_list_float_op_encoded {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_op_encoded")
@cpp.UseOpEncode
struct struct_list_double_op_encoded {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_op_encoded")
@cpp.UseOpEncode
struct struct_list_binary_op_encoded {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_op_encoded")
@cpp.UseOpEncode
struct struct_list_string_op_encoded {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_op_encoded")
@cpp.UseOpEncode
struct struct_set_string_op_encoded {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_set_i64_op_encoded {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_bool_op_encoded {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_byte_op_encoded {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i16_op_encoded {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i32_op_encoded {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i64_op_encoded {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_float_op_encoded {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_double_op_encoded {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_binary_op_encoded {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_string_op_encoded {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_bool_op_encoded {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_byte_op_encoded {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i16_op_encoded {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i32_op_encoded {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i64_op_encoded {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_float_op_encoded {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_double_op_encoded {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_binary_op_encoded {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_string_op_encoded {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_string_op_encoded {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_i64_op_encoded {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_string_op_encoded {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_i64_op_encoded {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_bool_op_encoded {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_op_encoded")
@cpp.UseOpEncode
struct struct_byte_op_encoded {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_op_encoded")
@cpp.UseOpEncode
struct struct_i16_op_encoded {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_op_encoded")
@cpp.UseOpEncode
struct struct_i32_op_encoded {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_op_encoded")
@cpp.UseOpEncode
struct struct_i64_op_encoded {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_op_encoded")
@cpp.UseOpEncode
struct struct_float_op_encoded {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_op_encoded")
@cpp.UseOpEncode
struct struct_double_op_encoded {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_op_encoded")
@cpp.UseOpEncode
struct struct_binary_op_encoded {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_op_encoded")
@cpp.UseOpEncode
struct struct_string_op_encoded {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_op_encoded")
@cpp.UseOpEncode
struct struct_bool_custom_default_op_encoded {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_byte_custom_default_op_encoded {
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_i16_custom_default_op_encoded {
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_i32_custom_default_op_encoded {
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_i64_custom_default_op_encoded {
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_float_custom_default_op_encoded {
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_double_custom_default_op_encoded {
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_binary_custom_default_op_encoded {
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_string_custom_default_op_encoded {
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_bool_alternative_custom_default_op_encoded {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_byte_alternative_custom_default_op_encoded {
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_i16_alternative_custom_default_op_encoded {
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_i32_alternative_custom_default_op_encoded {
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_i64_alternative_custom_default_op_encoded {
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_float_alternative_custom_default_op_encoded {
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_double_alternative_custom_default_op_encoded {
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_binary_alternative_custom_default_op_encoded {
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_string_alternative_custom_default_op_encoded {
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_bool_op_encoded {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_byte_op_encoded {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i16_op_encoded {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i32_op_encoded {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i64_op_encoded {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_float_op_encoded {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_double_op_encoded {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_binary_op_encoded {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_string_op_encoded {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_string_op_encoded {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_i64_op_encoded {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_bool_op_encoded {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_byte_op_encoded {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i16_op_encoded {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i32_op_encoded {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i64_op_encoded {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_float_op_encoded {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_double_op_encoded {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_binary_op_encoded {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_string_op_encoded {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_bool_op_encoded {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_byte_op_encoded {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i16_op_encoded {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i32_op_encoded {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i64_op_encoded {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_float_op_encoded {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_double_op_encoded {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_binary_op_encoded {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_string_op_encoded {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_string_op_encoded {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_i64_op_encoded {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_string_op_encoded {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_i64_op_encoded {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_optional_bool_op_encoded {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_op_encoded")
@cpp.UseOpEncode
struct struct_optional_byte_op_encoded {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i16_op_encoded {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i32_op_encoded {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i64_op_encoded {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_op_encoded")
@cpp.UseOpEncode
struct struct_optional_float_op_encoded {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_op_encoded")
@cpp.UseOpEncode
struct struct_optional_double_op_encoded {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_op_encoded")
@cpp.UseOpEncode
struct struct_optional_binary_op_encoded {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_op_encoded")
@cpp.UseOpEncode
struct struct_optional_string_op_encoded {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_op_encoded")
@cpp.UseOpEncode
struct struct_optional_bool_custom_default_op_encoded {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_byte_custom_default_op_encoded {
  1: optional byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i16_custom_default_op_encoded {
  1: optional i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i32_custom_default_op_encoded {
  1: optional i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i64_custom_default_op_encoded {
  1: optional i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_float_custom_default_op_encoded {
  1: optional float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_double_custom_default_op_encoded {
  1: optional double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_binary_custom_default_op_encoded {
  1: optional binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_string_custom_default_op_encoded {
  1: optional string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_bool_alternative_custom_default_op_encoded {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_byte_alternative_custom_default_op_encoded {
  1: optional byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i16_alternative_custom_default_op_encoded {
  1: optional i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i32_alternative_custom_default_op_encoded {
  1: optional i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_i64_alternative_custom_default_op_encoded {
  1: optional i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_float_alternative_custom_default_op_encoded {
  1: optional float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_double_alternative_custom_default_op_encoded {
  1: optional double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_binary_alternative_custom_default_op_encoded {
  1: optional binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_string_alternative_custom_default_op_encoded {
  1: optional string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_bool_op_encoded {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_byte_op_encoded {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i16_op_encoded {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i32_op_encoded {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i64_op_encoded {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_float_op_encoded {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_double_op_encoded {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_binary_op_encoded {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_string_op_encoded {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_set_string_op_encoded {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_set_i64_op_encoded {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_bool_op_encoded {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_byte_op_encoded {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i16_op_encoded {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i32_op_encoded {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i64_op_encoded {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_float_op_encoded {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_double_op_encoded {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_binary_op_encoded {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_string_op_encoded {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_bool_op_encoded {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_byte_op_encoded {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i16_op_encoded {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i32_op_encoded {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i64_op_encoded {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_float_op_encoded {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_double_op_encoded {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_binary_op_encoded {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_string_op_encoded {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_set_string_op_encoded {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_set_i64_op_encoded {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_set_string_op_encoded {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_set_i64_op_encoded {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_required_bool_op_encoded {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_op_encoded")
@cpp.UseOpEncode
struct struct_required_byte_op_encoded {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_op_encoded")
@cpp.UseOpEncode
struct struct_required_i16_op_encoded {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_op_encoded")
@cpp.UseOpEncode
struct struct_required_i32_op_encoded {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_op_encoded")
@cpp.UseOpEncode
struct struct_required_i64_op_encoded {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_op_encoded")
@cpp.UseOpEncode
struct struct_required_float_op_encoded {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_op_encoded")
@cpp.UseOpEncode
struct struct_required_double_op_encoded {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_op_encoded")
@cpp.UseOpEncode
struct struct_required_binary_op_encoded {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_op_encoded")
@cpp.UseOpEncode
struct struct_required_string_op_encoded {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_op_encoded")
@cpp.UseOpEncode
struct struct_required_bool_custom_default_op_encoded {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_byte_custom_default_op_encoded {
  1: required byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_i16_custom_default_op_encoded {
  1: required i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_i32_custom_default_op_encoded {
  1: required i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_i64_custom_default_op_encoded {
  1: required i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_float_custom_default_op_encoded {
  1: required float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_double_custom_default_op_encoded {
  1: required double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_binary_custom_default_op_encoded {
  1: required binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_string_custom_default_op_encoded {
  1: required string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_bool_alternative_custom_default_op_encoded {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_byte_alternative_custom_default_op_encoded {
  1: required byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_i16_alternative_custom_default_op_encoded {
  1: required i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_i32_alternative_custom_default_op_encoded {
  1: required i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_i64_alternative_custom_default_op_encoded {
  1: required i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_float_alternative_custom_default_op_encoded {
  1: required float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_double_alternative_custom_default_op_encoded {
  1: required double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_binary_alternative_custom_default_op_encoded {
  1: required binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_required_string_alternative_custom_default_op_encoded {
  1: required string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_bool_op_encoded {
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_byte_op_encoded {
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i16_op_encoded {
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i32_op_encoded {
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i64_op_encoded {
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_float_op_encoded {
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_double_op_encoded {
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_binary_op_encoded {
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_string_op_encoded {
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_set_string_op_encoded {
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_set_i64_op_encoded {
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_bool_op_encoded {
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_byte_op_encoded {
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i16_op_encoded {
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i32_op_encoded {
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i64_op_encoded {
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_float_op_encoded {
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_double_op_encoded {
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_binary_op_encoded {
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_string_op_encoded {
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_bool_op_encoded {
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_byte_op_encoded {
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i16_op_encoded {
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i32_op_encoded {
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i64_op_encoded {
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_float_op_encoded {
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_double_op_encoded {
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_binary_op_encoded {
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_string_op_encoded {
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_set_string_op_encoded {
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_set_i64_op_encoded {
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_set_string_op_encoded {
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_set_i64_op_encoded {
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
struct struct_terse_bool_op_encoded {
  @thrift.TerseWrite
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_op_encoded")
@cpp.UseOpEncode
struct struct_terse_byte_op_encoded {
  @thrift.TerseWrite
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i16_op_encoded {
  @thrift.TerseWrite
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i32_op_encoded {
  @thrift.TerseWrite
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i64_op_encoded {
  @thrift.TerseWrite
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_op_encoded")
@cpp.UseOpEncode
struct struct_terse_float_op_encoded {
  @thrift.TerseWrite
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_op_encoded")
@cpp.UseOpEncode
struct struct_terse_double_op_encoded {
  @thrift.TerseWrite
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_op_encoded")
@cpp.UseOpEncode
struct struct_terse_binary_op_encoded {
  @thrift.TerseWrite
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_op_encoded")
@cpp.UseOpEncode
struct struct_terse_string_op_encoded {
  @thrift.TerseWrite
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_op_encoded")
@cpp.UseOpEncode
struct struct_terse_bool_custom_default_op_encoded {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_byte_custom_default_op_encoded {
  @thrift.TerseWrite
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i16_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i32_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i64_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_float_custom_default_op_encoded {
  @thrift.TerseWrite
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_double_custom_default_op_encoded {
  @thrift.TerseWrite
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_binary_custom_default_op_encoded {
  @thrift.TerseWrite
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_string_custom_default_op_encoded {
  @thrift.TerseWrite
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_bool_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_byte_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i16_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i32_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_i64_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_float_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_double_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_binary_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_terse_string_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_bool_box_op_encoded {
  @thrift.Box
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_byte_box_op_encoded {
  @thrift.Box
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i16_box_op_encoded {
  @thrift.Box
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i32_box_op_encoded {
  @thrift.Box
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_i64_box_op_encoded {
  @thrift.Box
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_float_box_op_encoded {
  @thrift.Box
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_double_box_op_encoded {
  @thrift.Box
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_binary_box_op_encoded {
  @thrift.Box
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_list_string_box_op_encoded {
  @thrift.Box
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_string_box_op_encoded {
  @thrift.Box
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_set_i64_box_op_encoded {
  @thrift.Box
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_bool_box_op_encoded {
  @thrift.Box
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_byte_box_op_encoded {
  @thrift.Box
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i16_box_op_encoded {
  @thrift.Box
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i32_box_op_encoded {
  @thrift.Box
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_i64_box_op_encoded {
  @thrift.Box
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_float_box_op_encoded {
  @thrift.Box
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_double_box_op_encoded {
  @thrift.Box
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_binary_box_op_encoded {
  @thrift.Box
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_string_box_op_encoded {
  @thrift.Box
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_bool_box_op_encoded {
  @thrift.Box
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_byte_box_op_encoded {
  @thrift.Box
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i16_box_op_encoded {
  @thrift.Box
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i32_box_op_encoded {
  @thrift.Box
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_i64_box_op_encoded {
  @thrift.Box
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_float_box_op_encoded {
  @thrift.Box
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_double_box_op_encoded {
  @thrift.Box
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_binary_box_op_encoded {
  @thrift.Box
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_string_box_op_encoded {
  @thrift.Box
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_string_box_op_encoded {
  @thrift.Box
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_string_set_i64_box_op_encoded {
  @thrift.Box
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_string_box_op_encoded {
  @thrift.Box
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_box_op_encoded")
@cpp.UseOpEncode
struct struct_optional_map_i64_set_i64_box_op_encoded {
  @thrift.Box
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_box_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_bool'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_bool_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_byte'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_byte_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i16'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_i16_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i32'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_i32_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i64'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_i64_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_float'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_float_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_double'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_double_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_binary'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_binary_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_string'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_bool'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_bool_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_byte'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_byte_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i16'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_i16_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i32'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_i32_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i64'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_i64_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_float'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_float_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_double'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_double_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_binary'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_binary_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_list_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_string'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_string'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_i64'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_bool'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_bool_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_byte'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_byte_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i16'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_i16_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i32'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_i32_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i64'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_i64_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_float'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_float_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_double'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_double_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_binary'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_binary_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_string'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_bool'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_bool_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_byte'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_byte_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i16'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_i16_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i32'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_i32_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i64'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_i64_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_float'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_float_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_double'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_double_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_binary'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_binary_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_string'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_string'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_string_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_i64'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_string'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_adapted_map_i64_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_i64'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_bool_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_byte_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_i16_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_i32_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_float_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_double_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_binary_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_bool_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_byte_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_i16_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_i32_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_float_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_double_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_binary_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_list_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_bool_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_byte_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_i16_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_i32_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_float_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_double_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_binary_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_bool_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_byte_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_i16_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_i32_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_float_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_double_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_binary_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_string_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
struct struct_field_adapted_map_i64_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
struct struct_list_bool_lazy_op_encoded {
  @cpp.Lazy
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_byte_lazy_op_encoded {
  @cpp.Lazy
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_i16_lazy_op_encoded {
  @cpp.Lazy
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_i32_lazy_op_encoded {
  @cpp.Lazy
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_i64_lazy_op_encoded {
  @cpp.Lazy
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_float_lazy_op_encoded {
  @cpp.Lazy
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_double_lazy_op_encoded {
  @cpp.Lazy
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_binary_lazy_op_encoded {
  @cpp.Lazy
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_list_string_lazy_op_encoded {
  @cpp.Lazy
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_set_string_lazy_op_encoded {
  @cpp.Lazy
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_set_i64_lazy_op_encoded {
  @cpp.Lazy
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_bool_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_byte_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i16_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i32_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_float_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_double_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_binary_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_bool_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_byte_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i16_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i32_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_float_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_double_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_binary_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_string_set_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_map_i64_set_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_lazy_op_encoded")
@cpp.UseOpEncode
struct struct_string_lazy_op_encoded {
  @cpp.Lazy
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_lazy_op_encoded")
exception exception_empty {
} (thrift.uri="facebook.com/thrift/test/testset/exception_empty")
exception exception_list_bool {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool")
exception exception_list_byte {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte")
exception exception_list_i16 {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16")
exception exception_list_i32 {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32")
exception exception_list_i64 {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64")
exception exception_list_float {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float")
exception exception_list_double {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double")
exception exception_list_binary {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary")
exception exception_list_string {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string")
exception exception_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string")
exception exception_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64")
exception exception_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool")
exception exception_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte")
exception exception_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16")
exception exception_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32")
exception exception_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64")
exception exception_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float")
exception exception_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double")
exception exception_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary")
exception exception_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string")
exception exception_map_i64_bool {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool")
exception exception_map_i64_byte {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte")
exception exception_map_i64_i16 {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16")
exception exception_map_i64_i32 {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32")
exception exception_map_i64_i64 {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64")
exception exception_map_i64_float {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float")
exception exception_map_i64_double {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double")
exception exception_map_i64_binary {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary")
exception exception_map_i64_string {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string")
exception exception_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string")
exception exception_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64")
exception exception_map_i64_set_string {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string")
exception exception_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64")
exception exception_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_cpp_ref")
exception exception_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_cpp_ref")
exception exception_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_cpp_ref")
exception exception_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_cpp_ref")
exception exception_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_cpp_ref")
exception exception_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_cpp_ref")
exception exception_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_cpp_ref")
exception exception_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_cpp_ref")
exception exception_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_cpp_ref")
exception exception_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_cpp_ref")
exception exception_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_cpp_ref")
exception exception_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_cpp_ref")
exception exception_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_cpp_ref")
exception exception_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_cpp_ref")
exception exception_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_cpp_ref")
exception exception_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_cpp_ref")
exception exception_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_cpp_ref")
exception exception_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_cpp_ref")
exception exception_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_cpp_ref")
exception exception_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_cpp_ref")
exception exception_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_cpp_ref")
exception exception_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_cpp_ref")
exception exception_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_cpp_ref")
exception exception_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_cpp_ref")
exception exception_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_cpp_ref")
exception exception_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_cpp_ref")
exception exception_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_cpp_ref")
exception exception_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_cpp_ref")
exception exception_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_cpp_ref")
exception exception_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_cpp_ref")
exception exception_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_cpp_ref")
exception exception_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_cpp_ref")
exception exception_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_cpp_ref")
exception exception_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_shared_cpp_ref")
exception exception_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_shared_cpp_ref")
exception exception_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_shared_cpp_ref")
exception exception_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_shared_cpp_ref")
exception exception_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_shared_cpp_ref")
exception exception_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_shared_cpp_ref")
exception exception_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_shared_cpp_ref")
exception exception_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_shared_cpp_ref")
exception exception_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_shared_cpp_ref")
exception exception_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_shared_cpp_ref")
exception exception_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_shared_cpp_ref")
exception exception_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_shared_cpp_ref")
exception exception_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_shared_cpp_ref")
exception exception_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_shared_cpp_ref")
exception exception_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_shared_cpp_ref")
exception exception_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_shared_cpp_ref")
exception exception_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_shared_cpp_ref")
exception exception_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_shared_cpp_ref")
exception exception_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_shared_cpp_ref")
exception exception_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_shared_cpp_ref")
exception exception_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_shared_cpp_ref")
exception exception_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_shared_cpp_ref")
exception exception_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_shared_cpp_ref")
exception exception_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_shared_cpp_ref")
exception exception_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_shared_cpp_ref")
exception exception_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_shared_cpp_ref")
exception exception_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_shared_cpp_ref")
exception exception_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_shared_cpp_ref")
exception exception_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_shared_cpp_ref")
exception exception_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_shared_cpp_ref")
exception exception_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_shared_cpp_ref")
exception exception_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_shared_cpp_ref")
exception exception_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_shared_cpp_ref")
exception exception_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool")
exception exception_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte")
exception exception_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16")
exception exception_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32")
exception exception_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64")
exception exception_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float")
exception exception_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double")
exception exception_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary")
exception exception_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string")
exception exception_bool_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_custom_default")
exception exception_byte_custom_default {
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_custom_default")
exception exception_i16_custom_default {
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_custom_default")
exception exception_i32_custom_default {
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_custom_default")
exception exception_i64_custom_default {
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_custom_default")
exception exception_float_custom_default {
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_custom_default")
exception exception_double_custom_default {
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_custom_default")
exception exception_binary_custom_default {
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_custom_default")
exception exception_string_custom_default {
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_custom_default")
exception exception_bool_alternative_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_alternative_custom_default")
exception exception_byte_alternative_custom_default {
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_alternative_custom_default")
exception exception_i16_alternative_custom_default {
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_alternative_custom_default")
exception exception_i32_alternative_custom_default {
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_alternative_custom_default")
exception exception_i64_alternative_custom_default {
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_alternative_custom_default")
exception exception_float_alternative_custom_default {
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_alternative_custom_default")
exception exception_double_alternative_custom_default {
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_alternative_custom_default")
exception exception_binary_alternative_custom_default {
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_alternative_custom_default")
exception exception_string_alternative_custom_default {
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_alternative_custom_default")
exception exception_optional_list_bool {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool")
exception exception_optional_list_byte {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte")
exception exception_optional_list_i16 {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16")
exception exception_optional_list_i32 {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32")
exception exception_optional_list_i64 {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64")
exception exception_optional_list_float {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float")
exception exception_optional_list_double {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double")
exception exception_optional_list_binary {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary")
exception exception_optional_list_string {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string")
exception exception_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string")
exception exception_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64")
exception exception_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool")
exception exception_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte")
exception exception_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16")
exception exception_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32")
exception exception_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64")
exception exception_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float")
exception exception_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double")
exception exception_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary")
exception exception_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string")
exception exception_optional_map_i64_bool {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool")
exception exception_optional_map_i64_byte {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte")
exception exception_optional_map_i64_i16 {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16")
exception exception_optional_map_i64_i32 {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32")
exception exception_optional_map_i64_i64 {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64")
exception exception_optional_map_i64_float {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float")
exception exception_optional_map_i64_double {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double")
exception exception_optional_map_i64_binary {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary")
exception exception_optional_map_i64_string {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string")
exception exception_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string")
exception exception_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64")
exception exception_optional_map_i64_set_string {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string")
exception exception_optional_map_i64_set_i64 {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64")
exception exception_optional_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_cpp_ref")
exception exception_optional_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_cpp_ref")
exception exception_optional_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_cpp_ref")
exception exception_optional_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_cpp_ref")
exception exception_optional_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_cpp_ref")
exception exception_optional_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_cpp_ref")
exception exception_optional_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_cpp_ref")
exception exception_optional_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_cpp_ref")
exception exception_optional_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_cpp_ref")
exception exception_optional_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_cpp_ref")
exception exception_optional_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_cpp_ref")
exception exception_optional_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_cpp_ref")
exception exception_optional_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_cpp_ref")
exception exception_optional_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_cpp_ref")
exception exception_optional_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_cpp_ref")
exception exception_optional_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_cpp_ref")
exception exception_optional_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_cpp_ref")
exception exception_optional_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_cpp_ref")
exception exception_optional_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_cpp_ref")
exception exception_optional_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_cpp_ref")
exception exception_optional_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_cpp_ref")
exception exception_optional_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_cpp_ref")
exception exception_optional_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_cpp_ref")
exception exception_optional_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_cpp_ref")
exception exception_optional_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_cpp_ref")
exception exception_optional_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_cpp_ref")
exception exception_optional_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_cpp_ref")
exception exception_optional_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_cpp_ref")
exception exception_optional_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_cpp_ref")
exception exception_optional_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_cpp_ref")
exception exception_optional_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_cpp_ref")
exception exception_optional_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_cpp_ref")
exception exception_optional_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_cpp_ref")
exception exception_optional_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_shared_cpp_ref")
exception exception_optional_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_shared_cpp_ref")
exception exception_optional_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_shared_cpp_ref")
exception exception_optional_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_shared_cpp_ref")
exception exception_optional_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_shared_cpp_ref")
exception exception_optional_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_shared_cpp_ref")
exception exception_optional_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_shared_cpp_ref")
exception exception_optional_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_shared_cpp_ref")
exception exception_optional_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_shared_cpp_ref")
exception exception_optional_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_shared_cpp_ref")
exception exception_optional_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_shared_cpp_ref")
exception exception_optional_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_shared_cpp_ref")
exception exception_optional_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_shared_cpp_ref")
exception exception_optional_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_shared_cpp_ref")
exception exception_optional_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_shared_cpp_ref")
exception exception_optional_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_shared_cpp_ref")
exception exception_optional_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_shared_cpp_ref")
exception exception_optional_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_shared_cpp_ref")
exception exception_optional_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_shared_cpp_ref")
exception exception_optional_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_shared_cpp_ref")
exception exception_optional_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_shared_cpp_ref")
exception exception_optional_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_shared_cpp_ref")
exception exception_optional_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_shared_cpp_ref")
exception exception_optional_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_shared_cpp_ref")
exception exception_optional_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_shared_cpp_ref")
exception exception_optional_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_shared_cpp_ref")
exception exception_optional_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_shared_cpp_ref")
exception exception_optional_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_shared_cpp_ref")
exception exception_optional_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_shared_cpp_ref")
exception exception_optional_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_shared_cpp_ref")
exception exception_optional_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_shared_cpp_ref")
exception exception_optional_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_shared_cpp_ref")
exception exception_optional_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_shared_cpp_ref")
exception exception_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool")
exception exception_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte")
exception exception_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16")
exception exception_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32")
exception exception_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64")
exception exception_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float")
exception exception_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double")
exception exception_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary")
exception exception_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string")
exception exception_optional_bool_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_custom_default")
exception exception_optional_byte_custom_default {
  1: optional byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_custom_default")
exception exception_optional_i16_custom_default {
  1: optional i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_custom_default")
exception exception_optional_i32_custom_default {
  1: optional i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_custom_default")
exception exception_optional_i64_custom_default {
  1: optional i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_custom_default")
exception exception_optional_float_custom_default {
  1: optional float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_custom_default")
exception exception_optional_double_custom_default {
  1: optional double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_custom_default")
exception exception_optional_binary_custom_default {
  1: optional binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_custom_default")
exception exception_optional_string_custom_default {
  1: optional string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_custom_default")
exception exception_optional_bool_alternative_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_alternative_custom_default")
exception exception_optional_byte_alternative_custom_default {
  1: optional byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_alternative_custom_default")
exception exception_optional_i16_alternative_custom_default {
  1: optional i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_alternative_custom_default")
exception exception_optional_i32_alternative_custom_default {
  1: optional i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_alternative_custom_default")
exception exception_optional_i64_alternative_custom_default {
  1: optional i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_alternative_custom_default")
exception exception_optional_float_alternative_custom_default {
  1: optional float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_alternative_custom_default")
exception exception_optional_double_alternative_custom_default {
  1: optional double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_alternative_custom_default")
exception exception_optional_binary_alternative_custom_default {
  1: optional binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_alternative_custom_default")
exception exception_optional_string_alternative_custom_default {
  1: optional string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_alternative_custom_default")
exception exception_required_list_bool {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool")
exception exception_required_list_byte {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte")
exception exception_required_list_i16 {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16")
exception exception_required_list_i32 {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32")
exception exception_required_list_i64 {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64")
exception exception_required_list_float {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float")
exception exception_required_list_double {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double")
exception exception_required_list_binary {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary")
exception exception_required_list_string {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string")
exception exception_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string")
exception exception_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64")
exception exception_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool")
exception exception_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte")
exception exception_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16")
exception exception_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32")
exception exception_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64")
exception exception_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float")
exception exception_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double")
exception exception_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary")
exception exception_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string")
exception exception_required_map_i64_bool {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool")
exception exception_required_map_i64_byte {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte")
exception exception_required_map_i64_i16 {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16")
exception exception_required_map_i64_i32 {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32")
exception exception_required_map_i64_i64 {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64")
exception exception_required_map_i64_float {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float")
exception exception_required_map_i64_double {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double")
exception exception_required_map_i64_binary {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary")
exception exception_required_map_i64_string {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string")
exception exception_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string")
exception exception_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64")
exception exception_required_map_i64_set_string {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string")
exception exception_required_map_i64_set_i64 {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64")
exception exception_required_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_cpp_ref")
exception exception_required_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_cpp_ref")
exception exception_required_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_cpp_ref")
exception exception_required_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_cpp_ref")
exception exception_required_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_cpp_ref")
exception exception_required_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_cpp_ref")
exception exception_required_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_cpp_ref")
exception exception_required_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_cpp_ref")
exception exception_required_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_cpp_ref")
exception exception_required_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_cpp_ref")
exception exception_required_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_cpp_ref")
exception exception_required_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_cpp_ref")
exception exception_required_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_cpp_ref")
exception exception_required_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_cpp_ref")
exception exception_required_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_cpp_ref")
exception exception_required_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_cpp_ref")
exception exception_required_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_cpp_ref")
exception exception_required_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_cpp_ref")
exception exception_required_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_cpp_ref")
exception exception_required_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_cpp_ref")
exception exception_required_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_cpp_ref")
exception exception_required_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_cpp_ref")
exception exception_required_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_cpp_ref")
exception exception_required_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_cpp_ref")
exception exception_required_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_cpp_ref")
exception exception_required_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_cpp_ref")
exception exception_required_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_cpp_ref")
exception exception_required_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_cpp_ref")
exception exception_required_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_cpp_ref")
exception exception_required_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_cpp_ref")
exception exception_required_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_cpp_ref")
exception exception_required_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_cpp_ref")
exception exception_required_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_cpp_ref")
exception exception_required_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_shared_cpp_ref")
exception exception_required_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_shared_cpp_ref")
exception exception_required_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_shared_cpp_ref")
exception exception_required_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_shared_cpp_ref")
exception exception_required_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_shared_cpp_ref")
exception exception_required_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_shared_cpp_ref")
exception exception_required_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_shared_cpp_ref")
exception exception_required_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_shared_cpp_ref")
exception exception_required_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_shared_cpp_ref")
exception exception_required_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_shared_cpp_ref")
exception exception_required_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_shared_cpp_ref")
exception exception_required_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_shared_cpp_ref")
exception exception_required_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_shared_cpp_ref")
exception exception_required_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_shared_cpp_ref")
exception exception_required_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_shared_cpp_ref")
exception exception_required_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_shared_cpp_ref")
exception exception_required_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_shared_cpp_ref")
exception exception_required_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_shared_cpp_ref")
exception exception_required_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_shared_cpp_ref")
exception exception_required_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_shared_cpp_ref")
exception exception_required_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_shared_cpp_ref")
exception exception_required_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_shared_cpp_ref")
exception exception_required_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_shared_cpp_ref")
exception exception_required_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_shared_cpp_ref")
exception exception_required_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_shared_cpp_ref")
exception exception_required_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_shared_cpp_ref")
exception exception_required_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_shared_cpp_ref")
exception exception_required_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_shared_cpp_ref")
exception exception_required_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_shared_cpp_ref")
exception exception_required_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_shared_cpp_ref")
exception exception_required_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_shared_cpp_ref")
exception exception_required_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_shared_cpp_ref")
exception exception_required_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_shared_cpp_ref")
exception exception_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool")
exception exception_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte")
exception exception_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16")
exception exception_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32")
exception exception_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64")
exception exception_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float")
exception exception_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double")
exception exception_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary")
exception exception_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string")
exception exception_required_bool_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_custom_default")
exception exception_required_byte_custom_default {
  1: required byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_custom_default")
exception exception_required_i16_custom_default {
  1: required i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_custom_default")
exception exception_required_i32_custom_default {
  1: required i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_custom_default")
exception exception_required_i64_custom_default {
  1: required i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_custom_default")
exception exception_required_float_custom_default {
  1: required float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_custom_default")
exception exception_required_double_custom_default {
  1: required double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_custom_default")
exception exception_required_binary_custom_default {
  1: required binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_custom_default")
exception exception_required_string_custom_default {
  1: required string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_custom_default")
exception exception_required_bool_alternative_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_alternative_custom_default")
exception exception_required_byte_alternative_custom_default {
  1: required byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_alternative_custom_default")
exception exception_required_i16_alternative_custom_default {
  1: required i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_alternative_custom_default")
exception exception_required_i32_alternative_custom_default {
  1: required i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_alternative_custom_default")
exception exception_required_i64_alternative_custom_default {
  1: required i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_alternative_custom_default")
exception exception_required_float_alternative_custom_default {
  1: required float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_alternative_custom_default")
exception exception_required_double_alternative_custom_default {
  1: required double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_alternative_custom_default")
exception exception_required_binary_alternative_custom_default {
  1: required binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_alternative_custom_default")
exception exception_required_string_alternative_custom_default {
  1: required string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_alternative_custom_default")
exception exception_terse_list_bool {
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool")
exception exception_terse_list_byte {
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte")
exception exception_terse_list_i16 {
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16")
exception exception_terse_list_i32 {
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32")
exception exception_terse_list_i64 {
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64")
exception exception_terse_list_float {
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float")
exception exception_terse_list_double {
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double")
exception exception_terse_list_binary {
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary")
exception exception_terse_list_string {
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string")
exception exception_terse_set_string {
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string")
exception exception_terse_set_i64 {
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64")
exception exception_terse_map_string_bool {
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool")
exception exception_terse_map_string_byte {
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte")
exception exception_terse_map_string_i16 {
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16")
exception exception_terse_map_string_i32 {
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32")
exception exception_terse_map_string_i64 {
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64")
exception exception_terse_map_string_float {
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float")
exception exception_terse_map_string_double {
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double")
exception exception_terse_map_string_binary {
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary")
exception exception_terse_map_string_string {
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string")
exception exception_terse_map_i64_bool {
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool")
exception exception_terse_map_i64_byte {
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte")
exception exception_terse_map_i64_i16 {
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16")
exception exception_terse_map_i64_i32 {
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32")
exception exception_terse_map_i64_i64 {
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64")
exception exception_terse_map_i64_float {
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float")
exception exception_terse_map_i64_double {
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double")
exception exception_terse_map_i64_binary {
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary")
exception exception_terse_map_i64_string {
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string")
exception exception_terse_map_string_set_string {
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string")
exception exception_terse_map_string_set_i64 {
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64")
exception exception_terse_map_i64_set_string {
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string")
exception exception_terse_map_i64_set_i64 {
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64")
exception exception_terse_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_cpp_ref")
exception exception_terse_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_cpp_ref")
exception exception_terse_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_cpp_ref")
exception exception_terse_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_cpp_ref")
exception exception_terse_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_cpp_ref")
exception exception_terse_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_cpp_ref")
exception exception_terse_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_cpp_ref")
exception exception_terse_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_cpp_ref")
exception exception_terse_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_cpp_ref")
exception exception_terse_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_cpp_ref")
exception exception_terse_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_cpp_ref")
exception exception_terse_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_cpp_ref")
exception exception_terse_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_cpp_ref")
exception exception_terse_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_cpp_ref")
exception exception_terse_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_cpp_ref")
exception exception_terse_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_cpp_ref")
exception exception_terse_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_cpp_ref")
exception exception_terse_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_cpp_ref")
exception exception_terse_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_cpp_ref")
exception exception_terse_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_cpp_ref")
exception exception_terse_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_cpp_ref")
exception exception_terse_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_cpp_ref")
exception exception_terse_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_cpp_ref")
exception exception_terse_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_cpp_ref")
exception exception_terse_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_cpp_ref")
exception exception_terse_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_cpp_ref")
exception exception_terse_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_cpp_ref")
exception exception_terse_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_cpp_ref")
exception exception_terse_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_cpp_ref")
exception exception_terse_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_cpp_ref")
exception exception_terse_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_cpp_ref")
exception exception_terse_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_cpp_ref")
exception exception_terse_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_cpp_ref")
exception exception_terse_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_shared_cpp_ref")
exception exception_terse_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_shared_cpp_ref")
exception exception_terse_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_shared_cpp_ref")
exception exception_terse_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_shared_cpp_ref")
exception exception_terse_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_shared_cpp_ref")
exception exception_terse_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_shared_cpp_ref")
exception exception_terse_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_shared_cpp_ref")
exception exception_terse_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_shared_cpp_ref")
exception exception_terse_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_shared_cpp_ref")
exception exception_terse_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_shared_cpp_ref")
exception exception_terse_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_shared_cpp_ref")
exception exception_terse_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_shared_cpp_ref")
exception exception_terse_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_shared_cpp_ref")
exception exception_terse_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_shared_cpp_ref")
exception exception_terse_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_shared_cpp_ref")
exception exception_terse_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_shared_cpp_ref")
exception exception_terse_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_shared_cpp_ref")
exception exception_terse_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_shared_cpp_ref")
exception exception_terse_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_shared_cpp_ref")
exception exception_terse_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_shared_cpp_ref")
exception exception_terse_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_shared_cpp_ref")
exception exception_terse_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_shared_cpp_ref")
exception exception_terse_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_shared_cpp_ref")
exception exception_terse_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_shared_cpp_ref")
exception exception_terse_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_shared_cpp_ref")
exception exception_terse_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_shared_cpp_ref")
exception exception_terse_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_shared_cpp_ref")
exception exception_terse_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_shared_cpp_ref")
exception exception_terse_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_shared_cpp_ref")
exception exception_terse_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_shared_cpp_ref")
exception exception_terse_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_shared_cpp_ref")
exception exception_terse_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_shared_cpp_ref")
exception exception_terse_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_shared_cpp_ref")
exception exception_terse_bool {
  @thrift.TerseWrite
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool")
exception exception_terse_byte {
  @thrift.TerseWrite
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte")
exception exception_terse_i16 {
  @thrift.TerseWrite
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16")
exception exception_terse_i32 {
  @thrift.TerseWrite
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32")
exception exception_terse_i64 {
  @thrift.TerseWrite
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64")
exception exception_terse_float {
  @thrift.TerseWrite
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float")
exception exception_terse_double {
  @thrift.TerseWrite
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double")
exception exception_terse_binary {
  @thrift.TerseWrite
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary")
exception exception_terse_string {
  @thrift.TerseWrite
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string")
exception exception_terse_bool_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_custom_default")
exception exception_terse_byte_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_custom_default")
exception exception_terse_i16_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_custom_default")
exception exception_terse_i32_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_custom_default")
exception exception_terse_i64_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_custom_default")
exception exception_terse_float_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_custom_default")
exception exception_terse_double_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_custom_default")
exception exception_terse_binary_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_custom_default")
exception exception_terse_string_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_custom_default")
exception exception_terse_bool_alternative_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_alternative_custom_default")
exception exception_terse_byte_alternative_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_alternative_custom_default")
exception exception_terse_i16_alternative_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_alternative_custom_default")
exception exception_terse_i32_alternative_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_alternative_custom_default")
exception exception_terse_i64_alternative_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_alternative_custom_default")
exception exception_terse_float_alternative_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_alternative_custom_default")
exception exception_terse_double_alternative_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_alternative_custom_default")
exception exception_terse_binary_alternative_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_alternative_custom_default")
exception exception_terse_string_alternative_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_alternative_custom_default")
exception exception_optional_list_bool_box {
  @thrift.Box
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_box")
exception exception_optional_list_byte_box {
  @thrift.Box
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_box")
exception exception_optional_list_i16_box {
  @thrift.Box
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_box")
exception exception_optional_list_i32_box {
  @thrift.Box
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_box")
exception exception_optional_list_i64_box {
  @thrift.Box
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_box")
exception exception_optional_list_float_box {
  @thrift.Box
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_box")
exception exception_optional_list_double_box {
  @thrift.Box
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_box")
exception exception_optional_list_binary_box {
  @thrift.Box
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_box")
exception exception_optional_list_string_box {
  @thrift.Box
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_box")
exception exception_optional_set_string_box {
  @thrift.Box
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_box")
exception exception_optional_set_i64_box {
  @thrift.Box
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_box")
exception exception_optional_map_string_bool_box {
  @thrift.Box
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_box")
exception exception_optional_map_string_byte_box {
  @thrift.Box
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_box")
exception exception_optional_map_string_i16_box {
  @thrift.Box
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_box")
exception exception_optional_map_string_i32_box {
  @thrift.Box
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_box")
exception exception_optional_map_string_i64_box {
  @thrift.Box
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_box")
exception exception_optional_map_string_float_box {
  @thrift.Box
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_box")
exception exception_optional_map_string_double_box {
  @thrift.Box
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_box")
exception exception_optional_map_string_binary_box {
  @thrift.Box
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_box")
exception exception_optional_map_string_string_box {
  @thrift.Box
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_box")
exception exception_optional_map_i64_bool_box {
  @thrift.Box
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_box")
exception exception_optional_map_i64_byte_box {
  @thrift.Box
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_box")
exception exception_optional_map_i64_i16_box {
  @thrift.Box
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_box")
exception exception_optional_map_i64_i32_box {
  @thrift.Box
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_box")
exception exception_optional_map_i64_i64_box {
  @thrift.Box
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_box")
exception exception_optional_map_i64_float_box {
  @thrift.Box
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_box")
exception exception_optional_map_i64_double_box {
  @thrift.Box
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_box")
exception exception_optional_map_i64_binary_box {
  @thrift.Box
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_box")
exception exception_optional_map_i64_string_box {
  @thrift.Box
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_box")
exception exception_optional_map_string_set_string_box {
  @thrift.Box
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_box")
exception exception_optional_map_string_set_i64_box {
  @thrift.Box
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_box")
exception exception_optional_map_i64_set_string_box {
  @thrift.Box
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_box")
exception exception_optional_map_i64_set_i64_box {
  @thrift.Box
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_box")
exception exception_adapted_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_bool'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_bool")
exception exception_adapted_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_byte'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_byte")
exception exception_adapted_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i16'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_i16")
exception exception_adapted_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i32'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_i32")
exception exception_adapted_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i64'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_i64")
exception exception_adapted_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_float'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_float")
exception exception_adapted_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_double'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_double")
exception exception_adapted_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_binary'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_binary")
exception exception_adapted_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_string'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_string")
exception exception_adapted_list_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_bool'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_bool")
exception exception_adapted_list_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_byte'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_byte")
exception exception_adapted_list_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i16'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_i16")
exception exception_adapted_list_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i32'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_i32")
exception exception_adapted_list_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i64'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_i64")
exception exception_adapted_list_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_float'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_float")
exception exception_adapted_list_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_double'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_double")
exception exception_adapted_list_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_binary'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_binary")
exception exception_adapted_list_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_string'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_string")
exception exception_adapted_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_string'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_set_string")
exception exception_adapted_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_i64'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_set_i64")
exception exception_adapted_map_string_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_bool'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_bool")
exception exception_adapted_map_string_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_byte'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_byte")
exception exception_adapted_map_string_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i16'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_i16")
exception exception_adapted_map_string_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i32'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_i32")
exception exception_adapted_map_string_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i64'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_i64")
exception exception_adapted_map_string_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_float'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_float")
exception exception_adapted_map_string_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_double'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_double")
exception exception_adapted_map_string_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_binary'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_binary")
exception exception_adapted_map_string_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_string'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_string")
exception exception_adapted_map_i64_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_bool'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_bool")
exception exception_adapted_map_i64_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_byte'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_byte")
exception exception_adapted_map_i64_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i16'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_i16")
exception exception_adapted_map_i64_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i32'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_i32")
exception exception_adapted_map_i64_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i64'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_i64")
exception exception_adapted_map_i64_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_float'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_float")
exception exception_adapted_map_i64_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_double'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_double")
exception exception_adapted_map_i64_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_binary'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_binary")
exception exception_adapted_map_i64_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_string'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_string")
exception exception_adapted_map_string_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_string'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_set_string")
exception exception_adapted_map_string_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_i64'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_set_i64")
exception exception_adapted_map_i64_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_string'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_set_string")
exception exception_adapted_map_i64_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_i64'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_set_i64")
exception exception_field_adapted_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_bool")
exception exception_field_adapted_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_byte")
exception exception_field_adapted_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_i16")
exception exception_field_adapted_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_i32")
exception exception_field_adapted_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_i64")
exception exception_field_adapted_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_float")
exception exception_field_adapted_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_double")
exception exception_field_adapted_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_binary")
exception exception_field_adapted_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_string")
exception exception_field_adapted_list_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_bool")
exception exception_field_adapted_list_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_byte")
exception exception_field_adapted_list_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_i16")
exception exception_field_adapted_list_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_i32")
exception exception_field_adapted_list_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_i64")
exception exception_field_adapted_list_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_float")
exception exception_field_adapted_list_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_double")
exception exception_field_adapted_list_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_binary")
exception exception_field_adapted_list_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_string")
exception exception_field_adapted_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_set_string")
exception exception_field_adapted_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_set_i64")
exception exception_field_adapted_map_string_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_bool")
exception exception_field_adapted_map_string_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_byte")
exception exception_field_adapted_map_string_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_i16")
exception exception_field_adapted_map_string_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_i32")
exception exception_field_adapted_map_string_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_i64")
exception exception_field_adapted_map_string_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_float")
exception exception_field_adapted_map_string_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_double")
exception exception_field_adapted_map_string_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_binary")
exception exception_field_adapted_map_string_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_string")
exception exception_field_adapted_map_i64_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_bool")
exception exception_field_adapted_map_i64_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_byte")
exception exception_field_adapted_map_i64_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_i16")
exception exception_field_adapted_map_i64_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_i32")
exception exception_field_adapted_map_i64_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_i64")
exception exception_field_adapted_map_i64_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_float")
exception exception_field_adapted_map_i64_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_double")
exception exception_field_adapted_map_i64_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_binary")
exception exception_field_adapted_map_i64_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_string")
exception exception_field_adapted_map_string_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_set_string")
exception exception_field_adapted_map_string_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_set_i64")
exception exception_field_adapted_map_i64_set_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_set_string")
exception exception_field_adapted_map_i64_set_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_set_i64")
exception exception_list_bool_lazy {
  @cpp.Lazy
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_lazy")
exception exception_list_byte_lazy {
  @cpp.Lazy
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_lazy")
exception exception_list_i16_lazy {
  @cpp.Lazy
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_lazy")
exception exception_list_i32_lazy {
  @cpp.Lazy
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_lazy")
exception exception_list_i64_lazy {
  @cpp.Lazy
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_lazy")
exception exception_list_float_lazy {
  @cpp.Lazy
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_lazy")
exception exception_list_double_lazy {
  @cpp.Lazy
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_lazy")
exception exception_list_binary_lazy {
  @cpp.Lazy
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_lazy")
exception exception_list_string_lazy {
  @cpp.Lazy
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_lazy")
exception exception_set_string_lazy {
  @cpp.Lazy
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_lazy")
exception exception_set_i64_lazy {
  @cpp.Lazy
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_lazy")
exception exception_map_string_bool_lazy {
  @cpp.Lazy
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_lazy")
exception exception_map_string_byte_lazy {
  @cpp.Lazy
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_lazy")
exception exception_map_string_i16_lazy {
  @cpp.Lazy
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_lazy")
exception exception_map_string_i32_lazy {
  @cpp.Lazy
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_lazy")
exception exception_map_string_i64_lazy {
  @cpp.Lazy
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_lazy")
exception exception_map_string_float_lazy {
  @cpp.Lazy
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_lazy")
exception exception_map_string_double_lazy {
  @cpp.Lazy
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_lazy")
exception exception_map_string_binary_lazy {
  @cpp.Lazy
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_lazy")
exception exception_map_string_string_lazy {
  @cpp.Lazy
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_lazy")
exception exception_map_i64_bool_lazy {
  @cpp.Lazy
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_lazy")
exception exception_map_i64_byte_lazy {
  @cpp.Lazy
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_lazy")
exception exception_map_i64_i16_lazy {
  @cpp.Lazy
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_lazy")
exception exception_map_i64_i32_lazy {
  @cpp.Lazy
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_lazy")
exception exception_map_i64_i64_lazy {
  @cpp.Lazy
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_lazy")
exception exception_map_i64_float_lazy {
  @cpp.Lazy
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_lazy")
exception exception_map_i64_double_lazy {
  @cpp.Lazy
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_lazy")
exception exception_map_i64_binary_lazy {
  @cpp.Lazy
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_lazy")
exception exception_map_i64_string_lazy {
  @cpp.Lazy
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_lazy")
exception exception_map_string_set_string_lazy {
  @cpp.Lazy
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_lazy")
exception exception_map_string_set_i64_lazy {
  @cpp.Lazy
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_lazy")
exception exception_map_i64_set_string_lazy {
  @cpp.Lazy
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_lazy")
exception exception_map_i64_set_i64_lazy {
  @cpp.Lazy
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_lazy")
exception exception_string_lazy {
  @cpp.Lazy
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_lazy")
@cpp.UseOpEncode
exception exception_empty_op_encoded {
} (thrift.uri="facebook.com/thrift/test/testset/exception_empty_op_encoded")
@cpp.UseOpEncode
exception exception_list_bool_op_encoded {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_op_encoded")
@cpp.UseOpEncode
exception exception_list_byte_op_encoded {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_op_encoded")
@cpp.UseOpEncode
exception exception_list_i16_op_encoded {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_op_encoded")
@cpp.UseOpEncode
exception exception_list_i32_op_encoded {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_op_encoded")
@cpp.UseOpEncode
exception exception_list_i64_op_encoded {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_op_encoded")
@cpp.UseOpEncode
exception exception_list_float_op_encoded {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_op_encoded")
@cpp.UseOpEncode
exception exception_list_double_op_encoded {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_op_encoded")
@cpp.UseOpEncode
exception exception_list_binary_op_encoded {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_op_encoded")
@cpp.UseOpEncode
exception exception_list_string_op_encoded {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_op_encoded")
@cpp.UseOpEncode
exception exception_set_string_op_encoded {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_set_i64_op_encoded {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_bool_op_encoded {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_byte_op_encoded {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i16_op_encoded {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i32_op_encoded {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i64_op_encoded {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_float_op_encoded {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_double_op_encoded {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_binary_op_encoded {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_string_op_encoded {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_bool_op_encoded {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_byte_op_encoded {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i16_op_encoded {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i32_op_encoded {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i64_op_encoded {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_float_op_encoded {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_double_op_encoded {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_binary_op_encoded {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_string_op_encoded {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_string_op_encoded {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_i64_op_encoded {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_string_op_encoded {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_i64_op_encoded {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_bool_op_encoded {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_op_encoded")
@cpp.UseOpEncode
exception exception_byte_op_encoded {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_op_encoded")
@cpp.UseOpEncode
exception exception_i16_op_encoded {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_op_encoded")
@cpp.UseOpEncode
exception exception_i32_op_encoded {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_op_encoded")
@cpp.UseOpEncode
exception exception_i64_op_encoded {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_op_encoded")
@cpp.UseOpEncode
exception exception_float_op_encoded {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_op_encoded")
@cpp.UseOpEncode
exception exception_double_op_encoded {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_op_encoded")
@cpp.UseOpEncode
exception exception_binary_op_encoded {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_op_encoded")
@cpp.UseOpEncode
exception exception_string_op_encoded {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_op_encoded")
@cpp.UseOpEncode
exception exception_bool_custom_default_op_encoded {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_byte_custom_default_op_encoded {
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_i16_custom_default_op_encoded {
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_i32_custom_default_op_encoded {
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_i64_custom_default_op_encoded {
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_float_custom_default_op_encoded {
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_double_custom_default_op_encoded {
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_binary_custom_default_op_encoded {
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_string_custom_default_op_encoded {
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_bool_alternative_custom_default_op_encoded {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_byte_alternative_custom_default_op_encoded {
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_i16_alternative_custom_default_op_encoded {
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_i32_alternative_custom_default_op_encoded {
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_i64_alternative_custom_default_op_encoded {
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_float_alternative_custom_default_op_encoded {
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_double_alternative_custom_default_op_encoded {
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_binary_alternative_custom_default_op_encoded {
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_string_alternative_custom_default_op_encoded {
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_bool_op_encoded {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_byte_op_encoded {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i16_op_encoded {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i32_op_encoded {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i64_op_encoded {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_float_op_encoded {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_double_op_encoded {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_binary_op_encoded {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_string_op_encoded {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_string_op_encoded {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_i64_op_encoded {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_bool_op_encoded {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_byte_op_encoded {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i16_op_encoded {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i32_op_encoded {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i64_op_encoded {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_float_op_encoded {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_double_op_encoded {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_binary_op_encoded {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_string_op_encoded {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_bool_op_encoded {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_byte_op_encoded {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i16_op_encoded {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i32_op_encoded {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i64_op_encoded {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_float_op_encoded {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_double_op_encoded {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_binary_op_encoded {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_string_op_encoded {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_string_op_encoded {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_i64_op_encoded {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_string_op_encoded {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_i64_op_encoded {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_optional_bool_op_encoded {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_op_encoded")
@cpp.UseOpEncode
exception exception_optional_byte_op_encoded {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i16_op_encoded {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i32_op_encoded {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i64_op_encoded {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_op_encoded")
@cpp.UseOpEncode
exception exception_optional_float_op_encoded {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_op_encoded")
@cpp.UseOpEncode
exception exception_optional_double_op_encoded {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_op_encoded")
@cpp.UseOpEncode
exception exception_optional_binary_op_encoded {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_op_encoded")
@cpp.UseOpEncode
exception exception_optional_string_op_encoded {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_op_encoded")
@cpp.UseOpEncode
exception exception_optional_bool_custom_default_op_encoded {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_byte_custom_default_op_encoded {
  1: optional byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i16_custom_default_op_encoded {
  1: optional i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i32_custom_default_op_encoded {
  1: optional i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i64_custom_default_op_encoded {
  1: optional i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_float_custom_default_op_encoded {
  1: optional float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_double_custom_default_op_encoded {
  1: optional double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_binary_custom_default_op_encoded {
  1: optional binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_string_custom_default_op_encoded {
  1: optional string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_bool_alternative_custom_default_op_encoded {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_byte_alternative_custom_default_op_encoded {
  1: optional byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i16_alternative_custom_default_op_encoded {
  1: optional i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i32_alternative_custom_default_op_encoded {
  1: optional i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_i64_alternative_custom_default_op_encoded {
  1: optional i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_float_alternative_custom_default_op_encoded {
  1: optional float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_double_alternative_custom_default_op_encoded {
  1: optional double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_binary_alternative_custom_default_op_encoded {
  1: optional binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_string_alternative_custom_default_op_encoded {
  1: optional string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_bool_op_encoded {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_byte_op_encoded {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i16_op_encoded {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i32_op_encoded {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i64_op_encoded {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_float_op_encoded {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_double_op_encoded {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_binary_op_encoded {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_string_op_encoded {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_set_string_op_encoded {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_set_i64_op_encoded {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_bool_op_encoded {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_byte_op_encoded {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i16_op_encoded {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i32_op_encoded {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i64_op_encoded {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_float_op_encoded {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_double_op_encoded {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_binary_op_encoded {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_string_op_encoded {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_bool_op_encoded {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_byte_op_encoded {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i16_op_encoded {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i32_op_encoded {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i64_op_encoded {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_float_op_encoded {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_double_op_encoded {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_binary_op_encoded {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_string_op_encoded {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_set_string_op_encoded {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_set_i64_op_encoded {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_set_string_op_encoded {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_set_i64_op_encoded {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_required_bool_op_encoded {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_op_encoded")
@cpp.UseOpEncode
exception exception_required_byte_op_encoded {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_op_encoded")
@cpp.UseOpEncode
exception exception_required_i16_op_encoded {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_op_encoded")
@cpp.UseOpEncode
exception exception_required_i32_op_encoded {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_op_encoded")
@cpp.UseOpEncode
exception exception_required_i64_op_encoded {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_op_encoded")
@cpp.UseOpEncode
exception exception_required_float_op_encoded {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_op_encoded")
@cpp.UseOpEncode
exception exception_required_double_op_encoded {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_op_encoded")
@cpp.UseOpEncode
exception exception_required_binary_op_encoded {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_op_encoded")
@cpp.UseOpEncode
exception exception_required_string_op_encoded {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_op_encoded")
@cpp.UseOpEncode
exception exception_required_bool_custom_default_op_encoded {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_byte_custom_default_op_encoded {
  1: required byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_i16_custom_default_op_encoded {
  1: required i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_i32_custom_default_op_encoded {
  1: required i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_i64_custom_default_op_encoded {
  1: required i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_float_custom_default_op_encoded {
  1: required float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_double_custom_default_op_encoded {
  1: required double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_binary_custom_default_op_encoded {
  1: required binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_string_custom_default_op_encoded {
  1: required string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_bool_alternative_custom_default_op_encoded {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_byte_alternative_custom_default_op_encoded {
  1: required byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_i16_alternative_custom_default_op_encoded {
  1: required i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_i32_alternative_custom_default_op_encoded {
  1: required i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_i64_alternative_custom_default_op_encoded {
  1: required i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_float_alternative_custom_default_op_encoded {
  1: required float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_double_alternative_custom_default_op_encoded {
  1: required double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_binary_alternative_custom_default_op_encoded {
  1: required binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_required_string_alternative_custom_default_op_encoded {
  1: required string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_bool_op_encoded {
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_byte_op_encoded {
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i16_op_encoded {
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i32_op_encoded {
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i64_op_encoded {
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_float_op_encoded {
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_double_op_encoded {
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_binary_op_encoded {
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_string_op_encoded {
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_set_string_op_encoded {
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_set_i64_op_encoded {
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_bool_op_encoded {
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_byte_op_encoded {
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i16_op_encoded {
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i32_op_encoded {
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i64_op_encoded {
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_float_op_encoded {
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_double_op_encoded {
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_binary_op_encoded {
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_string_op_encoded {
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_bool_op_encoded {
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_byte_op_encoded {
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i16_op_encoded {
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i32_op_encoded {
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i64_op_encoded {
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_float_op_encoded {
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_double_op_encoded {
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_binary_op_encoded {
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_string_op_encoded {
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_set_string_op_encoded {
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_set_i64_op_encoded {
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_set_string_op_encoded {
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_set_i64_op_encoded {
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
exception exception_terse_bool_op_encoded {
  @thrift.TerseWrite
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_op_encoded")
@cpp.UseOpEncode
exception exception_terse_byte_op_encoded {
  @thrift.TerseWrite
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i16_op_encoded {
  @thrift.TerseWrite
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i32_op_encoded {
  @thrift.TerseWrite
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i64_op_encoded {
  @thrift.TerseWrite
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_op_encoded")
@cpp.UseOpEncode
exception exception_terse_float_op_encoded {
  @thrift.TerseWrite
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_op_encoded")
@cpp.UseOpEncode
exception exception_terse_double_op_encoded {
  @thrift.TerseWrite
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_op_encoded")
@cpp.UseOpEncode
exception exception_terse_binary_op_encoded {
  @thrift.TerseWrite
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_op_encoded")
@cpp.UseOpEncode
exception exception_terse_string_op_encoded {
  @thrift.TerseWrite
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_op_encoded")
@cpp.UseOpEncode
exception exception_terse_bool_custom_default_op_encoded {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_byte_custom_default_op_encoded {
  @thrift.TerseWrite
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i16_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i32_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i64_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_float_custom_default_op_encoded {
  @thrift.TerseWrite
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_double_custom_default_op_encoded {
  @thrift.TerseWrite
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_binary_custom_default_op_encoded {
  @thrift.TerseWrite
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_string_custom_default_op_encoded {
  @thrift.TerseWrite
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_bool_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_byte_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i16_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i32_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_i64_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_float_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_double_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_binary_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_terse_string_alternative_custom_default_op_encoded {
  @thrift.TerseWrite
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_alternative_custom_default_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_bool_box_op_encoded {
  @thrift.Box
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_byte_box_op_encoded {
  @thrift.Box
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i16_box_op_encoded {
  @thrift.Box
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i32_box_op_encoded {
  @thrift.Box
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_i64_box_op_encoded {
  @thrift.Box
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_float_box_op_encoded {
  @thrift.Box
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_double_box_op_encoded {
  @thrift.Box
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_binary_box_op_encoded {
  @thrift.Box
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_list_string_box_op_encoded {
  @thrift.Box
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_string_box_op_encoded {
  @thrift.Box
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_set_i64_box_op_encoded {
  @thrift.Box
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_bool_box_op_encoded {
  @thrift.Box
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_byte_box_op_encoded {
  @thrift.Box
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i16_box_op_encoded {
  @thrift.Box
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i32_box_op_encoded {
  @thrift.Box
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_i64_box_op_encoded {
  @thrift.Box
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_float_box_op_encoded {
  @thrift.Box
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_double_box_op_encoded {
  @thrift.Box
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_binary_box_op_encoded {
  @thrift.Box
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_string_box_op_encoded {
  @thrift.Box
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_bool_box_op_encoded {
  @thrift.Box
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_byte_box_op_encoded {
  @thrift.Box
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i16_box_op_encoded {
  @thrift.Box
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i32_box_op_encoded {
  @thrift.Box
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_i64_box_op_encoded {
  @thrift.Box
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_float_box_op_encoded {
  @thrift.Box
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_double_box_op_encoded {
  @thrift.Box
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_binary_box_op_encoded {
  @thrift.Box
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_string_box_op_encoded {
  @thrift.Box
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_string_box_op_encoded {
  @thrift.Box
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_string_set_i64_box_op_encoded {
  @thrift.Box
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_string_box_op_encoded {
  @thrift.Box
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_box_op_encoded")
@cpp.UseOpEncode
exception exception_optional_map_i64_set_i64_box_op_encoded {
  @thrift.Box
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_box_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_bool'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_bool_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_byte'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_byte_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i16'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_i16_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i32'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_i32_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_i64'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_i64_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_float'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_float_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_double'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_double_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_binary'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_binary_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_string'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_bool'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_bool_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_byte'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_byte_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i16'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_i16_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i32'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_i32_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_i64'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_i64_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_float'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_float_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_double'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_double_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_binary'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_binary_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_list_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_list_string'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_list_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_string'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_set_i64'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_bool'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_bool_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_byte'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_byte_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i16'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_i16_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i32'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_i32_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_i64'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_i64_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_float'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_float_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_double'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_double_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_binary'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_binary_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_string'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_bool'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_bool_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_byte'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_byte_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i16'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_i16_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i32'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_i32_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_i64'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_i64_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_float'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_float_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_double'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_double_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_binary'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_binary_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_string'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_string'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_string_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_string_set_i64'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_string'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_adapted_map_i64_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_map_i64_set_i64'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_bool_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_byte_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_i16_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_i32_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_float_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_double_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_binary_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_bool_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_byte_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_i16_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_i32_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_float_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_double_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_binary_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_list_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_list_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_bool_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_byte_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_i16_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_i32_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_float_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_double_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_binary_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_bool_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_bool_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_byte_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_byte_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_i16_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_i16_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_i32_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_i32_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_float_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_float_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_double_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_double_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_binary_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_binary_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_string_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_set_string_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
exception exception_field_adapted_map_i64_set_i64_op_encoded {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_field_adapted_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
exception exception_list_bool_lazy_op_encoded {
  @cpp.Lazy
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_byte_lazy_op_encoded {
  @cpp.Lazy
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_i16_lazy_op_encoded {
  @cpp.Lazy
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_i32_lazy_op_encoded {
  @cpp.Lazy
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_i64_lazy_op_encoded {
  @cpp.Lazy
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_float_lazy_op_encoded {
  @cpp.Lazy
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_double_lazy_op_encoded {
  @cpp.Lazy
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_binary_lazy_op_encoded {
  @cpp.Lazy
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_list_string_lazy_op_encoded {
  @cpp.Lazy
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_set_string_lazy_op_encoded {
  @cpp.Lazy
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_set_i64_lazy_op_encoded {
  @cpp.Lazy
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_bool_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_byte_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i16_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i32_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_float_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_double_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_binary_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_bool_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_byte_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i16_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i32_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_float_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_double_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_binary_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_string_set_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_string_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_map_i64_set_i64_lazy_op_encoded {
  @cpp.Lazy
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_lazy_op_encoded")
@cpp.UseOpEncode
exception exception_string_lazy_op_encoded {
  @cpp.Lazy
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_lazy_op_encoded")
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_bool'}
  typedef bool adapted_typedef_bool 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_byte'}
  typedef byte adapted_typedef_byte 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_i16'}
  typedef i16 adapted_typedef_i16 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_i32'}
  typedef i32 adapted_typedef_i32 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_i64'}
  typedef i64 adapted_typedef_i64 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_float'}
  typedef float adapted_typedef_float 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_double'}
  typedef double adapted_typedef_double 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_binary'}
  typedef binary adapted_typedef_binary 
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Adapter{name = 'ConformanceTestAdapter_adapted_typedef_string'}
  typedef string adapted_typedef_string 
@cpp.UseOpEncode
struct struct_adapted_typedef_bool {
  1: adapted_typedef_bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_adapted_typedef_byte {
  1: adapted_typedef_byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_adapted_typedef_i16 {
  1: adapted_typedef_i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_adapted_typedef_i32 {
  1: adapted_typedef_i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_adapted_typedef_i64 {
  1: adapted_typedef_i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_adapted_typedef_float {
  1: adapted_typedef_float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_adapted_typedef_double {
  1: adapted_typedef_double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_adapted_typedef_binary {
  1: adapted_typedef_binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_adapted_typedef_string {
  1: adapted_typedef_string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_bool {
  1: list<adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_byte {
  1: list<adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_i16 {
  1: list<adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_i32 {
  1: list<adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_i64 {
  1: list<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_float {
  1: list<adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_double {
  1: list<adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_binary {
  1: list<adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_list_adapted_typedef_string {
  1: list<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_set_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: set<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_set_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: set<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_string_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_string_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_map_adapted_typedef_i64_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_adapted_typedef_i64_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_adapted_typedef_bool_custom_default {
  1: adapted_typedef_bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_bool_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_byte_custom_default {
  1: adapted_typedef_byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_byte_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_i16_custom_default {
  1: adapted_typedef_i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i16_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_i32_custom_default {
  1: adapted_typedef_i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i32_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_i64_custom_default {
  1: adapted_typedef_i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i64_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_float_custom_default {
  1: adapted_typedef_float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_float_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_double_custom_default {
  1: adapted_typedef_double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_double_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_binary_custom_default {
  1: adapted_typedef_binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_binary_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_string_custom_default {
  1: adapted_typedef_string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_string_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_bool_alternative_custom_default {
  1: adapted_typedef_bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_bool_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_byte_alternative_custom_default {
  1: adapted_typedef_byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_byte_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_i16_alternative_custom_default {
  1: adapted_typedef_i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i16_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_i32_alternative_custom_default {
  1: adapted_typedef_i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i32_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_i64_alternative_custom_default {
  1: adapted_typedef_i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_i64_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_float_alternative_custom_default {
  1: adapted_typedef_float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_float_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_double_alternative_custom_default {
  1: adapted_typedef_double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_double_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_binary_alternative_custom_default {
  1: adapted_typedef_binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_binary_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_typedef_string_alternative_custom_default {
  1: adapted_typedef_string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_typedef_string_alternative_custom_default")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_adapted_adapted_typedef_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: adapted_typedef_string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_adapted_list_adapted_typedef_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: list<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_list_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_adapted_set_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: set<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_set_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_adapted_set_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: set<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_set_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_string_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_string, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_string_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_adapted_map_adapted_typedef_i64_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestAdapter'}
  @java.Adapter{adapterClassName = 'com.facebook.thrift.adapter.test.GenericTypeAdapter', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.Wrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  1: map<adapted_typedef_i64, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_adapted_map_adapted_typedef_i64_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_field_adapted_adapted_typedef_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: adapted_typedef_string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_bool {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_byte {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_i16 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_i32 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_i64 {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_float {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_double {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_binary {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_field_adapted_list_adapted_typedef_string {
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: list<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_list_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_field_adapted_set_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_set_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_field_adapted_set_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: set<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_set_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_string_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_string, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_string_adapted_typedef_string")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_bool")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_byte")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_i16")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_i32")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_i64")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_float")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_double")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_binary")
@cpp.UseOpEncode
struct struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  @cpp.Adapter{name = '::apache::thrift::test::TemplatedTestFieldAdapter'}
  @java.Wrapper{wrapperClassName = 'com.facebook.thrift.adapter.test.GenericWrapper', typeClassName = 'com.facebook.thrift.adapter.test.Wrapped'}
  @python.Adapter{name = 'thrift.python.test.adapters.noop.FieldWrapper', typeHint = 'thrift.python.test.adapters.noop.Wrapped[]',}
  @hack.Wrapper{name = '\ConformanceTestFieldWrapper'}
  1: map<adapted_typedef_i64, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_field_adapted_map_adapted_typedef_i64_adapted_typedef_string")
union union_empty {
} (thrift.uri="facebook.com/thrift/test/testset/union_empty")
union union_list_bool {
  1: list<bool> field_1;
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool")
union union_list_byte {
  1: list<byte> field_1;
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte")
union union_list_i16 {
  1: list<i16> field_1;
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16")
union union_list_i32 {
  1: list<i32> field_1;
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32")
union union_list_i64 {
  1: list<i64> field_1;
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64")
union union_list_float {
  1: list<float> field_1;
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float")
union union_list_double {
  1: list<double> field_1;
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double")
union union_list_binary {
  1: list<binary> field_1;
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary")
union union_list_string {
  1: list<string> field_1;
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string")
union union_set_string {
  1: set<string> field_1;
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string")
union union_set_i64 {
  1: set<i64> field_1;
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64")
union union_map_string_bool {
  1: map<string, bool> field_1;
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool")
union union_map_string_byte {
  1: map<string, byte> field_1;
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte")
union union_map_string_i16 {
  1: map<string, i16> field_1;
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16")
union union_map_string_i32 {
  1: map<string, i32> field_1;
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32")
union union_map_string_i64 {
  1: map<string, i64> field_1;
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64")
union union_map_string_float {
  1: map<string, float> field_1;
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float")
union union_map_string_double {
  1: map<string, double> field_1;
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double")
union union_map_string_binary {
  1: map<string, binary> field_1;
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary")
union union_map_string_string {
  1: map<string, string> field_1;
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string")
union union_map_i64_bool {
  1: map<i64, bool> field_1;
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool")
union union_map_i64_byte {
  1: map<i64, byte> field_1;
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte")
union union_map_i64_i16 {
  1: map<i64, i16> field_1;
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16")
union union_map_i64_i32 {
  1: map<i64, i32> field_1;
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32")
union union_map_i64_i64 {
  1: map<i64, i64> field_1;
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64")
union union_map_i64_float {
  1: map<i64, float> field_1;
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float")
union union_map_i64_double {
  1: map<i64, double> field_1;
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double")
union union_map_i64_binary {
  1: map<i64, binary> field_1;
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary")
union union_map_i64_string {
  1: map<i64, string> field_1;
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string")
union union_map_string_set_string {
  1: map<string, set<string>> field_1;
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string")
union union_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64")
union union_map_i64_set_string {
  1: map<i64, set<string>> field_1;
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string")
union union_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64")
union union_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_cpp_ref")
union union_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_cpp_ref")
union union_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_cpp_ref")
union union_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_cpp_ref")
union union_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_cpp_ref")
union union_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_cpp_ref")
union union_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_cpp_ref")
union union_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_cpp_ref")
union union_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_cpp_ref")
union union_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_cpp_ref")
union union_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_cpp_ref")
union union_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_cpp_ref")
union union_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_cpp_ref")
union union_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_cpp_ref")
union union_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_cpp_ref")
union union_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_cpp_ref")
union union_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_cpp_ref")
union union_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_cpp_ref")
union union_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_cpp_ref")
union union_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_cpp_ref")
union union_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_cpp_ref")
union union_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_cpp_ref")
union union_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_cpp_ref")
union union_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_cpp_ref")
union union_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_cpp_ref")
union union_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_cpp_ref")
union union_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_cpp_ref")
union union_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_cpp_ref")
union union_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_cpp_ref")
union union_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_cpp_ref")
union union_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_cpp_ref")
union union_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_cpp_ref")
union union_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_cpp_ref")
union union_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_shared_cpp_ref")
union union_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_shared_cpp_ref")
union union_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_shared_cpp_ref")
union union_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_shared_cpp_ref")
union union_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_shared_cpp_ref")
union union_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_shared_cpp_ref")
union union_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_shared_cpp_ref")
union union_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_shared_cpp_ref")
union union_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_shared_cpp_ref")
union union_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_shared_cpp_ref")
union union_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_shared_cpp_ref")
union union_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_shared_cpp_ref")
union union_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_shared_cpp_ref")
union union_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_shared_cpp_ref")
union union_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_shared_cpp_ref")
union union_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_shared_cpp_ref")
union union_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_shared_cpp_ref")
union union_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_shared_cpp_ref")
union union_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_shared_cpp_ref")
union union_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_shared_cpp_ref")
union union_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_shared_cpp_ref")
union union_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_shared_cpp_ref")
union union_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_shared_cpp_ref")
union union_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_shared_cpp_ref")
union union_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_shared_cpp_ref")
union union_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_shared_cpp_ref")
union union_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_shared_cpp_ref")
union union_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_shared_cpp_ref")
union union_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_shared_cpp_ref")
union union_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_shared_cpp_ref")
union union_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_shared_cpp_ref")
union union_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_shared_cpp_ref")
union union_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_shared_cpp_ref")
union union_bool {
  1: bool field_1;
  2: bool field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_bool")
union union_byte {
  1: byte field_1;
  2: byte field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_byte")
union union_i16 {
  1: i16 field_1;
  2: i16 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i16")
union union_i32 {
  1: i32 field_1;
  2: i32 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i32")
union union_i64 {
  1: i64 field_1;
  2: i64 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i64")
union union_float {
  1: float field_1;
  2: float field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_float")
union union_double {
  1: double field_1;
  2: double field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_double")
union union_binary {
  1: binary field_1;
  2: binary field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_binary")
union union_string {
  1: string field_1;
  2: string field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_string")
@cpp.UseOpEncode
union union_empty_op_encoded {
} (thrift.uri="facebook.com/thrift/test/testset/union_empty_op_encoded")
@cpp.UseOpEncode
union union_list_bool_op_encoded {
  1: list<bool> field_1;
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_op_encoded")
@cpp.UseOpEncode
union union_list_byte_op_encoded {
  1: list<byte> field_1;
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_op_encoded")
@cpp.UseOpEncode
union union_list_i16_op_encoded {
  1: list<i16> field_1;
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_op_encoded")
@cpp.UseOpEncode
union union_list_i32_op_encoded {
  1: list<i32> field_1;
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_op_encoded")
@cpp.UseOpEncode
union union_list_i64_op_encoded {
  1: list<i64> field_1;
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_op_encoded")
@cpp.UseOpEncode
union union_list_float_op_encoded {
  1: list<float> field_1;
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_op_encoded")
@cpp.UseOpEncode
union union_list_double_op_encoded {
  1: list<double> field_1;
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_op_encoded")
@cpp.UseOpEncode
union union_list_binary_op_encoded {
  1: list<binary> field_1;
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_op_encoded")
@cpp.UseOpEncode
union union_list_string_op_encoded {
  1: list<string> field_1;
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_op_encoded")
@cpp.UseOpEncode
union union_set_string_op_encoded {
  1: set<string> field_1;
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_op_encoded")
@cpp.UseOpEncode
union union_set_i64_op_encoded {
  1: set<i64> field_1;
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_op_encoded")
@cpp.UseOpEncode
union union_map_string_bool_op_encoded {
  1: map<string, bool> field_1;
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_op_encoded")
@cpp.UseOpEncode
union union_map_string_byte_op_encoded {
  1: map<string, byte> field_1;
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_op_encoded")
@cpp.UseOpEncode
union union_map_string_i16_op_encoded {
  1: map<string, i16> field_1;
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_op_encoded")
@cpp.UseOpEncode
union union_map_string_i32_op_encoded {
  1: map<string, i32> field_1;
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_op_encoded")
@cpp.UseOpEncode
union union_map_string_i64_op_encoded {
  1: map<string, i64> field_1;
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_op_encoded")
@cpp.UseOpEncode
union union_map_string_float_op_encoded {
  1: map<string, float> field_1;
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_op_encoded")
@cpp.UseOpEncode
union union_map_string_double_op_encoded {
  1: map<string, double> field_1;
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_op_encoded")
@cpp.UseOpEncode
union union_map_string_binary_op_encoded {
  1: map<string, binary> field_1;
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_op_encoded")
@cpp.UseOpEncode
union union_map_string_string_op_encoded {
  1: map<string, string> field_1;
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_op_encoded")
@cpp.UseOpEncode
union union_map_i64_bool_op_encoded {
  1: map<i64, bool> field_1;
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_op_encoded")
@cpp.UseOpEncode
union union_map_i64_byte_op_encoded {
  1: map<i64, byte> field_1;
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i16_op_encoded {
  1: map<i64, i16> field_1;
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i32_op_encoded {
  1: map<i64, i32> field_1;
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i64_op_encoded {
  1: map<i64, i64> field_1;
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_op_encoded")
@cpp.UseOpEncode
union union_map_i64_float_op_encoded {
  1: map<i64, float> field_1;
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_op_encoded")
@cpp.UseOpEncode
union union_map_i64_double_op_encoded {
  1: map<i64, double> field_1;
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_op_encoded")
@cpp.UseOpEncode
union union_map_i64_binary_op_encoded {
  1: map<i64, binary> field_1;
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_op_encoded")
@cpp.UseOpEncode
union union_map_i64_string_op_encoded {
  1: map<i64, string> field_1;
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_op_encoded")
@cpp.UseOpEncode
union union_map_string_set_string_op_encoded {
  1: map<string, set<string>> field_1;
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_op_encoded")
@cpp.UseOpEncode
union union_map_string_set_i64_op_encoded {
  1: map<string, set<i64>> field_1;
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_op_encoded")
@cpp.UseOpEncode
union union_map_i64_set_string_op_encoded {
  1: map<i64, set<string>> field_1;
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_op_encoded")
@cpp.UseOpEncode
union union_map_i64_set_i64_op_encoded {
  1: map<i64, set<i64>> field_1;
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_op_encoded")
@cpp.UseOpEncode
union union_list_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_bool_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_byte_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i16_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i32_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_float_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_double_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_binary_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_set_string_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_set_i64_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_list_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_bool_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_byte_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i16_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i32_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_float_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_double_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_binary_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_string_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_set_string_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_map_i64_set_i64_shared_cpp_ref_op_encoded {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_shared_cpp_ref_op_encoded")
@cpp.UseOpEncode
union union_bool_op_encoded {
  1: bool field_1;
  2: bool field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_bool_op_encoded")
@cpp.UseOpEncode
union union_byte_op_encoded {
  1: byte field_1;
  2: byte field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_byte_op_encoded")
@cpp.UseOpEncode
union union_i16_op_encoded {
  1: i16 field_1;
  2: i16 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i16_op_encoded")
@cpp.UseOpEncode
union union_i32_op_encoded {
  1: i32 field_1;
  2: i32 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i32_op_encoded")
@cpp.UseOpEncode
union union_i64_op_encoded {
  1: i64 field_1;
  2: i64 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i64_op_encoded")
@cpp.UseOpEncode
union union_float_op_encoded {
  1: float field_1;
  2: float field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_float_op_encoded")
@cpp.UseOpEncode
union union_double_op_encoded {
  1: double field_1;
  2: double field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_double_op_encoded")
@cpp.UseOpEncode
union union_binary_op_encoded {
  1: binary field_1;
  2: binary field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_binary_op_encoded")
@cpp.UseOpEncode
union union_string_op_encoded {
  1: string field_1;
  2: string field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_string_op_encoded")
union union_adapted_typedef_bool {
  1: adapted_typedef_bool field_1;
  2: adapted_typedef_bool field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_bool")
union union_adapted_typedef_byte {
  1: adapted_typedef_byte field_1;
  2: adapted_typedef_byte field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_byte")
union union_adapted_typedef_i16 {
  1: adapted_typedef_i16 field_1;
  2: adapted_typedef_i16 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_i16")
union union_adapted_typedef_i32 {
  1: adapted_typedef_i32 field_1;
  2: adapted_typedef_i32 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_i32")
union union_adapted_typedef_i64 {
  1: adapted_typedef_i64 field_1;
  2: adapted_typedef_i64 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_i64")
union union_adapted_typedef_float {
  1: adapted_typedef_float field_1;
  2: adapted_typedef_float field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_float")
union union_adapted_typedef_double {
  1: adapted_typedef_double field_1;
  2: adapted_typedef_double field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_double")
union union_adapted_typedef_binary {
  1: adapted_typedef_binary field_1;
  2: adapted_typedef_binary field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_binary")
union union_adapted_typedef_string {
  1: adapted_typedef_string field_1;
  2: adapted_typedef_string field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_adapted_typedef_string")
union union_list_adapted_typedef_bool {
  1: list<adapted_typedef_bool> field_1;
  2: list<adapted_typedef_bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_bool")
union union_list_adapted_typedef_byte {
  1: list<adapted_typedef_byte> field_1;
  2: list<adapted_typedef_byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_byte")
union union_list_adapted_typedef_i16 {
  1: list<adapted_typedef_i16> field_1;
  2: list<adapted_typedef_i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_i16")
union union_list_adapted_typedef_i32 {
  1: list<adapted_typedef_i32> field_1;
  2: list<adapted_typedef_i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_i32")
union union_list_adapted_typedef_i64 {
  1: list<adapted_typedef_i64> field_1;
  2: list<adapted_typedef_i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_i64")
union union_list_adapted_typedef_float {
  1: list<adapted_typedef_float> field_1;
  2: list<adapted_typedef_float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_float")
union union_list_adapted_typedef_double {
  1: list<adapted_typedef_double> field_1;
  2: list<adapted_typedef_double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_double")
union union_list_adapted_typedef_binary {
  1: list<adapted_typedef_binary> field_1;
  2: list<adapted_typedef_binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_binary")
union union_list_adapted_typedef_string {
  1: list<adapted_typedef_string> field_1;
  2: list<adapted_typedef_string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_adapted_typedef_string")
union union_set_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: set<adapted_typedef_string> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: set<adapted_typedef_string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_adapted_typedef_string")
union union_set_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: set<adapted_typedef_i64> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: set<adapted_typedef_i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_adapted_typedef_i64")
union union_map_adapted_typedef_string_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_bool> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_bool")
union union_map_adapted_typedef_string_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_byte> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_byte")
union union_map_adapted_typedef_string_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i16> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_i16")
union union_map_adapted_typedef_string_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i32> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_i32")
union union_map_adapted_typedef_string_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i64> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_i64")
union union_map_adapted_typedef_string_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_float> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_float")
union union_map_adapted_typedef_string_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_double> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_double")
union union_map_adapted_typedef_string_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_binary> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_binary")
union union_map_adapted_typedef_string_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_string> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_string, adapted_typedef_string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_string_adapted_typedef_string")
union union_map_adapted_typedef_i64_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_bool> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_bool")
union union_map_adapted_typedef_i64_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_byte> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_byte")
union union_map_adapted_typedef_i64_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i16> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_i16")
union union_map_adapted_typedef_i64_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i32> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_i32")
union union_map_adapted_typedef_i64_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i64> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_i64")
union union_map_adapted_typedef_i64_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_float> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_float")
union union_map_adapted_typedef_i64_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_double> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_double")
union union_map_adapted_typedef_i64_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_binary> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_binary")
union union_map_adapted_typedef_i64_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_string> field_1;
  @hack.SkipCodegen{reason = 'Invalid key type'}
  2: map<adapted_typedef_i64, adapted_typedef_string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_adapted_typedef_i64_adapted_typedef_string")
exception exception_adapted_typedef_bool {
  1: adapted_typedef_bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_bool")
exception exception_adapted_typedef_byte {
  1: adapted_typedef_byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_byte")
exception exception_adapted_typedef_i16 {
  1: adapted_typedef_i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_i16")
exception exception_adapted_typedef_i32 {
  1: adapted_typedef_i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_i32")
exception exception_adapted_typedef_i64 {
  1: adapted_typedef_i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_i64")
exception exception_adapted_typedef_float {
  1: adapted_typedef_float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_float")
exception exception_adapted_typedef_double {
  1: adapted_typedef_double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_double")
exception exception_adapted_typedef_binary {
  1: adapted_typedef_binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_binary")
exception exception_adapted_typedef_string {
  1: adapted_typedef_string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_adapted_typedef_string")
exception exception_list_adapted_typedef_bool {
  1: list<adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_bool")
exception exception_list_adapted_typedef_byte {
  1: list<adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_byte")
exception exception_list_adapted_typedef_i16 {
  1: list<adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_i16")
exception exception_list_adapted_typedef_i32 {
  1: list<adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_i32")
exception exception_list_adapted_typedef_i64 {
  1: list<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_i64")
exception exception_list_adapted_typedef_float {
  1: list<adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_float")
exception exception_list_adapted_typedef_double {
  1: list<adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_double")
exception exception_list_adapted_typedef_binary {
  1: list<adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_binary")
exception exception_list_adapted_typedef_string {
  1: list<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_adapted_typedef_string")
exception exception_set_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: set<adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_adapted_typedef_string")
exception exception_set_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: set<adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_adapted_typedef_i64")
exception exception_map_adapted_typedef_string_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_bool")
exception exception_map_adapted_typedef_string_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_byte")
exception exception_map_adapted_typedef_string_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_i16")
exception exception_map_adapted_typedef_string_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_i32")
exception exception_map_adapted_typedef_string_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_i64")
exception exception_map_adapted_typedef_string_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_float")
exception exception_map_adapted_typedef_string_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_double")
exception exception_map_adapted_typedef_string_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_binary")
exception exception_map_adapted_typedef_string_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_string, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_string_adapted_typedef_string")
exception exception_map_adapted_typedef_i64_adapted_typedef_bool {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_bool")
exception exception_map_adapted_typedef_i64_adapted_typedef_byte {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_byte")
exception exception_map_adapted_typedef_i64_adapted_typedef_i16 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_i16")
exception exception_map_adapted_typedef_i64_adapted_typedef_i32 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_i32")
exception exception_map_adapted_typedef_i64_adapted_typedef_i64 {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_i64")
exception exception_map_adapted_typedef_i64_adapted_typedef_float {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_float")
exception exception_map_adapted_typedef_i64_adapted_typedef_double {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_double")
exception exception_map_adapted_typedef_i64_adapted_typedef_binary {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_binary")
exception exception_map_adapted_typedef_i64_adapted_typedef_string {
  @hack.SkipCodegen{reason = 'Invalid key type'}
  1: map<adapted_typedef_i64, adapted_typedef_string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_adapted_typedef_i64_adapted_typedef_string")
