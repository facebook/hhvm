// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"array_change_key_case", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "upper", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-change-key-case.php )\n *\n * Returns an array with all keys from input lowercased or uppercased.\n * Numbered indices are left as is.\n *\n * @input      mixed   The array to work on\n * @upper      bool    Either CASE_UPPER or CASE_LOWER (default)\n *\n * @return     mixed   Returns an array with its keys lower or uppercased,\n *                     or FALSE if input is not an array.\n */", 
"array_chunk", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "size", T(Int32), NULL, NULL, S(0), "preserve_keys", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-chunk.php )\n *\n * Chunks an array into size large chunks. The last chunk may contain less\n * than size elements.\n *\n * @input      mixed   The array to work on\n * @size       int     The size of each chunk\n * @preserve_keys\n *             bool    When set to TRUE keys will be preserved. Default is\n *                     FALSE which will reindex the chunk numerically\n *\n * @return     mixed   Returns a multidimensional numerically indexed\n *                     array, starting with zero, with each dimension\n *                     containing size elements.\n */", 
"array_combine", T(Variant), S(0), "keys", T(Variant), NULL, NULL, S(0), "values", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-combine.php )\n *\n * Creates an array by using the values from the keys array as keys and\n * the values from the values array as the corresponding values.\n *\n * @keys       mixed   Array of keys to be used. Illegal values for key\n *                     will be converted to string.\n * @values     mixed   Array of values to be used\n *\n * @return     mixed   Returns the combined array, FALSE if the number of\n *                     elements for each array isn't equal or if the arrays\n *                     are empty.\n */", 
"array_count_values", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-count-values.php\n * )\n *\n * array_count_values() returns an array using the values of the input\n * array as keys and their frequency in input as values.\n *\n * @input      mixed   The array of values to count\n *\n * @return     mixed   Returns an associative array of values from input as\n *                     keys and their count as value.\n */", 
"array_fill_keys", T(Variant), S(0), "keys", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-fill-keys.php )\n *\n * Fills an array with the value of the value parameter, using the values\n * of the keys array as keys.\n *\n * @keys       mixed   Array of values that will be used as keys. Illegal\n *                     values for key will be converted to string.\n * @value      mixed   Value to use for filling\n *\n * @return     mixed   Returns the filled array\n */", 
"array_fill", T(Variant), S(0), "start_index", T(Int32), NULL, NULL, S(0), "num", T(Int32), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-fill.php )\n *\n * Fills an array with num entries of the value of the value parameter,\n * keys starting at the start_index parameter.\n *\n * @start_index\n *             int     The first index of the returned array. Supports\n *                     non-negative indexes only.\n * @num        int     Number of elements to insert\n * @value      mixed   Value to use for filling\n *\n * @return     mixed   Returns the filled array\n */", 
"array_filter", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "callback", T(Variant), "N;", "null", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-filter.php )\n *\n * Iterates over each value in the input array passing them to the\n * callback function. If the callback function returns true, the current\n * value from input is returned into the result array. Array keys are\n * preserved.\n *\n * @input      mixed   The array to iterate over\n * @callback   mixed   The callback function to use\n *\n *                     If no callback is supplied, all entries of input\n *                     equal to FALSE (see converting to boolean) will be\n *                     removed.\n *\n * @return     mixed   Returns the filtered array.\n */", 
"array_flip", T(Variant), S(0), "trans", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-flip.php )\n *\n * array_flip() returns an array in flip order, i.e. keys from trans\n * become values and values from trans become keys.\n *\n * Note that the values of trans need to be valid keys, i.e. they need to\n * be either integer or string. A warning will be emitted if a value has\n * the wrong type, and the key/value pair in question will not be flipped.\n *\n * If a value has several occurrences, the latest key will be used as its\n * values, and all others will be lost.\n *\n * @trans      mixed   An array of key/value pairs to be flipped.\n *\n * @return     mixed   Returns the flipped array on success and NULL on\n *                     failure.\n */", 
"array_key_exists", T(Boolean), S(0), "key", T(Variant), NULL, NULL, S(0), "search", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-key-exists.php )\n *\n * array_key_exists() returns TRUE if the given key is set in the array.\n * key can be any value possible for an array index.\n *\n * @key        mixed   Value to check.\n * @search     mixed   An array with keys to check.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"key_exists", T(Boolean), S(0), "key", T(Variant), NULL, NULL, S(0), "search", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.key-exists.php )\n *\n *\n * @key        mixed\n * @search     mixed\n *\n * @return     bool\n */", 
"array_keys", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "search_value", T(Variant), "\001", "not_given_variant", S(0), "strict", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-keys.php )\n *\n * array_keys() returns the keys, numeric and string, from the input array.\n *\n * If the optional search_value is specified, then only the keys for that\n * value are returned. Otherwise, all the keys from the input are returned.\n *\n * @input      mixed   An array containing keys to return.\n * @search_value\n *             mixed   If specified, then only keys containing these values\n *                     are returned.\n * @strict     bool    Determines if strict comparison (===) should be used\n *                     during the search.\n *\n * @return     mixed   Returns an array of all the keys in input.\n */", 
"array_map", T(Variant), S(0), "callback", T(Variant), NULL, NULL, S(0), "arr1", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-map.php )\n *\n * array_map() returns an array containing all the elements of arr1 after\n * applying the callback function to each one. The number of parameters\n * that the callback function accepts should match the number of arrays\n * passed to the array_map()\n *\n * @callback   mixed   Callback function to run for each element in each\n *                     array.\n * @arr1       mixed   An array to run through the callback function.\n *\n * @return     mixed   Returns an array containing all the elements of arr1\n *                     after applying the callback function to each one.\n */", 
"array_merge_recursive", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-merge-recursive.php )\n *\n * array_merge_recursive() merges the elements of one or more arrays\n * together so that the values of one are appended to the end of the\n * previous one. It returns the resulting array.\n *\n * If the input arrays have the same string keys, then the values for\n * these keys are merged together into an array, and this is done\n * recursively, so that if one of the values is an array itself, the\n * function will merge it with a corresponding entry in another array too.\n * If, however, the arrays have the same numeric key, the later value will\n * not overwrite the original value, but will be appended.\n *\n * @array1     mixed   Initial array to merge.\n *\n * @return     mixed   An array of values resulted from merging the\n *                     arguments together.\n */", 
"array_merge", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-merge.php )\n *\n * Merges the elements of one or more arrays together so that the values\n * of one are appended to the end of the previous one. It returns the\n * resulting array.\n *\n * If the input arrays have the same string keys, then the later value for\n * that key will overwrite the previous one. If, however, the arrays\n * contain numeric keys, the later value will not overwrite the original\n * value, but will be appended.\n *\n * If all of the arrays contain only numeric keys, the resulting array is\n * given incrementing keys starting from zero.\n *\n * @array1     mixed   Initial array to merge.\n *\n * @return     mixed   Returns the resulting array.\n */", 
"array_replace_recursive", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-replace-recursive.php )\n *\n * array_replace_recursive() replaces the values of the first array with\n * the same values from all the following arrays. If a key from the first\n * array exists in the second array, its value will be replaced by the\n * value from the second array. If the key exists in the second array, and\n * not the first, it will be created in the first array. If a key only\n * exists in the first array, it will be left as is. If several arrays are\n * passed for replacement, they will be processed in order, the later array\n * overwriting the previous values.\n *\n * array_replace_recursive() is recursive : it will recurse into arrays\n * and apply the same process to the inner value.\n *\n * When the value in array is scalar, it will be replaced by the value in\n * array1, may it be scalar or array. When the value in array and array1\n * are both arrays, array_replace_recursive() will replace their respective\n * value recursively.\n *\n * @array1     mixed   The array in which elements are replaced.\n *\n * @return     mixed   Returns an array, or NULL if an error occurs.\n */", 
"array_replace", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-replace.php )\n *\n * array_replace() replaces the values of the first array with the same\n * values from all the following arrays. If a key from the first array\n * exists in the second array, its value will be replaced by the value from\n * the second array. If the key exists in the second array, and not the\n * first, it will be created in the first array. If a key only exists in\n * the first array, it will be left as is. If several arrays are passed for\n * replacement, they will be processed in order, the later arrays\n * overwriting the previous values.\n *\n * array_replace() is not recursive : it will replace values in the first\n * array by whatever type is in the second array.\n *\n * @array1     mixed   The array in which elements are replaced.\n *\n * @return     mixed   Returns an array, or NULL if an error occurs.\n */", 
"array_multisort", T(Boolean), S(0), "ar1", T(Variant), NULL, NULL, S(1), NULL, S(540672), "/**\n * ( excerpt from http://php.net/manual/en/function.array-multisort.php )\n *\n * array_multisort() can be used to sort several arrays at once, or a\n * multi-dimensional array by one or more dimensions.\n *\n * Associative (string) keys will be maintained, but numeric keys will be\n * re-indexed.\n *\n * @ar1        mixed   An array being sorted.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"array_pad", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "pad_size", T(Int32), NULL, NULL, S(0), "pad_value", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-pad.php )\n *\n * array_pad() returns a copy of the input padded to size specified by\n * pad_size with value pad_value. If pad_size is positive then the array is\n * padded on the right, if it's negative then on the left. If the absolute\n * value of pad_size is less than or equal to the length of the input then\n * no padding takes place. It is possible to add most 1048576 elements at a\n * time.\n *\n * @input      mixed   Initial array of values to pad.\n * @pad_size   int     New size of the array.\n * @pad_value  mixed   Value to pad if input is less than pad_size.\n *\n * @return     mixed   Returns a copy of the input padded to size specified\n *                     by pad_size with value pad_value. If pad_size is\n *                     positive then the array is padded on the right, if\n *                     it's negative then on the left. If the absolute\n *                     value of pad_size is less than or equal to the\n *                     length of the input then no padding takes place.\n */", 
"array_pop", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.array-pop.php )\n *\n * array_pop() pops and returns the last value of the array, shortening\n * the array by one element. If array is empty (or is not an array), NULL\n * will be returned. Will additionally produce a Warning when called on a\n * non-array. This function will reset() the array pointer after use.\n *\n * @array      mixed   The array to get the value from.\n *\n * @return     mixed   Returns the last value of array. If array is empty\n *                     (or is not an array), NULL will be returned.\n */", 
"array_product", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-product.php )\n *\n * array_product() returns the product of values in an array.\n *\n * @array      mixed   The array.\n *\n * @return     mixed   Returns the product as an integer or float.\n */", 
"array_push", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), "var", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-push.php )\n *\n * array_push() treats array as a stack, and pushes the passed variables\n * onto the end of array. The length of array increases by the number of\n * variables pushed. Has the same effect as:\n *\n * repeated for each var. If you use array_push() to add one element to\n * the array it's better to use $array[] = because in that way there is no\n * overhead of calling a function. array_push() will raise a warning if the\n * first argument is not an array. This differs from the $var[] behaviour\n * where a new array is created.\n *\n * @array      mixed   The input array.\n * @var        mixed   The pushed value.\n *\n * @return     mixed   Returns the new number of elements in the array.\n */", 
"array_rand", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "num_req", T(Int32), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.array-rand.php )\n *\n * Picks one ore more random entries out of an array, and returns the key\n * (or keys) of the random entries.\n *\n * @input      mixed   The input array.\n * @num_req    int     Specifies how many entries you want to pick. Trying\n *                     to pick more elements than there are in the array\n *                     will result in an E_WARNING level error.\n *\n * @return     mixed   If you are picking only one entry, array_rand()\n *                     returns the key for a random entry. Otherwise, it\n *                     returns an array of keys for the random entries.\n *                     This is done so that you can pick random keys as\n *                     well as values out of the array.\n */", 
"array_reduce", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), "callback", T(Variant), NULL, NULL, S(0), "initial", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.array-reduce.php )\n *\n * array_reduce() applies iteratively the function function to the\n * elements of the array input, so as to reduce the array to a single\n * value.\n *\n * @input      mixed   The input array.\n * @callback   mixed   The callback function.\n * @initial    mixed   If the optional initial is available, it will be\n *                     used at the beginning of the process, or as a final\n *                     result in case the array is empty.\n *\n * @return     mixed   Returns the resulting value.\n *\n *                     If the array is empty and initial is not passed,\n *                     array_reduce() returns NULL.\n */", 
"array_reverse", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(0), "preserve_keys", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-reverse.php )\n *\n * Takes an input array and returns a new array with the order of the\n * elements reversed.\n *\n * @array      mixed   The input array.\n * @preserve_keys\n *             bool    If set to TRUE keys are preserved.\n *\n * @return     mixed   Returns the reversed array.\n */", 
"array_search", T(Variant), S(0), "needle", T(Variant), NULL, NULL, S(0), "haystack", T(Variant), NULL, NULL, S(0), "strict", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-search.php )\n *\n * Searches haystack for needle.\n *\n * @needle     mixed   The searched value.\n *\n *                     If needle is a string, the comparison is done in a\n *                     case-sensitive manner.\n * @haystack   mixed   The array.\n * @strict     bool    If the third parameter strict is set to TRUE then\n *                     the array_search() function will search for\n *                     identical elements in the haystack. This means it\n *                     will also check the types of the needle in the\n *                     haystack, and objects must be the same instance.\n *\n * @return     mixed   Returns the key for needle if it is found in the\n *                     array, FALSE otherwise.\n *\n *                     If needle is found in haystack more than once, the\n *                     first matching key is returned. To return the keys\n *                     for all matching values, use array_keys() with the\n *                     optional search_value parameter instead. WarningThis\n *                     function may return Boolean FALSE, but may also\n *                     return a non-Boolean value which evaluates to FALSE,\n *                     such as 0 or \"\". Please read the section on Booleans\n *                     for more information. Use the === operator for\n *                     testing the return value of this function.\n */", 
"array_shift", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.array-shift.php )\n *\n * array_shift() shifts the first value of the array off and returns it,\n * shortening the array by one element and moving everything down. All\n * numerical array keys will be modified to start counting from zero while\n * literal keys won't be touched. This function will reset() the array\n * pointer after use.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the shifted value, or NULL if array is empty\n *                     or is not an array.\n */", 
"array_slice", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(0), "offset", T(Int32), NULL, NULL, S(0), "length", T(Variant), "N;", "null", S(0), "preserve_keys", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-slice.php )\n *\n * array_slice() returns the sequence of elements from the array array as\n * specified by the offset and length parameters. This function will\n * reset() the array pointer after use.\n *\n * @array      mixed   The input array.\n * @offset     int     If offset is non-negative, the sequence will start\n *                     at that offset in the array. If offset is negative,\n *                     the sequence will start that far from the end of the\n *                     array.\n * @length     mixed   If length is given and is positive, then the\n *                     sequence will have that many elements in it. If\n *                     length is given and is negative then the sequence\n *                     will stop that many elements from the end of the\n *                     array. If it is omitted, then the sequence will have\n *                     everything from offset up until the end of the\n *                     array.\n * @preserve_keys\n *             bool    Note that array_slice() will reorder and reset the\n *                     array indices by default. You can change this\n *                     behaviour by setting preserve_keys to TRUE.\n *\n * @return     mixed   Returns the slice.\n */", 
"array_splice", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(1), "offset", T(Int32), NULL, NULL, S(0), "length", T(Variant), "N;", "null", S(0), "replacement", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.array-splice.php )\n *\n * Removes the elements designated by offset and length from the input\n * array, and replaces them with the elements of the replacement array, if\n * supplied.\n *\n * Note that numeric keys in input are not preserved. If replacement is\n * not an array, it will be typecast to one (i.e. (array) $parameter). This\n * may result in unexpected behavior when using an object or NULL\n * replacement.\n *\n * @input      mixed   The input array.\n * @offset     int     If offset is positive then the start of removed\n *                     portion is at that offset from the beginning of the\n *                     input array. If offset is negative then it starts\n *                     that far from the end of the input array.\n * @length     mixed   If length is omitted, removes everything from offset\n *                     to the end of the array. If length is specified and\n *                     is positive, then that many elements will be\n *                     removed. If length is specified and is negative then\n *                     the end of the removed portion will be that many\n *                     elements from the end of the array. Tip: to remove\n *                     everything from offset to the end of the array when\n *                     replacement is also specified, use count($input) for\n *                     length.\n * @replacement\n *             mixed   If replacement array is specified, then the removed\n *                     elements are replaced with elements from this array.\n *\n *                     If offset and length are such that nothing is\n *                     removed, then the elements from the replacement\n *                     array are inserted in the place specified by the\n *                     offset. Note that keys in replacement array are not\n *                     preserved.\n *\n *                     If replacement is just one element it is not\n *                     necessary to put array() around it, unless the\n *                     element is an array itself, an object or NULL.\n *\n * @return     mixed   Returns the array consisting of the extracted\n *                     elements.\n */", 
"array_sum", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-sum.php )\n *\n * array_sum() returns the sum of values in an array.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the sum of values as an integer or float.\n */", 
"array_unique", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(0), "sort_flags", T(Int32), "i:2;", "2", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-unique.php )\n *\n * Takes an input array and returns a new array without duplicate values.\n *\n * Note that keys are preserved. array_unique() sorts the values treated\n * as string at first, then will keep the first key encountered for every\n * value, and ignore all following keys. It does not mean that the key of\n * the first related value from the unsorted array will be kept. Two\n * elements are considered equal if and only if (string) $elem1 ===\n * (string) $elem2. In words: when the string representation is the same.\n * The first element will be used.\n *\n * @array      mixed   The input array.\n * @sort_flags int     The optional second parameter sort_flags may be used\n *                     to modify the sorting behavior using these values:\n *\n *                     Sorting type flags: SORT_REGULAR - compare items\n *                     normally (don't change types) SORT_NUMERIC - compare\n *                     items numerically SORT_STRING - compare items as\n *                     strings SORT_LOCALE_STRING - compare items as\n *                     strings, based on the current locale.\n *\n * @return     mixed   Returns the filtered array.\n */", 
"array_unshift", T(Int32), S(0), "array", T(Variant), NULL, NULL, S(1), "var", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-unshift.php )\n *\n * array_unshift() prepends passed elements to the front of the array.\n * Note that the list of elements is prepended as a whole, so that the\n * prepended elements stay in the same order. All numerical array keys will\n * be modified to start counting from zero while literal keys won't be\n * touched.\n *\n * @array      mixed   The input array.\n * @var        mixed   The prepended variable.\n *\n * @return     int     Returns the new number of elements in the array.\n */", 
"array_values", T(Variant), S(0), "input", T(Variant), NULL, NULL, S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.array-values.php )\n *\n * array_values() returns all the values from the input array and indexes\n * numerically the array.\n *\n * @input      mixed   The array.\n *\n * @return     mixed   Returns an indexed array of values.\n */", 
"array_walk_recursive", T(Boolean), S(0), "input", T(Variant), NULL, NULL, S(1), "funcname", T(Variant), NULL, NULL, S(0), "userdata", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-walk-recursive.php )\n *\n * Applies the user-defined function funcname to each element of the input\n * array. This function will recur into deeper arrays.\n *\n * @input      mixed   The input array.\n * @funcname   mixed   Typically, funcname takes on two parameters. The\n *                     input parameter's value being the first, and the\n *                     key/index second.\n *\n *                     If funcname needs to be working with the actual\n *                     values of the array, specify the first parameter of\n *                     funcname as a reference. Then, any changes made to\n *                     those elements will be made in the original array\n *                     itself.\n * @userdata   mixed   If the optional userdata parameter is supplied, it\n *                     will be passed as the third parameter to the\n *                     callback funcname.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"array_walk", T(Boolean), S(0), "input", T(Variant), NULL, NULL, S(1), "funcname", T(Variant), NULL, NULL, S(0), "userdata", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.array-walk.php )\n *\n *\n * @input      mixed   The input array.\n * @funcname   mixed   Typically, funcname takes on two parameters. The\n *                     array parameter's value being the first, and the\n *                     key/index second.\n *\n *                     If funcname needs to be working with the actual\n *                     values of the array, specify the first parameter of\n *                     funcname as a reference. Then, any changes made to\n *                     those elements will be made in the original array\n *                     itself.\n *\n *                     Users may not change the array itself from the\n *                     callback function. e.g. Add/delete elements, unset\n *                     elements, etc. If the array that array_walk() is\n *                     applied to is changed, the behavior of this function\n *                     is undefined, and unpredictable.\n * @userdata   mixed   If the optional userdata parameter is supplied, it\n *                     will be passed as the third parameter to the\n *                     callback funcname.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"compact", T(Array), S(0), "varname", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.compact.php )\n *\n * Creates an array containing variables and their values.\n *\n * For each of these, compact() looks for a variable with that name in the\n * current symbol table and adds it to the output array such that the\n * variable name becomes the key and the contents of the variable become\n * the value for that key. In short, it does the opposite of extract().\n *\n * Any strings that are not set will simply be skipped.\n *\n * @varname    mixed   compact() takes a variable number of parameters.\n *                     Each parameter can be either a string containing the\n *                     name of the variable, or an array of variable names.\n *                     The array can contain other arrays of variable names\n *                     inside it; compact() handles it recursively.\n *\n * @return     map     Returns the output array with all the variables\n *                     added to it.\n */", 
"shuffle", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.shuffle.php )\n *\n * This function shuffles (randomizes the order of the elements in) an\n * array.\n *\n * @array      mixed   The array.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"count", T(Int32), S(0), "var", T(Variant), NULL, NULL, S(0), "recursive", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.count.php )\n *\n * Counts all elements in an array, or properties in an object.\n *\n * For objects, if you have SPL installed, you can hook into count() by\n * implementing interface Countable. The interface has exactly one method,\n * count(), which returns the return value for the count() function.\n *\n * Please see the Array section of the manual for a detailed explanation\n * of how arrays are implemented and used in PHP.\n *\n * @var        mixed   The array.\n * @recursive  bool    If the optional mode parameter is set to\n *                     COUNT_RECURSIVE (or 1), count() will recursively\n *                     count the array. This is particularly useful for\n *                     counting all the elements of a multidimensional\n *                     array. count() does not detect infinite recursion.\n *\n * @return     int     Returns the number of elements in var, which is\n *                     typically an array, since anything else will have\n *                     one element.\n *\n *                     If var is not an array or an object with\n *                     implemented Countable interface, 1 will be returned.\n *                     There is one exception, if var is NULL, 0 will be\n *                     returned. Caution\n *\n *                     count() may return 0 for a variable that isn't set,\n *                     but it may also return 0 for a variable that has\n *                     been initialized with an empty array. Use isset() to\n *                     test if a variable is set.\n */", 
"sizeof", T(Int32), S(0), "var", T(Variant), NULL, NULL, S(0), "recursive", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.sizeof.php )\n *\n *\n * @var        mixed\n * @recursive  bool\n *\n * @return     int\n */", 
"each", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.each.php )\n *\n * Return the current key and value pair from an array and advance the\n * array cursor.\n *\n * After each() has executed, the array cursor will be left on the next\n * element of the array, or past the last element if it hits the end of the\n * array. You have to use reset() if you want to traverse the array again\n * using each.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the current key and value pair from the\n *                     array array. This pair is returned in a four-element\n *                     array, with the keys 0, 1, key, and value. Elements\n *                     0 and key contain the key name of the array element,\n *                     and 1 and value contain the data.\n *\n *                     If the internal pointer for the array points past\n *                     the end of the array contents, each() returns FALSE.\n */", 
"current", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.current.php )\n *\n * Every array has an internal pointer to its \"current\" element, which is\n * initialized to the first element inserted into the array.\n *\n * @array      mixed   The array.\n *\n * @return     mixed   The current() function simply returns the value of\n *                     the array element that's currently being pointed to\n *                     by the internal pointer. It does not move the\n *                     pointer in any way. If the internal pointer points\n *                     beyond the end of the elements list or the array is\n *                     empty, current() returns FALSE. WarningThis function\n *                     may return Boolean FALSE, but may also return a\n *                     non-Boolean value which evaluates to FALSE, such as\n *                     0 or \"\". Please read the section on Booleans for\n *                     more information. Use the === operator for testing\n *                     the return value of this function.\n */", 
"hphp_current_ref", T(Variant), S(1), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-current-ref.php )\n *\n * Similar to current(), but hphp_current_ref() returns a reference to the\n * current value in the array.\n *\n * @array      mixed   (output) The array.\n *\n * @return     mixed   Reference to the current value in the array.\n */", 
"next", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.next.php )\n *\n * next() behaves like current(), with one difference. It advances the\n * internal array pointer one place forward before returning the element\n * value. That means it returns the next array value and advances the\n * internal array pointer by one.\n *\n * @array      mixed   The array being affected.\n *\n * @return     mixed   Returns the array value in the next place that's\n *                     pointed to by the internal array pointer, or FALSE\n *                     if there are no more elements. WarningThis function\n *                     may return Boolean FALSE, but may also return a\n *                     non-Boolean value which evaluates to FALSE, such as\n *                     0 or \"\". Please read the section on Booleans for\n *                     more information. Use the === operator for testing\n *                     the return value of this function.\n */", 
"pos", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pos.php )\n *\n *\n * @array      mixed\n *\n * @return     mixed\n */", 
"prev", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.prev.php )\n *\n * Rewind the internal array pointer.\n *\n * prev() behaves just like next(), except it rewinds the internal array\n * pointer one place instead of advancing it.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the array value in the previous place that's\n *                     pointed to by the internal array pointer, or FALSE\n *                     if there are no more elements.\n */", 
"reset", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.reset.php )\n *\n * reset() rewinds array's internal pointer to the first element and\n * returns the value of the first array element.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns the value of the first array element, or\n *                     FALSE if the array is empty.\n */", 
"end", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.end.php )\n *\n * end() advances array's internal pointer to the last element, and\n * returns its value.\n *\n * @array      mixed   The array. This array is passed by reference because\n *                     it is modified by the function. This means you must\n *                     pass it a real variable and not a function returning\n *                     an array because only actual variables may be passed\n *                     by reference.\n *\n * @return     mixed   Returns the value of the last element or FALSE for\n *                     empty array.\n */", 
"key", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.key.php )\n *\n * key() returns the index element of the current array position.\n *\n * @array      mixed   The array.\n *\n * @return     mixed   The key() function simply returns the key of the\n *                     array element that's currently being pointed to by\n *                     the internal pointer. It does not move the pointer\n *                     in any way. If the internal pointer points beyond\n *                     the end of the elements list or the array is empty,\n *                     key() returns NULL.\n */", 
"hphp_get_iterator", T(Variant), S(0), "iterable", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-get-iterator.php )\n *\n * hphp_get_iterator() returns an iterator object for an array or an\n * object.\n *\n * @iterable   mixed   The array or object to iterate on.\n *\n * @return     mixed   The hphp_get_iterator() function returns a non\n *                     mutable iterator object for an array or an object.\n */", 
"hphp_get_mutable_iterator", T(Variant), S(0), "iterable", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.hphp-get-mutable-iterator.php )\n *\n * hphp_get_mutable_iterator() returns an iterator object for an array or\n * an object.\n *\n * @iterable   mixed   The array or object to iterate on.\n *\n * @return     mixed   The hphp_get_mutable_iterator() function returns an\n *                     iterator object for an array or an object. It could\n *                     be mutable, but only for arrays and objects that are\n *                     not instances of Iterator or IteratorAggregate.\n */", 
"in_array", T(Boolean), S(0), "needle", T(Variant), NULL, NULL, S(0), "haystack", T(Variant), NULL, NULL, S(0), "strict", T(Boolean), "b:0;", "false", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.in-array.php )\n *\n * Searches haystack for needle.\n *\n * @needle     mixed   The searched value.\n *\n *                     If needle is a string, the comparison is done in a\n *                     case-sensitive manner.\n * @haystack   mixed   The array.\n * @strict     bool    If the third parameter strict is set to TRUE then\n *                     the in_array() function will also check the types of\n *                     the needle in the haystack.\n *\n * @return     bool    Returns TRUE if needle is found in the array, FALSE\n *                     otherwise.\n */", 
"range", T(Variant), S(0), "low", T(Variant), NULL, NULL, S(0), "high", T(Variant), NULL, NULL, S(0), "step", T(Variant), "i:1;", "1", S(0), NULL, S(1064960), "/**\n * ( excerpt from http://php.net/manual/en/function.range.php )\n *\n * Create an array containing a range of elements.\n *\n * @low        mixed   Low value.\n * @high       mixed   High value.\n * @step       mixed   If a step value is given, it will be used as the\n *                     increment between elements in the sequence. step\n *                     should be given as a positive number. If not\n *                     specified, step will default to 1.\n *\n * @return     mixed   Returns an array of elements from low to high,\n *                     inclusive. If low > high, the sequence will be from\n *                     high to low.\n */", 
"array_diff", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff.php )\n *\n * Compares array1 against array2 and returns the difference.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */", 
"array_udiff", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "data_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-udiff.php )\n *\n * Computes the difference of arrays by using a callback function for data\n * comparison. This is unlike array_diff() which uses an internal function\n * for comparing the data.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are not present in any of the other arguments.\n */", 
"array_diff_assoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-assoc.php )\n *\n * Compares array1 against array2 and returns the difference. Unlike\n * array_diff() the array keys are used in the comparison.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n *\n * @return     mixed   Returns an array containing all the values from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */", 
"array_diff_uassoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "key_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-uassoc.php )\n *\n * Compares array1 against array2 and returns the difference. Unlike\n * array_diff() the array keys are used in the comparison.\n *\n * Unlike array_diff_assoc() an user supplied callback function is used\n * for the indices comparison, not internal function.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n * @key_compare_func\n *             mixed   More arrays to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */", 
"array_udiff_assoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "data_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-udiff-assoc.php )\n *\n * Computes the difference of arrays with additional index check, compares\n * data by a callback function. Please note that this function only checks\n * one dimension of a n-dimensional array. Of course you can check deeper\n * dimensions by using, for example, array_udiff_assoc($array1[0],\n * $array2[0], \"some_comparison_func\");.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n * @return     mixed   array_udiff_assoc() returns an array containing all\n *                     the values from array1 that are not present in any\n *                     of the other arguments. Note that the keys are used\n *                     in the comparison unlike array_diff() and\n *                     array_udiff(). The comparison of arrays' data is\n *                     performed by using an user-supplied callback. In\n *                     this aspect the behaviour is opposite to the\n *                     behaviour of array_diff_assoc() which uses internal\n *                     function for comparison.\n */", 
"array_udiff_uassoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "data_compare_func", T(Variant), NULL, NULL, S(0), "key_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-udiff-uassoc.php\n * )\n *\n * Computes the difference of arrays with additional index check, compares\n * data and indexes by a callback function.\n *\n * Note that the keys are used in the comparison unlike array_diff() and\n * array_udiff().\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n *                     The comparison of arrays' data is performed by\n *                     using an user-supplied callback : data_compare_func.\n *                     In this aspect the behaviour is opposite to the\n *                     behaviour of array_diff_assoc() which uses internal\n *                     function for comparison.\n * @key_compare_func\n *             mixed   The comparison of keys (indices) is done also by the\n *                     callback function key_compare_func. This behaviour\n *                     is unlike what array_udiff_assoc() does, since the\n *                     latter compares the indices by using an internal\n *                     function.\n *\n * @return     mixed   Returns an array containing all the values from\n *                     array1 that are not present in any of the other\n *                     arguments.\n */", 
"array_diff_key", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-key.php )\n *\n * Compares the keys from array1 against the keys from array2 and returns\n * the difference. This function is like array_diff() except the comparison\n * is done on the keys instead of the values.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 whose keys are not present in any of the\n *                     other arrays.\n */", 
"array_diff_ukey", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "key_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-diff-ukey.php )\n *\n * Compares the keys from array1 against the keys from array2 and returns\n * the difference. This function is like array_diff() except the comparison\n * is done on the keys instead of the values.\n *\n * Unlike array_diff_key() an user supplied callback function is used for\n * the indices comparison, not internal function.\n *\n * @array1     mixed   The array to compare from\n * @array2     mixed   An array to compare against\n * @key_compare_func\n *             mixed   More arrays to compare against\n *\n * @return     mixed   Returns an array containing all the entries from\n *                     array1 that are not present in any of the other\n *                     arrays.\n */", 
"array_intersect", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-intersect.php )\n *\n * array_intersect() returns an array containing all the values of array1\n * that are present in all the arguments. Note that keys are preserved.\n *\n * @array1     mixed   The array with master values to check.\n * @array2     mixed   An array to compare values against.\n *\n * @return     mixed   Returns an array containing all of the values in\n *                     array1 whose values exist in all of the parameters.\n */", 
"array_uintersect", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "data_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.array-uintersect.php )\n *\n * Computes the intersection of arrays, compares data by a callback\n * function.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   The callback comparison function.\n *\n *                     The user supplied callback function is used for\n *                     comparison. It must return an integer less than,\n *                     equal to, or greater than zero if the first argument\n *                     is considered to be respectively less than, equal\n *                     to, or greater than the second.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are present in all the arguments.\n */", 
"array_intersect_assoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-intersect-assoc.php )\n *\n *\n * @array1     mixed   The array with master values to check.\n * @array2     mixed   An array to compare values against.\n *\n * @return     mixed   Returns an associative array containing all the\n *                     values in array1 that are present in all of the\n *                     arguments.\n */", 
"array_intersect_uassoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "key_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-intersect-uassoc.php )\n *\n * array_intersect_uassoc() returns an array containing all the values of\n * array1 that are present in all the arguments. Note that the keys are\n * used in the comparison unlike in array_intersect().\n *\n * The index comparison is done by a user supplied callback function. It\n * must return an integer less than, equal to, or greater than zero if the\n * first argument is considered to be respectively less than, equal to, or\n * greater than the second.\n *\n * @array1     mixed   Initial array for comparison of the arrays.\n * @array2     mixed   First array to compare keys against.\n * @key_compare_func\n *             mixed   Variable list of array arguments to compare values\n *                     against.\n *\n * @return     mixed   Returns the values of array1 whose values exist in\n *                     all of the arguments.\n */", 
"array_uintersect_assoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "data_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-uintersect-assoc.php )\n *\n * Computes the intersection of arrays with additional index check,\n * compares data by a callback function.\n *\n * Note that the keys are used in the comparison unlike in\n * array_uintersect(). The data is compared by using a callback function.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   For comparison is used the user supplied callback\n *                     function. It must return an integer less than, equal\n *                     to, or greater than zero if the first argument is\n *                     considered to be respectively less than, equal to,\n *                     or greater than the second.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are present in all the arguments.\n */", 
"array_uintersect_uassoc", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "data_compare_func", T(Variant), NULL, NULL, S(0), "key_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-uintersect-uassoc.php )\n *\n * Computes the intersection of arrays with additional index check,\n * compares data and indexes by a callback functions Note that the keys are\n * used in the comparison unlike in array_uintersect(). Both the data and\n * the indexes are compared by using separate callback functions.\n *\n * @array1     mixed   The first array.\n * @array2     mixed   The second array.\n * @data_compare_func\n *             mixed   For comparison is used the user supplied callback\n *                     function. It must return an integer less than, equal\n *                     to, or greater than zero if the first argument is\n *                     considered to be respectively less than, equal to,\n *                     or greater than the second.\n * @key_compare_func\n *             mixed   Key comparison callback function.\n *\n * @return     mixed   Returns an array containing all the values of array1\n *                     that are present in all the arguments.\n */", 
"array_intersect_key", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), NULL, S(1196032), "/**\n * ( excerpt from http://php.net/manual/en/function.array-intersect-key.php\n * )\n *\n * array_intersect_key() returns an array containing all the entries of\n * array1 which have keys that are present in all the arguments.\n *\n * @array1     mixed   The array with master keys to check.\n * @array2     mixed   An array to compare keys against.\n *\n * @return     mixed   Returns an associative array containing all the\n *                     entries of array1 which have keys that are present\n *                     in all arguments.\n */", 
"array_intersect_ukey", T(Variant), S(0), "array1", T(Variant), NULL, NULL, S(0), "array2", T(Variant), NULL, NULL, S(0), "key_compare_func", T(Variant), NULL, NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.array-intersect-ukey.php )\n *\n * array_intersect_ukey() returns an array containing all the values of\n * array1 which have matching keys that are present in all the arguments.\n *\n * This comparison is done by a user supplied callback function. It must\n * return an integer less than, equal to, or greater than zero if the first\n * key is considered to be respectively less than, equal to, or greater\n * than the second.\n *\n * @array1     mixed   Initial array for comparison of the arrays.\n * @array2     mixed   First array to compare keys against.\n * @key_compare_func\n *             mixed   Variable list of array arguments to compare keys\n *                     against.\n *\n * @return     mixed   Returns the values of array1 whose keys exist in all\n *                     the arguments.\n */", 
"sort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "sort_flags", T(Int32), "i:0;", "0", S(0), "use_collator", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sort.php )\n *\n * This function sorts an array. Elements will be arranged from lowest to\n * highest when this function has completed.\n *\n * @array      mixed   The input array.\n * @sort_flags int     The optional second parameter sort_flags may be used\n *                     to modify the sorting behavior using these values:\n *\n *                     Sorting type flags: SORT_REGULAR - compare items\n *                     normally (don't change types) SORT_NUMERIC - compare\n *                     items numerically SORT_STRING - compare items as\n *                     strings SORT_LOCALE_STRING - compare items as\n *                     strings, based on the current locale. Added in PHP\n *                     4.4.0 and 5.0.2, it uses the system locale, which\n *                     can be changed using setlocale().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"rsort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "sort_flags", T(Int32), "i:0;", "0", S(0), "use_collator", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rsort.php )\n *\n * This function sorts an array in reverse order (highest to lowest).\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"asort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "sort_flags", T(Int32), "i:0;", "0", S(0), "use_collator", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.asort.php )\n *\n * This function sorts an array such that array indices maintain their\n * correlation with the array elements they are associated with. This is\n * used mainly when sorting associative arrays where the actual element\n * order is significant.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"arsort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "sort_flags", T(Int32), "i:0;", "0", S(0), "use_collator", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.arsort.php )\n *\n * This function sorts an array such that array indices maintain their\n * correlation with the array elements they are associated with.\n *\n * This is used mainly when sorting associative arrays where the actual\n * element order is significant.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n * @use_collator\n *             bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"ksort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "sort_flags", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ksort.php )\n *\n * Sorts an array by key, maintaining key to data correlations. This is\n * useful mainly for associative arrays.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"krsort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "sort_flags", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.krsort.php )\n *\n * Sorts an array by key in reverse order, maintaining key to data\n * correlations. This is useful mainly for associative arrays.\n *\n * @array      mixed   The input array.\n * @sort_flags int     You may modify the behavior of the sort using the\n *                     optional parameter sort_flags, for details see\n *                     sort().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"usort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "cmp_function", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.usort.php )\n *\n * This function will sort an array by its values using a user-supplied\n * comparison function. If the array you wish to sort needs to be sorted by\n * some non-trivial criteria, you should use this function.\n *\n * If two members compare as equal, their order in the sorted array is\n * undefined. This function assigns new keys to the elements in array. It\n * will remove any existing keys that may have been assigned, rather than\n * just reordering the keys.\n *\n * @array      mixed   The input array.\n * @cmp_function\n *             mixed   The comparison function must return an integer less\n *                     than, equal to, or greater than zero if the first\n *                     argument is considered to be respectively less than,\n *                     equal to, or greater than the second.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"uasort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "cmp_function", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.uasort.php )\n *\n * This function sorts an array such that array indices maintain their\n * correlation with the array elements they are associated with, using a\n * user-defined comparison function.\n *\n * This is used mainly when sorting associative arrays where the actual\n * element order is significant.\n *\n * @array      mixed   The input array.\n * @cmp_function\n *             mixed   See usort() and uksort() for examples of\n *                     user-defined comparison functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"uksort", T(Boolean), S(0), "array", T(Variant), NULL, NULL, S(1), "cmp_function", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.uksort.php )\n *\n * uksort() will sort the keys of an array using a user-supplied\n * comparison function. If the array you wish to sort needs to be sorted by\n * some non-trivial criteria, you should use this function.\n *\n * @array      mixed   The input array.\n * @cmp_function\n *             mixed   The callback comparison function.\n *\n *                     Function cmp_function should accept two parameters\n *                     which will be filled by pairs of array keys. The\n *                     comparison function must return an integer less\n *                     than, equal to, or greater than zero if the first\n *                     argument is considered to be respectively less than,\n *                     equal to, or greater than the second.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"natsort", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.natsort.php )\n *\n * This function implements a sort algorithm that orders alphanumeric\n * strings in the way a human being would while maintaining key/value\n * associations. This is described as a \"natural ordering\". An example of\n * the difference between this algorithm and the regular computer string\n * sorting algorithms (used in sort()) can be seen in the example below.\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"natcasesort", T(Variant), S(0), "array", T(Variant), NULL, NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.natcasesort.php )\n *\n * natcasesort() is a case insensitive version of natsort().\n *\n * This function implements a sort algorithm that orders alphanumeric\n * strings in the way a human being would while maintaining key/value\n * associations. This is described as a \"natural ordering\".\n *\n * @array      mixed   The input array.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"i18n_loc_get_default", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-get-default.php )\n *\n *\n * @return     string\n */", 
"i18n_loc_set_default", T(Boolean), S(0), "locale", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-set-default.php )\n *\n *\n * @locale     string\n *\n * @return     bool\n */", 
"i18n_loc_set_attribute", T(Boolean), S(0), "attr", T(Int64), NULL, NULL, S(0), "val", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-set-attribute.php )\n *\n *\n * @attr       int\n * @val        int\n *\n * @return     bool\n */", 
"i18n_loc_set_strength", T(Boolean), S(0), "strength", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-set-strength.php )\n *\n *\n * @strength   int\n *\n * @return     bool\n */", 
"i18n_loc_get_error_code", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.i18n-loc-get-error-code.php )\n *\n *\n * @return     mixed\n */", 

#elif EXT_TYPE == 1
"UCOL_DEFAULT", T(Int64),
"UCOL_PRIMARY", T(Int64),
"UCOL_SECONDARY", T(Int64),
"UCOL_TERTIARY", T(Int64),
"UCOL_DEFAULT_STRENGTH", T(Int64),
"UCOL_QUATERNARY", T(Int64),
"UCOL_IDENTICAL", T(Int64),
"UCOL_OFF", T(Int64),
"UCOL_ON", T(Int64),
"UCOL_SHIFTED", T(Int64),
"UCOL_NON_IGNORABLE", T(Int64),
"UCOL_LOWER_FIRST", T(Int64),
"UCOL_UPPER_FIRST", T(Int64),
"UCOL_FRENCH_COLLATION", T(Int64),
"UCOL_ALTERNATE_HANDLING", T(Int64),
"UCOL_CASE_FIRST", T(Int64),
"UCOL_CASE_LEVEL", T(Int64),
"UCOL_NORMALIZATION_MODE", T(Int64),
"UCOL_STRENGTH", T(Int64),
"UCOL_HIRAGANA_QUATERNARY_MODE", T(Int64),
"UCOL_NUMERIC_COLLATION", T(Int64),

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
