/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/use_op_encode/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/use_op_encode/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/use_op_encode/gen-cpp2/module_types_custom_protocol.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/use_op_encode/gen-cpp2/module_data.h"
[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::thrift::compiler::test::MyStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::thrift::compiler::test::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache
#endif


namespace facebook::thrift::compiler::test {

std::string_view MyStruct::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/compiler/test/MyStruct";
}

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int32_t def_field__arg, ::std::int32_t opt_field__arg, ::std::int32_t req_field__arg, ::std::int32_t terse_field__arg) :
    __fbthrift_field_def_field(std::move(def_field__arg)),
    __fbthrift_field_opt_field(std::move(opt_field__arg)),
    __fbthrift_field_req_field(std::move(req_field__arg)),
    __fbthrift_field_terse_field(std::move(terse_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

#ifndef __FBTHRIFT_SEPARATE_SERIALIZATION
#endif

void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_def_field = ::std::int32_t();
  this->__fbthrift_field_opt_field = ::std::int32_t();
  this->__fbthrift_field_req_field = ::std::int32_t();
  this->__fbthrift_field_terse_field = ::std::int32_t();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_terse_field = ::std::int32_t();
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t MyStruct::get_def_field() const {
  return __fbthrift_field_def_field;
}

::std::int32_t& MyStruct::set_def_field(::std::int32_t def_field_) {
  def_field_ref() = def_field_;
  return __fbthrift_field_def_field;
}

const ::std::int32_t* MyStruct::get_opt_field() const& {
  return opt_field_ref().has_value() ? std::addressof(__fbthrift_field_opt_field) : nullptr;
}

::std::int32_t* MyStruct::get_opt_field() & {
  return opt_field_ref().has_value() ? std::addressof(__fbthrift_field_opt_field) : nullptr;
}

::std::int32_t& MyStruct::set_opt_field(::std::int32_t opt_field_) {
  opt_field_ref() = opt_field_;
  return __fbthrift_field_opt_field;
}

::std::int32_t MyStruct::get_req_field() const {
  return __fbthrift_field_req_field;
}

::std::int32_t& MyStruct::set_req_field(::std::int32_t req_field_) {
  req_field_ref() = req_field_;
  return __fbthrift_field_req_field;
}

void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_def_field, b.__fbthrift_field_def_field);
  swap(a.__fbthrift_field_opt_field, b.__fbthrift_field_opt_field);
  swap(a.__fbthrift_field_req_field, b.__fbthrift_field_req_field);
  swap(a.__fbthrift_field_terse_field, b.__fbthrift_field_terse_field);
  swap(a.__isset, b.__isset);
}



} // namespace facebook::thrift::compiler::test

namespace facebook::thrift::compiler::test { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace facebook::thrift::compiler::test
namespace apache::thrift::detail::annotation {
}
