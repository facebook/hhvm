#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr
from libcpp.optional cimport optional as __optional
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
from thrift.py3.types import _IsSet as _fbthrift_IsSet
from thrift.py3.types cimport make_unique
cimport thrift.py3.types
cimport thrift.py3.exceptions
cimport thrift.python.exceptions
import thrift.python.converter
from thrift.python.types import EnumMeta as __EnumMeta
from thrift.python.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.python.types cimport BadEnum as __BadEnum
from thrift.py3.types cimport (
    richcmp as __richcmp,
    init_unicode_from_cpp as __init_unicode_from_cpp,
    set_iter as __set_iter,
    map_iter as __map_iter,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    const_pointer_cast,
    make_const_shared,
    constant_shared_ptr,
)
from thrift.py3.types cimport _ensure_py3_or_raise, _ensure_py3_container_or_raise
cimport thrift.py3.serializer as serializer
from thrift.python.protocol cimport Protocol as __Protocol
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
import importlib
cimport includes.types as _includes_types
import includes.types as _includes_types

import module.thrift_types as _fbthrift_python_types
from module.thrift_enums import (
    MyEnumA,
    AnnotatedEnum,
    AnnotatedEnum2,
    MyEnumB,
)
from module.types_impl_FBTHRIFT_ONLY_DO_NOT_USE import (
    __SimpleUnionType,
    __ComplexUnionType,
    __FloatUnionType,
)

from module.containers_FBTHRIFT_ONLY_DO_NOT_USE import (
    Map__string_i64,
    Map__Empty_MyStruct,
    List__Map__Empty_MyStruct,
    List__List__Map__Empty_MyStruct,
    List__List__List__Map__Empty_MyStruct,
    List__MyEnumA,
    Set__MyStruct,
    List__ComplexUnion,
    List__string,
    Set__List__string,
    Set__List__List__Map__Empty_MyStruct,
    Map__i32_List__string,
    List__bool,
    List__i32,
    List__List__i32,
    List__List__List__i32,
    List__List__List__List__i32,
    Set__List__i32,
    Set__string,
    List__Set__string,
    Map__List__Set__string_string,
    Map__Set__List__i32_Map__List__Set__string_string,
    List__binary,
    Map__MyEnumA_string,
    Set__i64,
    Map__string_i32,
    List__SimpleUnion,
    Set__SimpleUnion,
    List__Set__SimpleUnion,
    Map__string_bool,
    Set__i32,
    Map__string_Map__string_i32,
    Map__string_Map__string_Map__string_i32,
    List__Set__i32,
    Map__string_List__i32,
    Set__bool,
    Set__Set__bool,
    Set__Set__Set__bool,
    folly_small_vector_int64_t_8__List__i64,
    folly_sorted_vector_set_std_string__Set__string,
    FakeMap__Map__i64_double,
    std_unordered_map_std_string_containerStruct__Map__string_containerStruct,
    std_list__List__i32,
    std_deque__List__string,
    folly_sorted_vector_set__Set__string,
    folly_sorted_vector_map__Map__i64_string,
    Map__string_folly_IOBuf__binary,
    Map__string_std_unique_ptr_folly_IOBuf__binary,
    Map__i32_string,
    List__Map__string_i32,
    Map__i16_string,
    List__Map__i16_string,
    List__MyStruct,
)

_fbthrift__module_name__ = "module.types"

cdef object get_types_reflection():
    return importlib.import_module(
        "module.types_reflection"
    )

@__cython.auto_pickle(False)
@__cython.final
cdef class Empty(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(Empty self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cEmpty]()
        self._fields_setter = _fbthrift_types_fields.__Empty_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(Empty self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("Empty", {
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cEmpty] cpp_obj):
        __fbthrift_inst = <Empty>Empty.__new__(Empty)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(Empty self):
        return super().__hash__()

    def __repr__(Empty self):
        return super().__repr__()

    def __str__(Empty self):
        return super().__str__()


    def __copy__(Empty self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cEmpty](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<Empty>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__Empty()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cEmpty].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.Empty"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cEmpty](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(Empty self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cEmpty](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(Empty self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cEmpty]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cEmpty](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.Empty,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.Empty, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class ASimpleStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(ASimpleStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cASimpleStruct]()
        self._fields_setter = _fbthrift_types_fields.__ASimpleStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(ASimpleStruct self, **kwargs):
        if not kwargs:
            return self
        cdef ASimpleStruct __fbthrift_inst = ASimpleStruct.__new__(ASimpleStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cASimpleStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ASimpleStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ASimpleStruct", {
          "boolField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).boolField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cASimpleStruct] cpp_obj):
        __fbthrift_inst = <ASimpleStruct>ASimpleStruct.__new__(ASimpleStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline boolField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).boolField_ref().value()

    @property
    def boolField(self):
        return self.boolField_impl()


    def __hash__(ASimpleStruct self):
        return super().__hash__()

    def __repr__(ASimpleStruct self):
        return super().__repr__()

    def __str__(ASimpleStruct self):
        return super().__str__()


    def __copy__(ASimpleStruct self):
        return self

    def __eq__(ASimpleStruct self, other):
        if not isinstance(other, ASimpleStruct):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<ASimpleStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(ASimpleStruct self, other):
        if not isinstance(other, ASimpleStruct):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<ASimpleStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__ASimpleStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cASimpleStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ASimpleStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cASimpleStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ASimpleStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cASimpleStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ASimpleStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cASimpleStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cASimpleStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.ASimpleStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ASimpleStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class ASimpleStructNoexcept(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(ASimpleStructNoexcept self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cASimpleStructNoexcept]()
        self._fields_setter = _fbthrift_types_fields.__ASimpleStructNoexcept_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(ASimpleStructNoexcept self, **kwargs):
        if not kwargs:
            return self
        cdef ASimpleStructNoexcept __fbthrift_inst = ASimpleStructNoexcept.__new__(ASimpleStructNoexcept)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cASimpleStructNoexcept](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ASimpleStructNoexcept_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ASimpleStructNoexcept", {
          "boolField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).boolField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cASimpleStructNoexcept] cpp_obj):
        __fbthrift_inst = <ASimpleStructNoexcept>ASimpleStructNoexcept.__new__(ASimpleStructNoexcept)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline boolField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).boolField_ref().value()

    @property
    def boolField(self):
        return self.boolField_impl()


    def __hash__(ASimpleStructNoexcept self):
        return super().__hash__()

    def __repr__(ASimpleStructNoexcept self):
        return super().__repr__()

    def __str__(ASimpleStructNoexcept self):
        return super().__str__()


    def __copy__(ASimpleStructNoexcept self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cASimpleStructNoexcept](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<ASimpleStructNoexcept>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__ASimpleStructNoexcept()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cASimpleStructNoexcept].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ASimpleStructNoexcept"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cASimpleStructNoexcept](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ASimpleStructNoexcept self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cASimpleStructNoexcept](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ASimpleStructNoexcept self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cASimpleStructNoexcept]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cASimpleStructNoexcept](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.ASimpleStructNoexcept,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ASimpleStructNoexcept, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class MyStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(MyStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cMyStruct]()
        self._fields_setter = _fbthrift_types_fields.__MyStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(MyStruct self, **kwargs):
        if not kwargs:
            return self
        cdef MyStruct __fbthrift_inst = MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cMyStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MyStruct", {
          "MyBoolField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBoolField_ref().has_value(),
          "MyIntField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyIntField_ref().has_value(),
          "MyStringField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyStringField_ref().has_value(),
          "MyStringField2": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyStringField2_ref().has_value(),
          "MyBinaryField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField_ref().has_value(),
          "MyBinaryField2": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField2_ref().has_value(),
          "MyBinaryField3": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField3_ref().has_value(),
          "MyBinaryListField4": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryListField4_ref().has_value(),
          "MyMapEnumAndInt": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyMapEnumAndInt_ref().has_value(),
          "MyCustomField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyCustomField_ref().has_value(),
          "MyOptCustomField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyOptCustomField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline MyBoolField_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBoolField_ref().value()

    @property
    def MyBoolField(self):
        return self.MyBoolField_impl()

    cdef inline MyIntField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyIntField_ref().value()

    @property
    def MyIntField(self):
        return self.MyIntField_impl()

    cdef inline MyStringField_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyStringField_ref().value()).decode('UTF-8')

    @property
    def MyStringField(self):
        return self.MyStringField_impl()

    cdef inline MyStringField2_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyStringField2_ref().value()).decode('UTF-8')

    @property
    def MyStringField2(self):
        return self.MyStringField2_impl()

    cdef inline MyBinaryField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField_ref().value()

    @property
    def MyBinaryField(self):
        return self.MyBinaryField_impl()

    cdef inline MyBinaryField2_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField2_ref().has_value():
            return None
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField2_ref().value_unchecked()

    @property
    def MyBinaryField2(self):
        return self.MyBinaryField2_impl()

    cdef inline MyBinaryField3_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryField3_ref().value()

    @property
    def MyBinaryField3(self):
        return self.MyBinaryField3_impl()

    cdef inline MyBinaryListField4_impl(self):
        if self.__fbthrift_cached_MyBinaryListField4 is None:
            self.__fbthrift_cached_MyBinaryListField4 = List__binary__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyBinaryListField4_ref().ref())
        return self.__fbthrift_cached_MyBinaryListField4

    @property
    def MyBinaryListField4(self):
        return self.MyBinaryListField4_impl()

    cdef inline MyMapEnumAndInt_impl(self):
        if self.__fbthrift_cached_MyMapEnumAndInt is None:
            self.__fbthrift_cached_MyMapEnumAndInt = Map__MyEnumA_string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyMapEnumAndInt_ref().ref())
        return self.__fbthrift_cached_MyMapEnumAndInt

    @property
    def MyMapEnumAndInt(self):
        return self.MyMapEnumAndInt_impl()

    cdef inline MyCustomField_impl(self):
        if self.__fbthrift_cached_MyCustomField is None:
            self.__fbthrift_cached_MyCustomField = _fbthrift_iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyCustomField_ref().ref()), self)
        return self.__fbthrift_cached_MyCustomField

    @property
    def MyCustomField(self):
        return self.MyCustomField_impl()

    cdef inline MyOptCustomField_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyOptCustomField_ref().has_value():
            return None
        if self.__fbthrift_cached_MyOptCustomField is None:
            self.__fbthrift_cached_MyOptCustomField = _fbthrift_iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyOptCustomField_ref().ref_unchecked()), self)
        return self.__fbthrift_cached_MyOptCustomField

    @property
    def MyOptCustomField(self):
        return self.MyOptCustomField_impl()


    def __hash__(MyStruct self):
        return super().__hash__()

    def __repr__(MyStruct self):
        return super().__repr__()

    def __str__(MyStruct self):
        return super().__str__()


    def __copy__(MyStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cMyStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<MyStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__MyStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cMyStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cMyStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 11

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cMyStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cMyStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cMyStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.MyStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MyStruct, self)



@__cython.auto_pickle(False)
@__cython.final
cdef class SimpleUnion(thrift.py3.types.Union):
    __module__ = _fbthrift__module_name__
    Type = __SimpleUnionType

    def __init__(
        self, *,
        intValue=None,
        str stringValue=None
    ):
        if intValue is not None:
            if not isinstance(intValue, int):
                raise TypeError(f'intValue is not a { int !r}.')

            intValue = <cint64_t> intValue

        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = __to_shared_ptr(cmove(SimpleUnion._make_instance(
          NULL,
          intValue,
          stringValue,
        )))
        self._initialize_py()

    @staticmethod
    def fromValue(value):
        if value is None:
            return SimpleUnion()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint64_t> value
                    return SimpleUnion(intValue=value)
                except OverflowError:
                    pass
        if isinstance(value, str):
            return SimpleUnion(stringValue=value)
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[_module_cbindings.cSimpleUnion] _make_instance(
        _module_cbindings.cSimpleUnion* base_instance,
        object intValue,
        str stringValue
    ) except *:
        cdef unique_ptr[_module_cbindings.cSimpleUnion] c_inst = make_unique[_module_cbindings.cSimpleUnion]()
        cdef bint any_set = False
        if intValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue(intValue)
            any_set = True
        if stringValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_stringValue(stringValue.encode('UTF-8'))
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cSimpleUnion] cpp_obj):
        __fbthrift_inst = <SimpleUnion>SimpleUnion.__new__(SimpleUnion)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        __fbthrift_inst._initialize_py()
        return __fbthrift_inst

    @property
    def intValue(SimpleUnion self not None):
        if self.type_int != 7:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not intValue')
        return self.value

    @property
    def stringValue(SimpleUnion self not None):
        if self.type_int != 2:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not stringValue')
        return self.value


    def __hash__(SimpleUnion self):
        return  super().__hash__()

    @property
    def type(SimpleUnion self not None):
        if self.py_type is None:
            self.py_type = SimpleUnion.Type(self.type_int)
        return self.py_type

    @property
    def value(SimpleUnion self not None):
        if self.py_value is not None or self.type_int == 0:
            return self.py_value
        elif self.type_int == 7:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_intValue()
        elif self.type_int == 2:
            self.py_value = bytes(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_stringValue()).decode('UTF-8')
        return self.py_value

    cdef _initialize_py(SimpleUnion self):
        self.py_type = None
        self.type_int = int(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).getType())
        self.py_value = None

    def __copy__(SimpleUnion self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cSimpleUnion](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<SimpleUnion>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__SimpleUnion()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cSimpleUnion].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.SimpleUnion"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cSimpleUnion](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(SimpleUnion self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cSimpleUnion](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(SimpleUnion self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSimpleUnion]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cSimpleUnion](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        # clear cache reload since the underlying data's changed
        self._initialize_py()
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.SimpleUnion,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.SimpleUnion, self)



@__cython.auto_pickle(False)
@__cython.final
cdef class ComplexUnion(thrift.py3.types.Union):
    __module__ = _fbthrift__module_name__
    Type = __ComplexUnionType

    def __init__(
        self, *,
        intValue=None,
        opt_intValue=None,
        str stringValue=None,
        str opt_stringValue=None,
        intValue2=None,
        intValue3=None,
        doubelValue=None,
        pbool boolValue=None,
        union_list=None,
        union_set=None,
        union_map=None,
        opt_union_map=None,
        object enum_field=None,
        enum_container=None,
        a_struct=None,
        a_set_struct=None,
        a_union=None,
        opt_a_union=None,
        a_union_list=None,
        a_union_typedef=None,
        a_union_typedef_list=None,
        bytes MyBinaryField=None,
        bytes MyBinaryField2=None,
        MyBinaryListField4=None,
        ref_field=None,
        ref_field2=None,
        excp_field=None,
        _fbthrift_iobuf.IOBuf MyCustomField=None
    ):
        if intValue is not None:
            if not isinstance(intValue, int):
                raise TypeError(f'intValue is not a { int !r}.')

            intValue = <cint64_t> intValue

        if opt_intValue is not None:
            if not isinstance(opt_intValue, int):
                raise TypeError(f'opt_intValue is not a { int !r}.')

            opt_intValue = <cint64_t> opt_intValue

        if intValue2 is not None:
            if not isinstance(intValue2, int):
                raise TypeError(f'intValue2 is not a { int !r}.')

            intValue2 = <cint16_t> intValue2

        if intValue3 is not None:
            if not isinstance(intValue3, int):
                raise TypeError(f'intValue3 is not a { int !r}.')

            intValue3 = <cint32_t> intValue3

        if doubelValue is not None:
            if not isinstance(doubelValue, (float, int)):
                raise TypeError(f'doubelValue is not a { float !r}.')

        a_struct = _ensure_py3_or_raise(a_struct, "a_struct", MyStruct)

        a_set_struct = _ensure_py3_container_or_raise(a_set_struct, Set__MyStruct)

        a_union = _ensure_py3_or_raise(a_union, "a_union", SimpleUnion)

        opt_a_union = _ensure_py3_or_raise(opt_a_union, "opt_a_union", SimpleUnion)

        a_union_list = _ensure_py3_container_or_raise(a_union_list, List__SimpleUnion)

        a_union_typedef = _ensure_py3_container_or_raise(a_union_typedef, Set__SimpleUnion)

        a_union_typedef_list = _ensure_py3_container_or_raise(a_union_typedef_list, List__Set__SimpleUnion)

        ref_field = _ensure_py3_or_raise(ref_field, "ref_field", MyStruct)

        ref_field2 = _ensure_py3_or_raise(ref_field2, "ref_field2", MyStruct)

        excp_field = _ensure_py3_or_raise(excp_field, "excp_field", AnException)

        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = __to_shared_ptr(cmove(ComplexUnion._make_instance(
          NULL,
          intValue,
          opt_intValue,
          stringValue,
          opt_stringValue,
          intValue2,
          intValue3,
          doubelValue,
          boolValue,
          union_list,
          union_set,
          union_map,
          opt_union_map,
          enum_field,
          enum_container,
          a_struct,
          a_set_struct,
          a_union,
          opt_a_union,
          a_union_list,
          a_union_typedef,
          a_union_typedef_list,
          MyBinaryField,
          MyBinaryField2,
          MyBinaryListField4,
          ref_field,
          ref_field2,
          excp_field,
          MyCustomField,
        )))
        self._initialize_py()

    @staticmethod
    def fromValue(value):
        if value is None:
            return ComplexUnion()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint64_t> value
                    return ComplexUnion(intValue=value)
                except OverflowError:
                    pass
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint64_t> value
                    return ComplexUnion(opt_intValue=value)
                except OverflowError:
                    pass
        if isinstance(value, str):
            return ComplexUnion(stringValue=value)
        if isinstance(value, str):
            return ComplexUnion(opt_stringValue=value)
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint16_t> value
                    return ComplexUnion(intValue2=value)
                except OverflowError:
                    pass
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return ComplexUnion(intValue3=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return ComplexUnion(doubelValue=value)
                except OverflowError:
                    pass
        if isinstance(value, bool):
            return ComplexUnion(boolValue=value)
        if isinstance(value, List__i32):
            return ComplexUnion(union_list=value)
        if isinstance(value, Set__i64):
            return ComplexUnion(union_set=value)
        if isinstance(value, Map__string_i32):
            return ComplexUnion(union_map=value)
        if isinstance(value, Map__string_i32):
            return ComplexUnion(opt_union_map=value)
        if isinstance(value, MyEnumA):
            return ComplexUnion(enum_field=value)
        if isinstance(value, List__MyEnumA):
            return ComplexUnion(enum_container=value)
        if isinstance(value, MyStruct):
            return ComplexUnion(a_struct=value)
        if isinstance(value, Set__MyStruct):
            return ComplexUnion(a_set_struct=value)
        if isinstance(value, SimpleUnion):
            return ComplexUnion(a_union=value)
        if isinstance(value, SimpleUnion):
            return ComplexUnion(opt_a_union=value)
        if isinstance(value, List__SimpleUnion):
            return ComplexUnion(a_union_list=value)
        if isinstance(value, Set__SimpleUnion):
            return ComplexUnion(a_union_typedef=value)
        if isinstance(value, List__Set__SimpleUnion):
            return ComplexUnion(a_union_typedef_list=value)
        if isinstance(value, bytes):
            return ComplexUnion(MyBinaryField=value)
        if isinstance(value, bytes):
            return ComplexUnion(MyBinaryField2=value)
        if isinstance(value, List__binary):
            return ComplexUnion(MyBinaryListField4=value)
        if isinstance(value, MyStruct):
            return ComplexUnion(ref_field=value)
        if isinstance(value, MyStruct):
            return ComplexUnion(ref_field2=value)
        if isinstance(value, AnException):
            return ComplexUnion(excp_field=value)
        if isinstance(value, _fbthrift_iobuf.IOBuf):
            return ComplexUnion(MyCustomField=value)
        if isinstance(value, (float, int)):
            try:
                <double> value
                return ComplexUnion(doubelValue=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[_module_cbindings.cComplexUnion] _make_instance(
        _module_cbindings.cComplexUnion* base_instance,
        object intValue,
        object opt_intValue,
        str stringValue,
        str opt_stringValue,
        object intValue2,
        object intValue3,
        object doubelValue,
        pbool boolValue,
        object union_list,
        object union_set,
        object union_map,
        object opt_union_map,
        object enum_field,
        object enum_container,
        MyStruct a_struct,
        object a_set_struct,
        SimpleUnion a_union,
        SimpleUnion opt_a_union,
        object a_union_list,
        object a_union_typedef,
        object a_union_typedef_list,
        bytes MyBinaryField,
        bytes MyBinaryField2,
        object MyBinaryListField4,
        MyStruct ref_field,
        MyStruct ref_field2,
        AnException excp_field,
        _fbthrift_iobuf.IOBuf MyCustomField
    ) except *:
        cdef unique_ptr[_module_cbindings.cComplexUnion] c_inst = make_unique[_module_cbindings.cComplexUnion]()
        cdef bint any_set = False
        if intValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue(intValue)
            any_set = True
        if opt_intValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_intValue(opt_intValue)
            any_set = True
        if stringValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_stringValue(stringValue.encode('UTF-8'))
            any_set = True
        if opt_stringValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_stringValue(opt_stringValue.encode('UTF-8'))
            any_set = True
        if intValue2 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue2(intValue2)
            any_set = True
        if intValue3 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_intValue3(intValue3)
            any_set = True
        if doubelValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_doubelValue(doubelValue)
            any_set = True
        if boolValue is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_boolValue(boolValue)
            any_set = True
        if union_list is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_union_list(List__i32__make_instance(union_list))
            any_set = True
        if union_set is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_union_set(Set__i64__make_instance(union_set))
            any_set = True
        if union_map is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_union_map(Map__string_i32__make_instance(union_map))
            any_set = True
        if opt_union_map is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_union_map(Map__string_i32__make_instance(opt_union_map))
            any_set = True
        if enum_field is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_enum_field(<_module_cbindings.cMyEnumA><int>enum_field)
            any_set = True
        if enum_container is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_enum_container(List__MyEnumA__make_instance(enum_container))
            any_set = True
        if a_struct is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_struct(deref((<MyStruct?> a_struct)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        if a_set_struct is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_set_struct(Set__MyStruct__make_instance(a_set_struct))
            any_set = True
        if a_union is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union(deref((<SimpleUnion?> a_union)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        if opt_a_union is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_opt_a_union(deref((<SimpleUnion?> opt_a_union)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        if a_union_list is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union_list(List__SimpleUnion__make_instance(a_union_list))
            any_set = True
        if a_union_typedef is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union_typedef(Set__SimpleUnion__make_instance(a_union_typedef))
            any_set = True
        if a_union_typedef_list is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_a_union_typedef_list(List__Set__SimpleUnion__make_instance(a_union_typedef_list))
            any_set = True
        if MyBinaryField is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyBinaryField(MyBinaryField)
            any_set = True
        if MyBinaryField2 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyBinaryField2(MyBinaryField2)
            any_set = True
        if MyBinaryListField4 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyBinaryListField4(List__binary__make_instance(MyBinaryListField4))
            any_set = True
        if ref_field is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_ref_field(_module_cbindings.cMyStruct(deref((<MyStruct?>ref_field)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)))
            any_set = True
        if ref_field2 is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_ref_field2(deref((<MyStruct?>ref_field2)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        if excp_field is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_excp_field(deref((<AnException?> excp_field)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
            any_set = True
        if MyCustomField is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_MyCustomField(deref((<_fbthrift_iobuf.IOBuf?>MyCustomField)._this)) 
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cComplexUnion] cpp_obj):
        __fbthrift_inst = <ComplexUnion>ComplexUnion.__new__(ComplexUnion)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        __fbthrift_inst._initialize_py()
        return __fbthrift_inst

    @property
    def intValue(ComplexUnion self not None):
        if self.type_int != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not intValue')
        return self.value

    @property
    def opt_intValue(ComplexUnion self not None):
        if self.type_int != 201:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not opt_intValue')
        return self.value

    @property
    def stringValue(ComplexUnion self not None):
        if self.type_int != 3:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not stringValue')
        return self.value

    @property
    def opt_stringValue(ComplexUnion self not None):
        if self.type_int != 203:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not opt_stringValue')
        return self.value

    @property
    def intValue2(ComplexUnion self not None):
        if self.type_int != 4:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not intValue2')
        return self.value

    @property
    def intValue3(ComplexUnion self not None):
        if self.type_int != 6:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not intValue3')
        return self.value

    @property
    def doubelValue(ComplexUnion self not None):
        if self.type_int != 7:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not doubelValue')
        return self.value

    @property
    def boolValue(ComplexUnion self not None):
        if self.type_int != 8:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not boolValue')
        return self.value

    @property
    def union_list(ComplexUnion self not None):
        if self.type_int != 9:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not union_list')
        return self.value

    @property
    def union_set(ComplexUnion self not None):
        if self.type_int != 10:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not union_set')
        return self.value

    @property
    def union_map(ComplexUnion self not None):
        if self.type_int != 11:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not union_map')
        return self.value

    @property
    def opt_union_map(ComplexUnion self not None):
        if self.type_int != 211:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not opt_union_map')
        return self.value

    @property
    def enum_field(ComplexUnion self not None):
        if self.type_int != 12:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not enum_field')
        return self.value

    @property
    def enum_container(ComplexUnion self not None):
        if self.type_int != 13:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not enum_container')
        return self.value

    @property
    def a_struct(ComplexUnion self not None):
        if self.type_int != 14:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not a_struct')
        return self.value

    @property
    def a_set_struct(ComplexUnion self not None):
        if self.type_int != 15:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not a_set_struct')
        return self.value

    @property
    def a_union(ComplexUnion self not None):
        if self.type_int != 16:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not a_union')
        return self.value

    @property
    def opt_a_union(ComplexUnion self not None):
        if self.type_int != 216:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not opt_a_union')
        return self.value

    @property
    def a_union_list(ComplexUnion self not None):
        if self.type_int != 17:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not a_union_list')
        return self.value

    @property
    def a_union_typedef(ComplexUnion self not None):
        if self.type_int != 18:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not a_union_typedef')
        return self.value

    @property
    def a_union_typedef_list(ComplexUnion self not None):
        if self.type_int != 19:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not a_union_typedef_list')
        return self.value

    @property
    def MyBinaryField(ComplexUnion self not None):
        if self.type_int != 20:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not MyBinaryField')
        return self.value

    @property
    def MyBinaryField2(ComplexUnion self not None):
        if self.type_int != 21:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not MyBinaryField2')
        return self.value

    @property
    def MyBinaryListField4(ComplexUnion self not None):
        if self.type_int != 23:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not MyBinaryListField4')
        return self.value

    @property
    def ref_field(ComplexUnion self not None):
        if self.type_int != 24:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not ref_field')
        return self.value

    @property
    def ref_field2(ComplexUnion self not None):
        if self.type_int != 25:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not ref_field2')
        return self.value

    @property
    def excp_field(ComplexUnion self not None):
        if self.type_int != 26:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not excp_field')
        return self.value

    @property
    def MyCustomField(ComplexUnion self not None):
        if self.type_int != 27:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not MyCustomField')
        return self.value


    def __hash__(ComplexUnion self):
        return  super().__hash__()

    @property
    def type(ComplexUnion self not None):
        if self.py_type is None:
            self.py_type = ComplexUnion.Type(self.type_int)
        return self.py_type

    @property
    def value(ComplexUnion self not None):
        if self.py_value is not None or self.type_int == 0:
            return self.py_value
        elif self.type_int == 1:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_intValue()
        elif self.type_int == 201:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_opt_intValue()
        elif self.type_int == 3:
            self.py_value = bytes(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_stringValue()).decode('UTF-8')
        elif self.type_int == 203:
            self.py_value = bytes(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_opt_stringValue()).decode('UTF-8')
        elif self.type_int == 4:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_intValue2()
        elif self.type_int == 6:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_intValue3()
        elif self.type_int == 7:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_doubelValue()
        elif self.type_int == 8:
            self.py_value = <bint>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_boolValue())
        elif self.type_int == 9:
            self.py_value = List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_union_list())
        elif self.type_int == 10:
            self.py_value = Set__i64__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_union_set())
        elif self.type_int == 11:
            self.py_value = Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_union_map())
        elif self.type_int == 211:
            self.py_value = Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_opt_union_map())
        elif self.type_int == 12:
            self.py_value = translate_cpp_enum_to_python(MyEnumA, <int>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_enum_field())
        elif self.type_int == 13:
            self.py_value = List__MyEnumA__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_enum_container())
        elif self.type_int == 14:
            self.py_value = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cMyStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_a_struct()))
        elif self.type_int == 15:
            self.py_value = Set__MyStruct__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_a_set_struct())
        elif self.type_int == 16:
            self.py_value = SimpleUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cSimpleUnion](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_a_union()))
        elif self.type_int == 216:
            self.py_value = SimpleUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cSimpleUnion](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_opt_a_union()))
        elif self.type_int == 17:
            self.py_value = List__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_a_union_list())
        elif self.type_int == 18:
            self.py_value = Set__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_a_union_typedef())
        elif self.type_int == 19:
            self.py_value = List__Set__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_a_union_typedef_list())
        elif self.type_int == 20:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_MyBinaryField()
        elif self.type_int == 21:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_MyBinaryField2()
        elif self.type_int == 23:
            self.py_value = List__binary__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_MyBinaryListField4())
        elif self.type_int == 24:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_ref_field():
                self.py_value = None
            else:
            
                self.py_value = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_ref_field()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        elif self.type_int == 25:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_ref_field2():
                self.py_value = None
            else:
            
                self.py_value = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_ref_field2()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        elif self.type_int == 26:
            self.py_value = AnException._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cAnException](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_excp_field()))
        elif self.type_int == 27:
            self.py_value =  _fbthrift_iobuf.from_unique_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_MyCustomField().clone())
        return self.py_value

    cdef _initialize_py(ComplexUnion self):
        self.py_type = None
        self.type_int = int(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).getType())
        self.py_value = None

    def __copy__(ComplexUnion self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cComplexUnion](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<ComplexUnion>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__ComplexUnion()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cComplexUnion].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ComplexUnion"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cComplexUnion](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 28

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ComplexUnion self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cComplexUnion](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ComplexUnion self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexUnion]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cComplexUnion](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        # clear cache reload since the underlying data's changed
        self._initialize_py()
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.ComplexUnion,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ComplexUnion, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class AnException(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__

    def __init__(AnException self, *args, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAnException]()
        self._fields_setter = _fbthrift_types_fields.__AnException_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__( *args, **kwargs)

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AnException", {
          "code": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).code_ref().has_value(),
          "req_code": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_code_ref().has_value(),
          "message2": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).message2_ref().has_value(),
          "req_message": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_message_ref().has_value(),
          "exception_list": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).exception_list_ref().has_value(),
          "exception_set": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).exception_set_ref().has_value(),
          "exception_map": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).exception_map_ref().has_value(),
          "req_exception_map": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_exception_map_ref().has_value(),
          "enum_field": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).enum_field_ref().has_value(),
          "enum_container": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).enum_container_ref().has_value(),
          "a_struct": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_struct_ref().has_value(),
          "a_set_struct": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_set_struct_ref().has_value(),
          "a_union_list": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_union_list_ref().has_value(),
          "union_typedef": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).union_typedef_ref().has_value(),
          "a_union_typedef_list": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_union_typedef_list_ref().has_value(),
          "MyCustomField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyCustomField_ref().has_value(),
          "MyOptCustomField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyOptCustomField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cAnException] cpp_obj):
        __fbthrift_inst = <AnException>AnException.__new__(AnException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
        return __fbthrift_inst

    cdef inline code_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).code_ref().value()

    @property
    def code(self):
        return self.code_impl()

    cdef inline req_code_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_code_ref().value()

    @property
    def req_code(self):
        return self.req_code_impl()

    cdef inline message2_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).message2_ref().value()).decode('UTF-8')

    @property
    def message2(self):
        return self.message2_impl()

    cdef inline req_message_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_message_ref().value()).decode('UTF-8')

    @property
    def req_message(self):
        return self.req_message_impl()

    cdef inline exception_list_impl(self):
        if self.__fbthrift_cached_exception_list is None:
            self.__fbthrift_cached_exception_list = List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).exception_list_ref().ref())
        return self.__fbthrift_cached_exception_list

    @property
    def exception_list(self):
        return self.exception_list_impl()

    cdef inline exception_set_impl(self):
        if self.__fbthrift_cached_exception_set is None:
            self.__fbthrift_cached_exception_set = Set__i64__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).exception_set_ref().ref())
        return self.__fbthrift_cached_exception_set

    @property
    def exception_set(self):
        return self.exception_set_impl()

    cdef inline exception_map_impl(self):
        if self.__fbthrift_cached_exception_map is None:
            self.__fbthrift_cached_exception_map = Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).exception_map_ref().ref())
        return self.__fbthrift_cached_exception_map

    @property
    def exception_map(self):
        return self.exception_map_impl()

    cdef inline req_exception_map_impl(self):
        if self.__fbthrift_cached_req_exception_map is None:
            self.__fbthrift_cached_req_exception_map = Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_exception_map_ref().ref())
        return self.__fbthrift_cached_req_exception_map

    @property
    def req_exception_map(self):
        return self.req_exception_map_impl()

    cdef inline enum_field_impl(self):
        if self.__fbthrift_cached_enum_field is None:
            self.__fbthrift_cached_enum_field = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).enum_field_ref().value()))
        return self.__fbthrift_cached_enum_field

    @property
    def enum_field(self):
        return self.enum_field_impl()

    cdef inline enum_container_impl(self):
        if self.__fbthrift_cached_enum_container is None:
            self.__fbthrift_cached_enum_container = List__MyEnumA__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).enum_container_ref().ref())
        return self.__fbthrift_cached_enum_container

    @property
    def enum_container(self):
        return self.enum_container_impl()

    cdef inline a_struct_impl(self):
        if self.__fbthrift_cached_a_struct is None:
            self.__fbthrift_cached_a_struct = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_struct_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_a_struct

    @property
    def a_struct(self):
        return self.a_struct_impl()

    cdef inline a_set_struct_impl(self):
        if self.__fbthrift_cached_a_set_struct is None:
            self.__fbthrift_cached_a_set_struct = Set__MyStruct__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_set_struct_ref().ref())
        return self.__fbthrift_cached_a_set_struct

    @property
    def a_set_struct(self):
        return self.a_set_struct_impl()

    cdef inline a_union_list_impl(self):
        if self.__fbthrift_cached_a_union_list is None:
            self.__fbthrift_cached_a_union_list = List__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_union_list_ref().ref())
        return self.__fbthrift_cached_a_union_list

    @property
    def a_union_list(self):
        return self.a_union_list_impl()

    cdef inline union_typedef_impl(self):
        if self.__fbthrift_cached_union_typedef is None:
            self.__fbthrift_cached_union_typedef = Set__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).union_typedef_ref().ref())
        return self.__fbthrift_cached_union_typedef

    @property
    def union_typedef(self):
        return self.union_typedef_impl()

    cdef inline a_union_typedef_list_impl(self):
        if self.__fbthrift_cached_a_union_typedef_list is None:
            self.__fbthrift_cached_a_union_typedef_list = List__Set__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).a_union_typedef_list_ref().ref())
        return self.__fbthrift_cached_a_union_typedef_list

    @property
    def a_union_typedef_list(self):
        return self.a_union_typedef_list_impl()

    cdef inline MyCustomField_impl(self):
        if self.__fbthrift_cached_MyCustomField is None:
            self.__fbthrift_cached_MyCustomField = _fbthrift_iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyCustomField_ref().ref()), self)
        return self.__fbthrift_cached_MyCustomField

    @property
    def MyCustomField(self):
        return self.MyCustomField_impl()

    cdef inline MyOptCustomField_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyOptCustomField_ref().has_value():
            return None
        if self.__fbthrift_cached_MyOptCustomField is None:
            self.__fbthrift_cached_MyOptCustomField = _fbthrift_iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyOptCustomField_ref().ref_unchecked()), self)
        return self.__fbthrift_cached_MyOptCustomField

    @property
    def MyOptCustomField(self):
        return self.MyOptCustomField_impl()


    def __hash__(AnException self):
        return super().__hash__()

    def __repr__(AnException self):
        return super().__repr__()

    def __str__(AnException self):
        field = self.message2
        if field is None:
            return str(field)
        return field


    def __copy__(AnException self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cAnException](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<AnException>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__AnException()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.ExceptionMetadata[_module_cbindings.cAnException].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AnException"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cAnException](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 17

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AnException self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cAnException](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AnException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAnException]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cAnException](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.AnException,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AnException, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class AnotherException(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__

    def __init__(AnotherException self, *args, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAnotherException]()
        self._fields_setter = _fbthrift_types_fields.__AnotherException_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__( *args, **kwargs)

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AnotherException", {
          "code": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).code_ref().has_value(),
          "req_code": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_code_ref().has_value(),
          "message": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).message_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cAnotherException] cpp_obj):
        __fbthrift_inst = <AnotherException>AnotherException.__new__(AnotherException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
        return __fbthrift_inst

    cdef inline code_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).code_ref().value()

    @property
    def code(self):
        return self.code_impl()

    cdef inline req_code_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_code_ref().value()

    @property
    def req_code(self):
        return self.req_code_impl()

    cdef inline message_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).message_ref().value()).decode('UTF-8')

    @property
    def message(self):
        return self.message_impl()


    def __hash__(AnotherException self):
        return super().__hash__()

    def __repr__(AnotherException self):
        return super().__repr__()

    def __str__(AnotherException self):
        return super().__str__()


    def __copy__(AnotherException self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cAnotherException](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<AnotherException>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__AnotherException()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.ExceptionMetadata[_module_cbindings.cAnotherException].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AnotherException"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cAnotherException](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 3

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AnotherException self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cAnotherException](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AnotherException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAnotherException]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cAnotherException](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.AnotherException,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AnotherException, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class containerStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(containerStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.ccontainerStruct]()
        self._fields_setter = _fbthrift_types_fields.__containerStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("containerStruct", {
          "fieldA": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldA_ref().has_value(),
          "req_fieldA": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldA_ref().has_value(),
          "opt_fieldA": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldA_ref().has_value(),
          "fieldB": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldB_ref().has_value(),
          "req_fieldB": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldB_ref().has_value(),
          "opt_fieldB": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldB_ref().has_value(),
          "fieldC": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldC_ref().has_value(),
          "req_fieldC": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldC_ref().has_value(),
          "opt_fieldC": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldC_ref().has_value(),
          "fieldD": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldD_ref().has_value(),
          "fieldE": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldE_ref().has_value(),
          "req_fieldE": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldE_ref().has_value(),
          "opt_fieldE": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldE_ref().has_value(),
          "fieldF": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldF_ref().has_value(),
          "fieldG": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldG_ref().has_value(),
          "fieldH": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldH_ref().has_value(),
          "fieldI": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldI_ref().has_value(),
          "fieldJ": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldJ_ref().has_value(),
          "fieldK": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldK_ref().has_value(),
          "fieldL": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldL_ref().has_value(),
          "fieldM": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldM_ref().has_value(),
          "fieldN": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldN_ref().has_value(),
          "fieldO": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldO_ref().has_value(),
          "fieldP": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldP_ref().has_value(),
          "fieldQ": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldQ_ref().has_value(),
          "fieldR": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldR_ref().has_value(),
          "req_fieldR": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldR_ref().has_value(),
          "opt_fieldR": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldR_ref().has_value(),
          "fieldS": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldS_ref().has_value(),
          "fieldT": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldT_ref().has_value(),
          "fieldU": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldU_ref().has_value(),
          "fieldV": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldV_ref().has_value(),
          "req_fieldV": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldV_ref().has_value(),
          "opt_fieldV": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldV_ref().has_value(),
          "fieldW": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldW_ref().has_value(),
          "fieldX": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldX_ref().has_value(),
          "req_fieldX": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldX_ref().has_value(),
          "opt_fieldX": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldX_ref().has_value(),
          "fieldY": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldY_ref().has_value(),
          "fieldZ": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldZ_ref().has_value(),
          "fieldAA": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAA_ref().has_value(),
          "fieldAC": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAC_ref().has_value(),
          "fieldAD": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAD_ref().has_value(),
          "fieldAE": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAE_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.ccontainerStruct] cpp_obj):
        __fbthrift_inst = <containerStruct>containerStruct.__new__(containerStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline fieldA_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldA_ref().value()

    @property
    def fieldA(self):
        return self.fieldA_impl()

    cdef inline req_fieldA_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldA_ref().value()

    @property
    def req_fieldA(self):
        return self.req_fieldA_impl()

    cdef inline opt_fieldA_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldA_ref().has_value():
            return None
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldA_ref().value_unchecked()

    @property
    def opt_fieldA(self):
        return self.opt_fieldA_impl()

    cdef inline fieldB_impl(self):
        if self.__fbthrift_cached_fieldB is None:
            self.__fbthrift_cached_fieldB = Map__string_bool__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldB_ref().ref())
        return self.__fbthrift_cached_fieldB

    @property
    def fieldB(self):
        return self.fieldB_impl()

    cdef inline req_fieldB_impl(self):
        if self.__fbthrift_cached_req_fieldB is None:
            self.__fbthrift_cached_req_fieldB = Map__string_bool__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldB_ref().ref())
        return self.__fbthrift_cached_req_fieldB

    @property
    def req_fieldB(self):
        return self.req_fieldB_impl()

    cdef inline opt_fieldB_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldB_ref().has_value():
            return None
        if self.__fbthrift_cached_opt_fieldB is None:
            self.__fbthrift_cached_opt_fieldB = Map__string_bool__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldB_ref().ref_unchecked())
        return self.__fbthrift_cached_opt_fieldB

    @property
    def opt_fieldB(self):
        return self.opt_fieldB_impl()

    cdef inline fieldC_impl(self):
        if self.__fbthrift_cached_fieldC is None:
            self.__fbthrift_cached_fieldC = Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldC_ref().ref())
        return self.__fbthrift_cached_fieldC

    @property
    def fieldC(self):
        return self.fieldC_impl()

    cdef inline req_fieldC_impl(self):
        if self.__fbthrift_cached_req_fieldC is None:
            self.__fbthrift_cached_req_fieldC = Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldC_ref().ref())
        return self.__fbthrift_cached_req_fieldC

    @property
    def req_fieldC(self):
        return self.req_fieldC_impl()

    cdef inline opt_fieldC_impl(self):
        if self.__fbthrift_cached_opt_fieldC is None:
            self.__fbthrift_cached_opt_fieldC = Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldC_ref().ref_unchecked())
        return self.__fbthrift_cached_opt_fieldC

    @property
    def opt_fieldC(self):
        return self.opt_fieldC_impl()

    cdef inline fieldD_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldD_ref().value()).decode('UTF-8')

    @property
    def fieldD(self):
        return self.fieldD_impl()

    cdef inline fieldE_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldE_ref().value()).decode('UTF-8')

    @property
    def fieldE(self):
        return self.fieldE_impl()

    cdef inline req_fieldE_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldE_ref().value()).decode('UTF-8')

    @property
    def req_fieldE(self):
        return self.req_fieldE_impl()

    cdef inline opt_fieldE_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldE_ref().value_unchecked()).decode('UTF-8')

    @property
    def opt_fieldE(self):
        return self.opt_fieldE_impl()

    cdef inline fieldF_impl(self):
        if self.__fbthrift_cached_fieldF is None:
            self.__fbthrift_cached_fieldF = List__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldF_ref().ref())
        return self.__fbthrift_cached_fieldF

    @property
    def fieldF(self):
        return self.fieldF_impl()

    cdef inline fieldG_impl(self):
        if self.__fbthrift_cached_fieldG is None:
            self.__fbthrift_cached_fieldG = Map__string_Map__string_Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldG_ref().ref())
        return self.__fbthrift_cached_fieldG

    @property
    def fieldG(self):
        return self.fieldG_impl()

    cdef inline fieldH_impl(self):
        if self.__fbthrift_cached_fieldH is None:
            self.__fbthrift_cached_fieldH = List__Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldH_ref().ref())
        return self.__fbthrift_cached_fieldH

    @property
    def fieldH(self):
        return self.fieldH_impl()

    cdef inline fieldI_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldI_ref().value()

    @property
    def fieldI(self):
        return self.fieldI_impl()

    cdef inline fieldJ_impl(self):
        if self.__fbthrift_cached_fieldJ is None:
            self.__fbthrift_cached_fieldJ = Map__string_List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldJ_ref().ref())
        return self.__fbthrift_cached_fieldJ

    @property
    def fieldJ(self):
        return self.fieldJ_impl()

    cdef inline fieldK_impl(self):
        if self.__fbthrift_cached_fieldK is None:
            self.__fbthrift_cached_fieldK = List__List__List__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldK_ref().ref())
        return self.__fbthrift_cached_fieldK

    @property
    def fieldK(self):
        return self.fieldK_impl()

    cdef inline fieldL_impl(self):
        if self.__fbthrift_cached_fieldL is None:
            self.__fbthrift_cached_fieldL = Set__Set__Set__bool__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldL_ref().ref())
        return self.__fbthrift_cached_fieldL

    @property
    def fieldL(self):
        return self.fieldL_impl()

    cdef inline fieldM_impl(self):
        if self.__fbthrift_cached_fieldM is None:
            self.__fbthrift_cached_fieldM = Map__Set__List__i32_Map__List__Set__string_string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldM_ref().ref())
        return self.__fbthrift_cached_fieldM

    @property
    def fieldM(self):
        return self.fieldM_impl()

    cdef inline fieldN_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldN_ref().value()

    @property
    def fieldN(self):
        return self.fieldN_impl()

    cdef inline fieldO_impl(self):
        if self.__fbthrift_cached_fieldO is None:
            self.__fbthrift_cached_fieldO = List__Map__Empty_MyStruct__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldO_ref().ref())
        return self.__fbthrift_cached_fieldO

    @property
    def fieldO(self):
        return self.fieldO_impl()

    cdef inline fieldP_impl(self):
        if self.__fbthrift_cached_fieldP is None:
            self.__fbthrift_cached_fieldP = List__List__List__Map__Empty_MyStruct__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldP_ref().ref())
        return self.__fbthrift_cached_fieldP

    @property
    def fieldP(self):
        return self.fieldP_impl()

    cdef inline fieldQ_impl(self):
        if self.__fbthrift_cached_fieldQ is None:
            self.__fbthrift_cached_fieldQ = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldQ_ref().value()))
        return self.__fbthrift_cached_fieldQ

    @property
    def fieldQ(self):
        return self.fieldQ_impl()

    cdef inline fieldR_impl(self):
        if self.__fbthrift_cached_fieldR is None:
            self.__fbthrift_cached_fieldR = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldR_ref().value()))
        return self.__fbthrift_cached_fieldR

    @property
    def fieldR(self):
        return self.fieldR_impl()

    cdef inline req_fieldR_impl(self):
        if self.__fbthrift_cached_req_fieldR is None:
            self.__fbthrift_cached_req_fieldR = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldR_ref().value()))
        return self.__fbthrift_cached_req_fieldR

    @property
    def req_fieldR(self):
        return self.req_fieldR_impl()

    cdef inline opt_fieldR_impl(self):
        if self.__fbthrift_cached_opt_fieldR is None:
            self.__fbthrift_cached_opt_fieldR = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldR_ref().value_unchecked()))
        return self.__fbthrift_cached_opt_fieldR

    @property
    def opt_fieldR(self):
        return self.opt_fieldR_impl()

    cdef inline fieldS_impl(self):
        if self.__fbthrift_cached_fieldS is None:
            self.__fbthrift_cached_fieldS = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldS_ref().value()))
        return self.__fbthrift_cached_fieldS

    @property
    def fieldS(self):
        return self.fieldS_impl()

    cdef inline fieldT_impl(self):
        if self.__fbthrift_cached_fieldT is None:
            self.__fbthrift_cached_fieldT = List__MyEnumA__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldT_ref().ref())
        return self.__fbthrift_cached_fieldT

    @property
    def fieldT(self):
        return self.fieldT_impl()

    cdef inline fieldU_impl(self):
        if self.__fbthrift_cached_fieldU is None:
            self.__fbthrift_cached_fieldU = List__MyEnumA__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldU_ref().ref())
        return self.__fbthrift_cached_fieldU

    @property
    def fieldU(self):
        return self.fieldU_impl()

    cdef inline fieldV_impl(self):
        if self.__fbthrift_cached_fieldV is None:
            self.__fbthrift_cached_fieldV = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldV_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_fieldV

    @property
    def fieldV(self):
        return self.fieldV_impl()

    cdef inline req_fieldV_impl(self):
        if self.__fbthrift_cached_req_fieldV is None:
            self.__fbthrift_cached_req_fieldV = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldV_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_req_fieldV

    @property
    def req_fieldV(self):
        return self.req_fieldV_impl()

    cdef inline opt_fieldV_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldV_ref().has_value():
            return None
        if self.__fbthrift_cached_opt_fieldV is None:
            self.__fbthrift_cached_opt_fieldV = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldV_ref().ref_unchecked(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_opt_fieldV

    @property
    def opt_fieldV(self):
        return self.opt_fieldV_impl()

    cdef inline fieldW_impl(self):
        if self.__fbthrift_cached_fieldW is None:
            self.__fbthrift_cached_fieldW = Set__MyStruct__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldW_ref().ref())
        return self.__fbthrift_cached_fieldW

    @property
    def fieldW(self):
        return self.fieldW_impl()

    cdef inline fieldX_impl(self):
        if self.__fbthrift_cached_fieldX is None:
            self.__fbthrift_cached_fieldX = ComplexUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldX_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_fieldX

    @property
    def fieldX(self):
        return self.fieldX_impl()

    cdef inline req_fieldX_impl(self):
        if self.__fbthrift_cached_req_fieldX is None:
            self.__fbthrift_cached_req_fieldX = ComplexUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_fieldX_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_req_fieldX

    @property
    def req_fieldX(self):
        return self.req_fieldX_impl()

    cdef inline opt_fieldX_impl(self):
        if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldX_ref().has_value():
            return None
        if self.__fbthrift_cached_opt_fieldX is None:
            self.__fbthrift_cached_opt_fieldX = ComplexUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_fieldX_ref().ref_unchecked(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_opt_fieldX

    @property
    def opt_fieldX(self):
        return self.opt_fieldX_impl()

    cdef inline fieldY_impl(self):
        if self.__fbthrift_cached_fieldY is None:
            self.__fbthrift_cached_fieldY = List__ComplexUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldY_ref().ref())
        return self.__fbthrift_cached_fieldY

    @property
    def fieldY(self):
        return self.fieldY_impl()

    cdef inline fieldZ_impl(self):
        if self.__fbthrift_cached_fieldZ is None:
            self.__fbthrift_cached_fieldZ = Set__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldZ_ref().ref())
        return self.__fbthrift_cached_fieldZ

    @property
    def fieldZ(self):
        return self.fieldZ_impl()

    cdef inline fieldAA_impl(self):
        if self.__fbthrift_cached_fieldAA is None:
            self.__fbthrift_cached_fieldAA = List__Set__SimpleUnion__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAA_ref().ref())
        return self.__fbthrift_cached_fieldAA

    @property
    def fieldAA(self):
        return self.fieldAA_impl()

    cdef inline fieldAC_impl(self):
        if self.__fbthrift_cached_fieldAC is None:
            self.__fbthrift_cached_fieldAC = translate_cpp_enum_to_python(MyEnumB, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAC_ref().value()))
        return self.__fbthrift_cached_fieldAC

    @property
    def fieldAC(self):
        return self.fieldAC_impl()

    cdef inline fieldAD_impl(self):
        if self.__fbthrift_cached_fieldAD is None:
            self.__fbthrift_cached_fieldAD = translate_cpp_enum_to_python(_includes_types.AnEnum, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAD_ref().value()))
        return self.__fbthrift_cached_fieldAD

    @property
    def fieldAD(self):
        return self.fieldAD_impl()

    cdef inline fieldAE_impl(self):
        if self.__fbthrift_cached_fieldAE is None:
            self.__fbthrift_cached_fieldAE = Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldAE_ref().ref())
        return self.__fbthrift_cached_fieldAE

    @property
    def fieldAE(self):
        return self.fieldAE_impl()


    def __hash__(containerStruct self):
        return super().__hash__()

    def __repr__(containerStruct self):
        return super().__repr__()

    def __str__(containerStruct self):
        return super().__str__()


    def __copy__(containerStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.ccontainerStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<containerStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__containerStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.ccontainerStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.containerStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.ccontainerStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 44

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(containerStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.ccontainerStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(containerStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.ccontainerStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.ccontainerStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.containerStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.containerStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class MyIncludedStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(MyIncludedStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cMyIncludedStruct]()
        self._fields_setter = _fbthrift_types_fields.__MyIncludedStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(MyIncludedStruct self, **kwargs):
        if not kwargs:
            return self
        cdef MyIncludedStruct __fbthrift_inst = MyIncludedStruct.__new__(MyIncludedStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cMyIncludedStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyIncludedStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MyIncludedStruct", {
          "MyIncludedInt": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyIncludedInt_ref().has_value(),
          "MyIncludedStruct": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyIncludedStruct_ref().has_value(),
          "ARequiredField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ARequiredField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cMyIncludedStruct] cpp_obj):
        __fbthrift_inst = <MyIncludedStruct>MyIncludedStruct.__new__(MyIncludedStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline MyIncludedInt_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyIncludedInt_ref().value()

    @property
    def MyIncludedInt(self):
        return self.MyIncludedInt_impl()

    cdef inline MyIncludedStruct_impl(self):
        if self.__fbthrift_cached_MyIncludedStruct is None:
            self.__fbthrift_cached_MyIncludedStruct = _includes_types.AStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).MyIncludedStruct_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_MyIncludedStruct

    @property
    def MyIncludedStruct(self):
        return self.MyIncludedStruct_impl()

    cdef inline ARefField_impl(self):
        if self.__fbthrift_cached_ARefField is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ARefField_ref():
                return None
            self.__fbthrift_cached_ARefField = _includes_types.AStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ARefField_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_ARefField

    @property
    def ARefField(self):
        return self.ARefField_impl()

    cdef inline ARequiredField_impl(self):
        if self.__fbthrift_cached_ARequiredField is None:
            self.__fbthrift_cached_ARequiredField = _includes_types.AStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ARequiredField_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_ARequiredField

    @property
    def ARequiredField(self):
        return self.ARequiredField_impl()


    def __hash__(MyIncludedStruct self):
        return super().__hash__()

    def __repr__(MyIncludedStruct self):
        return super().__repr__()

    def __str__(MyIncludedStruct self):
        return super().__str__()


    def __copy__(MyIncludedStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cMyIncludedStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<MyIncludedStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__MyIncludedStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cMyIncludedStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyIncludedStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cMyIncludedStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 4

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyIncludedStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cMyIncludedStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyIncludedStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cMyIncludedStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cMyIncludedStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.MyIncludedStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MyIncludedStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class AnnotatedStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(AnnotatedStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAnnotatedStruct]()
        self._fields_setter = _fbthrift_types_fields.__AnnotatedStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AnnotatedStruct", {
          "no_annotation": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).no_annotation_ref().has_value(),
          "base_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).base_type_ref().has_value(),
          "list_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_type_ref().has_value(),
          "set_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_type_ref().has_value(),
          "map_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_type_ref().has_value(),
          "map_struct_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_struct_type_ref().has_value(),
          "iobuf_type": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_type_ref().has_value(),
          "iobuf_ptr": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_ptr_ref().has_value(),
          "list_i32_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_i32_template_ref().has_value(),
          "list_string_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_string_template_ref().has_value(),
          "set_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_template_ref().has_value(),
          "map_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_template_ref().has_value(),
          "typedef_list_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_list_template_ref().has_value(),
          "typedef_deque_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_deque_template_ref().has_value(),
          "typedef_set_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_set_template_ref().has_value(),
          "typedef_map_template": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_map_template_ref().has_value(),
          "iobuf_type_val": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_type_val_ref().has_value(),
          "iobuf_ptr_val": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_ptr_val_ref().has_value(),
          "struct_struct": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_struct_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cAnnotatedStruct] cpp_obj):
        __fbthrift_inst = <AnnotatedStruct>AnnotatedStruct.__new__(AnnotatedStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline no_annotation_impl(self):
        if self.__fbthrift_cached_no_annotation is None:
            self.__fbthrift_cached_no_annotation = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).no_annotation_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_no_annotation

    @property
    def no_annotation(self):
        return self.no_annotation_impl()

    cdef inline cpp_unique_ref_impl(self):
        if self.__fbthrift_cached_cpp_unique_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).cpp_unique_ref_ref():
                return None
            self.__fbthrift_cached_cpp_unique_ref = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).cpp_unique_ref_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_cpp_unique_ref

    @property
    def cpp_unique_ref(self):
        return self.cpp_unique_ref_impl()

    cdef inline cpp2_unique_ref_impl(self):
        if self.__fbthrift_cached_cpp2_unique_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).cpp2_unique_ref_ref():
                return None
            self.__fbthrift_cached_cpp2_unique_ref = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).cpp2_unique_ref_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_cpp2_unique_ref

    @property
    def cpp2_unique_ref(self):
        return self.cpp2_unique_ref_impl()

    cdef inline container_with_ref_impl(self):
        if self.__fbthrift_cached_container_with_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).container_with_ref_ref():
                return None
            self.__fbthrift_cached_container_with_ref = Map__i32_List__string__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).container_with_ref_ref()))
        return self.__fbthrift_cached_container_with_ref

    @property
    def container_with_ref(self):
        return self.container_with_ref_impl()

    cdef inline req_cpp_unique_ref_impl(self):
        if self.__fbthrift_cached_req_cpp_unique_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_cpp_unique_ref_ref():
                return None
            self.__fbthrift_cached_req_cpp_unique_ref = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_cpp_unique_ref_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_req_cpp_unique_ref

    @property
    def req_cpp_unique_ref(self):
        return self.req_cpp_unique_ref_impl()

    cdef inline req_cpp2_unique_ref_impl(self):
        if self.__fbthrift_cached_req_cpp2_unique_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_cpp2_unique_ref_ref():
                return None
            self.__fbthrift_cached_req_cpp2_unique_ref = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_cpp2_unique_ref_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_req_cpp2_unique_ref

    @property
    def req_cpp2_unique_ref(self):
        return self.req_cpp2_unique_ref_impl()

    cdef inline req_container_with_ref_impl(self):
        if self.__fbthrift_cached_req_container_with_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_container_with_ref_ref():
                return None
            self.__fbthrift_cached_req_container_with_ref = List__string__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_container_with_ref_ref()))
        return self.__fbthrift_cached_req_container_with_ref

    @property
    def req_container_with_ref(self):
        return self.req_container_with_ref_impl()

    cdef inline opt_cpp_unique_ref_impl(self):
        if self.__fbthrift_cached_opt_cpp_unique_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_cpp_unique_ref_ref():
                return None
            self.__fbthrift_cached_opt_cpp_unique_ref = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_cpp_unique_ref_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_opt_cpp_unique_ref

    @property
    def opt_cpp_unique_ref(self):
        return self.opt_cpp_unique_ref_impl()

    cdef inline opt_cpp2_unique_ref_impl(self):
        if self.__fbthrift_cached_opt_cpp2_unique_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_cpp2_unique_ref_ref():
                return None
            self.__fbthrift_cached_opt_cpp2_unique_ref = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_cpp2_unique_ref_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_opt_cpp2_unique_ref

    @property
    def opt_cpp2_unique_ref(self):
        return self.opt_cpp2_unique_ref_impl()

    cdef inline opt_container_with_ref_impl(self):
        if self.__fbthrift_cached_opt_container_with_ref is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_container_with_ref_ref():
                return None
            self.__fbthrift_cached_opt_container_with_ref = Set__i32__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_container_with_ref_ref()))
        return self.__fbthrift_cached_opt_container_with_ref

    @property
    def opt_container_with_ref(self):
        return self.opt_container_with_ref_impl()

    cdef inline ref_type_unique_impl(self):
        if self.__fbthrift_cached_ref_type_unique is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ref_type_unique_ref():
                return None
            self.__fbthrift_cached_ref_type_unique = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ref_type_unique_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_ref_type_unique

    @property
    def ref_type_unique(self):
        return self.ref_type_unique_impl()

    cdef inline ref_type_shared_impl(self):
        if self.__fbthrift_cached_ref_type_shared is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ref_type_shared_ref():
                return None
            self.__fbthrift_cached_ref_type_shared = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ref_type_shared_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_ref_type_shared

    @property
    def ref_type_shared(self):
        return self.ref_type_shared_impl()

    cdef inline ref_type_const_impl(self):
        if self.__fbthrift_cached_ref_type_const is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ref_type_const_ref():
                return None
            self.__fbthrift_cached_ref_type_const = Map__i32_List__string__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).ref_type_const_ref()))
        return self.__fbthrift_cached_ref_type_const

    @property
    def ref_type_const(self):
        return self.ref_type_const_impl()

    cdef inline req_ref_type_shared_impl(self):
        if self.__fbthrift_cached_req_ref_type_shared is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_ref_type_shared_ref():
                return None
            self.__fbthrift_cached_req_ref_type_shared = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_ref_type_shared_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_req_ref_type_shared

    @property
    def req_ref_type_shared(self):
        return self.req_ref_type_shared_impl()

    cdef inline req_ref_type_const_impl(self):
        if self.__fbthrift_cached_req_ref_type_const is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_ref_type_const_ref():
                return None
            self.__fbthrift_cached_req_ref_type_const = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_ref_type_const_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_req_ref_type_const

    @property
    def req_ref_type_const(self):
        return self.req_ref_type_const_impl()

    cdef inline req_ref_type_unique_impl(self):
        if self.__fbthrift_cached_req_ref_type_unique is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_ref_type_unique_ref():
                return None
            self.__fbthrift_cached_req_ref_type_unique = List__string__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).req_ref_type_unique_ref()))
        return self.__fbthrift_cached_req_ref_type_unique

    @property
    def req_ref_type_unique(self):
        return self.req_ref_type_unique_impl()

    cdef inline opt_ref_type_const_impl(self):
        if self.__fbthrift_cached_opt_ref_type_const is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_ref_type_const_ref():
                return None
            self.__fbthrift_cached_opt_ref_type_const = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_ref_type_const_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_opt_ref_type_const

    @property
    def opt_ref_type_const(self):
        return self.opt_ref_type_const_impl()

    cdef inline opt_ref_type_unique_impl(self):
        if self.__fbthrift_cached_opt_ref_type_unique is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_ref_type_unique_ref():
                return None
            self.__fbthrift_cached_opt_ref_type_unique = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_ref_type_unique_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_opt_ref_type_unique

    @property
    def opt_ref_type_unique(self):
        return self.opt_ref_type_unique_impl()

    cdef inline opt_ref_type_shared_impl(self):
        if self.__fbthrift_cached_opt_ref_type_shared is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_ref_type_shared_ref():
                return None
            self.__fbthrift_cached_opt_ref_type_shared = Set__i32__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).opt_ref_type_shared_ref()))
        return self.__fbthrift_cached_opt_ref_type_shared

    @property
    def opt_ref_type_shared(self):
        return self.opt_ref_type_shared_impl()

    cdef inline base_type_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).base_type_ref().value()

    @property
    def base_type(self):
        return self.base_type_impl()

    cdef inline list_type_impl(self):
        if self.__fbthrift_cached_list_type is None:
            self.__fbthrift_cached_list_type = folly_small_vector_int64_t_8__List__i64__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_type_ref().ref())
        return self.__fbthrift_cached_list_type

    @property
    def list_type(self):
        return self.list_type_impl()

    cdef inline set_type_impl(self):
        if self.__fbthrift_cached_set_type is None:
            self.__fbthrift_cached_set_type = folly_sorted_vector_set_std_string__Set__string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_type_ref().ref())
        return self.__fbthrift_cached_set_type

    @property
    def set_type(self):
        return self.set_type_impl()

    cdef inline map_type_impl(self):
        if self.__fbthrift_cached_map_type is None:
            self.__fbthrift_cached_map_type = FakeMap__Map__i64_double__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_type_ref().ref())
        return self.__fbthrift_cached_map_type

    @property
    def map_type(self):
        return self.map_type_impl()

    cdef inline map_struct_type_impl(self):
        if self.__fbthrift_cached_map_struct_type is None:
            self.__fbthrift_cached_map_struct_type = std_unordered_map_std_string_containerStruct__Map__string_containerStruct__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_struct_type_ref().ref())
        return self.__fbthrift_cached_map_struct_type

    @property
    def map_struct_type(self):
        return self.map_struct_type_impl()

    cdef inline iobuf_type_impl(self):
        if self.__fbthrift_cached_iobuf_type is None:
            self.__fbthrift_cached_iobuf_type = _fbthrift_iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_type_ref().ref()), self)
        return self.__fbthrift_cached_iobuf_type

    @property
    def iobuf_type(self):
        return self.iobuf_type_impl()

    cdef inline iobuf_ptr_impl(self):
        if self.__fbthrift_cached_iobuf_ptr is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_ptr_ref().value():
                return None
            self.__fbthrift_cached_iobuf_ptr = _fbthrift_iobuf.IOBuf.create(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_ptr_ref().value().get(), self)
        return self.__fbthrift_cached_iobuf_ptr

    @property
    def iobuf_ptr(self):
        return self.iobuf_ptr_impl()

    cdef inline list_i32_template_impl(self):
        if self.__fbthrift_cached_list_i32_template is None:
            self.__fbthrift_cached_list_i32_template = std_list__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_i32_template_ref().ref())
        return self.__fbthrift_cached_list_i32_template

    @property
    def list_i32_template(self):
        return self.list_i32_template_impl()

    cdef inline list_string_template_impl(self):
        if self.__fbthrift_cached_list_string_template is None:
            self.__fbthrift_cached_list_string_template = std_deque__List__string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).list_string_template_ref().ref())
        return self.__fbthrift_cached_list_string_template

    @property
    def list_string_template(self):
        return self.list_string_template_impl()

    cdef inline set_template_impl(self):
        if self.__fbthrift_cached_set_template is None:
            self.__fbthrift_cached_set_template = folly_sorted_vector_set__Set__string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).set_template_ref().ref())
        return self.__fbthrift_cached_set_template

    @property
    def set_template(self):
        return self.set_template_impl()

    cdef inline map_template_impl(self):
        if self.__fbthrift_cached_map_template is None:
            self.__fbthrift_cached_map_template = folly_sorted_vector_map__Map__i64_string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_template_ref().ref())
        return self.__fbthrift_cached_map_template

    @property
    def map_template(self):
        return self.map_template_impl()

    cdef inline typedef_list_template_impl(self):
        if self.__fbthrift_cached_typedef_list_template is None:
            self.__fbthrift_cached_typedef_list_template = std_list__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_list_template_ref().ref())
        return self.__fbthrift_cached_typedef_list_template

    @property
    def typedef_list_template(self):
        return self.typedef_list_template_impl()

    cdef inline typedef_deque_template_impl(self):
        if self.__fbthrift_cached_typedef_deque_template is None:
            self.__fbthrift_cached_typedef_deque_template = std_deque__List__string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_deque_template_ref().ref())
        return self.__fbthrift_cached_typedef_deque_template

    @property
    def typedef_deque_template(self):
        return self.typedef_deque_template_impl()

    cdef inline typedef_set_template_impl(self):
        if self.__fbthrift_cached_typedef_set_template is None:
            self.__fbthrift_cached_typedef_set_template = folly_sorted_vector_set__Set__string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_set_template_ref().ref())
        return self.__fbthrift_cached_typedef_set_template

    @property
    def typedef_set_template(self):
        return self.typedef_set_template_impl()

    cdef inline typedef_map_template_impl(self):
        if self.__fbthrift_cached_typedef_map_template is None:
            self.__fbthrift_cached_typedef_map_template = folly_sorted_vector_map__Map__i64_string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).typedef_map_template_ref().ref())
        return self.__fbthrift_cached_typedef_map_template

    @property
    def typedef_map_template(self):
        return self.typedef_map_template_impl()

    cdef inline iobuf_type_val_impl(self):
        if self.__fbthrift_cached_iobuf_type_val is None:
            self.__fbthrift_cached_iobuf_type_val = _fbthrift_iobuf.IOBuf.create(ptr_address(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_type_val_ref().ref()), self)
        return self.__fbthrift_cached_iobuf_type_val

    @property
    def iobuf_type_val(self):
        return self.iobuf_type_val_impl()

    cdef inline iobuf_ptr_val_impl(self):
        if self.__fbthrift_cached_iobuf_ptr_val is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_ptr_val_ref().value():
                return None
            self.__fbthrift_cached_iobuf_ptr_val = _fbthrift_iobuf.IOBuf.create(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).iobuf_ptr_val_ref().value().get(), self)
        return self.__fbthrift_cached_iobuf_ptr_val

    @property
    def iobuf_ptr_val(self):
        return self.iobuf_ptr_val_impl()

    cdef inline struct_struct_impl(self):
        if self.__fbthrift_cached_struct_struct is None:
            self.__fbthrift_cached_struct_struct = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).struct_struct_ref().ref(), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_struct_struct

    @property
    def struct_struct(self):
        return self.struct_struct_impl()


    def __hash__(AnnotatedStruct self):
        return super().__hash__()

    def __repr__(AnnotatedStruct self):
        return super().__repr__()

    def __str__(AnnotatedStruct self):
        return super().__str__()


    def __copy__(AnnotatedStruct self):
        return self

    def __eq__(AnnotatedStruct self, other):
        if not isinstance(other, AnnotatedStruct):
            return False
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get()) == deref((<AnnotatedStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())

    def __ne__(AnnotatedStruct self, other):
        if not isinstance(other, AnnotatedStruct):
            return True
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE) != deref((<AnnotatedStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__AnnotatedStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cAnnotatedStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AnnotatedStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cAnnotatedStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 37

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AnnotatedStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cAnnotatedStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AnnotatedStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAnnotatedStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cAnnotatedStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.AnnotatedStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AnnotatedStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class ComplexContainerStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(ComplexContainerStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexContainerStruct]()
        self._fields_setter = _fbthrift_types_fields.__ComplexContainerStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(ComplexContainerStruct self, **kwargs):
        if not kwargs:
            return self
        cdef ComplexContainerStruct __fbthrift_inst = ComplexContainerStruct.__new__(ComplexContainerStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexContainerStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ComplexContainerStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ComplexContainerStruct", {
          "map_of_iobufs": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_of_iobufs_ref().has_value(),
          "map_of_iobuf_ptrs": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_of_iobuf_ptrs_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cComplexContainerStruct] cpp_obj):
        __fbthrift_inst = <ComplexContainerStruct>ComplexContainerStruct.__new__(ComplexContainerStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline map_of_iobufs_impl(self):
        if self.__fbthrift_cached_map_of_iobufs is None:
            self.__fbthrift_cached_map_of_iobufs = Map__string_folly_IOBuf__binary__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_of_iobufs_ref().ref())
        return self.__fbthrift_cached_map_of_iobufs

    @property
    def map_of_iobufs(self):
        return self.map_of_iobufs_impl()

    cdef inline map_of_iobuf_ptrs_impl(self):
        if self.__fbthrift_cached_map_of_iobuf_ptrs is None:
            self.__fbthrift_cached_map_of_iobuf_ptrs = Map__string_std_unique_ptr_folly_IOBuf__binary__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).map_of_iobuf_ptrs_ref().ref())
        return self.__fbthrift_cached_map_of_iobuf_ptrs

    @property
    def map_of_iobuf_ptrs(self):
        return self.map_of_iobuf_ptrs_impl()


    def __hash__(ComplexContainerStruct self):
        return super().__hash__()

    def __repr__(ComplexContainerStruct self):
        return super().__repr__()

    def __str__(ComplexContainerStruct self):
        return super().__str__()


    def __copy__(ComplexContainerStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cComplexContainerStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<ComplexContainerStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__ComplexContainerStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cComplexContainerStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ComplexContainerStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cComplexContainerStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ComplexContainerStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cComplexContainerStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ComplexContainerStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cComplexContainerStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cComplexContainerStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.ComplexContainerStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ComplexContainerStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class FloatStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(FloatStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cFloatStruct]()
        self._fields_setter = _fbthrift_types_fields.__FloatStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(FloatStruct self, **kwargs):
        if not kwargs:
            return self
        cdef FloatStruct __fbthrift_inst = FloatStruct.__new__(FloatStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cFloatStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FloatStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("FloatStruct", {
          "floatField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).floatField_ref().has_value(),
          "doubleField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).doubleField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cFloatStruct] cpp_obj):
        __fbthrift_inst = <FloatStruct>FloatStruct.__new__(FloatStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline floatField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).floatField_ref().value()

    @property
    def floatField(self):
        return self.floatField_impl()

    cdef inline doubleField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).doubleField_ref().value()

    @property
    def doubleField(self):
        return self.doubleField_impl()


    def __hash__(FloatStruct self):
        return super().__hash__()

    def __repr__(FloatStruct self):
        return super().__repr__()

    def __str__(FloatStruct self):
        return super().__str__()


    def __copy__(FloatStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cFloatStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<FloatStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__FloatStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cFloatStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.FloatStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cFloatStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(FloatStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cFloatStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(FloatStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cFloatStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cFloatStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.FloatStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.FloatStruct, self)



@__cython.auto_pickle(False)
@__cython.final
cdef class FloatUnion(thrift.py3.types.Union):
    __module__ = _fbthrift__module_name__
    Type = __FloatUnionType

    def __init__(
        self, *,
        floatSide=None,
        doubleSide=None
    ):
        if floatSide is not None:
            if not isinstance(floatSide, (float, int)):
                raise TypeError(f'floatSide is not a { float !r}.')

        if doubleSide is not None:
            if not isinstance(doubleSide, (float, int)):
                raise TypeError(f'doubleSide is not a { float !r}.')

        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = __to_shared_ptr(cmove(FloatUnion._make_instance(
          NULL,
          floatSide,
          doubleSide,
        )))
        self._initialize_py()

    @staticmethod
    def fromValue(value):
        if value is None:
            return FloatUnion()
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    if <float>value != value:
                        raise OverflowError
                    return FloatUnion(floatSide=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return FloatUnion(doubleSide=value)
                except OverflowError:
                    pass
        if isinstance(value, (float, int)):
            try:
                <float> value
                return FloatUnion(floatSide=value)
            except OverflowError:
                pass
        if isinstance(value, (float, int)):
            try:
                <double> value
                return FloatUnion(doubleSide=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[_module_cbindings.cFloatUnion] _make_instance(
        _module_cbindings.cFloatUnion* base_instance,
        object floatSide,
        object doubleSide
    ) except *:
        cdef unique_ptr[_module_cbindings.cFloatUnion] c_inst = make_unique[_module_cbindings.cFloatUnion]()
        cdef bint any_set = False
        if floatSide is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_floatSide(floatSide)
            any_set = True
        if doubleSide is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_doubleSide(doubleSide)
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return cmove(c_inst)

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cFloatUnion] cpp_obj):
        __fbthrift_inst = <FloatUnion>FloatUnion.__new__(FloatUnion)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        __fbthrift_inst._initialize_py()
        return __fbthrift_inst

    @property
    def floatSide(FloatUnion self not None):
        if self.type_int != 1:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not floatSide')
        return self.value

    @property
    def doubleSide(FloatUnion self not None):
        if self.type_int != 2:
            raise AttributeError(f'Union contains a value of type {self.type.name}, not doubleSide')
        return self.value


    def __hash__(FloatUnion self):
        return  super().__hash__()

    @property
    def type(FloatUnion self not None):
        if self.py_type is None:
            self.py_type = FloatUnion.Type(self.type_int)
        return self.py_type

    @property
    def value(FloatUnion self not None):
        if self.py_value is not None or self.type_int == 0:
            return self.py_value
        elif self.type_int == 1:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_floatSide()
        elif self.type_int == 2:
            self.py_value = deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).get_doubleSide()
        return self.py_value

    cdef _initialize_py(FloatUnion self):
        self.py_type = None
        self.type_int = int(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).getType())
        self.py_value = None

    def __copy__(FloatUnion self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cFloatUnion](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<FloatUnion>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__FloatUnion()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cFloatUnion].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.FloatUnion"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cFloatUnion](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(FloatUnion self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cFloatUnion](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(FloatUnion self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cFloatUnion]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cFloatUnion](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        # clear cache reload since the underlying data's changed
        self._initialize_py()
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.FloatUnion,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.FloatUnion, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class AllRequiredNoExceptMoveCtrStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(AllRequiredNoExceptMoveCtrStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct]()
        self._fields_setter = _fbthrift_types_fields.__AllRequiredNoExceptMoveCtrStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(AllRequiredNoExceptMoveCtrStruct self, **kwargs):
        if not kwargs:
            return self
        cdef AllRequiredNoExceptMoveCtrStruct __fbthrift_inst = AllRequiredNoExceptMoveCtrStruct.__new__(AllRequiredNoExceptMoveCtrStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__AllRequiredNoExceptMoveCtrStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AllRequiredNoExceptMoveCtrStruct", {
          "intField": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).intField_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct] cpp_obj):
        __fbthrift_inst = <AllRequiredNoExceptMoveCtrStruct>AllRequiredNoExceptMoveCtrStruct.__new__(AllRequiredNoExceptMoveCtrStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline intField_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).intField_ref().value()

    @property
    def intField(self):
        return self.intField_impl()


    def __hash__(AllRequiredNoExceptMoveCtrStruct self):
        return super().__hash__()

    def __repr__(AllRequiredNoExceptMoveCtrStruct self):
        return super().__repr__()

    def __str__(AllRequiredNoExceptMoveCtrStruct self):
        return super().__str__()


    def __copy__(AllRequiredNoExceptMoveCtrStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<AllRequiredNoExceptMoveCtrStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__AllRequiredNoExceptMoveCtrStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AllRequiredNoExceptMoveCtrStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AllRequiredNoExceptMoveCtrStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AllRequiredNoExceptMoveCtrStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cAllRequiredNoExceptMoveCtrStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.AllRequiredNoExceptMoveCtrStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AllRequiredNoExceptMoveCtrStruct, self)

cdef cmap[string,cint64_t] Map__string_i64__make_instance(object items) except *:
    cdef cmap[string,cint64_t] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint64_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_i64__from_cpp(const cmap[string,cint64_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cint64_t]] iter = __map_iter[cmap[string,cint64_t]](c_map)
    cdef string ckey
    cdef cint64_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_i64(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct] Map__Empty_MyStruct__make_instance(object items) except *:
    cdef cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct] c_inst
    cdef _module_cbindings.cEmpty c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, Empty):
            raise TypeError(f"{key!r} is not of type Empty")
        c_key = deref((<Empty>key)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)
        if not isinstance(item, MyStruct):
            raise TypeError(f"{item!r} is not of type MyStruct")

        c_inst[c_key] = deref((<MyStruct>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)
    return cmove(c_inst)

cdef object Map__Empty_MyStruct__from_cpp(const cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]] iter = __map_iter[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]](c_map)
    cdef shared_ptr[_module_cbindings.cEmpty] ckey
    cdef shared_ptr[_module_cbindings.cMyStruct] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[Empty._create_FBTHRIFT_ONLY_DO_NOT_USE(cmove(ckey))] = MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(cmove(cval))
    return Map__Empty_MyStruct(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]] List__Map__Empty_MyStruct__make_instance(object items) except *:
    cdef vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Mapping[Empty, MyStruct]")
        if not isinstance(item, Map__Empty_MyStruct):
            item = Map__Empty_MyStruct(item)
        c_inst.push_back(Map__Empty_MyStruct__make_instance(item))
    return cmove(c_inst)

cdef object List__Map__Empty_MyStruct__from_cpp(const vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Map__Empty_MyStruct__from_cpp(c_vec[idx]))
    return List__Map__Empty_MyStruct(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]] List__List__Map__Empty_MyStruct__make_instance(object items) except *:
    cdef vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_typing.Mapping[Empty, MyStruct]]")
        if not isinstance(item, List__Map__Empty_MyStruct):
            item = List__Map__Empty_MyStruct(item)
        c_inst.push_back(List__Map__Empty_MyStruct__make_instance(item))
    return cmove(c_inst)

cdef object List__List__Map__Empty_MyStruct__from_cpp(const vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__Map__Empty_MyStruct__from_cpp(c_vec[idx]))
    return List__List__Map__Empty_MyStruct(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]] List__List__List__Map__Empty_MyStruct__make_instance(object items) except *:
    cdef vector[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[_typing.Mapping[Empty, MyStruct]]]")
        if not isinstance(item, List__List__Map__Empty_MyStruct):
            item = List__List__Map__Empty_MyStruct(item)
        c_inst.push_back(List__List__Map__Empty_MyStruct__make_instance(item))
    return cmove(c_inst)

cdef object List__List__List__Map__Empty_MyStruct__from_cpp(const vector[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__List__Map__Empty_MyStruct__from_cpp(c_vec[idx]))
    return List__List__List__Map__Empty_MyStruct(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[_module_cbindings.cMyEnumA] List__MyEnumA__make_instance(object items) except *:
    cdef vector[_module_cbindings.cMyEnumA] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, MyEnumA):
            raise TypeError(f"{item!r} is not of type MyEnumA")
        c_inst.push_back(<_module_cbindings.cMyEnumA><int>item)
    return cmove(c_inst)

cdef object List__MyEnumA__from_cpp(const vector[_module_cbindings.cMyEnumA]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(translate_cpp_enum_to_python(MyEnumA, <int> c_vec[idx]))
    return List__MyEnumA(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[_module_cbindings.cMyStruct] Set__MyStruct__make_instance(object items) except *:
    cdef cset[_module_cbindings.cMyStruct] c_inst
    cdef _module_cbindings.cMyStruct c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, MyStruct):
            raise TypeError(f"{item!r} is not of type MyStruct")
        c_item = deref((<MyStruct>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__MyStruct__from_cpp(const cset[_module_cbindings.cMyStruct]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[_module_cbindings.cMyStruct]] iter = __set_iter[cset[_module_cbindings.cMyStruct]](c_set)
    cdef shared_ptr[_module_cbindings.cMyStruct] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(cmove(citem)))
    return Set__MyStruct(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef vector[_module_cbindings.cComplexUnion] List__ComplexUnion__make_instance(object items) except *:
    cdef vector[_module_cbindings.cComplexUnion] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, ComplexUnion):
            raise TypeError(f"{item!r} is not of type ComplexUnion")
        c_inst.push_back(deref((<ComplexUnion>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
    return cmove(c_inst)

cdef object List__ComplexUnion__from_cpp(const vector[_module_cbindings.cComplexUnion]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(ComplexUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cComplexUnion](c_vec[idx])))
    return List__ComplexUnion(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[string] List__string__make_instance(object items) except *:
    cdef vector[string] c_inst
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_inst.push_back(item.encode('UTF-8'))
    return cmove(c_inst)

cdef object List__string__from_cpp(const vector[string]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(__init_unicode_from_cpp(c_vec[idx]))
    return List__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[vector[string]] Set__List__string__make_instance(object items) except *:
    cdef cset[vector[string]] c_inst
    cdef vector[string] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[str]")
        if not isinstance(item, List__string):
            item = List__string(item)
        c_item = List__string__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__List__string__from_cpp(const cset[vector[string]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[vector[string]]] iter = __set_iter[cset[vector[string]]](c_set)
    cdef vector[string] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(List__string__from_cpp(citem))
    return Set__List__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]] Set__List__List__Map__Empty_MyStruct__make_instance(object items) except *:
    cdef cset[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]] c_inst
    cdef vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[_typing.Sequence[_typing.Mapping[Empty, MyStruct]]]")
        if not isinstance(item, List__List__Map__Empty_MyStruct):
            item = List__List__Map__Empty_MyStruct(item)
        c_item = List__List__Map__Empty_MyStruct__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__List__List__Map__Empty_MyStruct__from_cpp(const cset[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]]] iter = __set_iter[cset[vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]]]](c_set)
    cdef vector[vector[cmap[_module_cbindings.cEmpty,_module_cbindings.cMyStruct]]] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(List__List__Map__Empty_MyStruct__from_cpp(citem))
    return Set__List__List__Map__Empty_MyStruct(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cmap[cint32_t,vector[string]] Map__i32_List__string__make_instance(object items) except *:
    cdef cmap[cint32_t,vector[string]] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[str]")
        if not isinstance(item, List__string):
            item = List__string(item)

        c_inst[c_key] = List__string__make_instance(item)
    return cmove(c_inst)

cdef object Map__i32_List__string__from_cpp(const cmap[cint32_t,vector[string]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint32_t,vector[string]]] iter = __map_iter[cmap[cint32_t,vector[string]]](c_map)
    cdef cint32_t ckey = 0
    cdef vector[string] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = List__string__from_cpp(cval)
    return Map__i32_List__string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cbool] List__bool__make_instance(object items) except *:
    cdef vector[cbool] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, bool):
            raise TypeError(f"{item!r} is not of type bool")
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__bool__from_cpp(const vector[cbool]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__bool(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[cint32_t] List__i32__make_instance(object items) except *:
    cdef vector[cint32_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__i32__from_cpp(const vector[cint32_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[cint32_t]] List__List__i32__make_instance(object items) except *:
    cdef vector[vector[cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)
        c_inst.push_back(List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__i32__from_cpp(const vector[vector[cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__i32__from_cpp(c_vec[idx]))
    return List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[vector[cint32_t]]] List__List__List__i32__make_instance(object items) except *:
    cdef vector[vector[vector[cint32_t]]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[int]]")
        if not isinstance(item, List__List__i32):
            item = List__List__i32(item)
        c_inst.push_back(List__List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__List__i32__from_cpp(const vector[vector[vector[cint32_t]]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__List__i32__from_cpp(c_vec[idx]))
    return List__List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[vector[vector[cint32_t]]]] List__List__List__List__i32__make_instance(object items) except *:
    cdef vector[vector[vector[vector[cint32_t]]]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[_typing.Sequence[int]]]")
        if not isinstance(item, List__List__List__i32):
            item = List__List__List__i32(item)
        c_inst.push_back(List__List__List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__List__List__i32__from_cpp(const vector[vector[vector[vector[cint32_t]]]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__List__List__i32__from_cpp(c_vec[idx]))
    return List__List__List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[vector[cint32_t]] Set__List__i32__make_instance(object items) except *:
    cdef cset[vector[cint32_t]] c_inst
    cdef vector[cint32_t] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)
        c_item = List__i32__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__List__i32__from_cpp(const cset[vector[cint32_t]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[vector[cint32_t]]] iter = __set_iter[cset[vector[cint32_t]]](c_set)
    cdef vector[cint32_t] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(List__i32__from_cpp(citem))
    return Set__List__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[string] Set__string__make_instance(object items) except *:
    cdef cset[string] c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_item = item.encode('UTF-8')
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__string__from_cpp(const cset[string]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[string]] iter = __set_iter[cset[string]](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(__init_unicode_from_cpp(citem))
    return Set__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef vector[cset[string]] List__Set__string__make_instance(object items) except *:
    cdef vector[cset[string]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[str]")
        if not isinstance(item, Set__string):
            item = Set__string(item)
        c_inst.push_back(Set__string__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__string__from_cpp(const vector[cset[string]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__string__from_cpp(c_vec[idx]))
    return List__Set__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[vector[cset[string]],string] Map__List__Set__string_string__make_instance(object items) except *:
    cdef cmap[vector[cset[string]],string] c_inst
    cdef vector[cset[string]] c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if key is None:
            raise TypeError("None is not of type _typing.Sequence[_typing.AbstractSet[str]]")
        if not isinstance(key, List__Set__string):
            key = List__Set__string(key)
        c_key = List__Set__string__make_instance(key)
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__List__Set__string_string__from_cpp(const cmap[vector[cset[string]],string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[vector[cset[string]],string]] iter = __map_iter[cmap[vector[cset[string]],string]](c_map)
    cdef vector[cset[string]] ckey
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[List__Set__string__from_cpp(ckey)] = __init_unicode_from_cpp(cval)
    return Map__List__Set__string_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]] Map__Set__List__i32_Map__List__Set__string_string__make_instance(object items) except *:
    cdef cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]] c_inst
    cdef cset[vector[cint32_t]] c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if key is None:
            raise TypeError("None is not of type _typing.AbstractSet[_typing.Sequence[int]]")
        if not isinstance(key, Set__List__i32):
            key = Set__List__i32(key)
        c_key = Set__List__i32__make_instance(key)
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[_typing.Sequence[_typing.AbstractSet[str]], str]")
        if not isinstance(item, Map__List__Set__string_string):
            item = Map__List__Set__string_string(item)

        c_inst[c_key] = Map__List__Set__string_string__make_instance(item)
    return cmove(c_inst)

cdef object Map__Set__List__i32_Map__List__Set__string_string__from_cpp(const cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] iter = __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]](c_map)
    cdef cset[vector[cint32_t]] ckey
    cdef cmap[vector[cset[string]],string] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[Set__List__i32__from_cpp(ckey)] = Map__List__Set__string_string__from_cpp(cval)
    return Map__Set__List__i32_Map__List__Set__string_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[string] List__binary__make_instance(object items) except *:
    cdef vector[string] c_inst
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.Sequence[bytes] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, bytes):
            raise TypeError(f"{item!r} is not of type bytes")
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__binary__from_cpp(const vector[string]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(bytes(<string>c_vec[idx]))
    return List__binary(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[_module_cbindings.cMyEnumA,string] Map__MyEnumA_string__make_instance(object items) except *:
    cdef cmap[_module_cbindings.cMyEnumA,string] c_inst
    cdef _module_cbindings.cMyEnumA c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, MyEnumA):
            raise TypeError(f"{key!r} is not of type MyEnumA")
        c_key = <_module_cbindings.cMyEnumA><int>key
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__MyEnumA_string__from_cpp(const cmap[_module_cbindings.cMyEnumA,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[_module_cbindings.cMyEnumA,string]] iter = __map_iter[cmap[_module_cbindings.cMyEnumA,string]](c_map)
    cdef _module_cbindings.cMyEnumA ckey
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[translate_cpp_enum_to_python(MyEnumA, <int> ckey)] = __init_unicode_from_cpp(cval)
    return Map__MyEnumA_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cset[cint64_t] Set__i64__make_instance(object items) except *:
    cdef cset[cint64_t] c_inst
    cdef cint64_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint64_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__i64__from_cpp(const cset[cint64_t]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cint64_t]] iter = __set_iter[cset[cint64_t]](c_set)
    cdef cint64_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__i64(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cmap[string,cint32_t] Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cint32_t] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_i32__from_cpp(const cmap[string,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cint32_t]] iter = __map_iter[cmap[string,cint32_t]](c_map)
    cdef string ckey
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[_module_cbindings.cSimpleUnion] List__SimpleUnion__make_instance(object items) except *:
    cdef vector[_module_cbindings.cSimpleUnion] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, SimpleUnion):
            raise TypeError(f"{item!r} is not of type SimpleUnion")
        c_inst.push_back(deref((<SimpleUnion>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
    return cmove(c_inst)

cdef object List__SimpleUnion__from_cpp(const vector[_module_cbindings.cSimpleUnion]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(SimpleUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cSimpleUnion](c_vec[idx])))
    return List__SimpleUnion(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[_module_cbindings.cSimpleUnion] Set__SimpleUnion__make_instance(object items) except *:
    cdef cset[_module_cbindings.cSimpleUnion] c_inst
    cdef _module_cbindings.cSimpleUnion c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, SimpleUnion):
            raise TypeError(f"{item!r} is not of type SimpleUnion")
        c_item = deref((<SimpleUnion>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__SimpleUnion__from_cpp(const cset[_module_cbindings.cSimpleUnion]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[_module_cbindings.cSimpleUnion]] iter = __set_iter[cset[_module_cbindings.cSimpleUnion]](c_set)
    cdef shared_ptr[_module_cbindings.cSimpleUnion] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(SimpleUnion._create_FBTHRIFT_ONLY_DO_NOT_USE(cmove(citem)))
    return Set__SimpleUnion(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef vector[cset[_module_cbindings.cSimpleUnion]] List__Set__SimpleUnion__make_instance(object items) except *:
    cdef vector[cset[_module_cbindings.cSimpleUnion]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[SimpleUnion]")
        if not isinstance(item, Set__SimpleUnion):
            item = Set__SimpleUnion(item)
        c_inst.push_back(Set__SimpleUnion__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__SimpleUnion__from_cpp(const vector[cset[_module_cbindings.cSimpleUnion]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__SimpleUnion__from_cpp(c_vec[idx]))
    return List__Set__SimpleUnion(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,cbool] Map__string_bool__make_instance(object items) except *:
    cdef cmap[string,cbool] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, bool):
            raise TypeError(f"{item!r} is not of type bool")

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_bool__from_cpp(const cmap[string,cbool]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cbool]] iter = __map_iter[cmap[string,cbool]](c_map)
    cdef string ckey
    cdef cbool cval = False
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_bool(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cset[cint32_t] Set__i32__make_instance(object items) except *:
    cdef cset[cint32_t] c_inst
    cdef cint32_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint32_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__i32__from_cpp(const cset[cint32_t]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cint32_t]] iter = __set_iter[cset[cint32_t]](c_set)
    cdef cint32_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cmap[string,cmap[string,cint32_t]] Map__string_Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cmap[string,cint32_t]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[str, int]")
        if not isinstance(item, Map__string_i32):
            item = Map__string_i32(item)

        c_inst[c_key] = Map__string_i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_Map__string_i32__from_cpp(const cmap[string,cmap[string,cint32_t]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cmap[string,cint32_t]]] iter = __map_iter[cmap[string,cmap[string,cint32_t]]](c_map)
    cdef string ckey
    cdef cmap[string,cint32_t] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = Map__string_i32__from_cpp(cval)
    return Map__string_Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,cmap[string,cmap[string,cint32_t]]] Map__string_Map__string_Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cmap[string,cmap[string,cint32_t]]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[str, _typing.Mapping[str, int]]")
        if not isinstance(item, Map__string_Map__string_i32):
            item = Map__string_Map__string_i32(item)

        c_inst[c_key] = Map__string_Map__string_i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_Map__string_Map__string_i32__from_cpp(const cmap[string,cmap[string,cmap[string,cint32_t]]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]] iter = __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]](c_map)
    cdef string ckey
    cdef cmap[string,cmap[string,cint32_t]] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = Map__string_Map__string_i32__from_cpp(cval)
    return Map__string_Map__string_Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cset[cint32_t]] List__Set__i32__make_instance(object items) except *:
    cdef vector[cset[cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[int]")
        if not isinstance(item, Set__i32):
            item = Set__i32(item)
        c_inst.push_back(Set__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__i32__from_cpp(const vector[cset[cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__i32__from_cpp(c_vec[idx]))
    return List__Set__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,vector[cint32_t]] Map__string_List__i32__make_instance(object items) except *:
    cdef cmap[string,vector[cint32_t]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)

        c_inst[c_key] = List__i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_List__i32__from_cpp(const cmap[string,vector[cint32_t]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,vector[cint32_t]]] iter = __map_iter[cmap[string,vector[cint32_t]]](c_map)
    cdef string ckey
    cdef vector[cint32_t] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = List__i32__from_cpp(cval)
    return Map__string_List__i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cset[cbool] Set__bool__make_instance(object items) except *:
    cdef cset[cbool] c_inst
    cdef cbool c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, bool):
            raise TypeError(f"{item!r} is not of type bool")
        c_item = item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__bool__from_cpp(const cset[cbool]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cbool]] iter = __set_iter[cset[cbool]](c_set)
    cdef cbool citem = False
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__bool(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[cset[cbool]] Set__Set__bool__make_instance(object items) except *:
    cdef cset[cset[cbool]] c_inst
    cdef cset[cbool] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.AbstractSet[bool]")
        if not isinstance(item, Set__bool):
            item = Set__bool(item)
        c_item = Set__bool__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__Set__bool__from_cpp(const cset[cset[cbool]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cset[cbool]]] iter = __set_iter[cset[cset[cbool]]](c_set)
    cdef cset[cbool] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(Set__bool__from_cpp(citem))
    return Set__Set__bool(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[cset[cset[cbool]]] Set__Set__Set__bool__make_instance(object items) except *:
    cdef cset[cset[cset[cbool]]] c_inst
    cdef cset[cset[cbool]] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.AbstractSet[_typing.AbstractSet[bool]]")
        if not isinstance(item, Set__Set__bool):
            item = Set__Set__bool(item)
        c_item = Set__Set__bool__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__Set__Set__bool__from_cpp(const cset[cset[cset[cbool]]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cset[cset[cbool]]]] iter = __set_iter[cset[cset[cset[cbool]]]](c_set)
    cdef cset[cset[cbool]] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(Set__Set__bool__from_cpp(citem))
    return Set__Set__Set__bool(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef _module_cbindings.folly_small_vector_int64_t_8 folly_small_vector_int64_t_8__List__i64__make_instance(object items) except *:
    cdef _module_cbindings.folly_small_vector_int64_t_8 c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint64_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object folly_small_vector_int64_t_8__List__i64__from_cpp(const _module_cbindings.folly_small_vector_int64_t_8& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return folly_small_vector_int64_t_8__List__i64(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef _module_cbindings.folly_sorted_vector_set_std_string folly_sorted_vector_set_std_string__Set__string__make_instance(object items) except *:
    cdef _module_cbindings.folly_sorted_vector_set_std_string c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_item = item.encode('UTF-8')
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object folly_sorted_vector_set_std_string__Set__string__from_cpp(const _module_cbindings.folly_sorted_vector_set_std_string& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[_module_cbindings.folly_sorted_vector_set_std_string] iter = __set_iter[_module_cbindings.folly_sorted_vector_set_std_string](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(__init_unicode_from_cpp(citem))
    return folly_sorted_vector_set_std_string__Set__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef _module_cbindings.FakeMap FakeMap__Map__i64_double__make_instance(object items) except *:
    cdef _module_cbindings.FakeMap c_inst
    cdef cint64_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint64_t> key
        if not isinstance(item, (float, int)):
            raise TypeError(f"{item!r} is not of type float")

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object FakeMap__Map__i64_double__from_cpp(const _module_cbindings.FakeMap& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[_module_cbindings.FakeMap] iter = __map_iter[_module_cbindings.FakeMap](c_map)
    cdef cint64_t ckey = 0
    cdef double cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = cval
    return FakeMap__Map__i64_double(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef _module_cbindings.std_unordered_map_std_string_containerStruct std_unordered_map_std_string_containerStruct__Map__string_containerStruct__make_instance(object items) except *:
    cdef _module_cbindings.std_unordered_map_std_string_containerStruct c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, containerStruct):
            raise TypeError(f"{item!r} is not of type containerStruct")

        c_inst[c_key] = deref((<containerStruct>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE)
    return cmove(c_inst)

cdef object std_unordered_map_std_string_containerStruct__Map__string_containerStruct__from_cpp(const _module_cbindings.std_unordered_map_std_string_containerStruct& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[_module_cbindings.std_unordered_map_std_string_containerStruct] iter = __map_iter[_module_cbindings.std_unordered_map_std_string_containerStruct](c_map)
    cdef string ckey
    cdef shared_ptr[_module_cbindings.ccontainerStruct] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = containerStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(cmove(cval))
    return std_unordered_map_std_string_containerStruct__Map__string_containerStruct(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef _module_cbindings.std_list[cint32_t] std_list__List__i32__make_instance(object items) except *:
    cdef _module_cbindings.std_list[cint32_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object std_list__List__i32__from_cpp(const _module_cbindings.std_list[cint32_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return std_list__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef _module_cbindings.std_deque[string] std_deque__List__string__make_instance(object items) except *:
    cdef _module_cbindings.std_deque[string] c_inst
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_inst.push_back(item.encode('UTF-8'))
    return cmove(c_inst)

cdef object std_deque__List__string__from_cpp(const _module_cbindings.std_deque[string]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(__init_unicode_from_cpp(c_vec[idx]))
    return std_deque__List__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef _module_cbindings.folly_sorted_vector_set[string] folly_sorted_vector_set__Set__string__make_instance(object items) except *:
    cdef _module_cbindings.folly_sorted_vector_set[string] c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_item = item.encode('UTF-8')
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object folly_sorted_vector_set__Set__string__from_cpp(const _module_cbindings.folly_sorted_vector_set[string]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[_module_cbindings.folly_sorted_vector_set[string]] iter = __set_iter[_module_cbindings.folly_sorted_vector_set[string]](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(__init_unicode_from_cpp(citem))
    return folly_sorted_vector_set__Set__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef _module_cbindings.folly_sorted_vector_map[cint64_t,string] folly_sorted_vector_map__Map__i64_string__make_instance(object items) except *:
    cdef _module_cbindings.folly_sorted_vector_map[cint64_t,string] c_inst
    cdef cint64_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint64_t> key
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object folly_sorted_vector_map__Map__i64_string__from_cpp(const _module_cbindings.folly_sorted_vector_map[cint64_t,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[_module_cbindings.folly_sorted_vector_map[cint64_t,string]] iter = __map_iter[_module_cbindings.folly_sorted_vector_map[cint64_t,string]](c_map)
    cdef cint64_t ckey = 0
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = __init_unicode_from_cpp(cval)
    return folly_sorted_vector_map__Map__i64_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,_fbthrift_iobuf.cIOBuf] Map__string_folly_IOBuf__binary__make_instance(object items) except *:
    cdef cmap[string,_fbthrift_iobuf.cIOBuf] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, _fbthrift_iobuf.IOBuf):
            raise TypeError(f"{item!r} is not of type _fbthrift_iobuf.IOBuf")

        c_inst[c_key] = deref((<_fbthrift_iobuf.IOBuf?>item).c_clone())
    return cmove(c_inst)

cdef object Map__string_folly_IOBuf__binary__from_cpp(const cmap[string,_fbthrift_iobuf.cIOBuf]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,_fbthrift_iobuf.cIOBuf]] iter = __map_iter[cmap[string,_fbthrift_iobuf.cIOBuf]](c_map)
    cdef string ckey
    cdef shared_ptr[_fbthrift_iobuf.cIOBuf] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = _fbthrift_iobuf.IOBuf.create(cval.get(), self)
    return Map__string_folly_IOBuf__binary(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,unique_ptr[_fbthrift_iobuf.cIOBuf]] Map__string_std_unique_ptr_folly_IOBuf__binary__make_instance(object items) except *:
    cdef cmap[string,unique_ptr[_fbthrift_iobuf.cIOBuf]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, _fbthrift_iobuf.IOBuf):
            raise TypeError(f"{item!r} is not of type _fbthrift_iobuf.IOBuf")

        c_inst[c_key] = (<_fbthrift_iobuf.IOBuf?>item).c_clone()
    return cmove(c_inst)

cdef object Map__string_std_unique_ptr_folly_IOBuf__binary__from_cpp(const cmap[string,unique_ptr[_fbthrift_iobuf.cIOBuf]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,unique_ptr[_fbthrift_iobuf.cIOBuf]]] iter = __map_iter[cmap[string,unique_ptr[_fbthrift_iobuf.cIOBuf]]](c_map)
    cdef string ckey
    cdef shared_ptr[unique_ptr[_fbthrift_iobuf.cIOBuf]] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = _fbthrift_iobuf.IOBuf.create(cval.get().get(), self)
    return Map__string_std_unique_ptr_folly_IOBuf__binary(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[cint32_t,string] Map__i32_string__make_instance(object items) except *:
    cdef cmap[cint32_t,string] c_inst
    cdef cint32_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint32_t> key
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__i32_string__from_cpp(const cmap[cint32_t,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint32_t,string]] iter = __map_iter[cmap[cint32_t,string]](c_map)
    cdef cint32_t ckey = 0
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = __init_unicode_from_cpp(cval)
    return Map__i32_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cmap[string,cint32_t]] List__Map__string_i32__make_instance(object items) except *:
    cdef vector[cmap[string,cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Mapping[str, int]")
        if not isinstance(item, Map__string_i32):
            item = Map__string_i32(item)
        c_inst.push_back(Map__string_i32__make_instance(item))
    return cmove(c_inst)

cdef object List__Map__string_i32__from_cpp(const vector[cmap[string,cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Map__string_i32__from_cpp(c_vec[idx]))
    return List__Map__string_i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[cint16_t,string] Map__i16_string__make_instance(object items) except *:
    cdef cmap[cint16_t,string] c_inst
    cdef cint16_t c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, int):
            raise TypeError(f"{key!r} is not of type int")
        c_key = <cint16_t> key
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__i16_string__from_cpp(const cmap[cint16_t,string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cint16_t,string]] iter = __map_iter[cmap[cint16_t,string]](c_map)
    cdef cint16_t ckey = 0
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[ckey] = __init_unicode_from_cpp(cval)
    return Map__i16_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cmap[cint16_t,string]] List__Map__i16_string__make_instance(object items) except *:
    cdef vector[cmap[cint16_t,string]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Mapping[int, str]")
        if not isinstance(item, Map__i16_string):
            item = Map__i16_string(item)
        c_inst.push_back(Map__i16_string__make_instance(item))
    return cmove(c_inst)

cdef object List__Map__i16_string__from_cpp(const vector[cmap[cint16_t,string]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Map__i16_string__from_cpp(c_vec[idx]))
    return List__Map__i16_string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[_module_cbindings.cMyStruct] List__MyStruct__make_instance(object items) except *:
    cdef vector[_module_cbindings.cMyStruct] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, MyStruct):
            raise TypeError(f"{item!r} is not of type MyStruct")
        c_inst.push_back(deref((<MyStruct>item)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
    return cmove(c_inst)

cdef object List__MyStruct__from_cpp(const vector[_module_cbindings.cMyStruct]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(MyStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(make_shared[_module_cbindings.cMyStruct](c_vec[idx])))
    return List__MyStruct(py_list, thrift.py3.types._fbthrift_list_private_ctor)


aBool = True
aByte = 1
a16BitInt = 12
a32BitInt = 123
a64BitInt = 1234
aFloat = 0.1
aDouble = 0.12
aString = "Joe Doe"
aList = List__bool__from_cpp(_module_cbindings.caList())
anEmptyMap = Map__string_i32__from_cpp(_module_cbindings.canEmptyMap())
aMap = Map__i32_string__from_cpp(_module_cbindings.caMap())
aSet = Set__string__from_cpp(_module_cbindings.caSet())
aListOfLists = List__List__i32__from_cpp(_module_cbindings.caListOfLists())
states = List__Map__string_i32__from_cpp(_module_cbindings.cstates())
AConstList = List__MyEnumA__from_cpp(_module_cbindings.cAConstList())
AnIntegerEnum2 = 2
ListOfIntsFromEnums = List__i32__from_cpp(_module_cbindings.cListOfIntsFromEnums())
constEnumA = MyEnumA.fieldB
constEnumB = __BadEnum(MyEnumA, 3)
AStruct = _includes_types.AStruct
CustomProtocolType = _fbthrift_iobuf.IOBuf
simpleTypeDef = int
containerTypeDef = Map__i16_string
complexContainerTypeDef = List__Map__i16_string
unionTypeDef = Set__SimpleUnion
structTypeDef = List__MyStruct
complexStructTypeDef = List__Map__Empty_MyStruct
mostComplexTypeDef = List__List__Map__Empty_MyStruct
CppFakeI32 = int
FollySmallVectorI64 = folly_small_vector_int64_t_8__List__i64
SortedVectorSetString = folly_sorted_vector_set_std_string__Set__string
FakeMap = FakeMap__Map__i64_double
UnorderedMapStruct = std_unordered_map_std_string_containerStruct__Map__string_containerStruct
std_list = std_list__List__i32
std_deque = std_deque__List__string
folly_set = folly_sorted_vector_set__Set__string
folly_map = folly_sorted_vector_map__Map__i64_string
IOBuf = _fbthrift_iobuf.IOBuf
IOBufPtr = _fbthrift_iobuf.IOBuf
