/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct field1;
struct field2;
struct field3;
struct field4;
struct serialized_data_size;
struct field1;
struct field2;
struct field3;
struct field4;
struct field_id_to_size;
struct serialized_data_size;
struct field1;
struct field2;
struct field3;
struct field4;
struct field_id_to_size;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serialized_data_size
#define APACHE_THRIFT_ACCESSOR_serialized_data_size
APACHE_THRIFT_DEFINE_ACCESSOR(serialized_data_size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field_id_to_size
#define APACHE_THRIFT_ACCESSOR_field_id_to_size
APACHE_THRIFT_DEFINE_ACCESSOR(field_id_to_size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serialized_data_size
#define APACHE_THRIFT_ACCESSOR_serialized_data_size
APACHE_THRIFT_DEFINE_ACCESSOR(serialized_data_size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field1
#define APACHE_THRIFT_ACCESSOR_field1
APACHE_THRIFT_DEFINE_ACCESSOR(field1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field2
#define APACHE_THRIFT_ACCESSOR_field2
APACHE_THRIFT_DEFINE_ACCESSOR(field2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field4
#define APACHE_THRIFT_ACCESSOR_field4
APACHE_THRIFT_DEFINE_ACCESSOR(field4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field_id_to_size
#define APACHE_THRIFT_ACCESSOR_field_id_to_size
APACHE_THRIFT_DEFINE_ACCESSOR(field_id_to_size);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace apache::thrift::test {
class Foo;
class LazyFoo;
class OptionalFoo;
class OptionalLazyFoo;
class OptionalBoxedLazyFoo;
class LazyCppRef;
class IndexedFoo;
class OptionalIndexedFoo;
class Empty;
} // namespace apache::thrift::test
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::OptionalBoxedLazyFoo,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::OptionalBoxedLazyFoo,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::OptionalBoxedLazyFoo,::apache::thrift::type::field_id<3>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::OptionalBoxedLazyFoo,::apache::thrift::type::field_id<4>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::LazyCppRef,::apache::thrift::type::field_id<1>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::LazyCppRef,::apache::thrift::type::field_id<2>> : std::true_type{};
template<>
struct is_cpp_ref_field_optional<::apache::thrift::test::LazyCppRef,::apache::thrift::type::field_id<3>> : std::true_type{};
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace apache::thrift::test {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "Foo", "kind": "struct" } */
class Foo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Foo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Foo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Foo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  Foo(Foo&&) noexcept;

  Foo(const Foo& src);


  Foo& operator=(Foo&&) noexcept;
  Foo& operator=(const Foo& src);

  ~Foo();

 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Foo&) const;
  bool operator<(const Foo&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::vector<double>& get_field1() const&;

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::vector<double> get_field1() &&;

  /** Glean { "field": "field1" } */
  template <typename T_Foo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::vector<double>& set_field1(T_Foo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_Foo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::std::int32_t>& get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::std::int32_t> get_field2() &&;

  /** Glean { "field": "field2" } */
  template <typename T_Foo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field2(T_Foo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_Foo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::vector<double>& get_field3() const&;

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::vector<double> get_field3() &&;

  /** Glean { "field": "field3" } */
  template <typename T_Foo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::vector<double>& set_field3(T_Foo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_Foo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  const ::std::vector<::std::int32_t>& get_field4() const&;

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  ::std::vector<::std::int32_t> get_field4() &&;

  /** Glean { "field": "field4" } */
  template <typename T_Foo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4() = BAR` instead of `FOO.set_field4(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field4(T_Foo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_Foo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Foo>;
  friend void swap(Foo& a, Foo& b);
};

template <class Protocol_>
unsigned long Foo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "LazyFoo", "kind": "struct" } */
class LazyFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LazyFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  LazyFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LazyFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  LazyFoo(LazyFoo&&) noexcept;
  LazyFoo(const LazyFoo& src);


  LazyFoo& operator=(LazyFoo&&) noexcept;
  LazyFoo& operator=(const LazyFoo& src);

  ~LazyFoo();

 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  mutable ::std::vector<double> __fbthrift_field_field3;
 private:
  mutable ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const LazyFoo&) const;
  bool operator<(const LazyFoo&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::vector<double>& get_field1() const&;

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::vector<double> get_field1() &&;

  /** Glean { "field": "field1" } */
  template <typename T_LazyFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::vector<double>& set_field1(T_LazyFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_LazyFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::std::int32_t>& get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::std::int32_t> get_field2() &&;

  /** Glean { "field": "field2" } */
  template <typename T_LazyFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field2(T_LazyFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_LazyFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field3;
    std::unique_ptr<folly::IOBuf> field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::std::vector<double>& __fbthrift_read_field_field3() const;
  ::std::vector<double>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::std::vector<::std::int32_t>& __fbthrift_read_field_field4() const;
  ::std::vector<::std::int32_t>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LazyFoo>;
  friend void swap(LazyFoo& a, LazyFoo& b);
};

template <class Protocol_>
unsigned long LazyFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "OptionalFoo", "kind": "struct" } */
class OptionalFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OptionalFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  OptionalFoo(OptionalFoo&&) noexcept;

  OptionalFoo(const OptionalFoo& src);


  OptionalFoo& operator=(OptionalFoo&&) noexcept;
  OptionalFoo& operator=(const OptionalFoo& src);

  ~OptionalFoo();

 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalFoo&) const;
  bool operator<(const OptionalFoo&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::vector<double>* get_field1() const&;

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::vector<double>* get_field1() &;

  ::std::vector<double>* get_field1() && = delete;

  /** Glean { "field": "field1" } */
  template <typename T_OptionalFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::vector<double>& set_field1(T_OptionalFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_OptionalFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::std::int32_t>* get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::std::int32_t>* get_field2() &;

  ::std::vector<::std::int32_t>* get_field2() && = delete;

  /** Glean { "field": "field2" } */
  template <typename T_OptionalFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field2(T_OptionalFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_OptionalFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::vector<double>* get_field3() const&;

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::vector<double>* get_field3() &;

  ::std::vector<double>* get_field3() && = delete;

  /** Glean { "field": "field3" } */
  template <typename T_OptionalFoo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::vector<double>& set_field3(T_OptionalFoo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_OptionalFoo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  const ::std::vector<::std::int32_t>* get_field4() const&;

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  ::std::vector<::std::int32_t>* get_field4() &;

  ::std::vector<::std::int32_t>* get_field4() && = delete;

  /** Glean { "field": "field4" } */
  template <typename T_OptionalFoo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4() = BAR` instead of `FOO.set_field4(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field4(T_OptionalFoo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_OptionalFoo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalFoo>;
  friend void swap(OptionalFoo& a, OptionalFoo& b);
};

template <class Protocol_>
unsigned long OptionalFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "OptionalLazyFoo", "kind": "struct" } */
class OptionalLazyFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalLazyFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OptionalLazyFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalLazyFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg);

  OptionalLazyFoo(OptionalLazyFoo&&) noexcept;
  OptionalLazyFoo(const OptionalLazyFoo& src);


  OptionalLazyFoo& operator=(OptionalLazyFoo&&) noexcept;
  OptionalLazyFoo& operator=(const OptionalLazyFoo& src);

  ~OptionalLazyFoo();

 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  mutable ::std::vector<double> __fbthrift_field_field3;
 private:
  mutable ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalLazyFoo&) const;
  bool operator<(const OptionalLazyFoo&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_read_field_field3(), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field3()), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_read_field_field4(), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field4()), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::vector<double>* get_field1() const&;

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::vector<double>* get_field1() &;

  ::std::vector<double>* get_field1() && = delete;

  /** Glean { "field": "field1" } */
  template <typename T_OptionalLazyFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::vector<double>& set_field1(T_OptionalLazyFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_OptionalLazyFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::std::int32_t>* get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::std::int32_t>* get_field2() &;

  ::std::vector<::std::int32_t>* get_field2() && = delete;

  /** Glean { "field": "field2" } */
  template <typename T_OptionalLazyFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field2(T_OptionalLazyFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_OptionalLazyFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field3;
    folly::IOBuf field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::std::vector<double>& __fbthrift_read_field_field3() const;
  ::std::vector<double>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::std::vector<::std::int32_t>& __fbthrift_read_field_field4() const;
  ::std::vector<::std::int32_t>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalLazyFoo>;
  friend void swap(OptionalLazyFoo& a, OptionalLazyFoo& b);
};

template <class Protocol_>
unsigned long OptionalLazyFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "OptionalBoxedLazyFoo", "kind": "struct" } */
class OptionalBoxedLazyFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalBoxedLazyFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OptionalBoxedLazyFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalBoxedLazyFoo(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>> field1__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>> field2__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>> field3__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>> field4__arg);

  OptionalBoxedLazyFoo(OptionalBoxedLazyFoo&&) noexcept;
  OptionalBoxedLazyFoo(const OptionalBoxedLazyFoo& src);


  OptionalBoxedLazyFoo& operator=(OptionalBoxedLazyFoo&&) noexcept;
  OptionalBoxedLazyFoo& operator=(const OptionalBoxedLazyFoo& src);

  ~OptionalBoxedLazyFoo();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>> __fbthrift_field_field1;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field2;
 private:
  mutable ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>> __fbthrift_field_field3;
 private:
  mutable ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field4;

 public:

  bool operator==(const OptionalBoxedLazyFoo&) const;
  bool operator<(const OptionalBoxedLazyFoo&) const;

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field1_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field1};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field1_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field1};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field1_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field1() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field1};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field1() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field1};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field1() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field2_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field2};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field2_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field2};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field2_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field2() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_field_field2};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field2() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_field_field2};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field2() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_field2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field3_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_read_field_field3()};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field3_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_read_field_field3()};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field3_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field3())};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field3() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_read_field_field3()};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field3() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_read_field_field3()};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field3() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field3())};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field4_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_read_field_field4()};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field4_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_read_field_field4()};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field4_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field4())};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&> field4() const& {
    return ::apache::thrift::optional_boxed_field_ref<const fbthrift_T&>{this->__fbthrift_read_field_field4()};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&> field4() & {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&>{this->__fbthrift_read_field_field4()};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&> field4() && {
    return ::apache::thrift::optional_boxed_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_read_field_field4())};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field3;
    folly::IOBuf field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>& __fbthrift_read_field_field3() const;
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<double>>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field4() const;
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalBoxedLazyFoo>;
  friend void swap(OptionalBoxedLazyFoo& a, OptionalBoxedLazyFoo& b);
};

template <class Protocol_>
unsigned long OptionalBoxedLazyFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "LazyCppRef", "kind": "struct" } */
class LazyCppRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = LazyCppRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  LazyCppRef();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  LazyCppRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> field1__arg, ::std::shared_ptr<::std::vector<::std::int32_t>> field2__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> field3__arg, ::std::unique_ptr<::std::vector<::std::int32_t>> field4__arg);

  LazyCppRef(LazyCppRef&&) noexcept;
  LazyCppRef(const LazyCppRef& src);


  LazyCppRef& operator=(LazyCppRef&&) noexcept;
  LazyCppRef& operator=(const LazyCppRef& src);

  ~LazyCppRef();

 private:
  mutable ::std::unique_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field1;
 private:
  mutable ::std::shared_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field2;
 private:
  mutable ::std::shared_ptr<const ::std::vector<::std::int32_t>> __fbthrift_field_field3;
 private:
  mutable ::std::unique_ptr<::std::vector<::std::int32_t>> __fbthrift_field_field4;

 public:

  bool operator==(const LazyCppRef&) const;
  bool operator<(const LazyCppRef&) const;
  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field1_ref() & {
    return __fbthrift_read_field_field1();
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field1_ref() const& {
    return __fbthrift_read_field_field1();
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field1_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field1());
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field1_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field1());
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field1() & {
    return __fbthrift_read_field_field1();
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field1() const& {
    return __fbthrift_read_field_field1();
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field1() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field1());
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field1() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field1());
  }
  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field2_ref() & {
    return __fbthrift_read_field_field2();
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field2_ref() const& {
    return __fbthrift_read_field_field2();
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field2_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field2());
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field2_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field2());
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field2() & {
    return __fbthrift_read_field_field2();
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field2() const& {
    return __fbthrift_read_field_field2();
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field2() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field2());
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field2() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field2());
  }
  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field3_ref() & {
    return __fbthrift_read_field_field3();
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field3_ref() const& {
    return __fbthrift_read_field_field3();
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field3_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field3());
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field3_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field3());
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field3() & {
    return __fbthrift_read_field_field3();
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field3() const& {
    return __fbthrift_read_field_field3();
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field3() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field3());
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::shared_ptr<const ::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field3() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field3());
  }
  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field4_ref() & {
    return __fbthrift_read_field_field4();
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field4_ref() const& {
    return __fbthrift_read_field_field4();
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field4_ref() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field4());
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field4_ref() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field4());
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T& field4() & {
    return __fbthrift_read_field_field4();
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T& field4() const& {
    return __fbthrift_read_field_field4();
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE fbthrift_T&& field4() && {
    return static_cast<fbthrift_T&&>(__fbthrift_read_field_field4());
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::unique_ptr<::std::vector<::std::int32_t>>>
  FOLLY_ERASE const fbthrift_T&& field4() const&& {
    return static_cast<const fbthrift_T&&>(__fbthrift_read_field_field4());
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
 private:
  mutable struct __fbthrift_SerializedData {
    folly::IOBuf field1;
    folly::IOBuf field2;
    folly::IOBuf field3;
    folly::IOBuf field4;
  } __fbthrift_serializedData_;

  mutable ::apache::thrift::detail::st::DeserializationMutex __fbthrift_deserializationMutex_;
  ::apache::thrift::ProtocolType __fbthrift_protocol_{};

  mutable struct __fbthrift_IsDeserialized {
    std::atomic<uint8_t> field1{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field2{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field3{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
    std::atomic<uint8_t> field4{::apache::thrift::detail::LazyDeserializationState::UNTAINTED | ::apache::thrift::detail::LazyDeserializationState::DESERIALIZED};
  } __fbthrift_isDeserialized_;

  const ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field1() const;
  ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field1();
  void __fbthrift_read_field_field1_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field1_impl() const;
  const ::std::shared_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field2() const;
  ::std::shared_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field2();
  void __fbthrift_read_field_field2_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field2_impl() const;
  const ::std::shared_ptr<const ::std::vector<::std::int32_t>>& __fbthrift_read_field_field3() const;
  ::std::shared_ptr<const ::std::vector<::std::int32_t>>& __fbthrift_read_field_field3();
  void __fbthrift_read_field_field3_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field3_impl() const;
  const ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field4() const;
  ::std::unique_ptr<::std::vector<::std::int32_t>>& __fbthrift_read_field_field4();
  void __fbthrift_read_field_field4_slow() const;
  template<class ProtocolReader> void __fbthrift_read_field_field4_impl() const;

  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<LazyCppRef>;
  friend void swap(LazyCppRef& a, LazyCppRef& b);
};

template <class Protocol_>
unsigned long LazyCppRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "IndexedFoo", "kind": "struct" } */
class IndexedFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,100,1,2,3,4,101};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::serialized_data_size,
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4,
    ::apache::thrift::ident::field_id_to_size
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = IndexedFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  IndexedFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexedFoo(apache::thrift::FragileConstructor, double serialized_data_size__arg, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg, ::std::map<::std::int16_t, ::std::int64_t> field_id_to_size__arg);

  IndexedFoo(IndexedFoo&&) noexcept;

  IndexedFoo(const IndexedFoo& src);


  IndexedFoo& operator=(IndexedFoo&&) noexcept;
  IndexedFoo& operator=(const IndexedFoo& src);

  ~IndexedFoo();

 private:
  double __fbthrift_field_serialized_data_size;
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  ::std::map<::std::int16_t, ::std::int64_t> __fbthrift_field_field_id_to_size;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const IndexedFoo&) const;
  bool operator<(const IndexedFoo&) const;

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serialized_data_size_ref() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serialized_data_size_ref() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serialized_data_size_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serialized_data_size() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serialized_data_size() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serialized_data_size() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_id_to_size_ref() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_id_to_size_ref() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_id_to_size_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_id_to_size() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_id_to_size() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_id_to_size() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serialized_data_size" } */
  [[deprecated("Use `FOO.serialized_data_size().value()` instead of `FOO.get_serialized_data_size()`")]]
  double get_serialized_data_size() const;

  /** Glean { "field": "serialized_data_size" } */
  [[deprecated("Use `FOO.serialized_data_size() = BAR` instead of `FOO.set_serialized_data_size(BAR)`")]]
  double& set_serialized_data_size(double serialized_data_size_);

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::vector<double>& get_field1() const&;

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::vector<double> get_field1() &&;

  /** Glean { "field": "field1" } */
  template <typename T_IndexedFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::vector<double>& set_field1(T_IndexedFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_IndexedFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::std::int32_t>& get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::std::int32_t> get_field2() &&;

  /** Glean { "field": "field2" } */
  template <typename T_IndexedFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field2(T_IndexedFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_IndexedFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::vector<double>& get_field3() const&;

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::vector<double> get_field3() &&;

  /** Glean { "field": "field3" } */
  template <typename T_IndexedFoo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::vector<double>& set_field3(T_IndexedFoo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_IndexedFoo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  const ::std::vector<::std::int32_t>& get_field4() const&;

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  ::std::vector<::std::int32_t> get_field4() &&;

  /** Glean { "field": "field4" } */
  template <typename T_IndexedFoo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4() = BAR` instead of `FOO.set_field4(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field4(T_IndexedFoo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_IndexedFoo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  /** Glean { "field": "field_id_to_size" } */
  [[deprecated("Use `FOO.field_id_to_size().value()` instead of `FOO.get_field_id_to_size()`")]]
  const ::std::map<::std::int16_t, ::std::int64_t>& get_field_id_to_size() const&;

  /** Glean { "field": "field_id_to_size" } */
  [[deprecated("Use `FOO.field_id_to_size().value()` instead of `FOO.get_field_id_to_size()`")]]
  ::std::map<::std::int16_t, ::std::int64_t> get_field_id_to_size() &&;

  /** Glean { "field": "field_id_to_size" } */
  template <typename T_IndexedFoo_field_id_to_size_struct_setter = ::std::map<::std::int16_t, ::std::int64_t>>
  [[deprecated("Use `FOO.field_id_to_size() = BAR` instead of `FOO.set_field_id_to_size(BAR)`")]]
  ::std::map<::std::int16_t, ::std::int64_t>& set_field_id_to_size(T_IndexedFoo_field_id_to_size_struct_setter&& field_id_to_size_) {
    field_id_to_size_ref() = std::forward<T_IndexedFoo_field_id_to_size_struct_setter>(field_id_to_size_);
    return __fbthrift_field_field_id_to_size;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndexedFoo>;
  friend void swap(IndexedFoo& a, IndexedFoo& b);
};

template <class Protocol_>
unsigned long IndexedFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "OptionalIndexedFoo", "kind": "struct" } */
class OptionalIndexedFoo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 6;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,100,1,2,3,4,101};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::serialized_data_size,
    ::apache::thrift::ident::field1,
    ::apache::thrift::ident::field2,
    ::apache::thrift::ident::field3,
    ::apache::thrift::ident::field4,
    ::apache::thrift::ident::field_id_to_size
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i16_t, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalIndexedFoo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  OptionalIndexedFoo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalIndexedFoo(apache::thrift::FragileConstructor, double serialized_data_size__arg, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg, ::std::map<::std::int16_t, ::std::int64_t> field_id_to_size__arg);

  OptionalIndexedFoo(OptionalIndexedFoo&&) noexcept;

  OptionalIndexedFoo(const OptionalIndexedFoo& src);


  OptionalIndexedFoo& operator=(OptionalIndexedFoo&&) noexcept;
  OptionalIndexedFoo& operator=(const OptionalIndexedFoo& src);

  ~OptionalIndexedFoo();

 private:
  double __fbthrift_field_serialized_data_size;
 private:
  ::std::vector<double> __fbthrift_field_field1;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field2;
 private:
  ::std::vector<double> __fbthrift_field_field3;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_field4;
 private:
  ::std::map<::std::int16_t, ::std::int64_t> __fbthrift_field_field_id_to_size;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalIndexedFoo&) const;
  bool operator<(const OptionalIndexedFoo&) const;

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serialized_data_size_ref() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serialized_data_size_ref() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serialized_data_size_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> serialized_data_size() const& {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> serialized_data_size() & {
    return {this->__fbthrift_field_serialized_data_size, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "serialized_data_size" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> serialized_data_size() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_serialized_data_size), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field1_ref() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field1_ref() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field1_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field1() const& {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field1() & {
    return {this->__fbthrift_field_field1, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field1" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field1() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field1), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2_ref() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2_ref() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field2() const& {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field2() & {
    return {this->__fbthrift_field_field2, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field2" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field2() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field2), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field3_ref() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field3_ref() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field3_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field3() const& {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field3() & {
    return {this->__fbthrift_field_field3, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field3" } */
  template <typename..., typename fbthrift_T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field3() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field3), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field4_ref() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field4_ref() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field4_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> field4() const& {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> field4() & {
    return {this->__fbthrift_field_field4, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field4" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> field4() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field4), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_id_to_size_ref() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_id_to_size_ref() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_id_to_size_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> field_id_to_size() const& {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> field_id_to_size() & {
    return {this->__fbthrift_field_field_id_to_size, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "field_id_to_size" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::int16_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> field_id_to_size() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_field_id_to_size), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "serialized_data_size" } */
  [[deprecated("Use `FOO.serialized_data_size().value()` instead of `FOO.get_serialized_data_size()`")]]
  double get_serialized_data_size() const;

  /** Glean { "field": "serialized_data_size" } */
  [[deprecated("Use `FOO.serialized_data_size() = BAR` instead of `FOO.set_serialized_data_size(BAR)`")]]
  double& set_serialized_data_size(double serialized_data_size_);

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  const ::std::vector<double>* get_field1() const&;

  /** Glean { "field": "field1" } */
  [[deprecated("Use `FOO.field1().value()` instead of `FOO.get_field1()`")]]
  ::std::vector<double>* get_field1() &;

  ::std::vector<double>* get_field1() && = delete;

  /** Glean { "field": "field1" } */
  template <typename T_OptionalIndexedFoo_field1_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field1() = BAR` instead of `FOO.set_field1(BAR)`")]]
  ::std::vector<double>& set_field1(T_OptionalIndexedFoo_field1_struct_setter&& field1_) {
    field1_ref() = std::forward<T_OptionalIndexedFoo_field1_struct_setter>(field1_);
    return __fbthrift_field_field1;
  }

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  const ::std::vector<::std::int32_t>* get_field2() const&;

  /** Glean { "field": "field2" } */
  [[deprecated("Use `FOO.field2().value()` instead of `FOO.get_field2()`")]]
  ::std::vector<::std::int32_t>* get_field2() &;

  ::std::vector<::std::int32_t>* get_field2() && = delete;

  /** Glean { "field": "field2" } */
  template <typename T_OptionalIndexedFoo_field2_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field2() = BAR` instead of `FOO.set_field2(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field2(T_OptionalIndexedFoo_field2_struct_setter&& field2_) {
    field2_ref() = std::forward<T_OptionalIndexedFoo_field2_struct_setter>(field2_);
    return __fbthrift_field_field2;
  }

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  const ::std::vector<double>* get_field3() const&;

  /** Glean { "field": "field3" } */
  [[deprecated("Use `FOO.field3().value()` instead of `FOO.get_field3()`")]]
  ::std::vector<double>* get_field3() &;

  ::std::vector<double>* get_field3() && = delete;

  /** Glean { "field": "field3" } */
  template <typename T_OptionalIndexedFoo_field3_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.field3() = BAR` instead of `FOO.set_field3(BAR)`")]]
  ::std::vector<double>& set_field3(T_OptionalIndexedFoo_field3_struct_setter&& field3_) {
    field3_ref() = std::forward<T_OptionalIndexedFoo_field3_struct_setter>(field3_);
    return __fbthrift_field_field3;
  }

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  const ::std::vector<::std::int32_t>* get_field4() const&;

  /** Glean { "field": "field4" } */
  [[deprecated("Use `FOO.field4().value()` instead of `FOO.get_field4()`")]]
  ::std::vector<::std::int32_t>* get_field4() &;

  ::std::vector<::std::int32_t>* get_field4() && = delete;

  /** Glean { "field": "field4" } */
  template <typename T_OptionalIndexedFoo_field4_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.field4() = BAR` instead of `FOO.set_field4(BAR)`")]]
  ::std::vector<::std::int32_t>& set_field4(T_OptionalIndexedFoo_field4_struct_setter&& field4_) {
    field4_ref() = std::forward<T_OptionalIndexedFoo_field4_struct_setter>(field4_);
    return __fbthrift_field_field4;
  }

  /** Glean { "field": "field_id_to_size" } */
  [[deprecated("Use `FOO.field_id_to_size().value()` instead of `FOO.get_field_id_to_size()`")]]
  const ::std::map<::std::int16_t, ::std::int64_t>& get_field_id_to_size() const&;

  /** Glean { "field": "field_id_to_size" } */
  [[deprecated("Use `FOO.field_id_to_size().value()` instead of `FOO.get_field_id_to_size()`")]]
  ::std::map<::std::int16_t, ::std::int64_t> get_field_id_to_size() &&;

  /** Glean { "field": "field_id_to_size" } */
  template <typename T_OptionalIndexedFoo_field_id_to_size_struct_setter = ::std::map<::std::int16_t, ::std::int64_t>>
  [[deprecated("Use `FOO.field_id_to_size() = BAR` instead of `FOO.set_field_id_to_size(BAR)`")]]
  ::std::map<::std::int16_t, ::std::int64_t>& set_field_id_to_size(T_OptionalIndexedFoo_field_id_to_size_struct_setter&& field_id_to_size_) {
    field_id_to_size_ref() = std::forward<T_OptionalIndexedFoo_field_id_to_size_struct_setter>(field_id_to_size_);
    return __fbthrift_field_field_id_to_size;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalIndexedFoo>;
  friend void swap(OptionalIndexedFoo& a, OptionalIndexedFoo& b);
};

template <class Protocol_>
unsigned long OptionalIndexedFoo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/lazy_deserialization/src/simple.thrift", "name": "Empty", "kind": "struct" } */
class Empty final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "simple";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Empty;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Empty() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Empty(apache::thrift::FragileConstructor);

  Empty(Empty&&) = default;

  Empty(const Empty&) = default;


  Empty& operator=(Empty&&) = default;

  Empty& operator=(const Empty&) = default;

 public:

  bool operator==(const Empty&) const;
  bool operator<(const Empty&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Empty>;
  friend void swap(Empty& a, Empty& b);
};

template <class Protocol_>
unsigned long Empty::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace apache::thrift::test

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::apache::thrift::test::Foo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\x20\x01\x97\x65\xe5\x07\x0c\xf2\x5e\x0e\xb1\x98\x17\x56\xc4\xcf", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::LazyFoo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\xb3\xc6\x6d\x6c\x5c\x92\x70\x44\xc6\x91\x8b\xa3\x13\xd2\x61\xf7", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::OptionalFoo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\x4f\x37\xe1\xca\x1a\xe2\x30\xc2\xd0\x60\xa0\x38\x30\xe5\x7a\xcc", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::OptionalLazyFoo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\xc6\xac\xe2\xe9\x27\x86\xc9\xf6\x9f\x62\xdd\xbf\xb3\x4c\xdf\xa7", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::OptionalBoxedLazyFoo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\x0d\x4a\xc8\x44\xa2\x33\x88\x3f\x61\xfc\x44\xcd\x99\x24\x1e\x48", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::LazyCppRef, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\x82\x1b\x10\xbf\xf7\xd7\x5f\xfa\x59\x5b\x64\x67\xe3\x6a\x97\x69", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::IndexedFoo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\x87\x1a\xef\xa8\x58\xc5\xb2\x39\x32\xf2\x05\x61\x87\xb2\x74\xcb", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::OptionalIndexedFoo, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\xce\xad\x71\xbd\x2c\xaf\x41\x3d\x66\xc3\x96\x5d\xc1\xf3\xc8\x06", 16};
};
template <> struct TSchemaAssociation<::apache::thrift::test::Empty, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = -200190150207549803;
  static constexpr ::std::string_view definitionKey = {"\x06\x90\x46\xa0\xd3\x6d\x15\x0c\x9e\x59\x63\xc0\xd3\x62\xa9\x3e", 16};
};
} // namespace apache::thrift::detail
