/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <thrift/compiler/test/fixtures/mcpp2-compare/gen-py3/module/services_wrapper.h>
#include <thrift/compiler/test/fixtures/mcpp2-compare/gen-py3/module/services_api.h>
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

namespace some {
namespace valid {
namespace ns {

EmptyServiceWrapper::EmptyServiceWrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    import_module__services();
  }


std::shared_ptr<apache::thrift::ServerInterface> EmptyServiceInterface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<EmptyServiceWrapper>(if_object, exc);
}
folly::SemiFuture<folly::Unit> EmptyServiceWrapper::semifuture_onStartServing() {
  auto [promise, future] = folly::makePromiseContract<folly::Unit>();
  call_cy_EmptyService_onStartServing(
      this->if_object,
      std::move(promise)
  );
  return std::move(future);
}
folly::SemiFuture<folly::Unit> EmptyServiceWrapper::semifuture_onStopRequested() {
  auto [promise, future] = folly::makePromiseContract<folly::Unit>();
  call_cy_EmptyService_onStopRequested(
      this->if_object,
      std::move(promise)
  );
  return std::move(future);
}


ReturnServiceWrapper::ReturnServiceWrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    import_module__services();
  }


void ReturnServiceWrapper::async_eb_noReturn(
  apache::thrift::HandlerCallbackPtr<void> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ReturnService_noReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_boolReturn(
  apache::thrift::HandlerCallbackPtr<bool> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<bool>();
        call_cy_ReturnService_boolReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<bool>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_i16Return(
  apache::thrift::HandlerCallbackPtr<int16_t> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int16_t>();
        call_cy_ReturnService_i16Return(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int16_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_i32Return(
  apache::thrift::HandlerCallbackPtr<int32_t> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int32_t>();
        call_cy_ReturnService_i32Return(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int32_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_i64Return(
  apache::thrift::HandlerCallbackPtr<int64_t> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int64_t>();
        call_cy_ReturnService_i64Return(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int64_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_floatReturn(
  apache::thrift::HandlerCallbackPtr<float> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<float>();
        call_cy_ReturnService_floatReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<float>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_doubleReturn(
  apache::thrift::HandlerCallbackPtr<double> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<double>();
        call_cy_ReturnService_doubleReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<double>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_eb_stringReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::string>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::string>>();
        call_cy_ReturnService_stringReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::string>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_binaryReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::string>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::string>>();
        call_cy_ReturnService_binaryReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::string>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_mapReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::map<std::string,int64_t>>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::map<std::string,int64_t>>>();
        call_cy_ReturnService_mapReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::map<std::string,int64_t>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_simpleTypedefReturn(
  apache::thrift::HandlerCallbackPtr<int32_t> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int32_t>();
        call_cy_ReturnService_simpleTypedefReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int32_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_complexTypedefReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>>();
        call_cy_ReturnService_complexTypedefReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_list_mostComplexTypedefReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<std::vector<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>>>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<std::vector<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>>>>();
        call_cy_ReturnService_list_mostComplexTypedefReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<std::vector<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_eb_enumReturn(
  apache::thrift::HandlerCallbackPtr<::some::valid::ns::MyEnumA> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<::some::valid::ns::MyEnumA>();
        call_cy_ReturnService_enumReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<::some::valid::ns::MyEnumA>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_eb_list_EnumReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<::some::valid::ns::MyEnumA>>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<::some::valid::ns::MyEnumA>>>();
        call_cy_ReturnService_list_EnumReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<::some::valid::ns::MyEnumA>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_structReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<::some::valid::ns::MyStruct>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<::some::valid::ns::MyStruct>>();
        call_cy_ReturnService_structReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<::some::valid::ns::MyStruct>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_set_StructReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::set<::some::valid::ns::MyStruct>>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::set<::some::valid::ns::MyStruct>>>();
        call_cy_ReturnService_set_StructReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::set<::some::valid::ns::MyStruct>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_eb_unionReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<::some::valid::ns::ComplexUnion>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<::some::valid::ns::ComplexUnion>>();
        call_cy_ReturnService_unionReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<::some::valid::ns::ComplexUnion>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_list_UnionReturn(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>>> callback) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>>>();
        call_cy_ReturnService_list_UnionReturn(
            this->if_object,
            ctx,
            std::move(promise)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_eb_readDataEb(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<folly::IOBuf>> callback
    , int64_t size
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     size
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<folly::IOBuf>>();
        call_cy_ReturnService_readDataEb(
            this->if_object,
            ctx,
            std::move(promise),
            size        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<folly::IOBuf>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ReturnServiceWrapper::async_tm_readData(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::unique_ptr<folly::IOBuf>>> callback
    , int64_t size
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     size
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::unique_ptr<folly::IOBuf>>>();
        call_cy_ReturnService_readData(
            this->if_object,
            ctx,
            std::move(promise),
            size        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::unique_ptr<folly::IOBuf>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
std::shared_ptr<apache::thrift::ServerInterface> ReturnServiceInterface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<ReturnServiceWrapper>(if_object, exc);
}
folly::SemiFuture<folly::Unit> ReturnServiceWrapper::semifuture_onStartServing() {
  auto [promise, future] = folly::makePromiseContract<folly::Unit>();
  call_cy_ReturnService_onStartServing(
      this->if_object,
      std::move(promise)
  );
  return std::move(future);
}
folly::SemiFuture<folly::Unit> ReturnServiceWrapper::semifuture_onStopRequested() {
  auto [promise, future] = folly::makePromiseContract<folly::Unit>();
  call_cy_ReturnService_onStopRequested(
      this->if_object,
      std::move(promise)
  );
  return std::move(future);
}


ParamServiceWrapper::ParamServiceWrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    import_module__services();
  }


void ParamServiceWrapper::async_eb_void_ret_i16_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , int16_t param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_i16_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_byte_i16_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , int8_t param1
    , int16_t param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1,
     param2
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_byte_i16_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1,
            param2        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_map_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , std::unique_ptr<std::map<std::string,int64_t>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_map_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_map_setlist_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , std::unique_ptr<std::map<std::string,int64_t>> param1
    , std::unique_ptr<std::set<std::vector<std::string>>> param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1),
     param2 = std::move(param2)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_map_setlist_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1),
            std::move(param2)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_map_typedef_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , int32_t param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_map_typedef_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_enum_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , ::some::valid::ns::MyEnumA param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_enum_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_struct_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , std::unique_ptr<::some::valid::ns::MyStruct> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_struct_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_void_ret_listunion_param(
  apache::thrift::HandlerCallbackPtr<void> callback
    , std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_void_ret_listunion_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_bool_ret_i32_i64_param(
  apache::thrift::HandlerCallbackPtr<bool> callback
    , int32_t param1
    , int64_t param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1,
     param2
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<bool>();
        call_cy_ParamService_bool_ret_i32_i64_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1,
            param2        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<bool>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_bool_ret_map_param(
  apache::thrift::HandlerCallbackPtr<bool> callback
    , std::unique_ptr<std::map<std::string,int64_t>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<bool>();
        call_cy_ParamService_bool_ret_map_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<bool>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_bool_ret_union_param(
  apache::thrift::HandlerCallbackPtr<bool> callback
    , std::unique_ptr<::some::valid::ns::ComplexUnion> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<bool>();
        call_cy_ParamService_bool_ret_union_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<bool>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_i64_ret_float_double_param(
  apache::thrift::HandlerCallbackPtr<int64_t> callback
    , float param1
    , double param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1,
     param2
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int64_t>();
        call_cy_ParamService_i64_ret_float_double_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1,
            param2        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int64_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_i64_ret_string_typedef_param(
  apache::thrift::HandlerCallbackPtr<int64_t> callback
    , std::unique_ptr<std::string> param1
    , std::unique_ptr<std::set<std::vector<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>>>> param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1),
     param2 = std::move(param2)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int64_t>();
        call_cy_ParamService_i64_ret_string_typedef_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1),
            std::move(param2)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int64_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_eb_i64_ret_i32_i32_i32_i32_i32_param(
  apache::thrift::HandlerCallbackPtr<int64_t> callback
    , int32_t param1
    , int32_t param2
    , int32_t param3
    , int32_t param4
    , int32_t param5
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1,
     param2,
     param3,
     param4,
     param5
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int64_t>();
        call_cy_ParamService_i64_ret_i32_i32_i32_i32_i32_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1,
            param2,
            param3,
            param4,
            param5        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int64_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_double_ret_setstruct_param(
  apache::thrift::HandlerCallbackPtr<double> callback
    , std::unique_ptr<std::set<::some::valid::ns::MyStruct>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<double>();
        call_cy_ParamService_double_ret_setstruct_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<double>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_string_ret_string_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::string>> callback
    , std::unique_ptr<std::string> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::string>>();
        call_cy_ParamService_string_ret_string_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::string>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_binary_ret_binary_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::string>> callback
    , std::unique_ptr<std::string> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::string>>();
        call_cy_ParamService_binary_ret_binary_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::string>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_map_ret_bool_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::map<std::string,int64_t>>> callback
    , bool param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::map<std::string,int64_t>>>();
        call_cy_ParamService_map_ret_bool_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::map<std::string,int64_t>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_list_ret_map_setlist_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<bool>>> callback
    , std::unique_ptr<std::map<int32_t,std::vector<std::string>>> param1
    , std::unique_ptr<std::vector<std::string>> param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1),
     param2 = std::move(param2)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<bool>>>();
        call_cy_ParamService_list_ret_map_setlist_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1),
            std::move(param2)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<bool>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_mapsetlistmapliststring_ret_listlistlist_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::map<std::set<std::vector<int32_t>>,std::map<std::vector<std::set<std::string>>,std::string>>>> callback
    , std::unique_ptr<std::vector<std::vector<std::vector<std::vector<int32_t>>>>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::map<std::set<std::vector<int32_t>>,std::map<std::vector<std::set<std::string>>,std::string>>>>();
        call_cy_ParamService_mapsetlistmapliststring_ret_listlistlist_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::map<std::set<std::vector<int32_t>>,std::map<std::vector<std::set<std::string>>,std::string>>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_typedef_ret_i32_param(
  apache::thrift::HandlerCallbackPtr<int32_t> callback
    , int32_t param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<int32_t>();
        call_cy_ParamService_typedef_ret_i32_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<int32_t>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_eb_listtypedef_ret_typedef_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<int32_t>>> callback
    , std::unique_ptr<std::vector<std::map<::some::valid::ns::Empty,::some::valid::ns::MyStruct>>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<int32_t>>>();
        call_cy_ParamService_listtypedef_ret_typedef_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<int32_t>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_enum_ret_double_param(
  apache::thrift::HandlerCallbackPtr<::some::valid::ns::MyEnumA> callback
    , double param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<::some::valid::ns::MyEnumA>();
        call_cy_ParamService_enum_ret_double_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<::some::valid::ns::MyEnumA>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_enum_ret_double_enum_param(
  apache::thrift::HandlerCallbackPtr<::some::valid::ns::MyEnumA> callback
    , double param1
    , ::some::valid::ns::MyEnumA param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1,
     param2
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<::some::valid::ns::MyEnumA>();
        call_cy_ParamService_enum_ret_double_enum_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1,
            param2        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<::some::valid::ns::MyEnumA>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_listenum_ret_map_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<::some::valid::ns::MyEnumA>>> callback
    , std::unique_ptr<std::map<std::string,int64_t>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<::some::valid::ns::MyEnumA>>>();
        call_cy_ParamService_listenum_ret_map_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<::some::valid::ns::MyEnumA>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_eb_struct_ret_i16_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<::some::valid::ns::MyStruct>> callback
    , int16_t param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<::some::valid::ns::MyStruct>>();
        call_cy_ParamService_struct_ret_i16_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<::some::valid::ns::MyStruct>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_setstruct_ret_set_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::set<::some::valid::ns::MyStruct>>> callback
    , std::unique_ptr<std::set<std::string>> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::set<::some::valid::ns::MyStruct>>>();
        call_cy_ParamService_setstruct_ret_set_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::set<::some::valid::ns::MyStruct>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_union_ret_i32_i32_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<::some::valid::ns::ComplexUnion>> callback
    , int32_t param1
    , int32_t param2
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1,
     param2
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<::some::valid::ns::ComplexUnion>>();
        call_cy_ParamService_union_ret_i32_i32_param(
            this->if_object,
            ctx,
            std::move(promise),
            param1,
            param2        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<::some::valid::ns::ComplexUnion>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_listunion_string_param(
  apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>>> callback
    , std::unique_ptr<std::string> param1
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     param1 = std::move(param1)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>>>();
        call_cy_ParamService_listunion_string_param(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(param1)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<::some::valid::ns::ComplexUnion>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void ParamServiceWrapper::async_tm_annotatedParams(
  apache::thrift::HandlerCallbackPtr<void> callback
    , std::unique_ptr<::some::valid::ns::containerStruct> no_annotation
    , std::unique_ptr<std::set<int32_t>> opt_ref_type_shared
    , CppFakeI32 base_type
    , std::unique_ptr<folly::small_vector<int64_t, 8 >> list_type
    , std::unique_ptr<folly::sorted_vector_set<std::string>> set_type
    , std::unique_ptr<FakeMap> map_type
    , std::unique_ptr<std::unordered_map<std::string, containerStruct>> map_struct_type
    , std::unique_ptr<folly::IOBuf> iobuf_type
    , std::unique_ptr<std::unique_ptr<folly::IOBuf>> iobuf_ptr
    , std::unique_ptr<std::vector<int32_t>> list_i32_template
    , std::unique_ptr<std::vector<std::string>> list_string_template
    , std::unique_ptr<std::set<std::string>> set_template
    , std::unique_ptr<std::map<int64_t,std::string>> map_template
    , std::unique_ptr<std::list<int32_t>> typedef_list_template
    , std::unique_ptr<std::deque<std::string>> typedef_deque_template
    , std::unique_ptr<folly::sorted_vector_set<std::string>> typedef_set_template
    , std::unique_ptr<folly::sorted_vector_map<int64_t,std::string>> typedef_map_template
    , std::unique_ptr<folly::IOBuf> iobuf_type_val
    , std::unique_ptr<std::unique_ptr<folly::IOBuf>> iobuf_ptr_val
    , std::unique_ptr<::some::valid::ns::containerStruct> struct_struct
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
     no_annotation = std::move(no_annotation),
     opt_ref_type_shared = std::move(opt_ref_type_shared),
     base_type,
     list_type = std::move(list_type),
     set_type = std::move(set_type),
     map_type = std::move(map_type),
     map_struct_type = std::move(map_struct_type),
     iobuf_type = std::move(iobuf_type),
     iobuf_ptr = std::move(iobuf_ptr),
     list_i32_template = std::move(list_i32_template),
     list_string_template = std::move(list_string_template),
     set_template = std::move(set_template),
     map_template = std::move(map_template),
     typedef_list_template = std::move(typedef_list_template),
     typedef_deque_template = std::move(typedef_deque_template),
     typedef_set_template = std::move(typedef_set_template),
     typedef_map_template = std::move(typedef_map_template),
     iobuf_type_val = std::move(iobuf_type_val),
     iobuf_ptr_val = std::move(iobuf_ptr_val),
     struct_struct = std::move(struct_struct)
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_ParamService_annotatedParams(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(no_annotation),
            std::move(opt_ref_type_shared),
            base_type,
            std::move(list_type),
            std::move(set_type),
            std::move(map_type),
            std::move(map_struct_type),
            std::move(iobuf_type),
            std::move(iobuf_ptr),
            std::move(list_i32_template),
            std::move(list_string_template),
            std::move(set_template),
            std::move(map_template),
            std::move(typedef_list_template),
            std::move(typedef_deque_template),
            std::move(typedef_set_template),
            std::move(typedef_map_template),
            std::move(iobuf_type_val),
            std::move(iobuf_ptr_val),
            std::move(struct_struct)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
std::shared_ptr<apache::thrift::ServerInterface> ParamServiceInterface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<ParamServiceWrapper>(if_object, exc);
}
folly::SemiFuture<folly::Unit> ParamServiceWrapper::semifuture_onStartServing() {
  auto [promise, future] = folly::makePromiseContract<folly::Unit>();
  call_cy_ParamService_onStartServing(
      this->if_object,
      std::move(promise)
  );
  return std::move(future);
}
folly::SemiFuture<folly::Unit> ParamServiceWrapper::semifuture_onStopRequested() {
  auto [promise, future] = folly::makePromiseContract<folly::Unit>();
  call_cy_ParamService_onStopRequested(
      this->if_object,
      std::move(promise)
  );
  return std::move(future);
}
} // namespace some
} // namespace valid
} // namespace ns
