[("\\E",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_abstract = false; sc_is_xhp = false; sc_internal = false;
       sc_has_xhp_keyword = false; sc_kind = (Cclass Concrete);
       sc_module = None; sc_name = ([3:7-8], "\\E");
       sc_tparams =
       [{ Typing_defs_core.tp_variance = Invariant;
          tp_name = ([3:9-11], "Ta"); tp_tparams = []; tp_constraints = [];
          tp_reified = Erased; tp_user_attributes = [] };
         { Typing_defs_core.tp_variance = Invariant;
           tp_name = ([3:13-15], "Tb"); tp_tparams = []; tp_constraints = [];
           tp_reified = Erased; tp_user_attributes = [] }
         ];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
       sc_xhp_marked_empty = false; sc_req_extends = [];
       sc_req_implements = []; sc_req_class = []; sc_implements = [];
       sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
       sc_props = []; sc_sprops = []; sc_constructor = None;
       sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
       sc_enum_type = None; sc_docs_url = None }));
  ("\\I",
   (Shallow_decl_defs.Class
      { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
        sc_abstract = false; sc_is_xhp = false; sc_internal = false;
        sc_has_xhp_keyword = false; sc_kind = Cinterface; sc_module = None;
        sc_name = ([5:11-12], "\\I");
        sc_tparams =
        [{ Typing_defs_core.tp_variance = Invariant;
           tp_name = ([6:3-5], "Ta"); tp_tparams = [];
           tp_constraints =
           [(Constraint_as, (Rhint ([6:9-17]), (Tprim Tarraykey)))];
           tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([7:3-5], "Tb"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as, (Rhint ([7:9-11]), (Tgeneric ("Ta", []))))];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([8:3-5], "Tc"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as, (Rhint ([8:9-11]), (Tgeneric ("Td", []))))];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([9:3-5], "Td"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([9:9-18]),
               (Tapply (([9:9-10], "\\E"),
                  [(Rhint ([9:11-13]), (Tgeneric ("Ta", [])));
                    (Rhint ([9:15-17]), (Tgeneric ("Tf", [])))]
                  ))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([10:3-5], "Tf"); tp_tparams = []; tp_constraints = [];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([11:3-7], "Tarr"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([11:11-21]),
               (Tapply (([11:11-17], "\\HH\\vec"),
                  [(Rhint ([11:18-20]), (Tgeneric ("Ta", [])))]))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([12:3-8], "Tlike"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([12:12-15]),
               (Tlike (Rhint ([12:13-15]), (Tgeneric ("Ta", []))))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([13:3-7], "Topt"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([13:11-14]),
               (Toption (Rhint ([13:12-14]), (Tgeneric ("Ta", []))))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([14:3-7], "Tfun"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([14:11-29]),
               (Tfun
                  { ft_tparams = []; ft_where_constraints = [];
                    ft_params =
                    [{ fp_pos = [14:21-23]; fp_name = None;
                       fp_type =
                       { et_enforced = Typing_defs_core.Unenforced;
                         et_type =
                         (Rhint ([14:21-23]), (Tgeneric ("Ta", []))) };
                       fp_flags =
                       (make_fp_flags ~accept_disposable:false
                         ~has_default:false ~mode:Typing_defs_core.FPnormal
                         ~ifc_external:false ~ifc_can_call:false
                         ~readonly:false);
                        }
                      ];
                    ft_implicit_params =
                    { capability = (CapDefaults [14:11-29]) };
                    ft_ret =
                    { et_enforced = Typing_defs_core.Unenforced;
                      et_type = (Rhint ([14:26-28]), (Tgeneric ("Tb", []))) };
                    ft_flags =
                    (make_ft_flags FSync ~return_disposable:false
                      ~returns_readonly:false ~support_dynamic_type:false
                      ~readonly_this:false ~is_memoized:false
                      ~variadic:false);
                    ft_ifc_decl = FDPolicied {PUBLIC}ft_cross_package = None
                    })))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([15:3-9], "Tshape"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([15:13-29]),
               (Tshape ((Rhint ([Pos.none]), (Tunion [])),
                  { (Typing_defs_core.TSFlit_str ([15:19-22], "a")) ->
                    { sft_optional = false;
                      sft_ty = (Rhint ([15:26-28]), (Tgeneric ("Ta", []))) } }
                  ))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([16:3-8], "Tdarr"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([16:12-26]),
               (Tapply (([16:12-18], "\\HH\\dict"),
                  [(Rhint ([16:19-21]), (Tgeneric ("Ta", [])));
                    (Rhint ([16:23-25]), (Tgeneric ("Tb", [])))]
                  ))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([17:3-8], "Tvarr"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([17:12-22]),
               (Tapply (([17:12-18], "\\HH\\vec"),
                  [(Rhint ([17:19-21]), (Tgeneric ("Ta", [])))]))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([18:3-9], "Tvdarr"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([18:13-37]),
               (Tvec_or_dict (Rhint ([18:30-32]), (Tgeneric ("Ta", []))),
                  (Rhint ([18:34-36]), (Tgeneric ("Tb", []))))))
              ];
            tp_reified = Erased; tp_user_attributes = [] };
          { Typing_defs_core.tp_variance = Invariant;
            tp_name = ([19:3-9], "Ttuple"); tp_tparams = [];
            tp_constraints =
            [(Constraint_as,
              (Rhint ([19:13-21]),
               (Ttuple
                  [(Rhint ([19:14-16]), (Tgeneric ("Ta", [])));
                    (Rhint ([19:18-20]), (Tgeneric ("Tb", [])))])))
              ];
            tp_reified = Erased; tp_user_attributes = [] }
          ];
        sc_where_constraints = []; sc_extends = []; sc_uses = [];
        sc_xhp_attr_uses = []; sc_xhp_enum_values = {};
        sc_xhp_marked_empty = false; sc_req_extends = [];
        sc_req_implements = []; sc_req_class = []; sc_implements = [];
        sc_support_dynamic_type = false; sc_consts = []; sc_typeconsts = [];
        sc_props = []; sc_sprops = []; sc_constructor = None;
        sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
        sc_enum_type = None; sc_docs_url = None }))
  ]
