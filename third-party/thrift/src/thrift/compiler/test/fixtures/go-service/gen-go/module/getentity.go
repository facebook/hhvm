// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

type GetEntity interface {
  // Parameters:
  //  - R
  GetEntity(r *GetEntityRequest) (_r *GetEntityResponse, err error)
  GetBool() (_r bool, err error)
  GetByte() (_r int8, err error)
  GetI16() (_r int16, err error)
  GetI32() (_r int32, err error)
  GetI64() (_r int64, err error)
  GetDouble() (_r float64, err error)
  GetString() (_r string, err error)
  GetBinary() (_r []byte, err error)
  GetMap() (_r map[string]string, err error)
  GetSet() (_r []string, err error)
  GetList() (_r []string, err error)
  // Parameters:
  //  - NumPos
  //  - NumNeg1
  //  - NumNeg2
  GetLegacyStuff(numPos int64, numNeg1 int64, numNeg2 int64) (_r int32, err error)
}

type GetEntityClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - R
  GetEntity(r *GetEntityRequest) (_r *GetEntityResponse, err error)
  GetBool() (_r bool, err error)
  GetByte() (_r int8, err error)
  GetI16() (_r int16, err error)
  GetI32() (_r int32, err error)
  GetI64() (_r int64, err error)
  GetDouble() (_r float64, err error)
  GetString() (_r string, err error)
  GetBinary() (_r []byte, err error)
  GetMap() (_r map[string]string, err error)
  GetSet() (_r []string, err error)
  GetList() (_r []string, err error)
  // Parameters:
  //  - NumPos
  //  - NumNeg1
  //  - NumNeg2
  GetLegacyStuff(numPos int64, numNeg1 int64, numNeg2 int64) (_r int32, err error)
}

type GetEntityClient struct {
  GetEntityClientInterface
  CC thrift.ClientConn
}

func(client *GetEntityClient) Open() error {
  return client.CC.Open()
}

func(client *GetEntityClient) Close() error {
  return client.CC.Close()
}

func(client *GetEntityClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewGetEntityClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *GetEntityClient {
  return &GetEntityClient{ CC: thrift.NewClientConn(t, f) }
}

func NewGetEntityClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GetEntityClient {
  return &GetEntityClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewGetEntityClientProtocol(prot thrift.Protocol) *GetEntityClient {
  return NewGetEntityClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - R
func (p *GetEntityClient) GetEntity(r *GetEntityRequest) (_r *GetEntityResponse, err error) {
  args := GetEntityGetEntityArgs{
    R : r,
  }
  err = p.CC.SendMsg("getEntity", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEntity()
}


func (p *GetEntityClient) recvGetEntity() (value *GetEntityResponse, err error) {
  var __result GetEntityGetEntityResult
  err = p.CC.RecvMsg("getEntity", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetBool() (_r bool, err error) {
  var args GetEntityGetBoolArgs
  err = p.CC.SendMsg("getBool", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetBool()
}


func (p *GetEntityClient) recvGetBool() (value bool, err error) {
  var __result GetEntityGetBoolResult
  err = p.CC.RecvMsg("getBool", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetByte() (_r int8, err error) {
  var args GetEntityGetByteArgs
  err = p.CC.SendMsg("getByte", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetByte()
}


func (p *GetEntityClient) recvGetByte() (value int8, err error) {
  var __result GetEntityGetByteResult
  err = p.CC.RecvMsg("getByte", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetI16() (_r int16, err error) {
  var args GetEntityGetI16Args
  err = p.CC.SendMsg("getI16", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetI16()
}


func (p *GetEntityClient) recvGetI16() (value int16, err error) {
  var __result GetEntityGetI16Result
  err = p.CC.RecvMsg("getI16", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetI32() (_r int32, err error) {
  var args GetEntityGetI32Args
  err = p.CC.SendMsg("getI32", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetI32()
}


func (p *GetEntityClient) recvGetI32() (value int32, err error) {
  var __result GetEntityGetI32Result
  err = p.CC.RecvMsg("getI32", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetI64() (_r int64, err error) {
  var args GetEntityGetI64Args
  err = p.CC.SendMsg("getI64", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetI64()
}


func (p *GetEntityClient) recvGetI64() (value int64, err error) {
  var __result GetEntityGetI64Result
  err = p.CC.RecvMsg("getI64", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetDouble() (_r float64, err error) {
  var args GetEntityGetDoubleArgs
  err = p.CC.SendMsg("getDouble", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetDouble()
}


func (p *GetEntityClient) recvGetDouble() (value float64, err error) {
  var __result GetEntityGetDoubleResult
  err = p.CC.RecvMsg("getDouble", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetString() (_r string, err error) {
  var args GetEntityGetStringArgs
  err = p.CC.SendMsg("getString", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetString()
}


func (p *GetEntityClient) recvGetString() (value string, err error) {
  var __result GetEntityGetStringResult
  err = p.CC.RecvMsg("getString", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetBinary() (_r []byte, err error) {
  var args GetEntityGetBinaryArgs
  err = p.CC.SendMsg("getBinary", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetBinary()
}


func (p *GetEntityClient) recvGetBinary() (value []byte, err error) {
  var __result GetEntityGetBinaryResult
  err = p.CC.RecvMsg("getBinary", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetMap() (_r map[string]string, err error) {
  var args GetEntityGetMapArgs
  err = p.CC.SendMsg("getMap", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetMap()
}


func (p *GetEntityClient) recvGetMap() (value map[string]string, err error) {
  var __result GetEntityGetMapResult
  err = p.CC.RecvMsg("getMap", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetSet() (_r []string, err error) {
  var args GetEntityGetSetArgs
  err = p.CC.SendMsg("getSet", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSet()
}


func (p *GetEntityClient) recvGetSet() (value []string, err error) {
  var __result GetEntityGetSetResult
  err = p.CC.RecvMsg("getSet", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityClient) GetList() (_r []string, err error) {
  var args GetEntityGetListArgs
  err = p.CC.SendMsg("getList", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetList()
}


func (p *GetEntityClient) recvGetList() (value []string, err error) {
  var __result GetEntityGetListResult
  err = p.CC.RecvMsg("getList", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - NumPos
//  - NumNeg1
//  - NumNeg2
func (p *GetEntityClient) GetLegacyStuff(numPos int64, numNeg1 int64, numNeg2 int64) (_r int32, err error) {
  args := GetEntityGetLegacyStuffArgs{
    NumPos : numPos,
    NumNeg1 : numNeg1,
    NumNeg2 : numNeg2,
  }
  err = p.CC.SendMsg("getLegacyStuff", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetLegacyStuff()
}


func (p *GetEntityClient) recvGetLegacyStuff() (value int32, err error) {
  var __result GetEntityGetLegacyStuffResult
  err = p.CC.RecvMsg("getLegacyStuff", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type GetEntityThreadsafeClient struct {
  GetEntityClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *GetEntityThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *GetEntityThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *GetEntityThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewGetEntityThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *GetEntityThreadsafeClient {
  return &GetEntityThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewGetEntityThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GetEntityThreadsafeClient {
  return &GetEntityThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewGetEntityThreadsafeClientProtocol(prot thrift.Protocol) *GetEntityThreadsafeClient {
  return NewGetEntityThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - R
func (p *GetEntityThreadsafeClient) GetEntity(r *GetEntityRequest) (_r *GetEntityResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GetEntityGetEntityArgs{
    R : r,
  }
  err = p.CC.SendMsg("getEntity", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEntity()
}


func (p *GetEntityThreadsafeClient) recvGetEntity() (value *GetEntityResponse, err error) {
  var __result GetEntityGetEntityResult
  err = p.CC.RecvMsg("getEntity", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetBool() (_r bool, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetBoolArgs
  err = p.CC.SendMsg("getBool", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetBool()
}


func (p *GetEntityThreadsafeClient) recvGetBool() (value bool, err error) {
  var __result GetEntityGetBoolResult
  err = p.CC.RecvMsg("getBool", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetByte() (_r int8, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetByteArgs
  err = p.CC.SendMsg("getByte", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetByte()
}


func (p *GetEntityThreadsafeClient) recvGetByte() (value int8, err error) {
  var __result GetEntityGetByteResult
  err = p.CC.RecvMsg("getByte", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetI16() (_r int16, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetI16Args
  err = p.CC.SendMsg("getI16", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetI16()
}


func (p *GetEntityThreadsafeClient) recvGetI16() (value int16, err error) {
  var __result GetEntityGetI16Result
  err = p.CC.RecvMsg("getI16", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetI32() (_r int32, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetI32Args
  err = p.CC.SendMsg("getI32", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetI32()
}


func (p *GetEntityThreadsafeClient) recvGetI32() (value int32, err error) {
  var __result GetEntityGetI32Result
  err = p.CC.RecvMsg("getI32", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetI64() (_r int64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetI64Args
  err = p.CC.SendMsg("getI64", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetI64()
}


func (p *GetEntityThreadsafeClient) recvGetI64() (value int64, err error) {
  var __result GetEntityGetI64Result
  err = p.CC.RecvMsg("getI64", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetDouble() (_r float64, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetDoubleArgs
  err = p.CC.SendMsg("getDouble", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetDouble()
}


func (p *GetEntityThreadsafeClient) recvGetDouble() (value float64, err error) {
  var __result GetEntityGetDoubleResult
  err = p.CC.RecvMsg("getDouble", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetString() (_r string, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetStringArgs
  err = p.CC.SendMsg("getString", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetString()
}


func (p *GetEntityThreadsafeClient) recvGetString() (value string, err error) {
  var __result GetEntityGetStringResult
  err = p.CC.RecvMsg("getString", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetBinary() (_r []byte, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetBinaryArgs
  err = p.CC.SendMsg("getBinary", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetBinary()
}


func (p *GetEntityThreadsafeClient) recvGetBinary() (value []byte, err error) {
  var __result GetEntityGetBinaryResult
  err = p.CC.RecvMsg("getBinary", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetMap() (_r map[string]string, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetMapArgs
  err = p.CC.SendMsg("getMap", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetMap()
}


func (p *GetEntityThreadsafeClient) recvGetMap() (value map[string]string, err error) {
  var __result GetEntityGetMapResult
  err = p.CC.RecvMsg("getMap", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetSet() (_r []string, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetSetArgs
  err = p.CC.SendMsg("getSet", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSet()
}


func (p *GetEntityThreadsafeClient) recvGetSet() (value []string, err error) {
  var __result GetEntityGetSetResult
  err = p.CC.RecvMsg("getSet", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityThreadsafeClient) GetList() (_r []string, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  var args GetEntityGetListArgs
  err = p.CC.SendMsg("getList", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetList()
}


func (p *GetEntityThreadsafeClient) recvGetList() (value []string, err error) {
  var __result GetEntityGetListResult
  err = p.CC.RecvMsg("getList", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - NumPos
//  - NumNeg1
//  - NumNeg2
func (p *GetEntityThreadsafeClient) GetLegacyStuff(numPos int64, numNeg1 int64, numNeg2 int64) (_r int32, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GetEntityGetLegacyStuffArgs{
    NumPos : numPos,
    NumNeg1 : numNeg1,
    NumNeg2 : numNeg2,
  }
  err = p.CC.SendMsg("getLegacyStuff", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetLegacyStuff()
}


func (p *GetEntityThreadsafeClient) recvGetLegacyStuff() (value int32, err error) {
  var __result GetEntityGetLegacyStuffResult
  err = p.CC.RecvMsg("getLegacyStuff", &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type GetEntityChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *GetEntityChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *GetEntityChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *GetEntityChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewGetEntityChannelClient(channel thrift.RequestChannel) *GetEntityChannelClient {
  return &GetEntityChannelClient{RequestChannel: channel}
}

// Parameters:
//  - R
func (p *GetEntityChannelClient) GetEntity(ctx context.Context, r *GetEntityRequest) (_r *GetEntityResponse, err error) {
  args := GetEntityGetEntityArgs{
    R : r,
  }
  var __result GetEntityGetEntityResult
  err = p.RequestChannel.Call(ctx, "getEntity", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetBool(ctx context.Context) (_r bool, err error) {
  args := GetEntityGetBoolArgs{
  }
  var __result GetEntityGetBoolResult
  err = p.RequestChannel.Call(ctx, "getBool", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetByte(ctx context.Context) (_r int8, err error) {
  args := GetEntityGetByteArgs{
  }
  var __result GetEntityGetByteResult
  err = p.RequestChannel.Call(ctx, "getByte", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetI16(ctx context.Context) (_r int16, err error) {
  args := GetEntityGetI16Args{
  }
  var __result GetEntityGetI16Result
  err = p.RequestChannel.Call(ctx, "getI16", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetI32(ctx context.Context) (_r int32, err error) {
  args := GetEntityGetI32Args{
  }
  var __result GetEntityGetI32Result
  err = p.RequestChannel.Call(ctx, "getI32", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetI64(ctx context.Context) (_r int64, err error) {
  args := GetEntityGetI64Args{
  }
  var __result GetEntityGetI64Result
  err = p.RequestChannel.Call(ctx, "getI64", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetDouble(ctx context.Context) (_r float64, err error) {
  args := GetEntityGetDoubleArgs{
  }
  var __result GetEntityGetDoubleResult
  err = p.RequestChannel.Call(ctx, "getDouble", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetString(ctx context.Context) (_r string, err error) {
  args := GetEntityGetStringArgs{
  }
  var __result GetEntityGetStringResult
  err = p.RequestChannel.Call(ctx, "getString", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetBinary(ctx context.Context) (_r []byte, err error) {
  args := GetEntityGetBinaryArgs{
  }
  var __result GetEntityGetBinaryResult
  err = p.RequestChannel.Call(ctx, "getBinary", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetMap(ctx context.Context) (_r map[string]string, err error) {
  args := GetEntityGetMapArgs{
  }
  var __result GetEntityGetMapResult
  err = p.RequestChannel.Call(ctx, "getMap", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetSet(ctx context.Context) (_r []string, err error) {
  args := GetEntityGetSetArgs{
  }
  var __result GetEntityGetSetResult
  err = p.RequestChannel.Call(ctx, "getSet", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

func (p *GetEntityChannelClient) GetList(ctx context.Context) (_r []string, err error) {
  args := GetEntityGetListArgs{
  }
  var __result GetEntityGetListResult
  err = p.RequestChannel.Call(ctx, "getList", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}

// Parameters:
//  - NumPos
//  - NumNeg1
//  - NumNeg2
func (p *GetEntityChannelClient) GetLegacyStuff(ctx context.Context, numPos int64, numNeg1 int64, numNeg2 int64) (_r int32, err error) {
  args := GetEntityGetLegacyStuffArgs{
    NumPos : numPos,
    NumNeg1 : numNeg1,
    NumNeg2 : numNeg2,
  }
  var __result GetEntityGetLegacyStuffResult
  err = p.RequestChannel.Call(ctx, "getLegacyStuff", &args, &__result)
  if err != nil { return }

  return __result.GetSuccess(), nil
}


type GetEntityProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  functionServiceMap map[string]string
  handler GetEntity
}

func (p *GetEntityProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GetEntityProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *GetEntityProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *GetEntityProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func (p *GetEntityProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewGetEntityProcessor(handler GetEntity) *GetEntityProcessor {
  self0 := &GetEntityProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction), functionServiceMap:make(map[string]string)}
  self0.processorMap["getEntity"] = &getEntityProcessorGetEntity{handler:handler}
  self0.processorMap["getBool"] = &getEntityProcessorGetBool{handler:handler}
  self0.processorMap["getByte"] = &getEntityProcessorGetByte{handler:handler}
  self0.processorMap["getI16"] = &getEntityProcessorGetI16{handler:handler}
  self0.processorMap["getI32"] = &getEntityProcessorGetI32{handler:handler}
  self0.processorMap["getI64"] = &getEntityProcessorGetI64{handler:handler}
  self0.processorMap["getDouble"] = &getEntityProcessorGetDouble{handler:handler}
  self0.processorMap["getString"] = &getEntityProcessorGetString{handler:handler}
  self0.processorMap["getBinary"] = &getEntityProcessorGetBinary{handler:handler}
  self0.processorMap["getMap"] = &getEntityProcessorGetMap{handler:handler}
  self0.processorMap["getSet"] = &getEntityProcessorGetSet{handler:handler}
  self0.processorMap["getList"] = &getEntityProcessorGetList{handler:handler}
  self0.processorMap["getLegacyStuff"] = &getEntityProcessorGetLegacyStuff{handler:handler}
  self0.functionServiceMap["getEntity"] = "GetEntity"
  self0.functionServiceMap["getBool"] = "GetEntity"
  self0.functionServiceMap["getByte"] = "GetEntity"
  self0.functionServiceMap["getI16"] = "GetEntity"
  self0.functionServiceMap["getI32"] = "GetEntity"
  self0.functionServiceMap["getI64"] = "GetEntity"
  self0.functionServiceMap["getDouble"] = "GetEntity"
  self0.functionServiceMap["getString"] = "GetEntity"
  self0.functionServiceMap["getBinary"] = "GetEntity"
  self0.functionServiceMap["getMap"] = "GetEntity"
  self0.functionServiceMap["getSet"] = "GetEntity"
  self0.functionServiceMap["getList"] = "GetEntity"
  self0.functionServiceMap["getLegacyStuff"] = "GetEntity"
  return self0
}

type getEntityProcessorGetEntity struct {
  handler GetEntity
}

func (p *GetEntityGetEntityResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetEntity) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetEntityArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetEntity) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEntity", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetEntity) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GetEntityGetEntityArgs)
  var __result GetEntityGetEntityResult
  if retval, err := p.handler.GetEntity(args.R); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getEntity: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type getEntityProcessorGetBool struct {
  handler GetEntity
}

func (p *GetEntityGetBoolResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetBool) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetBoolArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetBool) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getBool", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetBool) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetBoolResult
  if retval, err := p.handler.GetBool(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getBool: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetByte struct {
  handler GetEntity
}

func (p *GetEntityGetByteResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetByte) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetByteArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetByte) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getByte", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetByte) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetByteResult
  if retval, err := p.handler.GetByte(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getByte: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetI16 struct {
  handler GetEntity
}

func (p *GetEntityGetI16Result) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetI16) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetI16Args{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetI16) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getI16", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetI16) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetI16Result
  if retval, err := p.handler.GetI16(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getI16: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetI32 struct {
  handler GetEntity
}

func (p *GetEntityGetI32Result) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetI32) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetI32Args{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetI32) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getI32", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetI32) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetI32Result
  if retval, err := p.handler.GetI32(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getI32: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetI64 struct {
  handler GetEntity
}

func (p *GetEntityGetI64Result) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetI64) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetI64Args{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetI64) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getI64", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetI64) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetI64Result
  if retval, err := p.handler.GetI64(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getI64: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetDouble struct {
  handler GetEntity
}

func (p *GetEntityGetDoubleResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetDouble) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetDoubleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetDouble) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getDouble", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetDouble) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetDoubleResult
  if retval, err := p.handler.GetDouble(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getDouble: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetString struct {
  handler GetEntity
}

func (p *GetEntityGetStringResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetString) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetStringArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetString) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getString", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetString) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetStringResult
  if retval, err := p.handler.GetString(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getString: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}

type getEntityProcessorGetBinary struct {
  handler GetEntity
}

func (p *GetEntityGetBinaryResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetBinary) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetBinaryArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetBinary) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getBinary", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetBinary) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetBinaryResult
  if retval, err := p.handler.GetBinary(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getBinary: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type getEntityProcessorGetMap struct {
  handler GetEntity
}

func (p *GetEntityGetMapResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetMap) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetMapArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetMap) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getMap", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetMap) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetMapResult
  if retval, err := p.handler.GetMap(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getMap: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type getEntityProcessorGetSet struct {
  handler GetEntity
}

func (p *GetEntityGetSetResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetSet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetSetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetSet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSet", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetSet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetSetResult
  if retval, err := p.handler.GetSet(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getSet: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type getEntityProcessorGetList struct {
  handler GetEntity
}

func (p *GetEntityGetListResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetList) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetListArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetList) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getList", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetList) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  var __result GetEntityGetListResult
  if retval, err := p.handler.GetList(); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getList: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = retval
  }
  return &__result, nil
}

type getEntityProcessorGetLegacyStuff struct {
  handler GetEntity
}

func (p *GetEntityGetLegacyStuffResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *getEntityProcessorGetLegacyStuff) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GetEntityGetLegacyStuffArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *getEntityProcessorGetLegacyStuff) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getLegacyStuff", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *getEntityProcessorGetLegacyStuff) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GetEntityGetLegacyStuffArgs)
  var __result GetEntityGetLegacyStuffResult
  if retval, err := p.handler.GetLegacyStuff(args.NumPos, args.NumNeg1, args.NumNeg2); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing getLegacyStuff: " + err.Error(), err)
      return x, x
    }
  } else {
    __result.Success = &retval
  }
  return &__result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - R
type GetEntityGetEntityArgs struct {
  thrift.IRequest
  R *GetEntityRequest `thrift:"r,1" db:"r" json:"r"`
}

func NewGetEntityGetEntityArgs() *GetEntityGetEntityArgs {
  return &GetEntityGetEntityArgs{
    R: NewGetEntityRequest(),
  }
}

var GetEntityGetEntityArgs_R_DEFAULT *GetEntityRequest
func (p *GetEntityGetEntityArgs) GetR() *GetEntityRequest {
  if !p.IsSetR() {
    return GetEntityGetEntityArgs_R_DEFAULT
  }
  return p.R
}
func (p *GetEntityGetEntityArgs) DefaultGetR() *GetEntityRequest {
  if !p.IsSetR() {
    return NewGetEntityRequest()
  }
  return p.R
}
func (p *GetEntityGetEntityArgs) IsSetR() bool {
  return p != nil && p.R != nil
}

type GetEntityGetEntityArgsBuilder struct {
  obj *GetEntityGetEntityArgs
}

func NewGetEntityGetEntityArgsBuilder() *GetEntityGetEntityArgsBuilder{
  return &GetEntityGetEntityArgsBuilder{
    obj: NewGetEntityGetEntityArgs(),
  }
}

func (p GetEntityGetEntityArgsBuilder) Emit() *GetEntityGetEntityArgs{
  return &GetEntityGetEntityArgs{
    R: p.obj.R,
  }
}

func (g *GetEntityGetEntityArgsBuilder) R(r *GetEntityRequest) *GetEntityGetEntityArgsBuilder {
  g.obj.R = r
  return g
}

func (g *GetEntityGetEntityArgs) SetR(r *GetEntityRequest) *GetEntityGetEntityArgs {
  g.R = r
  return g
}

func (p *GetEntityGetEntityArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetEntityArgs)  ReadField1(iprot thrift.Protocol) error {
  p.R = NewGetEntityRequest()
  if err := p.R.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.R), err)
  }
  return nil
}

func (p *GetEntityGetEntityArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEntity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetEntityArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("r", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:r: ", p), err) }
  if err := p.R.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.R), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:r: ", p), err) }
  return err
}

func (p *GetEntityGetEntityArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var rVal string
  if p.R == nil {
    rVal = "<nil>"
  } else {
    rVal = fmt.Sprintf("%v", p.R)
  }
  return fmt.Sprintf("GetEntityGetEntityArgs({R:%s})", rVal)
}

// Attributes:
//  - Success
type GetEntityGetEntityResult struct {
  thrift.IResponse
  Success *GetEntityResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetEntityResult() *GetEntityGetEntityResult {
  return &GetEntityGetEntityResult{}
}

var GetEntityGetEntityResult_Success_DEFAULT *GetEntityResponse
func (p *GetEntityGetEntityResult) GetSuccess() *GetEntityResponse {
  if !p.IsSetSuccess() {
    return GetEntityGetEntityResult_Success_DEFAULT
  }
  return p.Success
}
func (p *GetEntityGetEntityResult) DefaultGetSuccess() *GetEntityResponse {
  if !p.IsSetSuccess() {
    return NewGetEntityResponse()
  }
  return p.Success
}
func (p *GetEntityGetEntityResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetEntityResultBuilder struct {
  obj *GetEntityGetEntityResult
}

func NewGetEntityGetEntityResultBuilder() *GetEntityGetEntityResultBuilder{
  return &GetEntityGetEntityResultBuilder{
    obj: NewGetEntityGetEntityResult(),
  }
}

func (p GetEntityGetEntityResultBuilder) Emit() *GetEntityGetEntityResult{
  return &GetEntityGetEntityResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetEntityResultBuilder) Success(success *GetEntityResponse) *GetEntityGetEntityResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetEntityResult) SetSuccess(success *GetEntityResponse) *GetEntityGetEntityResult {
  g.Success = success
  return g
}

func (p *GetEntityGetEntityResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetEntityResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEntityResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GetEntityGetEntityResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEntity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetEntityResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetEntityResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GetEntityGetEntityResult({Success:%s})", successVal)
}

type GetEntityGetBoolArgs struct {
  thrift.IRequest
}

func NewGetEntityGetBoolArgs() *GetEntityGetBoolArgs {
  return &GetEntityGetBoolArgs{}
}

type GetEntityGetBoolArgsBuilder struct {
  obj *GetEntityGetBoolArgs
}

func NewGetEntityGetBoolArgsBuilder() *GetEntityGetBoolArgsBuilder{
  return &GetEntityGetBoolArgsBuilder{
    obj: NewGetEntityGetBoolArgs(),
  }
}

func (p GetEntityGetBoolArgsBuilder) Emit() *GetEntityGetBoolArgs{
  return &GetEntityGetBoolArgs{
  }
}

func (p *GetEntityGetBoolArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetBoolArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getBool_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetBoolArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetBoolResult struct {
  thrift.IResponse
  Success *bool `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetBoolResult() *GetEntityGetBoolResult {
  return &GetEntityGetBoolResult{}
}

var GetEntityGetBoolResult_Success_DEFAULT bool
func (p *GetEntityGetBoolResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return GetEntityGetBoolResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetBoolResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetBoolResultBuilder struct {
  obj *GetEntityGetBoolResult
}

func NewGetEntityGetBoolResultBuilder() *GetEntityGetBoolResultBuilder{
  return &GetEntityGetBoolResultBuilder{
    obj: NewGetEntityGetBoolResult(),
  }
}

func (p GetEntityGetBoolResultBuilder) Emit() *GetEntityGetBoolResult{
  return &GetEntityGetBoolResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetBoolResultBuilder) Success(success *bool) *GetEntityGetBoolResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetBoolResult) SetSuccess(success *bool) *GetEntityGetBoolResult {
  g.Success = success
  return g
}

func (p *GetEntityGetBoolResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetBoolResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetBoolResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getBool_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetBoolResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetBoolResult({Success:%s})", successVal)
}

type GetEntityGetByteArgs struct {
  thrift.IRequest
}

func NewGetEntityGetByteArgs() *GetEntityGetByteArgs {
  return &GetEntityGetByteArgs{}
}

type GetEntityGetByteArgsBuilder struct {
  obj *GetEntityGetByteArgs
}

func NewGetEntityGetByteArgsBuilder() *GetEntityGetByteArgsBuilder{
  return &GetEntityGetByteArgsBuilder{
    obj: NewGetEntityGetByteArgs(),
  }
}

func (p GetEntityGetByteArgsBuilder) Emit() *GetEntityGetByteArgs{
  return &GetEntityGetByteArgs{
  }
}

func (p *GetEntityGetByteArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetByteArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getByte_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetByteArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetByteArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetByteResult struct {
  thrift.IResponse
  Success *int8 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetByteResult() *GetEntityGetByteResult {
  return &GetEntityGetByteResult{}
}

var GetEntityGetByteResult_Success_DEFAULT int8
func (p *GetEntityGetByteResult) GetSuccess() int8 {
  if !p.IsSetSuccess() {
    return GetEntityGetByteResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetByteResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetByteResultBuilder struct {
  obj *GetEntityGetByteResult
}

func NewGetEntityGetByteResultBuilder() *GetEntityGetByteResultBuilder{
  return &GetEntityGetByteResultBuilder{
    obj: NewGetEntityGetByteResult(),
  }
}

func (p GetEntityGetByteResultBuilder) Emit() *GetEntityGetByteResult{
  return &GetEntityGetByteResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetByteResultBuilder) Success(success *int8) *GetEntityGetByteResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetByteResult) SetSuccess(success *int8) *GetEntityGetByteResult {
  g.Success = success
  return g
}

func (p *GetEntityGetByteResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetByteResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    temp := int8(v)
    p.Success = &temp
  }
  return nil
}

func (p *GetEntityGetByteResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getByte_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetByteResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteByte(byte(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetByteResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetByteResult({Success:%s})", successVal)
}

type GetEntityGetI16Args struct {
  thrift.IRequest
}

func NewGetEntityGetI16Args() *GetEntityGetI16Args {
  return &GetEntityGetI16Args{}
}

type GetEntityGetI16ArgsBuilder struct {
  obj *GetEntityGetI16Args
}

func NewGetEntityGetI16ArgsBuilder() *GetEntityGetI16ArgsBuilder{
  return &GetEntityGetI16ArgsBuilder{
    obj: NewGetEntityGetI16Args(),
  }
}

func (p GetEntityGetI16ArgsBuilder) Emit() *GetEntityGetI16Args{
  return &GetEntityGetI16Args{
  }
}

func (p *GetEntityGetI16Args) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetI16Args) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getI16_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetI16Args) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetI16Args({})")
}

// Attributes:
//  - Success
type GetEntityGetI16Result struct {
  thrift.IResponse
  Success *int16 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetI16Result() *GetEntityGetI16Result {
  return &GetEntityGetI16Result{}
}

var GetEntityGetI16Result_Success_DEFAULT int16
func (p *GetEntityGetI16Result) GetSuccess() int16 {
  if !p.IsSetSuccess() {
    return GetEntityGetI16Result_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetI16Result) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetI16ResultBuilder struct {
  obj *GetEntityGetI16Result
}

func NewGetEntityGetI16ResultBuilder() *GetEntityGetI16ResultBuilder{
  return &GetEntityGetI16ResultBuilder{
    obj: NewGetEntityGetI16Result(),
  }
}

func (p GetEntityGetI16ResultBuilder) Emit() *GetEntityGetI16Result{
  return &GetEntityGetI16Result{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetI16ResultBuilder) Success(success *int16) *GetEntityGetI16ResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetI16Result) SetSuccess(success *int16) *GetEntityGetI16Result {
  g.Success = success
  return g
}

func (p *GetEntityGetI16Result) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetI16Result)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetI16Result) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getI16_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetI16Result) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I16, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetI16Result) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetI16Result({Success:%s})", successVal)
}

type GetEntityGetI32Args struct {
  thrift.IRequest
}

func NewGetEntityGetI32Args() *GetEntityGetI32Args {
  return &GetEntityGetI32Args{}
}

type GetEntityGetI32ArgsBuilder struct {
  obj *GetEntityGetI32Args
}

func NewGetEntityGetI32ArgsBuilder() *GetEntityGetI32ArgsBuilder{
  return &GetEntityGetI32ArgsBuilder{
    obj: NewGetEntityGetI32Args(),
  }
}

func (p GetEntityGetI32ArgsBuilder) Emit() *GetEntityGetI32Args{
  return &GetEntityGetI32Args{
  }
}

func (p *GetEntityGetI32Args) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetI32Args) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getI32_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetI32Args) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetI32Args({})")
}

// Attributes:
//  - Success
type GetEntityGetI32Result struct {
  thrift.IResponse
  Success *int32 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetI32Result() *GetEntityGetI32Result {
  return &GetEntityGetI32Result{}
}

var GetEntityGetI32Result_Success_DEFAULT int32
func (p *GetEntityGetI32Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return GetEntityGetI32Result_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetI32Result) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetI32ResultBuilder struct {
  obj *GetEntityGetI32Result
}

func NewGetEntityGetI32ResultBuilder() *GetEntityGetI32ResultBuilder{
  return &GetEntityGetI32ResultBuilder{
    obj: NewGetEntityGetI32Result(),
  }
}

func (p GetEntityGetI32ResultBuilder) Emit() *GetEntityGetI32Result{
  return &GetEntityGetI32Result{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetI32ResultBuilder) Success(success *int32) *GetEntityGetI32ResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetI32Result) SetSuccess(success *int32) *GetEntityGetI32Result {
  g.Success = success
  return g
}

func (p *GetEntityGetI32Result) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetI32Result)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetI32Result) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getI32_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetI32Result) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetI32Result) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetI32Result({Success:%s})", successVal)
}

type GetEntityGetI64Args struct {
  thrift.IRequest
}

func NewGetEntityGetI64Args() *GetEntityGetI64Args {
  return &GetEntityGetI64Args{}
}

type GetEntityGetI64ArgsBuilder struct {
  obj *GetEntityGetI64Args
}

func NewGetEntityGetI64ArgsBuilder() *GetEntityGetI64ArgsBuilder{
  return &GetEntityGetI64ArgsBuilder{
    obj: NewGetEntityGetI64Args(),
  }
}

func (p GetEntityGetI64ArgsBuilder) Emit() *GetEntityGetI64Args{
  return &GetEntityGetI64Args{
  }
}

func (p *GetEntityGetI64Args) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetI64Args) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getI64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetI64Args) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetI64Args({})")
}

// Attributes:
//  - Success
type GetEntityGetI64Result struct {
  thrift.IResponse
  Success *int64 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetI64Result() *GetEntityGetI64Result {
  return &GetEntityGetI64Result{}
}

var GetEntityGetI64Result_Success_DEFAULT int64
func (p *GetEntityGetI64Result) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return GetEntityGetI64Result_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetI64Result) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetI64ResultBuilder struct {
  obj *GetEntityGetI64Result
}

func NewGetEntityGetI64ResultBuilder() *GetEntityGetI64ResultBuilder{
  return &GetEntityGetI64ResultBuilder{
    obj: NewGetEntityGetI64Result(),
  }
}

func (p GetEntityGetI64ResultBuilder) Emit() *GetEntityGetI64Result{
  return &GetEntityGetI64Result{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetI64ResultBuilder) Success(success *int64) *GetEntityGetI64ResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetI64Result) SetSuccess(success *int64) *GetEntityGetI64Result {
  g.Success = success
  return g
}

func (p *GetEntityGetI64Result) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetI64Result)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetI64Result) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getI64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetI64Result) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetI64Result) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetI64Result({Success:%s})", successVal)
}

type GetEntityGetDoubleArgs struct {
  thrift.IRequest
}

func NewGetEntityGetDoubleArgs() *GetEntityGetDoubleArgs {
  return &GetEntityGetDoubleArgs{}
}

type GetEntityGetDoubleArgsBuilder struct {
  obj *GetEntityGetDoubleArgs
}

func NewGetEntityGetDoubleArgsBuilder() *GetEntityGetDoubleArgsBuilder{
  return &GetEntityGetDoubleArgsBuilder{
    obj: NewGetEntityGetDoubleArgs(),
  }
}

func (p GetEntityGetDoubleArgsBuilder) Emit() *GetEntityGetDoubleArgs{
  return &GetEntityGetDoubleArgs{
  }
}

func (p *GetEntityGetDoubleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetDoubleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getDouble_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetDoubleArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetDoubleArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetDoubleResult struct {
  thrift.IResponse
  Success *float64 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetDoubleResult() *GetEntityGetDoubleResult {
  return &GetEntityGetDoubleResult{}
}

var GetEntityGetDoubleResult_Success_DEFAULT float64
func (p *GetEntityGetDoubleResult) GetSuccess() float64 {
  if !p.IsSetSuccess() {
    return GetEntityGetDoubleResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetDoubleResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetDoubleResultBuilder struct {
  obj *GetEntityGetDoubleResult
}

func NewGetEntityGetDoubleResultBuilder() *GetEntityGetDoubleResultBuilder{
  return &GetEntityGetDoubleResultBuilder{
    obj: NewGetEntityGetDoubleResult(),
  }
}

func (p GetEntityGetDoubleResultBuilder) Emit() *GetEntityGetDoubleResult{
  return &GetEntityGetDoubleResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetDoubleResultBuilder) Success(success *float64) *GetEntityGetDoubleResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetDoubleResult) SetSuccess(success *float64) *GetEntityGetDoubleResult {
  g.Success = success
  return g
}

func (p *GetEntityGetDoubleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetDoubleResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetDoubleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getDouble_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetDoubleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetDoubleResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetDoubleResult({Success:%s})", successVal)
}

type GetEntityGetStringArgs struct {
  thrift.IRequest
}

func NewGetEntityGetStringArgs() *GetEntityGetStringArgs {
  return &GetEntityGetStringArgs{}
}

type GetEntityGetStringArgsBuilder struct {
  obj *GetEntityGetStringArgs
}

func NewGetEntityGetStringArgsBuilder() *GetEntityGetStringArgsBuilder{
  return &GetEntityGetStringArgsBuilder{
    obj: NewGetEntityGetStringArgs(),
  }
}

func (p GetEntityGetStringArgsBuilder) Emit() *GetEntityGetStringArgs{
  return &GetEntityGetStringArgs{
  }
}

func (p *GetEntityGetStringArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetStringArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getString_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetStringArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetStringResult struct {
  thrift.IResponse
  Success *string `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetStringResult() *GetEntityGetStringResult {
  return &GetEntityGetStringResult{}
}

var GetEntityGetStringResult_Success_DEFAULT string
func (p *GetEntityGetStringResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return GetEntityGetStringResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetStringResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetStringResultBuilder struct {
  obj *GetEntityGetStringResult
}

func NewGetEntityGetStringResultBuilder() *GetEntityGetStringResultBuilder{
  return &GetEntityGetStringResultBuilder{
    obj: NewGetEntityGetStringResult(),
  }
}

func (p GetEntityGetStringResultBuilder) Emit() *GetEntityGetStringResult{
  return &GetEntityGetStringResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetStringResultBuilder) Success(success *string) *GetEntityGetStringResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetStringResult) SetSuccess(success *string) *GetEntityGetStringResult {
  g.Success = success
  return g
}

func (p *GetEntityGetStringResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetStringResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetStringResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getString_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetStringResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetStringResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetStringResult({Success:%s})", successVal)
}

type GetEntityGetBinaryArgs struct {
  thrift.IRequest
}

func NewGetEntityGetBinaryArgs() *GetEntityGetBinaryArgs {
  return &GetEntityGetBinaryArgs{}
}

type GetEntityGetBinaryArgsBuilder struct {
  obj *GetEntityGetBinaryArgs
}

func NewGetEntityGetBinaryArgsBuilder() *GetEntityGetBinaryArgsBuilder{
  return &GetEntityGetBinaryArgsBuilder{
    obj: NewGetEntityGetBinaryArgs(),
  }
}

func (p GetEntityGetBinaryArgsBuilder) Emit() *GetEntityGetBinaryArgs{
  return &GetEntityGetBinaryArgs{
  }
}

func (p *GetEntityGetBinaryArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetBinaryArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getBinary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetBinaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetBinaryArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetBinaryResult struct {
  thrift.IResponse
  Success []byte `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetBinaryResult() *GetEntityGetBinaryResult {
  return &GetEntityGetBinaryResult{}
}

var GetEntityGetBinaryResult_Success_DEFAULT []byte

func (p *GetEntityGetBinaryResult) GetSuccess() []byte {
  return p.Success
}
func (p *GetEntityGetBinaryResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetBinaryResultBuilder struct {
  obj *GetEntityGetBinaryResult
}

func NewGetEntityGetBinaryResultBuilder() *GetEntityGetBinaryResultBuilder{
  return &GetEntityGetBinaryResultBuilder{
    obj: NewGetEntityGetBinaryResult(),
  }
}

func (p GetEntityGetBinaryResultBuilder) Emit() *GetEntityGetBinaryResult{
  return &GetEntityGetBinaryResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetBinaryResultBuilder) Success(success []byte) *GetEntityGetBinaryResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetBinaryResult) SetSuccess(success []byte) *GetEntityGetBinaryResult {
  g.Success = success
  return g
}

func (p *GetEntityGetBinaryResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetBinaryResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = v
  }
  return nil
}

func (p *GetEntityGetBinaryResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getBinary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetBinaryResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetBinaryResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("GetEntityGetBinaryResult({Success:%s})", successVal)
}

type GetEntityGetMapArgs struct {
  thrift.IRequest
}

func NewGetEntityGetMapArgs() *GetEntityGetMapArgs {
  return &GetEntityGetMapArgs{}
}

type GetEntityGetMapArgsBuilder struct {
  obj *GetEntityGetMapArgs
}

func NewGetEntityGetMapArgsBuilder() *GetEntityGetMapArgsBuilder{
  return &GetEntityGetMapArgsBuilder{
    obj: NewGetEntityGetMapArgs(),
  }
}

func (p GetEntityGetMapArgsBuilder) Emit() *GetEntityGetMapArgs{
  return &GetEntityGetMapArgs{
  }
}

func (p *GetEntityGetMapArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetMapArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getMap_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetMapArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetMapArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetMapResult struct {
  thrift.IResponse
  Success map[string]string `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetMapResult() *GetEntityGetMapResult {
  return &GetEntityGetMapResult{}
}

var GetEntityGetMapResult_Success_DEFAULT map[string]string

func (p *GetEntityGetMapResult) GetSuccess() map[string]string {
  return p.Success
}
func (p *GetEntityGetMapResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetMapResultBuilder struct {
  obj *GetEntityGetMapResult
}

func NewGetEntityGetMapResultBuilder() *GetEntityGetMapResultBuilder{
  return &GetEntityGetMapResultBuilder{
    obj: NewGetEntityGetMapResult(),
  }
}

func (p GetEntityGetMapResultBuilder) Emit() *GetEntityGetMapResult{
  return &GetEntityGetMapResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetMapResultBuilder) Success(success map[string]string) *GetEntityGetMapResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetMapResult) SetSuccess(success map[string]string) *GetEntityGetMapResult {
  g.Success = success
  return g
}

func (p *GetEntityGetMapResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetMapResult)  ReadField0(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
    var _key2 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key2 = v
    }
    var _val3 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val3 = v
    }
    p.Success[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetEntityGetMapResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getMap_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetMapResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetMapResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("GetEntityGetMapResult({Success:%s})", successVal)
}

type GetEntityGetSetArgs struct {
  thrift.IRequest
}

func NewGetEntityGetSetArgs() *GetEntityGetSetArgs {
  return &GetEntityGetSetArgs{}
}

type GetEntityGetSetArgsBuilder struct {
  obj *GetEntityGetSetArgs
}

func NewGetEntityGetSetArgsBuilder() *GetEntityGetSetArgsBuilder{
  return &GetEntityGetSetArgsBuilder{
    obj: NewGetEntityGetSetArgs(),
  }
}

func (p GetEntityGetSetArgsBuilder) Emit() *GetEntityGetSetArgs{
  return &GetEntityGetSetArgs{
  }
}

func (p *GetEntityGetSetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetSetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetSetArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetSetResult struct {
  thrift.IResponse
  Success []string `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetSetResult() *GetEntityGetSetResult {
  return &GetEntityGetSetResult{}
}

var GetEntityGetSetResult_Success_DEFAULT []string

func (p *GetEntityGetSetResult) GetSuccess() []string {
  return p.Success
}
func (p *GetEntityGetSetResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetSetResultBuilder struct {
  obj *GetEntityGetSetResult
}

func NewGetEntityGetSetResultBuilder() *GetEntityGetSetResultBuilder{
  return &GetEntityGetSetResultBuilder{
    obj: NewGetEntityGetSetResult(),
  }
}

func (p GetEntityGetSetResultBuilder) Emit() *GetEntityGetSetResult{
  return &GetEntityGetSetResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetSetResultBuilder) Success(success []string) *GetEntityGetSetResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetSetResult) SetSuccess(success []string) *GetEntityGetSetResult {
  g.Success = success
  return g
}

func (p *GetEntityGetSetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetSetResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
    var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem4 = v
    }
    p.Success = append(p.Success, _elem4)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetEntityGetSetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetSetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.Success))
    for _, v := range p.Success {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetSetResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("GetEntityGetSetResult({Success:%s})", successVal)
}

type GetEntityGetListArgs struct {
  thrift.IRequest
}

func NewGetEntityGetListArgs() *GetEntityGetListArgs {
  return &GetEntityGetListArgs{}
}

type GetEntityGetListArgsBuilder struct {
  obj *GetEntityGetListArgs
}

func NewGetEntityGetListArgsBuilder() *GetEntityGetListArgsBuilder{
  return &GetEntityGetListArgsBuilder{
    obj: NewGetEntityGetListArgs(),
  }
}

func (p GetEntityGetListArgsBuilder) Emit() *GetEntityGetListArgs{
  return &GetEntityGetListArgs{
  }
}

func (p *GetEntityGetListArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetListArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetListArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetEntityGetListArgs({})")
}

// Attributes:
//  - Success
type GetEntityGetListResult struct {
  thrift.IResponse
  Success []string `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetListResult() *GetEntityGetListResult {
  return &GetEntityGetListResult{}
}

var GetEntityGetListResult_Success_DEFAULT []string

func (p *GetEntityGetListResult) GetSuccess() []string {
  return p.Success
}
func (p *GetEntityGetListResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetListResultBuilder struct {
  obj *GetEntityGetListResult
}

func NewGetEntityGetListResultBuilder() *GetEntityGetListResultBuilder{
  return &GetEntityGetListResultBuilder{
    obj: NewGetEntityGetListResult(),
  }
}

func (p GetEntityGetListResultBuilder) Emit() *GetEntityGetListResult{
  return &GetEntityGetListResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetListResultBuilder) Success(success []string) *GetEntityGetListResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetListResult) SetSuccess(success []string) *GetEntityGetListResult {
  g.Success = success
  return g
}

func (p *GetEntityGetListResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetListResult)  ReadField0(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem5 = v
    }
    p.Success = append(p.Success, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetEntityGetListResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetListResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetListResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("GetEntityGetListResult({Success:%s})", successVal)
}

// Attributes:
//  - NumPos
//  - NumNeg1
//  - NumNeg2
type GetEntityGetLegacyStuffArgs struct {
  thrift.IRequest
  NumPos int64
  NumNeg1 int64
  NumNeg2 int64
}

func NewGetEntityGetLegacyStuffArgs() *GetEntityGetLegacyStuffArgs {
  return &GetEntityGetLegacyStuffArgs{}
}


func (p *GetEntityGetLegacyStuffArgs) GetNumPos() int64 {
  return p.NumPos
}

func (p *GetEntityGetLegacyStuffArgs) GetNumNeg1() int64 {
  return p.NumNeg1
}

func (p *GetEntityGetLegacyStuffArgs) GetNumNeg2() int64 {
  return p.NumNeg2
}
type GetEntityGetLegacyStuffArgsBuilder struct {
  obj *GetEntityGetLegacyStuffArgs
}

func NewGetEntityGetLegacyStuffArgsBuilder() *GetEntityGetLegacyStuffArgsBuilder{
  return &GetEntityGetLegacyStuffArgsBuilder{
    obj: NewGetEntityGetLegacyStuffArgs(),
  }
}

func (p GetEntityGetLegacyStuffArgsBuilder) Emit() *GetEntityGetLegacyStuffArgs{
  return &GetEntityGetLegacyStuffArgs{
    NumPos: p.obj.NumPos,
    NumNeg1: p.obj.NumNeg1,
    NumNeg2: p.obj.NumNeg2,
  }
}

func (g *GetEntityGetLegacyStuffArgsBuilder) NumPos(numPos int64) *GetEntityGetLegacyStuffArgsBuilder {
  g.obj.NumPos = numPos
  return g
}

func (g *GetEntityGetLegacyStuffArgsBuilder) NumNeg1(numNeg1 int64) *GetEntityGetLegacyStuffArgsBuilder {
  g.obj.NumNeg1 = numNeg1
  return g
}

func (g *GetEntityGetLegacyStuffArgsBuilder) NumNeg2(numNeg2 int64) *GetEntityGetLegacyStuffArgsBuilder {
  g.obj.NumNeg2 = numNeg2
  return g
}

func (g *GetEntityGetLegacyStuffArgs) SetNumPos(numPos int64) *GetEntityGetLegacyStuffArgs {
  g.NumPos = numPos
  return g
}

func (g *GetEntityGetLegacyStuffArgs) SetNumNeg1(numNeg1 int64) *GetEntityGetLegacyStuffArgs {
  g.NumNeg1 = numNeg1
  return g
}

func (g *GetEntityGetLegacyStuffArgs) SetNumNeg2(numNeg2 int64) *GetEntityGetLegacyStuffArgs {
  g.NumNeg2 = numNeg2
  return g
}

func (p *GetEntityGetLegacyStuffArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetLegacyStuffArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NumPos = v
  }
  return nil
}

func (p *GetEntityGetLegacyStuffArgs)  ReadField_1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field -1: ", err)
  } else {
    p.NumNeg1 = v
  }
  return nil
}

func (p *GetEntityGetLegacyStuffArgs)  ReadField_2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field -2: ", err)
  } else {
    p.NumNeg2 = v
  }
  return nil
}

func (p *GetEntityGetLegacyStuffArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getLegacyStuff_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField_2(oprot); err != nil { return err }
  if err := p.writeField_1(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetLegacyStuffArgs) writeField_2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("numNeg2", thrift.I64, -2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:numNeg2: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNeg2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNeg2 (-2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -2:numNeg2: ", p), err) }
  return err
}

func (p *GetEntityGetLegacyStuffArgs) writeField_1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("numNeg1", thrift.I64, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:numNeg1: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNeg1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNeg1 (-1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:numNeg1: ", p), err) }
  return err
}

func (p *GetEntityGetLegacyStuffArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("numPos", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numPos: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numPos (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numPos: ", p), err) }
  return err
}

func (p *GetEntityGetLegacyStuffArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  numNeg2Val := fmt.Sprintf("%v", p.NumNeg2)
  numNeg1Val := fmt.Sprintf("%v", p.NumNeg1)
  numPosVal := fmt.Sprintf("%v", p.NumPos)
  return fmt.Sprintf("GetEntityGetLegacyStuffArgs({NumNeg2:%s NumNeg1:%s NumPos:%s})", numNeg2Val, numNeg1Val, numPosVal)
}

// Attributes:
//  - Success
type GetEntityGetLegacyStuffResult struct {
  thrift.IResponse
  Success *int32 `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGetEntityGetLegacyStuffResult() *GetEntityGetLegacyStuffResult {
  return &GetEntityGetLegacyStuffResult{}
}

var GetEntityGetLegacyStuffResult_Success_DEFAULT int32
func (p *GetEntityGetLegacyStuffResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return GetEntityGetLegacyStuffResult_Success_DEFAULT
  }
  return *p.Success
}
func (p *GetEntityGetLegacyStuffResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GetEntityGetLegacyStuffResultBuilder struct {
  obj *GetEntityGetLegacyStuffResult
}

func NewGetEntityGetLegacyStuffResultBuilder() *GetEntityGetLegacyStuffResultBuilder{
  return &GetEntityGetLegacyStuffResultBuilder{
    obj: NewGetEntityGetLegacyStuffResult(),
  }
}

func (p GetEntityGetLegacyStuffResultBuilder) Emit() *GetEntityGetLegacyStuffResult{
  return &GetEntityGetLegacyStuffResult{
    Success: p.obj.Success,
  }
}

func (g *GetEntityGetLegacyStuffResultBuilder) Success(success *int32) *GetEntityGetLegacyStuffResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GetEntityGetLegacyStuffResult) SetSuccess(success *int32) *GetEntityGetLegacyStuffResult {
  g.Success = success
  return g
}

func (p *GetEntityGetLegacyStuffResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEntityGetLegacyStuffResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
  } else {
    p.Success = &v
  }
  return nil
}

func (p *GetEntityGetLegacyStuffResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getLegacyStuff_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEntityGetLegacyStuffResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetEntityGetLegacyStuffResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", *p.Success)
  }
  return fmt.Sprintf("GetEntityGetLegacyStuffResult({Success:%s})", successVal)
}


