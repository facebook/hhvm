[("\\CT1",
  (Shallow_decl_defs.Typedef
     { Typing_defs.td_module = None; td_pos = [4:11-14];
       td_tparams =
       [{ Typing_defs_core.tp_variance = Covariant;
          tp_name = ([4:16-18], "T1");
          tp_constraints =
          [(Constraint_as, (Rhint ([4:22-30]), (Tprim Tarraykey)))];
          tp_reified = Erased; tp_user_attributes = [] };
         { Typing_defs_core.tp_variance = Contravariant;
           tp_name = ([4:33-35], "T2"); tp_constraints = [];
           tp_reified = Erased; tp_user_attributes = [] };
         { Typing_defs_core.tp_variance = Invariant;
           tp_name = ([4:37-38], "T"); tp_constraints = [];
           tp_reified = Erased; tp_user_attributes = [] }
         ];
       td_as_constraint = (Some (Rhint ([4:43-50]), Tnonnull));
       td_super_constraint = None;
       td_type_assignment =
       (Typing_defs.CaseType (
          ((Rhint ([4:53-63]),
            (Tapply (([4:53-59], "\\HH\\keyset"),
               [(Rhint ([4:60-62]), (Tgeneric "T1"))]))),
           []),
          [((Rhint ([4:66-83]),
             (Tfun
                { ft_tparams = []; ft_where_constraints = [];
                  ft_params =
                  [{ fp_pos = [4:76-78]; fp_name = None;
                     fp_type = (Rhint ([4:76-78]), (Tgeneric "T2"));
                     fp_flags =
                     { Typing_defs_flags.FunParam.accept_disposable = false;
                       inout = false; is_optional = false; readonly = false;
                       ignore_readonly_error = false; splat = false;
                       named = false };
                     fp_def_value = None }
                    ];
                  ft_implicit_params =
                  { capability = (CapDefaults [4:66-83]) };
                  ft_ret = (Rhint ([4:81-82]), (Tgeneric "T"));
                  ft_flags =
                  { Typing_defs_flags.Fun.return_disposable = false;
                    async = false; generator = false; fun_kind = FSync;
                    is_function_pointer = false; returns_readonly = false;
                    readonly_this = false; support_dynamic_type = false;
                    is_memoized = false; variadic = false };
                  ft_cross_package = None; ft_instantiated = true })),
            [])]
          ));
       td_is_ctx = false; td_attributes = []; td_internal = false;
       td_docs_url = None; td_package = None }));
  ("\\CT2",
   (Shallow_decl_defs.Typedef
      { Typing_defs.td_module = None; td_pos = [6:11-14]; td_tparams = [];
        td_as_constraint =
        (Some (Rhint ([6:18-31]),
               (Tintersection
                  [(Rhint ([6:18-26]), (Tprim Tarraykey));
                    (Rhint ([6:28-31]), (Tprim Tnum))])));
        td_super_constraint = None;
        td_type_assignment =
        (Typing_defs.CaseType (((Rhint ([6:34-37]), (Tprim Tint)), []), []));
        td_is_ctx = false; td_attributes = []; td_internal = false;
        td_docs_url = None; td_package = None }));
  ("\\CT3",
   (Shallow_decl_defs.Typedef
      { Typing_defs.td_module = None; td_pos = [8:11-14]; td_tparams = [];
        td_as_constraint = None; td_super_constraint = None;
        td_type_assignment =
        (Typing_defs.CaseType (((Rhint ([8:17-23]), (Tprim Tstring)), []),
           [((Rhint ([8:26-30]), (Tprim Tbool)), [])]));
        td_is_ctx = false; td_attributes = []; td_internal = false;
        td_docs_url = None; td_package = None }))
  ]
