[(Class
    { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mpartial;
      c_final = false; c_is_xhp = false; c_has_xhp_keyword = false;
      c_kind = Cnormal; c_name = ([3:7-8], "\\A"); c_tparams = [];
      c_extends = []; c_uses = []; c_use_as_alias = [];
      c_insteadof_alias = []; c_xhp_attr_uses = []; c_xhp_category = None;
      c_reqs = []; c_implements = []; c_where_constraints = [];
      c_consts = []; c_typeconsts = [];
      c_vars =
      [{ cv_final = false; cv_xhp_attr = None; cv_abstract = false;
         cv_visibility = Public; cv_type = ((int), None);
         cv_id = ([4:38-40], "x"); cv_expr = None; cv_user_attributes = [];
         cv_doc_comment = None; cv_is_promoted_variadic = false;
         cv_is_static = false; cv_span = [4:38-44] }
        ];
      c_methods =
      [{ m_span = [4:3-48]; m_annotation = (); m_final = false;
         m_abstract = false; m_static = false; m_visibility = Public;
         m_name = ([4:19-30], "__construct"); m_tparams = [];
         m_where_constraints = []; m_variadic = FVnonVariadic;
         m_params =
         [{ param_annotation = ([4:38-40], int);
            param_type_hint = ((int), None); param_is_variadic = false;
            param_pos = [4:38-40]; param_name = "$x";
            param_expr = (Some (([4:43-44], int), (Int "3")));
            param_callconv = None; param_user_attributes = [];
            param_visibility = (Some Public) }
           ];
         m_cap = ((mixed), None); m_unsafe_cap = ((mixed), None);
         m_body =
         { fb_ast =
           [([4:38-40],
             (Expr
                (([4:38-40], int),
                 (Binop ((Eq None),
                    (([4:38-40], int),
                     (Obj_get ((([4:38-40], this), This),
                        (([4:38-40], int), (Id ([4:38-40], "x"))),
                        OG_nullthrows))),
                    (([4:38-40], int), (Lvar ([4:38-40], $x))))))));
             ([Pos.none], Noop)];
           fb_annotation = () };
         m_fun_kind = FSync; m_user_attributes = [];
         m_ret = ((void), (Some ([4:19-30], (Hprim Tvoid))));
         m_external = false; m_doc_comment = None }
        ];
      c_attributes = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
        ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
        ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
        ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_enum = None;
      c_pu_enums = []; c_doc_comment = None; c_emit_id = None });
  (Fun
     { f_span = [7:1-30]; f_annotation = (); f_mode = Mpartial;
       f_ret = ((void), (Some ([7:23-27], (Hprim Tvoid))));
       f_name = ([7:10-13], "\\foo"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic;
       f_params =
       [{ param_annotation = ([7:18-20], int);
          param_type_hint = ((int), (Some ([7:14-17], (Hprim Tint))));
          param_is_variadic = false; param_pos = [7:18-20];
          param_name = "$_"; param_expr = None; param_callconv = None;
          param_user_attributes = []; param_visibility = None }
         ];
       f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
       f_body = { fb_ast = [([Pos.none], Noop)]; fb_annotation = () };
       f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
       f_external = false;
       f_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
         ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
         ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       f_doc_comment = None; f_static = false });
  (Fun
     { f_span = [9:1-13:2]; f_annotation = (); f_mode = Mpartial;
       f_ret = ((void), (Some ([9:17-21], (Hprim Tvoid))));
       f_name = ([9:10-13], "\\bar"); f_tparams = [];
       f_where_constraints = []; f_variadic = FVnonVariadic; f_params = [];
       f_cap = ((nothing), None); f_unsafe_cap = ((mixed), None);
       f_body =
       { fb_ast =
         [([10:3-19],
           (Expr
              (([10:3-18], A),
               (Binop ((Eq None), (([10:3-7], A), (Lvar ([10:3-7], $obj))),
                  (([10:10-18], A),
                   (New ((([10:14-15], A), (CI ([10:14-15], "\\A"))),
                      [], [(([10:16-17], int), (Int "1"))], None,
                      ([10:14-15], (function(int $x=_): void)))))
                  )))));
           ([11:3-16],
            (Expr
               (([11:3-15], int),
                (Binop ((Eq None), (([11:3-5], int), (Lvar ([11:3-5], $x))),
                   (([11:8-15], int),
                    (Obj_get ((([11:8-12], A), (Lvar ([11:8-12], $obj))),
                       (([11:14-15], int), (Id ([11:14-15], "x"))),
                       OG_nullthrows)))
                   )))));
           ([12:3-11],
            (Expr
               (([12:3-10], void),
                (Call (
                   (([12:3-6], (function(int $_): void)),
                    (Id ([12:3-6], "\\foo"))),
                   [], [(([12:7-9], int), (Lvar ([12:7-9], $x)))], None)))))
           ];
         fb_annotation = () };
       f_fun_kind = FSync; f_user_attributes = []; f_file_attributes = [];
       f_external = false;
       f_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>;
         ns_record_def_uses = <opaque>; ns_fun_uses = <opaque>;
         ns_const_uses = <opaque>; ns_name = None; ns_auto_ns_map = [];
         ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       f_doc_comment = None; f_static = false })
  ]
