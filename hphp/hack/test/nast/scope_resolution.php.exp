[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([4:10-13], "\\bar");
      fd_fun =
      { f_span = [4:1-6:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_tparams = []; f_ret = ((), (Some ([4:17-23], (Hprim Tstring)))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([5:3-18], (Return (Some ((), [5:10-17], (String "class")))))] }; 
        f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([4:10-13], "__SupportDynamicType"); ua_params = [] }]; 
        f_external = false; f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
      fd_package = None });
  (Class
     { c_span = [7:1-17:2]; c_annotation = (); c_mode = Mstrict; c_final = true; 
       c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
       c_name = ([7:13-16], "\\Foo"); c_tparams = []; c_extends = []; 
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = []; 
       c_implements = [];
       c_consts =
       [{ cc_user_attributes = []; cc_type = (Some ([8:9-15], (Hprim Tstring))); 
          cc_id = ([8:16-19], "bar"); cc_kind = (CCConcrete ((), [8:22-27], (String "baz"))); 
          cc_span = [8:3-28]; cc_doc_comment = None };
         { cc_user_attributes = []; cc_type = (Some ([9:9-21], (Happly (([9:9-12], "\\HH\\vec"), [([9:13-20], Hnothing)])))); 
           cc_id = ([9:22-27], "class"); cc_kind = (CCConcrete ((), [9:30-35], (ValCollection (([9:30-33], Vec), None, [])))); 
           cc_span = [9:3-36]; cc_doc_comment = None }
         ];
       c_typeconsts = [];
       c_vars =
       [{ cv_final = false; cv_xhp_attr = None; cv_abstract = false; 
          cv_readonly = false; cv_visibility = Public;
          cv_type =
          ((),
           (Some ([10:17-34],
                  (Happly (([10:17-34], "\\HH\\supportdyn"),
                     [([10:17-34],
                       (Hfun
                          { hf_is_readonly = None; hf_tparams = []; hf_param_tys = []; 
                            hf_param_info = []; hf_variadic_ty = None; 
                            hf_ctxs = None; hf_return_ty = ([10:30-33], (Hlike ([10:30-33], (Hprim Tint)))); 
                            hf_is_readonly_return = None }))
                       ]
                     )))));
          cv_id = ([10:35-37], "_"); cv_expr = (Some ((), [10:40-53], (FunctionPointer ((FP_class_const (((), [10:40-44], CIself), ([10:46-51], "class"))), [])))); 
          cv_user_attributes = []; cv_doc_comment = None; cv_is_static = true; 
          cv_span = [10:35-53] }
         ];
       c_methods =
       [{ m_span = [11:3-13:4]; m_annotation = (); m_final = false; m_abstract = false; 
          m_static = true; m_readonly_this = false; m_visibility = Public; 
          m_name = ([11:26-29], "bar"); m_tparams = []; m_where_constraints = []; 
          m_params = []; m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([12:5-20], (Return (Some ((), [12:12-19], (Float "3.14159")))))] }; 
          m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
          m_ret = ((), (Some ([11:33-38], (Hprim Tfloat)))); m_external = false; 
          m_doc_comment = None };
         { m_span = [14:3-16:4]; m_annotation = (); m_final = false; 
           m_abstract = false; m_static = true; m_readonly_this = false; 
           m_visibility = Public; m_name = ([14:26-31], "class"); m_tparams = []; 
           m_where_constraints = []; m_params = []; m_ctxs = None; m_unsafe_ctxs = None; 
           m_body = { fb_ast = [([15:5-15], (Return (Some ((), [15:12-14], (Int "42")))))] }; 
           m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
           m_ret = ((), (Some ([14:35-38], (Hprim Tint)))); m_external = false; 
           m_doc_comment = None }
         ];
       c_xhp_children = []; c_xhp_attrs = [];
       c_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       c_user_attributes = [{ ua_name = ([7:13-16], "__SupportDynamicType"); ua_params = [] }]; 
       c_file_attributes = []; c_docs_url = None; c_enum = None; c_doc_comment = None; 
       c_emit_id = None; c_internal = false; c_module = None; c_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([20:10-21], "\\class_const");
       fd_fun =
       { f_span = [20:1-104:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), (Some ([20:35-39], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (); param_type_hint = ((), (Some ([20:22-29], Hdynamic))); 
            param_pos = [20:30-32]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([21:3-12], (Expr ((), [21:3-11], (Class_const (((), [21:3-6], (CI ([21:3-6], "\\Foo"))), ([21:8-11], "bar"))))));
             ([22:3-11], (Expr ((), [22:3-10], (Class_const (((), [22:3-5], (CIexpr ((), [22:3-5], (Lvar ([22:3-5], $x))))), ([22:7-10], "bar"))))));
             ([23:3-14],
              (Expr ((), [23:3-13], (Call { func = ((), [23:3-11], (Class_const (((), [23:3-6], (CI ([23:3-6], "\\Foo"))), ([23:8-11], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([24:3-13],
              (Expr
                 ((), [24:3-12],
                  (Call { func = ((), [24:3-10], (Class_const (((), [24:3-5], (CIexpr ((), [24:3-5], (Lvar ([24:3-5], $x))))), ([24:7-10], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([26:3-14], (Expr ((), [26:4-12], (Class_const (((), [26:4-7], (CI ([26:4-7], "\\Foo"))), ([26:9-12], "bar"))))));
             ([27:3-15], (Expr ((), [27:5-12], (Class_const (((), [27:5-7], (CIexpr ((), [27:5-7], (Lvar ([27:5-7], $x))))), ([27:9-12], "bar"))))));
             ([28:3-20],
              (Expr ((), [28:3-19], (Call { func = ((), [28:6-14], (Class_const (((), [28:6-9], (CI ([28:6-9], "\\Foo"))), ([28:11-14], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([29:3-21],
              (Expr
                 ((), [29:3-20],
                  (Call { func = ((), [29:7-14], (Class_const (((), [29:7-9], (CIexpr ((), [29:7-9], (Lvar ([29:7-9], $x))))), ([29:11-14], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([31:3-16], (Expr ((), [31:3-15], (Class_const (((), [31:3-6], (CI ([31:3-6], "\\Foo"))), ([31:8-15], "bar\\baz"))))));
             ([32:3-18], (Expr ((), [32:4-16], (Class_const (((), [32:4-7], (CI ([32:4-7], "\\Foo"))), ([32:9-16], "bar\\baz"))))));
             ([33:3-18],
              (Expr ((), [33:3-17], (Call { func = ((), [33:3-15], (Class_const (((), [33:3-6], (CI ([33:3-6], "\\Foo"))), ([33:8-15], "bar\\baz")))); targs = []; args = []; unpacked_arg = None }))));
             ([34:3-20],
              (Expr ((), [34:3-19], (Call { func = ((), [34:4-16], (Class_const (((), [34:4-7], (CI ([34:4-7], "\\Foo"))), ([34:9-16], "bar\\baz")))); targs = []; args = []; unpacked_arg = None }))));
             ([36:3-14], (Expr ((), [36:3-13], (Class_const (((), [36:3-6], (CI ([36:3-6], "\\Foo"))), ([36:9-12], "bar"))))));
             ([37:3-16], (Expr ((), [37:4-14], (Class_const (((), [37:4-7], (CI ([37:4-7], "\\Foo"))), ([37:10-13], "bar"))))));
             ([38:3-16],
              (Expr ((), [38:3-15], (Call { func = ((), [38:3-13], (Class_const (((), [38:3-6], (CI ([38:3-6], "\\Foo"))), ([38:9-12], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([39:3-18],
              (Expr ((), [39:3-17], (Call { func = ((), [39:4-14], (Class_const (((), [39:4-7], (CI ([39:4-7], "\\Foo"))), ([39:10-13], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([41:3-16], (Expr ((), [41:3-15], (Class_const (((), [41:3-6], (CI ([41:3-6], "\\Foo"))), ([41:10-13], "bar"))))));
             ([42:3-20], (Expr ((), [42:4-18], (Class_const (((), [42:4-7], (CI ([42:4-7], "\\Foo"))), ([42:12-15], "bar"))))));
             ([43:3-22],
              (Expr ((), [43:3-21], (Call { func = ((), [43:3-19], (Class_const (((), [43:3-6], (CI ([43:3-6], "\\Foo"))), ([43:12-15], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([44:3-26],
              (Expr ((), [44:3-25], (Call { func = ((), [44:4-22], (Class_const (((), [44:4-7], (CI ([44:4-7], "\\Foo"))), ([44:14-17], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([46:3-18], (Expr ((), [46:3-17], (Class_const (((), [46:3-6], (CI ([46:3-6], "\\Foo"))), ([46:9-16], "bar\\baz"))))));
             ([47:3-20], (Expr ((), [47:4-18], (Class_const (((), [47:4-7], (CI ([47:4-7], "\\Foo"))), ([47:10-17], "bar\\baz"))))));
             ([48:3-20],
              (Expr ((), [48:3-19], (Call { func = ((), [48:3-17], (Class_const (((), [48:3-6], (CI ([48:3-6], "\\Foo"))), ([48:9-16], "bar\\baz")))); targs = []; args = []; unpacked_arg = None }))));
             ([49:3-22],
              (Expr ((), [49:3-21], (Call { func = ((), [49:4-18], (Class_const (((), [49:4-7], (CI ([49:4-7], "\\Foo"))), ([49:10-17], "bar\\baz")))); targs = []; args = []; unpacked_arg = None }))));
             ([51:3-14], (Expr ((), [51:3-13], (Class_const (((), [51:3-6], (CI ([51:3-6], "\\Foo"))), ([51:8-13], "class"))))));
             ([52:3-16], (Expr ((), [52:4-14], (Class_const (((), [52:4-7], (CI ([52:4-7], "\\Foo"))), ([52:9-14], "class"))))));
             ([53:3-16],
              (Expr ((), [53:3-15], (Call { func = ((), [53:3-13], (Class_const (((), [53:3-6], (CI ([53:3-6], "\\Foo"))), ([53:8-13], "class")))); targs = []; args = []; unpacked_arg = None }))));
             ([54:3-18],
              (Expr ((), [54:3-17], (Call { func = ((), [54:4-14], (Class_const (((), [54:4-7], (CI ([54:4-7], "\\Foo"))), ([54:9-14], "class")))); targs = []; args = []; unpacked_arg = None }))));
             ([56:3-13], (Expr ((), [56:3-12], (Class_const (((), [56:3-6], (CI ([56:3-6], "\\Foo"))), ([56:9-11], ""))))));
             ([57:3-15], (Expr ((), [57:4-13], (Class_const (((), [57:4-7], (CI ([57:4-7], "\\Foo"))), ([57:10-12], ""))))));
             ([58:3-15],
              (Expr ((), [58:3-14], (Call { func = ((), [58:3-12], (Class_const (((), [58:3-6], (CI ([58:3-6], "\\Foo"))), ([58:9-11], "")))); targs = []; args = []; unpacked_arg = None }))));
             ([59:3-17],
              (Expr ((), [59:3-16], (Call { func = ((), [59:4-13], (Class_const (((), [59:4-7], (CI ([59:4-7], "\\Foo"))), ([59:10-12], "")))); targs = []; args = []; unpacked_arg = None }))));
             ([61:3-16], (Expr ((), [61:3-15], (Class_const (((), [61:3-6], (CI ([61:3-6], "\\Foo"))), ([61:9-14], "bar"))))));
             ([62:3-18], (Expr ((), [62:4-16], (Class_const (((), [62:4-7], (CI ([62:4-7], "\\Foo"))), ([62:10-15], "bar"))))));
             ([63:3-18],
              (Expr ((), [63:3-17], (Call { func = ((), [63:3-15], (Class_const (((), [63:3-6], (CI ([63:3-6], "\\Foo"))), ([63:9-14], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([64:3-20],
              (Expr ((), [64:3-19], (Call { func = ((), [64:4-16], (Class_const (((), [64:4-7], (CI ([64:4-7], "\\Foo"))), ([64:10-15], "bar")))); targs = []; args = []; unpacked_arg = None }))));
             ([66:3-21], (Expr ((), [66:3-20], (Class_const (((), [66:3-6], (CI ([66:3-6], "\\Foo"))), ([66:9-19], "bar\\baz"))))));
             ([67:3-23], (Expr ((), [67:4-21], (Class_const (((), [67:4-7], (CI ([67:4-7], "\\Foo"))), ([67:10-20], "bar\\baz"))))));
             ([68:3-23],
              (Expr ((), [68:3-22], (Call { func = ((), [68:3-20], (Class_const (((), [68:3-6], (CI ([68:3-6], "\\Foo"))), ([68:9-19], "bar\\baz")))); targs = []; args = []; unpacked_arg = None }))));
             ([69:3-25],
              (Expr ((), [69:3-24], (Call { func = ((), [69:4-21], (Class_const (((), [69:4-7], (CI ([69:4-7], "\\Foo"))), ([69:10-20], "bar\\baz")))); targs = []; args = []; unpacked_arg = None }))));
             ([71:3-18], (Expr ((), [71:3-17], (Class_const (((), [71:3-6], (CI ([71:3-6], "\\Foo"))), ([71:9-16], "class"))))));
             ([72:3-20], (Expr ((), [72:4-18], (Class_const (((), [72:4-7], (CI ([72:4-7], "\\Foo"))), ([72:10-17], "class"))))));
             ([73:3-20],
              (Expr ((), [73:3-19], (Call { func = ((), [73:3-17], (Class_const (((), [73:3-6], (CI ([73:3-6], "\\Foo"))), ([73:9-16], "class")))); targs = []; args = []; unpacked_arg = None }))));
             ([74:3-22],
              (Expr ((), [74:3-21], (Call { func = ((), [74:4-18], (Class_const (((), [74:4-7], (CI ([74:4-7], "\\Foo"))), ([74:10-17], "class")))); targs = []; args = []; unpacked_arg = None }))));
             ([76:3-15], (Expr ((), [76:3-14], (Class_const (((), [76:3-6], (CI ([76:3-6], "\\Foo"))), ([76:9-13], "$x"))))));
             ([77:3-17], (Expr ((), [77:4-15], (Class_const (((), [77:4-7], (CI ([77:4-7], "\\Foo"))), ([77:10-14], "$x"))))));
             ([78:3-17],
              (Expr ((), [78:3-16], (Call { func = ((), [78:3-14], (Class_const (((), [78:3-6], (CI ([78:3-6], "\\Foo"))), ([78:9-13], "$x")))); targs = []; args = []; unpacked_arg = None }))));
             ([79:3-19],
              (Expr ((), [79:3-18], (Call { func = ((), [79:4-15], (Class_const (((), [79:4-7], (CI ([79:4-7], "\\Foo"))), ([79:10-14], "$x")))); targs = []; args = []; unpacked_arg = None }))));
             ([81:3-16], (Expr ((), [81:3-15], (Class_const (((), [81:3-6], (CI ([81:3-6], "\\Foo"))), ([81:9-14], "$x"))))));
             ([82:3-18], (Expr ((), [82:4-16], (Class_const (((), [82:4-7], (CI ([82:4-7], "\\Foo"))), ([82:10-15], "$x"))))));
             ([83:3-18],
              (Expr ((), [83:3-17], (Call { func = ((), [83:3-15], (Class_const (((), [83:3-6], (CI ([83:3-6], "\\Foo"))), ([83:9-14], "$x")))); targs = []; args = []; unpacked_arg = None }))));
             ([84:3-20],
              (Expr ((), [84:3-19], (Call { func = ((), [84:4-16], (Class_const (((), [84:4-7], (CI ([84:4-7], "\\Foo"))), ([84:10-15], "$x")))); targs = []; args = []; unpacked_arg = None }))));
             ([86:3-15], (Expr ((), [86:3-14], (Class_const (((), [86:3-6], (CI ([86:3-6], "\\Foo"))), ([86:9-13], "$_"))))));
             ([87:3-17], (Expr ((), [87:4-15], (Class_const (((), [87:4-7], (CI ([87:4-7], "\\Foo"))), ([87:10-14], "$_"))))));
             ([88:3-17],
              (Expr ((), [88:3-16], (Call { func = ((), [88:3-14], (Class_const (((), [88:3-6], (CI ([88:3-6], "\\Foo"))), ([88:9-13], "$_")))); targs = []; args = []; unpacked_arg = None }))));
             ([89:3-19],
              (Expr ((), [89:3-18], (Call { func = ((), [89:4-15], (Class_const (((), [89:4-7], (CI ([89:4-7], "\\Foo"))), ([89:10-14], "$_")))); targs = []; args = []; unpacked_arg = None }))));
             ([91:3-16], (Expr ((), [91:3-15], (Class_const (((), [91:3-6], (CI ([91:3-6], "\\Foo"))), ([91:9-14], "$_"))))));
             ([92:3-18], (Expr ((), [92:4-16], (Class_const (((), [92:4-7], (CI ([92:4-7], "\\Foo"))), ([92:10-15], "$_"))))));
             ([93:3-18],
              (Expr ((), [93:3-17], (Call { func = ((), [93:3-15], (Class_const (((), [93:3-6], (CI ([93:3-6], "\\Foo"))), ([93:9-14], "$_")))); targs = []; args = []; unpacked_arg = None }))));
             ([94:3-20],
              (Expr ((), [94:3-19], (Call { func = ((), [94:4-16], (Class_const (((), [94:4-7], (CI ([94:4-7], "\\Foo"))), ([94:10-15], "$_")))); targs = []; args = []; unpacked_arg = None }))));
             ([96:3-99:5], (Expr ((), [96:3-99:4], (Class_const (((), [96:3-6], (CI ([96:3-6], "\\Foo"))), ([96:9-98:4], "such amaze$ $"))))));
             ([100:3-103:8],
              (Expr
                 ((), [100:3-103:7],
                  (Call { func = ((), [100:4-103:4], (Class_const (((), [100:4-7], (CI ([100:4-7], "\\Foo"))), ([100:10-102:4], "very $wow")))); targs = []; args = []; unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([20:10-21], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([107:10-19], "\\class_get");
       fd_fun =
       { f_span = [107:1-128:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), (Some ([107:33-37], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (); param_type_hint = ((), (Some ([107:20-27], Hdynamic))); 
            param_pos = [107:28-30]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([108:3-11], (Expr ((), [108:3-10], (Class_get (((), [108:3-6], (CI ([108:3-6], "\\Foo"))), (CGstring ([108:8-10], "$x")), Is_prop)))));
             ([109:3-10], (Expr ((), [109:3-9], (Class_get (((), [109:3-5], (CIexpr ((), [109:3-5], (Lvar ([109:3-5], $x))))), (CGstring ([109:7-9], "$x")), Is_prop)))));
             ([112:3-13], (Expr ((), [112:4-11], (Class_get (((), [112:4-7], (CI ([112:4-7], "\\Foo"))), (CGstring ([112:9-11], "$x")), Is_prop)))));
             ([113:3-14], (Expr ((), [113:5-11], (Class_get (((), [113:5-7], (CIexpr ((), [113:5-7], (Lvar ([113:5-7], $x))))), (CGstring ([113:9-11], "$x")), Is_prop)))));
             ([114:3-19],
              (Expr
                 ((), [114:3-18],
                  (Call { func = ((), [114:6-13], (Class_get (((), [114:6-9], (CI ([114:6-9], "\\Foo"))), (CGstring ([114:11-13], "$x")), Is_prop))); targs = []; args = []; unpacked_arg = None }))));
             ([115:3-20],
              (Expr
                 ((), [115:3-19],
                  (Call
                     { func = ((), [115:7-13], (Class_get (((), [115:7-9], (CIexpr ((), [115:7-9], (Lvar ([115:7-9], $x))))), (CGstring ([115:11-13], "$x")), Is_prop))); 
                       targs = []; args = []; unpacked_arg = None }))));
             ([117:3-11], (Expr ((), [117:3-10], (Class_get (((), [117:3-6], (CI ([117:3-6], "\\Foo"))), (CGstring ([117:8-10], "$_")), Is_prop)))));
             ([118:3-13], (Expr ((), [118:4-11], (Class_get (((), [118:4-7], (CI ([118:4-7], "\\Foo"))), (CGstring ([118:9-11], "$_")), Is_prop)))));
             ([119:3-15],
              (Expr
                 ((), [119:3-14],
                  (Call { func = ((), [119:4-11], (Class_get (((), [119:4-7], (CI ([119:4-7], "\\Foo"))), (CGstring ([119:9-11], "$_")), Is_prop))); targs = []; args = []; unpacked_arg = None }))));
             ([121:3-13], (Expr ((), [121:3-12], (Class_get (((), [121:3-6], (CI ([121:3-6], "\\Foo"))), (CGstring ([121:9-11], "$x")), Is_prop)))));
             ([122:3-15], (Expr ((), [122:4-13], (Class_get (((), [122:4-7], (CI ([122:4-7], "\\Foo"))), (CGstring ([122:10-12], "$x")), Is_prop)))));
             ([123:3-17],
              (Expr
                 ((), [123:3-16],
                  (Call { func = ((), [123:4-13], (Class_get (((), [123:4-7], (CI ([123:4-7], "\\Foo"))), (CGstring ([123:10-12], "$x")), Is_prop))); targs = []; args = []; unpacked_arg = None }))));
             ([125:3-13], (Expr ((), [125:3-12], (Class_get (((), [125:3-6], (CI ([125:3-6], "\\Foo"))), (CGstring ([125:9-11], "$_")), Is_prop)))));
             ([126:3-15], (Expr ((), [126:4-13], (Class_get (((), [126:4-7], (CI ([126:4-7], "\\Foo"))), (CGstring ([126:10-12], "$_")), Is_prop)))));
             ([127:3-17],
              (Expr
                 ((), [127:3-16],
                  (Call { func = ((), [127:4-13], (Class_get (((), [127:4-7], (CI ([127:4-7], "\\Foo"))), (CGstring ([127:10-12], "$_")), Is_prop))); targs = []; args = []; unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([107:10-19], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None })
  ]
