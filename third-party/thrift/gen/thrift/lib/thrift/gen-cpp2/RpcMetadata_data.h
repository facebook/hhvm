/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "thrift/lib/thrift/gen-cpp2/RpcMetadata_types.h"

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::ProtocolId> {
  using type = ::apache::thrift::ProtocolId;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, size> values = {{
    type::BINARY,
    type::COMPACT,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "BINARY",
    "COMPACT",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::RpcKind> {
  using type = ::apache::thrift::RpcKind;
  static constexpr const std::size_t size = 7;
  static constexpr const std::array<type, size> values = {{
    type::SINGLE_REQUEST_SINGLE_RESPONSE,
    type::SINGLE_REQUEST_NO_RESPONSE,
    type::STREAMING_REQUEST_SINGLE_RESPONSE,
    type::STREAMING_REQUEST_NO_RESPONSE,
    type::SINGLE_REQUEST_STREAMING_RESPONSE,
    type::STREAMING_REQUEST_STREAMING_RESPONSE,
    type::SINK,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "SINGLE_REQUEST_SINGLE_RESPONSE",
    "SINGLE_REQUEST_NO_RESPONSE",
    "STREAMING_REQUEST_SINGLE_RESPONSE",
    "STREAMING_REQUEST_NO_RESPONSE",
    "SINGLE_REQUEST_STREAMING_RESPONSE",
    "STREAMING_REQUEST_STREAMING_RESPONSE",
    "SINK",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::RpcPriority> {
  using type = ::apache::thrift::RpcPriority;
  static constexpr const std::size_t size = 6;
  static constexpr const std::array<type, size> values = {{
    type::HIGH_IMPORTANT,
    type::HIGH,
    type::IMPORTANT,
    type::NORMAL,
    type::BEST_EFFORT,
    type::N_PRIORITIES,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "HIGH_IMPORTANT",
    "HIGH",
    "IMPORTANT",
    "NORMAL",
    "BEST_EFFORT",
    "N_PRIORITIES",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::CompressionAlgorithm> {
  using type = ::apache::thrift::CompressionAlgorithm;
  static constexpr const std::size_t size = 3;
  static constexpr const std::array<type, size> values = {{
    type::NONE,
    type::ZLIB,
    type::ZSTD,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "NONE",
    "ZLIB",
    "ZSTD",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::RequestRpcMetadataFlags> {
  using type = ::apache::thrift::RequestRpcMetadataFlags;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, size> values = {{
    type::UNKNOWN,
    type::QUERY_SERVER_LOAD,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "UNKNOWN",
    "QUERY_SERVER_LOAD",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::ResponseRpcErrorCategory> {
  using type = ::apache::thrift::ResponseRpcErrorCategory;
  static constexpr const std::size_t size = 4;
  static constexpr const std::array<type, size> values = {{
    type::INTERNAL_ERROR,
    type::INVALID_REQUEST,
    type::LOADSHEDDING,
    type::SHUTDOWN,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "INTERNAL_ERROR",
    "INVALID_REQUEST",
    "LOADSHEDDING",
    "SHUTDOWN",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::ResponseRpcErrorCode> {
  using type = ::apache::thrift::ResponseRpcErrorCode;
  static constexpr const std::size_t size = 14;
  static constexpr const std::array<type, size> values = {{
    type::UNKNOWN,
    type::OVERLOAD,
    type::TASK_EXPIRED,
    type::QUEUE_OVERLOADED,
    type::SHUTDOWN,
    type::INJECTED_FAILURE,
    type::REQUEST_PARSING_FAILURE,
    type::QUEUE_TIMEOUT,
    type::RESPONSE_TOO_BIG,
    type::WRONG_RPC_KIND,
    type::UNKNOWN_METHOD,
    type::CHECKSUM_MISMATCH,
    type::INTERRUPTION,
    type::APP_OVERLOAD,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "UNKNOWN",
    "OVERLOAD",
    "TASK_EXPIRED",
    "QUEUE_OVERLOADED",
    "SHUTDOWN",
    "INJECTED_FAILURE",
    "REQUEST_PARSING_FAILURE",
    "QUEUE_TIMEOUT",
    "RESPONSE_TOO_BIG",
    "WRONG_RPC_KIND",
    "UNKNOWN_METHOD",
    "CHECKSUM_MISMATCH",
    "INTERRUPTION",
    "APP_OVERLOAD",
  }};
};
template <> struct TEnumDataStorage<::apache::thrift::InterfaceKind> {
  using type = ::apache::thrift::InterfaceKind;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, size> values = {{
    type::USER,
    type::DEBUGGING,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "USER",
    "DEBUGGING",
  }};
};

template <> struct TEnumDataStorage<::apache::thrift::CodecConfig::Type> {
  using type = ::apache::thrift::CodecConfig::Type;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, size> values = {{
    type::zlibConfig,
    type::zstdConfig,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "zlibConfig",
    "zstdConfig",
  }};
};

template <> struct TEnumDataStorage<::apache::thrift::PayloadExceptionMetadata::Type> {
  using type = ::apache::thrift::PayloadExceptionMetadata::Type;
  static constexpr const std::size_t size = 5;
  static constexpr const std::array<type, size> values = {{
    type::declaredException,
    type::proxyException,
    type::proxiedException,
    type::appClientException,
    type::appServerException,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "declaredException",
    "proxyException",
    "proxiedException",
    "appClientException",
    "appServerException",
  }};
};

template <> struct TEnumDataStorage<::apache::thrift::PayloadMetadata::Type> {
  using type = ::apache::thrift::PayloadMetadata::Type;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<type, size> values = {{
    type::responseMetadata,
    type::exceptionMetadata,
  }};
  static constexpr const std::array<folly::StringPiece, size> names = {{
    "responseMetadata",
    "exceptionMetadata",
  }};
};

}} // apache::thrift
