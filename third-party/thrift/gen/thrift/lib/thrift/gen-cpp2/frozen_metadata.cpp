/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/lib/thrift/gen-cpp2/frozen_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


void StructMetadata<::apache::thrift::frozen::schema::Field>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("frozen.Field", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& frozen_Field = res.first->second;
  frozen_Field.name = "frozen.Field";
  frozen_Field.is_union = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  frozen_Field_fields[] = {
    std::make_tuple(1, "layoutId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
    std::make_tuple(2, "offset", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : frozen_Field_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id = std::get<0>(f);
    field.name = std::get<1>(f);
    field.is_optional = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(field.type, metadata);
    frozen_Field.fields.push_back(std::move(field));
  }
}
void StructMetadata<::apache::thrift::frozen::schema::Layout>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("frozen.Layout", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& frozen_Layout = res.first->second;
  frozen_Layout.name = "frozen.Layout";
  frozen_Layout.is_union = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  frozen_Layout_fields[] = {
    std::make_tuple(1, "size", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)),
    std::make_tuple(2, "bits", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
    std::make_tuple(3, "fields", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Struct< ::apache::thrift::frozen::schema::Field>>("frozen.Field"))),
    std::make_tuple(4, "typeName", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
  };
  for (const auto& f : frozen_Layout_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id = std::get<0>(f);
    field.name = std::get<1>(f);
    field.is_optional = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(field.type, metadata);
    frozen_Layout.fields.push_back(std::move(field));
  }
}
void StructMetadata<::apache::thrift::frozen::schema::Schema>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs.emplace("frozen.Schema", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftStruct& frozen_Schema = res.first->second;
  frozen_Schema.name = "frozen.Schema";
  frozen_Schema.is_union = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  frozen_Schema_fields[] = {
    std::make_tuple(4, "fileVersion", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)),
    std::make_tuple(1, "relaxTypeChecks", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE)),
    std::make_tuple(2, "layouts", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::make_unique<Struct< ::apache::thrift::frozen::schema::Layout>>("frozen.Layout"))),
    std::make_tuple(3, "rootLayout", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : frozen_Schema_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id = std::get<0>(f);
    field.name = std::get<1>(f);
    field.is_optional = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(field.type, metadata);
    frozen_Schema.fields.push_back(std::move(field));
  }
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
