/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.thrift.annotation.java_deprecated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Wrapper implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Wrapper");
  private static final TField WRAPPER_CLASS_NAME_FIELD_DESC = new TField("wrapperClassName", TType.STRING, (short)1);
  private static final TField TYPE_CLASS_NAME_FIELD_DESC = new TField("typeClassName", TType.STRING, (short)2);

  public final String wrapperClassName;
  public final String typeClassName;
  public static final int WRAPPERCLASSNAME = 1;
  public static final int TYPECLASSNAME = 2;

  public Wrapper(
      String wrapperClassName,
      String typeClassName) {
    this.wrapperClassName = wrapperClassName;
    this.typeClassName = typeClassName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Wrapper(Wrapper other) {
    if (other.isSetWrapperClassName()) {
      this.wrapperClassName = TBaseHelper.deepCopy(other.wrapperClassName);
    } else {
      this.wrapperClassName = null;
    }
    if (other.isSetTypeClassName()) {
      this.typeClassName = TBaseHelper.deepCopy(other.typeClassName);
    } else {
      this.typeClassName = null;
    }
  }

  public Wrapper deepCopy() {
    return new Wrapper(this);
  }

  public String getWrapperClassName() {
    return this.wrapperClassName;
  }

  // Returns true if field wrapperClassName is set (has been assigned a value) and false otherwise
  public boolean isSetWrapperClassName() {
    return this.wrapperClassName != null;
  }

  public String getTypeClassName() {
    return this.typeClassName;
  }

  // Returns true if field typeClassName is set (has been assigned a value) and false otherwise
  public boolean isSetTypeClassName() {
    return this.typeClassName != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Wrapper))
      return false;
    Wrapper that = (Wrapper)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetWrapperClassName(), that.isSetWrapperClassName(), this.wrapperClassName, that.wrapperClassName)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetTypeClassName(), that.isSetTypeClassName(), this.typeClassName, that.typeClassName)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {wrapperClassName, typeClassName});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static Wrapper deserialize(TProtocol iprot) throws TException {
    String tmp_wrapperClassName = null;
    String tmp_typeClassName = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case WRAPPERCLASSNAME:
          if (__field.type == TType.STRING) {
            tmp_wrapperClassName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case TYPECLASSNAME:
          if (__field.type == TType.STRING) {
            tmp_typeClassName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    Wrapper _that;
    _that = new Wrapper(
      tmp_wrapperClassName
      ,tmp_typeClassName
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.wrapperClassName != null) {
      oprot.writeFieldBegin(WRAPPER_CLASS_NAME_FIELD_DESC);
      oprot.writeString(this.wrapperClassName);
      oprot.writeFieldEnd();
    }
    if (this.typeClassName != null) {
      oprot.writeFieldBegin(TYPE_CLASS_NAME_FIELD_DESC);
      oprot.writeString(this.typeClassName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

