/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/lib/thrift/gen-cpp2/metadata_types.h"
#include "thrift/lib/thrift/gen-cpp2/metadata_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/lib/thrift/gen-cpp2/metadata_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::apache::thrift::metadata::ThriftPrimitiveType>::size;
folly::Range<::apache::thrift::metadata::ThriftPrimitiveType const*> const TEnumTraits<::apache::thrift::metadata::ThriftPrimitiveType>::values = folly::range(TEnumDataStorage<::apache::thrift::metadata::ThriftPrimitiveType>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::apache::thrift::metadata::ThriftPrimitiveType>::names = folly::range(TEnumDataStorage<::apache::thrift::metadata::ThriftPrimitiveType>::names);

char const* TEnumTraits<::apache::thrift::metadata::ThriftPrimitiveType>::findName(type value) {
  using factory = ::apache::thrift::metadata::_ThriftPrimitiveType_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::apache::thrift::metadata::ThriftPrimitiveType>::findValue(char const* name, type* out) {
  using factory = ::apache::thrift::metadata::_ThriftPrimitiveType_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace apache { namespace thrift { namespace metadata {
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _ThriftPrimitiveType_EnumMapFactory::ValuesToNamesMapType _ThriftPrimitiveType_VALUES_TO_NAMES = _ThriftPrimitiveType_EnumMapFactory::makeValuesToNamesMap();
const _ThriftPrimitiveType_EnumMapFactory::NamesToValuesMapType _ThriftPrimitiveType_NAMES_TO_VALUES = _ThriftPrimitiveType_EnumMapFactory::makeNamesToValuesMap();
FOLLY_POP_WARNING

}}} // apache::thrift::metadata

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftListType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "valueType",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

ThriftListType::ThriftListType(const ThriftListType& srcObj) {
  if (srcObj.valueType) valueType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.valueType));
}

ThriftListType& ThriftListType::operator=(const ThriftListType& src) {
  ThriftListType tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftListType::ThriftListType(apache::thrift::FragileConstructor, std::unique_ptr< ::apache::thrift::metadata::ThriftType> valueType__arg) :
    valueType(std::move(valueType__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftListType::__clear() {
  // clear all fields
  valueType.reset();
}

bool ThriftListType::operator==(const ThriftListType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.valueType != !!rhs.valueType) {
    return false;
  }
  if (!!lhs.valueType) {
    if (lhs.valueType != rhs.valueType && !(*lhs.valueType == *rhs.valueType)) {
      return false;
    }
  }
  return true;
}

bool ThriftListType::operator<(const ThriftListType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.valueType != !!rhs.valueType) {
    return !!lhs.valueType < !!rhs.valueType;
  }
  if (!!lhs.valueType) {
    if (lhs.valueType != rhs.valueType && !(*lhs.valueType == *rhs.valueType)) {
      return *lhs.valueType < *rhs.valueType;
    }
  }
  return false;
}


void swap(ThriftListType& a, ThriftListType& b) {
  using ::std::swap;
  swap(a.valueType, b.valueType);
}

template void ThriftListType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftListType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftListType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftListType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftListType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftListType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftListType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftListType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftListType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftListType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftSetType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "valueType",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

ThriftSetType::ThriftSetType(const ThriftSetType& srcObj) {
  if (srcObj.valueType) valueType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.valueType));
}

ThriftSetType& ThriftSetType::operator=(const ThriftSetType& src) {
  ThriftSetType tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftSetType::ThriftSetType(apache::thrift::FragileConstructor, std::unique_ptr< ::apache::thrift::metadata::ThriftType> valueType__arg) :
    valueType(std::move(valueType__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftSetType::__clear() {
  // clear all fields
  valueType.reset();
}

bool ThriftSetType::operator==(const ThriftSetType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.valueType != !!rhs.valueType) {
    return false;
  }
  if (!!lhs.valueType) {
    if (lhs.valueType != rhs.valueType && !(*lhs.valueType == *rhs.valueType)) {
      return false;
    }
  }
  return true;
}

bool ThriftSetType::operator<(const ThriftSetType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.valueType != !!rhs.valueType) {
    return !!lhs.valueType < !!rhs.valueType;
  }
  if (!!lhs.valueType) {
    if (lhs.valueType != rhs.valueType && !(*lhs.valueType == *rhs.valueType)) {
      return *lhs.valueType < *rhs.valueType;
    }
  }
  return false;
}


void swap(ThriftSetType& a, ThriftSetType& b) {
  using ::std::swap;
  swap(a.valueType, b.valueType);
}

template void ThriftSetType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftSetType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftSetType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftSetType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftSetType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftSetType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftSetType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftSetType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftSetType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftSetType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftMapType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "keyType",
    "valueType",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

ThriftMapType::ThriftMapType(const ThriftMapType& srcObj) {
  if (srcObj.keyType) keyType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.keyType));
  if (srcObj.valueType) valueType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.valueType));
}

ThriftMapType& ThriftMapType::operator=(const ThriftMapType& src) {
  ThriftMapType tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftMapType::ThriftMapType(apache::thrift::FragileConstructor, std::unique_ptr< ::apache::thrift::metadata::ThriftType> keyType__arg, std::unique_ptr< ::apache::thrift::metadata::ThriftType> valueType__arg) :
    keyType(std::move(keyType__arg)),
    valueType(std::move(valueType__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftMapType::__clear() {
  // clear all fields
  keyType.reset();
  valueType.reset();
}

bool ThriftMapType::operator==(const ThriftMapType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.keyType != !!rhs.keyType) {
    return false;
  }
  if (!!lhs.keyType) {
    if (lhs.keyType != rhs.keyType && !(*lhs.keyType == *rhs.keyType)) {
      return false;
    }
  }
  if (!!lhs.valueType != !!rhs.valueType) {
    return false;
  }
  if (!!lhs.valueType) {
    if (lhs.valueType != rhs.valueType && !(*lhs.valueType == *rhs.valueType)) {
      return false;
    }
  }
  return true;
}

bool ThriftMapType::operator<(const ThriftMapType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.keyType != !!rhs.keyType) {
    return !!lhs.keyType < !!rhs.keyType;
  }
  if (!!lhs.keyType) {
    if (lhs.keyType != rhs.keyType && !(*lhs.keyType == *rhs.keyType)) {
      return *lhs.keyType < *rhs.keyType;
    }
  }
  if (!!lhs.valueType != !!rhs.valueType) {
    return !!lhs.valueType < !!rhs.valueType;
  }
  if (!!lhs.valueType) {
    if (lhs.valueType != rhs.valueType && !(*lhs.valueType == *rhs.valueType)) {
      return *lhs.valueType < *rhs.valueType;
    }
  }
  return false;
}


void swap(ThriftMapType& a, ThriftMapType& b) {
  using ::std::swap;
  swap(a.keyType, b.keyType);
  swap(a.valueType, b.valueType);
}

template void ThriftMapType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftMapType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftMapType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftMapType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftMapType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftMapType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftMapType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftMapType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftMapType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftMapType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftMapType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftMapType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftEnumType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "name",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftEnumType::ThriftEnumType(apache::thrift::FragileConstructor, ::std::string name__arg) :
    name(std::move(name__arg)) {
  __isset.name = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftEnumType::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftEnumType::operator==(const ThriftEnumType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  return true;
}

bool ThriftEnumType::operator<(const ThriftEnumType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  return false;
}


void swap(ThriftEnumType& a, ThriftEnumType& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftEnumType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftEnumType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftEnumType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftEnumType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftEnumType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftEnumType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftEnumType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftEnumType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftStructType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "name",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftStructType::ThriftStructType(apache::thrift::FragileConstructor, ::std::string name__arg) :
    name(std::move(name__arg)) {
  __isset.name = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftStructType::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftStructType::operator==(const ThriftStructType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  return true;
}

bool ThriftStructType::operator<(const ThriftStructType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  return false;
}


void swap(ThriftStructType& a, ThriftStructType& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftStructType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftStructType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftStructType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftStructType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftStructType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftStructType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftStructType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftStructType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftUnionType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "name",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftUnionType::ThriftUnionType(apache::thrift::FragileConstructor, ::std::string name__arg) :
    name(std::move(name__arg)) {
  __isset.name = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftUnionType::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftUnionType::operator==(const ThriftUnionType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  return true;
}

bool ThriftUnionType::operator<(const ThriftUnionType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  return false;
}


void swap(ThriftUnionType& a, ThriftUnionType& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftUnionType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftUnionType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftUnionType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftUnionType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftUnionType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftUnionType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftUnionType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftUnionType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftTypedefType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "name",
    "underlyingType",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

ThriftTypedefType::ThriftTypedefType(const ThriftTypedefType& srcObj) {
  name = srcObj.name;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.name = srcObj.__isset.name;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  if (srcObj.underlyingType) underlyingType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.underlyingType));
}

ThriftTypedefType& ThriftTypedefType::operator=(const ThriftTypedefType& src) {
  ThriftTypedefType tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftTypedefType::ThriftTypedefType(apache::thrift::FragileConstructor, ::std::string name__arg, std::unique_ptr< ::apache::thrift::metadata::ThriftType> underlyingType__arg) :
    name(std::move(name__arg)),
    underlyingType(std::move(underlyingType__arg)) {
  __isset.name = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftTypedefType::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  underlyingType.reset();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftTypedefType::operator==(const ThriftTypedefType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!!lhs.underlyingType != !!rhs.underlyingType) {
    return false;
  }
  if (!!lhs.underlyingType) {
    if (lhs.underlyingType != rhs.underlyingType && !(*lhs.underlyingType == *rhs.underlyingType)) {
      return false;
    }
  }
  return true;
}

bool ThriftTypedefType::operator<(const ThriftTypedefType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!!lhs.underlyingType != !!rhs.underlyingType) {
    return !!lhs.underlyingType < !!rhs.underlyingType;
  }
  if (!!lhs.underlyingType) {
    if (lhs.underlyingType != rhs.underlyingType && !(*lhs.underlyingType == *rhs.underlyingType)) {
      return *lhs.underlyingType < *rhs.underlyingType;
    }
  }
  return false;
}


void swap(ThriftTypedefType& a, ThriftTypedefType& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.underlyingType, b.underlyingType);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftTypedefType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftTypedefType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftTypedefType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftTypedefType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftTypedefType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftTypedefType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftTypedefType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftTypedefType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftTypedefType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftTypedefType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftStreamType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "elemType",
    "initialResponseType",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

ThriftStreamType::ThriftStreamType(const ThriftStreamType& srcObj) {
  if (srcObj.elemType) elemType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.elemType));
  if (srcObj.initialResponseType) initialResponseType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.initialResponseType));
}

ThriftStreamType& ThriftStreamType::operator=(const ThriftStreamType& src) {
  ThriftStreamType tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftStreamType::ThriftStreamType(apache::thrift::FragileConstructor, std::unique_ptr< ::apache::thrift::metadata::ThriftType> elemType__arg, std::unique_ptr< ::apache::thrift::metadata::ThriftType> initialResponseType__arg) :
    elemType(std::move(elemType__arg)),
    initialResponseType(std::move(initialResponseType__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftStreamType::__clear() {
  // clear all fields
  elemType.reset();
  initialResponseType.reset();
}

bool ThriftStreamType::operator==(const ThriftStreamType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.elemType != !!rhs.elemType) {
    return false;
  }
  if (!!lhs.elemType) {
    if (lhs.elemType != rhs.elemType && !(*lhs.elemType == *rhs.elemType)) {
      return false;
    }
  }
  if (!!lhs.initialResponseType != !!rhs.initialResponseType) {
    return false;
  }
  if (!!lhs.initialResponseType) {
    if (lhs.initialResponseType != rhs.initialResponseType && !(*lhs.initialResponseType == *rhs.initialResponseType)) {
      return false;
    }
  }
  return true;
}

bool ThriftStreamType::operator<(const ThriftStreamType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.elemType != !!rhs.elemType) {
    return !!lhs.elemType < !!rhs.elemType;
  }
  if (!!lhs.elemType) {
    if (lhs.elemType != rhs.elemType && !(*lhs.elemType == *rhs.elemType)) {
      return *lhs.elemType < *rhs.elemType;
    }
  }
  if (!!lhs.initialResponseType != !!rhs.initialResponseType) {
    return !!lhs.initialResponseType < !!rhs.initialResponseType;
  }
  if (!!lhs.initialResponseType) {
    if (lhs.initialResponseType != rhs.initialResponseType && !(*lhs.initialResponseType == *rhs.initialResponseType)) {
      return *lhs.initialResponseType < *rhs.initialResponseType;
    }
  }
  return false;
}


void swap(ThriftStreamType& a, ThriftStreamType& b) {
  using ::std::swap;
  swap(a.elemType, b.elemType);
  swap(a.initialResponseType, b.initialResponseType);
}

template void ThriftStreamType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftStreamType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftStreamType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftStreamType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftStreamType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftStreamType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftStreamType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftStreamType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftStreamType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftStreamType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftStreamType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftStreamType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftSinkType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 3;
  static constexpr folly::StringPiece _names[] = {
    "elemType",
    "finalResponseType",
    "initialResponseType",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

ThriftSinkType::ThriftSinkType(const ThriftSinkType& srcObj) {
  if (srcObj.elemType) elemType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.elemType));
  if (srcObj.finalResponseType) finalResponseType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.finalResponseType));
  if (srcObj.initialResponseType) initialResponseType.reset(new  ::apache::thrift::metadata::ThriftType(*srcObj.initialResponseType));
}

ThriftSinkType& ThriftSinkType::operator=(const ThriftSinkType& src) {
  ThriftSinkType tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftSinkType::ThriftSinkType(apache::thrift::FragileConstructor, std::unique_ptr< ::apache::thrift::metadata::ThriftType> elemType__arg, std::unique_ptr< ::apache::thrift::metadata::ThriftType> finalResponseType__arg, std::unique_ptr< ::apache::thrift::metadata::ThriftType> initialResponseType__arg) :
    elemType(std::move(elemType__arg)),
    finalResponseType(std::move(finalResponseType__arg)),
    initialResponseType(std::move(initialResponseType__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftSinkType::__clear() {
  // clear all fields
  elemType.reset();
  finalResponseType.reset();
  initialResponseType.reset();
}

bool ThriftSinkType::operator==(const ThriftSinkType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.elemType != !!rhs.elemType) {
    return false;
  }
  if (!!lhs.elemType) {
    if (lhs.elemType != rhs.elemType && !(*lhs.elemType == *rhs.elemType)) {
      return false;
    }
  }
  if (!!lhs.finalResponseType != !!rhs.finalResponseType) {
    return false;
  }
  if (!!lhs.finalResponseType) {
    if (lhs.finalResponseType != rhs.finalResponseType && !(*lhs.finalResponseType == *rhs.finalResponseType)) {
      return false;
    }
  }
  if (!!lhs.initialResponseType != !!rhs.initialResponseType) {
    return false;
  }
  if (!!lhs.initialResponseType) {
    if (lhs.initialResponseType != rhs.initialResponseType && !(*lhs.initialResponseType == *rhs.initialResponseType)) {
      return false;
    }
  }
  return true;
}

bool ThriftSinkType::operator<(const ThriftSinkType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!!lhs.elemType != !!rhs.elemType) {
    return !!lhs.elemType < !!rhs.elemType;
  }
  if (!!lhs.elemType) {
    if (lhs.elemType != rhs.elemType && !(*lhs.elemType == *rhs.elemType)) {
      return *lhs.elemType < *rhs.elemType;
    }
  }
  if (!!lhs.finalResponseType != !!rhs.finalResponseType) {
    return !!lhs.finalResponseType < !!rhs.finalResponseType;
  }
  if (!!lhs.finalResponseType) {
    if (lhs.finalResponseType != rhs.finalResponseType && !(*lhs.finalResponseType == *rhs.finalResponseType)) {
      return *lhs.finalResponseType < *rhs.finalResponseType;
    }
  }
  if (!!lhs.initialResponseType != !!rhs.initialResponseType) {
    return !!lhs.initialResponseType < !!rhs.initialResponseType;
  }
  if (!!lhs.initialResponseType) {
    if (lhs.initialResponseType != rhs.initialResponseType && !(*lhs.initialResponseType == *rhs.initialResponseType)) {
      return *lhs.initialResponseType < *rhs.initialResponseType;
    }
  }
  return false;
}


void swap(ThriftSinkType& a, ThriftSinkType& b) {
  using ::std::swap;
  swap(a.elemType, b.elemType);
  swap(a.finalResponseType, b.finalResponseType);
  swap(a.initialResponseType, b.initialResponseType);
}

template void ThriftSinkType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftSinkType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftSinkType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftSinkType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftSinkType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftSinkType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftSinkType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftSinkType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftSinkType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftSinkType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftSinkType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftSinkType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftSinkType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftSinkType,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftType>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 10;
  static constexpr folly::StringPiece _names[] = {
    "t_primitive",
    "t_list",
    "t_set",
    "t_map",
    "t_enum",
    "t_struct",
    "t_union",
    "t_typedef",
    "t_stream",
    "t_sink",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::apache::thrift::metadata::ThriftType::Type>::size;
folly::Range<::apache::thrift::metadata::ThriftType::Type const*> const TEnumTraits<::apache::thrift::metadata::ThriftType::Type>::values = folly::range(TEnumDataStorage<::apache::thrift::metadata::ThriftType::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::apache::thrift::metadata::ThriftType::Type>::names = folly::range(TEnumDataStorage<::apache::thrift::metadata::ThriftType::Type>::names);

char const* TEnumTraits<::apache::thrift::metadata::ThriftType::Type>::findName(type value) {
  using factory = detail::TEnumMapFactory<::apache::thrift::metadata::ThriftType::Type>;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::apache::thrift::metadata::ThriftType::Type>::findValue(char const* name, type* out) {
  using factory = detail::TEnumMapFactory<::apache::thrift::metadata::ThriftType::Type>;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}
}} // apache::thrift
namespace apache { namespace thrift { namespace metadata {

void ThriftType::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::t_primitive:
    {
      destruct(value_.t_primitive);
      break;
    }
    case Type::t_list:
    {
      destruct(value_.t_list);
      break;
    }
    case Type::t_set:
    {
      destruct(value_.t_set);
      break;
    }
    case Type::t_map:
    {
      destruct(value_.t_map);
      break;
    }
    case Type::t_enum:
    {
      destruct(value_.t_enum);
      break;
    }
    case Type::t_struct:
    {
      destruct(value_.t_struct);
      break;
    }
    case Type::t_union:
    {
      destruct(value_.t_union);
      break;
    }
    case Type::t_typedef:
    {
      destruct(value_.t_typedef);
      break;
    }
    case Type::t_stream:
    {
      destruct(value_.t_stream);
      break;
    }
    case Type::t_sink:
    {
      destruct(value_.t_sink);
      break;
    }
    default:
    {
      assert(false);
      break;
    }
  }
  type_ = Type::__EMPTY__;
}

bool ThriftType::operator==(const ThriftType& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::t_primitive:
    {
      return value_.t_primitive == rhs.value_.t_primitive;
    }
    case Type::t_list:
    {
      return value_.t_list == rhs.value_.t_list;
    }
    case Type::t_set:
    {
      return value_.t_set == rhs.value_.t_set;
    }
    case Type::t_map:
    {
      return value_.t_map == rhs.value_.t_map;
    }
    case Type::t_enum:
    {
      return value_.t_enum == rhs.value_.t_enum;
    }
    case Type::t_struct:
    {
      return value_.t_struct == rhs.value_.t_struct;
    }
    case Type::t_union:
    {
      return value_.t_union == rhs.value_.t_union;
    }
    case Type::t_typedef:
    {
      return value_.t_typedef == rhs.value_.t_typedef;
    }
    case Type::t_stream:
    {
      return value_.t_stream == rhs.value_.t_stream;
    }
    case Type::t_sink:
    {
      return value_.t_sink == rhs.value_.t_sink;
    }
    default:
    {
      return true;
    }
  }
}

bool ThriftType::operator<(const ThriftType& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (lhs.type_ != rhs.type_) {
    return lhs.type_ < rhs.type_;
  }
  switch (lhs.type_) {
    case Type::t_primitive:
      return lhs.value_.t_primitive < rhs.value_.t_primitive;
    case Type::t_list:
      return lhs.value_.t_list < rhs.value_.t_list;
    case Type::t_set:
      return lhs.value_.t_set < rhs.value_.t_set;
    case Type::t_map:
      return lhs.value_.t_map < rhs.value_.t_map;
    case Type::t_enum:
      return lhs.value_.t_enum < rhs.value_.t_enum;
    case Type::t_struct:
      return lhs.value_.t_struct < rhs.value_.t_struct;
    case Type::t_union:
      return lhs.value_.t_union < rhs.value_.t_union;
    case Type::t_typedef:
      return lhs.value_.t_typedef < rhs.value_.t_typedef;
    case Type::t_stream:
      return lhs.value_.t_stream < rhs.value_.t_stream;
    case Type::t_sink:
      return lhs.value_.t_sink < rhs.value_.t_sink;
    default:
      return false;
  }
}

void swap(ThriftType& a, ThriftType& b) {
  ThriftType temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void ThriftType::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftType::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftType::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftType::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftType::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftType::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftType::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftType::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftListType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftSetType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftMapType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftEnumType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftStructType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftUnionType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftTypedefType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftStreamType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftSinkType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftListType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftSetType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftMapType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftEnumType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftStructType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftUnionType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftTypedefType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftStreamType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftType,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftSinkType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftEnum>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "name",
    "elements",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
    TType::T_MAP,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftEnum::ThriftEnum(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::map<int32_t, ::std::string> elements__arg) :
    name(std::move(name__arg)),
    elements(std::move(elements__arg)) {
  __isset.name = true;
  __isset.elements = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftEnum::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  elements.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftEnum::operator==(const ThriftEnum& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!(lhs.elements == rhs.elements)) {
    return false;
  }
  return true;
}

bool ThriftEnum::operator<(const ThriftEnum& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!(lhs.elements == rhs.elements)) {
    return lhs.elements < rhs.elements;
  }
  return false;
}

const ::std::map<int32_t, ::std::string>& ThriftEnum::get_elements() const& {
  return elements;
}

::std::map<int32_t, ::std::string> ThriftEnum::get_elements() && {
  return std::move(elements);
}


void swap(ThriftEnum& a, ThriftEnum& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.elements_ref().value(), b.elements_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftEnum::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftEnum::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftEnum::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftEnum::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftEnum::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftEnum::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftEnum::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftEnum::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftField>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 4;
  static constexpr folly::StringPiece _names[] = {
    "id",
    "type",
    "name",
    "is_optional",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
    4,
  };
  static constexpr TType _types[] = {
    TType::T_I32,
    TType::T_STRUCT,
    TType::T_STRING,
    TType::T_BOOL,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftField::ThriftField(apache::thrift::FragileConstructor, int32_t id__arg,  ::apache::thrift::metadata::ThriftType type__arg, ::std::string name__arg, bool is_optional__arg) :
    id(std::move(id__arg)),
    type(std::move(type__arg)),
    name(std::move(name__arg)),
    is_optional(std::move(is_optional__arg)) {
  __isset.id = true;
  __isset.type = true;
  __isset.name = true;
  __isset.is_optional = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftField::__clear() {
  // clear all fields
  id = 0;
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::clear(&type);
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  is_optional = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftField::operator==(const ThriftField& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.id == rhs.id)) {
    return false;
  }
  if (!(lhs.type == rhs.type)) {
    return false;
  }
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!(lhs.is_optional == rhs.is_optional)) {
    return false;
  }
  return true;
}

bool ThriftField::operator<(const ThriftField& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.id == rhs.id)) {
    return lhs.id < rhs.id;
  }
  if (!(lhs.type == rhs.type)) {
    return lhs.type < rhs.type;
  }
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!(lhs.is_optional == rhs.is_optional)) {
    return lhs.is_optional < rhs.is_optional;
  }
  return false;
}

const  ::apache::thrift::metadata::ThriftType& ThriftField::get_type() const& {
  return type;
}

 ::apache::thrift::metadata::ThriftType ThriftField::get_type() && {
  return std::move(type);
}


void swap(ThriftField& a, ThriftField& b) {
  using ::std::swap;
  swap(a.id_ref().value(), b.id_ref().value());
  swap(a.type_ref().value(), b.type_ref().value());
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.is_optional_ref().value(), b.is_optional_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftField::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftField::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftField::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftField::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftField::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftField::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftField::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftField::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftField,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftField,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftStruct>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 3;
  static constexpr folly::StringPiece _names[] = {
    "name",
    "fields",
    "is_union",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
    TType::T_LIST,
    TType::T_BOOL,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftStruct::ThriftStruct(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::vector< ::apache::thrift::metadata::ThriftField> fields__arg, bool is_union__arg) :
    name(std::move(name__arg)),
    fields(std::move(fields__arg)),
    is_union(std::move(is_union__arg)) {
  __isset.name = true;
  __isset.fields = true;
  __isset.is_union = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftStruct::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  fields.clear();
  is_union = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftStruct::operator==(const ThriftStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!(lhs.fields == rhs.fields)) {
    return false;
  }
  if (!(lhs.is_union == rhs.is_union)) {
    return false;
  }
  return true;
}

bool ThriftStruct::operator<(const ThriftStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!(lhs.fields == rhs.fields)) {
    return lhs.fields < rhs.fields;
  }
  if (!(lhs.is_union == rhs.is_union)) {
    return lhs.is_union < rhs.is_union;
  }
  return false;
}

const ::std::vector< ::apache::thrift::metadata::ThriftField>& ThriftStruct::get_fields() const& {
  return fields;
}

::std::vector< ::apache::thrift::metadata::ThriftField> ThriftStruct::get_fields() && {
  return std::move(fields);
}


void swap(ThriftStruct& a, ThriftStruct& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.fields_ref().value(), b.fields_ref().value());
  swap(a.is_union_ref().value(), b.is_union_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftException>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "name",
    "fields",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
    TType::T_LIST,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftException::ThriftException(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::vector< ::apache::thrift::metadata::ThriftField> fields__arg) :
    name(std::move(name__arg)),
    fields(std::move(fields__arg)) {
  __isset.name = true;
  __isset.fields = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftException::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  fields.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftException::operator==(const ThriftException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!(lhs.fields == rhs.fields)) {
    return false;
  }
  return true;
}

bool ThriftException::operator<(const ThriftException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!(lhs.fields == rhs.fields)) {
    return lhs.fields < rhs.fields;
  }
  return false;
}

const ::std::vector< ::apache::thrift::metadata::ThriftField>& ThriftException::get_fields() const& {
  return fields;
}

::std::vector< ::apache::thrift::metadata::ThriftField> ThriftException::get_fields() && {
  return std::move(fields);
}


void swap(ThriftException& a, ThriftException& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.fields_ref().value(), b.fields_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftException,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftException,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftFunction>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 5;
  static constexpr folly::StringPiece _names[] = {
    "name",
    "return_type",
    "arguments",
    "exceptions",
    "is_oneway",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
    4,
    5,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
    TType::T_STRUCT,
    TType::T_LIST,
    TType::T_LIST,
    TType::T_BOOL,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftFunction::ThriftFunction() :
      is_oneway(0) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END


ThriftFunction::~ThriftFunction() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftFunction::ThriftFunction(apache::thrift::FragileConstructor, ::std::string name__arg,  ::apache::thrift::metadata::ThriftType return_type__arg, ::std::vector< ::apache::thrift::metadata::ThriftField> arguments__arg, ::std::vector< ::apache::thrift::metadata::ThriftField> exceptions__arg, bool is_oneway__arg) :
    name(std::move(name__arg)),
    return_type(std::move(return_type__arg)),
    arguments(std::move(arguments__arg)),
    exceptions(std::move(exceptions__arg)),
    is_oneway(std::move(is_oneway__arg)) {
  __isset.name = true;
  __isset.return_type = true;
  __isset.arguments = true;
  __isset.exceptions = true;
  __isset.is_oneway = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftFunction::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftType>::clear(&return_type);
  arguments.clear();
  exceptions.clear();
  is_oneway = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftFunction::operator==(const ThriftFunction& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!(lhs.return_type == rhs.return_type)) {
    return false;
  }
  if (!(lhs.arguments == rhs.arguments)) {
    return false;
  }
  if (!(lhs.exceptions == rhs.exceptions)) {
    return false;
  }
  if (!(lhs.is_oneway == rhs.is_oneway)) {
    return false;
  }
  return true;
}

bool ThriftFunction::operator<(const ThriftFunction& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!(lhs.return_type == rhs.return_type)) {
    return lhs.return_type < rhs.return_type;
  }
  if (!(lhs.arguments == rhs.arguments)) {
    return lhs.arguments < rhs.arguments;
  }
  if (!(lhs.exceptions == rhs.exceptions)) {
    return lhs.exceptions < rhs.exceptions;
  }
  if (!(lhs.is_oneway == rhs.is_oneway)) {
    return lhs.is_oneway < rhs.is_oneway;
  }
  return false;
}

const  ::apache::thrift::metadata::ThriftType& ThriftFunction::get_return_type() const& {
  return return_type;
}

 ::apache::thrift::metadata::ThriftType ThriftFunction::get_return_type() && {
  return std::move(return_type);
}

const ::std::vector< ::apache::thrift::metadata::ThriftField>& ThriftFunction::get_arguments() const& {
  return arguments;
}

::std::vector< ::apache::thrift::metadata::ThriftField> ThriftFunction::get_arguments() && {
  return std::move(arguments);
}

const ::std::vector< ::apache::thrift::metadata::ThriftField>& ThriftFunction::get_exceptions() const& {
  return exceptions;
}

::std::vector< ::apache::thrift::metadata::ThriftField> ThriftFunction::get_exceptions() && {
  return std::move(exceptions);
}


void swap(ThriftFunction& a, ThriftFunction& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.return_type_ref().value(), b.return_type_ref().value());
  swap(a.arguments_ref().value(), b.arguments_ref().value());
  swap(a.exceptions_ref().value(), b.exceptions_ref().value());
  swap(a.is_oneway_ref().value(), b.is_oneway_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftFunction::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftFunction::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftFunction::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftFunction::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftFunction::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftFunction::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftFunction::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftFunction::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftFunction,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftFunction,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftFunction,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftFunction,
        ::apache::thrift::type_class::variant,
         ::apache::thrift::metadata::ThriftType>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftFunction,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftFunction,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftField>>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftService>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 3;
  static constexpr folly::StringPiece _names[] = {
    "name",
    "functions",
    "parent",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
    3,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
    TType::T_LIST,
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftService::ThriftService(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::vector< ::apache::thrift::metadata::ThriftFunction> functions__arg, ::std::string parent__arg) :
    name(std::move(name__arg)),
    functions(std::move(functions__arg)),
    parent(std::move(parent__arg)) {
  __isset.name = true;
  __isset.functions = true;
  __isset.parent = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftService::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  functions.clear();
  parent = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftService::operator==(const ThriftService& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  if (!(lhs.functions == rhs.functions)) {
    return false;
  }
  if (lhs.parent_ref() != rhs.parent_ref()) {
    return false;
  }
  return true;
}

bool ThriftService::operator<(const ThriftService& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  if (!(lhs.functions == rhs.functions)) {
    return lhs.functions < rhs.functions;
  }
  if (lhs.parent_ref() != rhs.parent_ref()) {
    return lhs.parent_ref() < rhs.parent_ref();
  }
  return false;
}

const ::std::vector< ::apache::thrift::metadata::ThriftFunction>& ThriftService::get_functions() const& {
  return functions;
}

::std::vector< ::apache::thrift::metadata::ThriftFunction> ThriftService::get_functions() && {
  return std::move(functions);
}


void swap(ThriftService& a, ThriftService& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
  swap(a.functions_ref().value(), b.functions_ref().value());
  swap(a.parent_ref().value_unchecked(), b.parent_ref().value_unchecked());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftService::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftService::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftService::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftService::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftService::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftService::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftService::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftService::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftService,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftFunction>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftService,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector< ::apache::thrift::metadata::ThriftFunction>>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftModuleContext>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 1;
  static constexpr folly::StringPiece _names[] = {
    "name",
  };
  static constexpr int16_t _ids[] = {
    1,
  };
  static constexpr TType _types[] = {
    TType::T_STRING,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftModuleContext::ThriftModuleContext(apache::thrift::FragileConstructor, ::std::string name__arg) :
    name(std::move(name__arg)) {
  __isset.name = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftModuleContext::__clear() {
  // clear all fields
  name = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftModuleContext::operator==(const ThriftModuleContext& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return false;
  }
  return true;
}

bool ThriftModuleContext::operator<(const ThriftModuleContext& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.name == rhs.name)) {
    return lhs.name < rhs.name;
  }
  return false;
}


void swap(ThriftModuleContext& a, ThriftModuleContext& b) {
  using ::std::swap;
  swap(a.name_ref().value(), b.name_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftModuleContext::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftModuleContext::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftModuleContext::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftModuleContext::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftModuleContext::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftModuleContext::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftModuleContext::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftModuleContext::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftServiceContext>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "service_info",
    "module",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftServiceContext::ThriftServiceContext(apache::thrift::FragileConstructor,  ::apache::thrift::metadata::ThriftService service_info__arg,  ::apache::thrift::metadata::ThriftModuleContext module__arg) :
    service_info(std::move(service_info__arg)),
    module(std::move(module__arg)) {
  __isset.service_info = true;
  __isset.module = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftServiceContext::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftService>::clear(&service_info);
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftModuleContext>::clear(&module);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftServiceContext::operator==(const ThriftServiceContext& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.service_info == rhs.service_info)) {
    return false;
  }
  if (!(lhs.module == rhs.module)) {
    return false;
  }
  return true;
}

bool ThriftServiceContext::operator<(const ThriftServiceContext& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.service_info == rhs.service_info)) {
    return lhs.service_info < rhs.service_info;
  }
  if (!(lhs.module == rhs.module)) {
    return lhs.module < rhs.module;
  }
  return false;
}

const  ::apache::thrift::metadata::ThriftService& ThriftServiceContext::get_service_info() const& {
  return service_info;
}

 ::apache::thrift::metadata::ThriftService ThriftServiceContext::get_service_info() && {
  return std::move(service_info);
}

const  ::apache::thrift::metadata::ThriftModuleContext& ThriftServiceContext::get_module() const& {
  return module;
}

 ::apache::thrift::metadata::ThriftModuleContext ThriftServiceContext::get_module() && {
  return std::move(module);
}


void swap(ThriftServiceContext& a, ThriftServiceContext& b) {
  using ::std::swap;
  swap(a.service_info_ref().value(), b.service_info_ref().value());
  swap(a.module_ref().value(), b.module_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftServiceContext::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftServiceContext::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftServiceContext::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftServiceContext::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftServiceContext::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftServiceContext::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftServiceContext::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftServiceContext::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftServiceContext,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftService>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftServiceContext,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftModuleContext>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftServiceContext,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftService>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftServiceContext,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftModuleContext>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftMetadata>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 4;
  static constexpr folly::StringPiece _names[] = {
    "enums",
    "structs",
    "exceptions",
    "services",
  };
  static constexpr int16_t _ids[] = {
    2,
    4,
    5,
    6,
  };
  static constexpr TType _types[] = {
    TType::T_MAP,
    TType::T_MAP,
    TType::T_MAP,
    TType::T_MAP,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftMetadata::ThriftMetadata(apache::thrift::FragileConstructor, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum> enums__arg, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct> structs__arg, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException> exceptions__arg, ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService> services__arg) :
    enums(std::move(enums__arg)),
    structs(std::move(structs__arg)),
    exceptions(std::move(exceptions__arg)),
    services(std::move(services__arg)) {
  __isset.enums = true;
  __isset.structs = true;
  __isset.exceptions = true;
  __isset.services = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftMetadata::__clear() {
  // clear all fields
  enums.clear();
  structs.clear();
  exceptions.clear();
  services.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftMetadata::operator==(const ThriftMetadata& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.enums == rhs.enums)) {
    return false;
  }
  if (!(lhs.structs == rhs.structs)) {
    return false;
  }
  if (!(lhs.exceptions == rhs.exceptions)) {
    return false;
  }
  if (!(lhs.services == rhs.services)) {
    return false;
  }
  return true;
}

bool ThriftMetadata::operator<(const ThriftMetadata& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.enums == rhs.enums)) {
    return lhs.enums < rhs.enums;
  }
  if (!(lhs.structs == rhs.structs)) {
    return lhs.structs < rhs.structs;
  }
  if (!(lhs.exceptions == rhs.exceptions)) {
    return lhs.exceptions < rhs.exceptions;
  }
  if (!(lhs.services == rhs.services)) {
    return lhs.services < rhs.services;
  }
  return false;
}

const ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>& ThriftMetadata::get_enums() const& {
  return enums;
}

::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum> ThriftMetadata::get_enums() && {
  return std::move(enums);
}

const ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>& ThriftMetadata::get_structs() const& {
  return structs;
}

::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct> ThriftMetadata::get_structs() && {
  return std::move(structs);
}

const ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>& ThriftMetadata::get_exceptions() const& {
  return exceptions;
}

::std::map<::std::string,  ::apache::thrift::metadata::ThriftException> ThriftMetadata::get_exceptions() && {
  return std::move(exceptions);
}

const ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>& ThriftMetadata::get_services() const& {
  return services;
}

::std::map<::std::string,  ::apache::thrift::metadata::ThriftService> ThriftMetadata::get_services() && {
  return std::move(services);
}


void swap(ThriftMetadata& a, ThriftMetadata& b) {
  using ::std::swap;
  swap(a.enums_ref().value(), b.enums_ref().value());
  swap(a.structs_ref().value(), b.structs_ref().value());
  swap(a.exceptions_ref().value(), b.exceptions_ref().value());
  swap(a.services_ref().value(), b.services_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftMetadata::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftMetadata::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftMetadata::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftMetadata::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftMetadata::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftMetadata::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftMetadata::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftMetadata::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftEnum>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftStruct>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftException>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftMetadata,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string,  ::apache::thrift::metadata::ThriftService>>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::metadata::ThriftServiceMetadataResponse>::translateFieldName(
    FOLLY_MAYBE_UNUSED folly::StringPiece _fname,
    FOLLY_MAYBE_UNUSED int16_t& fid,
    FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) noexcept {
  using TType = apache::thrift::protocol::TType;
  constexpr size_t _size = 2;
  static constexpr folly::StringPiece _names[] = {
    "context",
    "metadata",
  };
  static constexpr int16_t _ids[] = {
    1,
    2,
  };
  static constexpr TType _types[] = {
    TType::T_STRUCT,
    TType::T_STRUCT,
  };
  static constexpr st::translate_field_name_table
      table{_size, _names, _ids, _types};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace metadata {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ThriftServiceMetadataResponse::ThriftServiceMetadataResponse(apache::thrift::FragileConstructor,  ::apache::thrift::metadata::ThriftServiceContext context__arg,  ::apache::thrift::metadata::ThriftMetadata metadata__arg) :
    context(std::move(context__arg)),
    metadata(std::move(metadata__arg)) {
  __isset.context = true;
  __isset.metadata = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
void ThriftServiceMetadataResponse::__clear() {
  // clear all fields
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftServiceContext>::clear(&context);
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::metadata::ThriftMetadata>::clear(&metadata);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ThriftServiceMetadataResponse::operator==(const ThriftServiceMetadataResponse& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.context == rhs.context)) {
    return false;
  }
  if (!(lhs.metadata == rhs.metadata)) {
    return false;
  }
  return true;
}

bool ThriftServiceMetadataResponse::operator<(const ThriftServiceMetadataResponse& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.context == rhs.context)) {
    return lhs.context < rhs.context;
  }
  if (!(lhs.metadata == rhs.metadata)) {
    return lhs.metadata < rhs.metadata;
  }
  return false;
}

const  ::apache::thrift::metadata::ThriftServiceContext& ThriftServiceMetadataResponse::get_context() const& {
  return context;
}

 ::apache::thrift::metadata::ThriftServiceContext ThriftServiceMetadataResponse::get_context() && {
  return std::move(context);
}

const  ::apache::thrift::metadata::ThriftMetadata& ThriftServiceMetadataResponse::get_metadata() const& {
  return metadata;
}

 ::apache::thrift::metadata::ThriftMetadata ThriftServiceMetadataResponse::get_metadata() && {
  return std::move(metadata);
}


void swap(ThriftServiceMetadataResponse& a, ThriftServiceMetadataResponse& b) {
  using ::std::swap;
  swap(a.context_ref().value(), b.context_ref().value());
  swap(a.metadata_ref().value(), b.metadata_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ThriftServiceMetadataResponse::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ThriftServiceMetadataResponse::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ThriftServiceMetadataResponse::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ThriftServiceMetadataResponse::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ThriftServiceMetadataResponse::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ThriftServiceMetadataResponse::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ThriftServiceMetadataResponse::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ThriftServiceMetadataResponse::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftServiceMetadataResponse,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftServiceContext>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ThriftServiceMetadataResponse,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftMetadata>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftServiceMetadataResponse,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftServiceContext>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ThriftServiceMetadataResponse,
        ::apache::thrift::type_class::structure,
         ::apache::thrift::metadata::ThriftMetadata>,
    "inconsistent use of nimble option");

}}} // apache::thrift::metadata
