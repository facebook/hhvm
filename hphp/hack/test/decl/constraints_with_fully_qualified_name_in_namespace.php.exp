Parsed decls:

{ Direct_decl_parser.classes =
  { "\\NS\\I" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cinterface;
      sc_name = ([12:13-14], "\\NS\\I");
      sc_tparams =
      [(Invariant, ([13:5-7], "Ta"),
        [(Constraint_as,
          (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 13, characters 11-18),
           (Tprim Tarraykey)))
          ],
        Erased);
        (Invariant, ([14:5-7], "Tb"),
         [(Constraint_as,
           (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 14, characters 11-21),
            (Tapply (([14:11-14], "\\HH\\Map"),
               [(Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 14, characters 15-16),
                 (Tgeneric ("Ta", [])));
               (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 14, characters 19-20),
                (Tgeneric ("Te", [])))
            ]
           ))))
        ],
      Erased);
      (Invariant, ([15:5-7], "Tc"),
       [(Constraint_as,
         (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 15, characters 11-23),
          (Tapply (([15:11-14], "\\HH\\Map"),
             [(Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 15, characters 15-17),
               (Tapply (([15:15-18], "\\Ta"), [])));
               (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 15, characters 20-22),
                (Tapply (([15:20-23], "\\Te"), [])))
               ]
             ))))
         ],
       Erased);
      (Invariant, ([16:5-7], "Td"),
       [(Constraint_as,
         (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 16, characters 11-29),
          (Tapply (([16:11-14], "\\HH\\Map"),
             [(Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 16, characters 15-20),
               (Tapply (([16:15-21], "\\NS\\Ta"), [])));
               (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 16, characters 23-28),
                (Tapply (([16:23-29], "\\NS\\Te"), [])))
               ]
             ))))
         ],
       Erased);
      (Invariant, ([17:5-7], "Te"), [], Erased)];
    sc_where_constraints = [];
    sc_extends = [];
    sc_uses = [];
    sc_xhp_attr_uses = [];
    sc_req_extends = [];
    sc_req_implements = [];
    sc_implements = [];
    sc_consts = [];
    sc_typeconsts = [];
    sc_pu_enums = [];
    sc_props = [];
    sc_sprops = [];
    sc_constructor = None;
    sc_static_methods = [];
    sc_methods = [];
    sc_user_attributes = [];
    sc_enum_type = None;
    sc_decl_errors = <opaque>
    } }; funs = {};
typedefs =
{ "\\NS\\Ta" ->
  { td_pos = [9:8-10]; td_vis = Transparent; td_tparams = [];
    td_constraint = None;
    td_type =
    (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 9, characters 13-15),
     (Tprim Tint))
    };
  "\\NS\\Te" ->
  { td_pos = [10:8-10]; td_vis = Transparent; td_tparams = [];
    td_constraint = None;
    td_type =
    (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 10, characters 13-18),
     (Tprim Tstring))
    };
  "\\Ta" ->
  { td_pos = [4:8-10]; td_vis = Transparent; td_tparams = [];
    td_constraint = None;
    td_type =
    (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 4, characters 13-15),
     (Tprim Tint))
    };
  "\\Te" ->
  { td_pos = [5:8-10]; td_vis = Transparent; td_tparams = [];
    td_constraint = None;
    td_type =
    (Rhint (root|constraints_with_fully_qualified_name_in_namespace.php line 5, characters 13-18),
     (Tprim Tstring))
    } }; consts = {}
}

They matched!
