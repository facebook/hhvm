/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/BoxServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/interactions/gen-cpp2/shared_types.h"
#include <thrift/lib/cpp2/async/ServerStream.h>
#include <thrift/lib/cpp2/async/Sink.h>

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2 {
class BoxService;
class BoxServiceAsyncProcessor;

class BoxServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2::BoxService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2::BoxService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "BoxService"; }

  typedef ::cpp2::BoxServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:
class BoxedInteractionServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};


class BoxedInteractionIf : public apache::thrift::Tile, public apache::thrift::ServerInterface {
 public:
  std::string_view getGeneratedName() const override { return "BoxedInteraction"; }

  typedef ::cpp2::BoxServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override {
    std::terminate();
  }
  CreateMethodMetadataResult createMethodMetadata() override {
    std::terminate();
  }
  virtual void sync_getABox(::cpp2::ShouldBeBoxed& /*_return*/);
  [[deprecated("Use sync_getABox instead")]] virtual void getABox(::cpp2::ShouldBeBoxed& /*_return*/);
  virtual folly::SemiFuture<std::unique_ptr<::cpp2::ShouldBeBoxed>> semifuture_getABox();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2::ShouldBeBoxed>> co_getABox();
  virtual folly::coro::Task<std::unique_ptr<::cpp2::ShouldBeBoxed>> co_getABox(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getABox(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2::ShouldBeBoxed>> callback);
 private:
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getABox{apache::thrift::detail::si::InvocationType::AsyncTm};
};
  virtual apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>> sync_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> /*req*/);
  [[deprecated("Use sync_getABoxSession instead")]] virtual apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>> getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> /*req*/);
  virtual folly::Future<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> future_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req);
  virtual folly::SemiFuture<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> semifuture_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> co_getABoxSession(std::unique_ptr<::cpp2::ShouldBeBoxed> p_req);
  virtual folly::coro::Task<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> co_getABoxSession(apache::thrift::RequestParams params, std::unique_ptr<::cpp2::ShouldBeBoxed> p_req);
#endif
  virtual void async_tm_getABoxSession(apache::thrift::HandlerCallbackPtr<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2::BoxService>::BoxedInteractionIf, std::unique_ptr<::cpp2::ShouldBeBoxed>>> callback, std::unique_ptr<::cpp2::ShouldBeBoxed> p_req);
 private:
  static ::cpp2::BoxServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getABoxSession{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_getABoxSession(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const ::cpp2::ShouldBeBoxed& /*p_req*/) {}
  virtual void fbthrift_execute_decorators_after_getABoxSession(apache::thrift::Cpp2RequestContext& /*requestCtx*/, const BoxedInteractionIf& /*interaction*/, const ::cpp2::ShouldBeBoxed& /*result*/) {}
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2::BoxService, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 5169293820847068718;
  static constexpr ::std::string_view definitionKey = {"\xe7\x89\x5a\x8d\x94\xf7\x9a\xaf\x07\x4e\x7a\xa5\x2d\xa1\x1c\xfc", 16};
};
}
} // namespace apache::thrift

namespace cpp2 {
using BoxServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<BoxService> instead")]] = ::apache::thrift::ServiceHandler<BoxService>;
} // namespace cpp2

namespace cpp2 {
class BoxServiceSvNull : public ::apache::thrift::ServiceHandler<BoxService> {
 public:
};

class BoxServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2::BoxService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<BoxServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  using InteractionConstructor = GeneratedAsyncProcessorBase::InteractionConstructor<BoxServiceAsyncProcessor>;
  using InteractionConstructorMap = GeneratedAsyncProcessorBase::InteractionConstructorMap<InteractionConstructor>;
  static const BoxServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
  static const BoxServiceAsyncProcessor::InteractionConstructorMap& getInteractionConstructorMap();
  std::unique_ptr<apache::thrift::Tile> createInteractionImpl(const std::string& name, int16_t) override;
 private:
  static const BoxServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
  static const BoxServiceAsyncProcessor::InteractionConstructorMap interactionConstructorMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'getABoxSession'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getABoxSession(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getABoxSession(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getABoxSession(
      apache::thrift::ContextStack* ctx,
      ::cpp2::ShouldBeBoxed const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getABoxSession(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getABoxSession'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getABox'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_BoxedInteraction_getABox(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_BoxedInteraction_getABox(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_BoxedInteraction_getABox(
      apache::thrift::ContextStack* ctx,
      ::cpp2::ShouldBeBoxed const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_BoxedInteraction_getABox(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getABox'
  //

  //
  // End of Service Methods
  //
 public:
  BoxServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2::BoxService>* iface) :
      iface_(iface) {}
  ~BoxServiceAsyncProcessor() override {}
};

} // namespace cpp2
