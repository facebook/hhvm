// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package patch

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	thrift0 "thrift/annotation/thrift"
	scope1 "thrift/annotation/scope"
	cpp2 "thrift/annotation/cpp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = thrift0.GoUnusedProtection__
var _ = scope1.GoUnusedProtection__
var _ = cpp2.GoUnusedProtection__
var GoUnusedProtection__ int;

//The meaning of the patch op field ids, in all properly formulated patch
//definitions.
//
//Patch field ids are interpreted at runtime, as a dynamic patch protocol,
//without any additional schema derived from IDL patch definitions.
type PatchOp int64
const (
  PatchOp_Assign PatchOp = 1
  PatchOp_Clear PatchOp = 2
  PatchOp_Patch PatchOp = 3
  PatchOp_EnsureUnion PatchOp = 4
  PatchOp_EnsureStruct PatchOp = 5
  PatchOp_PatchAfter PatchOp = 6
  PatchOp_Remove PatchOp = 7
  PatchOp_Add PatchOp = 8
  PatchOp_Put PatchOp = 9
  PatchOp_Unspecified PatchOp = 0
)

var PatchOpToName = map[PatchOp]string {
  PatchOp_Assign: "Assign",
  PatchOp_Clear: "Clear",
  PatchOp_Patch: "Patch",
  PatchOp_EnsureUnion: "EnsureUnion",
  PatchOp_EnsureStruct: "EnsureStruct",
  PatchOp_PatchAfter: "PatchAfter",
  PatchOp_Remove: "Remove",
  PatchOp_Add: "Add",
  PatchOp_Put: "Put",
  PatchOp_Unspecified: "Unspecified",
}

var PatchOpToValue = map[string]PatchOp {
  "Assign": PatchOp_Assign,
  "Clear": PatchOp_Clear,
  "Patch": PatchOp_Patch,
  "EnsureUnion": PatchOp_EnsureUnion,
  "EnsureStruct": PatchOp_EnsureStruct,
  "PatchAfter": PatchOp_PatchAfter,
  "Remove": PatchOp_Remove,
  "Add": PatchOp_Add,
  "Put": PatchOp_Put,
  "Unspecified": PatchOp_Unspecified,
}

var PatchOpNames = []string {
  "Assign",
  "Clear",
  "Patch",
  "EnsureUnion",
  "EnsureStruct",
  "PatchAfter",
  "Remove",
  "Add",
  "Put",
  "Unspecified",
}

var PatchOpValues = []PatchOp {
  PatchOp_Assign,
  PatchOp_Clear,
  PatchOp_Patch,
  PatchOp_EnsureUnion,
  PatchOp_EnsureStruct,
  PatchOp_PatchAfter,
  PatchOp_Remove,
  PatchOp_Add,
  PatchOp_Put,
  PatchOp_Unspecified,
}

func (p PatchOp) String() string {
  if v, ok := PatchOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func PatchOpFromString(s string) (PatchOp, error) {
  if v, ok := PatchOpToValue[s]; ok {
    return v, nil
  }
  return PatchOp(0), fmt.Errorf("not a valid PatchOp string")
}

func PatchOpPtr(v PatchOp) *PatchOp { return &v }

// An annotation that indicates a patch representation
// should be generated for the associated definition.
type GeneratePatch struct {
}

func NewGeneratePatch() *GeneratePatch {
  return &GeneratePatch{}
}

type GeneratePatchBuilder struct {
  obj *GeneratePatch
}

func NewGeneratePatchBuilder() *GeneratePatchBuilder{
  return &GeneratePatchBuilder{
    obj: NewGeneratePatch(),
  }
}

func (p GeneratePatchBuilder) Emit() *GeneratePatch{
  return &GeneratePatch{
  }
}

func (p *GeneratePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeneratePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GeneratePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeneratePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GeneratePatch({})")
}

type GenerateOptionalPatch struct {
}

func NewGenerateOptionalPatch() *GenerateOptionalPatch {
  return &GenerateOptionalPatch{}
}

type GenerateOptionalPatchBuilder struct {
  obj *GenerateOptionalPatch
}

func NewGenerateOptionalPatchBuilder() *GenerateOptionalPatchBuilder{
  return &GenerateOptionalPatchBuilder{
    obj: NewGenerateOptionalPatch(),
  }
}

func (p GenerateOptionalPatchBuilder) Emit() *GenerateOptionalPatch{
  return &GenerateOptionalPatch{
  }
}

func (p *GenerateOptionalPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GenerateOptionalPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GenerateOptionalPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GenerateOptionalPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GenerateOptionalPatch({})")
}

// A patch for a boolean value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Invert: If the bool value should be inverted.
type BoolPatch struct {
  Assign *bool `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 8
  Invert bool `thrift:"invert,9" db:"invert" json:"invert"`
}

func NewBoolPatch() *BoolPatch {
  return &BoolPatch{}
}

var BoolPatch_Assign_DEFAULT bool
func (p *BoolPatch) GetAssign() bool {
  if !p.IsSetAssign() {
    return BoolPatch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *BoolPatch) GetInvert() bool {
  return p.Invert
}
func (p *BoolPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type BoolPatchBuilder struct {
  obj *BoolPatch
}

func NewBoolPatchBuilder() *BoolPatchBuilder{
  return &BoolPatchBuilder{
    obj: NewBoolPatch(),
  }
}

func (p BoolPatchBuilder) Emit() *BoolPatch{
  return &BoolPatch{
    Assign: p.obj.Assign,
    Invert: p.obj.Invert,
  }
}

func (b *BoolPatchBuilder) Assign(assign *bool) *BoolPatchBuilder {
  b.obj.Assign = assign
  return b
}

func (b *BoolPatchBuilder) Invert(invert bool) *BoolPatchBuilder {
  b.obj.Invert = invert
  return b
}

func (b *BoolPatch) SetAssign(assign *bool) *BoolPatch {
  b.Assign = assign
  return b
}

func (b *BoolPatch) SetInvert(invert bool) *BoolPatch {
  b.Invert = invert
  return b
}

func (p *BoolPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoolPatch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *BoolPatch)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.Invert = v
  }
  return nil
}

func (p *BoolPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BoolPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoolPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *BoolPatch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("invert", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:invert: ", p), err) }
  if err := oprot.WriteBool(bool(p.Invert)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invert (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:invert: ", p), err) }
  return err
}

func (p *BoolPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  invertVal := fmt.Sprintf("%v", p.Invert)
  return fmt.Sprintf("BoolPatch({Assign:%s Invert:%s})", assignVal, invertVal)
}

// A patch for an 8-bit integer value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Add: Add to a given value.
type BytePatch struct {
  Assign *int8 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 7
  Add int8 `thrift:"add,8" db:"add" json:"add"`
}

func NewBytePatch() *BytePatch {
  return &BytePatch{}
}

var BytePatch_Assign_DEFAULT int8
func (p *BytePatch) GetAssign() int8 {
  if !p.IsSetAssign() {
    return BytePatch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *BytePatch) GetAdd() int8 {
  return p.Add
}
func (p *BytePatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type BytePatchBuilder struct {
  obj *BytePatch
}

func NewBytePatchBuilder() *BytePatchBuilder{
  return &BytePatchBuilder{
    obj: NewBytePatch(),
  }
}

func (p BytePatchBuilder) Emit() *BytePatch{
  return &BytePatch{
    Assign: p.obj.Assign,
    Add: p.obj.Add,
  }
}

func (b *BytePatchBuilder) Assign(assign *int8) *BytePatchBuilder {
  b.obj.Assign = assign
  return b
}

func (b *BytePatchBuilder) Add(add int8) *BytePatchBuilder {
  b.obj.Add = add
  return b
}

func (b *BytePatch) SetAssign(assign *int8) *BytePatch {
  b.Assign = assign
  return b
}

func (b *BytePatch) SetAdd(add int8) *BytePatch {
  b.Add = add
  return b
}

func (p *BytePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BytePatch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := int8(v)
    p.Assign = &temp
  }
  return nil
}

func (p *BytePatch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    temp := int8(v)
    p.Add = temp
  }
  return nil
}

func (p *BytePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BytePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BytePatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.BYTE, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteByte(byte(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *BytePatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.BYTE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteByte(byte(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *BytePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("BytePatch({Assign:%s Add:%s})", assignVal, addVal)
}

// A patch for a 16-bit integer value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Add: Add to a given value.
type I16Patch struct {
  Assign *int16 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 7
  Add int16 `thrift:"add,8" db:"add" json:"add"`
}

func NewI16Patch() *I16Patch {
  return &I16Patch{}
}

var I16Patch_Assign_DEFAULT int16
func (p *I16Patch) GetAssign() int16 {
  if !p.IsSetAssign() {
    return I16Patch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *I16Patch) GetAdd() int16 {
  return p.Add
}
func (p *I16Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type I16PatchBuilder struct {
  obj *I16Patch
}

func NewI16PatchBuilder() *I16PatchBuilder{
  return &I16PatchBuilder{
    obj: NewI16Patch(),
  }
}

func (p I16PatchBuilder) Emit() *I16Patch{
  return &I16Patch{
    Assign: p.obj.Assign,
    Add: p.obj.Add,
  }
}

func (i *I16PatchBuilder) Assign(assign *int16) *I16PatchBuilder {
  i.obj.Assign = assign
  return i
}

func (i *I16PatchBuilder) Add(add int16) *I16PatchBuilder {
  i.obj.Add = add
  return i
}

func (i *I16Patch) SetAssign(assign *int16) *I16Patch {
  i.Assign = assign
  return i
}

func (i *I16Patch) SetAdd(add int16) *I16Patch {
  i.Add = add
  return i
}

func (p *I16Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *I16Patch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *I16Patch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Add = v
  }
  return nil
}

func (p *I16Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("I16Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *I16Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.I16, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *I16Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteI16(int16(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *I16Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("I16Patch({Assign:%s Add:%s})", assignVal, addVal)
}

// A patch for a 32-bit integer value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Add: Add to a given value.
type I32Patch struct {
  Assign *int32 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 7
  Add int32 `thrift:"add,8" db:"add" json:"add"`
}

func NewI32Patch() *I32Patch {
  return &I32Patch{}
}

var I32Patch_Assign_DEFAULT int32
func (p *I32Patch) GetAssign() int32 {
  if !p.IsSetAssign() {
    return I32Patch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *I32Patch) GetAdd() int32 {
  return p.Add
}
func (p *I32Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type I32PatchBuilder struct {
  obj *I32Patch
}

func NewI32PatchBuilder() *I32PatchBuilder{
  return &I32PatchBuilder{
    obj: NewI32Patch(),
  }
}

func (p I32PatchBuilder) Emit() *I32Patch{
  return &I32Patch{
    Assign: p.obj.Assign,
    Add: p.obj.Add,
  }
}

func (i *I32PatchBuilder) Assign(assign *int32) *I32PatchBuilder {
  i.obj.Assign = assign
  return i
}

func (i *I32PatchBuilder) Add(add int32) *I32PatchBuilder {
  i.obj.Add = add
  return i
}

func (i *I32Patch) SetAssign(assign *int32) *I32Patch {
  i.Assign = assign
  return i
}

func (i *I32Patch) SetAdd(add int32) *I32Patch {
  i.Add = add
  return i
}

func (p *I32Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *I32Patch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *I32Patch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Add = v
  }
  return nil
}

func (p *I32Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("I32Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *I32Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *I32Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteI32(int32(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *I32Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("I32Patch({Assign:%s Add:%s})", assignVal, addVal)
}

// A patch for a 64-bit integer value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Add: Add to a given value.
type I64Patch struct {
  Assign *int64 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 7
  Add int64 `thrift:"add,8" db:"add" json:"add"`
}

func NewI64Patch() *I64Patch {
  return &I64Patch{}
}

var I64Patch_Assign_DEFAULT int64
func (p *I64Patch) GetAssign() int64 {
  if !p.IsSetAssign() {
    return I64Patch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *I64Patch) GetAdd() int64 {
  return p.Add
}
func (p *I64Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type I64PatchBuilder struct {
  obj *I64Patch
}

func NewI64PatchBuilder() *I64PatchBuilder{
  return &I64PatchBuilder{
    obj: NewI64Patch(),
  }
}

func (p I64PatchBuilder) Emit() *I64Patch{
  return &I64Patch{
    Assign: p.obj.Assign,
    Add: p.obj.Add,
  }
}

func (i *I64PatchBuilder) Assign(assign *int64) *I64PatchBuilder {
  i.obj.Assign = assign
  return i
}

func (i *I64PatchBuilder) Add(add int64) *I64PatchBuilder {
  i.obj.Add = add
  return i
}

func (i *I64Patch) SetAssign(assign *int64) *I64Patch {
  i.Assign = assign
  return i
}

func (i *I64Patch) SetAdd(add int64) *I64Patch {
  i.Add = add
  return i
}

func (p *I64Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *I64Patch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *I64Patch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Add = v
  }
  return nil
}

func (p *I64Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("I64Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *I64Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *I64Patch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteI64(int64(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *I64Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("I64Patch({Assign:%s Add:%s})", assignVal, addVal)
}

// A patch for a 32-bit floating point value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Add: Add to a given value.
type FloatPatch struct {
  Assign *float32 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 7
  Add float32 `thrift:"add,8" db:"add" json:"add"`
}

func NewFloatPatch() *FloatPatch {
  return &FloatPatch{}
}

var FloatPatch_Assign_DEFAULT float32
func (p *FloatPatch) GetAssign() float32 {
  if !p.IsSetAssign() {
    return FloatPatch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *FloatPatch) GetAdd() float32 {
  return p.Add
}
func (p *FloatPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type FloatPatchBuilder struct {
  obj *FloatPatch
}

func NewFloatPatchBuilder() *FloatPatchBuilder{
  return &FloatPatchBuilder{
    obj: NewFloatPatch(),
  }
}

func (p FloatPatchBuilder) Emit() *FloatPatch{
  return &FloatPatch{
    Assign: p.obj.Assign,
    Add: p.obj.Add,
  }
}

func (f *FloatPatchBuilder) Assign(assign *float32) *FloatPatchBuilder {
  f.obj.Assign = assign
  return f
}

func (f *FloatPatchBuilder) Add(add float32) *FloatPatchBuilder {
  f.obj.Add = add
  return f
}

func (f *FloatPatch) SetAssign(assign *float32) *FloatPatch {
  f.Assign = assign
  return f
}

func (f *FloatPatch) SetAdd(add float32) *FloatPatch {
  f.Add = add
  return f
}

func (p *FloatPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FloatPatch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *FloatPatch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Add = v
  }
  return nil
}

func (p *FloatPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("FloatPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FloatPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.FLOAT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *FloatPatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.FLOAT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteFloat(float32(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *FloatPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("FloatPatch({Assign:%s Add:%s})", assignVal, addVal)
}

// A patch for an 64-bit floating point value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Add: Add to a given value.
type DoublePatch struct {
  Assign *float64 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  // unused fields # 2 to 7
  Add float64 `thrift:"add,8" db:"add" json:"add"`
}

func NewDoublePatch() *DoublePatch {
  return &DoublePatch{}
}

var DoublePatch_Assign_DEFAULT float64
func (p *DoublePatch) GetAssign() float64 {
  if !p.IsSetAssign() {
    return DoublePatch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *DoublePatch) GetAdd() float64 {
  return p.Add
}
func (p *DoublePatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type DoublePatchBuilder struct {
  obj *DoublePatch
}

func NewDoublePatchBuilder() *DoublePatchBuilder{
  return &DoublePatchBuilder{
    obj: NewDoublePatch(),
  }
}

func (p DoublePatchBuilder) Emit() *DoublePatch{
  return &DoublePatch{
    Assign: p.obj.Assign,
    Add: p.obj.Add,
  }
}

func (d *DoublePatchBuilder) Assign(assign *float64) *DoublePatchBuilder {
  d.obj.Assign = assign
  return d
}

func (d *DoublePatchBuilder) Add(add float64) *DoublePatchBuilder {
  d.obj.Add = add
  return d
}

func (d *DoublePatch) SetAssign(assign *float64) *DoublePatch {
  d.Assign = assign
  return d
}

func (d *DoublePatch) SetAdd(add float64) *DoublePatch {
  d.Add = add
  return d
}

func (p *DoublePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DoublePatch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *DoublePatch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Add = v
  }
  return nil
}

func (p *DoublePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DoublePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DoublePatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.DOUBLE, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *DoublePatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:add: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:add: ", p), err) }
  return err
}

func (p *DoublePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("DoublePatch({Assign:%s Add:%s})", assignVal, addVal)
}

// A patch for a string value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
//  - Clear: Clear a given string.
//  - Prepend: Prepend to a given value.
//  - Append: Append to a given value.
type StringPatch struct {
  Assign *string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused fields # 3 to 7
  Prepend string `thrift:"prepend,8" db:"prepend" json:"prepend"`
  Append string `thrift:"append,9" db:"append" json:"append"`
}

func NewStringPatch() *StringPatch {
  return &StringPatch{}
}

var StringPatch_Assign_DEFAULT string
func (p *StringPatch) GetAssign() string {
  if !p.IsSetAssign() {
    return StringPatch_Assign_DEFAULT
  }
return *p.Assign
}

func (p *StringPatch) GetClear() bool {
  return p.Clear
}

func (p *StringPatch) GetPrepend() string {
  return p.Prepend
}

func (p *StringPatch) GetAppend() string {
  return p.Append
}
func (p *StringPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type StringPatchBuilder struct {
  obj *StringPatch
}

func NewStringPatchBuilder() *StringPatchBuilder{
  return &StringPatchBuilder{
    obj: NewStringPatch(),
  }
}

func (p StringPatchBuilder) Emit() *StringPatch{
  return &StringPatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Prepend: p.obj.Prepend,
    Append: p.obj.Append,
  }
}

func (s *StringPatchBuilder) Assign(assign *string) *StringPatchBuilder {
  s.obj.Assign = assign
  return s
}

func (s *StringPatchBuilder) Clear(clear bool) *StringPatchBuilder {
  s.obj.Clear = clear
  return s
}

func (s *StringPatchBuilder) Prepend(prepend string) *StringPatchBuilder {
  s.obj.Prepend = prepend
  return s
}

func (s *StringPatchBuilder) Append(append string) *StringPatchBuilder {
  s.obj.Append = append
  return s
}

func (s *StringPatch) SetAssign(assign *string) *StringPatch {
  s.Assign = assign
  return s
}

func (s *StringPatch) SetClear(clear bool) *StringPatch {
  s.Clear = clear
  return s
}

func (s *StringPatch) SetPrepend(prepend string) *StringPatch {
  s.Prepend = prepend
  return s
}

func (s *StringPatch) SetAppend(append string) *StringPatch {
  s.Append = append
  return s
}

func (p *StringPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StringPatch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = &v
  }
  return nil
}

func (p *StringPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *StringPatch)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Prepend = v
  }
  return nil
}

func (p *StringPatch)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.Append = v
  }
  return nil
}

func (p *StringPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StringPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StringPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteString(string(*p.Assign)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *StringPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *StringPatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prepend", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:prepend: ", p), err) }
  if err := oprot.WriteString(string(p.Prepend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prepend (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:prepend: ", p), err) }
  return err
}

func (p *StringPatch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("append", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:append: ", p), err) }
  if err := oprot.WriteString(string(p.Append)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.append (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:append: ", p), err) }
  return err
}

func (p *StringPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", *p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  prependVal := fmt.Sprintf("%v", p.Prepend)
  appendVal := fmt.Sprintf("%v", p.Append)
  return fmt.Sprintf("StringPatch({Assign:%s Clear:%s Prepend:%s Append:%s})", assignVal, clearVal, prependVal, appendVal)
}

// A patch for a binary value.
// 
// Attributes:
//  - Assign: Assign to a given value.
// 
// If set, all other patch operations are ignored.
type BinaryPatch struct {
  Assign []byte `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
}

func NewBinaryPatch() *BinaryPatch {
  return &BinaryPatch{}
}

var BinaryPatch_Assign_DEFAULT []byte

func (p *BinaryPatch) GetAssign() []byte {
  return p.Assign
}
func (p *BinaryPatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type BinaryPatchBuilder struct {
  obj *BinaryPatch
}

func NewBinaryPatchBuilder() *BinaryPatchBuilder{
  return &BinaryPatchBuilder{
    obj: NewBinaryPatch(),
  }
}

func (p BinaryPatchBuilder) Emit() *BinaryPatch{
  return &BinaryPatch{
    Assign: p.obj.Assign,
  }
}

func (b *BinaryPatchBuilder) Assign(assign []byte) *BinaryPatchBuilder {
  b.obj.Assign = assign
  return b
}

func (b *BinaryPatch) SetAssign(assign []byte) *BinaryPatch {
  b.Assign = assign
  return b
}

func (p *BinaryPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BinaryPatch)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Assign = v
  }
  return nil
}

func (p *BinaryPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BinaryPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BinaryPatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteBinary(p.Assign); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.assign (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *BinaryPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  return fmt.Sprintf("BinaryPatch({Assign:%s})", assignVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalBoolPatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *BoolPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *bool `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *BoolPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalBoolPatch() *OptionalBoolPatch {
  return &OptionalBoolPatch{
    PatchPrior: NewBoolPatch(),
    Patch: NewBoolPatch(),
  }
}


func (p *OptionalBoolPatch) GetClear() bool {
  return p.Clear
}
var OptionalBoolPatch_PatchPrior_DEFAULT *BoolPatch
func (p *OptionalBoolPatch) GetPatchPrior() *BoolPatch {
  if !p.IsSetPatchPrior() {
    return OptionalBoolPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalBoolPatch_Ensure_DEFAULT bool
func (p *OptionalBoolPatch) GetEnsure() bool {
  if !p.IsSetEnsure() {
    return OptionalBoolPatch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalBoolPatch_Patch_DEFAULT *BoolPatch
func (p *OptionalBoolPatch) GetPatch() *BoolPatch {
  if !p.IsSetPatch() {
    return OptionalBoolPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalBoolPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalBoolPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalBoolPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalBoolPatchBuilder struct {
  obj *OptionalBoolPatch
}

func NewOptionalBoolPatchBuilder() *OptionalBoolPatchBuilder{
  return &OptionalBoolPatchBuilder{
    obj: NewOptionalBoolPatch(),
  }
}

func (p OptionalBoolPatchBuilder) Emit() *OptionalBoolPatch{
  return &OptionalBoolPatch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalBoolPatchBuilder) Clear(clear bool) *OptionalBoolPatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalBoolPatchBuilder) PatchPrior(patchPrior *BoolPatch) *OptionalBoolPatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalBoolPatchBuilder) Ensure(ensure *bool) *OptionalBoolPatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalBoolPatchBuilder) Patch(patch *BoolPatch) *OptionalBoolPatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalBoolPatch) SetClear(clear bool) *OptionalBoolPatch {
  o.Clear = clear
  return o
}

func (o *OptionalBoolPatch) SetPatchPrior(patchPrior *BoolPatch) *OptionalBoolPatch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalBoolPatch) SetEnsure(ensure *bool) *OptionalBoolPatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalBoolPatch) SetPatch(patch *BoolPatch) *OptionalBoolPatch {
  o.Patch = patch
  return o
}

func (p *OptionalBoolPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalBoolPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalBoolPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewBoolPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalBoolPatch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalBoolPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewBoolPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalBoolPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalBoolPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalBoolPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalBoolPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalBoolPatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalBoolPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalBoolPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalBoolPatch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalBytePatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *BytePatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *int8 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *BytePatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalBytePatch() *OptionalBytePatch {
  return &OptionalBytePatch{
    PatchPrior: NewBytePatch(),
    Patch: NewBytePatch(),
  }
}


func (p *OptionalBytePatch) GetClear() bool {
  return p.Clear
}
var OptionalBytePatch_PatchPrior_DEFAULT *BytePatch
func (p *OptionalBytePatch) GetPatchPrior() *BytePatch {
  if !p.IsSetPatchPrior() {
    return OptionalBytePatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalBytePatch_Ensure_DEFAULT int8
func (p *OptionalBytePatch) GetEnsure() int8 {
  if !p.IsSetEnsure() {
    return OptionalBytePatch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalBytePatch_Patch_DEFAULT *BytePatch
func (p *OptionalBytePatch) GetPatch() *BytePatch {
  if !p.IsSetPatch() {
    return OptionalBytePatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalBytePatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalBytePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalBytePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalBytePatchBuilder struct {
  obj *OptionalBytePatch
}

func NewOptionalBytePatchBuilder() *OptionalBytePatchBuilder{
  return &OptionalBytePatchBuilder{
    obj: NewOptionalBytePatch(),
  }
}

func (p OptionalBytePatchBuilder) Emit() *OptionalBytePatch{
  return &OptionalBytePatch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalBytePatchBuilder) Clear(clear bool) *OptionalBytePatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalBytePatchBuilder) PatchPrior(patchPrior *BytePatch) *OptionalBytePatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalBytePatchBuilder) Ensure(ensure *int8) *OptionalBytePatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalBytePatchBuilder) Patch(patch *BytePatch) *OptionalBytePatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalBytePatch) SetClear(clear bool) *OptionalBytePatch {
  o.Clear = clear
  return o
}

func (o *OptionalBytePatch) SetPatchPrior(patchPrior *BytePatch) *OptionalBytePatch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalBytePatch) SetEnsure(ensure *int8) *OptionalBytePatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalBytePatch) SetPatch(patch *BytePatch) *OptionalBytePatch {
  o.Patch = patch
  return o
}

func (p *OptionalBytePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalBytePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalBytePatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewBytePatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalBytePatch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := int8(v)
    p.Ensure = &temp
  }
  return nil
}

func (p *OptionalBytePatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewBytePatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalBytePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalBytePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalBytePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalBytePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalBytePatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.BYTE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteByte(byte(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalBytePatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalBytePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalBytePatch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalI16Patch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *I16Patch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *int16 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *I16Patch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalI16Patch() *OptionalI16Patch {
  return &OptionalI16Patch{
    PatchPrior: NewI16Patch(),
    Patch: NewI16Patch(),
  }
}


func (p *OptionalI16Patch) GetClear() bool {
  return p.Clear
}
var OptionalI16Patch_PatchPrior_DEFAULT *I16Patch
func (p *OptionalI16Patch) GetPatchPrior() *I16Patch {
  if !p.IsSetPatchPrior() {
    return OptionalI16Patch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalI16Patch_Ensure_DEFAULT int16
func (p *OptionalI16Patch) GetEnsure() int16 {
  if !p.IsSetEnsure() {
    return OptionalI16Patch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalI16Patch_Patch_DEFAULT *I16Patch
func (p *OptionalI16Patch) GetPatch() *I16Patch {
  if !p.IsSetPatch() {
    return OptionalI16Patch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalI16Patch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalI16Patch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalI16Patch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalI16PatchBuilder struct {
  obj *OptionalI16Patch
}

func NewOptionalI16PatchBuilder() *OptionalI16PatchBuilder{
  return &OptionalI16PatchBuilder{
    obj: NewOptionalI16Patch(),
  }
}

func (p OptionalI16PatchBuilder) Emit() *OptionalI16Patch{
  return &OptionalI16Patch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalI16PatchBuilder) Clear(clear bool) *OptionalI16PatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalI16PatchBuilder) PatchPrior(patchPrior *I16Patch) *OptionalI16PatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalI16PatchBuilder) Ensure(ensure *int16) *OptionalI16PatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalI16PatchBuilder) Patch(patch *I16Patch) *OptionalI16PatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalI16Patch) SetClear(clear bool) *OptionalI16Patch {
  o.Clear = clear
  return o
}

func (o *OptionalI16Patch) SetPatchPrior(patchPrior *I16Patch) *OptionalI16Patch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalI16Patch) SetEnsure(ensure *int16) *OptionalI16Patch {
  o.Ensure = ensure
  return o
}

func (o *OptionalI16Patch) SetPatch(patch *I16Patch) *OptionalI16Patch {
  o.Patch = patch
  return o
}

func (p *OptionalI16Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalI16Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalI16Patch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewI16Patch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalI16Patch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalI16Patch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewI16Patch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalI16Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalI16Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalI16Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalI16Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalI16Patch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.I16, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalI16Patch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalI16Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalI16Patch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalI32Patch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *I32Patch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *int32 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *I32Patch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalI32Patch() *OptionalI32Patch {
  return &OptionalI32Patch{
    PatchPrior: NewI32Patch(),
    Patch: NewI32Patch(),
  }
}


func (p *OptionalI32Patch) GetClear() bool {
  return p.Clear
}
var OptionalI32Patch_PatchPrior_DEFAULT *I32Patch
func (p *OptionalI32Patch) GetPatchPrior() *I32Patch {
  if !p.IsSetPatchPrior() {
    return OptionalI32Patch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalI32Patch_Ensure_DEFAULT int32
func (p *OptionalI32Patch) GetEnsure() int32 {
  if !p.IsSetEnsure() {
    return OptionalI32Patch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalI32Patch_Patch_DEFAULT *I32Patch
func (p *OptionalI32Patch) GetPatch() *I32Patch {
  if !p.IsSetPatch() {
    return OptionalI32Patch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalI32Patch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalI32Patch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalI32Patch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalI32PatchBuilder struct {
  obj *OptionalI32Patch
}

func NewOptionalI32PatchBuilder() *OptionalI32PatchBuilder{
  return &OptionalI32PatchBuilder{
    obj: NewOptionalI32Patch(),
  }
}

func (p OptionalI32PatchBuilder) Emit() *OptionalI32Patch{
  return &OptionalI32Patch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalI32PatchBuilder) Clear(clear bool) *OptionalI32PatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalI32PatchBuilder) PatchPrior(patchPrior *I32Patch) *OptionalI32PatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalI32PatchBuilder) Ensure(ensure *int32) *OptionalI32PatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalI32PatchBuilder) Patch(patch *I32Patch) *OptionalI32PatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalI32Patch) SetClear(clear bool) *OptionalI32Patch {
  o.Clear = clear
  return o
}

func (o *OptionalI32Patch) SetPatchPrior(patchPrior *I32Patch) *OptionalI32Patch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalI32Patch) SetEnsure(ensure *int32) *OptionalI32Patch {
  o.Ensure = ensure
  return o
}

func (o *OptionalI32Patch) SetPatch(patch *I32Patch) *OptionalI32Patch {
  o.Patch = patch
  return o
}

func (p *OptionalI32Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalI32Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalI32Patch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewI32Patch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalI32Patch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalI32Patch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewI32Patch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalI32Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalI32Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalI32Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalI32Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalI32Patch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalI32Patch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalI32Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalI32Patch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalI64Patch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *I64Patch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *int64 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *I64Patch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalI64Patch() *OptionalI64Patch {
  return &OptionalI64Patch{
    PatchPrior: NewI64Patch(),
    Patch: NewI64Patch(),
  }
}


func (p *OptionalI64Patch) GetClear() bool {
  return p.Clear
}
var OptionalI64Patch_PatchPrior_DEFAULT *I64Patch
func (p *OptionalI64Patch) GetPatchPrior() *I64Patch {
  if !p.IsSetPatchPrior() {
    return OptionalI64Patch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalI64Patch_Ensure_DEFAULT int64
func (p *OptionalI64Patch) GetEnsure() int64 {
  if !p.IsSetEnsure() {
    return OptionalI64Patch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalI64Patch_Patch_DEFAULT *I64Patch
func (p *OptionalI64Patch) GetPatch() *I64Patch {
  if !p.IsSetPatch() {
    return OptionalI64Patch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalI64Patch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalI64Patch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalI64Patch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalI64PatchBuilder struct {
  obj *OptionalI64Patch
}

func NewOptionalI64PatchBuilder() *OptionalI64PatchBuilder{
  return &OptionalI64PatchBuilder{
    obj: NewOptionalI64Patch(),
  }
}

func (p OptionalI64PatchBuilder) Emit() *OptionalI64Patch{
  return &OptionalI64Patch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalI64PatchBuilder) Clear(clear bool) *OptionalI64PatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalI64PatchBuilder) PatchPrior(patchPrior *I64Patch) *OptionalI64PatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalI64PatchBuilder) Ensure(ensure *int64) *OptionalI64PatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalI64PatchBuilder) Patch(patch *I64Patch) *OptionalI64PatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalI64Patch) SetClear(clear bool) *OptionalI64Patch {
  o.Clear = clear
  return o
}

func (o *OptionalI64Patch) SetPatchPrior(patchPrior *I64Patch) *OptionalI64Patch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalI64Patch) SetEnsure(ensure *int64) *OptionalI64Patch {
  o.Ensure = ensure
  return o
}

func (o *OptionalI64Patch) SetPatch(patch *I64Patch) *OptionalI64Patch {
  o.Patch = patch
  return o
}

func (p *OptionalI64Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalI64Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalI64Patch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewI64Patch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalI64Patch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalI64Patch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewI64Patch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalI64Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalI64Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalI64Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalI64Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalI64Patch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalI64Patch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalI64Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalI64Patch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalFloatPatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *FloatPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *float32 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *FloatPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalFloatPatch() *OptionalFloatPatch {
  return &OptionalFloatPatch{
    PatchPrior: NewFloatPatch(),
    Patch: NewFloatPatch(),
  }
}


func (p *OptionalFloatPatch) GetClear() bool {
  return p.Clear
}
var OptionalFloatPatch_PatchPrior_DEFAULT *FloatPatch
func (p *OptionalFloatPatch) GetPatchPrior() *FloatPatch {
  if !p.IsSetPatchPrior() {
    return OptionalFloatPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalFloatPatch_Ensure_DEFAULT float32
func (p *OptionalFloatPatch) GetEnsure() float32 {
  if !p.IsSetEnsure() {
    return OptionalFloatPatch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalFloatPatch_Patch_DEFAULT *FloatPatch
func (p *OptionalFloatPatch) GetPatch() *FloatPatch {
  if !p.IsSetPatch() {
    return OptionalFloatPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalFloatPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalFloatPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalFloatPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalFloatPatchBuilder struct {
  obj *OptionalFloatPatch
}

func NewOptionalFloatPatchBuilder() *OptionalFloatPatchBuilder{
  return &OptionalFloatPatchBuilder{
    obj: NewOptionalFloatPatch(),
  }
}

func (p OptionalFloatPatchBuilder) Emit() *OptionalFloatPatch{
  return &OptionalFloatPatch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalFloatPatchBuilder) Clear(clear bool) *OptionalFloatPatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalFloatPatchBuilder) PatchPrior(patchPrior *FloatPatch) *OptionalFloatPatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalFloatPatchBuilder) Ensure(ensure *float32) *OptionalFloatPatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalFloatPatchBuilder) Patch(patch *FloatPatch) *OptionalFloatPatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalFloatPatch) SetClear(clear bool) *OptionalFloatPatch {
  o.Clear = clear
  return o
}

func (o *OptionalFloatPatch) SetPatchPrior(patchPrior *FloatPatch) *OptionalFloatPatch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalFloatPatch) SetEnsure(ensure *float32) *OptionalFloatPatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalFloatPatch) SetPatch(patch *FloatPatch) *OptionalFloatPatch {
  o.Patch = patch
  return o
}

func (p *OptionalFloatPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalFloatPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalFloatPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewFloatPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalFloatPatch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalFloatPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewFloatPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalFloatPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalFloatPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalFloatPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalFloatPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalFloatPatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.FLOAT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalFloatPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalFloatPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalFloatPatch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalDoublePatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *DoublePatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *float64 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *DoublePatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalDoublePatch() *OptionalDoublePatch {
  return &OptionalDoublePatch{
    PatchPrior: NewDoublePatch(),
    Patch: NewDoublePatch(),
  }
}


func (p *OptionalDoublePatch) GetClear() bool {
  return p.Clear
}
var OptionalDoublePatch_PatchPrior_DEFAULT *DoublePatch
func (p *OptionalDoublePatch) GetPatchPrior() *DoublePatch {
  if !p.IsSetPatchPrior() {
    return OptionalDoublePatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalDoublePatch_Ensure_DEFAULT float64
func (p *OptionalDoublePatch) GetEnsure() float64 {
  if !p.IsSetEnsure() {
    return OptionalDoublePatch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalDoublePatch_Patch_DEFAULT *DoublePatch
func (p *OptionalDoublePatch) GetPatch() *DoublePatch {
  if !p.IsSetPatch() {
    return OptionalDoublePatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalDoublePatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalDoublePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalDoublePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalDoublePatchBuilder struct {
  obj *OptionalDoublePatch
}

func NewOptionalDoublePatchBuilder() *OptionalDoublePatchBuilder{
  return &OptionalDoublePatchBuilder{
    obj: NewOptionalDoublePatch(),
  }
}

func (p OptionalDoublePatchBuilder) Emit() *OptionalDoublePatch{
  return &OptionalDoublePatch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalDoublePatchBuilder) Clear(clear bool) *OptionalDoublePatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalDoublePatchBuilder) PatchPrior(patchPrior *DoublePatch) *OptionalDoublePatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalDoublePatchBuilder) Ensure(ensure *float64) *OptionalDoublePatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalDoublePatchBuilder) Patch(patch *DoublePatch) *OptionalDoublePatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalDoublePatch) SetClear(clear bool) *OptionalDoublePatch {
  o.Clear = clear
  return o
}

func (o *OptionalDoublePatch) SetPatchPrior(patchPrior *DoublePatch) *OptionalDoublePatch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalDoublePatch) SetEnsure(ensure *float64) *OptionalDoublePatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalDoublePatch) SetPatch(patch *DoublePatch) *OptionalDoublePatch {
  o.Patch = patch
  return o
}

func (p *OptionalDoublePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalDoublePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalDoublePatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewDoublePatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalDoublePatch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalDoublePatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewDoublePatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalDoublePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalDoublePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalDoublePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalDoublePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalDoublePatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalDoublePatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalDoublePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalDoublePatch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalStringPatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *StringPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure *string `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *StringPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalStringPatch() *OptionalStringPatch {
  return &OptionalStringPatch{
    PatchPrior: NewStringPatch(),
    Patch: NewStringPatch(),
  }
}


func (p *OptionalStringPatch) GetClear() bool {
  return p.Clear
}
var OptionalStringPatch_PatchPrior_DEFAULT *StringPatch
func (p *OptionalStringPatch) GetPatchPrior() *StringPatch {
  if !p.IsSetPatchPrior() {
    return OptionalStringPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalStringPatch_Ensure_DEFAULT string
func (p *OptionalStringPatch) GetEnsure() string {
  if !p.IsSetEnsure() {
    return OptionalStringPatch_Ensure_DEFAULT
  }
return *p.Ensure
}
var OptionalStringPatch_Patch_DEFAULT *StringPatch
func (p *OptionalStringPatch) GetPatch() *StringPatch {
  if !p.IsSetPatch() {
    return OptionalStringPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalStringPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalStringPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalStringPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalStringPatchBuilder struct {
  obj *OptionalStringPatch
}

func NewOptionalStringPatchBuilder() *OptionalStringPatchBuilder{
  return &OptionalStringPatchBuilder{
    obj: NewOptionalStringPatch(),
  }
}

func (p OptionalStringPatchBuilder) Emit() *OptionalStringPatch{
  return &OptionalStringPatch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalStringPatchBuilder) Clear(clear bool) *OptionalStringPatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalStringPatchBuilder) PatchPrior(patchPrior *StringPatch) *OptionalStringPatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalStringPatchBuilder) Ensure(ensure *string) *OptionalStringPatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalStringPatchBuilder) Patch(patch *StringPatch) *OptionalStringPatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalStringPatch) SetClear(clear bool) *OptionalStringPatch {
  o.Clear = clear
  return o
}

func (o *OptionalStringPatch) SetPatchPrior(patchPrior *StringPatch) *OptionalStringPatch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalStringPatch) SetEnsure(ensure *string) *OptionalStringPatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalStringPatch) SetPatch(patch *StringPatch) *OptionalStringPatch {
  o.Patch = patch
  return o
}

func (p *OptionalStringPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalStringPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalStringPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewStringPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalStringPatch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = &v
  }
  return nil
}

func (p *OptionalStringPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewStringPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalStringPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalStringPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalStringPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalStringPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalStringPatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteString(string(*p.Ensure)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalStringPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalStringPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", *p.Ensure)
  }
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalStringPatch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - PatchPrior: Patches any previously set values. Applies second.
//  - Ensure: Assigns the value, if not already set to the same field. Applies third.
//  - Patch: Patches any set value, including newly set values. Applies last.
type OptionalBinaryPatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  PatchPrior *BinaryPatch `thrift:"patchPrior,3" db:"patchPrior" json:"patchPrior"`
  Ensure []byte `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  // unused field # 5
  Patch *BinaryPatch `thrift:"patch,6" db:"patch" json:"patch"`
}

func NewOptionalBinaryPatch() *OptionalBinaryPatch {
  return &OptionalBinaryPatch{
    PatchPrior: NewBinaryPatch(),
    Patch: NewBinaryPatch(),
  }
}


func (p *OptionalBinaryPatch) GetClear() bool {
  return p.Clear
}
var OptionalBinaryPatch_PatchPrior_DEFAULT *BinaryPatch
func (p *OptionalBinaryPatch) GetPatchPrior() *BinaryPatch {
  if !p.IsSetPatchPrior() {
    return OptionalBinaryPatch_PatchPrior_DEFAULT
  }
return p.PatchPrior
}
var OptionalBinaryPatch_Ensure_DEFAULT []byte

func (p *OptionalBinaryPatch) GetEnsure() []byte {
  return p.Ensure
}
var OptionalBinaryPatch_Patch_DEFAULT *BinaryPatch
func (p *OptionalBinaryPatch) GetPatch() *BinaryPatch {
  if !p.IsSetPatch() {
    return OptionalBinaryPatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *OptionalBinaryPatch) IsSetPatchPrior() bool {
  return p != nil && p.PatchPrior != nil
}

func (p *OptionalBinaryPatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalBinaryPatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type OptionalBinaryPatchBuilder struct {
  obj *OptionalBinaryPatch
}

func NewOptionalBinaryPatchBuilder() *OptionalBinaryPatchBuilder{
  return &OptionalBinaryPatchBuilder{
    obj: NewOptionalBinaryPatch(),
  }
}

func (p OptionalBinaryPatchBuilder) Emit() *OptionalBinaryPatch{
  return &OptionalBinaryPatch{
    Clear: p.obj.Clear,
    PatchPrior: p.obj.PatchPrior,
    Ensure: p.obj.Ensure,
    Patch: p.obj.Patch,
  }
}

func (o *OptionalBinaryPatchBuilder) Clear(clear bool) *OptionalBinaryPatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalBinaryPatchBuilder) PatchPrior(patchPrior *BinaryPatch) *OptionalBinaryPatchBuilder {
  o.obj.PatchPrior = patchPrior
  return o
}

func (o *OptionalBinaryPatchBuilder) Ensure(ensure []byte) *OptionalBinaryPatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalBinaryPatchBuilder) Patch(patch *BinaryPatch) *OptionalBinaryPatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalBinaryPatch) SetClear(clear bool) *OptionalBinaryPatch {
  o.Clear = clear
  return o
}

func (o *OptionalBinaryPatch) SetPatchPrior(patchPrior *BinaryPatch) *OptionalBinaryPatch {
  o.PatchPrior = patchPrior
  return o
}

func (o *OptionalBinaryPatch) SetEnsure(ensure []byte) *OptionalBinaryPatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalBinaryPatch) SetPatch(patch *BinaryPatch) *OptionalBinaryPatch {
  o.Patch = patch
  return o
}

func (p *OptionalBinaryPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalBinaryPatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalBinaryPatch)  ReadField3(iprot thrift.Protocol) error {
  p.PatchPrior = NewBinaryPatch()
  if err := p.PatchPrior.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchPrior), err)
  }
  return nil
}

func (p *OptionalBinaryPatch)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Ensure = v
  }
  return nil
}

func (p *OptionalBinaryPatch)  ReadField6(iprot thrift.Protocol) error {
  p.Patch = NewBinaryPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalBinaryPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalBinaryPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalBinaryPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalBinaryPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patchPrior: ", p), err) }
  if err := p.PatchPrior.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchPrior), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patchPrior: ", p), err) }
  return err
}

func (p *OptionalBinaryPatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteBinary(p.Ensure); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ensure (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalBinaryPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:patch: ", p), err) }
  return err
}

func (p *OptionalBinaryPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchPriorVal string
  if p.PatchPrior == nil {
    patchPriorVal = "<nil>"
  } else {
    patchPriorVal = fmt.Sprintf("%v", p.PatchPrior)
  }
  ensureVal := fmt.Sprintf("%v", p.Ensure)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("OptionalBinaryPatch({Clear:%s PatchPrior:%s Ensure:%s Patch:%s})", clearVal, patchPriorVal, ensureVal, patchVal)
}

