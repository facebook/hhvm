// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var GoUnusedProtection__ int;

type EmptyEnum int64
const (
)

var EmptyEnumToName = map[EmptyEnum]string {
}

var EmptyEnumToValue = map[string]EmptyEnum {
}

var EmptyEnumNames = []string {
}

var EmptyEnumValues = []EmptyEnum {
}

func (p EmptyEnum) String() string {
  if v, ok := EmptyEnumToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func EmptyEnumFromString(s string) (EmptyEnum, error) {
  if v, ok := EmptyEnumToValue[s]; ok {
    return v, nil
  }
  return EmptyEnum(0), fmt.Errorf("not a valid EmptyEnum string")
}

func EmptyEnumPtr(v EmptyEnum) *EmptyEnum { return &v }

type City int64
const (
  City_NYC City = 0
  City_MPK City = 1
  City_SEA City = 2
  City_LON City = 3
)

var CityToName = map[City]string {
  City_NYC: "NYC",
  City_MPK: "MPK",
  City_SEA: "SEA",
  City_LON: "LON",
}

var CityToValue = map[string]City {
  "NYC": City_NYC,
  "MPK": City_MPK,
  "SEA": City_SEA,
  "LON": City_LON,
}

var CityNames = []string {
  "NYC",
  "MPK",
  "SEA",
  "LON",
}

var CityValues = []City {
  City_NYC,
  City_MPK,
  City_SEA,
  City_LON,
}

func (p City) String() string {
  if v, ok := CityToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func CityFromString(s string) (City, error) {
  if v, ok := CityToValue[s]; ok {
    return v, nil
  }
  return City(0), fmt.Errorf("not a valid City string")
}

func CityPtr(v City) *City { return &v }

type Company int64
const (
  Company_FACEBOOK Company = 0
  Company_WHATSAPP Company = 1
  Company_OCULUS Company = 2
  Company_INSTAGRAM Company = 3
)

var CompanyToName = map[Company]string {
  Company_FACEBOOK: "FACEBOOK",
  Company_WHATSAPP: "WHATSAPP",
  Company_OCULUS: "OCULUS",
  Company_INSTAGRAM: "INSTAGRAM",
}

var CompanyToValue = map[string]Company {
  "FACEBOOK": Company_FACEBOOK,
  "WHATSAPP": Company_WHATSAPP,
  "OCULUS": Company_OCULUS,
  "INSTAGRAM": Company_INSTAGRAM,
}

var CompanyNames = []string {
  "FACEBOOK",
  "WHATSAPP",
  "OCULUS",
  "INSTAGRAM",
}

var CompanyValues = []Company {
  Company_FACEBOOK,
  Company_WHATSAPP,
  Company_OCULUS,
  Company_INSTAGRAM,
}

func (p Company) String() string {
  if v, ok := CompanyToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func CompanyFromString(s string) (Company, error) {
  if v, ok := CompanyToValue[s]; ok {
    return v, nil
  }
  return Company(0), fmt.Errorf("not a valid Company string")
}

func CompanyPtr(v Company) *Company { return &v }

type MyCompany = Company

func MyCompanyPtr(v MyCompany) *MyCompany { return &v }

type MyStringIdentifier = string

func MyStringIdentifierPtr(v MyStringIdentifier) *MyStringIdentifier { return &v }

type MyIntIdentifier = int32

func MyIntIdentifierPtr(v MyIntIdentifier) *MyIntIdentifier { return &v }

type MyMapIdentifier = map[string]string

func MyMapIdentifierPtr(v MyMapIdentifier) *MyMapIdentifier { return &v }

// Attributes:
//  - Weeks
//  - Title
//  - Employer
//  - Compensation
//  - School
type Internship struct {
  Weeks int32 `thrift:"weeks,1,required" db:"weeks" json:"weeks"`
  Title string `thrift:"title,2" db:"title" json:"title"`
  Employer *Company `thrift:"employer,3,optional" db:"employer" json:"employer,omitempty"`
  Compensation *float64 `thrift:"compensation,4,optional" db:"compensation" json:"compensation,omitempty"`
  School *string `thrift:"school,5,optional" db:"school" json:"school,omitempty"`
}

func NewInternship() *Internship {
  return &Internship{}
}


func (p *Internship) GetWeeks() int32 {
  return p.Weeks
}

func (p *Internship) GetTitle() string {
  return p.Title
}
var Internship_Employer_DEFAULT Company
func (p *Internship) GetEmployer() Company {
  if !p.IsSetEmployer() {
    return Internship_Employer_DEFAULT
  }
  return *p.Employer
}
var Internship_Compensation_DEFAULT float64
func (p *Internship) GetCompensation() float64 {
  if !p.IsSetCompensation() {
    return Internship_Compensation_DEFAULT
  }
  return *p.Compensation
}
var Internship_School_DEFAULT string
func (p *Internship) GetSchool() string {
  if !p.IsSetSchool() {
    return Internship_School_DEFAULT
  }
  return *p.School
}
func (p *Internship) IsSetEmployer() bool {
  return p != nil && p.Employer != nil
}

func (p *Internship) IsSetCompensation() bool {
  return p != nil && p.Compensation != nil
}

func (p *Internship) IsSetSchool() bool {
  return p != nil && p.School != nil
}

type InternshipBuilder struct {
  obj *Internship
}

func NewInternshipBuilder() *InternshipBuilder{
  return &InternshipBuilder{
    obj: NewInternship(),
  }
}

func (p InternshipBuilder) Emit() *Internship{
  return &Internship{
    Weeks: p.obj.Weeks,
    Title: p.obj.Title,
    Employer: p.obj.Employer,
    Compensation: p.obj.Compensation,
    School: p.obj.School,
  }
}

func (i *InternshipBuilder) Weeks(weeks int32) *InternshipBuilder {
  i.obj.Weeks = weeks
  return i
}

func (i *InternshipBuilder) Title(title string) *InternshipBuilder {
  i.obj.Title = title
  return i
}

func (i *InternshipBuilder) Employer(employer *Company) *InternshipBuilder {
  i.obj.Employer = employer
  return i
}

func (i *InternshipBuilder) Compensation(compensation *float64) *InternshipBuilder {
  i.obj.Compensation = compensation
  return i
}

func (i *InternshipBuilder) School(school *string) *InternshipBuilder {
  i.obj.School = school
  return i
}

func (i *Internship) SetWeeks(weeks int32) *Internship {
  i.Weeks = weeks
  return i
}

func (i *Internship) SetTitle(title string) *Internship {
  i.Title = title
  return i
}

func (i *Internship) SetEmployer(employer *Company) *Internship {
  i.Employer = employer
  return i
}

func (i *Internship) SetCompensation(compensation *float64) *Internship {
  i.Compensation = compensation
  return i
}

func (i *Internship) SetSchool(school *string) *Internship {
  i.School = school
  return i
}

func (p *Internship) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetWeeks bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetWeeks = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetWeeks{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Weeks is not set"));
  }
  return nil
}

func (p *Internship)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Weeks = v
  }
  return nil
}

func (p *Internship)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Title = v
  }
  return nil
}

func (p *Internship)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := Company(v)
    p.Employer = &temp
  }
  return nil
}

func (p *Internship)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Compensation = &v
  }
  return nil
}

func (p *Internship)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.School = &v
  }
  return nil
}

func (p *Internship) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Internship"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Internship) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("weeks", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:weeks: ", p), err) }
  if err := oprot.WriteI32(int32(p.Weeks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weeks (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:weeks: ", p), err) }
  return err
}

func (p *Internship) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *Internship) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetEmployer() {
    if err := oprot.WriteFieldBegin("employer", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:employer: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Employer)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.employer (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:employer: ", p), err) }
  }
  return err
}

func (p *Internship) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetCompensation() {
    if err := oprot.WriteFieldBegin("compensation", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compensation: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Compensation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.compensation (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compensation: ", p), err) }
  }
  return err
}

func (p *Internship) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetSchool() {
    if err := oprot.WriteFieldBegin("school", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:school: ", p), err) }
    if err := oprot.WriteString(string(*p.School)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.school (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:school: ", p), err) }
  }
  return err
}

func (p *Internship) String() string {
  if p == nil {
    return "<nil>"
  }

  weeksVal := fmt.Sprintf("%v", p.Weeks)
  titleVal := fmt.Sprintf("%v", p.Title)
  var employerVal string
  if p.Employer == nil {
    employerVal = "<nil>"
  } else {
    employerVal = fmt.Sprintf("%v", *p.Employer)
  }
  var compensationVal string
  if p.Compensation == nil {
    compensationVal = "<nil>"
  } else {
    compensationVal = fmt.Sprintf("%v", *p.Compensation)
  }
  var schoolVal string
  if p.School == nil {
    schoolVal = "<nil>"
  } else {
    schoolVal = fmt.Sprintf("%v", *p.School)
  }
  return fmt.Sprintf("Internship({Weeks:%s Title:%s Employer:%s Compensation:%s School:%s})", weeksVal, titleVal, employerVal, compensationVal, schoolVal)
}

// Attributes:
//  - Min
//  - Max
type Range struct {
  Min int32 `thrift:"min,1,required" db:"min" json:"min"`
  Max int32 `thrift:"max,2,required" db:"max" json:"max"`
}

func NewRange() *Range {
  return &Range{}
}


func (p *Range) GetMin() int32 {
  return p.Min
}

func (p *Range) GetMax() int32 {
  return p.Max
}
type RangeBuilder struct {
  obj *Range
}

func NewRangeBuilder() *RangeBuilder{
  return &RangeBuilder{
    obj: NewRange(),
  }
}

func (p RangeBuilder) Emit() *Range{
  return &Range{
    Min: p.obj.Min,
    Max: p.obj.Max,
  }
}

func (r *RangeBuilder) Min(min int32) *RangeBuilder {
  r.obj.Min = min
  return r
}

func (r *RangeBuilder) Max(max int32) *RangeBuilder {
  r.obj.Max = max
  return r
}

func (r *Range) SetMin(min int32) *Range {
  r.Min = min
  return r
}

func (r *Range) SetMax(max int32) *Range {
  r.Max = max
  return r
}

func (p *Range) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMin bool = false;
  var issetMax bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMin = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMax = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMin{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Min is not set"));
  }
  if !issetMax{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Max is not set"));
  }
  return nil
}

func (p *Range)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Min = v
  }
  return nil
}

func (p *Range)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Max = v
  }
  return nil
}

func (p *Range) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Range"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Range) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("min", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:min: ", p), err) }
  if err := oprot.WriteI32(int32(p.Min)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.min (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:min: ", p), err) }
  return err
}

func (p *Range) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max: ", p), err) }
  if err := oprot.WriteI32(int32(p.Max)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max: ", p), err) }
  return err
}

func (p *Range) String() string {
  if p == nil {
    return "<nil>"
  }

  minVal := fmt.Sprintf("%v", p.Min)
  maxVal := fmt.Sprintf("%v", p.Max)
  return fmt.Sprintf("Range({Min:%s Max:%s})", minVal, maxVal)
}

// Attributes:
//  - A
//  - B
type Struct1 struct {
  A int32 `thrift:"a,1" db:"a" json:"a"`
  B string `thrift:"b,2" db:"b" json:"b"`
}

func NewStruct1() *Struct1 {
  return &Struct1{
    A: 1234567,
    B: "<uninitialized>",
  }
}


func (p *Struct1) GetA() int32 {
  return p.A
}

func (p *Struct1) GetB() string {
  return p.B
}
type Struct1Builder struct {
  obj *Struct1
}

func NewStruct1Builder() *Struct1Builder{
  return &Struct1Builder{
    obj: NewStruct1(),
  }
}

func (p Struct1Builder) Emit() *Struct1{
  return &Struct1{
    A: p.obj.A,
    B: p.obj.B,
  }
}

func (s *Struct1Builder) A(a int32) *Struct1Builder {
  s.obj.A = a
  return s
}

func (s *Struct1Builder) B(b string) *Struct1Builder {
  s.obj.B = b
  return s
}

func (s *Struct1) SetA(a int32) *Struct1 {
  s.A = a
  return s
}

func (s *Struct1) SetB(b string) *Struct1 {
  s.B = b
  return s
}

func (p *Struct1) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Struct1)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.A = v
  }
  return nil
}

func (p *Struct1)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.B = v
  }
  return nil
}

func (p *Struct1) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("struct1"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Struct1) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *Struct1) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteString(string(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *Struct1) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  bVal := fmt.Sprintf("%v", p.B)
  return fmt.Sprintf("Struct1({A:%s B:%s})", aVal, bVal)
}

// Attributes:
//  - A
//  - B
//  - C
//  - D
type Struct2 struct {
  A int32 `thrift:"a,1" db:"a" json:"a"`
  B string `thrift:"b,2" db:"b" json:"b"`
  C *Struct1 `thrift:"c,3" db:"c" json:"c"`
  D []int32 `thrift:"d,4" db:"d" json:"d"`
}

func NewStruct2() *Struct2 {
  return &Struct2{
    C: NewStruct1(),
  }
}


func (p *Struct2) GetA() int32 {
  return p.A
}

func (p *Struct2) GetB() string {
  return p.B
}
var Struct2_C_DEFAULT *Struct1
func (p *Struct2) GetC() *Struct1 {
  if !p.IsSetC() {
    return Struct2_C_DEFAULT
  }
  return p.C
}
func (p *Struct2) DefaultGetC() *Struct1 {
  if !p.IsSetC() {
    return NewStruct1()
  }
  return p.C
}

func (p *Struct2) GetD() []int32 {
  return p.D
}
func (p *Struct2) IsSetC() bool {
  return p != nil && p.C != nil
}

type Struct2Builder struct {
  obj *Struct2
}

func NewStruct2Builder() *Struct2Builder{
  return &Struct2Builder{
    obj: NewStruct2(),
  }
}

func (p Struct2Builder) Emit() *Struct2{
  return &Struct2{
    A: p.obj.A,
    B: p.obj.B,
    C: p.obj.C,
    D: p.obj.D,
  }
}

func (s *Struct2Builder) A(a int32) *Struct2Builder {
  s.obj.A = a
  return s
}

func (s *Struct2Builder) B(b string) *Struct2Builder {
  s.obj.B = b
  return s
}

func (s *Struct2Builder) C(c *Struct1) *Struct2Builder {
  s.obj.C = c
  return s
}

func (s *Struct2Builder) D(d []int32) *Struct2Builder {
  s.obj.D = d
  return s
}

func (s *Struct2) SetA(a int32) *Struct2 {
  s.A = a
  return s
}

func (s *Struct2) SetB(b string) *Struct2 {
  s.B = b
  return s
}

func (s *Struct2) SetC(c *Struct1) *Struct2 {
  s.C = c
  return s
}

func (s *Struct2) SetD(d []int32) *Struct2 {
  s.D = d
  return s
}

func (p *Struct2) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Struct2)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.A = v
  }
  return nil
}

func (p *Struct2)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.B = v
  }
  return nil
}

func (p *Struct2)  ReadField3(iprot thrift.Protocol) error {
  p.C = NewStruct1()
  if err := p.C.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.C), err)
  }
  return nil
}

func (p *Struct2)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.D =  tSlice
  for i := 0; i < size; i ++ {
    var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem0 = v
    }
    p.D = append(p.D, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Struct2) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("struct2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Struct2) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *Struct2) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteString(string(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *Struct2) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("c", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:c: ", p), err) }
  if err := p.C.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.C), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:c: ", p), err) }
  return err
}

func (p *Struct2) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("d", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:d: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.D)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.D {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:d: ", p), err) }
  return err
}

func (p *Struct2) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  bVal := fmt.Sprintf("%v", p.B)
  var cVal string
  if p.C == nil {
    cVal = "<nil>"
  } else {
    cVal = fmt.Sprintf("%v", p.C)
  }
  dVal := fmt.Sprintf("%v", p.D)
  return fmt.Sprintf("Struct2({A:%s B:%s C:%s D:%s})", aVal, bVal, cVal, dVal)
}

// Attributes:
//  - A
//  - B
//  - C
type Struct3 struct {
  A string `thrift:"a,1" db:"a" json:"a"`
  B int32 `thrift:"b,2" db:"b" json:"b"`
  C *Struct2 `thrift:"c,3" db:"c" json:"c"`
}

func NewStruct3() *Struct3 {
  return &Struct3{
    C: NewStruct2(),
  }
}


func (p *Struct3) GetA() string {
  return p.A
}

func (p *Struct3) GetB() int32 {
  return p.B
}
var Struct3_C_DEFAULT *Struct2
func (p *Struct3) GetC() *Struct2 {
  if !p.IsSetC() {
    return Struct3_C_DEFAULT
  }
  return p.C
}
func (p *Struct3) DefaultGetC() *Struct2 {
  if !p.IsSetC() {
    return NewStruct2()
  }
  return p.C
}
func (p *Struct3) IsSetC() bool {
  return p != nil && p.C != nil
}

type Struct3Builder struct {
  obj *Struct3
}

func NewStruct3Builder() *Struct3Builder{
  return &Struct3Builder{
    obj: NewStruct3(),
  }
}

func (p Struct3Builder) Emit() *Struct3{
  return &Struct3{
    A: p.obj.A,
    B: p.obj.B,
    C: p.obj.C,
  }
}

func (s *Struct3Builder) A(a string) *Struct3Builder {
  s.obj.A = a
  return s
}

func (s *Struct3Builder) B(b int32) *Struct3Builder {
  s.obj.B = b
  return s
}

func (s *Struct3Builder) C(c *Struct2) *Struct3Builder {
  s.obj.C = c
  return s
}

func (s *Struct3) SetA(a string) *Struct3 {
  s.A = a
  return s
}

func (s *Struct3) SetB(b int32) *Struct3 {
  s.B = b
  return s
}

func (s *Struct3) SetC(c *Struct2) *Struct3 {
  s.C = c
  return s
}

func (p *Struct3) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Struct3)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.A = v
  }
  return nil
}

func (p *Struct3)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.B = v
  }
  return nil
}

func (p *Struct3)  ReadField3(iprot thrift.Protocol) error {
  p.C = NewStruct2()
  if err := p.C.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.C), err)
  }
  return nil
}

func (p *Struct3) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("struct3"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Struct3) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteString(string(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *Struct3) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("b", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteI32(int32(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *Struct3) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("c", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:c: ", p), err) }
  if err := p.C.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.C), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:c: ", p), err) }
  return err
}

func (p *Struct3) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  bVal := fmt.Sprintf("%v", p.B)
  var cVal string
  if p.C == nil {
    cVal = "<nil>"
  } else {
    cVal = fmt.Sprintf("%v", p.C)
  }
  return fmt.Sprintf("Struct3({A:%s B:%s C:%s})", aVal, bVal, cVal)
}

// Attributes:
//  - A
//  - B
//  - C
type Struct4 struct {
  A int32 `thrift:"a,1" db:"a" json:"a"`
  B *float64 `thrift:"b,2,optional" db:"b" json:"b,omitempty"`
  C *int8 `thrift:"c,3,optional" db:"c" json:"c,omitempty"`
}

func NewStruct4() *Struct4 {
  return &Struct4{}
}


func (p *Struct4) GetA() int32 {
  return p.A
}
var Struct4_B_DEFAULT float64
func (p *Struct4) GetB() float64 {
  if !p.IsSetB() {
    return Struct4_B_DEFAULT
  }
  return *p.B
}
var Struct4_C_DEFAULT int8
func (p *Struct4) GetC() int8 {
  if !p.IsSetC() {
    return Struct4_C_DEFAULT
  }
  return *p.C
}
func (p *Struct4) IsSetB() bool {
  return p != nil && p.B != nil
}

func (p *Struct4) IsSetC() bool {
  return p != nil && p.C != nil
}

type Struct4Builder struct {
  obj *Struct4
}

func NewStruct4Builder() *Struct4Builder{
  return &Struct4Builder{
    obj: NewStruct4(),
  }
}

func (p Struct4Builder) Emit() *Struct4{
  return &Struct4{
    A: p.obj.A,
    B: p.obj.B,
    C: p.obj.C,
  }
}

func (s *Struct4Builder) A(a int32) *Struct4Builder {
  s.obj.A = a
  return s
}

func (s *Struct4Builder) B(b *float64) *Struct4Builder {
  s.obj.B = b
  return s
}

func (s *Struct4Builder) C(c *int8) *Struct4Builder {
  s.obj.C = c
  return s
}

func (s *Struct4) SetA(a int32) *Struct4 {
  s.A = a
  return s
}

func (s *Struct4) SetB(b *float64) *Struct4 {
  s.B = b
  return s
}

func (s *Struct4) SetC(c *int8) *Struct4 {
  s.C = c
  return s
}

func (p *Struct4) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Struct4)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.A = v
  }
  return nil
}

func (p *Struct4)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.B = &v
  }
  return nil
}

func (p *Struct4)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := int8(v)
    p.C = &temp
  }
  return nil
}

func (p *Struct4) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("struct4"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Struct4) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *Struct4) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetB() {
    if err := oprot.WriteFieldBegin("b", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.B)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  }
  return err
}

func (p *Struct4) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetC() {
    if err := oprot.WriteFieldBegin("c", thrift.BYTE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:c: ", p), err) }
    if err := oprot.WriteByte(byte(*p.C)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.c (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:c: ", p), err) }
  }
  return err
}

func (p *Struct4) String() string {
  if p == nil {
    return "<nil>"
  }

  aVal := fmt.Sprintf("%v", p.A)
  var bVal string
  if p.B == nil {
    bVal = "<nil>"
  } else {
    bVal = fmt.Sprintf("%v", *p.B)
  }
  var cVal string
  if p.C == nil {
    cVal = "<nil>"
  } else {
    cVal = fmt.Sprintf("%v", *p.C)
  }
  return fmt.Sprintf("Struct4({A:%s B:%s C:%s})", aVal, bVal, cVal)
}

// Attributes:
//  - I
//  - D
type Union1 struct {
  I *int32 `thrift:"i,1,optional" db:"i" json:"i,omitempty"`
  D *float64 `thrift:"d,2,optional" db:"d" json:"d,omitempty"`
}

func NewUnion1() *Union1 {
  return &Union1{}
}

var Union1_I_DEFAULT int32
func (p *Union1) GetI() int32 {
  if !p.IsSetI() {
    return Union1_I_DEFAULT
  }
  return *p.I
}
var Union1_D_DEFAULT float64
func (p *Union1) GetD() float64 {
  if !p.IsSetD() {
    return Union1_D_DEFAULT
  }
  return *p.D
}
func (p *Union1) CountSetFieldsUnion1() int {
  count := 0
  if (p.IsSetI()) {
    count++
  }
  if (p.IsSetD()) {
    count++
  }
  return count

}

func (p *Union1) IsSetI() bool {
  return p != nil && p.I != nil
}

func (p *Union1) IsSetD() bool {
  return p != nil && p.D != nil
}

type Union1Builder struct {
  obj *Union1
}

func NewUnion1Builder() *Union1Builder{
  return &Union1Builder{
    obj: NewUnion1(),
  }
}

func (p Union1Builder) Emit() *Union1{
  return &Union1{
    I: p.obj.I,
    D: p.obj.D,
  }
}

func (u *Union1Builder) I(i *int32) *Union1Builder {
  u.obj.I = i
  return u
}

func (u *Union1Builder) D(d *float64) *Union1Builder {
  u.obj.D = d
  return u
}

func (u *Union1) SetI(i *int32) *Union1 {
  u.I = i
  return u
}

func (u *Union1) SetD(d *float64) *Union1 {
  u.D = d
  return u
}

func (p *Union1) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Union1)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.I = &v
  }
  return nil
}

func (p *Union1)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.D = &v
  }
  return nil
}

func (p *Union1) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsUnion1(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("union1"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Union1) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetI() {
    if err := oprot.WriteFieldBegin("i", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  }
  return err
}

func (p *Union1) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetD() {
    if err := oprot.WriteFieldBegin("d", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:d: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.D)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.d (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:d: ", p), err) }
  }
  return err
}

func (p *Union1) String() string {
  if p == nil {
    return "<nil>"
  }

  var iVal string
  if p.I == nil {
    iVal = "<nil>"
  } else {
    iVal = fmt.Sprintf("%v", *p.I)
  }
  var dVal string
  if p.D == nil {
    dVal = "<nil>"
  } else {
    dVal = fmt.Sprintf("%v", *p.D)
  }
  return fmt.Sprintf("Union1({I:%s D:%s})", iVal, dVal)
}

// Attributes:
//  - I
//  - D
//  - S
//  - U
type Union2 struct {
  I *int32 `thrift:"i,1,optional" db:"i" json:"i,omitempty"`
  D *float64 `thrift:"d,2,optional" db:"d" json:"d,omitempty"`
  S *Struct1 `thrift:"s,3,optional" db:"s" json:"s,omitempty"`
  U *Union1 `thrift:"u,4,optional" db:"u" json:"u,omitempty"`
}

func NewUnion2() *Union2 {
  return &Union2{}
}

var Union2_I_DEFAULT int32
func (p *Union2) GetI() int32 {
  if !p.IsSetI() {
    return Union2_I_DEFAULT
  }
  return *p.I
}
var Union2_D_DEFAULT float64
func (p *Union2) GetD() float64 {
  if !p.IsSetD() {
    return Union2_D_DEFAULT
  }
  return *p.D
}
var Union2_S_DEFAULT *Struct1
func (p *Union2) GetS() *Struct1 {
  if !p.IsSetS() {
    return Union2_S_DEFAULT
  }
  return p.S
}
func (p *Union2) DefaultGetS() *Struct1 {
  if !p.IsSetS() {
    return NewStruct1()
  }
  return p.S
}
var Union2_U_DEFAULT *Union1
func (p *Union2) GetU() *Union1 {
  if !p.IsSetU() {
    return Union2_U_DEFAULT
  }
  return p.U
}
func (p *Union2) DefaultGetU() *Union1 {
  if !p.IsSetU() {
    return NewUnion1()
  }
  return p.U
}
func (p *Union2) CountSetFieldsUnion2() int {
  count := 0
  if (p.IsSetI()) {
    count++
  }
  if (p.IsSetD()) {
    count++
  }
  if (p.IsSetS()) {
    count++
  }
  if (p.IsSetU()) {
    count++
  }
  return count

}

func (p *Union2) IsSetI() bool {
  return p != nil && p.I != nil
}

func (p *Union2) IsSetD() bool {
  return p != nil && p.D != nil
}

func (p *Union2) IsSetS() bool {
  return p != nil && p.S != nil
}

func (p *Union2) IsSetU() bool {
  return p != nil && p.U != nil
}

type Union2Builder struct {
  obj *Union2
}

func NewUnion2Builder() *Union2Builder{
  return &Union2Builder{
    obj: NewUnion2(),
  }
}

func (p Union2Builder) Emit() *Union2{
  return &Union2{
    I: p.obj.I,
    D: p.obj.D,
    S: p.obj.S,
    U: p.obj.U,
  }
}

func (u *Union2Builder) I(i *int32) *Union2Builder {
  u.obj.I = i
  return u
}

func (u *Union2Builder) D(d *float64) *Union2Builder {
  u.obj.D = d
  return u
}

func (u *Union2Builder) S(s *Struct1) *Union2Builder {
  u.obj.S = s
  return u
}

func (un *Union2Builder) U(u *Union1) *Union2Builder {
  un.obj.U = u
  return un
}

func (u *Union2) SetI(i *int32) *Union2 {
  u.I = i
  return u
}

func (u *Union2) SetD(d *float64) *Union2 {
  u.D = d
  return u
}

func (u *Union2) SetS(s *Struct1) *Union2 {
  u.S = s
  return u
}

func (un *Union2) SetU(u *Union1) *Union2 {
  un.U = u
  return un
}

func (p *Union2) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Union2)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.I = &v
  }
  return nil
}

func (p *Union2)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.D = &v
  }
  return nil
}

func (p *Union2)  ReadField3(iprot thrift.Protocol) error {
  p.S = NewStruct1()
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *Union2)  ReadField4(iprot thrift.Protocol) error {
  p.U = NewUnion1()
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *Union2) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsUnion2(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("union2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Union2) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetI() {
    if err := oprot.WriteFieldBegin("i", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  }
  return err
}

func (p *Union2) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetD() {
    if err := oprot.WriteFieldBegin("d", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:d: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.D)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.d (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:d: ", p), err) }
  }
  return err
}

func (p *Union2) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetS() {
    if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:s: ", p), err) }
    if err := p.S.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:s: ", p), err) }
  }
  return err
}

func (p *Union2) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetU() {
    if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:u: ", p), err) }
    if err := p.U.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:u: ", p), err) }
  }
  return err
}

func (p *Union2) String() string {
  if p == nil {
    return "<nil>"
  }

  var iVal string
  if p.I == nil {
    iVal = "<nil>"
  } else {
    iVal = fmt.Sprintf("%v", *p.I)
  }
  var dVal string
  if p.D == nil {
    dVal = "<nil>"
  } else {
    dVal = fmt.Sprintf("%v", *p.D)
  }
  var sVal string
  if p.S == nil {
    sVal = "<nil>"
  } else {
    sVal = fmt.Sprintf("%v", p.S)
  }
  var uVal string
  if p.U == nil {
    uVal = "<nil>"
  } else {
    uVal = fmt.Sprintf("%v", p.U)
  }
  return fmt.Sprintf("Union2({I:%s D:%s S:%s U:%s})", iVal, dVal, sVal, uVal)
}

