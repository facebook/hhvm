/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/tablebased/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldF;
struct fieldG;
struct fieldH;
struct fieldA;
struct fieldB;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldF
#define APACHE_THRIFT_ACCESSOR_fieldF
APACHE_THRIFT_DEFINE_ACCESSOR(fieldF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldG
#define APACHE_THRIFT_ACCESSOR_fieldG
APACHE_THRIFT_DEFINE_ACCESSOR(fieldG);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldH
#define APACHE_THRIFT_ACCESSOR_fieldH
APACHE_THRIFT_DEFINE_ACCESSOR(fieldH);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace test { namespace fixtures { namespace tablebased {

enum class ExampleEnum {
  ZERO = 0,
  NONZERO = 123,
};



}}} // test::fixtures::tablebased

namespace std {
template<> struct hash<::test::fixtures::tablebased::ExampleEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::tablebased::ExampleEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::test::fixtures::tablebased::ExampleEnum>;

template <> struct TEnumTraits<::test::fixtures::tablebased::ExampleEnum> {
  using type = ::test::fixtures::tablebased::ExampleEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ZERO; }
  static constexpr type max() { return type::NONZERO; }
};


}} // apache::thrift

namespace test { namespace fixtures { namespace tablebased {

using _ExampleEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<ExampleEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _ExampleEnum_EnumMapFactory::ValuesToNamesMapType _ExampleEnum_VALUES_TO_NAMES;
#endif
}}} // test::fixtures::tablebased

// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace tablebased {
class TrivialTypesStruct;
class ContainerStruct;
class ExampleUnion;
}}} // test::fixtures::tablebased
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace tablebased {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef std::unique_ptr<folly::IOBuf> IOBufPtr;

class TrivialTypesStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB,
    ::apache::thrift::ident::fieldC,
    ::apache::thrift::ident::fieldD,
    ::apache::thrift::ident::fieldE
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::enum_t<::test::fixtures::tablebased::ExampleEnum>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TrivialTypesStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TrivialTypesStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialTypesStruct(apache::thrift::FragileConstructor, ::std::int32_t fieldA__arg, ::std::string fieldB__arg, ::std::string fieldC__arg, ::test::fixtures::tablebased::IOBufPtr fieldD__arg, ::test::fixtures::tablebased::ExampleEnum fieldE__arg);

  TrivialTypesStruct(TrivialTypesStruct&&) noexcept;
  TrivialTypesStruct(const TrivialTypesStruct& src);


  TrivialTypesStruct& operator=(TrivialTypesStruct&&) noexcept;
  TrivialTypesStruct& operator=(const TrivialTypesStruct& src);

  ~TrivialTypesStruct();

 private:
  ::std::int32_t __fbthrift_field_fieldA;
 private:
  ::std::string __fbthrift_field_fieldB;
 private:
  ::std::string __fbthrift_field_fieldC;
 private:
  ::test::fixtures::tablebased::IOBufPtr __fbthrift_field_fieldD;
 private:
  ::test::fixtures::tablebased::ExampleEnum __fbthrift_field_fieldE;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TrivialTypesStruct&) const;
  bool operator<(const TrivialTypesStruct&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldA_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldA_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldA() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldA() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldB_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldB_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldB() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldB() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldC_ref() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldC_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldC_ref() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldC_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldC() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldC() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldC() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldC() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldD_ref() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldD_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldD_ref() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldD_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> fieldD() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> fieldD() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> fieldD() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> fieldD() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE_ref() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE_ref() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ExampleEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  const ::std::int32_t* get_fieldA() const& {
    return fieldA_ref() ? std::addressof(__fbthrift_field_fieldA) : nullptr;
  }

  ::std::int32_t* get_fieldA() & {
    return fieldA_ref() ? std::addressof(__fbthrift_field_fieldA) : nullptr;
  }
  ::std::int32_t* get_fieldA() && = delete;

  [[deprecated("Use `FOO.fieldA_ref() = BAR;` instead of `FOO.set_fieldA(BAR);`")]]
  ::std::int32_t& set_fieldA(::std::int32_t fieldA_) {
    fieldA_ref() = fieldA_;
    return __fbthrift_field_fieldA;
  }

  const ::std::string* get_fieldB() const& {
    return fieldB_ref() ? std::addressof(__fbthrift_field_fieldB) : nullptr;
  }

  ::std::string* get_fieldB() & {
    return fieldB_ref() ? std::addressof(__fbthrift_field_fieldB) : nullptr;
  }
  ::std::string* get_fieldB() && = delete;

  template <typename T_TrivialTypesStruct_fieldB_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldB_ref() = BAR;` instead of `FOO.set_fieldB(BAR);`")]]
  ::std::string& set_fieldB(T_TrivialTypesStruct_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_TrivialTypesStruct_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }

  const ::std::string* get_fieldC() const& {
    return fieldC_ref() ? std::addressof(__fbthrift_field_fieldC) : nullptr;
  }

  ::std::string* get_fieldC() & {
    return fieldC_ref() ? std::addressof(__fbthrift_field_fieldC) : nullptr;
  }
  ::std::string* get_fieldC() && = delete;

  template <typename T_TrivialTypesStruct_fieldC_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldC_ref() = BAR;` instead of `FOO.set_fieldC(BAR);`")]]
  ::std::string& set_fieldC(T_TrivialTypesStruct_fieldC_struct_setter&& fieldC_) {
    fieldC_ref() = std::forward<T_TrivialTypesStruct_fieldC_struct_setter>(fieldC_);
    return __fbthrift_field_fieldC;
  }

  const ::test::fixtures::tablebased::IOBufPtr* get_fieldD() const& {
    return fieldD_ref() ? std::addressof(__fbthrift_field_fieldD) : nullptr;
  }

  ::test::fixtures::tablebased::IOBufPtr* get_fieldD() & {
    return fieldD_ref() ? std::addressof(__fbthrift_field_fieldD) : nullptr;
  }
  ::test::fixtures::tablebased::IOBufPtr* get_fieldD() && = delete;

  template <typename T_TrivialTypesStruct_fieldD_struct_setter = ::test::fixtures::tablebased::IOBufPtr>
  [[deprecated("Use `FOO.fieldD_ref() = BAR;` instead of `FOO.set_fieldD(BAR);`")]]
  ::test::fixtures::tablebased::IOBufPtr& set_fieldD(T_TrivialTypesStruct_fieldD_struct_setter&& fieldD_) {
    fieldD_ref() = std::forward<T_TrivialTypesStruct_fieldD_struct_setter>(fieldD_);
    return __fbthrift_field_fieldD;
  }

  ::test::fixtures::tablebased::ExampleEnum get_fieldE() const {
    return __fbthrift_field_fieldE;
  }

  [[deprecated("Use `FOO.fieldE_ref() = BAR;` instead of `FOO.set_fieldE(BAR);`")]]
  ::test::fixtures::tablebased::ExampleEnum& set_fieldE(::test::fixtures::tablebased::ExampleEnum fieldE_) {
    fieldE_ref() = fieldE_;
    return __fbthrift_field_fieldE;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialTypesStruct>;
  friend void swap(TrivialTypesStruct& a, TrivialTypesStruct& b);
  friend constexpr ptrdiff_t (::apache::thrift::detail::fieldOffset<TrivialTypesStruct>)(std::int16_t fieldIndex);
  friend constexpr ptrdiff_t (::apache::thrift::detail::issetOffset<TrivialTypesStruct>)(std::int16_t fieldIndex);
};

template <class Protocol_>
unsigned long TrivialTypesStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class ContainerStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB,
    ::apache::thrift::ident::fieldC,
    ::apache::thrift::ident::fieldD,
    ::apache::thrift::ident::fieldE,
    ::apache::thrift::ident::fieldF,
    ::apache::thrift::ident::fieldG,
    ::apache::thrift::ident::fieldH
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,12,2,3,4,5,6,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::cpp_type<std::list<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<std::deque<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::fbvector<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<::std::int32_t>, ::apache::thrift::type::list<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_set<::std::int32_t>, ::apache::thrift::type::set<::apache::thrift::type::i32_t>>,
    ::apache::thrift::type::cpp_type<folly::sorted_vector_map<::std::int32_t, ::std::string>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::tablebased::TrivialTypesStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 8;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ContainerStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ContainerStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ContainerStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> fieldA__arg, std::list<::std::int32_t> fieldB__arg, std::deque<::std::int32_t> fieldC__arg, folly::fbvector<::std::int32_t> fieldD__arg, folly::small_vector<::std::int32_t> fieldE__arg, folly::sorted_vector_set<::std::int32_t> fieldF__arg, folly::sorted_vector_map<::std::int32_t, ::std::string> fieldG__arg, ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct> fieldH__arg);

  ContainerStruct(ContainerStruct&&) noexcept;

  ContainerStruct(const ContainerStruct& src);


  ContainerStruct& operator=(ContainerStruct&&) noexcept;
  ContainerStruct& operator=(const ContainerStruct& src);

  ~ContainerStruct();

 private:
  ::std::vector<::std::int32_t> __fbthrift_field_fieldA;
 private:
  std::list<::std::int32_t> __fbthrift_field_fieldB;
 private:
  std::deque<::std::int32_t> __fbthrift_field_fieldC;
 private:
  folly::fbvector<::std::int32_t> __fbthrift_field_fieldD;
 private:
  folly::small_vector<::std::int32_t> __fbthrift_field_fieldE;
 private:
  folly::sorted_vector_set<::std::int32_t> __fbthrift_field_fieldF;
 private:
  folly::sorted_vector_map<::std::int32_t, ::std::string> __fbthrift_field_fieldG;
 private:
  ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct> __fbthrift_field_fieldH;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ContainerStruct&) const;
  bool operator<(const ContainerStruct&) const;

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA_ref() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA_ref() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA() const& {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA() & {
    return {this->__fbthrift_field_fieldA, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldA), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldB_ref() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldB_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldB_ref() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldB_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldB() const& {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldB() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldB() & {
    return {this->__fbthrift_field_fieldB, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldB() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldB), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldC_ref() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldC_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldC_ref() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldC_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldC() const& {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldC() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldC() & {
    return {this->__fbthrift_field_fieldC, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldC() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldC), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldD_ref() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldD_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldD_ref() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldD_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldD() const& {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldD() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldD() & {
    return {this->__fbthrift_field_fieldD, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldD() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldD), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE_ref() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE_ref() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE() const& {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE() & {
    return {this->__fbthrift_field_fieldE, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldE), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldF_ref() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldF_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldF_ref() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldF_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldF() const& {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldF() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldF() & {
    return {this->__fbthrift_field_fieldF, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldF() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldF), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldG_ref() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldG_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldG_ref() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldG_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldG() const& {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldG() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldG() & {
    return {this->__fbthrift_field_fieldG, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldG() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldG), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldH_ref() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldH_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldH_ref() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldH_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldH() const& {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldH() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldH() & {
    return {this->__fbthrift_field_fieldH, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldH() && {
    return {static_cast<T&&>(this->__fbthrift_field_fieldH), __isset.at(7), __isset.bit(7)};
  }
  const ::std::vector<::std::int32_t>& get_fieldA() const&;
  ::std::vector<::std::int32_t> get_fieldA() &&;

  template <typename T_ContainerStruct_fieldA_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldA_ref() = BAR;` instead of `FOO.set_fieldA(BAR);`")]]
  ::std::vector<::std::int32_t>& set_fieldA(T_ContainerStruct_fieldA_struct_setter&& fieldA_) {
    fieldA_ref() = std::forward<T_ContainerStruct_fieldA_struct_setter>(fieldA_);
    return __fbthrift_field_fieldA;
  }
  const std::list<::std::int32_t>& get_fieldB() const&;
  std::list<::std::int32_t> get_fieldB() &&;

  template <typename T_ContainerStruct_fieldB_struct_setter = std::list<::std::int32_t>>
  [[deprecated("Use `FOO.fieldB_ref() = BAR;` instead of `FOO.set_fieldB(BAR);`")]]
  std::list<::std::int32_t>& set_fieldB(T_ContainerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB_ref() = std::forward<T_ContainerStruct_fieldB_struct_setter>(fieldB_);
    return __fbthrift_field_fieldB;
  }
  const std::deque<::std::int32_t>& get_fieldC() const&;
  std::deque<::std::int32_t> get_fieldC() &&;

  template <typename T_ContainerStruct_fieldC_struct_setter = std::deque<::std::int32_t>>
  [[deprecated("Use `FOO.fieldC_ref() = BAR;` instead of `FOO.set_fieldC(BAR);`")]]
  std::deque<::std::int32_t>& set_fieldC(T_ContainerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC_ref() = std::forward<T_ContainerStruct_fieldC_struct_setter>(fieldC_);
    return __fbthrift_field_fieldC;
  }
  const folly::fbvector<::std::int32_t>& get_fieldD() const&;
  folly::fbvector<::std::int32_t> get_fieldD() &&;

  template <typename T_ContainerStruct_fieldD_struct_setter = folly::fbvector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldD_ref() = BAR;` instead of `FOO.set_fieldD(BAR);`")]]
  folly::fbvector<::std::int32_t>& set_fieldD(T_ContainerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD_ref() = std::forward<T_ContainerStruct_fieldD_struct_setter>(fieldD_);
    return __fbthrift_field_fieldD;
  }
  const folly::small_vector<::std::int32_t>& get_fieldE() const&;
  folly::small_vector<::std::int32_t> get_fieldE() &&;

  template <typename T_ContainerStruct_fieldE_struct_setter = folly::small_vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldE_ref() = BAR;` instead of `FOO.set_fieldE(BAR);`")]]
  folly::small_vector<::std::int32_t>& set_fieldE(T_ContainerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE_ref() = std::forward<T_ContainerStruct_fieldE_struct_setter>(fieldE_);
    return __fbthrift_field_fieldE;
  }
  const folly::sorted_vector_set<::std::int32_t>& get_fieldF() const&;
  folly::sorted_vector_set<::std::int32_t> get_fieldF() &&;

  template <typename T_ContainerStruct_fieldF_struct_setter = folly::sorted_vector_set<::std::int32_t>>
  [[deprecated("Use `FOO.fieldF_ref() = BAR;` instead of `FOO.set_fieldF(BAR);`")]]
  folly::sorted_vector_set<::std::int32_t>& set_fieldF(T_ContainerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF_ref() = std::forward<T_ContainerStruct_fieldF_struct_setter>(fieldF_);
    return __fbthrift_field_fieldF;
  }
  const folly::sorted_vector_map<::std::int32_t, ::std::string>& get_fieldG() const&;
  folly::sorted_vector_map<::std::int32_t, ::std::string> get_fieldG() &&;

  template <typename T_ContainerStruct_fieldG_struct_setter = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.fieldG_ref() = BAR;` instead of `FOO.set_fieldG(BAR);`")]]
  folly::sorted_vector_map<::std::int32_t, ::std::string>& set_fieldG(T_ContainerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG_ref() = std::forward<T_ContainerStruct_fieldG_struct_setter>(fieldG_);
    return __fbthrift_field_fieldG;
  }
  const ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>& get_fieldH() const&;
  ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct> get_fieldH() &&;

  template <typename T_ContainerStruct_fieldH_struct_setter = ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>>
  [[deprecated("Use `FOO.fieldH_ref() = BAR;` instead of `FOO.set_fieldH(BAR);`")]]
  ::std::vector<::test::fixtures::tablebased::TrivialTypesStruct>& set_fieldH(T_ContainerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH_ref() = std::forward<T_ContainerStruct_fieldH_struct_setter>(fieldH_);
    return __fbthrift_field_fieldH;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ContainerStruct>;
  friend void swap(ContainerStruct& a, ContainerStruct& b);
  friend constexpr ptrdiff_t (::apache::thrift::detail::fieldOffset<ContainerStruct>)(std::int16_t fieldIndex);
  friend constexpr ptrdiff_t (::apache::thrift::detail::issetOffset<ContainerStruct>)(std::int16_t fieldIndex);
};

template <class Protocol_>
unsigned long ContainerStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class ExampleUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = true;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::fieldA,
    ::apache::thrift::ident::fieldB
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::tablebased::ContainerStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::tablebased::TrivialTypesStruct>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ExampleUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    fieldA = 1,
    fieldB = 2,
  } ;

  ExampleUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  ExampleUnion(ExampleUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::fieldA:
      {
        set_fieldA(std::move(rhs.value_.fieldA));
        break;
      }
      case Type::fieldB:
      {
        set_fieldB(std::move(rhs.value_.fieldB));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  ExampleUnion(const ExampleUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::fieldA:
      {
        set_fieldA(rhs.value_.fieldA);
        break;
      }
      case Type::fieldB:
      {
        set_fieldB(rhs.value_.fieldB);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  ExampleUnion& operator=(ExampleUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::fieldA:
      {
        set_fieldA(std::move(rhs.value_.fieldA));
        break;
      }
      case Type::fieldB:
      {
        set_fieldB(std::move(rhs.value_.fieldB));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  ExampleUnion& operator=(const ExampleUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::fieldA:
      {
        set_fieldA(rhs.value_.fieldA);
        break;
      }
      case Type::fieldB:
      {
        set_fieldB(rhs.value_.fieldB);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~ExampleUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::test::fixtures::tablebased::ContainerStruct fieldA;
    ::test::fixtures::tablebased::TrivialTypesStruct fieldB;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const ExampleUnion&) const;
  bool operator<(const ExampleUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::tablebased::ContainerStruct& set_fieldA(::test::fixtures::tablebased::ContainerStruct const &t) {
    using T0 = ::test::fixtures::tablebased::ContainerStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::fieldA);
    ::new (std::addressof(value_.fieldA)) T(t);
    return value_.fieldA;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::tablebased::ContainerStruct& set_fieldA(::test::fixtures::tablebased::ContainerStruct&& t) {
    using T0 = ::test::fixtures::tablebased::ContainerStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::fieldA);
    ::new (std::addressof(value_.fieldA)) T(std::move(t));
    return value_.fieldA;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::tablebased::ContainerStruct, T...>> ::test::fixtures::tablebased::ContainerStruct& set_fieldA(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::fieldA);
    ::new (std::addressof(value_.fieldA)) ::test::fixtures::tablebased::ContainerStruct(std::forward<T>(t)...);
    return value_.fieldA;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::tablebased::TrivialTypesStruct& set_fieldB(::test::fixtures::tablebased::TrivialTypesStruct const &t) {
    using T0 = ::test::fixtures::tablebased::TrivialTypesStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::fieldB);
    ::new (std::addressof(value_.fieldB)) T(t);
    return value_.fieldB;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::tablebased::TrivialTypesStruct& set_fieldB(::test::fixtures::tablebased::TrivialTypesStruct&& t) {
    using T0 = ::test::fixtures::tablebased::TrivialTypesStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::fieldB);
    ::new (std::addressof(value_.fieldB)) T(std::move(t));
    return value_.fieldB;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::tablebased::TrivialTypesStruct, T...>> ::test::fixtures::tablebased::TrivialTypesStruct& set_fieldB(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::fieldB);
    ::new (std::addressof(value_.fieldB)) ::test::fixtures::tablebased::TrivialTypesStruct(std::forward<T>(t)...);
    return value_.fieldB;
  }

  ::test::fixtures::tablebased::ContainerStruct const& get_fieldA() const {
    if (getType() != Type::fieldA) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.fieldA;
  }

  ::test::fixtures::tablebased::TrivialTypesStruct const& get_fieldB() const {
    if (getType() != Type::fieldB) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.fieldB;
  }

  ::test::fixtures::tablebased::ContainerStruct& mutable_fieldA() {
    assert(getType() == Type::fieldA);
    return value_.fieldA;
  }

  ::test::fixtures::tablebased::TrivialTypesStruct& mutable_fieldB() {
    assert(getType() == Type::fieldB);
    return value_.fieldB;
  }

  ::test::fixtures::tablebased::ContainerStruct move_fieldA() {
    assert(getType() == Type::fieldA);
    return std::move(value_.fieldA);
  }

  ::test::fixtures::tablebased::TrivialTypesStruct move_fieldB() {
    assert(getType() == Type::fieldB);
    return std::move(value_.fieldB);
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> fieldA_ref() const& {
    return {value_.fieldA, type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> fieldA_ref() const&& {
    return {std::move(value_.fieldA), type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> fieldA_ref() & {
    return {value_.fieldA, type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::ContainerStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> fieldA_ref() && {
    return {std::move(value_.fieldA), type_, folly::to_underlying(Type::fieldA), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> fieldB_ref() const& {
    return {value_.fieldB, type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> fieldB_ref() const&& {
    return {std::move(value_.fieldB), type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> fieldB_ref() & {
    return {value_.fieldB, type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::tablebased::TrivialTypesStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> fieldB_ref() && {
    return {std::move(value_.fieldB), type_, folly::to_underlying(Type::fieldB), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ExampleUnion>;
  friend void swap(ExampleUnion& a, ExampleUnion& b);
  friend constexpr ptrdiff_t (::apache::thrift::detail::unionTypeOffset<ExampleUnion>)();
};

template <class Protocol_>
unsigned long ExampleUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}} // test::fixtures::tablebased

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::tablebased::ExampleUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::tablebased::ExampleUnion::Type> {
  using type = ::test::fixtures::tablebased::ExampleUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
namespace apache {
namespace thrift {
namespace detail {
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::structure,
    ::test::fixtures::tablebased::TrivialTypesStruct> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::structure,
    ::test::fixtures::tablebased::ContainerStruct> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::variant,
    ::test::fixtures::tablebased::ExampleUnion> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
  template <>
    struct TypeToInfo<
        ::apache::thrift::type_class::enumeration,
        ::test::fixtures::tablebased::ExampleEnum> {
    static const ::apache::thrift::detail::TypeInfo typeInfo;
  };
}}} // namespace apache::thrift::detail
