[(Class
    { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
      c_name = ([3:7-27], "\\TestKeyedTraversable"); c_tparams = []; 
      c_extends = []; c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; 
      c_reqs = []; c_implements = []; c_consts = []; c_typeconsts = []; 
      c_vars = [];
      c_methods =
      [{ m_span = [4:3-60]; m_annotation = (); m_final = false; m_abstract = false; 
         m_static = false; m_readonly_this = false; m_visibility = Public; 
         m_name = ([4:19-20], "o"); m_tparams = []; m_where_constraints = [];
         m_params =
         [{ param_annotation = (KeyedTraversable<int, int>);
            param_type_hint = ((KeyedTraversable<int, int>), (Some ([4:21-47], (Happly (([4:21-37], "\\HH\\KeyedTraversable"), [([4:38-41], (Hprim Tint)); ([4:43-46], (Hprim Tint))])))));
            param_pos = [4:48-50]; param_name = "$o"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([Pos.none], Noop)] }; 
         m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
         m_ret = ((void), (Some ([4:53-57], (Hprim Tvoid)))); m_external = false; 
         m_doc_comment = None }
        ];
      c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      c_user_attributes = [{ ua_name = ([3:7-27], "__SupportDynamicType"); ua_params = [] }]; 
      c_file_attributes = []; c_docs_url = None; c_enum = None; c_doc_comment = None; 
      c_emit_id = None; c_internal = false; c_module = None; c_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-11], "\\o");
       fd_fun =
       { f_span = [7:1-51]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([7:44-48], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (KeyedTraversable<int, int>);
            param_type_hint = ((KeyedTraversable<int, int>), (Some ([7:12-38], (Happly (([7:12-28], "\\HH\\KeyedTraversable"), [([7:29-32], (Hprim Tint)); ([7:34-37], (Hprim Tint))])))));
            param_pos = [7:39-41]; param_name = "$o"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([7:10-11], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([9:10-32], "\\call_keyed_traversable");
       fd_fun =
       { f_span = [9:1-24:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([12:4-8], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (KeyedTraversable<string, int>);
            param_type_hint = ((KeyedTraversable<string, int>), (Some ([10:3-32], (Happly (([10:3-19], "\\HH\\KeyedTraversable"), [([10:20-26], (Hprim Tstring)); ([10:28-31], (Hprim Tint))])))));
            param_pos = [10:33-36]; param_name = "$o1"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (KeyedTraversable<int, string>);
             param_type_hint = ((KeyedTraversable<int, string>), (Some ([11:3-32], (Happly (([11:3-19], "\\HH\\KeyedTraversable"), [([11:20-23], (Hprim Tint)); ([11:25-31], (Hprim Tstring))])))));
             param_pos = [11:33-36]; param_name = "$o2"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([14:3-10],
             (Expr
                ((void), [14:3-9],
                 (Call
                    { func = (((function(KeyedTraversable<int, int> $o): void)), [14:3-4], (Id ([14:3-4], "\\o"))); 
                      targs = [];
                      args =
                      [(Anormal
                          ((<expr#2> as KeyedTraversable<string, int>), [14:5-8],
                           (Hole (((KeyedTraversable<string, int>), [14:5-8], (Lvar ([14:5-8], $o1))), (<expr#2> as KeyedTraversable<string, int>), (KeyedTraversable<int, int>), Typing))))
                        ];
                      unpacked_arg = None }))));
             ([16:3-10],
              (Expr
                 ((void), [16:3-9],
                  (Call
                     { func = (((function(KeyedTraversable<int, int> $o): void)), [16:3-4], (Id ([16:3-4], "\\o"))); 
                       targs = [];
                       args =
                       [(Anormal
                           ((<expr#3> as KeyedTraversable<int, string>), [16:5-8],
                            (Hole (((KeyedTraversable<int, string>), [16:5-8], (Lvar ([16:5-8], $o2))), (<expr#3> as KeyedTraversable<int, string>), (KeyedTraversable<int, int>), Typing))))
                         ];
                       unpacked_arg = None }))));
             ([18:3-37],
              (Expr
                 ((exact TestKeyedTraversable), [18:3-36],
                  (Assign (((exact TestKeyedTraversable), [18:3-7], (Lvar ([18:3-7], $foo))), None,
                     ((exact TestKeyedTraversable), [18:10-36], (New (((exact TestKeyedTraversable), [18:14-34], (CI ([18:14-34], "\\TestKeyedTraversable"))), [], [], None, ((function(): void))))))))));
             ([21:3-16],
              (Expr
                 ((void), [21:3-15],
                  (Call
                     { func =
                       (((function(KeyedTraversable<int, int> $o): void)), [21:3-10],
                        (Obj_get (((exact TestKeyedTraversable), [21:3-7], (Lvar ([21:3-7], $foo))), (
                           ((function(KeyedTraversable<int, int> $o): void)), [21:9-10], (Id ([21:9-10], "o"))), OG_nullthrows, Is_method)));
                       targs = [];
                       args =
                       [(Anormal
                           ((<expr#2> as KeyedTraversable<string, int>), [21:11-14],
                            (Hole (((KeyedTraversable<string, int>), [21:11-14], (Lvar ([21:11-14], $o1))), (<expr#2> as KeyedTraversable<string, int>), (KeyedTraversable<int, int>), Typing))))
                         ];
                       unpacked_arg = None }))));
             ([23:3-16],
              (Expr
                 ((void), [23:3-15],
                  (Call
                     { func =
                       (((function(KeyedTraversable<int, int> $o): void)), [23:3-10],
                        (Obj_get (((exact TestKeyedTraversable), [23:3-7], (Lvar ([23:3-7], $foo))), (
                           ((function(KeyedTraversable<int, int> $o): void)), [23:9-10], (Id ([23:9-10], "o"))), OG_nullthrows, Is_method)));
                       targs = [];
                       args =
                       [(Anormal
                           ((<expr#3> as KeyedTraversable<int, string>), [23:11-14],
                            (Hole (((KeyedTraversable<int, string>), [23:11-14], (Lvar ([23:11-14], $o2))), (<expr#3> as KeyedTraversable<int, string>), (KeyedTraversable<int, int>), Typing))))
                         ];
                       unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([9:10-32], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([26:10-37], "\\call_keyed_traversable_cast");
       fd_fun =
       { f_span = [26:1-41:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((void), (Some ([29:4-8], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (KeyedTraversable<string, int>);
            param_type_hint = ((KeyedTraversable<string, int>), (Some ([27:3-32], (Happly (([27:3-19], "\\HH\\KeyedTraversable"), [([27:20-26], (Hprim Tstring)); ([27:28-31], (Hprim Tint))])))));
            param_pos = [27:33-36]; param_name = "$o1"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (KeyedTraversable<int, string>);
             param_type_hint = ((KeyedTraversable<int, string>), (Some ([28:3-32], (Happly (([28:3-19], "\\HH\\KeyedTraversable"), [([28:20-23], (Hprim Tint)); ([28:25-31], (Hprim Tstring))])))));
             param_pos = [28:33-36]; param_name = "$o2"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([31:3-89],
             (Expr
                ((~void), [31:3-88],
                 (Call
                    { func = (((function(KeyedTraversable<int, int> $o): void)), [31:3-4], (Id ([31:3-4], "\\o"))); 
                      targs = [];
                      args =
                      [(Anormal
                          ((~KeyedTraversable<int, int>), [31:5-87],
                           (Hole (((KeyedTraversable<string, int>), [31:83-86], (Lvar ([31:83-86], $o1))), (KeyedTraversable<string, int>), (KeyedTraversable<int, int>),
                              (UnsafeCast
                                 [([31:27-55], (Happly (([31:27-43], "\\HH\\KeyedTraversable"), [([31:44-50], (Hprim Tstring)); ([31:51-54], (Hprim Tint))])));
                                   ([31:56-81], (Happly (([31:56-72], "\\HH\\KeyedTraversable"), [([31:73-76], (Hprim Tint)); ([31:77-80], (Hprim Tint))])))])
                              ))))
                        ];
                      unpacked_arg = None }))));
             ([33:3-89],
              (Expr
                 ((~void), [33:3-88],
                  (Call
                     { func = (((function(KeyedTraversable<int, int> $o): void)), [33:3-4], (Id ([33:3-4], "\\o"))); 
                       targs = [];
                       args =
                       [(Anormal
                           ((~KeyedTraversable<int, int>), [33:5-87],
                            (Hole (((KeyedTraversable<int, string>), [33:83-86], (Lvar ([33:83-86], $o2))), (KeyedTraversable<int, string>), (KeyedTraversable<int, int>),
                               (UnsafeCast
                                  [([33:27-55], (Happly (([33:27-43], "\\HH\\KeyedTraversable"), [([33:44-47], (Hprim Tint)); ([33:48-54], (Hprim Tstring))])));
                                    ([33:56-81], (Happly (([33:56-72], "\\HH\\KeyedTraversable"), [([33:73-76], (Hprim Tint)); ([33:77-80], (Hprim Tint))])))])
                               ))))
                         ];
                       unpacked_arg = None }))));
             ([35:3-37],
              (Expr
                 ((exact TestKeyedTraversable), [35:3-36],
                  (Assign (((exact TestKeyedTraversable), [35:3-7], (Lvar ([35:3-7], $foo))), None,
                     ((exact TestKeyedTraversable), [35:10-36], (New (((exact TestKeyedTraversable), [35:14-34], (CI ([35:14-34], "\\TestKeyedTraversable"))), [], [], None, ((function(): void))))))))));
             ([38:3-95],
              (Expr
                 ((~void), [38:3-94],
                  (Call
                     { func =
                       (((function(KeyedTraversable<int, int> $o): void)), [38:3-10],
                        (Obj_get (((exact TestKeyedTraversable), [38:3-7], (Lvar ([38:3-7], $foo))), (
                           ((function(KeyedTraversable<int, int> $o): void)), [38:9-10], (Id ([38:9-10], "o"))), OG_nullthrows, Is_method)));
                       targs = [];
                       args =
                       [(Anormal
                           ((~KeyedTraversable<int, int>), [38:11-93],
                            (Hole (((KeyedTraversable<string, int>), [38:89-92], (Lvar ([38:89-92], $o1))), (KeyedTraversable<string, int>), (KeyedTraversable<int, int>),
                               (UnsafeCast
                                  [([38:33-61], (Happly (([38:33-49], "\\HH\\KeyedTraversable"), [([38:50-56], (Hprim Tstring)); ([38:57-60], (Hprim Tint))])));
                                    ([38:62-87], (Happly (([38:62-78], "\\HH\\KeyedTraversable"), [([38:79-82], (Hprim Tint)); ([38:83-86], (Hprim Tint))])))])
                               ))))
                         ];
                       unpacked_arg = None }))));
             ([40:3-95],
              (Expr
                 ((~void), [40:3-94],
                  (Call
                     { func =
                       (((function(KeyedTraversable<int, int> $o): void)), [40:3-10],
                        (Obj_get (((exact TestKeyedTraversable), [40:3-7], (Lvar ([40:3-7], $foo))), (
                           ((function(KeyedTraversable<int, int> $o): void)), [40:9-10], (Id ([40:9-10], "o"))), OG_nullthrows, Is_method)));
                       targs = [];
                       args =
                       [(Anormal
                           ((~KeyedTraversable<int, int>), [40:11-93],
                            (Hole (((KeyedTraversable<int, string>), [40:89-92], (Lvar ([40:89-92], $o2))), (KeyedTraversable<int, string>), (KeyedTraversable<int, int>),
                               (UnsafeCast
                                  [([40:33-61], (Happly (([40:33-49], "\\HH\\KeyedTraversable"), [([40:50-53], (Hprim Tint)); ([40:54-60], (Hprim Tstring))])));
                                    ([40:62-87], (Happly (([40:62-78], "\\HH\\KeyedTraversable"), [([40:79-82], (Hprim Tint)); ([40:83-86], (Hprim Tint))])))])
                               ))))
                         ];
                       unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([26:10-37], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Class
     { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
       c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
       c_name = ([3:7-27], "\\TestKeyedTraversable"); c_tparams = []; 
       c_extends = []; c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; 
       c_reqs = []; c_implements = []; c_consts = []; c_typeconsts = []; 
       c_vars = [];
       c_methods =
       [{ m_span = [4:3-60]; m_annotation = (); m_final = false; m_abstract = false; 
          m_static = false; m_readonly_this = false; m_visibility = Public; 
          m_name = ([4:19-20], "o"); m_tparams = []; m_where_constraints = [];
          m_params =
          [{ param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([4:21-47], (Happly (([4:21-37], "\\HH\\KeyedTraversable"), [([4:38-41], (Hprim Tint)); ([4:43-46], (Hprim Tint))])))));
             param_pos = [4:48-50]; param_name = "$o"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
            ];
          m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([Pos.none], Noop)] }; 
          m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
          m_ret = ((dynamic), (Some ([4:53-57], (Hprim Tvoid)))); m_external = false; 
          m_doc_comment = None }
         ];
       c_xhp_children = []; c_xhp_attrs = [];
       c_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       c_user_attributes = [{ ua_name = ([3:7-27], "__SupportDynamicType"); ua_params = [] }]; 
       c_file_attributes = []; c_docs_url = None; c_enum = None; c_doc_comment = None; 
       c_emit_id = None; c_internal = false; c_module = None; c_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-11], "\\o");
       fd_fun =
       { f_span = [7:1-51]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([7:44-48], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (dynamic); param_type_hint = ((dynamic), (Some ([7:12-38], (Happly (([7:12-28], "\\HH\\KeyedTraversable"), [([7:29-32], (Hprim Tint)); ([7:34-37], (Hprim Tint))])))));
            param_pos = [7:39-41]; param_name = "$o"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([7:10-11], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([26:10-37], "\\call_keyed_traversable_cast");
       fd_fun =
       { f_span = [26:1-41:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((dynamic), (Some ([29:4-8], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (dynamic);
            param_type_hint = ((dynamic), (Some ([27:3-32], (Happly (([27:3-19], "\\HH\\KeyedTraversable"), [([27:20-26], (Hprim Tstring)); ([27:28-31], (Hprim Tint))]))))); 
            param_pos = [27:33-36]; param_name = "$o1"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (dynamic);
             param_type_hint = ((dynamic), (Some ([28:3-32], (Happly (([28:3-19], "\\HH\\KeyedTraversable"), [([28:20-23], (Hprim Tint)); ([28:25-31], (Hprim Tstring))]))))); 
             param_pos = [28:33-36]; param_name = "$o2"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([31:3-89],
             (Expr
                ((~void), [31:3-88],
                 (Call
                    { func = (((function(KeyedTraversable<int, int> $o): void)), [31:3-4], (Id ([31:3-4], "\\o"))); 
                      targs = [];
                      args =
                      [(Anormal
                          ((~KeyedTraversable<int, int>), [31:5-87],
                           (Hole (((dynamic), [31:83-86], (Lvar ([31:83-86], $o1))), (KeyedTraversable<string, int>), (KeyedTraversable<int, int>),
                              (UnsafeCast
                                 [([31:27-55], (Happly (([31:27-43], "\\HH\\KeyedTraversable"), [([31:44-50], (Hprim Tstring)); ([31:51-54], (Hprim Tint))])));
                                   ([31:56-81], (Happly (([31:56-72], "\\HH\\KeyedTraversable"), [([31:73-76], (Hprim Tint)); ([31:77-80], (Hprim Tint))])))])
                              ))))
                        ];
                      unpacked_arg = None }))));
             ([33:3-89],
              (Expr
                 ((~void), [33:3-88],
                  (Call
                     { func = (((function(KeyedTraversable<int, int> $o): void)), [33:3-4], (Id ([33:3-4], "\\o"))); 
                       targs = [];
                       args =
                       [(Anormal
                           ((~KeyedTraversable<int, int>), [33:5-87],
                            (Hole (((dynamic), [33:83-86], (Lvar ([33:83-86], $o2))), (KeyedTraversable<int, string>), (KeyedTraversable<int, int>),
                               (UnsafeCast
                                  [([33:27-55], (Happly (([33:27-43], "\\HH\\KeyedTraversable"), [([33:44-47], (Hprim Tint)); ([33:48-54], (Hprim Tstring))])));
                                    ([33:56-81], (Happly (([33:56-72], "\\HH\\KeyedTraversable"), [([33:73-76], (Hprim Tint)); ([33:77-80], (Hprim Tint))])))])
                               ))))
                         ];
                       unpacked_arg = None }))));
             ([35:3-37],
              (Expr
                 ((exact TestKeyedTraversable), [35:3-36],
                  (Assign (((exact TestKeyedTraversable), [35:3-7], (Lvar ([35:3-7], $foo))), None,
                     ((exact TestKeyedTraversable), [35:10-36], (New (((exact TestKeyedTraversable), [35:14-34], (CI ([35:14-34], "\\TestKeyedTraversable"))), [], [], None, ((function(): void))))))))));
             ([38:3-95],
              (Expr
                 ((~void), [38:3-94],
                  (Call
                     { func =
                       (((function(KeyedTraversable<int, int> $o): void)), [38:3-10],
                        (Obj_get (((exact TestKeyedTraversable), [38:3-7], (Lvar ([38:3-7], $foo))), (
                           ((function(KeyedTraversable<int, int> $o): void)), [38:9-10], (Id ([38:9-10], "o"))), OG_nullthrows, Is_method)));
                       targs = [];
                       args =
                       [(Anormal
                           ((~KeyedTraversable<int, int>), [38:11-93],
                            (Hole (((dynamic), [38:89-92], (Lvar ([38:89-92], $o1))), (KeyedTraversable<string, int>), (KeyedTraversable<int, int>),
                               (UnsafeCast
                                  [([38:33-61], (Happly (([38:33-49], "\\HH\\KeyedTraversable"), [([38:50-56], (Hprim Tstring)); ([38:57-60], (Hprim Tint))])));
                                    ([38:62-87], (Happly (([38:62-78], "\\HH\\KeyedTraversable"), [([38:79-82], (Hprim Tint)); ([38:83-86], (Hprim Tint))])))])
                               ))))
                         ];
                       unpacked_arg = None }))));
             ([40:3-95],
              (Expr
                 ((~void), [40:3-94],
                  (Call
                     { func =
                       (((function(KeyedTraversable<int, int> $o): void)), [40:3-10],
                        (Obj_get (((exact TestKeyedTraversable), [40:3-7], (Lvar ([40:3-7], $foo))), (
                           ((function(KeyedTraversable<int, int> $o): void)), [40:9-10], (Id ([40:9-10], "o"))), OG_nullthrows, Is_method)));
                       targs = [];
                       args =
                       [(Anormal
                           ((~KeyedTraversable<int, int>), [40:11-93],
                            (Hole (((dynamic), [40:89-92], (Lvar ([40:89-92], $o2))), (KeyedTraversable<int, string>), (KeyedTraversable<int, int>),
                               (UnsafeCast
                                  [([40:33-61], (Happly (([40:33-49], "\\HH\\KeyedTraversable"), [([40:50-53], (Hprim Tint)); ([40:54-60], (Hprim Tstring))])));
                                    ([40:62-87], (Happly (([40:62-78], "\\HH\\KeyedTraversable"), [([40:79-82], (Hprim Tint)); ([40:83-86], (Hprim Tint))])))])
                               ))))
                         ];
                       unpacked_arg = None }))))
             ]
           };
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([26:10-37], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = []; 
       fd_package = None })