[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([3:10-11], "\\f");
      fd_fun =
      { f_span = [3:1-7:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((int), (Some ([3:22-25], (Hprim Tint))));
        f_params =
        [{ param_annotation = (?int); param_type_hint = ((?int), (Some ([3:12-16], (Hoption ([3:13-16], (Hprim Tint)))))); 
           param_is_variadic = false; param_pos = [3:17-19]; param_name = "$x"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([4:3-29],
            (If (((bool), [4:7-18], (Binop { bop = Eqeqeq; lhs = ((?int), [4:7-9], (Lvar ([4:7-9], $x))); rhs = ((null), [4:14-18], Null) })),
               [([4:3-29], (AssertEnv (Refinement, {$x}))); ([4:20-29], (Return (Some ((int), [4:27-28], (Int "1")))))], 
               [([4:3-29], (AssertEnv (Refinement, {$x}))); ([Pos.none], Noop)])));
            ([5:3-29],
             (If (((bool), [5:7-18], (Binop { bop = Eqeqeq; lhs = ((null), [5:7-11], Null); rhs = ((int), [5:16-18], (Lvar ([5:16-18], $x))) })),
                [([5:3-29], (AssertEnv (Refinement, {$x}))); ([5:20-29], (Return (Some ((int), [5:27-28], (Int "2")))))], 
                [([5:3-29], (AssertEnv (Refinement, {$x}))); ([Pos.none], Noop)])));
            ([6:3-12], (Return (Some ((int), [6:10-11], (Int "0")))))]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })