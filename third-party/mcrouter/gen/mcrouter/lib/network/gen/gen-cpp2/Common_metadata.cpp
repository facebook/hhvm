/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "mcrouter/lib/network/gen/gen-cpp2/Common_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McVersionRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McVersionRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McVersionRequest = res.first->second;
  Common_McVersionRequest.name_ref() = "Common.McVersionRequest";
  Common_McVersionRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McVersionRequest_fields[] = {
    std::make_tuple(1, "key", false, std::make_unique<Typedef>("carbon.IOBufKey", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
  };
  for (const auto& f : Common_McVersionRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McVersionRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McVersionReply>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McVersionReply", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McVersionReply = res.first->second;
  Common_McVersionReply.name_ref() = "Common.McVersionReply";
  Common_McVersionReply.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McVersionReply_fields[] = {
    std::make_tuple(1, "result", false, std::make_unique<Enum< ::carbon::Result>>("carbon_result.Result")),
    std::make_tuple(2, "value", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE)),
    std::make_tuple(3, "message", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(4, "appSpecificErrorCode", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : Common_McVersionReply_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McVersionReply.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McStatsRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McStatsRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McStatsRequest = res.first->second;
  Common_McStatsRequest.name_ref() = "Common.McStatsRequest";
  Common_McStatsRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McStatsRequest_fields[] = {
    std::make_tuple(1, "key", false, std::make_unique<Typedef>("carbon.IOBufKey", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
  };
  for (const auto& f : Common_McStatsRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McStatsRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McStatsReply>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McStatsReply", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McStatsReply = res.first->second;
  Common_McStatsReply.name_ref() = "Common.McStatsReply";
  Common_McStatsReply.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McStatsReply_fields[] = {
    std::make_tuple(1, "result", false, std::make_unique<Enum< ::carbon::Result>>("carbon_result.Result")),
    std::make_tuple(2, "message", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(3, "stats", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE))),
    std::make_tuple(4, "appSpecificErrorCode", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : Common_McStatsReply_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McStatsReply.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McShutdownRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McShutdownRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McShutdownRequest = res.first->second;
  Common_McShutdownRequest.name_ref() = "Common.McShutdownRequest";
  Common_McShutdownRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McShutdownRequest_fields[] = {
    std::make_tuple(1, "key", false, std::make_unique<Typedef>("carbon.IOBufKey", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
  };
  for (const auto& f : Common_McShutdownRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McShutdownRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McShutdownReply>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McShutdownReply", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McShutdownReply = res.first->second;
  Common_McShutdownReply.name_ref() = "Common.McShutdownReply";
  Common_McShutdownReply.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McShutdownReply_fields[] = {
    std::make_tuple(1, "result", false, std::make_unique<Enum< ::carbon::Result>>("carbon_result.Result")),
    std::make_tuple(2, "message", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(3, "appSpecificErrorCode", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : Common_McShutdownReply_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McShutdownReply.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McQuitRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McQuitRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McQuitRequest = res.first->second;
  Common_McQuitRequest.name_ref() = "Common.McQuitRequest";
  Common_McQuitRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McQuitRequest_fields[] = {
    std::make_tuple(1, "key", false, std::make_unique<Typedef>("carbon.IOBufKey", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
  };
  for (const auto& f : Common_McQuitRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McQuitRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McQuitReply>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McQuitReply", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McQuitReply = res.first->second;
  Common_McQuitReply.name_ref() = "Common.McQuitReply";
  Common_McQuitReply.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McQuitReply_fields[] = {
    std::make_tuple(1, "result", false, std::make_unique<Enum< ::carbon::Result>>("carbon_result.Result")),
    std::make_tuple(2, "message", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(3, "appSpecificErrorCode", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : Common_McQuitReply_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McQuitReply.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McExecRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McExecRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McExecRequest = res.first->second;
  Common_McExecRequest.name_ref() = "Common.McExecRequest";
  Common_McExecRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McExecRequest_fields[] = {
    std::make_tuple(1, "key", false, std::make_unique<Typedef>("carbon.IOBufKey", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE))),
  };
  for (const auto& f : Common_McExecRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McExecRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::McExecReply>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.McExecReply", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_McExecReply = res.first->second;
  Common_McExecReply.name_ref() = "Common.McExecReply";
  Common_McExecReply.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_McExecReply_fields[] = {
    std::make_tuple(1, "result", false, std::make_unique<Enum< ::carbon::Result>>("carbon_result.Result")),
    std::make_tuple(2, "response", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(3, "message", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
    std::make_tuple(4, "appSpecificErrorCode", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE)),
  };
  for (const auto& f : Common_McExecReply_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_McExecReply.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::GoAwayAcknowledgement>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.GoAwayAcknowledgement", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_GoAwayAcknowledgement = res.first->second;
  Common_GoAwayAcknowledgement.name_ref() = "Common.GoAwayAcknowledgement";
  Common_GoAwayAcknowledgement.is_union_ref() = false;
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::memcache::thrift::GoAwayRequest>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("Common.GoAwayRequest", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& Common_GoAwayRequest = res.first->second;
  Common_GoAwayRequest.name_ref() = "Common.GoAwayRequest";
  Common_GoAwayRequest.is_union_ref() = false;
  static const std::tuple<int32_t, const char*, bool, std::unique_ptr<MetadataTypeInterface>>
  Common_GoAwayRequest_fields[] = {
    std::make_tuple(1, "result", false, std::make_unique<Enum< ::carbon::Result>>("carbon_result.Result")),
    std::make_tuple(2, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)),
  };
  for (const auto& f : Common_GoAwayRequest_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    Common_GoAwayRequest.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
