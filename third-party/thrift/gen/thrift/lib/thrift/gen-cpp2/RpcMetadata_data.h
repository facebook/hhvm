/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "thrift/lib/thrift/gen-cpp2/RpcMetadata_types.h"

namespace apache { namespace thrift {

struct _ProtocolIdEnumDataStorage {
  using type = ProtocolId;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<ProtocolId, 2> values = {{
    ProtocolId::BINARY,
    ProtocolId::COMPACT,
  }};
  static constexpr const std::array<folly::StringPiece, 2> names = {{
    "BINARY",
    "COMPACT",
  }};
};

}} // apache::thrift
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::ProtocolId> {
  using storage_type = ::apache::thrift::_ProtocolIdEnumDataStorage;
};

}} // apache::thrift
namespace apache { namespace thrift {

struct _RpcKindEnumDataStorage {
  using type = RpcKind;
  static constexpr const std::size_t size = 7;
  static constexpr const std::array<RpcKind, 7> values = {{
    RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE,
    RpcKind::SINGLE_REQUEST_NO_RESPONSE,
    RpcKind::STREAMING_REQUEST_SINGLE_RESPONSE,
    RpcKind::STREAMING_REQUEST_NO_RESPONSE,
    RpcKind::SINGLE_REQUEST_STREAMING_RESPONSE,
    RpcKind::STREAMING_REQUEST_STREAMING_RESPONSE,
    RpcKind::SINK,
  }};
  static constexpr const std::array<folly::StringPiece, 7> names = {{
    "SINGLE_REQUEST_SINGLE_RESPONSE",
    "SINGLE_REQUEST_NO_RESPONSE",
    "STREAMING_REQUEST_SINGLE_RESPONSE",
    "STREAMING_REQUEST_NO_RESPONSE",
    "SINGLE_REQUEST_STREAMING_RESPONSE",
    "STREAMING_REQUEST_STREAMING_RESPONSE",
    "SINK",
  }};
};

}} // apache::thrift
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::RpcKind> {
  using storage_type = ::apache::thrift::_RpcKindEnumDataStorage;
};

}} // apache::thrift
namespace apache { namespace thrift {

struct _RpcPriorityEnumDataStorage {
  using type = RpcPriority;
  static constexpr const std::size_t size = 6;
  static constexpr const std::array<RpcPriority, 6> values = {{
    RpcPriority::HIGH_IMPORTANT,
    RpcPriority::HIGH,
    RpcPriority::IMPORTANT,
    RpcPriority::NORMAL,
    RpcPriority::BEST_EFFORT,
    RpcPriority::N_PRIORITIES,
  }};
  static constexpr const std::array<folly::StringPiece, 6> names = {{
    "HIGH_IMPORTANT",
    "HIGH",
    "IMPORTANT",
    "NORMAL",
    "BEST_EFFORT",
    "N_PRIORITIES",
  }};
};

}} // apache::thrift
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::RpcPriority> {
  using storage_type = ::apache::thrift::_RpcPriorityEnumDataStorage;
};

}} // apache::thrift
namespace apache { namespace thrift {

struct _CompressionAlgorithmEnumDataStorage {
  using type = CompressionAlgorithm;
  static constexpr const std::size_t size = 3;
  static constexpr const std::array<CompressionAlgorithm, 3> values = {{
    CompressionAlgorithm::NONE,
    CompressionAlgorithm::ZLIB,
    CompressionAlgorithm::ZSTD,
  }};
  static constexpr const std::array<folly::StringPiece, 3> names = {{
    "NONE",
    "ZLIB",
    "ZSTD",
  }};
};

}} // apache::thrift
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::CompressionAlgorithm> {
  using storage_type = ::apache::thrift::_CompressionAlgorithmEnumDataStorage;
};

}} // apache::thrift
namespace apache { namespace thrift {

struct _RequestRpcMetadataFlagsEnumDataStorage {
  using type = RequestRpcMetadataFlags;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<RequestRpcMetadataFlags, 2> values = {{
    RequestRpcMetadataFlags::UNKNOWN,
    RequestRpcMetadataFlags::QUERY_SERVER_LOAD,
  }};
  static constexpr const std::array<folly::StringPiece, 2> names = {{
    "UNKNOWN",
    "QUERY_SERVER_LOAD",
  }};
};

}} // apache::thrift
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::RequestRpcMetadataFlags> {
  using storage_type = ::apache::thrift::_RequestRpcMetadataFlagsEnumDataStorage;
};

}} // apache::thrift
namespace apache { namespace thrift {

struct _InterfaceKindEnumDataStorage {
  using type = InterfaceKind;
  static constexpr const std::size_t size = 2;
  static constexpr const std::array<InterfaceKind, 2> values = {{
    InterfaceKind::USER,
    InterfaceKind::DEBUGGING,
  }};
  static constexpr const std::array<folly::StringPiece, 2> names = {{
    "USER",
    "DEBUGGING",
  }};
};

}} // apache::thrift
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::InterfaceKind> {
  using storage_type = ::apache::thrift::_InterfaceKindEnumDataStorage;
};

}} // apache::thrift

