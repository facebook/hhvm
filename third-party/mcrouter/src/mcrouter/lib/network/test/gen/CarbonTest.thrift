/*
 *  Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
include "mcrouter/lib/carbon/carbon.thrift"
include "mcrouter/lib/carbon/carbon_result.thrift"
include "thrift/annotation/cpp.thrift"
include "thrift/annotation/thrift.thrift"

cpp_include "<mcrouter/lib/carbon/CarbonProtocolReader.h>"

namespace cpp2 facebook.memcache.test.thrift
namespace py3 facebook.memcache.test.thrift

@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

"
  },
}
struct ManyFields {
  1: carbon.IOBuf buf1
  2: carbon.IOBuf buf2
  3: carbon.IOBuf buf3
  4: carbon.IOBuf buf4
  5: carbon.IOBuf buf5
  6: carbon.IOBuf buf6
  7: carbon.IOBuf buf7
  8: carbon.IOBuf buf8
  9: carbon.IOBuf buf9
  10: carbon.IOBuf buf10
  11: carbon.IOBuf buf11
  12: carbon.IOBuf buf12
  13: carbon.IOBuf buf13
  14: carbon.IOBuf buf14
  15: carbon.IOBuf buf15
  16: carbon.IOBuf buf16
  17: carbon.IOBuf buf17
  18: carbon.IOBuf buf18
  19: carbon.IOBuf buf19
  20: carbon.IOBuf buf20
  21: carbon.IOBuf buf21
  22: carbon.IOBuf buf22
  23: carbon.IOBuf buf23
  24: carbon.IOBuf buf24
  25: carbon.IOBuf buf25
  26: carbon.IOBuf buf26
  27: carbon.IOBuf buf27
  28: carbon.IOBuf buf28
  29: carbon.IOBuf buf29
  30: carbon.IOBuf buf30
  31: carbon.IOBuf buf31
  32: carbon.IOBuf buf32
  33: carbon.IOBuf buf33
  34: carbon.IOBuf buf34
  35: carbon.IOBuf buf35
  36: carbon.IOBuf buf36
  37: carbon.IOBuf buf37
  38: carbon.IOBuf buf38
  39: carbon.IOBuf buf39
  40: carbon.IOBuf buf40
}
@thrift.DeprecatedUnvalidatedAnnotations{
  items = {
    "cpp.methods": "
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

"
  },
}
struct McExpTestRequest {
  1: carbon.IOBufKey key
  2: carbon.ui64 flags
  3: carbon.ui64 deadlineMs
}

