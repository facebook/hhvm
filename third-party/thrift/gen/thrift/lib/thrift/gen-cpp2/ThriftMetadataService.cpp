/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/lib/thrift/gen-cpp2/ThriftMetadataService.h"
#include "thrift/lib/thrift/gen-cpp2/ThriftMetadataService.tcc"

#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace apache { namespace thrift { namespace metadata {
std::unique_ptr<apache::thrift::AsyncProcessor> ThriftMetadataServiceSvIf::getProcessor() {
  return std::make_unique<ThriftMetadataServiceAsyncProcessor>(this);
}

void ThriftMetadataServiceSvIf::getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getRpcMetadata");
}

folly::SemiFuture<std::unique_ptr< ::apache::thrift::metadata::ThriftMetadata>> ThriftMetadataServiceSvIf::semifuture_getRpcMetadata() {
  return apache::thrift::detail::si::semifuture_returning_uptr([&]( ::apache::thrift::metadata::ThriftMetadata& _return) { getRpcMetadata(_return); });
}

folly::Future<std::unique_ptr< ::apache::thrift::metadata::ThriftMetadata>> ThriftMetadataServiceSvIf::future_getRpcMetadata() {
  return apache::thrift::detail::si::future(semifuture_getRpcMetadata(), getThreadManager());
}


void ThriftMetadataServiceSvIf::async_tm_getRpcMetadata(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::metadata::ThriftMetadata>>> callback) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_getRpcMetadata(); });
}


void ThriftMetadataServiceSvNull::getRpcMetadata( ::apache::thrift::metadata::ThriftMetadata& /*_return*/) {}

const char* ThriftMetadataServiceAsyncProcessor::getServiceName() {
  return "ThriftMetadataService";
}

void ThriftMetadataServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool ThriftMetadataServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::shared_ptr<folly::RequestContext> ThriftMetadataServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

std::unordered_set<std::string> ThriftMetadataServiceAsyncProcessor::onewayMethods_ {};
const ThriftMetadataServiceAsyncProcessor::ProcessMap& ThriftMetadataServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const ThriftMetadataServiceAsyncProcessor::ProcessMap ThriftMetadataServiceAsyncProcessor::binaryProcessMap_ {
  {"getRpcMetadata", &ThriftMetadataServiceAsyncProcessor::_processInThread_getRpcMetadata<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const ThriftMetadataServiceAsyncProcessor::ProcessMap& ThriftMetadataServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const ThriftMetadataServiceAsyncProcessor::ProcessMap ThriftMetadataServiceAsyncProcessor::compactProcessMap_ {
  {"getRpcMetadata", &ThriftMetadataServiceAsyncProcessor::_processInThread_getRpcMetadata<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // apache::thrift::metadata
