#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/templated-deserialize/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr
from libcpp.optional cimport optional as __optional
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
from thrift.py3.types import _IsSet as _fbthrift_IsSet
from thrift.py3.types cimport make_unique
cimport thrift.py3.types
cimport thrift.py3.exceptions
cimport thrift.python.exceptions
import thrift.python.converter
from thrift.python.types import EnumMeta as __EnumMeta
from thrift.python.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.python.types cimport BadEnum as __BadEnum
from thrift.py3.types cimport (
    richcmp as __richcmp,
    init_unicode_from_cpp as __init_unicode_from_cpp,
    set_iter as __set_iter,
    map_iter as __map_iter,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    const_pointer_cast,
    make_const_shared,
    constant_shared_ptr,
)
from thrift.py3.types cimport _ensure_py3_or_raise, _ensure_py3_container_or_raise
cimport thrift.py3.serializer as serializer
from thrift.python.protocol cimport Protocol as __Protocol
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
import importlib

import module.thrift_types as _fbthrift_python_types
from module.thrift_enums import (
    MyEnumA,
)

from module.containers_FBTHRIFT_ONLY_DO_NOT_USE import (
    Map__string_bool,
    Set__i32,
    List__i32,
    List__List__i32,
    List__List__List__i32,
    Map__string_i32,
    Map__string_Map__string_i32,
    Map__string_Map__string_Map__string_i32,
    List__Set__i32,
    Map__string_List__i32,
    List__List__List__List__i32,
    Set__bool,
    Set__Set__bool,
    Set__Set__Set__bool,
    Set__List__i32,
    Set__string,
    List__Set__string,
    Map__List__Set__string_string,
    Map__Set__List__i32_Map__List__Set__string_string,
)

_fbthrift__module_name__ = "module.types"

cdef object get_types_reflection():
    return importlib.import_module(
        "module.types_reflection"
    )

@__cython.auto_pickle(False)
@__cython.final
cdef class SmallStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(SmallStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSmallStruct]()
        self._fields_setter = _fbthrift_types_fields.__SmallStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(SmallStruct self, **kwargs):
        if not kwargs:
            return self
        cdef SmallStruct __fbthrift_inst = SmallStruct.__new__(SmallStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSmallStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SmallStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("SmallStruct", {
          "small_A": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).small_A_ref().has_value(),
          "small_B": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).small_B_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.cSmallStruct] cpp_obj):
        __fbthrift_inst = <SmallStruct>SmallStruct.__new__(SmallStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline small_A_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).small_A_ref().value()

    @property
    def small_A(self):
        return self.small_A_impl()

    cdef inline small_B_impl(self):
        return deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).small_B_ref().value()

    @property
    def small_B(self):
        return self.small_B_impl()


    def __hash__(SmallStruct self):
        return super().__hash__()

    def __repr__(SmallStruct self):
        return super().__repr__()

    def __str__(SmallStruct self):
        return super().__str__()


    def __copy__(SmallStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.cSmallStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<SmallStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__SmallStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.cSmallStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.SmallStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.cSmallStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(SmallStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.cSmallStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(SmallStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.cSmallStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.cSmallStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.SmallStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.SmallStruct, self)

@__cython.auto_pickle(False)
@__cython.final
cdef class containerStruct(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__

    def __init__(containerStruct self, **kwargs):
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.ccontainerStruct]()
        self._fields_setter = _fbthrift_types_fields.__containerStruct_FieldsSetter._fbthrift_create(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        super().__init__(**kwargs)

    def __call__(containerStruct self, **kwargs):
        if not kwargs:
            return self
        cdef containerStruct __fbthrift_inst = containerStruct.__new__(containerStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.ccontainerStruct](deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__containerStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            (<thrift.py3.types.Struct>__fbthrift_inst)._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("containerStruct", {
          "fieldA": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldA_ref().has_value(),
          "fieldB": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldB_ref().has_value(),
          "fieldC": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldC_ref().has_value(),
          "fieldD": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldD_ref().has_value(),
          "fieldE": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldE_ref().has_value(),
          "fieldF": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldF_ref().has_value(),
          "fieldG": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldG_ref().has_value(),
          "fieldH": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldH_ref().has_value(),
          "fieldI": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldI_ref().has_value(),
          "fieldJ": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldJ_ref().has_value(),
          "fieldK": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldK_ref().has_value(),
          "fieldL": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldL_ref().has_value(),
          "fieldM": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldM_ref().has_value(),
          "fieldQ": deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldQ_ref().has_value(),
        })

    @staticmethod
    cdef _create_FBTHRIFT_ONLY_DO_NOT_USE(shared_ptr[_module_cbindings.ccontainerStruct] cpp_obj):
        __fbthrift_inst = <containerStruct>containerStruct.__new__(containerStruct)
        __fbthrift_inst._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline fieldA_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldA_ref().value()

    @property
    def fieldA(self):
        return self.fieldA_impl()

    cdef inline fieldB_impl(self):
        if self.__fbthrift_cached_fieldB is None:
            self.__fbthrift_cached_fieldB = Map__string_bool__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldB_ref().ref())
        return self.__fbthrift_cached_fieldB

    @property
    def fieldB(self):
        return self.fieldB_impl()

    cdef inline fieldC_impl(self):
        if self.__fbthrift_cached_fieldC is None:
            self.__fbthrift_cached_fieldC = Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldC_ref().ref())
        return self.__fbthrift_cached_fieldC

    @property
    def fieldC(self):
        return self.fieldC_impl()

    cdef inline fieldD_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldD_ref().value()).decode('UTF-8')

    @property
    def fieldD(self):
        return self.fieldD_impl()

    cdef inline fieldE_impl(self):
        return (<bytes>deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldE_ref().value()).decode('UTF-8')

    @property
    def fieldE(self):
        return self.fieldE_impl()

    cdef inline fieldF_impl(self):
        if self.__fbthrift_cached_fieldF is None:
            self.__fbthrift_cached_fieldF = List__List__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldF_ref().ref())
        return self.__fbthrift_cached_fieldF

    @property
    def fieldF(self):
        return self.fieldF_impl()

    cdef inline fieldG_impl(self):
        if self.__fbthrift_cached_fieldG is None:
            self.__fbthrift_cached_fieldG = Map__string_Map__string_Map__string_i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldG_ref().ref())
        return self.__fbthrift_cached_fieldG

    @property
    def fieldG(self):
        return self.fieldG_impl()

    cdef inline fieldH_impl(self):
        if self.__fbthrift_cached_fieldH is None:
            self.__fbthrift_cached_fieldH = List__Set__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldH_ref().ref())
        return self.__fbthrift_cached_fieldH

    @property
    def fieldH(self):
        return self.fieldH_impl()

    cdef inline fieldI_impl(self):
        return <pbool> deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldI_ref().value()

    @property
    def fieldI(self):
        return self.fieldI_impl()

    cdef inline fieldJ_impl(self):
        if self.__fbthrift_cached_fieldJ is None:
            self.__fbthrift_cached_fieldJ = Map__string_List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldJ_ref().ref())
        return self.__fbthrift_cached_fieldJ

    @property
    def fieldJ(self):
        return self.fieldJ_impl()

    cdef inline fieldK_impl(self):
        if self.__fbthrift_cached_fieldK is None:
            self.__fbthrift_cached_fieldK = List__List__List__List__i32__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldK_ref().ref())
        return self.__fbthrift_cached_fieldK

    @property
    def fieldK(self):
        return self.fieldK_impl()

    cdef inline fieldL_impl(self):
        if self.__fbthrift_cached_fieldL is None:
            self.__fbthrift_cached_fieldL = Set__Set__Set__bool__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldL_ref().ref())
        return self.__fbthrift_cached_fieldL

    @property
    def fieldL(self):
        return self.fieldL_impl()

    cdef inline fieldM_impl(self):
        if self.__fbthrift_cached_fieldM is None:
            self.__fbthrift_cached_fieldM = Map__Set__List__i32_Map__List__Set__string_string__from_cpp(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldM_ref().ref())
        return self.__fbthrift_cached_fieldM

    @property
    def fieldM(self):
        return self.fieldM_impl()

    cdef inline fieldQ_impl(self):
        if self.__fbthrift_cached_fieldQ is None:
            self.__fbthrift_cached_fieldQ = translate_cpp_enum_to_python(MyEnumA, <int>(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldQ_ref().value()))
        return self.__fbthrift_cached_fieldQ

    @property
    def fieldQ(self):
        return self.fieldQ_impl()

    cdef inline fieldR_impl(self):
        if self.__fbthrift_cached_fieldR is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldR_ref():
                return None
            self.__fbthrift_cached_fieldR = Map__string_bool__from_cpp(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldR_ref()))
        return self.__fbthrift_cached_fieldR

    @property
    def fieldR(self):
        return self.fieldR_impl()

    cdef inline fieldS_impl(self):
        if self.__fbthrift_cached_fieldS is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldS_ref():
                return None
            self.__fbthrift_cached_fieldS = SmallStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldS_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_fieldS

    @property
    def fieldS(self):
        return self.fieldS_impl()

    cdef inline fieldT_impl(self):
        if self.__fbthrift_cached_fieldT is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldT_ref():
                return None
            self.__fbthrift_cached_fieldT = SmallStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldT_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_fieldT

    @property
    def fieldT(self):
        return self.fieldT_impl()

    cdef inline fieldU_impl(self):
        if self.__fbthrift_cached_fieldU is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldU_ref():
                return None
            self.__fbthrift_cached_fieldU = SmallStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldU_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_fieldU

    @property
    def fieldU(self):
        return self.fieldU_impl()

    cdef inline fieldX_impl(self):
        if self.__fbthrift_cached_fieldX is None:
            if not deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldX_ref():
                return None
            self.__fbthrift_cached_fieldX = SmallStruct._create_FBTHRIFT_ONLY_DO_NOT_USE(__reference_shared_ptr(deref(deref(self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE).fieldX_ref()), self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE))
        return self.__fbthrift_cached_fieldX

    @property
    def fieldX(self):
        return self.fieldX_impl()


    def __hash__(containerStruct self):
        return super().__hash__()

    def __repr__(containerStruct self):
        return super().__repr__()

    def __str__(containerStruct self):
        return super().__str__()


    def __copy__(containerStruct self):
        return self

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[_module_cbindings.ccontainerStruct](
            self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            (<containerStruct>other)._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__containerStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        _module_cbindings.StructMetadata[_module_cbindings.ccontainerStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.containerStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[_module_cbindings.ccontainerStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 19

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(containerStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[_module_cbindings.ccontainerStruct](self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(containerStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE = make_shared[_module_cbindings.ccontainerStruct]()
        with nogil:
            needed = serializer.cdeserialize[_module_cbindings.ccontainerStruct](buf, self._cpp_obj_FBTHRIFT_ONLY_DO_NOT_USE.get(), proto)
        return needed


    def _to_python(self):
        return thrift.python.converter.to_python_struct(
            _fbthrift_python_types.containerStruct,
            self,
        )

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.containerStruct, self)

cdef cmap[string,cbool] Map__string_bool__make_instance(object items) except *:
    cdef cmap[string,cbool] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, bool):
            raise TypeError(f"{item!r} is not of type bool")

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_bool__from_cpp(const cmap[string,cbool]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cbool]] iter = __map_iter[cmap[string,cbool]](c_map)
    cdef string ckey
    cdef cbool cval = False
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_bool(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cset[cint32_t] Set__i32__make_instance(object items) except *:
    cdef cset[cint32_t] c_inst
    cdef cint32_t c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        c_item = <cint32_t> item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__i32__from_cpp(const cset[cint32_t]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cint32_t]] iter = __set_iter[cset[cint32_t]](c_set)
    cdef cint32_t citem = 0
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef vector[cint32_t] List__i32__make_instance(object items) except *:
    cdef vector[cint32_t] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item
        c_inst.push_back(item)
    return cmove(c_inst)

cdef object List__i32__from_cpp(const vector[cint32_t]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(c_vec[idx])
    return List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[cint32_t]] List__List__i32__make_instance(object items) except *:
    cdef vector[vector[cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)
        c_inst.push_back(List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__i32__from_cpp(const vector[vector[cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__i32__from_cpp(c_vec[idx]))
    return List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef vector[vector[vector[cint32_t]]] List__List__List__i32__make_instance(object items) except *:
    cdef vector[vector[vector[cint32_t]]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[int]]")
        if not isinstance(item, List__List__i32):
            item = List__List__i32(item)
        c_inst.push_back(List__List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__List__i32__from_cpp(const vector[vector[vector[cint32_t]]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__List__i32__from_cpp(c_vec[idx]))
    return List__List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,cint32_t] Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cint32_t] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if not isinstance(item, int):
            raise TypeError(f"{item!r} is not of type int")
        item = <cint32_t> item

        c_inst[c_key] = item
    return cmove(c_inst)

cdef object Map__string_i32__from_cpp(const cmap[string,cint32_t]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cint32_t]] iter = __map_iter[cmap[string,cint32_t]](c_map)
    cdef string ckey
    cdef cint32_t cval = 0
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = cval
    return Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,cmap[string,cint32_t]] Map__string_Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cmap[string,cint32_t]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[str, int]")
        if not isinstance(item, Map__string_i32):
            item = Map__string_i32(item)

        c_inst[c_key] = Map__string_i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_Map__string_i32__from_cpp(const cmap[string,cmap[string,cint32_t]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cmap[string,cint32_t]]] iter = __map_iter[cmap[string,cmap[string,cint32_t]]](c_map)
    cdef string ckey
    cdef cmap[string,cint32_t] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = Map__string_i32__from_cpp(cval)
    return Map__string_Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[string,cmap[string,cmap[string,cint32_t]]] Map__string_Map__string_Map__string_i32__make_instance(object items) except *:
    cdef cmap[string,cmap[string,cmap[string,cint32_t]]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[str, _typing.Mapping[str, int]]")
        if not isinstance(item, Map__string_Map__string_i32):
            item = Map__string_Map__string_i32(item)

        c_inst[c_key] = Map__string_Map__string_i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_Map__string_Map__string_i32__from_cpp(const cmap[string,cmap[string,cmap[string,cint32_t]]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]] iter = __map_iter[cmap[string,cmap[string,cmap[string,cint32_t]]]](c_map)
    cdef string ckey
    cdef cmap[string,cmap[string,cint32_t]] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = Map__string_Map__string_i32__from_cpp(cval)
    return Map__string_Map__string_Map__string_i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[cset[cint32_t]] List__Set__i32__make_instance(object items) except *:
    cdef vector[cset[cint32_t]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[int]")
        if not isinstance(item, Set__i32):
            item = Set__i32(item)
        c_inst.push_back(Set__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__i32__from_cpp(const vector[cset[cint32_t]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__i32__from_cpp(c_vec[idx]))
    return List__Set__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[string,vector[cint32_t]] Map__string_List__i32__make_instance(object items) except *:
    cdef cmap[string,vector[cint32_t]] c_inst
    cdef string c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if not isinstance(key, str):
            raise TypeError(f"{key!r} is not of type str")
        c_key = key.encode('UTF-8')
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)

        c_inst[c_key] = List__i32__make_instance(item)
    return cmove(c_inst)

cdef object Map__string_List__i32__from_cpp(const cmap[string,vector[cint32_t]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[string,vector[cint32_t]]] iter = __map_iter[cmap[string,vector[cint32_t]]](c_map)
    cdef string ckey
    cdef vector[cint32_t] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[__init_unicode_from_cpp(ckey)] = List__i32__from_cpp(cval)
    return Map__string_List__i32(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef vector[vector[vector[vector[cint32_t]]]] List__List__List__List__i32__make_instance(object items) except *:
    cdef vector[vector[vector[vector[cint32_t]]]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_typing.Sequence[_typing.Sequence[int]]]")
        if not isinstance(item, List__List__List__i32):
            item = List__List__List__i32(item)
        c_inst.push_back(List__List__List__i32__make_instance(item))
    return cmove(c_inst)

cdef object List__List__List__List__i32__from_cpp(const vector[vector[vector[vector[cint32_t]]]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(List__List__List__i32__from_cpp(c_vec[idx]))
    return List__List__List__List__i32(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cset[cbool] Set__bool__make_instance(object items) except *:
    cdef cset[cbool] c_inst
    cdef cbool c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if not isinstance(item, bool):
            raise TypeError(f"{item!r} is not of type bool")
        c_item = item
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__bool__from_cpp(const cset[cbool]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cbool]] iter = __set_iter[cset[cbool]](c_set)
    cdef cbool citem = False
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(citem)
    return Set__bool(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[cset[cbool]] Set__Set__bool__make_instance(object items) except *:
    cdef cset[cset[cbool]] c_inst
    cdef cset[cbool] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.AbstractSet[bool]")
        if not isinstance(item, Set__bool):
            item = Set__bool(item)
        c_item = Set__bool__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__Set__bool__from_cpp(const cset[cset[cbool]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cset[cbool]]] iter = __set_iter[cset[cset[cbool]]](c_set)
    cdef cset[cbool] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(Set__bool__from_cpp(citem))
    return Set__Set__bool(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[cset[cset[cbool]]] Set__Set__Set__bool__make_instance(object items) except *:
    cdef cset[cset[cset[cbool]]] c_inst
    cdef cset[cset[cbool]] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.AbstractSet[_typing.AbstractSet[bool]]")
        if not isinstance(item, Set__Set__bool):
            item = Set__Set__bool(item)
        c_item = Set__Set__bool__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__Set__Set__bool__from_cpp(const cset[cset[cset[cbool]]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[cset[cset[cbool]]]] iter = __set_iter[cset[cset[cset[cbool]]]](c_set)
    cdef cset[cset[cbool]] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(Set__Set__bool__from_cpp(citem))
    return Set__Set__Set__bool(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[vector[cint32_t]] Set__List__i32__make_instance(object items) except *:
    cdef cset[vector[cint32_t]] c_inst
    cdef vector[cint32_t] c_item
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of type _typing.Sequence[int]")
        if not isinstance(item, List__i32):
            item = List__i32(item)
        c_item = List__i32__make_instance(item)
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__List__i32__from_cpp(const cset[vector[cint32_t]]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[vector[cint32_t]]] iter = __set_iter[cset[vector[cint32_t]]](c_set)
    cdef vector[cint32_t] citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(List__i32__from_cpp(citem))
    return Set__List__i32(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef cset[string] Set__string__make_instance(object items) except *:
    cdef cset[string] c_inst
    cdef string c_item
    if items is None:
        return cmove(c_inst)
    if isinstance(items, str):
        raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
    for item in items:
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")
        c_item = item.encode('UTF-8')
        c_inst.insert(c_item)
    return cmove(c_inst)

cdef object Set__string__from_cpp(const cset[string]& c_set) except *:
    cdef list py_items = []
    cdef __set_iter[cset[string]] iter = __set_iter[cset[string]](c_set)
    cdef string citem
    for i in range(c_set.size()):
        iter.genNextItem(citem)
        py_items.append(__init_unicode_from_cpp(citem))
    return Set__string(frozenset(py_items), thrift.py3.types._fbthrift_set_private_ctor)

cdef vector[cset[string]] List__Set__string__make_instance(object items) except *:
    cdef vector[cset[string]] c_inst
    if items is None:
        return cmove(c_inst)
    for item in items:
        if item is None:
            raise TypeError("None is not of the type _typing.AbstractSet[str]")
        if not isinstance(item, Set__string):
            item = Set__string(item)
        c_inst.push_back(Set__string__make_instance(item))
    return cmove(c_inst)

cdef object List__Set__string__from_cpp(const vector[cset[string]]& c_vec) except *:
    cdef list py_list = []
    cdef int idx = 0
    for idx in range(c_vec.size()):
        py_list.append(Set__string__from_cpp(c_vec[idx]))
    return List__Set__string(py_list, thrift.py3.types._fbthrift_list_private_ctor)

cdef cmap[vector[cset[string]],string] Map__List__Set__string_string__make_instance(object items) except *:
    cdef cmap[vector[cset[string]],string] c_inst
    cdef vector[cset[string]] c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if key is None:
            raise TypeError("None is not of type _typing.Sequence[_typing.AbstractSet[str]]")
        if not isinstance(key, List__Set__string):
            key = List__Set__string(key)
        c_key = List__Set__string__make_instance(key)
        if not isinstance(item, str):
            raise TypeError(f"{item!r} is not of type str")

        c_inst[c_key] = item.encode('UTF-8')
    return cmove(c_inst)

cdef object Map__List__Set__string_string__from_cpp(const cmap[vector[cset[string]],string]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[vector[cset[string]],string]] iter = __map_iter[cmap[vector[cset[string]],string]](c_map)
    cdef vector[cset[string]] ckey
    cdef string cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[List__Set__string__from_cpp(ckey)] = __init_unicode_from_cpp(cval)
    return Map__List__Set__string_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)

cdef cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]] Map__Set__List__i32_Map__List__Set__string_string__make_instance(object items) except *:
    cdef cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]] c_inst
    cdef cset[vector[cint32_t]] c_key
    if items is None:
        return cmove(c_inst)
    for key, item in items.items():
        if key is None:
            raise TypeError("None is not of type _typing.AbstractSet[_typing.Sequence[int]]")
        if not isinstance(key, Set__List__i32):
            key = Set__List__i32(key)
        c_key = Set__List__i32__make_instance(key)
        if item is None:
            raise TypeError("None is not of type _typing.Mapping[_typing.Sequence[_typing.AbstractSet[str]], str]")
        if not isinstance(item, Map__List__Set__string_string):
            item = Map__List__Set__string_string(item)

        c_inst[c_key] = Map__List__Set__string_string__make_instance(item)
    return cmove(c_inst)

cdef object Map__Set__List__i32_Map__List__Set__string_string__from_cpp(const cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]& c_map) except *:
    cdef dict py_items = {}
    cdef __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]] iter = __map_iter[cmap[cset[vector[cint32_t]],cmap[vector[cset[string]],string]]](c_map)
    cdef cset[vector[cint32_t]] ckey
    cdef cmap[vector[cset[string]],string] cval
    for i in range(c_map.size()):
        iter.genNextKeyVal(ckey, cval)
        py_items[Set__List__i32__from_cpp(ckey)] = Map__List__Set__string_string__from_cpp(cval)
    return Map__Set__List__i32_Map__List__Set__string_string(py_items, private_ctor_token=thrift.py3.types._fbthrift_map_private_ctor)


