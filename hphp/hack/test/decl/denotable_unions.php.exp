Parsed decls:

{ Direct_decl_parser.classes =
  { "\\I" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cinterface;
      sc_name = ([6:11-12], "\\I"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> };
    "\\J" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cinterface;
      sc_name = ([7:11-12], "\\J"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = []; sc_methods = []; sc_user_attributes = [];
      sc_enum_type = None; sc_decl_errors = <opaque> } };
  funs =
  { "\\f" ->
    { fe_pos = [9:10-11];
      fe_type =
      (Rwitness (root|denotable_unions.php line 9, characters 10-10),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [9:19-22]; fp_name = (Some "$_x");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|denotable_unions.php line 9, characters 12-17),
                  (Tintersection
                     [(Rhint (root|denotable_unions.php line 9, characters 13-13),
                       (Tapply (([9:13-14], "\\I"), [])));
                       (Rhint (root|denotable_unions.php line 9, characters 16-16),
                        (Tapply (([9:16-17], "\\J"), [])))
                       ]))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|denotable_unions.php line 9, characters 10-10),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|denotable_unions.php line 9, characters 25-28),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Nonreactive }));
      fe_deprecated = None;  };
    "\\g" ->
    { fe_pos = [10:10-11];
      fe_type =
      (Rwitness (root|denotable_unions.php line 10, characters 10-10),
       (Tfun
          { ft_arity = (Fstandard ()); ft_tparams = [];
            ft_where_constraints = [];
            ft_params =
            [{ fp_pos = [10:19-22]; fp_name = (Some "$_x");
               fp_type =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|denotable_unions.php line 10, characters 12-17),
                  (Tunion
                     [(Rhint (root|denotable_unions.php line 10, characters 13-13),
                       (Tapply (([10:13-14], "\\I"), [])));
                       (Rhint (root|denotable_unions.php line 10, characters 16-16),
                        (Tapply (([10:16-17], "\\J"), [])))
                       ]))
                 };
               fp_flags =
               (make_fp_flags ~mutability:none ~accept_disposable:false
                 ~has_default:false ~mode:FPnormal);
                }
              ];
            ft_implicit_params =
            { capability =
              (Rhint (root|denotable_unions.php line 10, characters 10-10),
               (Tunion []))
              };
            ft_ret =
            { et_enforced = false;
              et_type =
              (Rhint (root|denotable_unions.php line 10, characters 25-28),
               (Tprim Tvoid))
              };
            ft_flags =
            (make_ft_flags sync none ~return_disposable:false
              ~returns_mutable:false ~returns_void_to_rx:false);
            ft_reactive = Nonreactive }));
      fe_deprecated = None;  } };
  typedefs = {}; consts = {} }

They matched!
