/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-structured-annotations/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/compiler/test/fixtures/basic-structured-annotations/gen-cpp2/included_types.h"
#include "thrift/compiler/test/fixtures/basic-structured-annotations/gen-cpp2/namespaced_types.h"

namespace apache {
namespace thrift {
namespace ident {
struct count;
struct name;
struct name;
struct name;
struct recurse;
struct forward;
struct count;
struct name;
struct nest;
struct annotated_field;
struct annotated_type;
struct annotated_recursive;
struct annotated_nested;
struct context;
struct first;
struct second;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_count
#define APACHE_THRIFT_ACCESSOR_count
APACHE_THRIFT_DEFINE_ACCESSOR(count);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_recurse
#define APACHE_THRIFT_ACCESSOR_recurse
APACHE_THRIFT_DEFINE_ACCESSOR(recurse);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_forward
#define APACHE_THRIFT_ACCESSOR_forward
APACHE_THRIFT_DEFINE_ACCESSOR(forward);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_count
#define APACHE_THRIFT_ACCESSOR_count
APACHE_THRIFT_DEFINE_ACCESSOR(count);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nest
#define APACHE_THRIFT_ACCESSOR_nest
APACHE_THRIFT_DEFINE_ACCESSOR(nest);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_field
#define APACHE_THRIFT_ACCESSOR_annotated_field
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_type
#define APACHE_THRIFT_ACCESSOR_annotated_type
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_type);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_recursive
#define APACHE_THRIFT_ACCESSOR_annotated_recursive
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_recursive);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_annotated_nested
#define APACHE_THRIFT_ACCESSOR_annotated_nested
APACHE_THRIFT_DEFINE_ACCESSOR(annotated_nested);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_context
#define APACHE_THRIFT_ACCESSOR_context
APACHE_THRIFT_DEFINE_ACCESSOR(context);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_first
#define APACHE_THRIFT_ACCESSOR_first
APACHE_THRIFT_DEFINE_ACCESSOR(first);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_second
#define APACHE_THRIFT_ACCESSOR_second
APACHE_THRIFT_DEFINE_ACCESSOR(second);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace test { namespace fixtures { namespace basic-structured-annotations {

enum class MyEnum {
  UNKNOWN = 0,
  ONE = 1,
};



}}} // test::fixtures::basic-structured-annotations

namespace std {
template<> struct hash<::test::fixtures::basic-structured-annotations::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic-structured-annotations::MyEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::test::fixtures::basic-structured-annotations::MyEnum>;

template <> struct TEnumTraits<::test::fixtures::basic-structured-annotations::MyEnum> {
  using type = ::test::fixtures::basic-structured-annotations::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::ONE; }
};


}} // apache::thrift

namespace test { namespace fixtures { namespace basic-structured-annotations {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
#endif
}}} // test::fixtures::basic-structured-annotations

// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace basic-structured-annotations {
class structured_annotation_inline;
class structured_annotation_with_default;
class structured_annotation_recursive;
class structured_annotation_forward;
class structured_annotation_nested;
class MyStruct;
class MyException;
class MyUnion;
}}} // test::fixtures::basic-structured-annotations
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace basic-structured-annotations {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef ::std::string annotated_with_default_string;
typedef ::std::string annotated_inline_string;
typedef ::std::int64_t annotated_inline_i64;

class structured_annotation_inline final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::count,
    ::apache::thrift::ident::name
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_inline;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  structured_annotation_inline() :
      __fbthrift_field_count(),
      __fbthrift_field_name(apache::thrift::StringTraits<std::string>::fromStringLiteral("abacaba")) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_inline(apache::thrift::FragileConstructor, ::std::int64_t count__arg, ::std::string name__arg);

  structured_annotation_inline(structured_annotation_inline&&) noexcept;

  structured_annotation_inline(const structured_annotation_inline& src);


  structured_annotation_inline& operator=(structured_annotation_inline&&) noexcept;
  structured_annotation_inline& operator=(const structured_annotation_inline& src);
 private:
  ::std::int64_t __fbthrift_field_count;
 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_inline&) const;
  bool operator<(const structured_annotation_inline&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> count_ref() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> count_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> count_ref() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> count_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> count() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> count() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> count() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> count() && {
    return {static_cast<T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(1), __isset.bit(1)};
  }

  ::std::int64_t get_count() const {
    return __fbthrift_field_count;
  }

  [[deprecated("Use `FOO.count_ref() = BAR;` instead of `FOO.set_count(BAR);`")]]
  ::std::int64_t& set_count(::std::int64_t count_) {
    count_ref() = count_;
    return __fbthrift_field_count;
  }

  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  ::std::string get_name() && {
    return std::move(__fbthrift_field_name);
  }

  template <typename T_structured_annotation_inline_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_structured_annotation_inline_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_inline_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_inline>;
  friend void swap(structured_annotation_inline& a, structured_annotation_inline& b);
};

template <class Protocol_>
unsigned long structured_annotation_inline::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class structured_annotation_with_default final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::name
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_with_default;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  structured_annotation_with_default() :
      __fbthrift_field_name(apache::thrift::StringTraits<std::string>::fromStringLiteral("abacabadabacaba")) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_with_default(apache::thrift::FragileConstructor, ::std::string name__arg);

  structured_annotation_with_default(structured_annotation_with_default&&) noexcept;

  structured_annotation_with_default(const structured_annotation_with_default& src);


  structured_annotation_with_default& operator=(structured_annotation_with_default&&) noexcept;
  structured_annotation_with_default& operator=(const structured_annotation_with_default& src);
 private:
  ::std::string __fbthrift_field_name;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_with_default&) const;
  bool operator<(const structured_annotation_with_default&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  ::std::string get_name() && {
    return std::move(__fbthrift_field_name);
  }

  template <typename T_structured_annotation_with_default_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_structured_annotation_with_default_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_with_default_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_with_default>;
  friend void swap(structured_annotation_with_default& a, structured_annotation_with_default& b);
};

template <class Protocol_>
unsigned long structured_annotation_with_default::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class structured_annotation_forward final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::count
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_forward;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  structured_annotation_forward() :
      __fbthrift_field_count() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_forward(apache::thrift::FragileConstructor, ::std::int64_t count__arg);

  structured_annotation_forward(structured_annotation_forward&&) = default;

  structured_annotation_forward(const structured_annotation_forward&) = default;


  structured_annotation_forward& operator=(structured_annotation_forward&&) = default;

  structured_annotation_forward& operator=(const structured_annotation_forward&) = default;
 private:
  ::std::int64_t __fbthrift_field_count;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_forward&) const;
  bool operator<(const structured_annotation_forward&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> count_ref() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> count_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> count_ref() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> count_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> count() const& {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> count() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> count() & {
    return {this->__fbthrift_field_count, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> count() && {
    return {static_cast<T&&>(this->__fbthrift_field_count), __isset.at(0), __isset.bit(0)};
  }

  ::std::int64_t get_count() const {
    return __fbthrift_field_count;
  }

  [[deprecated("Use `FOO.count_ref() = BAR;` instead of `FOO.set_count(BAR);`")]]
  ::std::int64_t& set_count(::std::int64_t count_) {
    count_ref() = count_;
    return __fbthrift_field_count;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_forward>;
  friend void swap(structured_annotation_forward& a, structured_annotation_forward& b);
};

template <class Protocol_>
unsigned long structured_annotation_forward::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class structured_annotation_recursive final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::recurse,
    ::apache::thrift::ident::forward
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_recursive;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  structured_annotation_recursive() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_recursive(apache::thrift::FragileConstructor, ::std::string name__arg, ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive> recurse__arg, ::test::fixtures::basic-structured-annotations::structured_annotation_forward forward__arg);

  structured_annotation_recursive(structured_annotation_recursive&&) noexcept;
  structured_annotation_recursive(const structured_annotation_recursive& src);


  structured_annotation_recursive& operator=(structured_annotation_recursive&&) noexcept;
  structured_annotation_recursive& operator=(const structured_annotation_recursive& src);
 private:
  ::std::string __fbthrift_field_name;
 private:
  ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive> __fbthrift_field_recurse;
 private:
  ::test::fixtures::basic-structured-annotations::structured_annotation_forward __fbthrift_field_forward;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_recursive&) const;
  bool operator<(const structured_annotation_recursive&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }
  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE T& recurse_ref() & {
    return __fbthrift_field_recurse;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const T& recurse_ref() const& {
    return __fbthrift_field_recurse;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE T&& recurse_ref() && {
    return static_cast<T&&>(__fbthrift_field_recurse);
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const T&& recurse_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_recurse);
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE T& recurse() & {
    return __fbthrift_field_recurse;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const T& recurse() const& {
    return __fbthrift_field_recurse;
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE T&& recurse() && {
    return static_cast<T&&>(__fbthrift_field_recurse);
  }

  template <typename ..., typename T = ::std::unique_ptr<::test::fixtures::basic-structured-annotations::structured_annotation_recursive>>
  FOLLY_ERASE const T&& recurse() const&& {
    return static_cast<const T&&>(__fbthrift_field_recurse);
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> forward_ref() const& {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> forward_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_forward), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> forward_ref() & {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> forward_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_forward), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> forward() const& {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> forward() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_forward), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> forward() & {
    return {this->__fbthrift_field_forward, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> forward() && {
    return {static_cast<T&&>(this->__fbthrift_field_forward), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  ::std::string get_name() && {
    return std::move(__fbthrift_field_name);
  }

  template <typename T_structured_annotation_recursive_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_structured_annotation_recursive_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_recursive_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }
  const ::test::fixtures::basic-structured-annotations::structured_annotation_forward& get_forward() const&;
  ::test::fixtures::basic-structured-annotations::structured_annotation_forward get_forward() &&;

  template <typename T_structured_annotation_recursive_forward_struct_setter = ::test::fixtures::basic-structured-annotations::structured_annotation_forward>
  [[deprecated("Use `FOO.forward_ref() = BAR;` instead of `FOO.set_forward(BAR);`")]]
  ::test::fixtures::basic-structured-annotations::structured_annotation_forward& set_forward(T_structured_annotation_recursive_forward_struct_setter&& forward_) {
    forward_ref() = std::forward<T_structured_annotation_recursive_forward_struct_setter>(forward_);
    return __fbthrift_field_forward;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_recursive>;
  friend void swap(structured_annotation_recursive& a, structured_annotation_recursive& b);
};

template <class Protocol_>
unsigned long structured_annotation_recursive::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class structured_annotation_nested final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::name,
    ::apache::thrift::ident::nest
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = structured_annotation_nested;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  structured_annotation_nested() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  structured_annotation_nested(apache::thrift::FragileConstructor, ::std::string name__arg, ::test::fixtures::basic-structured-annotations::structured_annotation_with_default nest__arg);

  structured_annotation_nested(structured_annotation_nested&&) noexcept;

  structured_annotation_nested(const structured_annotation_nested& src);


  structured_annotation_nested& operator=(structured_annotation_nested&&) noexcept;
  structured_annotation_nested& operator=(const structured_annotation_nested& src);
 private:
  ::std::string __fbthrift_field_name;
 private:
  ::test::fixtures::basic-structured-annotations::structured_annotation_with_default __fbthrift_field_nest;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const structured_annotation_nested&) const;
  bool operator<(const structured_annotation_nested&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name_ref() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name_ref() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name() const& {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name() & {
    return {this->__fbthrift_field_name, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name() && {
    return {static_cast<T&&>(this->__fbthrift_field_name), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> nest_ref() const& {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> nest_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_nest), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> nest_ref() & {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> nest_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_nest), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> nest() const& {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> nest() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_nest), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> nest() & {
    return {this->__fbthrift_field_nest, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> nest() && {
    return {static_cast<T&&>(this->__fbthrift_field_nest), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string& get_name() const& {
    return __fbthrift_field_name;
  }

  ::std::string get_name() && {
    return std::move(__fbthrift_field_name);
  }

  template <typename T_structured_annotation_nested_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_structured_annotation_nested_name_struct_setter&& name_) {
    name_ref() = std::forward<T_structured_annotation_nested_name_struct_setter>(name_);
    return __fbthrift_field_name;
  }
  const ::test::fixtures::basic-structured-annotations::structured_annotation_with_default& get_nest() const&;
  ::test::fixtures::basic-structured-annotations::structured_annotation_with_default get_nest() &&;

  template <typename T_structured_annotation_nested_nest_struct_setter = ::test::fixtures::basic-structured-annotations::structured_annotation_with_default>
  [[deprecated("Use `FOO.nest_ref() = BAR;` instead of `FOO.set_nest(BAR);`")]]
  ::test::fixtures::basic-structured-annotations::structured_annotation_with_default& set_nest(T_structured_annotation_nested_nest_struct_setter&& nest_) {
    nest_ref() = std::forward<T_structured_annotation_nested_nest_struct_setter>(nest_);
    return __fbthrift_field_nest;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<structured_annotation_nested>;
  friend void swap(structured_annotation_nested& a, structured_annotation_nested& b);
};

template <class Protocol_>
unsigned long structured_annotation_nested::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::annotated_field,
    ::apache::thrift::ident::annotated_type,
    ::apache::thrift::ident::annotated_recursive,
    ::apache::thrift::ident::annotated_nested
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct() :
      __fbthrift_field_annotated_field(),
      __fbthrift_field_annotated_nested() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t annotated_field__arg, ::test::fixtures::basic-structured-annotations::annotated_inline_string annotated_type__arg, ::std::string annotated_recursive__arg, ::std::int64_t annotated_nested__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);
 private:
  ::std::int64_t __fbthrift_field_annotated_field;
 private:
  ::test::fixtures::basic-structured-annotations::annotated_inline_string __fbthrift_field_annotated_type;
 private:
  ::std::string __fbthrift_field_annotated_recursive;
 private:
  ::std::int64_t __fbthrift_field_annotated_nested;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_field_ref() const& {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_field_ref() & {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_field() const& {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_field() & {
    return {this->__fbthrift_field_annotated_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_type_ref() const& {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_type_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_type), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_type_ref() & {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_type_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_type), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_type() const& {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_type() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_type), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_type() & {
    return {this->__fbthrift_field_annotated_type, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_type() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_type), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_recursive_ref() const& {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_recursive_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_recursive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_recursive_ref() & {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_recursive_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_recursive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_recursive() const& {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_recursive() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_recursive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_recursive() & {
    return {this->__fbthrift_field_annotated_recursive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_recursive() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_recursive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_nested_ref() const& {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_nested_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_nested), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_nested_ref() & {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_nested_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_nested), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> annotated_nested() const& {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> annotated_nested() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_annotated_nested), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> annotated_nested() & {
    return {this->__fbthrift_field_annotated_nested, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> annotated_nested() && {
    return {static_cast<T&&>(this->__fbthrift_field_annotated_nested), __isset.at(3), __isset.bit(3)};
  }

  ::std::int64_t get_annotated_field() const {
    return __fbthrift_field_annotated_field;
  }

  [[deprecated("Use `FOO.annotated_field_ref() = BAR;` instead of `FOO.set_annotated_field(BAR);`")]]
  ::std::int64_t& set_annotated_field(::std::int64_t annotated_field_) {
    annotated_field_ref() = annotated_field_;
    return __fbthrift_field_annotated_field;
  }

  const ::test::fixtures::basic-structured-annotations::annotated_inline_string& get_annotated_type() const& {
    return __fbthrift_field_annotated_type;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_string get_annotated_type() && {
    return std::move(__fbthrift_field_annotated_type);
  }

  template <typename T_MyStruct_annotated_type_struct_setter = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  [[deprecated("Use `FOO.annotated_type_ref() = BAR;` instead of `FOO.set_annotated_type(BAR);`")]]
  ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_annotated_type(T_MyStruct_annotated_type_struct_setter&& annotated_type_) {
    annotated_type_ref() = std::forward<T_MyStruct_annotated_type_struct_setter>(annotated_type_);
    return __fbthrift_field_annotated_type;
  }

  const ::std::string& get_annotated_recursive() const& {
    return __fbthrift_field_annotated_recursive;
  }

  ::std::string get_annotated_recursive() && {
    return std::move(__fbthrift_field_annotated_recursive);
  }

  template <typename T_MyStruct_annotated_recursive_struct_setter = ::std::string>
  [[deprecated("Use `FOO.annotated_recursive_ref() = BAR;` instead of `FOO.set_annotated_recursive(BAR);`")]]
  ::std::string& set_annotated_recursive(T_MyStruct_annotated_recursive_struct_setter&& annotated_recursive_) {
    annotated_recursive_ref() = std::forward<T_MyStruct_annotated_recursive_struct_setter>(annotated_recursive_);
    return __fbthrift_field_annotated_recursive;
  }

  ::std::int64_t get_annotated_nested() const {
    return __fbthrift_field_annotated_nested;
  }

  [[deprecated("Use `FOO.annotated_nested_ref() = BAR;` instead of `FOO.set_annotated_nested(BAR);`")]]
  ::std::int64_t& set_annotated_nested(::std::int64_t annotated_nested_) {
    annotated_nested_ref() = annotated_nested_;
    return __fbthrift_field_annotated_nested;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class FOLLY_EXPORT MyException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::context
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = MyException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyException(apache::thrift::FragileConstructor, ::std::string context__arg);

  MyException(MyException&&) noexcept;

  MyException(const MyException& src);


  MyException& operator=(MyException&&) noexcept;
  MyException& operator=(const MyException& src);

  ~MyException() override;

 private:
  ::std::string __fbthrift_field_context;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyException&) const;
  bool operator<(const MyException&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> context_ref() const& {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> context_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_context), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> context_ref() & {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> context_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_context), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> context() const& {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> context() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_context), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> context() & {
    return {this->__fbthrift_field_context, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> context() && {
    return {static_cast<T&&>(this->__fbthrift_field_context), __isset.at(0), __isset.bit(0)};
  }

  const ::std::string& get_context() const& {
    return __fbthrift_field_context;
  }

  ::std::string get_context() && {
    return std::move(__fbthrift_field_context);
  }

  template <typename T_MyException_context_struct_setter = ::std::string>
  [[deprecated("Use `FOO.context_ref() = BAR;` instead of `FOO.set_context(BAR);`")]]
  ::std::string& set_context(T_MyException_context_struct_setter&& context_) {
    context_ref() = std::forward<T_MyException_context_struct_setter>(context_);
    return __fbthrift_field_context;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::test::fixtures::basic-structured-annotations::MyException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyException>;
  friend void swap(MyException& a, MyException& b);
};

template <class Protocol_>
unsigned long MyException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::first,
    ::apache::thrift::ident::second
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i64_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    first = 1,
    second = 2,
  } ;

  MyUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::first:
      {
        set_first(std::move(rhs.value_.first));
        break;
      }
      case Type::second:
      {
        set_second(std::move(rhs.value_.second));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::first:
      {
        set_first(rhs.value_.first);
        break;
      }
      case Type::second:
      {
        set_second(rhs.value_.second);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::first:
      {
        set_first(std::move(rhs.value_.first));
        break;
      }
      case Type::second:
      {
        set_second(std::move(rhs.value_.second));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::first:
      {
        set_first(rhs.value_.first);
        break;
      }
      case Type::second:
      {
        set_second(rhs.value_.second);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~MyUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::test::fixtures::basic-structured-annotations::annotated_inline_string first;
    ::test::fixtures::basic-structured-annotations::annotated_inline_i64 second;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_first(::test::fixtures::basic-structured-annotations::annotated_inline_string const &t) {
    using T0 = ::test::fixtures::basic-structured-annotations::annotated_inline_string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::first);
    ::new (std::addressof(value_.first)) T(t);
    return value_.first;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_first(::test::fixtures::basic-structured-annotations::annotated_inline_string&& t) {
    using T0 = ::test::fixtures::basic-structured-annotations::annotated_inline_string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::first);
    ::new (std::addressof(value_.first)) T(std::move(t));
    return value_.first;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic-structured-annotations::annotated_inline_string, T...>> ::test::fixtures::basic-structured-annotations::annotated_inline_string& set_first(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::first);
    ::new (std::addressof(value_.first)) ::test::fixtures::basic-structured-annotations::annotated_inline_string(std::forward<T>(t)...);
    return value_.first;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-structured-annotations::annotated_inline_i64& set_second(::test::fixtures::basic-structured-annotations::annotated_inline_i64 t = ::test::fixtures::basic-structured-annotations::annotated_inline_i64()) {
    using T0 = ::test::fixtures::basic-structured-annotations::annotated_inline_i64;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::second);
    ::new (std::addressof(value_.second)) T(t);
    return value_.second;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_string const& get_first() const {
    if (getType() != Type::first) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.first;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_i64 const& get_second() const {
    if (getType() != Type::second) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.second;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_string& mutable_first() {
    assert(getType() == Type::first);
    return value_.first;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_i64& mutable_second() {
    assert(getType() == Type::second);
    return value_.second;
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_string move_first() {
    assert(getType() == Type::first);
    return std::move(value_.first);
  }

  ::test::fixtures::basic-structured-annotations::annotated_inline_i64 move_second() {
    assert(getType() == Type::second);
    return std::move(value_.second);
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> first_ref() const& {
    return {value_.first, type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> first_ref() const&& {
    return {std::move(value_.first), type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> first_ref() & {
    return {value_.first, type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> first_ref() && {
    return {std::move(value_.first), type_, folly::to_underlying(Type::first), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> second_ref() const& {
    return {value_.second, type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> second_ref() const&& {
    return {std::move(value_.second), type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> second_ref() & {
    return {value_.second, type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-structured-annotations::annotated_inline_i64>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> second_ref() && {
    return {std::move(value_.second), type_, folly::to_underlying(Type::second), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}} // test::fixtures::basic-structured-annotations

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::basic-structured-annotations::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::basic-structured-annotations::MyUnion::Type> {
  using type = ::test::fixtures::basic-structured-annotations::MyUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
