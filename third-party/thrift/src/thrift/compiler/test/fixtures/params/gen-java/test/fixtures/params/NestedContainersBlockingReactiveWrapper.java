/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.params;

import com.facebook.thrift.client.*;
import java.util.*;

public class NestedContainersBlockingReactiveWrapper 
    implements NestedContainers.Reactive {
    private final NestedContainers _delegate;

    public NestedContainersBlockingReactiveWrapper(NestedContainers _delegate) {
        
        this._delegate = _delegate;
    }

    @java.lang.Override
    public void dispose() {
        _delegate.close();
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> mapList(final Map<Integer, List<Integer>> foo) {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>fromRunnable(() -> {
                try {
                    _delegate.mapList(foo);
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> mapSet(final Map<Integer, Set<Integer>> foo) {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>fromRunnable(() -> {
                try {
                    _delegate.mapSet(foo);
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> listMap(final List<Map<Integer, Integer>> foo) {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>fromRunnable(() -> {
                try {
                    _delegate.listMap(foo);
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> listSet(final List<Set<Integer>> foo) {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>fromRunnable(() -> {
                try {
                    _delegate.listSet(foo);
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> turtles(final List<List<Map<Integer, Map<Integer, Set<Integer>>>>> foo) {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>fromRunnable(() -> {
                try {
                    _delegate.turtles(foo);
                } catch (Throwable _e) {
                    throw reactor.core.Exceptions.propagate(_e);
                }
            });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

}
