<?php
// Copyright 2004-present Facebook. All Rights Reserved.
// This file is @generated by
// fbcode/hphp/facebook/tools/code_model/Generate.sh

namespace HH\CodeModel {

/**
 *  (class|self|parent|static)::methodName(arguments)
 *  (class|self|parent|static)::{methodExpression}(arguments)
 *  ${classExpression}::methodName(arguments)
 *  ${classExpression}::{methodExpression}(arguments)
 */
class ClassMethodCallExpression /*implements IClassMethodCallExpression*/ {
  use Expression;
  use TypedNode;
  use Node;

  private /*?ITypeExpression*/ $class;
  private /*?IExpression*/ $classExpression;
  private /*?string*/ $methodName;
  private /*?IExpression*/ $methodExpression;
  private /*?Vector<IExpression>*/ $arguments;

  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function getClass() /*: ?ITypeExpression*/ {
    return $this->class;
  }
  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function setClass(/*?ITypeExpression*/ $value) /*: this*/ {
    $this->class = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function getClassExpression() /*: ?IExpression*/ {
    return $this->classExpression;
  }
  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function setClassExpression(/*?IExpression*/ $value) /*: this*/ {
    $this->classExpression = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function getMethodName() /*: ?string*/ {
    return $this->methodName;
  }
  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function setMethodName(/*?string*/ $value) /*: this*/ {
    $this->methodName = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function getMethodExpression() /*: ?IExpression*/ {
    return $this->methodExpression;
  }
  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function setMethodExpression(/*?IExpression*/ $value) /*: this*/ {
    $this->methodExpression = $value;
    return $this;
  }

  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function getArguments() /*: Vector<IExpression>*/ {
    if ($this->arguments === null) {
      $this->arguments = Vector {};
    }
    return $this->arguments;
  }
  /**
   *  (class|self|parent|static)::methodName(arguments)
   *  (class|self|parent|static)::{methodExpression}(arguments)
   *  ${classExpression}::methodName(arguments)
   *  ${classExpression}::{methodExpression}(arguments)
   */
  public function setArguments(/*Vector<IExpression>*/ $value) /*: this*/ {
    $this->arguments = $value;
    return $this;
  }

  /**
   * Returns $visitor->visitClassMethodCallExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitExpression($this) if
   * such a method exists on $visitor.
   * Otherwise returns $visitor->visitNode($this) if
   */
  public function accept(/*mixed*/ $visitor) /*: mixed*/ {
    if (method_exists($visitor, "visitClassMethodCallExpression")) {
      // UNSAFE
      return $visitor->visitClassMethodCallExpression($this);
    } else if (method_exists($visitor, "visitExpression")) {
      // UNSAFE
      return $visitor->visitExpression($this);
    } else {
      return $visitor->visitNode($this);
    }
  }

  /**
   * Yields a list of nodes that are children of this node.
   * A node has exactly one parent, so doing a depth
   * first traversal of a node graph using getChildren will
   * traverse a spanning tree.
   */
  public function getChildren() /*: Continuation<INode>*/ {
    if ($this->class !== null) {
      yield $this->class;
    }
    if ($this->classExpression !== null) {
      yield $this->classExpression;
    }
    if ($this->methodExpression !== null) {
      yield $this->methodExpression;
    }
    if ($this->arguments !== null) {
      foreach ($this->arguments as $elem) {
        yield $elem;
      }
    }
  }
}
}
