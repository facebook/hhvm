/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include "proxygen/lib/http/coro/HTTPHandlerChain.h"

namespace proxygen::coro {

class FilterFactory;

/*
 * This handler is designed to install a list of filters generated by
 * FilterFactories on a request and response. It doesn't do any actual
 * processing, so it entirely depends on at least one additional HTTPHandler to
 * carry out the request and generate a response.
 *
 * e.g. if FilterFactoryList looked like this:
 * {[reqFilterA, resFilterA], [reqFilterB, nullptr], [nullptr, resFilterC]}
 * the resulting chains would be:
 * request chain: reqFilterA -> reqFilterB -> requestSource
 * response chain: resFilterA -> resFilterC -> responseSource
 */
class HTTPFilterFactoryHandler : public HTTPChainHandler {
 public:
  HTTPFilterFactoryHandler() = default;
  ~HTTPFilterFactoryHandler() override = default;

  folly::coro::Task<HTTPSourceHolder> handleRequest(
      folly::EventBase* evb,
      HTTPSessionContextPtr ctx,
      HTTPSourceHolder requestSource) override;

  HTTPFilterFactoryHandler&& addFilterFactory(
      std::shared_ptr<FilterFactory>&& ff);

 private:
  using FilterFactoryList = std::vector<std::shared_ptr<FilterFactory>>;
  FilterFactoryList filterFactories_;
};

} // namespace proxygen::coro
