// Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-annotations/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "context"
    "errors"
    "fmt"
    "io"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = io.EOF
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type BadInteraction interface {
    Foo(ctx context.Context) (error)
}

type BadInteractionClient interface {
    io.Closer
    Foo(ctx context.Context) (error)
}

type badInteractionClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ BadInteractionClient = (*badInteractionClientImpl)(nil)

func NewBadInteractionChannelClient(channel thrift.RequestChannel) BadInteractionClient {
    return &badInteractionClientImpl{
        ch: channel,
    }
}

func (c *badInteractionClientImpl) Close() error {
    return c.ch.Close()
}

func (c *badInteractionClientImpl) Foo(ctx context.Context) (error) {
    fbthriftReq := &reqBadInteractionFoo{
    }
    fbthriftResp := newRespBadInteractionFoo()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "foo", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}



type MyService interface {
    Ping(ctx context.Context) (error)
    GetRandomData(ctx context.Context) (string, error)
    HasDataById(ctx context.Context, id int64) (bool, error)
    GoGetDataById(ctx context.Context, id int64) (string, error)
    PutDataById(ctx context.Context, id int64, data string) (error)
    LobDataById(ctx context.Context, id int64, data string) (error)
    GoDoNothing(ctx context.Context) (error)
}

type MyServiceClient interface {
    io.Closer
    Ping(ctx context.Context) (error)
    GetRandomData(ctx context.Context) (string, error)
    HasDataById(ctx context.Context, id int64) (bool, error)
    GoGetDataById(ctx context.Context, id int64) (string, error)
    PutDataById(ctx context.Context, id int64, data string) (error)
    LobDataById(ctx context.Context, id int64, data string) (error)
    GoDoNothing(ctx context.Context) (error)
}

type myServiceClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyServiceClient = (*myServiceClientImpl)(nil)

func NewMyServiceChannelClient(channel thrift.RequestChannel) MyServiceClient {
    return &myServiceClientImpl{
        ch: channel,
    }
}

func (c *myServiceClientImpl) Close() error {
    return c.ch.Close()
}

func (c *myServiceClientImpl) Ping(ctx context.Context) (error) {
    fbthriftReq := &reqMyServicePing{
    }
    fbthriftResp := newRespMyServicePing()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "ping", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *myServiceClientImpl) GetRandomData(ctx context.Context) (string, error) {
    fbthriftReq := &reqMyServiceGetRandomData{
    }
    fbthriftResp := newRespMyServiceGetRandomData()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getRandomData", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return "", fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return "", fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *myServiceClientImpl) HasDataById(ctx context.Context, id int64) (bool, error) {
    fbthriftReq := &reqMyServiceHasDataById{
        Id: id,
    }
    fbthriftResp := newRespMyServiceHasDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "hasDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return false, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return false, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *myServiceClientImpl) GoGetDataById(ctx context.Context, id int64) (string, error) {
    fbthriftReq := &reqMyServiceGoGetDataById{
        Id: id,
    }
    fbthriftResp := newRespMyServiceGoGetDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "getDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return "", fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return "", fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}

func (c *myServiceClientImpl) PutDataById(ctx context.Context, id int64, data string) (error) {
    fbthriftReq := &reqMyServicePutDataById{
        Id: id,
        Data: data,
    }
    fbthriftResp := newRespMyServicePutDataById()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "putDataById", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *myServiceClientImpl) LobDataById(ctx context.Context, id int64, data string) (error) {
    fbthriftReq := &reqMyServiceLobDataById{
        Id: id,
        Data: data,
    }
    return c.ch.SendRequestNoResponse(ctx, "lobDataById", fbthriftReq)
}

func (c *myServiceClientImpl) GoDoNothing(ctx context.Context) (error) {
    fbthriftReq := &reqMyServiceGoDoNothing{
    }
    fbthriftResp := newRespMyServiceGoDoNothing()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "doNothing", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type MyServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              MyService
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
    p := &MyServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("ping", &procFuncMyServicePing{handler: handler})
    p.AddToProcessorFunctionMap("getRandomData", &procFuncMyServiceGetRandomData{handler: handler})
    p.AddToProcessorFunctionMap("hasDataById", &procFuncMyServiceHasDataById{handler: handler})
    p.AddToProcessorFunctionMap("getDataById", &procFuncMyServiceGoGetDataById{handler: handler})
    p.AddToProcessorFunctionMap("putDataById", &procFuncMyServicePutDataById{handler: handler})
    p.AddToProcessorFunctionMap("lobDataById", &procFuncMyServiceLobDataById{handler: handler})
    p.AddToProcessorFunctionMap("doNothing", &procFuncMyServiceGoDoNothing{handler: handler})
    p.AddToFunctionServiceMap("ping", "MyService")
    p.AddToFunctionServiceMap("getRandomData", "MyService")
    p.AddToFunctionServiceMap("hasDataById", "MyService")
    p.AddToFunctionServiceMap("getDataById", "MyService")
    p.AddToFunctionServiceMap("putDataById", "MyService")
    p.AddToFunctionServiceMap("lobDataById", "MyService")
    p.AddToFunctionServiceMap("doNothing", "MyService")

    return p
}

func (p *MyServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *MyServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *MyServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *MyServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *MyServiceProcessor) PackageName() string {
    return "module"
}

func (p *MyServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.MyService")
}


type procFuncMyServicePing struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePing)(nil)

func (p *procFuncMyServicePing) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePing()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePing) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch v := result.(type) {
    case *MyException:
        result = &respMyServicePing{
            MyExcept: v,
        }
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("ping", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePing) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServicePing()
    err := p.handler.Ping(ctx)
    if err != nil {
        switch v := err.(type) {
        case *MyException:
            result.MyExcept = v
            return result, nil
        default:
            x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err.Error(), err)
            return x, x
        }
    }

    return result, nil
}


type procFuncMyServiceGetRandomData struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceGetRandomData)(nil)

func (p *procFuncMyServiceGetRandomData) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceGetRandomData()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGetRandomData) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("getRandomData", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGetRandomData) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServiceGetRandomData()
    retval, err := p.handler.GetRandomData(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetRandomData: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type procFuncMyServiceHasDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceHasDataById)(nil)

func (p *procFuncMyServiceHasDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceHasDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceHasDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("hasDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceHasDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceHasDataById)
    result := newRespMyServiceHasDataById()
    retval, err := p.handler.HasDataById(ctx, args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing HasDataById: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type procFuncMyServiceGoGetDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceGoGetDataById)(nil)

func (p *procFuncMyServiceGoGetDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceGoGetDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGoGetDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("getDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGoGetDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceGoGetDataById)
    result := newRespMyServiceGoGetDataById()
    retval, err := p.handler.GoGetDataById(ctx, args.Id)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GoGetDataById: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type procFuncMyServicePutDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePutDataById)(nil)

func (p *procFuncMyServicePutDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePutDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePutDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("putDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePutDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServicePutDataById)
    result := newRespMyServicePutDataById()
    err := p.handler.PutDataById(ctx, args.Id, args.Data)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing PutDataById: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServiceLobDataById struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceLobDataById)(nil)

func (p *procFuncMyServiceLobDataById) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceLobDataById()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceLobDataById) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("lobDataById", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceLobDataById) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    args := reqStruct.(*reqMyServiceLobDataById)
    err := p.handler.LobDataById(ctx, args.Id, args.Data)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing LobDataById: " + err.Error(), err)
        return x, x
    }

    return nil, nil
}


type procFuncMyServiceGoDoNothing struct {
    handler MyService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServiceGoDoNothing)(nil)

func (p *procFuncMyServiceGoDoNothing) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServiceGoDoNothing()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServiceGoDoNothing) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("doNothing", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServiceGoDoNothing) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServiceGoDoNothing()
    err := p.handler.GoDoNothing(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GoDoNothing: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type MyServicePrioParent interface {
    Ping(ctx context.Context) (error)
    Pong(ctx context.Context) (error)
}

type MyServicePrioParentClient interface {
    io.Closer
    Ping(ctx context.Context) (error)
    Pong(ctx context.Context) (error)
}

type myServicePrioParentClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyServicePrioParentClient = (*myServicePrioParentClientImpl)(nil)

func NewMyServicePrioParentChannelClient(channel thrift.RequestChannel) MyServicePrioParentClient {
    return &myServicePrioParentClientImpl{
        ch: channel,
    }
}

func (c *myServicePrioParentClientImpl) Close() error {
    return c.ch.Close()
}

func (c *myServicePrioParentClientImpl) Ping(ctx context.Context) (error) {
    fbthriftReq := &reqMyServicePrioParentPing{
    }
    fbthriftResp := newRespMyServicePrioParentPing()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "ping", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *myServicePrioParentClientImpl) Pong(ctx context.Context) (error) {
    fbthriftReq := &reqMyServicePrioParentPong{
    }
    fbthriftResp := newRespMyServicePrioParentPong()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "pong", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type MyServicePrioParentProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              MyServicePrioParent
}

func NewMyServicePrioParentProcessor(handler MyServicePrioParent) *MyServicePrioParentProcessor {
    p := &MyServicePrioParentProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("ping", &procFuncMyServicePrioParentPing{handler: handler})
    p.AddToProcessorFunctionMap("pong", &procFuncMyServicePrioParentPong{handler: handler})
    p.AddToFunctionServiceMap("ping", "MyServicePrioParent")
    p.AddToFunctionServiceMap("pong", "MyServicePrioParent")

    return p
}

func (p *MyServicePrioParentProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *MyServicePrioParentProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *MyServicePrioParentProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *MyServicePrioParentProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *MyServicePrioParentProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *MyServicePrioParentProcessor) PackageName() string {
    return "module"
}

func (p *MyServicePrioParentProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.MyServicePrioParent")
}


type procFuncMyServicePrioParentPing struct {
    handler MyServicePrioParent
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePrioParentPing)(nil)

func (p *procFuncMyServicePrioParentPing) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePrioParentPing()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePrioParentPing) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("ping", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePrioParentPing) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServicePrioParentPing()
    err := p.handler.Ping(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncMyServicePrioParentPong struct {
    handler MyServicePrioParent
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePrioParentPong)(nil)

func (p *procFuncMyServicePrioParentPong) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePrioParentPong()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePrioParentPong) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("pong", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePrioParentPong) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServicePrioParentPong()
    err := p.handler.Pong(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Pong: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type MyServicePrioChild interface {
    // Inherited/extended service
    MyServicePrioParent

    Pang(ctx context.Context) (error)
}

type MyServicePrioChildClient interface {
    io.Closer
    // Inherited/extended service
    MyServicePrioParentClient

    Pang(ctx context.Context) (error)
}

type myServicePrioChildClientImpl struct {
    // Inherited/extended service
    MyServicePrioParentClient
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ MyServicePrioChildClient = (*myServicePrioChildClientImpl)(nil)

func NewMyServicePrioChildChannelClient(channel thrift.RequestChannel) MyServicePrioChildClient {
    return &myServicePrioChildClientImpl{
        MyServicePrioParentClient: NewMyServicePrioParentChannelClient(channel),
        ch: channel,
    }
}

func (c *myServicePrioChildClientImpl) Close() error {
    return c.ch.Close()
}

func (c *myServicePrioChildClientImpl) Pang(ctx context.Context) (error) {
    fbthriftReq := &reqMyServicePrioChildPang{
    }
    fbthriftResp := newRespMyServicePrioChildPang()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "pang", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type MyServicePrioChildProcessor struct {
    // Inherited/extended processor
    *MyServicePrioParentProcessor
}

func NewMyServicePrioChildProcessor(handler MyServicePrioChild) *MyServicePrioChildProcessor {
    p := &MyServicePrioChildProcessor{
        NewMyServicePrioParentProcessor(handler),
    }
    p.AddToProcessorFunctionMap("pang", &procFuncMyServicePrioChildPang{handler: handler})
    p.AddToFunctionServiceMap("pang", "MyServicePrioChild")

    return p
}

func (p *MyServicePrioChildProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.MyServicePrioChild")
}


type procFuncMyServicePrioChildPang struct {
    handler MyServicePrioChild
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncMyServicePrioChildPang)(nil)

func (p *procFuncMyServicePrioChildPang) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqMyServicePrioChildPang()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncMyServicePrioChildPang) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("pang", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncMyServicePrioChildPang) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespMyServicePrioChildPang()
    err := p.handler.Pang(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Pang: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type BadService interface {
    Bar(ctx context.Context) (int32, error)
}

type BadServiceClient interface {
    io.Closer
    Bar(ctx context.Context) (int32, error)
}

type badServiceClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ BadServiceClient = (*badServiceClientImpl)(nil)

func NewBadServiceChannelClient(channel thrift.RequestChannel) BadServiceClient {
    return &badServiceClientImpl{
        ch: channel,
    }
}

func (c *badServiceClientImpl) Close() error {
    return c.ch.Close()
}

func (c *badServiceClientImpl) Bar(ctx context.Context) (int32, error) {
    fbthriftReq := &reqBadServiceBar{
    }
    fbthriftResp := newRespBadServiceBar()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "bar", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return 0, fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return 0, fbthriftEx
    }
    return fbthriftResp.GetSuccess(), nil
}


type BadServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              BadService
}

func NewBadServiceProcessor(handler BadService) *BadServiceProcessor {
    p := &BadServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("bar", &procFuncBadServiceBar{handler: handler})
    p.AddToFunctionServiceMap("bar", "BadService")

    return p
}

func (p *BadServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *BadServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *BadServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *BadServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *BadServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *BadServiceProcessor) PackageName() string {
    return "module"
}

func (p *BadServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.BadService")
}


type procFuncBadServiceBar struct {
    handler BadService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncBadServiceBar)(nil)

func (p *procFuncBadServiceBar) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqBadServiceBar()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncBadServiceBar) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("bar", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncBadServiceBar) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespBadServiceBar()
    retval, err := p.handler.Bar(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Bar: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


type FooBarBazService interface {
    FooStructured(ctx context.Context) (error)
    BarNonStructured(ctx context.Context) (error)
    Baz(ctx context.Context) (error)
}

type FooBarBazServiceClient interface {
    io.Closer
    FooStructured(ctx context.Context) (error)
    BarNonStructured(ctx context.Context) (error)
    Baz(ctx context.Context) (error)
}

type fooBarBazServiceClientImpl struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ FooBarBazServiceClient = (*fooBarBazServiceClientImpl)(nil)

func NewFooBarBazServiceChannelClient(channel thrift.RequestChannel) FooBarBazServiceClient {
    return &fooBarBazServiceClientImpl{
        ch: channel,
    }
}

func (c *fooBarBazServiceClientImpl) Close() error {
    return c.ch.Close()
}

func (c *fooBarBazServiceClientImpl) FooStructured(ctx context.Context) (error) {
    fbthriftReq := &reqFooBarBazServiceFooStructured{
    }
    fbthriftResp := newRespFooBarBazServiceFooStructured()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "foo", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *fooBarBazServiceClientImpl) BarNonStructured(ctx context.Context) (error) {
    fbthriftReq := &reqFooBarBazServiceBarNonStructured{
    }
    fbthriftResp := newRespFooBarBazServiceBarNonStructured()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "bar", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}

func (c *fooBarBazServiceClientImpl) Baz(ctx context.Context) (error) {
    fbthriftReq := &reqFooBarBazServiceBaz{
    }
    fbthriftResp := newRespFooBarBazServiceBaz()
    fbthriftErr := c.ch.SendRequestResponse(ctx, "baz", fbthriftReq, fbthriftResp)
    if fbthriftErr != nil {
        return fbthriftErr
    } else if fbthriftEx := fbthriftResp.Exception(); fbthriftEx != nil {
        return fbthriftEx
    }
    return nil
}


type FooBarBazServiceProcessor struct {
    processorFunctionMap map[string]thrift.ProcessorFunction
    functionServiceMap   map[string]string
    handler              FooBarBazService
}

func NewFooBarBazServiceProcessor(handler FooBarBazService) *FooBarBazServiceProcessor {
    p := &FooBarBazServiceProcessor{
        handler:              handler,
        processorFunctionMap: make(map[string]thrift.ProcessorFunction),
        functionServiceMap:   make(map[string]string),
    }
    p.AddToProcessorFunctionMap("foo", &procFuncFooBarBazServiceFooStructured{handler: handler})
    p.AddToProcessorFunctionMap("bar", &procFuncFooBarBazServiceBarNonStructured{handler: handler})
    p.AddToProcessorFunctionMap("baz", &procFuncFooBarBazServiceBaz{handler: handler})
    p.AddToFunctionServiceMap("foo", "FooBarBazService")
    p.AddToFunctionServiceMap("bar", "FooBarBazService")
    p.AddToFunctionServiceMap("baz", "FooBarBazService")

    return p
}

func (p *FooBarBazServiceProcessor) AddToProcessorFunctionMap(key string, processorFunction thrift.ProcessorFunction) {
    p.processorFunctionMap[key] = processorFunction
}

func (p *FooBarBazServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *FooBarBazServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction) {
    return p.processorFunctionMap[key]
}

func (p *FooBarBazServiceProcessor) ProcessorFunctionMap() map[string]thrift.ProcessorFunction {
    return p.processorFunctionMap
}

func (p *FooBarBazServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *FooBarBazServiceProcessor) PackageName() string {
    return "module"
}

func (p *FooBarBazServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("module.FooBarBazService")
}


type procFuncFooBarBazServiceFooStructured struct {
    handler FooBarBazService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncFooBarBazServiceFooStructured)(nil)

func (p *procFuncFooBarBazServiceFooStructured) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqFooBarBazServiceFooStructured()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFooBarBazServiceFooStructured) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("foo", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFooBarBazServiceFooStructured) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespFooBarBazServiceFooStructured()
    err := p.handler.FooStructured(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing FooStructured: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncFooBarBazServiceBarNonStructured struct {
    handler FooBarBazService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncFooBarBazServiceBarNonStructured)(nil)

func (p *procFuncFooBarBazServiceBarNonStructured) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqFooBarBazServiceBarNonStructured()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFooBarBazServiceBarNonStructured) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("bar", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFooBarBazServiceBarNonStructured) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespFooBarBazServiceBarNonStructured()
    err := p.handler.BarNonStructured(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing BarNonStructured: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncFooBarBazServiceBaz struct {
    handler FooBarBazService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = (*procFuncFooBarBazServiceBaz)(nil)

func (p *procFuncFooBarBazServiceBaz) Read(decoder thrift.Decoder) (thrift.Struct, error) {
    args := newReqFooBarBazServiceBaz()
    if err := args.Read(decoder); err != nil {
        return nil, err
    }
    decoder.ReadMessageEnd()
    return args, nil
}

func (p *procFuncFooBarBazServiceBaz) Write(seqId int32, result thrift.WritableStruct, encoder thrift.Encoder) (err error) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationExceptionIf:
        messageType = thrift.EXCEPTION
    }

    if err2 = encoder.WriteMessageBegin("baz", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(encoder); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = encoder.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncFooBarBazServiceBaz) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationExceptionIf) {
    result := newRespFooBarBazServiceBaz()
    err := p.handler.Baz(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Baz: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


