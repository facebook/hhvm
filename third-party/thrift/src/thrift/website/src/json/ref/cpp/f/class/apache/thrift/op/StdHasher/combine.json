{
  "kind": "overloadset",
  "name_html": "combine",
  "compoundname_html": "apache::thrift::op::StdHasher::combine",
  "functions": [
    {
      "refid": "classapache_1_1thrift_1_1op_1_1StdHasher_1a25fa334aaaaaba6d633ca4baaa2d8e43",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::<code>value</code> &gt;",
      "definition_html": "constexpr std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt; apache::thrift::op::StdHasher::combine",
      "argsstring_html": "(const T &amp;val)",
      "name_html": "combine",
      "param": [
        {
          "type_html": "const T &amp;",
          "declname_html": "val"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "line": "35",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "bodystart": "35",
        "bodyend": "38"
      },
      "definition": {
        "simple_html": "template &lt;typename T&gt;\nconstexpr std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt; combine(const T&amp; val)",
        "simple_raw": "template <typename T>\nconstexpr std::enable_if_t<std::is_arithmetic<T>::value> combine(const T& val)",
        "detailed_html": "template &lt;typename T&gt;\ninline constexpr std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt; combine(\n    const T&amp; val)",
        "detailed_raw": "template <typename T>\ninline constexpr std::enable_if_t<std::is_arithmetic<T>::value> combine(\n    const T& val)",
        "original_definition_html": "constexpr std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt; apache::thrift::op::StdHasher::combine",
        "original_argsstring_html": "(const T &amp;val)"
      },
      "filepath": "fns/class/apache/thrift/op/StdHasher/combine",
      "href": "/ref/cpp/fns/class/apache/thrift/op/StdHasher/combine",
      "parentid": "classapache_1_1thrift_1_1op_1_1StdHasher",
      "compoundname_html": "apache::thrift::op::StdHasher::combine"
    },
    {
      "refid": "classapache_1_1thrift_1_1op_1_1StdHasher_1a553f9c3d86a88877e822341ede146dd1",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "constexpr std::enable_if_t&lt; std::is_enum&lt; T &gt;::<code>value</code> &gt;",
      "definition_html": "constexpr std::enable_if_t&lt;std::is_enum&lt;T&gt;::value&gt; apache::thrift::op::StdHasher::combine",
      "argsstring_html": "(const T &amp;val)",
      "name_html": "combine",
      "param": [
        {
          "type_html": "const T &amp;",
          "declname_html": "val"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "line": "40",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "bodystart": "40",
        "bodyend": "42"
      },
      "definition": {
        "simple_html": "template &lt;typename T&gt;\nconstexpr std::enable_if_t&lt;std::is_enum&lt;T&gt;::value&gt; combine(const T&amp; val)",
        "simple_raw": "template <typename T>\nconstexpr std::enable_if_t<std::is_enum<T>::value> combine(const T& val)",
        "detailed_html": "template &lt;typename T&gt;\ninline constexpr std::enable_if_t&lt;std::is_enum&lt;T&gt;::value&gt; combine(const T&amp; val)",
        "detailed_raw": "template <typename T>\ninline constexpr std::enable_if_t<std::is_enum<T>::value> combine(const T& val)",
        "original_definition_html": "constexpr std::enable_if_t&lt;std::is_enum&lt;T&gt;::value&gt; apache::thrift::op::StdHasher::combine",
        "original_argsstring_html": "(const T &amp;val)"
      },
      "filepath": "fns/class/apache/thrift/op/StdHasher/combine",
      "href": "/ref/cpp/fns/class/apache/thrift/op/StdHasher/combine",
      "parentid": "classapache_1_1thrift_1_1op_1_1StdHasher",
      "compoundname_html": "apache::thrift::op::StdHasher::combine"
    },
    {
      "refid": "classapache_1_1thrift_1_1op_1_1StdHasher_1a29871029480683d9942c6a3b4913d5f6",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "void",
      "definition_html": "void apache::thrift::op::StdHasher::combine",
      "argsstring_html": "(const folly::IOBuf &amp;value)",
      "name_html": "combine",
      "param": [
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "value"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "line": "43",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "bodystart": "43",
        "bodyend": "47"
      },
      "definition": {
        "simple_html": "void combine(const folly::IOBuf&amp; value)",
        "simple_raw": "void combine(const folly::IOBuf& value)",
        "detailed_html": "inline void combine(const folly::IOBuf&amp; value)",
        "detailed_raw": "inline void combine(const folly::IOBuf& value)",
        "original_definition_html": "void apache::thrift::op::StdHasher::combine",
        "original_argsstring_html": "(const folly::IOBuf &amp;value)"
      },
      "filepath": "fns/class/apache/thrift/op/StdHasher/combine",
      "href": "/ref/cpp/fns/class/apache/thrift/op/StdHasher/combine",
      "parentid": "classapache_1_1thrift_1_1op_1_1StdHasher",
      "compoundname_html": "apache::thrift::op::StdHasher::combine"
    },
    {
      "refid": "classapache_1_1thrift_1_1op_1_1StdHasher_1a6698e2b816d024f2a15436eee56185dd",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "void",
      "definition_html": "void apache::thrift::op::StdHasher::combine",
      "argsstring_html": "(folly::ByteRange value)",
      "name_html": "combine",
      "param": [
        {
          "type_html": "folly::ByteRange",
          "declname_html": "value"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "line": "48",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "bodystart": "48",
        "bodyend": "51"
      },
      "definition": {
        "simple_html": "void combine(folly::ByteRange value)",
        "simple_raw": "void combine(folly::ByteRange value)",
        "detailed_html": "inline void combine(folly::ByteRange value)",
        "detailed_raw": "inline void combine(folly::ByteRange value)",
        "original_definition_html": "void apache::thrift::op::StdHasher::combine",
        "original_argsstring_html": "(folly::ByteRange value)"
      },
      "filepath": "fns/class/apache/thrift/op/StdHasher/combine",
      "href": "/ref/cpp/fns/class/apache/thrift/op/StdHasher/combine",
      "parentid": "classapache_1_1thrift_1_1op_1_1StdHasher",
      "compoundname_html": "apache::thrift::op::StdHasher::combine"
    },
    {
      "refid": "classapache_1_1thrift_1_1op_1_1StdHasher_1aa8213220110724befa29e19badc40b52",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "type_html": "void",
      "definition_html": "void apache::thrift::op::StdHasher::combine",
      "argsstring_html": "(const StdHasher &amp;other)",
      "name_html": "combine",
      "param": [
        {
          "type_html": "const <code>StdHasher</code> &amp;",
          "declname_html": "other"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "line": "52",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/StdHasher.h",
        "bodystart": "52",
        "bodyend": "52"
      },
      "definition": {
        "simple_html": "void combine(const StdHasher&amp; other)",
        "simple_raw": "void combine(const StdHasher& other)",
        "detailed_html": "inline void combine(const StdHasher&amp; other)",
        "detailed_raw": "inline void combine(const StdHasher& other)",
        "original_definition_html": "void apache::thrift::op::StdHasher::combine",
        "original_argsstring_html": "(const StdHasher &amp;other)"
      },
      "filepath": "fns/class/apache/thrift/op/StdHasher/combine",
      "href": "/ref/cpp/fns/class/apache/thrift/op/StdHasher/combine",
      "parentid": "classapache_1_1thrift_1_1op_1_1StdHasher",
      "compoundname_html": "apache::thrift::op::StdHasher::combine"
    }
  ],
  "filepath": "f/class/apache/thrift/op/StdHasher/combine",
  "minprot": "public",
  "displayname_html": "combine",
  "brief_html": "",
  "groupname_html": "",
  "href": "/ref/cpp/f/class/apache/thrift/op/StdHasher/combine",
  "refid": "/ref/cpp/f/class/apache/thrift/op/StdHasher/combine"
}