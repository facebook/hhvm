#
# Try/catch in a DV initializer.
#
# HHVM doesn't generate code like this, but it's legal bytecode.
#

.function foo($x = dv_init1, $y = dv_init2) {
main_entry:
  CGetL $x
  CGetL2 $y
  Add
  RetC

dv_init1:
  Int 0
  SetL $x
  PopC
dv_init2:
  .try {
    .try {
      Int 1
      SetL $y
      PopC

      NewObjD "Exception"
      Dup
      NullUninit
      NullUninit
      FCallCtor <LockWhileUnwinding> 0 1 "" - "" ""
      PopC
      LockObj
      Throw
    } .catch {
      Int 4321
      SetL $x
      PopC
      Throw
    }
  } .catch {
    PopC
    Jmp out_of_catch
  }

out_of_catch:
  Jmp main_entry
}

.function ["__EntryPoint"("""y:0:{}""")] main {
  NullUninit
  NullUninit
  NullUninit
    NullUninit
    NullUninit
    NullUninit
    FCallFuncD <> 0 1 "" - "" "foo"
  FCallFuncD <> 1 1 "" - "" "var_dump"
  PopC
  Int 1
  RetC
}
