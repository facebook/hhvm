#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cython.operator cimport dereference as deref
from libcpp.memory cimport make_unique, unique_ptr, shared_ptr
from thrift.py3.types cimport assign_unique_ptr, assign_shared_ptr, assign_shared_const_ptr

cimport thrift.py3.types
from thrift.py3.types cimport (
    reset_field as __reset_field,
    StructFieldsSetter as __StructFieldsSetter
)

from thrift.py3.types cimport const_pointer_cast, BadEnum as _fbthrift_BadEnum


@__cython.auto_pickle(False)
cdef class __TestError_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TestError_FieldsSetter _fbthrift_create(_test_fixtures_nolegacy_module_types.cTestError* struct_cpp_obj):
        cdef __TestError_FieldsSetter __fbthrift_inst = __TestError_FieldsSetter.__new__(__TestError_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"test_enum")] = __TestError_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"code")] = __TestError_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__TestError_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TestError_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field test_enum
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestError](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, _fbthrift_BadEnum) and not isinstance(_fbthrift_value, _test_fixtures_nolegacy_module_types.TestEnum):
            raise TypeError(f'field test_enum value: {repr(_fbthrift_value)} is not of the enum type { _test_fixtures_nolegacy_module_types.TestEnum }.')
        deref(self._struct_cpp_obj).test_enum_ref().assign(<_test_fixtures_nolegacy_module_types.cTestEnum><int>_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field code
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestError](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'code is not a { int !r}.')
        _fbthrift_value = <cint32_t> _fbthrift_value
        deref(self._struct_cpp_obj).code_ref().assign(_fbthrift_value)


@__cython.auto_pickle(False)
cdef class __TestMixin_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TestMixin_FieldsSetter _fbthrift_create(_test_fixtures_nolegacy_module_types.cTestMixin* struct_cpp_obj):
        cdef __TestMixin_FieldsSetter __fbthrift_inst = __TestMixin_FieldsSetter.__new__(__TestMixin_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"field1")] = __TestMixin_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__TestMixin_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TestMixin_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field field1
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestMixin](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'field1 is not a { str !r}.')
        deref(self._struct_cpp_obj).field1_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __TestStruct_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TestStruct_FieldsSetter _fbthrift_create(_test_fixtures_nolegacy_module_types.cTestStruct* struct_cpp_obj):
        cdef __TestStruct_FieldsSetter __fbthrift_inst = __TestStruct_FieldsSetter.__new__(__TestStruct_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"bar")] = __TestStruct_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"baropt")] = __TestStruct_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"test_error")] = __TestStruct_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"test_mixin")] = __TestStruct_FieldsSetter._set_field_3
        return __fbthrift_inst

    cdef void set_field(__TestStruct_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TestStruct_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field bar
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestStruct](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'bar is not a { str !r}.')
        deref(self._struct_cpp_obj).bar_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field baropt
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestStruct](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'baropt is not a { str !r}.')
        deref(self._struct_cpp_obj).baropt_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field test_error
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestStruct](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, _test_fixtures_nolegacy_module_types.TestError):
            raise TypeError(f'test_error is not a { _test_fixtures_nolegacy_module_types.TestError !r}.')
        deref(self._struct_cpp_obj).test_error_ref().assign(deref((<_test_fixtures_nolegacy_module_types.TestError?> _fbthrift_value)._cpp_obj))

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field test_mixin
        if _fbthrift_value is None:
            __reset_field[_test_fixtures_nolegacy_module_types.cTestStruct](deref(self._struct_cpp_obj), 3)
            return
        if not isinstance(_fbthrift_value, _test_fixtures_nolegacy_module_types.TestMixin):
            raise TypeError(f'test_mixin is not a { _test_fixtures_nolegacy_module_types.TestMixin !r}.')
        deref(self._struct_cpp_obj).test_mixin_ref().assign(deref((<_test_fixtures_nolegacy_module_types.TestMixin?> _fbthrift_value)._cpp_obj))

