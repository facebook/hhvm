/**
 * Autogenerated by Thrift for Common.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "mcrouter/lib/network/gen/gen-cpp2/Common_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McVersionRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McVersionRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McVersionReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).value_ref());
    case 3:
      return f(2, static_cast<T&&>(t).message_ref());
    case 4:
      return f(3, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McVersionReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McStatsRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McStatsRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McStatsReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).stats_ref());
    case 4:
      return f(3, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McStatsReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McShutdownRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McShutdownRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McShutdownReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McShutdownReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McQuitRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McQuitRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McQuitReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    case 3:
      return f(2, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McQuitReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McExecRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).key_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McExecRequest");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::McExecReply> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).response_ref());
    case 3:
      return f(2, static_cast<T&&>(t).message_ref());
    case 4:
      return f(3, static_cast<T&&>(t).appSpecificErrorCode_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::McExecReply");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::GoAwayAcknowledgement> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::GoAwayAcknowledgement");
    }
  }
};

template <>
struct VisitByThriftId<::facebook::memcache::thrift::GoAwayRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).result_ref());
    case 2:
      return f(1, static_cast<T&&>(t).reason_ref());
    default:
      throwInvalidThriftId(id, "::facebook::memcache::thrift::GoAwayRequest");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
