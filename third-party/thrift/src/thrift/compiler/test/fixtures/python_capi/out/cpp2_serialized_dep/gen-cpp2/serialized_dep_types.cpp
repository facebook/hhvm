/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_types.tcc"
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_constants.h"
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "serialized_dep";



namespace test::fixtures::python_capi {

std::string_view SerializedStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/SerializedStruct";
}

std::string_view SerializedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SerializedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SerializedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SerializedStruct>::name;
}

SerializedStruct::SerializedStruct(const SerializedStruct&) = default;
SerializedStruct& SerializedStruct::operator=(const SerializedStruct&) = default;
SerializedStruct::SerializedStruct() :
    __fbthrift_field_i() {
}


SerializedStruct::~SerializedStruct() {}

SerializedStruct::SerializedStruct([[maybe_unused]] SerializedStruct&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __fbthrift_field_i(std::move(other.__fbthrift_field_i)),
    __fbthrift_field_os(std::move(other.__fbthrift_field_os)),
    __fbthrift_field_rs(std::move(other.__fbthrift_field_rs)),
    __isset(other.__isset) {
}

SerializedStruct& SerializedStruct::operator=([[maybe_unused]] SerializedStruct&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    this->__fbthrift_field_i = std::move(other.__fbthrift_field_i);
    this->__fbthrift_field_os = std::move(other.__fbthrift_field_os);
    this->__fbthrift_field_rs = std::move(other.__fbthrift_field_rs);
    __isset = other.__isset;
    return *this;
}


SerializedStruct::SerializedStruct(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t i__arg, ::std::string os__arg, ::std::string rs__arg) :
    __fbthrift_field_s(std::move(s__arg)),
    __fbthrift_field_i(std::move(i__arg)),
    __fbthrift_field_os(std::move(os__arg)),
    __fbthrift_field_rs(std::move(rs__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}

void SerializedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_i = ::std::int32_t();
  this->__fbthrift_field_os = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_rs = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void SerializedStruct::__fbthrift_clear_terse_fields() {
}

bool SerializedStruct::__fbthrift_is_empty() const {
  return false;
}

bool SerializedStruct::operator==([[maybe_unused]] const SerializedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SerializedStruct::operator<([[maybe_unused]] const SerializedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t SerializedStruct::get_i() const {
  return __fbthrift_field_i;
}

::std::int32_t& SerializedStruct::set_i(::std::int32_t i_) {
  i_ref() = i_;
  return __fbthrift_field_i;
}

const ::std::string* SerializedStruct::get_os() const& {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

::std::string* SerializedStruct::get_os() & {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

void swap([[maybe_unused]] SerializedStruct& a, [[maybe_unused]] SerializedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__fbthrift_field_i, b.__fbthrift_field_i);
  swap(a.__fbthrift_field_os, b.__fbthrift_field_os);
  swap(a.__fbthrift_field_rs, b.__fbthrift_field_rs);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace apache { namespace thrift {

folly::Range<::test::fixtures::python_capi::SerializedUnion::Type const*> const TEnumTraits<::test::fixtures::python_capi::SerializedUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::SerializedUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::python_capi::SerializedUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::SerializedUnion::Type>::names);

bool TEnumTraits<::test::fixtures::python_capi::SerializedUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::SerializedUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test::fixtures::python_capi {

std::string_view SerializedUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/SerializedUnion";
}

std::string_view SerializedUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SerializedUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SerializedUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SerializedUnion>::name;
}

void SerializedUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::s:
      ::std::destroy_at(::std::addressof(value_.s));
      break;
    case Type::i:
      ::std::destroy_at(::std::addressof(value_.i));
      break;
    default:
      assert(false);
      break;
  }
}

void SerializedUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  SerializedUnion::~SerializedUnion() {
    __fbthrift_destruct();
  }

bool SerializedUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  SerializedUnion::SerializedUnion(const SerializedUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::s:
        set_s(rhs.value_.s);
        break;
      case Type::i:
        set_i(rhs.value_.i);
        break;
      default:
        assert(false);
    }
  }

    SerializedUnion&SerializedUnion::operator=(const SerializedUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::s:
        set_s(rhs.value_.s);
        break;
      case Type::i:
        set_i(rhs.value_.i);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool SerializedUnion::operator==(const SerializedUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool SerializedUnion::operator<([[maybe_unused]] const SerializedUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(SerializedUnion& a, SerializedUnion& b) {
  SerializedUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view SerializedError::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/SerializedError";
}

std::string_view SerializedError::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SerializedError>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SerializedError::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SerializedError>::name;
}

SerializedError::SerializedError(const SerializedError&) = default;
SerializedError& SerializedError::operator=(const SerializedError&) = default;
SerializedError::SerializedError() {
}


SerializedError::~SerializedError() {}

SerializedError::SerializedError([[maybe_unused]] SerializedError&& other) noexcept :
    __fbthrift_field_msg(std::move(other.__fbthrift_field_msg)),
    __fbthrift_field_os(std::move(other.__fbthrift_field_os)),
    __fbthrift_field_rs(std::move(other.__fbthrift_field_rs)),
    __isset(other.__isset) {
}

SerializedError& SerializedError::operator=([[maybe_unused]] SerializedError&& other) noexcept {
    this->__fbthrift_field_msg = std::move(other.__fbthrift_field_msg);
    this->__fbthrift_field_os = std::move(other.__fbthrift_field_os);
    this->__fbthrift_field_rs = std::move(other.__fbthrift_field_rs);
    __isset = other.__isset;
    return *this;
}


SerializedError::SerializedError(apache::thrift::FragileConstructor, ::std::string msg__arg, ::std::string os__arg, ::std::string rs__arg) :
    __fbthrift_field_msg(std::move(msg__arg)),
    __fbthrift_field_os(std::move(os__arg)),
    __fbthrift_field_rs(std::move(rs__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void SerializedError::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_msg = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_os = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_rs = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void SerializedError::__fbthrift_clear_terse_fields() {
}

bool SerializedError::__fbthrift_is_empty() const {
  return false;
}

bool SerializedError::operator==([[maybe_unused]] const SerializedError& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SerializedError::operator<([[maybe_unused]] const SerializedError& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::string* SerializedError::get_os() const& {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

::std::string* SerializedError::get_os() & {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

void swap([[maybe_unused]] SerializedError& a, [[maybe_unused]] SerializedError& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_msg, b.__fbthrift_field_msg);
  swap(a.__fbthrift_field_os, b.__fbthrift_field_os);
  swap(a.__fbthrift_field_rs, b.__fbthrift_field_rs);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view MarshalStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MarshalStruct";
}

std::string_view MarshalStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MarshalStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MarshalStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MarshalStruct>::name;
}

MarshalStruct::MarshalStruct(const MarshalStruct&) = default;
MarshalStruct& MarshalStruct::operator=(const MarshalStruct&) = default;
MarshalStruct::MarshalStruct() :
    __fbthrift_field_i() {
}


MarshalStruct::~MarshalStruct() {}

MarshalStruct::MarshalStruct([[maybe_unused]] MarshalStruct&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __fbthrift_field_i(std::move(other.__fbthrift_field_i)),
    __fbthrift_field_os(std::move(other.__fbthrift_field_os)),
    __fbthrift_field_rs(std::move(other.__fbthrift_field_rs)),
    __isset(other.__isset) {
}

MarshalStruct& MarshalStruct::operator=([[maybe_unused]] MarshalStruct&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    this->__fbthrift_field_i = std::move(other.__fbthrift_field_i);
    this->__fbthrift_field_os = std::move(other.__fbthrift_field_os);
    this->__fbthrift_field_rs = std::move(other.__fbthrift_field_rs);
    __isset = other.__isset;
    return *this;
}


MarshalStruct::MarshalStruct(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t i__arg, ::std::string os__arg, ::std::string rs__arg) :
    __fbthrift_field_s(std::move(s__arg)),
    __fbthrift_field_i(std::move(i__arg)),
    __fbthrift_field_os(std::move(os__arg)),
    __fbthrift_field_rs(std::move(rs__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}

void MarshalStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_i = ::std::int32_t();
  this->__fbthrift_field_os = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_rs = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void MarshalStruct::__fbthrift_clear_terse_fields() {
}

bool MarshalStruct::__fbthrift_is_empty() const {
  return false;
}

bool MarshalStruct::operator==([[maybe_unused]] const MarshalStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MarshalStruct::operator<([[maybe_unused]] const MarshalStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t MarshalStruct::get_i() const {
  return __fbthrift_field_i;
}

::std::int32_t& MarshalStruct::set_i(::std::int32_t i_) {
  i_ref() = i_;
  return __fbthrift_field_i;
}

const ::std::string* MarshalStruct::get_os() const& {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

::std::string* MarshalStruct::get_os() & {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

void swap([[maybe_unused]] MarshalStruct& a, [[maybe_unused]] MarshalStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__fbthrift_field_i, b.__fbthrift_field_i);
  swap(a.__fbthrift_field_os, b.__fbthrift_field_os);
  swap(a.__fbthrift_field_rs, b.__fbthrift_field_rs);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi


namespace apache { namespace thrift {

folly::Range<::test::fixtures::python_capi::MarshalUnion::Type const*> const TEnumTraits<::test::fixtures::python_capi::MarshalUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::MarshalUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::test::fixtures::python_capi::MarshalUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::MarshalUnion::Type>::names);

bool TEnumTraits<::test::fixtures::python_capi::MarshalUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::MarshalUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test::fixtures::python_capi {

std::string_view MarshalUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MarshalUnion";
}

std::string_view MarshalUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MarshalUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MarshalUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MarshalUnion>::name;
}

void MarshalUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::s:
      ::std::destroy_at(::std::addressof(value_.s));
      break;
    case Type::i:
      ::std::destroy_at(::std::addressof(value_.i));
      break;
    default:
      assert(false);
      break;
  }
}

void MarshalUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  MarshalUnion::~MarshalUnion() {
    __fbthrift_destruct();
  }

bool MarshalUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MarshalUnion::MarshalUnion(const MarshalUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::s:
        set_s(rhs.value_.s);
        break;
      case Type::i:
        set_i(rhs.value_.i);
        break;
      default:
        assert(false);
    }
  }

    MarshalUnion&MarshalUnion::operator=(const MarshalUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::s:
        set_s(rhs.value_.s);
        break;
      case Type::i:
        set_i(rhs.value_.i);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MarshalUnion::operator==(const MarshalUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MarshalUnion::operator<([[maybe_unused]] const MarshalUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MarshalUnion& a, MarshalUnion& b) {
  MarshalUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}


} // namespace test::fixtures::python_capi


namespace test::fixtures::python_capi {

std::string_view MarshalError::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MarshalError";
}

std::string_view MarshalError::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MarshalError>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MarshalError::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MarshalError>::name;
}

MarshalError::MarshalError(const MarshalError&) = default;
MarshalError& MarshalError::operator=(const MarshalError&) = default;
MarshalError::MarshalError() {
}


MarshalError::~MarshalError() {}

MarshalError::MarshalError([[maybe_unused]] MarshalError&& other) noexcept :
    __fbthrift_field_msg(std::move(other.__fbthrift_field_msg)),
    __fbthrift_field_os(std::move(other.__fbthrift_field_os)),
    __fbthrift_field_rs(std::move(other.__fbthrift_field_rs)),
    __isset(other.__isset) {
}

MarshalError& MarshalError::operator=([[maybe_unused]] MarshalError&& other) noexcept {
    this->__fbthrift_field_msg = std::move(other.__fbthrift_field_msg);
    this->__fbthrift_field_os = std::move(other.__fbthrift_field_os);
    this->__fbthrift_field_rs = std::move(other.__fbthrift_field_rs);
    __isset = other.__isset;
    return *this;
}


MarshalError::MarshalError(apache::thrift::FragileConstructor, ::std::string msg__arg, ::std::string os__arg, ::std::string rs__arg) :
    __fbthrift_field_msg(std::move(msg__arg)),
    __fbthrift_field_os(std::move(os__arg)),
    __fbthrift_field_rs(std::move(rs__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void MarshalError::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_msg = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_os = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_rs = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void MarshalError::__fbthrift_clear_terse_fields() {
}

bool MarshalError::__fbthrift_is_empty() const {
  return false;
}

bool MarshalError::operator==([[maybe_unused]] const MarshalError& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MarshalError::operator<([[maybe_unused]] const MarshalError& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::string* MarshalError::get_os() const& {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

::std::string* MarshalError::get_os() & {
  return os_ref().has_value() ? std::addressof(__fbthrift_field_os) : nullptr;
}

void swap([[maybe_unused]] MarshalError& a, [[maybe_unused]] MarshalError& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_msg, b.__fbthrift_field_msg);
  swap(a.__fbthrift_field_os, b.__fbthrift_field_os);
  swap(a.__fbthrift_field_rs, b.__fbthrift_field_rs);
  swap(a.__isset, b.__isset);
}


} // namespace test::fixtures::python_capi

namespace test::fixtures::python_capi { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace test::fixtures::python_capi
namespace apache::thrift::detail::annotation {
}
