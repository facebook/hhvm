/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/default_values_rectification_before/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct unqualified_int_field;
struct unqualified_bool_field;
struct unqualified_list_field;
struct unqualified_struct_field;
struct optional_int_field;
struct optional_bool_field;
struct optional_list_field;
struct optional_struct_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_int_field
#define APACHE_THRIFT_ACCESSOR_unqualified_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_bool_field
#define APACHE_THRIFT_ACCESSOR_unqualified_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_list_field
#define APACHE_THRIFT_ACCESSOR_unqualified_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unqualified_struct_field
#define APACHE_THRIFT_ACCESSOR_unqualified_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(unqualified_struct_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_int_field
#define APACHE_THRIFT_ACCESSOR_optional_int_field
APACHE_THRIFT_DEFINE_ACCESSOR(optional_int_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_bool_field
#define APACHE_THRIFT_ACCESSOR_optional_bool_field
APACHE_THRIFT_DEFINE_ACCESSOR(optional_bool_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_list_field
#define APACHE_THRIFT_ACCESSOR_optional_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(optional_list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optional_struct_field
#define APACHE_THRIFT_ACCESSOR_optional_struct_field
APACHE_THRIFT_DEFINE_ACCESSOR(optional_struct_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
// END declare_enums
// BEGIN forward_declare
namespace facebook::thrift::compiler::test::fixtures::default_values_rectification {
class EmptyStruct;
class TestStruct;
} // namespace facebook::thrift::compiler::test::fixtures::default_values_rectification
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook::thrift::compiler::test::fixtures::default_values_rectification {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/default_values_rectification_before/src/module.thrift", "name": "EmptyStruct", "kind": "struct" } */
class EmptyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = EmptyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  EmptyStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  EmptyStruct(apache::thrift::FragileConstructor);

  EmptyStruct(EmptyStruct&&) = default;

  EmptyStruct(const EmptyStruct&) = default;


  EmptyStruct& operator=(EmptyStruct&&) = default;

  EmptyStruct& operator=(const EmptyStruct&) = default;

 public:

  bool operator==(const EmptyStruct&) const;
  bool operator<(const EmptyStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<EmptyStruct>;
  friend void swap(EmptyStruct& a, EmptyStruct& b);
};

template <class Protocol_>
unsigned long EmptyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/default_values_rectification_before/src/module.thrift", "name": "TestStruct", "kind": "struct" } */
class TestStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 8;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::unqualified_int_field,
    ::apache::thrift::ident::unqualified_bool_field,
    ::apache::thrift::ident::unqualified_list_field,
    ::apache::thrift::ident::unqualified_struct_field,
    ::apache::thrift::ident::optional_int_field,
    ::apache::thrift::ident::optional_bool_field,
    ::apache::thrift::ident::optional_list_field,
    ::apache::thrift::ident::optional_struct_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::struct_t<::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TestStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  TestStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TestStruct(apache::thrift::FragileConstructor, ::std::int32_t unqualified_int_field__arg, bool unqualified_bool_field__arg, ::std::vector<::std::int32_t> unqualified_list_field__arg, ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct unqualified_struct_field__arg, ::std::int32_t optional_int_field__arg, bool optional_bool_field__arg, ::std::vector<::std::int32_t> optional_list_field__arg, ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct optional_struct_field__arg);

  TestStruct(TestStruct&&) noexcept;

  TestStruct(const TestStruct& src);


  TestStruct& operator=(TestStruct&&) noexcept;
  TestStruct& operator=(const TestStruct& src);

  ~TestStruct();

 private:
  ::std::int32_t __fbthrift_field_unqualified_int_field;
 private:
  bool __fbthrift_field_unqualified_bool_field;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_unqualified_list_field;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct __fbthrift_field_unqualified_struct_field;
 private:
  ::std::int32_t __fbthrift_field_optional_int_field;
 private:
  bool __fbthrift_field_optional_bool_field;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_optional_list_field;
 private:
  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct __fbthrift_field_optional_struct_field;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const TestStruct&) const;
  bool operator<(const TestStruct&) const;

  /** Glean { "field": "unqualified_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_int_field_ref() const& {
    return {this->__fbthrift_field_unqualified_int_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_int_field_ref() & {
    return {this->__fbthrift_field_unqualified_int_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_int_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_int_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_int_field() const& {
    return {this->__fbthrift_field_unqualified_int_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_int_field() & {
    return {this->__fbthrift_field_unqualified_int_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_int_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_int_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "unqualified_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_bool_field_ref() const& {
    return {this->__fbthrift_field_unqualified_bool_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "unqualified_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_bool_field_ref() & {
    return {this->__fbthrift_field_unqualified_bool_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "unqualified_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_bool_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "unqualified_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_bool_field() const& {
    return {this->__fbthrift_field_unqualified_bool_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "unqualified_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_bool_field() & {
    return {this->__fbthrift_field_unqualified_bool_field, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "unqualified_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_bool_field), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "unqualified_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_list_field_ref() const& {
    return {this->__fbthrift_field_unqualified_list_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_list_field_ref() & {
    return {this->__fbthrift_field_unqualified_list_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_list_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_list_field() const& {
    return {this->__fbthrift_field_unqualified_list_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_list_field() & {
    return {this->__fbthrift_field_unqualified_list_field, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_list_field), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_struct_field_ref() const& {
    return {this->__fbthrift_field_unqualified_struct_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_struct_field_ref() & {
    return {this->__fbthrift_field_unqualified_struct_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_struct_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_struct_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> unqualified_struct_field() const& {
    return {this->__fbthrift_field_unqualified_struct_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> unqualified_struct_field() & {
    return {this->__fbthrift_field_unqualified_struct_field, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> unqualified_struct_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_unqualified_struct_field), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "optional_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_int_field_ref() const& {
    return {this->__fbthrift_field_optional_int_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optional_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_int_field_ref() & {
    return {this->__fbthrift_field_optional_int_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optional_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_int_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_int_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optional_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_int_field() const& {
    return {this->__fbthrift_field_optional_int_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optional_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_int_field() & {
    return {this->__fbthrift_field_optional_int_field, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optional_int_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_int_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_int_field), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "optional_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_bool_field_ref() const& {
    return {this->__fbthrift_field_optional_bool_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optional_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_bool_field_ref() & {
    return {this->__fbthrift_field_optional_bool_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optional_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_bool_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_bool_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optional_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_bool_field() const& {
    return {this->__fbthrift_field_optional_bool_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optional_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_bool_field() & {
    return {this->__fbthrift_field_optional_bool_field, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optional_bool_field" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_bool_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_bool_field), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "optional_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_list_field_ref() const& {
    return {this->__fbthrift_field_optional_list_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optional_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_list_field_ref() & {
    return {this->__fbthrift_field_optional_list_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optional_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_list_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_list_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optional_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_list_field() const& {
    return {this->__fbthrift_field_optional_list_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optional_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_list_field() & {
    return {this->__fbthrift_field_optional_list_field, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optional_list_field" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_list_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_list_field), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "optional_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_struct_field_ref() const& {
    return {this->__fbthrift_field_optional_struct_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "optional_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_struct_field_ref() & {
    return {this->__fbthrift_field_optional_struct_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "optional_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_struct_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_struct_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "optional_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> optional_struct_field() const& {
    return {this->__fbthrift_field_optional_struct_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "optional_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> optional_struct_field() & {
    return {this->__fbthrift_field_optional_struct_field, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "optional_struct_field" } */
  template <typename..., typename fbthrift_T = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> optional_struct_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_optional_struct_field), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "unqualified_int_field" } */
  [[deprecated("Use `FOO.unqualified_int_field().value()` instead of `FOO.get_unqualified_int_field()`")]]
  ::std::int32_t get_unqualified_int_field() const;

  /** Glean { "field": "unqualified_int_field" } */
  [[deprecated("Use `FOO.unqualified_int_field() = BAR` instead of `FOO.set_unqualified_int_field(BAR)`")]]
  ::std::int32_t& set_unqualified_int_field(::std::int32_t unqualified_int_field_);

  /** Glean { "field": "unqualified_bool_field" } */
  [[deprecated("Use `FOO.unqualified_bool_field().value()` instead of `FOO.get_unqualified_bool_field()`")]]
  bool get_unqualified_bool_field() const;

  /** Glean { "field": "unqualified_bool_field" } */
  [[deprecated("Use `FOO.unqualified_bool_field() = BAR` instead of `FOO.set_unqualified_bool_field(BAR)`")]]
  bool& set_unqualified_bool_field(bool unqualified_bool_field_);

  /** Glean { "field": "unqualified_list_field" } */
  [[deprecated("Use `FOO.unqualified_list_field().value()` instead of `FOO.get_unqualified_list_field()`")]]
  const ::std::vector<::std::int32_t>& get_unqualified_list_field() const&;

  /** Glean { "field": "unqualified_list_field" } */
  [[deprecated("Use `FOO.unqualified_list_field().value()` instead of `FOO.get_unqualified_list_field()`")]]
  ::std::vector<::std::int32_t> get_unqualified_list_field() &&;

  /** Glean { "field": "unqualified_list_field" } */
  template <typename T_TestStruct_unqualified_list_field_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.unqualified_list_field() = BAR` instead of `FOO.set_unqualified_list_field(BAR)`")]]
  ::std::vector<::std::int32_t>& set_unqualified_list_field(T_TestStruct_unqualified_list_field_struct_setter&& unqualified_list_field_) {
    unqualified_list_field_ref() = std::forward<T_TestStruct_unqualified_list_field_struct_setter>(unqualified_list_field_);
    return __fbthrift_field_unqualified_list_field;
  }

  /** Glean { "field": "unqualified_struct_field" } */
  [[deprecated("Use `FOO.unqualified_struct_field().value()` instead of `FOO.get_unqualified_struct_field()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct& get_unqualified_struct_field() const&;

  /** Glean { "field": "unqualified_struct_field" } */
  [[deprecated("Use `FOO.unqualified_struct_field().value()` instead of `FOO.get_unqualified_struct_field()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct get_unqualified_struct_field() &&;

  /** Glean { "field": "unqualified_struct_field" } */
  template <typename T_TestStruct_unqualified_struct_field_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  [[deprecated("Use `FOO.unqualified_struct_field() = BAR` instead of `FOO.set_unqualified_struct_field(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct& set_unqualified_struct_field(T_TestStruct_unqualified_struct_field_struct_setter&& unqualified_struct_field_) {
    unqualified_struct_field_ref() = std::forward<T_TestStruct_unqualified_struct_field_struct_setter>(unqualified_struct_field_);
    return __fbthrift_field_unqualified_struct_field;
  }

  /** Glean { "field": "optional_int_field" } */
  [[deprecated("Use `FOO.optional_int_field().value()` instead of `FOO.get_optional_int_field()`")]]
  const ::std::int32_t* get_optional_int_field() const&;

  /** Glean { "field": "optional_int_field" } */
  [[deprecated("Use `FOO.optional_int_field().value()` instead of `FOO.get_optional_int_field()`")]]
  ::std::int32_t* get_optional_int_field() &;

  ::std::int32_t* get_optional_int_field() && = delete;

  /** Glean { "field": "optional_int_field" } */
  [[deprecated("Use `FOO.optional_int_field() = BAR` instead of `FOO.set_optional_int_field(BAR)`")]]
  ::std::int32_t& set_optional_int_field(::std::int32_t optional_int_field_);

  /** Glean { "field": "optional_bool_field" } */
  [[deprecated("Use `FOO.optional_bool_field().value()` instead of `FOO.get_optional_bool_field()`")]]
  const bool* get_optional_bool_field() const&;

  /** Glean { "field": "optional_bool_field" } */
  [[deprecated("Use `FOO.optional_bool_field().value()` instead of `FOO.get_optional_bool_field()`")]]
  bool* get_optional_bool_field() &;

  bool* get_optional_bool_field() && = delete;

  /** Glean { "field": "optional_bool_field" } */
  [[deprecated("Use `FOO.optional_bool_field() = BAR` instead of `FOO.set_optional_bool_field(BAR)`")]]
  bool& set_optional_bool_field(bool optional_bool_field_);

  /** Glean { "field": "optional_list_field" } */
  [[deprecated("Use `FOO.optional_list_field().value()` instead of `FOO.get_optional_list_field()`")]]
  const ::std::vector<::std::int32_t>* get_optional_list_field() const&;

  /** Glean { "field": "optional_list_field" } */
  [[deprecated("Use `FOO.optional_list_field().value()` instead of `FOO.get_optional_list_field()`")]]
  ::std::vector<::std::int32_t>* get_optional_list_field() &;

  ::std::vector<::std::int32_t>* get_optional_list_field() && = delete;

  /** Glean { "field": "optional_list_field" } */
  template <typename T_TestStruct_optional_list_field_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.optional_list_field() = BAR` instead of `FOO.set_optional_list_field(BAR)`")]]
  ::std::vector<::std::int32_t>& set_optional_list_field(T_TestStruct_optional_list_field_struct_setter&& optional_list_field_) {
    optional_list_field_ref() = std::forward<T_TestStruct_optional_list_field_struct_setter>(optional_list_field_);
    return __fbthrift_field_optional_list_field;
  }

  /** Glean { "field": "optional_struct_field" } */
  [[deprecated("Use `FOO.optional_struct_field().value()` instead of `FOO.get_optional_struct_field()`")]]
  const ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct* get_optional_struct_field() const&;

  /** Glean { "field": "optional_struct_field" } */
  [[deprecated("Use `FOO.optional_struct_field().value()` instead of `FOO.get_optional_struct_field()`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct* get_optional_struct_field() &;

  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct* get_optional_struct_field() && = delete;

  /** Glean { "field": "optional_struct_field" } */
  template <typename T_TestStruct_optional_struct_field_struct_setter = ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct>
  [[deprecated("Use `FOO.optional_struct_field() = BAR` instead of `FOO.set_optional_struct_field(BAR)`")]]
  ::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct& set_optional_struct_field(T_TestStruct_optional_struct_field_struct_setter&& optional_struct_field_) {
    optional_struct_field_ref() = std::forward<T_TestStruct_optional_struct_field_struct_setter>(optional_struct_field_);
    return __fbthrift_field_optional_struct_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TestStruct>;
  friend void swap(TestStruct& a, TestStruct& b);
};

template <class Protocol_>
unsigned long TestStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace facebook::thrift::compiler::test::fixtures::default_values_rectification

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::facebook::thrift::compiler::test::fixtures::default_values_rectification::EmptyStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 4952383987043382979;
  static constexpr ::std::string_view definitionKey = {"\x05\x8c\x0f\xc5\x87\xf7\x79\xd6\x17\xf2\xf2\xde\x04\x6d\x86\x47", 16};
};
template <> struct TSchemaAssociation<::facebook::thrift::compiler::test::fixtures::default_values_rectification::TestStruct, false> {
  static ::folly::Range<const ::std::string_view*>(*bundle)();
  static constexpr int64_t programId = 4952383987043382979;
  static constexpr ::std::string_view definitionKey = {"\x36\x26\x78\x6b\x16\x20\x57\x6f\x8e\x2f\xa1\xa4\x95\x48\xb6\xe8", 16};
};
} // namespace apache::thrift::detail
