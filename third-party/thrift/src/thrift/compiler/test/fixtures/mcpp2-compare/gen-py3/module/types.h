/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "thrift/compiler/test/fixtures/mcpp2-compare/src/gen-cpp2/module_data.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/src/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/src/gen-cpp2/module_metadata.h"
namespace thrift {
namespace py3 {


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::MyEnumA>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::AnnotatedEnum>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::AnnotatedEnum2>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::MyEnumB>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::SimpleUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}

template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::ComplexUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}

template<>
inline const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::some::valid::ns::FloatUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
inline void reset_field<::some::valid::ns::Empty>(
    ::some::valid::ns::Empty& obj, uint16_t index) {
  switch (index) {
  }
}

template<>
inline void reset_field<::some::valid::ns::ASimpleStruct>(
    ::some::valid::ns::ASimpleStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.boolField_ref().copy_from(default_inst<::some::valid::ns::ASimpleStruct>().boolField_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::ASimpleStructNoexcept>(
    ::some::valid::ns::ASimpleStructNoexcept& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.boolField_ref().copy_from(default_inst<::some::valid::ns::ASimpleStructNoexcept>().boolField_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::MyStruct>(
    ::some::valid::ns::MyStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.MyBoolField_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyBoolField_ref());
      return;
    case 1:
      obj.MyIntField_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyIntField_ref());
      return;
    case 2:
      obj.MyStringField_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyStringField_ref());
      return;
    case 3:
      obj.MyStringField2_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyStringField2_ref());
      return;
    case 4:
      obj.MyBinaryField_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyBinaryField_ref());
      return;
    case 5:
      obj.MyBinaryField2_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyBinaryField2_ref());
      return;
    case 6:
      obj.MyBinaryField3_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyBinaryField3_ref());
      return;
    case 7:
      obj.MyBinaryListField4_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyBinaryListField4_ref());
      return;
    case 8:
      obj.MyMapEnumAndInt_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyMapEnumAndInt_ref());
      return;
    case 9:
      obj.MyCustomField_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyCustomField_ref());
      return;
    case 10:
      obj.MyOptCustomField_ref().copy_from(default_inst<::some::valid::ns::MyStruct>().MyOptCustomField_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::AnException>(
    ::some::valid::ns::AnException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.code_ref().copy_from(default_inst<::some::valid::ns::AnException>().code_ref());
      return;
    case 1:
      obj.req_code_ref().copy_from(default_inst<::some::valid::ns::AnException>().req_code_ref());
      return;
    case 2:
      obj.message2_ref().copy_from(default_inst<::some::valid::ns::AnException>().message2_ref());
      return;
    case 3:
      obj.req_message_ref().copy_from(default_inst<::some::valid::ns::AnException>().req_message_ref());
      return;
    case 4:
      obj.exception_list_ref().copy_from(default_inst<::some::valid::ns::AnException>().exception_list_ref());
      return;
    case 5:
      obj.exception_set_ref().copy_from(default_inst<::some::valid::ns::AnException>().exception_set_ref());
      return;
    case 6:
      obj.exception_map_ref().copy_from(default_inst<::some::valid::ns::AnException>().exception_map_ref());
      return;
    case 7:
      obj.req_exception_map_ref().copy_from(default_inst<::some::valid::ns::AnException>().req_exception_map_ref());
      return;
    case 8:
      obj.enum_field_ref().copy_from(default_inst<::some::valid::ns::AnException>().enum_field_ref());
      return;
    case 9:
      obj.enum_container_ref().copy_from(default_inst<::some::valid::ns::AnException>().enum_container_ref());
      return;
    case 10:
      obj.a_struct_ref().copy_from(default_inst<::some::valid::ns::AnException>().a_struct_ref());
      return;
    case 11:
      obj.a_set_struct_ref().copy_from(default_inst<::some::valid::ns::AnException>().a_set_struct_ref());
      return;
    case 12:
      obj.a_union_list_ref().copy_from(default_inst<::some::valid::ns::AnException>().a_union_list_ref());
      return;
    case 13:
      obj.union_typedef_ref().copy_from(default_inst<::some::valid::ns::AnException>().union_typedef_ref());
      return;
    case 14:
      obj.a_union_typedef_list_ref().copy_from(default_inst<::some::valid::ns::AnException>().a_union_typedef_list_ref());
      return;
    case 15:
      obj.MyCustomField_ref().copy_from(default_inst<::some::valid::ns::AnException>().MyCustomField_ref());
      return;
    case 16:
      obj.MyOptCustomField_ref().copy_from(default_inst<::some::valid::ns::AnException>().MyOptCustomField_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::AnotherException>(
    ::some::valid::ns::AnotherException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.code_ref().copy_from(default_inst<::some::valid::ns::AnotherException>().code_ref());
      return;
    case 1:
      obj.req_code_ref().copy_from(default_inst<::some::valid::ns::AnotherException>().req_code_ref());
      return;
    case 2:
      obj.message_ref().copy_from(default_inst<::some::valid::ns::AnotherException>().message_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::containerStruct>(
    ::some::valid::ns::containerStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.fieldA_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldA_ref());
      return;
    case 1:
      obj.req_fieldA_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldA_ref());
      return;
    case 2:
      obj.opt_fieldA_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldA_ref());
      return;
    case 3:
      obj.fieldB_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldB_ref());
      return;
    case 4:
      obj.req_fieldB_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldB_ref());
      return;
    case 5:
      obj.opt_fieldB_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldB_ref());
      return;
    case 6:
      obj.fieldC_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldC_ref());
      return;
    case 7:
      obj.req_fieldC_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldC_ref());
      return;
    case 8:
      obj.opt_fieldC_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldC_ref());
      return;
    case 9:
      obj.fieldD_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldD_ref());
      return;
    case 10:
      obj.fieldE_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldE_ref());
      return;
    case 11:
      obj.req_fieldE_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldE_ref());
      return;
    case 12:
      obj.opt_fieldE_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldE_ref());
      return;
    case 13:
      obj.fieldF_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldF_ref());
      return;
    case 14:
      obj.fieldG_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldG_ref());
      return;
    case 15:
      obj.fieldH_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldH_ref());
      return;
    case 16:
      obj.fieldI_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldI_ref());
      return;
    case 17:
      obj.fieldJ_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldJ_ref());
      return;
    case 18:
      obj.fieldK_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldK_ref());
      return;
    case 19:
      obj.fieldL_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldL_ref());
      return;
    case 20:
      obj.fieldM_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldM_ref());
      return;
    case 21:
      obj.fieldN_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldN_ref());
      return;
    case 22:
      obj.fieldO_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldO_ref());
      return;
    case 23:
      obj.fieldP_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldP_ref());
      return;
    case 24:
      obj.fieldQ_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldQ_ref());
      return;
    case 25:
      obj.fieldR_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldR_ref());
      return;
    case 26:
      obj.req_fieldR_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldR_ref());
      return;
    case 27:
      obj.opt_fieldR_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldR_ref());
      return;
    case 28:
      obj.fieldS_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldS_ref());
      return;
    case 29:
      obj.fieldT_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldT_ref());
      return;
    case 30:
      obj.fieldU_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldU_ref());
      return;
    case 31:
      obj.fieldV_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldV_ref());
      return;
    case 32:
      obj.req_fieldV_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldV_ref());
      return;
    case 33:
      obj.opt_fieldV_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldV_ref());
      return;
    case 34:
      obj.fieldW_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldW_ref());
      return;
    case 35:
      obj.fieldX_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldX_ref());
      return;
    case 36:
      obj.req_fieldX_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().req_fieldX_ref());
      return;
    case 37:
      obj.opt_fieldX_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().opt_fieldX_ref());
      return;
    case 38:
      obj.fieldY_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldY_ref());
      return;
    case 39:
      obj.fieldZ_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldZ_ref());
      return;
    case 40:
      obj.fieldAA_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldAA_ref());
      return;
    case 41:
      obj.fieldAB_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldAB_ref());
      return;
    case 42:
      obj.fieldAC_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldAC_ref());
      return;
    case 43:
      obj.fieldAD_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldAD_ref());
      return;
    case 44:
      obj.fieldAE_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldAE_ref());
      return;
    case 45:
      obj.fieldSD_ref().copy_from(default_inst<::some::valid::ns::containerStruct>().fieldSD_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::MyIncludedStruct>(
    ::some::valid::ns::MyIncludedStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.MyIncludedInt_ref().copy_from(default_inst<::some::valid::ns::MyIncludedStruct>().MyIncludedInt_ref());
      return;
    case 1:
      obj.MyIncludedStruct_ref().copy_from(default_inst<::some::valid::ns::MyIncludedStruct>().MyIncludedStruct_ref());
      return;
    case 2:
      obj.ARefField_ref().reset();
      return;
    case 3:
      obj.ARequiredField_ref().copy_from(default_inst<::some::valid::ns::MyIncludedStruct>().ARequiredField_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::AnnotatedStruct>(
    ::some::valid::ns::AnnotatedStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.no_annotation_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().no_annotation_ref());
      return;
    case 1:
      obj.cpp_unique_ref_ref().reset();
      return;
    case 2:
      obj.cpp2_unique_ref_ref().reset();
      return;
    case 3:
      obj.container_with_ref_ref().reset();
      return;
    case 4:
      obj.req_cpp_unique_ref_ref().reset();
      return;
    case 5:
      obj.req_cpp2_unique_ref_ref().reset();
      return;
    case 6:
      obj.req_container_with_ref_ref().reset();
      return;
    case 7:
      obj.opt_cpp_unique_ref_ref().reset();
      return;
    case 8:
      obj.opt_cpp2_unique_ref_ref().reset();
      return;
    case 9:
      obj.opt_container_with_ref_ref().reset();
      return;
    case 10:
      obj.ref_type_unique_ref().reset();
      return;
    case 11:
      obj.ref_type_shared_ref().reset();
      return;
    case 12:
      obj.ref_type_const_ref().reset();
      return;
    case 13:
      obj.req_ref_type_shared_ref().reset();
      return;
    case 14:
      obj.req_ref_type_const_ref().reset();
      return;
    case 15:
      obj.req_ref_type_unique_ref().reset();
      return;
    case 16:
      obj.opt_ref_type_const_ref().reset();
      return;
    case 17:
      obj.opt_ref_type_unique_ref().reset();
      return;
    case 18:
      obj.opt_ref_type_shared_ref().reset();
      return;
    case 19:
      obj.base_type_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().base_type_ref());
      return;
    case 20:
      obj.list_type_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().list_type_ref());
      return;
    case 21:
      obj.set_type_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().set_type_ref());
      return;
    case 22:
      obj.map_type_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().map_type_ref());
      return;
    case 23:
      obj.map_struct_type_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().map_struct_type_ref());
      return;
    case 24:
      obj.iobuf_type_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().iobuf_type_ref());
      return;
    case 25:
      obj.iobuf_ptr_ref()->reset();
      return;
    case 26:
      obj.list_i32_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().list_i32_template_ref());
      return;
    case 27:
      obj.list_string_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().list_string_template_ref());
      return;
    case 28:
      obj.set_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().set_template_ref());
      return;
    case 29:
      obj.map_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().map_template_ref());
      return;
    case 30:
      obj.typedef_list_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().typedef_list_template_ref());
      return;
    case 31:
      obj.typedef_deque_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().typedef_deque_template_ref());
      return;
    case 32:
      obj.typedef_set_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().typedef_set_template_ref());
      return;
    case 33:
      obj.typedef_map_template_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().typedef_map_template_ref());
      return;
    case 34:
      obj.indirection_a_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().indirection_a_ref());
      return;
    case 35:
      obj.indirection_b_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().indirection_b_ref());
      return;
    case 36:
      obj.indirection_c_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().indirection_c_ref());
      return;
    case 37:
      obj.iobuf_type_val_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().iobuf_type_val_ref());
      return;
    case 38:
      obj.iobuf_ptr_val_ref()->reset();
      return;
    case 39:
      obj.struct_struct_ref().copy_from(default_inst<::some::valid::ns::AnnotatedStruct>().struct_struct_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::ComplexContainerStruct>(
    ::some::valid::ns::ComplexContainerStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.map_of_iobufs_ref().copy_from(default_inst<::some::valid::ns::ComplexContainerStruct>().map_of_iobufs_ref());
      return;
    case 1:
      obj.map_of_iobuf_ptrs_ref().copy_from(default_inst<::some::valid::ns::ComplexContainerStruct>().map_of_iobuf_ptrs_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::FloatStruct>(
    ::some::valid::ns::FloatStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.floatField_ref().copy_from(default_inst<::some::valid::ns::FloatStruct>().floatField_ref());
      return;
    case 1:
      obj.doubleField_ref().copy_from(default_inst<::some::valid::ns::FloatStruct>().doubleField_ref());
      return;
  }
}

template<>
inline void reset_field<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>(
    ::some::valid::ns::AllRequiredNoExceptMoveCtrStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.intField_ref().copy_from(default_inst<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>().intField_ref());
      return;
  }
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::Empty>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::ASimpleStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::ASimpleStructNoexcept>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::MyStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::SimpleUnion>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::ComplexUnion>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::AnException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::AnotherException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::containerStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::MyIncludedStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::AnnotatedStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::ComplexContainerStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::FloatStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::FloatUnion>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
inline const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
