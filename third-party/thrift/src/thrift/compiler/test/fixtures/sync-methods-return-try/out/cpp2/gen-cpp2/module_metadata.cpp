/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/sync-methods-return-try/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/sync-methods-return-try/gen-cpp2/module_metadata.h"

// some of these functions can be so large that the compiler gives up optimizing
// them - and issues a warning which may be treated as an error!
//
// these functions are so rarely called that it is probably okay for them not to
// be optimized in practice
FOLLY_CLANG_DISABLE_WARNING("-Wignored-optimization-argument")

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::FooStreamEx>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::FooStreamEx>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_FooStreamEx = res.metadata;
  module_FooStreamEx.is_union() = false;
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::FooEx>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::FooEx>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_FooEx = res.metadata;
  module_FooEx.is_union() = false;
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::FooEx2>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::FooEx2>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_FooEx2 = res.metadata;
  module_FooEx2.is_union() = false;
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::InitialResponse>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::InitialResponse>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_InitialResponse = res.metadata;
  module_InitialResponse.is_union() = false;
  static const auto* const
  module_InitialResponse_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "content", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_InitialResponse_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_InitialResponse.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::FinalResponse>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::FinalResponse>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_FinalResponse = res.metadata;
  module_FinalResponse.is_union() = false;
  static const auto* const
  module_FinalResponse_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "content", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_FinalResponse_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_FinalResponse.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::SinkPayload>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::SinkPayload>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_SinkPayload = res.metadata;
  module_SinkPayload.is_union() = false;
  static const auto* const
  module_SinkPayload_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "content", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_SinkPayload_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_SinkPayload.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::CompatibleWithKeywordSink>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::CompatibleWithKeywordSink>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_CompatibleWithKeywordSink = res.metadata;
  module_CompatibleWithKeywordSink.is_union() = false;
  static const auto* const
  module_CompatibleWithKeywordSink_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "sink", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_CompatibleWithKeywordSink_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_CompatibleWithKeywordSink.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::InitialException>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::InitialException>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_InitialException = res.metadata;
  module_InitialException.is_union() = false;
  static const auto* const
  module_InitialException_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_InitialException_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_InitialException.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::SinkException1>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::SinkException1>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_SinkException1 = res.metadata;
  module_SinkException1.is_union() = false;
  static const auto* const
  module_SinkException1_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_SinkException1_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_SinkException1.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::SinkException2>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::SinkException2>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_SinkException2 = res.metadata;
  module_SinkException2.is_union() = false;
  static const auto* const
  module_SinkException2_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_SinkException2_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_SinkException2.fields()->push_back(std::move(field));
  }
  return res.metadata;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::cpp2::StreamItem>::gen(ThriftMetadata& metadata) {
  auto res = genStructMetadata<::cpp2::StreamItem>(metadata);
  if (res.preExists) {
    return res.metadata;
  }
  ::apache::thrift::metadata::ThriftStruct& module_StreamItem = res.metadata;
  module_StreamItem.is_union() = false;
  static const auto* const
  module_StreamItem_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "content", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_StreamItem_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    field.structured_annotations() = f.structured_annotations;
    module_StreamItem.fields()->push_back(std::move(field));
  }
  return res.metadata;
}

void ExceptionMetadata<::cpp2::FooStreamEx>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions()->emplace("module.FooStreamEx", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_FooStreamEx = res.first->second;
  module_FooStreamEx.name() = "module.FooStreamEx";
}
void ExceptionMetadata<::cpp2::FooEx>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions()->emplace("module.FooEx", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_FooEx = res.first->second;
  module_FooEx.name() = "module.FooEx";
}
void ExceptionMetadata<::cpp2::FooEx2>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions()->emplace("module.FooEx2", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_FooEx2 = res.first->second;
  module_FooEx2.name() = "module.FooEx2";
}
void ExceptionMetadata<::cpp2::InitialException>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions()->emplace("module.InitialException", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_InitialException = res.first->second;
  module_InitialException.name() = "module.InitialException";
  static const auto* const
  module_InitialException_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_InitialException_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    module_InitialException.fields()->push_back(std::move(field));
  }
}
void ExceptionMetadata<::cpp2::SinkException1>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions()->emplace("module.SinkException1", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_SinkException1 = res.first->second;
  module_SinkException1.name() = "module.SinkException1";
  static const auto* const
  module_SinkException1_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_SinkException1_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    module_SinkException1.fields()->push_back(std::move(field));
  }
}
void ExceptionMetadata<::cpp2::SinkException2>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions()->emplace("module.SinkException2", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_SinkException2 = res.first->second;
  module_SinkException2.name() = "module.SinkException2";
  static const auto* const
  module_SinkException2_fields = new std::array<EncodedThriftField, 1>{ {
    { 1, "reason", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{ }},  }};
  for (const auto& f : *module_SinkException2_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id() = f.id;
    field.name() = f.name;
    field.is_optional() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type(), metadata);
    module_SinkException2.fields()->push_back(std::move(field));
  }
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_method([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "method";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodAndReponse([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "methodAndReponse";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"), std::make_unique<Struct<::cpp2::InitialResponse>>("module.InitialResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodThrow([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "methodThrow";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_SinkService_methodThrow_ex_1;
  module_SinkService_methodThrow_ex_1.id() = 1;
  module_SinkService_methodThrow_ex_1.name() = "ex";
  module_SinkService_methodThrow_ex_1.is_optional() = false;
  auto module_SinkService_methodThrow_ex_1_type = std::make_unique<Struct<::cpp2::InitialException>>("module.InitialException");
  module_SinkService_methodThrow_ex_1_type->writeAndGenType(*module_SinkService_methodThrow_ex_1.type(), metadata);
  func.exceptions()->push_back(std::move(module_SinkService_methodThrow_ex_1));
  ExceptionMetadata<::cpp2::InitialException>::gen(metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodSinkThrow([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "methodSinkThrow";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodFinalThrow([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "methodFinalThrow";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodBothThrow([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "methodBothThrow";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodFast([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "methodFast";
  auto func_ret_type = std::make_unique<Sink>(std::make_unique<Struct<::cpp2::SinkPayload>>("module.SinkPayload"), std::make_unique<Struct<::cpp2::FinalResponse>>("module.FinalResponse"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  func.is_oneway() = false;
  func.structured_annotations()->push_back(*cvStruct("cpp.ProcessInEbThreadUnsafe", {  }).cv_struct());
  service.functions()->push_back(std::move(func));
}

void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen(::apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  const ::apache::thrift::metadata::ThriftServiceContextRef* self = genRecurse(*response.metadata(), *response.services());
  DCHECK(self != nullptr);
  // TODO(praihan): Remove ThriftServiceContext from response. But in the meantime, we need to fill the field with the result of looking up in ThriftMetadata.
  ::apache::thrift::metadata::ThriftServiceContext context;
  context.module() = *self->module();
  context.service_info() = response.metadata()->services()->at(*self->service_name());
  response.context() = std::move(context);
}

const ThriftServiceContextRef* ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::genRecurse([[maybe_unused]] ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services) {
  ::apache::thrift::metadata::ThriftService module_SinkService;
  module_SinkService.name() = "module.SinkService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_method,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodAndReponse,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodThrow,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodSinkThrow,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodFinalThrow,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodBothThrow,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::SinkService>>::gen_methodFast,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_SinkService);
  }
  // We need to keep the index around because a reference or iterator could be invalidated.
  auto selfIndex = services.size();
  services.emplace_back();
  ThriftServiceContextRef& context = services[selfIndex];
  metadata.services()->emplace("module.SinkService", std::move(module_SinkService));
  context.service_name() = "module.SinkService";
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name() = "module";
  context.module() = std::move(module);
  return &context;
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_returnstream([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "returnstream";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_returnstream_from_1;
  module_PubSubStreamingService_returnstream_from_1.id() = 1;
  module_PubSubStreamingService_returnstream_from_1.name() = "from";
  module_PubSubStreamingService_returnstream_from_1.is_optional() = false;
  auto module_PubSubStreamingService_returnstream_from_1_type = std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem");
  module_PubSubStreamingService_returnstream_from_1_type->writeAndGenType(*module_PubSubStreamingService_returnstream_from_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_returnstream_from_1));
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_returnstream_to_2;
  module_PubSubStreamingService_returnstream_to_2.id() = 2;
  module_PubSubStreamingService_returnstream_to_2.name() = "to";
  module_PubSubStreamingService_returnstream_to_2.is_optional() = false;
  auto module_PubSubStreamingService_returnstream_to_2_type = std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem");
  module_PubSubStreamingService_returnstream_to_2_type->writeAndGenType(*module_PubSubStreamingService_returnstream_to_2.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_returnstream_to_2));
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_streamthrows([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "streamthrows";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_streamthrows_foo_1;
  module_PubSubStreamingService_streamthrows_foo_1.id() = 1;
  module_PubSubStreamingService_streamthrows_foo_1.name() = "foo";
  module_PubSubStreamingService_streamthrows_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_streamthrows_foo_1_type = std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem");
  module_PubSubStreamingService_streamthrows_foo_1_type->writeAndGenType(*module_PubSubStreamingService_streamthrows_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_streamthrows_foo_1));
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_servicethrows([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "servicethrows";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_servicethrows_foo_1;
  module_PubSubStreamingService_servicethrows_foo_1.id() = 1;
  module_PubSubStreamingService_servicethrows_foo_1.name() = "foo";
  module_PubSubStreamingService_servicethrows_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_servicethrows_foo_1_type = std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem");
  module_PubSubStreamingService_servicethrows_foo_1_type->writeAndGenType(*module_PubSubStreamingService_servicethrows_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_servicethrows_foo_1));
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_servicethrows_e_1;
  module_PubSubStreamingService_servicethrows_e_1.id() = 1;
  module_PubSubStreamingService_servicethrows_e_1.name() = "e";
  module_PubSubStreamingService_servicethrows_e_1.is_optional() = false;
  auto module_PubSubStreamingService_servicethrows_e_1_type = std::make_unique<Struct<::cpp2::FooEx>>("module.FooEx");
  module_PubSubStreamingService_servicethrows_e_1_type->writeAndGenType(*module_PubSubStreamingService_servicethrows_e_1.type(), metadata);
  func.exceptions()->push_back(std::move(module_PubSubStreamingService_servicethrows_e_1));
  ExceptionMetadata<::cpp2::FooEx>::gen(metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_servicethrows2([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "servicethrows2";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_servicethrows2_foo_1;
  module_PubSubStreamingService_servicethrows2_foo_1.id() = 1;
  module_PubSubStreamingService_servicethrows2_foo_1.name() = "foo";
  module_PubSubStreamingService_servicethrows2_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_servicethrows2_foo_1_type = std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem");
  module_PubSubStreamingService_servicethrows2_foo_1_type->writeAndGenType(*module_PubSubStreamingService_servicethrows2_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_servicethrows2_foo_1));
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_servicethrows2_e1_1;
  module_PubSubStreamingService_servicethrows2_e1_1.id() = 1;
  module_PubSubStreamingService_servicethrows2_e1_1.name() = "e1";
  module_PubSubStreamingService_servicethrows2_e1_1.is_optional() = false;
  auto module_PubSubStreamingService_servicethrows2_e1_1_type = std::make_unique<Struct<::cpp2::FooEx>>("module.FooEx");
  module_PubSubStreamingService_servicethrows2_e1_1_type->writeAndGenType(*module_PubSubStreamingService_servicethrows2_e1_1.type(), metadata);
  func.exceptions()->push_back(std::move(module_PubSubStreamingService_servicethrows2_e1_1));
  ExceptionMetadata<::cpp2::FooEx>::gen(metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_servicethrows2_e2_2;
  module_PubSubStreamingService_servicethrows2_e2_2.id() = 2;
  module_PubSubStreamingService_servicethrows2_e2_2.name() = "e2";
  module_PubSubStreamingService_servicethrows2_e2_2.is_optional() = false;
  auto module_PubSubStreamingService_servicethrows2_e2_2_type = std::make_unique<Struct<::cpp2::FooEx2>>("module.FooEx2");
  module_PubSubStreamingService_servicethrows2_e2_2_type->writeAndGenType(*module_PubSubStreamingService_servicethrows2_e2_2.type(), metadata);
  func.exceptions()->push_back(std::move(module_PubSubStreamingService_servicethrows2_e2_2));
  ExceptionMetadata<::cpp2::FooEx2>::gen(metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_boththrows([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "boththrows";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_boththrows_foo_1;
  module_PubSubStreamingService_boththrows_foo_1.id() = 1;
  module_PubSubStreamingService_boththrows_foo_1.name() = "foo";
  module_PubSubStreamingService_boththrows_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_boththrows_foo_1_type = std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem");
  module_PubSubStreamingService_boththrows_foo_1_type->writeAndGenType(*module_PubSubStreamingService_boththrows_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_boththrows_foo_1));
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_boththrows_e_1;
  module_PubSubStreamingService_boththrows_e_1.id() = 1;
  module_PubSubStreamingService_boththrows_e_1.name() = "e";
  module_PubSubStreamingService_boththrows_e_1.is_optional() = false;
  auto module_PubSubStreamingService_boththrows_e_1_type = std::make_unique<Struct<::cpp2::FooEx>>("module.FooEx");
  module_PubSubStreamingService_boththrows_e_1_type->writeAndGenType(*module_PubSubStreamingService_boththrows_e_1.type(), metadata);
  func.exceptions()->push_back(std::move(module_PubSubStreamingService_boththrows_e_1));
  ExceptionMetadata<::cpp2::FooEx>::gen(metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_responseandstreamstreamthrows([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "responseandstreamstreamthrows";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_responseandstreamstreamthrows_foo_1;
  module_PubSubStreamingService_responseandstreamstreamthrows_foo_1.id() = 1;
  module_PubSubStreamingService_responseandstreamstreamthrows_foo_1.name() = "foo";
  module_PubSubStreamingService_responseandstreamstreamthrows_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_responseandstreamstreamthrows_foo_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_PubSubStreamingService_responseandstreamstreamthrows_foo_1_type->writeAndGenType(*module_PubSubStreamingService_responseandstreamstreamthrows_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_responseandstreamstreamthrows_foo_1));
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_responseandstreamservicethrows([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "responseandstreamservicethrows";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_responseandstreamservicethrows_foo_1;
  module_PubSubStreamingService_responseandstreamservicethrows_foo_1.id() = 1;
  module_PubSubStreamingService_responseandstreamservicethrows_foo_1.name() = "foo";
  module_PubSubStreamingService_responseandstreamservicethrows_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_responseandstreamservicethrows_foo_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_PubSubStreamingService_responseandstreamservicethrows_foo_1_type->writeAndGenType(*module_PubSubStreamingService_responseandstreamservicethrows_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_responseandstreamservicethrows_foo_1));
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_responseandstreamservicethrows_e_1;
  module_PubSubStreamingService_responseandstreamservicethrows_e_1.id() = 1;
  module_PubSubStreamingService_responseandstreamservicethrows_e_1.name() = "e";
  module_PubSubStreamingService_responseandstreamservicethrows_e_1.is_optional() = false;
  auto module_PubSubStreamingService_responseandstreamservicethrows_e_1_type = std::make_unique<Struct<::cpp2::FooEx>>("module.FooEx");
  module_PubSubStreamingService_responseandstreamservicethrows_e_1_type->writeAndGenType(*module_PubSubStreamingService_responseandstreamservicethrows_e_1.type(), metadata);
  func.exceptions()->push_back(std::move(module_PubSubStreamingService_responseandstreamservicethrows_e_1));
  ExceptionMetadata<::cpp2::FooEx>::gen(metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}
void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_responseandstreamboththrows([[maybe_unused]] ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  func.name() = "responseandstreamboththrows";
  auto func_ret_type = std::make_unique<Stream>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct<::cpp2::StreamItem>>("module.StreamItem"));
  func_ret_type->writeAndGenType(*func.return_type(), metadata);
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_responseandstreamboththrows_foo_1;
  module_PubSubStreamingService_responseandstreamboththrows_foo_1.id() = 1;
  module_PubSubStreamingService_responseandstreamboththrows_foo_1.name() = "foo";
  module_PubSubStreamingService_responseandstreamboththrows_foo_1.is_optional() = false;
  auto module_PubSubStreamingService_responseandstreamboththrows_foo_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_PubSubStreamingService_responseandstreamboththrows_foo_1_type->writeAndGenType(*module_PubSubStreamingService_responseandstreamboththrows_foo_1.type(), metadata);
  func.arguments()->push_back(std::move(module_PubSubStreamingService_responseandstreamboththrows_foo_1));
  ::apache::thrift::metadata::ThriftField module_PubSubStreamingService_responseandstreamboththrows_e_1;
  module_PubSubStreamingService_responseandstreamboththrows_e_1.id() = 1;
  module_PubSubStreamingService_responseandstreamboththrows_e_1.name() = "e";
  module_PubSubStreamingService_responseandstreamboththrows_e_1.is_optional() = false;
  auto module_PubSubStreamingService_responseandstreamboththrows_e_1_type = std::make_unique<Struct<::cpp2::FooEx>>("module.FooEx");
  module_PubSubStreamingService_responseandstreamboththrows_e_1_type->writeAndGenType(*module_PubSubStreamingService_responseandstreamboththrows_e_1.type(), metadata);
  func.exceptions()->push_back(std::move(module_PubSubStreamingService_responseandstreamboththrows_e_1));
  ExceptionMetadata<::cpp2::FooEx>::gen(metadata);
  func.is_oneway() = false;
  service.functions()->push_back(std::move(func));
}

void ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen(::apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  const ::apache::thrift::metadata::ThriftServiceContextRef* self = genRecurse(*response.metadata(), *response.services());
  DCHECK(self != nullptr);
  // TODO(praihan): Remove ThriftServiceContext from response. But in the meantime, we need to fill the field with the result of looking up in ThriftMetadata.
  ::apache::thrift::metadata::ThriftServiceContext context;
  context.module() = *self->module();
  context.service_info() = response.metadata()->services()->at(*self->service_name());
  response.context() = std::move(context);
}

const ThriftServiceContextRef* ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::genRecurse([[maybe_unused]] ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services) {
  ::apache::thrift::metadata::ThriftService module_PubSubStreamingService;
  module_PubSubStreamingService.name() = "module.PubSubStreamingService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_returnstream,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_streamthrows,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_servicethrows,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_servicethrows2,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_boththrows,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_responseandstreamstreamthrows,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_responseandstreamservicethrows,
    ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::PubSubStreamingService>>::gen_responseandstreamboththrows,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_PubSubStreamingService);
  }
  // We need to keep the index around because a reference or iterator could be invalidated.
  auto selfIndex = services.size();
  services.emplace_back();
  ThriftServiceContextRef& context = services[selfIndex];
  metadata.services()->emplace("module.PubSubStreamingService", std::move(module_PubSubStreamingService));
  context.service_name() = "module.PubSubStreamingService";
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name() = "module";
  context.module() = std::move(module);
  return &context;
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
