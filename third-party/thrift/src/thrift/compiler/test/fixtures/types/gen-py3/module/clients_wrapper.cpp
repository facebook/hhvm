/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace apache {
namespace thrift {
namespace fixtures {
namespace types {


folly::Future<std::unordered_map<int32_t,std::string>>
SomeServiceClientWrapper::bounce_map(
    apache::thrift::RpcOptions& rpcOptions,
    std::unordered_map<int32_t,std::string> arg_m) {
  auto* client = static_cast<::apache::thrift::fixtures::types::SomeServiceAsyncClient*>(async_client_.get());
  folly::Promise<std::unordered_map<int32_t,std::string>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::unordered_map<int32_t,std::string>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_bounce_map, channel_);
  client->bounce_map(
    rpcOptions,
    std::move(callback),
    arg_m
  );
  return _future;
}

folly::Future<std::map<std::string,int64_t>>
SomeServiceClientWrapper::binary_keyed_map(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<int64_t> arg_r) {
  auto* client = static_cast<::apache::thrift::fixtures::types::SomeServiceAsyncClient*>(async_client_.get());
  folly::Promise<std::map<std::string,int64_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::map<std::string,int64_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_binary_keyed_map, channel_);
  client->binary_keyed_map(
    rpcOptions,
    std::move(callback),
    arg_r
  );
  return _future;
}

} // namespace apache
} // namespace thrift
} // namespace fixtures
} // namespace types
