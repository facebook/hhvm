// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"dom_document_create_element", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-element.php )\n *\n *\n * @obj        mixed\n * @name       string\n * @value      string\n *\n * @return     mixed\n */", 
"dom_document_create_document_fragment", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-document-fragment.php\n * )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_document_create_text_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-text-node.php )\n *\n *\n * @obj        mixed\n * @data       string\n *\n * @return     mixed\n */", 
"dom_document_create_comment", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-comment.php )\n *\n *\n * @obj        mixed\n * @data       string\n *\n * @return     mixed\n */", 
"dom_document_create_cdatasection", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-cdatasection.php )\n *\n *\n * @obj        mixed\n * @data       string\n *\n * @return     mixed\n */", 
"dom_document_create_processing_instruction", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "target", T(String), NULL, NULL, S(0), "data", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-processing-instruction.php\n * )\n *\n *\n * @obj        mixed\n * @target     string\n * @data       string\n *\n * @return     mixed\n */", 
"dom_document_create_attribute", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_document_create_entity_reference", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-entity-reference.php\n * )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_document_get_elements_by_tag_name", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-get-elements-by-tag-name.php\n * )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_document_import_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "importednode", T(Object), NULL, NULL, S(0), "deep", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-import-node.php )\n *\n *\n * @obj        mixed\n * @importednode\n *             object\n * @deep       bool\n *\n * @return     mixed\n */", 
"dom_document_create_element_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "qualifiedname", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-element-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @qualifiedname\n *             string\n * @value      string\n *\n * @return     mixed\n */", 
"dom_document_create_attribute_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "qualifiedname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-create-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @qualifiedname\n *             string\n *\n * @return     mixed\n */", 
"dom_document_get_elements_by_tag_name_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-get-elements-by-tag-name-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_document_get_element_by_id", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "elementid", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-get-element-by-id.php )\n *\n *\n * @obj        mixed\n * @elementid  string\n *\n * @return     mixed\n */", 
"dom_document_normalize_document", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-normalize-document.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_document_save", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "file", T(String), NULL, NULL, S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-document-save.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @obj        mixed   The path to the saved XML document.\n * @file       string  Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n * @options    int\n *\n * @return     mixed   Returns the number of bytes written or FALSE if an\n *                     error occurred.\n */", 
"dom_document_savexml", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "node", T(Object), "N;", "null", S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-savexml.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @obj        mixed   Use this parameter to output only a specific node\n *                     without XML declaration rather than the entire\n *                     document.\n * @node       object  Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n * @options    int\n *\n * @return     mixed   Returns the XML, or FALSE if an error occurred.\n */", 
"dom_document_validate", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-validate.php )\n *\n * Validates the document based on its DTD.\n *\n * You can also use the validateOnParse property of DOMDocument to make a\n * DTD validation.\n *\n * @obj        mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If the\n *                     document have no DTD attached, this method will\n *                     return FALSE.\n */", 
"dom_document_xinclude", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-xinclude.php )\n *\n * This method substitutes \273 XIncludes in a DOMDocument object.\n *\n * Due to libxml2 automatically resolving entities, this method will\n * produce unexpected results if the included XML file have an attached\n * DTD.\n *\n * @obj        mixed   libxml parameters. Available since PHP 5.1.0 and\n *                     Libxml 2.6.7.\n * @options    int\n *\n * @return     mixed   Returns the number of XIncludes in the document, -1\n *                     if some processing failed, or FALSE if there were no\n *                     substitutions.\n */", 
"dom_document_save_html", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-save-html.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_document_save_html_file", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "file", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-save-html-file.php )\n *\n *\n * @obj        mixed\n * @file       string\n *\n * @return     mixed\n */", 
"dom_document_schema_validate_file", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-schema-validate-file.php\n * )\n *\n *\n * @obj        mixed\n * @filename   string\n *\n * @return     mixed\n */", 
"dom_document_schema_validate_xml", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "source", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-schema-validate-xml.php )\n *\n *\n * @obj        mixed\n * @source     string\n *\n * @return     mixed\n */", 
"dom_document_relaxng_validate_file", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-relaxng-validate-file.php\n * )\n *\n *\n * @obj        mixed\n * @filename   string\n *\n * @return     mixed\n */", 
"dom_document_relaxng_validate_xml", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "source", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-document-relaxng-validate-xml.php\n * )\n *\n *\n * @obj        mixed\n * @source     string\n *\n * @return     mixed\n */", 
"dom_node_insert_before", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "newnode", T(Object), NULL, NULL, S(0), "refnode", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-insert-before.php )\n *\n *\n * @obj        mixed\n * @newnode    object\n * @refnode    object\n *\n * @return     mixed\n */", 
"dom_node_replace_child", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "newchildobj", T(Object), NULL, NULL, S(0), "oldchildobj", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-replace-child.php )\n *\n *\n * @obj        mixed\n * @newchildobj\n *             object\n * @oldchildobj\n *             object\n *\n * @return     mixed\n */", 
"dom_node_remove_child", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "node", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-remove-child.php )\n *\n *\n * @obj        mixed\n * @node       object\n *\n * @return     mixed\n */", 
"dom_node_append_child", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "newnode", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-append-child.php )\n *\n *\n * @obj        mixed\n * @newnode    object\n *\n * @return     mixed\n */", 
"dom_node_has_child_nodes", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-has-child-nodes.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_node_clone_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "deep", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-node-clone-node.php\n * )\n *\n *\n * @obj        mixed\n * @deep       bool\n *\n * @return     mixed\n */", 
"dom_node_normalize", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-node-normalize.php\n * )\n *\n * Normalizes the node.\n *\n * @obj        mixed\n *\n * @return     mixed   No value is returned.\n */", 
"dom_node_is_supported", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "feature", T(String), NULL, NULL, S(0), "version", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-is-supported.php )\n *\n *\n * @obj        mixed\n * @feature    string\n * @version    string\n *\n * @return     mixed\n */", 
"dom_node_has_attributes", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-has-attributes.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_node_is_same_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "node", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-is-same-node.php )\n *\n *\n * @obj        mixed\n * @node       object\n *\n * @return     mixed\n */", 
"dom_node_lookup_prefix", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "prefix", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-lookup-prefix.php )\n *\n *\n * @obj        mixed\n * @prefix     string\n *\n * @return     mixed\n */", 
"dom_node_is_default_namespace", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-is-default-namespace.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n *\n * @return     mixed\n */", 
"dom_node_lookup_namespace_uri", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-node-lookup-namespace-uri.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n *\n * @return     mixed\n */", 
"dom_nodelist_item", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "index", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-nodelist-item.php )\n *\n * Retrieves a node specified by index within the DOMNodeList object. Tip\n *\n * If you need to know the number of nodes in the collection, use the\n * length property of the DOMNodeList object.\n *\n * @obj        mixed   Index of the node into the collection.\n * @index      int\n *\n * @return     mixed   The node at the indexth position in the DOMNodeList,\n *                     or NULL if that is not a valid index.\n */", 
"dom_namednodemap_get_named_item", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-namednodemap-get-named-item.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_namednodemap_item", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "index", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-namednodemap-item.php )\n *\n * Retrieves a node specified by index within the DOMNamedNodeMap object.\n *\n * @obj        mixed   Index into this map.\n * @index      int\n *\n * @return     mixed   The node at the indexth position in the map, or NULL\n *                     if that is not a valid index (greater than or equal\n *                     to the number of nodes in this map).\n */", 
"dom_namednodemap_get_named_item_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-namednodemap-get-named-item-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_characterdata_substring_data", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "offset", T(Int64), NULL, NULL, S(0), "count", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-substring-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @count      int\n *\n * @return     mixed\n */", 
"dom_characterdata_append_data", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "arg", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-append-data.php )\n *\n *\n * @obj        mixed\n * @arg        string\n *\n * @return     mixed\n */", 
"dom_characterdata_insert_data", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "offset", T(Int64), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-insert-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @data       string\n *\n * @return     mixed\n */", 
"dom_characterdata_delete_data", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "offset", T(Int64), NULL, NULL, S(0), "count", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-delete-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @count      int\n *\n * @return     mixed\n */", 
"dom_characterdata_replace_data", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "offset", T(Int64), NULL, NULL, S(0), "count", T(Int64), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-characterdata-replace-data.php )\n *\n *\n * @obj        mixed\n * @offset     int\n * @count      int\n * @data       string\n *\n * @return     mixed\n */", 
"dom_attr_is_id", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-attr-is-id.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_element_get_attribute", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_element_set_attribute", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n * @value      string\n *\n * @return     mixed\n */", 
"dom_element_remove_attribute", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-remove-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_element_get_attribute_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute-node.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_element_set_attribute_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "newattr", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute-node.php )\n *\n *\n * @obj        mixed\n * @newattr    object\n *\n * @return     mixed\n */", 
"dom_element_remove_attribute_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "oldattr", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-remove-attribute-node.php\n * )\n *\n *\n * @obj        mixed\n * @oldattr    object\n *\n * @return     mixed\n */", 
"dom_element_get_elements_by_tag_name", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-elements-by-tag-name.php\n * )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_element_get_attribute_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_element_set_attribute_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @name       string\n * @value      string\n *\n * @return     mixed\n */", 
"dom_element_remove_attribute_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-remove-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_element_get_attribute_node_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-attribute-node-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_element_set_attribute_node_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "newattr", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-attribute-node-ns.php\n * )\n *\n *\n * @obj        mixed\n * @newattr    object\n *\n * @return     mixed\n */", 
"dom_element_get_elements_by_tag_name_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-get-elements-by-tag-name-ns.php\n * )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_element_has_attribute", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-has-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n *\n * @return     mixed\n */", 
"dom_element_has_attribute_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-has-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n *\n * @return     mixed\n */", 
"dom_element_set_id_attribute", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), "isid", T(Boolean), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-id-attribute.php )\n *\n *\n * @obj        mixed\n * @name       string\n * @isid       bool\n *\n * @return     mixed\n */", 
"dom_element_set_id_attribute_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), "isid", T(Boolean), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-id-attribute-ns.php )\n *\n *\n * @obj        mixed\n * @namespaceuri\n *             string\n * @localname  string\n * @isid       bool\n *\n * @return     mixed\n */", 
"dom_element_set_id_attribute_node", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "idattr", T(Object), NULL, NULL, S(0), "isid", T(Boolean), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-element-set-id-attribute-node.php\n * )\n *\n *\n * @obj        mixed\n * @idattr     object\n * @isid       bool\n *\n * @return     mixed\n */", 
"dom_text_split_text", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "offset", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-text-split-text.php\n * )\n *\n *\n * @obj        mixed\n * @offset     int\n *\n * @return     mixed\n */", 
"dom_text_is_whitespace_in_element_content", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-text-is-whitespace-in-element-content.php\n * )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */", 
"dom_xpath_register_ns", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "prefix", T(String), NULL, NULL, S(0), "uri", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-xpath-register-ns.php )\n *\n *\n * @obj        mixed\n * @prefix     string\n * @uri        string\n *\n * @return     mixed\n */", 
"dom_xpath_query", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "expr", T(String), NULL, NULL, S(0), "context", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-xpath-query.php )\n *\n * Executes the given XPath expression.\n *\n * @obj        mixed   The XPath expression to execute.\n * @expr       string  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n * @context    object\n *\n * @return     mixed   Returns a DOMNodeList containing all nodes matching\n *                     the given XPath expression. Any expression which do\n *                     not return nodes will return an empty DOMNodeList.\n */", 
"dom_xpath_evaluate", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "expr", T(String), NULL, NULL, S(0), "context", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dom-xpath-evaluate.php\n * )\n *\n * Executes the given XPath expression and returns a typed result if\n * possible.\n *\n * @obj        mixed   The XPath expression to execute.\n * @expr       string  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n * @context    object\n *\n * @return     mixed   Returns a typed result if possible or a DOMNodeList\n *                     containing all nodes matching the given XPath\n *                     expression.\n */", 
"dom_xpath_register_php_functions", T(Variant), S(0), "obj", T(Variant), NULL, NULL, S(0), "funcs", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.dom-xpath-register-php-functions.php )\n *\n *\n * @obj        mixed\n * @funcs      mixed\n *\n * @return     mixed\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"DOMNode", "", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.--construct.php )\n *\n *\n */", S(16384),"appendChild", T(Variant), S(0), "newnode", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.appendchild.php )\n *\n * This functions appends a child to an existing list of children or\n * creates a new list of children. The child can be created with e.g.\n * DOMDocument::createElement(), DOMDocument::createTextNode() etc. or\n * simply by using any other node.\n *\n * @newnode    object  The appended child.\n *\n * @return     mixed   The node added.\n */", S(16384),"cloneNode", T(Variant), S(0), "deep", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.clonenode.php )\n *\n * Creates a copy of the node.\n *\n * @deep       bool    Indicates whether to copy all descendant nodes. This\n *                     parameter is defaulted to FALSE.\n *\n * @return     mixed   The cloned node.\n */", S(16384),"getLineNo", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.getlineno.php )\n *\n * Gets line number for where the node is defined.\n *\n * @return     int     Always returns the line number where the node was\n *                     defined in.\n */", S(16384),"hasAttributes", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.hasattributes.php )\n *\n * This method checks if the node has attributes. The tested node have to\n * be an XML_ELEMENT_NODE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"hasChildNodes", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.haschildnodes.php )\n *\n * This function checks if the node has children.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"insertBefore", T(Variant), S(0), "newnode", T(Object), NULL, NULL, S(0), "refnode", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.insertbefore.php )\n *\n * This function inserts a new node right before the reference node. If you\n * plan to do further modifications on the appended child you must use the\n * returned node.\n *\n * @newnode    object  The new node.\n * @refnode    object  The reference node. If not supplied, newnode is\n *                     appended to the children.\n *\n * @return     mixed   The inserted node.\n */", S(16384),"isDefaultNamespace", T(Boolean), S(0), "namespaceuri", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.isdefaultnamespace.php )\n *\n * Tells whether namespaceURI is the default namespace.\n *\n * @namespaceuri\n *             string  The namespace URI to look for.\n *\n * @return     bool    Return TRUE if namespaceURI is the default\n *                     namespace, FALSE otherwise.\n */", S(16384),"isSameNode", T(Boolean), S(0), "node", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.issamenode.php )\n *\n * This function indicates if two nodes are the same node. The comparison\n * is not based on content\n *\n * @node       object  The compared node.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"isSupported", T(Boolean), S(0), "feature", T(String), NULL, NULL, S(0), "version", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.issupported.php )\n *\n * Checks if the asked feature is supported for the specified version.\n *\n * @feature    string  The feature to test. See the example of\n *                     DOMImplementation::hasFeature() for a list of\n *                     features.\n * @version    string  The version number of the feature to test.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"lookupNamespaceUri", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.lookupnamespaceuri.php )\n *\n * Gets the namespace URI of the node based on the prefix.\n *\n * @namespaceuri\n *             string  The prefix of the namespace.\n *\n * @return     mixed   The namespace URI of the node.\n */", S(16384),"lookupPrefix", T(Variant), S(0), "prefix", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.lookupprefix.php )\n *\n * Gets the namespace prefix of the node based on the namespace URI.\n *\n * @prefix     string  The namespace URI.\n *\n * @return     mixed   The prefix of the namespace.\n */", S(16384),"normalize", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.normalize.php )\n *\n * Normalizes the node.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"removeChild", T(Variant), S(0), "node", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.removechild.php )\n *\n * This functions removes a child from a list of children.\n *\n * @node       object  The removed child.\n *\n * @return     mixed   If the child could be removed the functions returns\n *                     the old child.\n */", S(16384),"replaceChild", T(Variant), S(0), "newchildobj", T(Object), NULL, NULL, S(0), "oldchildobj", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.replacechild.php )\n *\n * This function replaces the child oldnode with the passed new node. If\n * the new node is already a child it will not be added a second time. If\n * the replacement succeeds the old node is returned.\n *\n * @newchildobj\n *             object  The new node. It must be a member of the target\n *                     document, i.e. created by one of the\n *                     DOMDocument->createXXX() methods or imported in the\n *                     document by DOMDocument::importNode.\n * @oldchildobj\n *             object  The old node.\n *\n * @return     mixed   The old node or FALSE if an error occur.\n */", S(16384),"c14n", T(Variant), S(0), "exclusive", T(Boolean), "b:0;", "false", S(0), "with_comments", T(Boolean), "b:0;", "false", S(0), "xpath", T(Variant), "N;", "null", S(0), "ns_prefixes", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.c14n.php )\n *\n *\n * @exclusive  bool\n * @with_comments\n *             bool\n * @xpath      mixed\n * @ns_prefixes\n *             mixed\n *\n * @return     mixed\n */", S(16384),"c14nfile", T(Variant), S(0), "uri", T(String), NULL, NULL, S(0), "exclusive", T(Boolean), "b:0;", "false", S(0), "with_comments", T(Boolean), "b:0;", "false", S(0), "xpath", T(Variant), "N;", "null", S(0), "ns_prefixes", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.c14nfile.php )\n *\n *\n * @uri        string\n * @exclusive  bool\n * @with_comments\n *             bool\n * @xpath      mixed\n * @ns_prefixes\n *             mixed\n *\n * @return     mixed\n */", S(16384),"getNodePath", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.getnodepath.php )\n *\n *\n * @return     mixed\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnode.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domnode.php )\n *\n *\n */", "DOMAttr", "domnode", NULL, "__construct", T(Void), S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domattr.--construct.php )\n *\n *\n * @name       string\n * @value      string\n */", S(16384),"isId", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domattr.isid.php )\n *\n * This function checks if the attribute is a defined ID.\n *\n * According to the DOM standard this requires a DTD which defines the\n * attribute ID to be of type ID. You need to validate your document with\n * DOMDocument::validate or DOMDocument::validateOnParse before using this\n * function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domattr.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domattr.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domattr.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domattr.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domattr.php )\n *\n * DOMAttr represents an attribute in the DOMElement object.\n *\n */", "DOMCharacterData", "domnode", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.--construct.php\n * )\n *\n *\n */", S(16384),"appendData", T(Boolean), S(0), "arg", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.appenddata.php\n * )\n *\n * Append the string data to the end of the character data of the node.\n *\n * @arg        string  The string to append.\n *\n * @return     bool    No value is returned.\n */", S(16384),"deleteData", T(Boolean), S(0), "offset", T(Int64), NULL, NULL, S(0), "count", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.deletedata.php\n * )\n *\n * Deletes count characters starting from position offset.\n *\n * @offset     int     The offset from which to start removing.\n * @count      int     The number of characters to delete. If the sum of\n *                     offset and count exceeds the length, then all\n *                     characters to the end of the data are deleted.\n *\n * @return     bool    No value is returned.\n */", S(16384),"insertData", T(Boolean), S(0), "offset", T(Int64), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.insertdata.php\n * )\n *\n * Inserts string data at position offset.\n *\n * @offset     int     The character offset at which to insert.\n * @data       string  The string to insert.\n *\n * @return     bool    No value is returned.\n */", S(16384),"replaceData", T(Boolean), S(0), "offset", T(Int64), NULL, NULL, S(0), "count", T(Int64), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.replacedata.php\n * )\n *\n * Replace count characters starting from position offset with data.\n *\n * @offset     int     The offset from which to start replacing.\n * @count      int     The number of characters to replace. If the sum of\n *                     offset and count exceeds the length, then all\n *                     characters to the end of the data are replaced.\n * @data       string  The string with which the range must be replaced.\n *\n * @return     bool    No value is returned.\n */", S(16384),"substringData", T(String), S(0), "offset", T(Int64), NULL, NULL, S(0), "count", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domcharacterdata.substringdata.php )\n *\n * Returns the specified substring.\n *\n * @offset     int     Start offset of substring to extract.\n * @count      int     The number of characters to extract.\n *\n * @return     string  The specified substring. If the sum of offset and\n *                     count exceeds the length, then all 16-bit units to\n *                     the end of the data are returned.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcharacterdata.--destruct.php\n * )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domcharacterdata.php )\n *\n * Represents nodes with character data. No nodes directly correspond to\n * this class, but other nodes do inherit from it.\n *\n */", "DOMComment", "domcharacterdata", NULL, "__construct", T(Void), S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcomment.--construct.php )\n *\n *\n * @value      string\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcomment.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domcomment.php )\n *\n * Represents comment nodes, characters delimited by <!-- and -->.\n *\n */", "DOMText", "domcharacterdata", NULL, "__construct", T(Void), S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domtext.--construct.php )\n *\n *\n * @value      string\n */", S(16384),"isWhitespaceInElementContent", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domtext.iswhitespaceinelementcontent.php )\n *\n * Indicates whether this text node contains whitespace. The text node is\n * determined to contain whitespace in element content during the load of\n * the document.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"splitText", T(Variant), S(0), "offset", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domtext.splittext.php )\n *\n * Breaks this node into two nodes at the specified offset, keeping both in\n * the tree as siblings.\n *\n * After being split, this node will contain all the content up to the\n * offset. If the original node had a parent node, the new node is inserted\n * as the next sibling of the original node. When the offset is equal to\n * the length of this node, the new node has no data.\n *\n * @offset     int     The offset at which to split, starting from 0.\n *\n * @return     mixed   The new node of the same type, which contains all\n *                     the content at and after the offset.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domtext.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domtext.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domtext.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domtext.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domtext.php )\n *\n * The DOMText class inherits from DOMCharacterData and represents the\n * textual content of a DOMElement or DOMAttr.\n *\n */", "DOMCDATASection", "domtext", NULL, "__construct", T(Void), S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcdatasection.--construct.php\n * )\n *\n *\n * @value      string\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domcdatasection.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domcdatasection.php )\n *\n *\n */", "DOMDocument", "domnode", NULL, "__construct", T(Void), S(0), "version", T(String), "N;", "null", S(0), "encoding", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.--construct.php )\n *\n *\n * @version    string\n * @encoding   string\n */", S(16384),"createAttribute", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createattribute.php\n * )\n *\n * This function creates a new instance of class DOMAttr. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @name       string  The name of the attribute.\n *\n * @return     mixed   The new DOMAttr or FALSE if an error occured.\n */", S(16384),"createAttributens", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "qualifiedname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createattributens.php )\n *\n * This function creates a new instance of class DOMAttr. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @namespaceuri\n *             string  The URI of the namespace.\n * @qualifiedname\n *             string  The tag name and prefix of the attribute, as\n *                     prefix:tagname.\n *\n * @return     mixed   The new DOMAttr or FALSE if an error occured.\n */", S(16384),"createCDATASection", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createcdatasection.php )\n *\n * This function creates a new instance of class DOMCDATASection. This node\n * will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @data       string  The content of the cdata.\n *\n * @return     mixed   The new DOMCDATASection or FALSE if an error\n *                     occured.\n */", S(16384),"createComment", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createcomment.php )\n *\n * This function creates a new instance of class DOMComment. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @data       string  The content of the comment.\n *\n * @return     mixed   The new DOMComment or FALSE if an error occured.\n */", S(16384),"createDocumentFragment", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createdocumentfragment.php )\n *\n * This function creates a new instance of class DOMDocumentFragment. This\n * node will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @return     mixed   The new DOMDocumentFragment or FALSE if an error\n *                     occured.\n */", S(16384),"createElement", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createelement.php )\n *\n * This function creates a new instance of class DOMElement. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @name       string  The tag name of the element.\n * @value      string  The value of the element. By default, an empty\n *                     element will be created. The value can also be set\n *                     later with DOMElement->nodeValue.\n *\n * @return     mixed   Returns a new instance of class DOMElement or FALSE\n *                     if an error occured.\n */", S(16384),"createElementNS", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "qualifiedname", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createelementns.php\n * )\n *\n * This function creates a new element node with an associated namespace.\n * This node will not show up in the document unless it is inserted with\n * (e.g.) DOMNode->appendChild().\n *\n * @namespaceuri\n *             string  The URI of the namespace.\n * @qualifiedname\n *             string  The qualified name of the element, as\n *                     prefix:tagname.\n * @value      string  The value of the element. By default, an empty\n *                     element will be created. You can also set the value\n *                     later with DOMElement->nodeValue.\n *\n * @return     mixed   The new DOMElement or FALSE if an error occured.\n */", S(16384),"createEntityReference", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createentityreference.php )\n *\n * This function creates a new instance of class DOMEntityReference. This\n * node will not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @name       string  The content of the entity reference, e.g. the entity\n *                     reference minus the leading & and the trailing ;\n *                     characters.\n *\n * @return     mixed   The new DOMEntityReference or FALSE if an error\n *                     occured.\n */", S(16384),"createProcessingInstruction", T(Variant), S(0), "target", T(String), NULL, NULL, S(0), "data", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.createprocessinginstruction.php )\n *\n * This function creates a new instance of class DOMProcessingInstruction.\n * This node will not show up in the document unless it is inserted with\n * (e.g.) DOMNode->appendChild().\n *\n * @target     string  The target of the processing instruction.\n * @data       string  The content of the processing instruction.\n *\n * @return     mixed   The new DOMProcessingInstruction or FALSE if an\n *                     error occured.\n */", S(16384),"createTextNode", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.createtextnode.php )\n *\n * This function creates a new instance of class DOMText. This node will\n * not show up in the document unless it is inserted with (e.g.)\n * DOMNode->appendChild().\n *\n * @data       string  The content of the text.\n *\n * @return     mixed   The new DOMText or FALSE if an error occured.\n */", S(16384),"getElementById", T(Variant), S(0), "elementid", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.getelementbyid.php )\n *\n * This function is similar to DOMDocument::getElementsByTagName but\n * searches for an element with a given id.\n *\n * For this function to work, you will need either to set some ID\n * attributes with DOMElement::setIdAttribute or a DTD which defines an\n * attribute to be of type ID. In the later case, you will need to validate\n * your document with DOMDocument::validate or DOMDocument->validateOnParse\n * before using this function.\n *\n * @elementid  string  The unique id value for an element.\n *\n * @return     mixed   Returns the DOMElement or NULL if the element is not\n *                     found.\n */", S(16384),"getElementsByTagName", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.getelementsbytagname.php )\n *\n * This function returns a new instance of class DOMNodeList containing the\n * elements with a given tag name.\n *\n * @name       string  The name of the tag to match on. The special value *\n *                     matches all tags.\n *\n * @return     mixed   A new DOMNodeList object containing all the matched\n *                     elements.\n */", S(16384),"getElementsByTagNameNS", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.getelementsbytagnamens.php )\n *\n * Returns a DOMNodeList of all elements with a given local name and a\n * namespace URI.\n *\n * @namespaceuri\n *             string  The namespace URI of the elements to match on. The\n *                     special value * matches all namespaces.\n * @localname  string  The local name of the elements to match on. The\n *                     special value * matches all local names.\n *\n * @return     mixed   A new DOMNodeList object containing all the matched\n *                     elements.\n */", S(16384),"importNode", T(Variant), S(0), "importednode", T(Object), NULL, NULL, S(0), "deep", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.importnode.php )\n *\n * This function returns a copy of the node to import and associates it\n * with the current document.\n *\n * @importednode\n *             object  The node to import.\n * @deep       bool    If set to TRUE, this method will recursively import\n *                     the subtree under the importedNode.\n *\n *                     To copy the nodes attributes deep needs to be set to\n *                     TRUE\n *\n * @return     mixed   The copied node or FALSE, if it cannot be copied.\n */", S(16384),"load", T(Variant), S(0), "filename", T(String), NULL, NULL, S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.load.php )\n *\n * Loads an XML document from a file. Warning Unix style paths with forward\n * slashes can cause significant performance degradation on Windows\n * systems; be sure to call realpath() in such a case.\n *\n * @filename   string  The path to the XML document.\n * @options    int     Bitwise OR of the libxml option constants.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */", S(16384),"loadHTML", T(Variant), S(0), "source", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.loadhtml.php )\n *\n * The function parses the HTML contained in the string source. Unlike\n * loading XML, HTML does not have to be well-formed to load. This function\n * may also be called statically to load and create a DOMDocument object.\n * The static invocation may be used when no DOMDocument properties need to\n * be set prior to loading.\n *\n * @source     string  The HTML string.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */", S(16384),"loadHTMLFile", T(Variant), S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.loadhtmlfile.php )\n *\n * The function parses the HTML document in the file named filename. Unlike\n * loading XML, HTML does not have to be well-formed to load.\n *\n * Though not recommended, this function may also be called statically to\n * load and create a DOMDocument object. The static invocation may be used\n * when no DOMDocument properties need to be set prior to loading. However,\n * doing so will result an in E_STRICT error being generated.\n *\n * @filename   string  The path to the HTML file.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */", S(16384),"loadXML", T(Variant), S(0), "source", T(String), NULL, NULL, S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.loadxml.php )\n *\n * Loads an XML document from a string.\n *\n * This method may also be called statically to load and create a\n * DOMDocument object. The static invocation may be used when no\n * DOMDocument properties need to be set prior to loading.\n *\n * @source     string  The string containing the XML.\n * @options    int     Bitwise OR of the libxml option constants.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. If\n *                     called statically, returns a DOMDocument and issues\n *                     E_STRICT warning.\n */", S(16384),"normalizeDocument", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.normalizedocument.php )\n *\n * This method acts as if you saved and then loaded the document, putting\n * the document in a \"normal\" form.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"registerNodeClass", T(Boolean), S(0), "baseclass", T(String), NULL, NULL, S(0), "extendedclass", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.registernodeclass.php )\n *\n * This method allows you to register your own extended DOM class to be\n * used afterward by the PHP DOM extension.\n *\n * This method is not part of the DOM standard.\n *\n * @baseclass  string  The DOM class that you want to extend. You can find\n *                     a list of these classes in the chapter introduction.\n * @extendedclass\n *             string  Your extended class name. If NULL is provided, any\n *                     previously registered class extending baseclass will\n *                     be removed.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"relaxNGValidate", T(Boolean), S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.relaxngvalidate.php\n * )\n *\n * Performs \273 relaxNG validation on the document based on the given RNG\n * schema.\n *\n * @filename   string  The RNG file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"relaxNGValidateSource", T(Boolean), S(0), "source", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.relaxngvalidatesource.php )\n *\n * Performs \273 relaxNG validation on the document based on the given RNG\n * source.\n *\n * @source     string  A string containing the RNG schema.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"save", T(Variant), S(0), "file", T(String), NULL, NULL, S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.save.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @file       string  The path to the saved XML document.\n * @options    int     Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n *\n * @return     mixed   Returns the number of bytes written or FALSE if an\n *                     error occurred.\n */", S(16384),"saveHTML", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.savehtml.php )\n *\n * Creates an HTML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @return     mixed   Returns the HTML, or FALSE if an error occurred.\n */", S(16384),"saveHTMLFile", T(Variant), S(0), "file", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.savehtmlfile.php )\n *\n * Creates an HTML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @file       string  The path to the saved HTML document.\n *\n * @return     mixed   Returns the number of bytes written or FALSE if an\n *                     error occurred.\n */", S(16384),"saveXML", T(Variant), S(0), "node", T(Object), "N;", "null", S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.savexml.php )\n *\n * Creates an XML document from the DOM representation. This function is\n * usually called after building a new dom document from scratch as in the\n * example below.\n *\n * @node       object  Use this parameter to output only a specific node\n *                     without XML declaration rather than the entire\n *                     document.\n * @options    int     Additional Options. Currently only LIBXML_NOEMPTYTAG\n *                     is supported.\n *\n * @return     mixed   Returns the XML, or FALSE if an error occurred.\n */", S(16384),"schemaValidate", T(Boolean), S(0), "filename", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.schemavalidate.php )\n *\n * Validates a document based on the given schema file.\n *\n * @filename   string  The path to the schema.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"schemaValidateSource", T(Boolean), S(0), "source", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocument.schemavalidatesource.php )\n *\n * Validates a document based on a schema defined in the given string.\n *\n * @source     string  A string containing the schema.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"validate", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.validate.php )\n *\n * Validates the document based on its DTD.\n *\n * You can also use the validateOnParse property of DOMDocument to make a\n * DTD validation.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. If the\n *                     document have no DTD attached, this method will\n *                     return FALSE.\n */", S(16384),"xinclude", T(Variant), S(0), "options", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.xinclude.php )\n *\n * This method substitutes \273 XIncludes in a DOMDocument object.\n *\n * Due to libxml2 automatically resolving entities, this method will\n * produce unexpected results if the included XML file have an attached\n * DTD.\n *\n * @options    int     libxml parameters. Available since PHP 5.1.0 and\n *                     Libxml 2.6.7.\n *\n * @return     mixed   Returns the number of XIncludes in the document, -1\n *                     if some processing failed, or FALSE if there were no\n *                     substitutions.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocument.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(134234112), "/**\n * ( excerpt from http://php.net/manual/en/class.domdocument.php )\n *\n * Represents an entire HTML or XML document; serves as the root of the\n * document tree.\n *\n */", "DOMDocumentFragment", "domnode", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocumentfragment.--construct.php )\n *\n *\n */", S(16384),"appendXML", T(Boolean), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocumentfragment.appendxml.php )\n *\n * Appends raw XML data to a DOMDocumentFragment.\n *\n * This method is not part of the DOM standard. It was created as a simpler\n * approach for appending an XML DocumentFragment in a DOMDocument.\n *\n * If you want to stick to the standards, you will have to create a\n * temporary DOMDocument with a dummy root and then loop through the child\n * nodes of the root of your XML data to append them.\n *\n * @data       string  XML to append.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domdocumentfragment.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domdocumentfragment.php )\n *\n *\n */", "DOMDocumentType", "domnode", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.--construct.php\n * )\n *\n *\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domdocumenttype.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domdocumenttype.php )\n *\n * Each DOMDocument has a doctype attribute whose value is either NULL or a\n * DOMDocumentType object.\n *\n */", "DOMElement", "domnode", NULL, "__construct", T(Void), S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), "namespaceuri", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.--construct.php )\n *\n *\n * @name       string\n * @value      string\n * @namespaceuri\n *             string\n */", S(16384),"getAttribute", T(String), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.getattribute.php )\n *\n * Gets the value of the attribute with name name for the current node.\n *\n * @name       string  The name of the attribute.\n *\n * @return     string  The value of the attribute, or an empty string if no\n *                     attribute with the given name is found.\n */", S(16384),"getAttributeNode", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.getattributenode.php\n * )\n *\n * Returns the attribute node with name name for the current element.\n *\n * @name       string  The name of the attribute.\n *\n * @return     mixed   The attribute node.\n */", S(16384),"getAttributeNodeNS", T(Object), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.getattributenodens.php )\n *\n * Returns the attribute node in namespace namespaceURI with local name\n * localName for the current node.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     object  The attribute node.\n */", S(16384),"getAttributeNS", T(String), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.getattributens.php )\n *\n * Gets the value of the attribute in namespace namespaceURI with local\n * name localName for the current node.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     string  The value of the attribute, or an empty string if no\n *                     attribute with the given localName and namespaceURI\n *                     is found.\n */", S(16384),"getElementsByTagName", T(Object), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.getelementsbytagname.php )\n *\n * This function returns a new instance of the class DOMNodeList of all\n * descendant elements with a given tag name, in the order in which they\n * are encountered in a preorder traversal of this element tree.\n *\n * @name       string  The tag name. Use * to return all elements within\n *                     the element tree.\n *\n * @return     object  This function returns a new instance of the class\n *                     DOMNodeList of all matched elements.\n */", S(16384),"getElementsByTagNameNS", T(Object), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.getelementsbytagnamens.php )\n *\n * This function fetch all the descendant elements with a given localName\n * and namespaceURI.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name. Use * to return all elements within\n *                     the element tree.\n *\n * @return     object  This function returns a new instance of the class\n *                     DOMNodeList of all matched elements in the order in\n *                     which they are encountered in a preorder traversal\n *                     of this element tree.\n */", S(16384),"hasAttribute", T(Boolean), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.hasattribute.php )\n *\n * Indicates whether attribute named name exists as a member of the\n * element.\n *\n * @name       string  The attribute name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"hasAttributeNS", T(Boolean), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.hasattributens.php )\n *\n * Indicates whether attribute in namespace namespaceURI named localName\n * exists as a member of the element.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"removeAttribute", T(Boolean), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.removeattribute.php )\n *\n * Removes attribute named name from the element.\n *\n * @name       string  The name of the attribute.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"removeAttributeNode", T(Variant), S(0), "oldattr", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.removeattributenode.php )\n *\n * Removes attribute oldnode from the element.\n *\n * @oldattr    object  The attribute node.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", S(16384),"removeAttributeNS", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.removeattributens.php\n * )\n *\n * Removes attribute is namespace namespaceURI named localName from the\n * element.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @localname  string  The local name.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", S(16384),"setAttribute", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.setattribute.php )\n *\n * Sets an attribute with name name to the given value. If the attribute\n * does not exist, it will be created.\n *\n * @name       string  The name of the attribute.\n * @value      string  The value of the attribute.\n *\n * @return     mixed   The new DOMAttr or FALSE if an error occured.\n */", S(16384),"setAttributeNode", T(Variant), S(0), "newattr", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.setattributenode.php\n * )\n *\n * Adds new attribute node attr to element.\n *\n * @newattr    object  The attribute node.\n *\n * @return     mixed   Returns old node if the attribute has been replaced\n *                     or NULL.\n */", S(16384),"setAttributeNodeNS", T(Variant), S(0), "newattr", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.setattributenodens.php )\n *\n * Adds new attribute node attr to element.\n *\n * @newattr    object  The attribute node.\n *\n * @return     mixed   Returns the old node if the attribute has been\n *                     replaced.\n */", S(16384),"setAttributeNS", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.setattributens.php )\n *\n * Sets an attribute with namespace namespaceURI and name name to the given\n * value. If the attribute does not exist, it will be created.\n *\n * @namespaceuri\n *             string  The namespace URI.\n * @name       string  The qualified name of the attribute, as\n *                     prefix:tagname.\n * @value      string  The value of the attribute.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"setIDAttribute", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), "isid", T(Boolean), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.setidattribute.php )\n *\n * Declares the attribute name to be of type ID.\n *\n * @name       string  The name of the attribute.\n * @isid       bool    Set it to TRUE if you want name to be of type ID,\n *                     FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"setIDAttributeNode", T(Variant), S(0), "idattr", T(Object), NULL, NULL, S(0), "isid", T(Boolean), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domelement.setidattributenode.php )\n *\n * Declares the attribute specified by attr to be of type ID.\n *\n * @idattr     object  The attribute node.\n * @isid       bool    Set it to TRUE if you want name to be of type ID,\n *                     FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"setIDAttributeNS", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), "isid", T(Boolean), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.setidattributens.php\n * )\n *\n * Declares the attribute specified by localName and namespaceURI to be of\n * type ID.\n *\n * @namespaceuri\n *             string  The namespace URI of the attribute.\n * @localname  string  The local name of the attribute, as prefix:tagname.\n * @isid       bool    Set it to TRUE if you want name to be of type ID,\n *                     FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domelement.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domelement.php )\n *\n *\n */", "DOMEntity", "domnode", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domentity.--construct.php )\n *\n *\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domentity.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domentity.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domentity.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domentity.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domentity.php )\n *\n * This interface represents a known entity, either parsed or unparsed, in\n * an XML document.\n *\n */", "DOMEntityReference", "domnode", NULL, "__construct", T(Void), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domentityreference.--construct.php )\n *\n *\n * @name       string\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domentityreference.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domentityreference.php )\n *\n *\n */", "DOMNotation", "domnode", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnotation.--construct.php )\n *\n *\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnotation.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnotation.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnotation.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnotation.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domnotation.php )\n *\n *\n */", "DOMProcessingInstruction", "domnode", NULL, "__construct", T(Void), S(0), "name", T(String), NULL, NULL, S(0), "value", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.--construct.php )\n *\n *\n * @name       string\n * @value      string\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domprocessinginstruction.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/class.domprocessinginstruction.php )\n *\n *\n */", "DOMNodeIterator", "", "iterator",NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.--construct.php\n * )\n *\n *\n */", S(16384),"current", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.current.php )\n *\n *\n * @return     mixed\n */", S(16384),"key", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.key.php )\n *\n *\n * @return     mixed\n */", S(16384),"next", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.next.php )\n *\n *\n * @return     mixed\n */", S(16384),"rewind", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.rewind.php )\n *\n *\n * @return     mixed\n */", S(16384),"valid", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.valid.php )\n *\n *\n * @return     mixed\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodeiterator.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(134234112), "/**\n * ( excerpt from http://php.net/manual/en/class.domnodeiterator.php )\n *\n *\n */", "DOMNamedNodeMap", "", "iteratoraggregate",NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.--construct.php\n * )\n *\n *\n */", S(16384),"getNamedItem", T(Variant), S(0), "name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.getnameditem.php\n * )\n *\n * Retrieves a node specified by its nodeName.\n *\n * @name       string  The nodeName of the node to retrieve.\n *\n * @return     mixed   A node (of any type) with the specified nodeName, or\n *                     NULL if no node is found.\n */", S(16384),"getNamedItemNS", T(Variant), S(0), "namespaceuri", T(String), NULL, NULL, S(0), "localname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domnamednodemap.getnameditemns.php )\n *\n * Retrieves a node specified by localName and namespaceURI.\n *\n * @namespaceuri\n *             string  The namespace URI of the node to retrieve.\n * @localname  string  The local name of the node to retrieve.\n *\n * @return     mixed   A node (of any type) with the specified local name\n *                     and namespace URI, or NULL if no node is found.\n */", S(16384),"item", T(Variant), S(0), "index", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.item.php )\n *\n * Retrieves a node specified by index within the DOMNamedNodeMap object.\n *\n * @index      int     Index into this map.\n *\n * @return     mixed   The node at the indexth position in the map, or NULL\n *                     if that is not a valid index (greater than or equal\n *                     to the number of nodes in this map).\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"getIterator", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.getiterator.php\n * )\n *\n *\n * @return     mixed\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnamednodemap.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domnamednodemap.php )\n *\n *\n */", "DOMNodeList", "", "iteratoraggregate",NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.--construct.php )\n *\n *\n */", S(16384),"item", T(Variant), S(0), "index", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.item.php )\n *\n * Retrieves a node specified by index within the DOMNodeList object. Tip\n *\n * If you need to know the number of nodes in the collection, use the\n * length property of the DOMNodeList object.\n *\n * @index      int     Index of the node into the collection.\n *\n * @return     mixed   The node at the indexth position in the DOMNodeList,\n *                     or NULL if that is not a valid index.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"getIterator", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.getiterator.php )\n *\n *\n * @return     mixed\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domnodelist.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domnodelist.php )\n *\n *\n */", "DOMException", "exception", NULL, "__construct", T(Void), S(0), "message", T(String), "s:0:\"\";", "\"\"", S(0), "code", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domexception.--construct.php )\n *\n *\n * @message    string\n * @code       int\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domexception.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domexception.php )\n *\n * DOM operations raise exceptions under particular circumstances, i.e.,\n * when an operation is impossible to perform for logical reasons.\n *\n * See also Exceptions.\n *\n */", "DOMImplementation", "", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domimplementation.--construct.php )\n *\n *\n */", S(16384),"createDocument", T(Variant), S(0), "namespaceuri", T(String), "N;", "null", S(0), "qualifiedname", T(String), "N;", "null", S(0), "doctypeobj", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domimplementation.createdocument.php )\n *\n * Creates a DOMDocument object of the specified type with its document\n * element.\n *\n * @namespaceuri\n *             string  The namespace URI of the document element to create.\n * @qualifiedname\n *             string  The qualified name of the document element to\n *                     create.\n * @doctypeobj object  The type of document to create or NULL.\n *\n * @return     mixed   A new DOMDocument object. If namespaceURI,\n *                     qualifiedName, and doctype are null, the returned\n *                     DOMDocument is empty with no document element\n */", S(16384),"createDocumentType", T(Variant), S(0), "qualifiedname", T(String), "N;", "null", S(0), "publicid", T(String), "N;", "null", S(0), "systemid", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domimplementation.createdocumenttype.php )\n *\n * Creates an empty DOMDocumentType object. Entity declarations and\n * notations are not made available. Entity reference expansions and\n * default attribute additions do not occur.\n *\n * @qualifiedname\n *             string  The qualified name of the document type to create.\n * @publicid   string  The external subset public identifier.\n * @systemid   string  The external subset system identifier.\n *\n * @return     mixed   A new DOMDocumentType node with its ownerDocument\n *                     set to NULL.\n */", S(16384),"hasFeature", T(Boolean), S(0), "feature", T(String), NULL, NULL, S(0), "version", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domimplementation.hasfeature.php\n * )\n *\n * Test if the DOM implementation implements a specific feature.\n *\n * You can find a list of all features in the \273 Conformance section of the\n * DOM specification.\n *\n * @feature    string  The feature to test.\n * @version    string  The version number of the feature to test. In level\n *                     2, this can be either 2.0 or 1.0.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domimplementation.--destruct.php\n * )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.domimplementation.php )\n *\n * The DOMImplementation interface provides a number of methods for\n * performing operations that are independent of any particular instance of\n * the document object model.\n *\n */", "DOMXPath", "", NULL, "__construct", T(Void), S(0), "doc", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.--construct.php )\n *\n *\n * @doc        mixed\n */", S(16384),"evaluate", T(Variant), S(0), "expr", T(String), NULL, NULL, S(0), "context", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.evaluate.php )\n *\n * Executes the given XPath expression and returns a typed result if\n * possible.\n *\n * @expr       string  The XPath expression to execute.\n * @context    object  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n *\n * @return     mixed   Returns a typed result if possible or a DOMNodeList\n *                     containing all nodes matching the given XPath\n *                     expression.\n */", S(16384),"query", T(Variant), S(0), "expr", T(String), NULL, NULL, S(0), "context", T(Object), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.query.php )\n *\n * Executes the given XPath expression.\n *\n * @expr       string  The XPath expression to execute.\n * @context    object  The optional contextnode can be specified for doing\n *                     relative XPath queries. By default, the queries are\n *                     relative to the root element.\n *\n * @return     mixed   Returns a DOMNodeList containing all nodes matching\n *                     the given XPath expression. Any expression which do\n *                     not return nodes will return an empty DOMNodeList.\n */", S(16384),"registerNamespace", T(Boolean), S(0), "prefix", T(String), NULL, NULL, S(0), "uri", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.registernamespace.php )\n *\n * Registers the namespaceURI and prefix with the DOMXPath object.\n *\n * @prefix     string  The prefix.\n * @uri        string  The URI of the namespace.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"registerPHPFunctions", T(Variant), S(0), "funcs", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/domxpath.registerphpfunctions.php )\n *\n * This method enables the ability to use PHP functions within XPath\n * expressions.\n *\n * @funcs      mixed   Use this parameter to only allow certain functions\n *                     to be called from XPath.\n *\n *                     This parameter can be either a string (a function\n *                     name) or an array of function names.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"__get", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.--get.php )\n *\n *\n * @name       mixed\n *\n * @return     mixed\n */", S(16384),"__set", T(Variant), S(0), "name", T(Variant), NULL, NULL, S(0), "value", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.--set.php )\n *\n *\n * @name       mixed\n * @value      mixed\n *\n * @return     mixed\n */", S(16384),"__isset", T(Boolean), S(0), "name", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.--isset.php )\n *\n *\n * @name       mixed\n *\n * @return     bool\n */", S(16384),"__destruct", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/domxpath.--destruct.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(134234112), "/**\n * ( excerpt from http://php.net/manual/en/class.domxpath.php )\n *\n * Supports XPath 1.0\n *\n */", 
#elif EXT_TYPE == 3

#endif
