// Autogenerated by Thrift for thrift/compiler/test/fixtures/namespace/src/hsmodule.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package test

import (
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID

// Premade codec specs
var (
    premadeCodecTypeSpec_i64 = &thrift.TypeSpec{
        FullName: "i64",
        CodecPrimitiveSpec:
            &thrift.CodecPrimitiveSpec{
                PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_I64,
            },
    }
    premadeCodecTypeSpec_hsmodule_HsFoo = &thrift.TypeSpec{
        FullName: "hsmodule.HsFoo",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "hsmodule.HsFoo",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewHsFoo() },
            },
    }
)

// Premade struct specs
var (
    premadeStructSpec_HsFoo =
        &thrift.StructSpec{
            Name:                 "HsFoo",
            ScopedName:           "hsmodule.HsFoo",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.I64,
                    Name:                 "MyInt",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_i64,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "MyInt": 0,
            },
        }
    premadeStructSpec_reqHsTestServiceInit =
        &thrift.StructSpec{
            Name:                 "reqHsTestServiceInit",
            ScopedName:           "hsmodule.reqHsTestServiceInit",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.I64,
                    Name:                 "int1",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_i64,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "int1": 0,
            },
        }
    premadeStructSpec_respHsTestServiceInit =
        &thrift.StructSpec{
            Name:                 "respHsTestServiceInit",
            ScopedName:           "hsmodule.respHsTestServiceInit",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   0,
                    WireType:             thrift.I64,
                    Name:                 "success",
                    ReflectIndex:         0,
                    IsOptional:           true,
                    ValueTypeSpec:        premadeCodecTypeSpec_i64,
                    MustBeSetToSerialize: true,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                0: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "success": 0,
            },
        }
)

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_i64.FullName] = premadeCodecTypeSpec_i64
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_hsmodule_HsFoo.FullName] = premadeCodecTypeSpec_hsmodule_HsFoo
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
