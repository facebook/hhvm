# Patch to tbb (Thread Building Blocks) 4.2 Update 5 (20140601oss)
# to allow building and running on cygwin
#
# This is mainly a build system patch, with a small fix for cygwin's
# lack of dl_info support
#
# To apply download the tbb source code
# http://threadingbuildingblocks.org/sites/default/files/software_releases/source/tbb42_20140601oss_src.tgz
#
# $ tar -zxvf
# $ cd tbb42_20140601oss
# $ cat ../hhvm/hphp/patches/win32-cygwin-tbb-4.1-20140601oss.patch | patch -p1
#
# Then build according to the tbb build instructions, cygwin should be detected and build
#
diff -rupN tbb42_20140601oss/build/common.inc tbb_patched/build/common.inc
--- tbb42_20140601oss/build/common.inc	2014-06-06 07:18:03.000000000 -0400
+++ tbb_patched/build/common.inc	2014-07-02 08:32:37.278125000 -0400
@@ -36,7 +36,12 @@ ifndef tbb_os
   endif
 
   ifeq ($(OS), Windows_NT)
-    export tbb_os=windows
+    OS:=$(shell uname -o)
+    ifeq ($(OS),Cygwin)
+      export tbb_os=cygwin
+	else
+	  export tbb_os=windows
+    endif
   endif
   ifeq ($(OS), Linux)
     export tbb_os=linux
diff -rupN tbb42_20140601oss/build/cygwin.gcc.inc tbb_patched/build/cygwin.gcc.inc
--- tbb42_20140601oss/build/cygwin.gcc.inc	1969-12-31 19:00:00.000000000 -0500
+++ tbb_patched/build/cygwin.gcc.inc	2014-07-02 19:52:16.382125000 -0400
@@ -0,0 +1,152 @@
+# Copyright 2005-2014 Intel Corporation.  All Rights Reserved.
+#
+# This file is part of Threading Building Blocks.
+#
+# Threading Building Blocks is free software; you can redistribute it
+# and/or modify it under the terms of the GNU General Public License
+# version 2 as published by the Free Software Foundation.
+#
+# Threading Building Blocks is distributed in the hope that it will be
+# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Threading Building Blocks; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# As a special exception, you may use this file as part of a free software
+# library without restriction.  Specifically, if other files instantiate
+# templates or use macros or inline functions from this file, or you compile
+# this file and link it with other files to produce an executable, this
+# file does not by itself cause the resulting executable to be covered by
+# the GNU General Public License.  This exception does not however
+# invalidate any other reasons why the executable file might be covered by
+# the GNU General Public License.
+
+COMPILE_ONLY = -c -MMD
+PREPROC_ONLY = -E -x c++
+INCLUDE_KEY = -I
+DEFINE_KEY = -D
+OUTPUT_KEY = -o #
+OUTPUTOBJ_KEY = -o #
+PIC_KEY = 
+WARNING_AS_ERROR_KEY = -Werror
+WARNING_KEY = -Wall
+TEST_WARNING_KEY = -Wshadow -Wcast-qual -Woverloaded-virtual -Wnon-virtual-dtor $(if $(findstring cc4., $(runtime)),-Wextra)
+
+WARNING_SUPPRESS = -Wno-parentheses -Wno-non-virtual-dtor
+DYLIB_KEY = -shared
+EXPORT_KEY =
+LIBDL = -ldl
+
+CPLUS = g++ -std=gnu++11 -D_TBB_CPP0X
+CONLY = gcc
+LIB_LINK_FLAGS = $(DYLIB_KEY) -Wl,-soname=$(BUILDING_LIBRARY) -Wl,--export-all-symbols -Wl,--out-implib=$(BUILDING_LIBRARY).a
+LIBS += -lpthread -lrt
+C_FLAGS = $(CPLUS_FLAGS)
+# gcc 4.4 and higher support -std=c++0x
+ifneq (,$(shell gcc -dumpversion | egrep  "^(4\.[4-9]|[5-9])"))
+    CPP11_FLAGS = -std=gnu++11 -D_TBB_CPP0X
+endif
+
+# gcc 4.2 and higher support OpenMP
+ifneq (,$(shell gcc -dumpversion | egrep  "^(4\.[2-9]|[5-9])"))
+    OPENMP_FLAG = -fopenmp
+endif
+
+# gcc 4.8 and later support TSX intrinsics, but require command line switch to enable them
+ifneq (,$(shell gcc -dumpversion | egrep  "^4\.[8-9]"))
+    ENABLE_RTM += -mrtm
+endif
+
+ifeq ($(cfg), release)
+        CPLUS_FLAGS = $(ITT_NOTIFY) -g -O2 -DUSE_PTHREAD
+endif
+ifeq ($(cfg), debug)
+        CPLUS_FLAGS = -DTBB_USE_DEBUG $(ITT_NOTIFY) -g -O0 -DUSE_PTHREAD
+endif
+
+ifneq (00,$(lambdas)$(cpp0x))
+    CXX_ONLY_FLAGS += $(CPP11_FLAGS)
+endif
+
+TBB_ASM.OBJ=
+MALLOC_ASM.OBJ=
+
+ifeq (ia64,$(arch))
+# Position-independent code (PIC) is a must on IA-64 architecture, even for regular (not shared) executables
+    CPLUS_FLAGS += $(PIC_KEY)
+endif
+
+ifeq (intel64,$(arch))
+    ITT_NOTIFY = -DDO_ITT_NOTIFY
+    CPLUS_FLAGS += -m64 $(ENABLE_RTM)
+    LIB_LINK_FLAGS += -m64
+endif
+
+ifeq (ia32,$(arch))
+    ITT_NOTIFY = -DDO_ITT_NOTIFY
+    CPLUS_FLAGS += -m32 -march=pentium4 $(ENABLE_RTM)
+    LIB_LINK_FLAGS += -m32
+endif
+
+ifeq (ppc64,$(arch))
+    CPLUS_FLAGS += -m64
+    LIB_LINK_FLAGS += -m64
+endif
+
+ifeq (ppc32,$(arch))
+    CPLUS_FLAGS += -m32
+    LIB_LINK_FLAGS += -m32
+endif
+
+ifeq (bg,$(arch))
+    CPLUS = mpicxx
+    CONLY = mpicc
+endif
+
+# for some gcc versions on Solaris, -m64 may imply V9, but perhaps not everywhere (TODO: verify)
+ifeq (sparc,$(arch))
+    CPLUS_FLAGS    += -mcpu=v9 -m64
+    LIB_LINK_FLAGS += -mcpu=v9 -m64
+endif
+
+# automatically generate "IT" instructions when compiling for Thumb ISA
+ifeq (armv7,$(arch))
+    CPLUS_FLAGS    += -Wa,-mimplicit-it=thumb
+endif
+
+#------------------------------------------------------------------------------
+# Setting assembler data.
+#------------------------------------------------------------------------------
+ASM = as
+ifeq (intel64,$(arch))
+    ASM_FLAGS += --64
+endif
+ifeq (ia32,$(arch))
+    ASM_FLAGS += --32
+endif
+ifeq ($(cfg),debug)
+    ASM_FLAGS += -g
+endif
+
+ASSEMBLY_SOURCE=$(arch)-gas
+ifeq (ia64,$(arch))
+    ASM_FLAGS += -xexplicit
+    TBB_ASM.OBJ += atomic_support.o lock_byte.o log2.o pause.o ia64_misc.o
+    MALLOC_ASM.OBJ += atomic_support.o lock_byte.o pause.o log2.o
+endif
+#------------------------------------------------------------------------------
+# End of setting assembler data.
+#------------------------------------------------------------------------------
+
+#------------------------------------------------------------------------------
+# Setting tbbmalloc data.
+#------------------------------------------------------------------------------
+
+M_CPLUS_FLAGS = $(CPLUS_FLAGS) -fno-rtti -fno-exceptions -fno-schedule-insns2
+
+#------------------------------------------------------------------------------
+# End of setting tbbmalloc data.
+#------------------------------------------------------------------------------
diff -rupN tbb42_20140601oss/build/cygwin.inc tbb_patched/build/cygwin.inc
--- tbb42_20140601oss/build/cygwin.inc	1969-12-31 19:00:00.000000000 -0500
+++ tbb_patched/build/cygwin.inc	2014-07-02 18:59:42.104781200 -0400
@@ -0,0 +1,134 @@
+# Copyright 2005-2014 Intel Corporation.  All Rights Reserved.
+#
+# This file is part of Threading Building Blocks.
+#
+# Threading Building Blocks is free software; you can redistribute it
+# and/or modify it under the terms of the GNU General Public License
+# version 2 as published by the Free Software Foundation.
+#
+# Threading Building Blocks is distributed in the hope that it will be
+# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Threading Building Blocks; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# As a special exception, you may use this file as part of a free software
+# library without restriction.  Specifically, if other files instantiate
+# templates or use macros or inline functions from this file, or you compile
+# this file and link it with other files to produce an executable, this
+# file does not by itself cause the resulting executable to be covered by
+# the GNU General Public License.  This exception does not however
+# invalidate any other reasons why the executable file might be covered by
+# the GNU General Public License.
+
+####### Detections and Commands ###############################################
+
+ifeq (icc,$(compiler))
+  export COMPILER_VERSION := ICC: $(shell icc -V </dev/null 2>&1 | grep 'Version')
+  ifneq (,$(findstring IA-32, $(COMPILER_VERSION)))
+    export arch:=ia32
+  endif
+  ifneq (,$(findstring Intel(R) 64, $(COMPILER_VERSION)))
+    export arch:=intel64
+  endif
+  ifneq (,$(findstring IA-64, $(COMPILER_VERSION)))
+    export arch:=ia64
+  endif
+  ifeq (,$(arch))
+    $(warning "Unknown Intel compiler")
+  endif
+endif
+
+ifndef arch
+        uname_m:=$(shell uname -m)
+        ifeq ($(uname_m),i686)
+                export arch:=ia32
+        endif
+        ifeq ($(uname_m),ia64)
+                export arch:=ia64
+        endif
+        ifeq ($(uname_m),x86_64)
+                export arch:=intel64
+        endif
+        ifeq ($(uname_m),sparc64)
+                export arch:=sparc
+        endif
+        ifeq ($(uname_m),armv7l)
+                export arch:=armv7
+        endif
+        ifndef arch
+                export arch:=$(uname_m)
+        endif
+endif
+
+ifndef runtime
+        gcc_version = $(shell gcc -dumpversion)
+        export runtime:=cc$(gcc_version)_newlib
+endif
+
+native_compiler := gcc
+export compiler ?= gcc
+debugger ?= gdb
+
+CMD=sh -c
+CWD=$(shell pwd)
+CP=cp
+RM?=rm -f
+RD?=rmdir
+MD?=mkdir -p
+NUL= /dev/null
+SLASH=/
+MAKE_VERSIONS=sh $(tbb_root)/build/version_info_cygwin.sh $(VERSION_FLAGS) >version_string.ver
+MAKE_TBBVARS=sh $(tbb_root)/build/generate_tbbvars.sh
+
+ifdef LD_LIBRARY_PATH
+        export LD_LIBRARY_PATH := .:$(LD_LIBRARY_PATH)
+else
+        export LD_LIBRARY_PATH := .
+endif
+
+####### Build settings ########################################################
+
+OBJ = o
+DLL = dll
+LIBEXT = dll.a
+ASMEXT = asm
+DYLIB_KEY = -shared
+
+ifeq (,$(def_prefix))
+    ifeq (64,$(findstring 64,$(arch)))
+            def_prefix = cyg64
+			TBB.LST = $(tbb_root)/src/tbb/win64-gcc-tbb-export.lst
+    else
+            def_prefix = cyg32
+			TBB.LST = $(tbb_root)/src/tbb/lin32-tbb-export.lst
+    endif
+endif
+TBB.DEF = 
+MALLOC.DEF = 
+RML.DEF = 
+
+TBB.DLL = libtbb$(DEBUG_SUFFIX).$(DLL)
+TBB.LIB = libtbb$(DEBUG_SUFFIX).$(LIBEXT)
+LINK_TBB.LIB = $(TBB.LIB)
+
+MALLOC.DLL = libtbbmalloc$(DEBUG_SUFFIX).$(DLL)
+MALLOC.LIB = libtbbmalloc$(DEBUG_SUFFIX).$(LIBEXT)
+LINK_MALLOC.LIB = 
+
+MALLOCPROXY.DLL = libtbbmallocproxy$(DEBUG_SUFFIX).$(DLL)
+MALLOCPROXY.LIB = libtbbmallocproxy$(DEBUG_SUFFIX).$(LIBEXT)
+LINK_MALLOCPROXY.LIB = 
+
+RML.DLL = libirml$(DEBUG_SUFFIX).$(DLL)
+RML.LIB = libirml$(DEBUG_SUFFIX).$(LIBEXT)
+LINK_RML.LIB =
+
+
+# no TBB proxy for the configuration
+PROXY.LIB =
+
+TEST_LAUNCHER=sh $(tbb_root)/build/test_launcher.sh $(largs)
diff -rupN tbb42_20140601oss/build/version_info_cygwin.sh tbb_patched/build/version_info_cygwin.sh
--- tbb42_20140601oss/build/version_info_cygwin.sh	1969-12-31 19:00:00.000000000 -0500
+++ tbb_patched/build/version_info_cygwin.sh	2014-07-02 09:19:24.762500000 -0400
@@ -0,0 +1,41 @@
+#!/bin/sh
+#
+# Copyright 2005-2014 Intel Corporation.  All Rights Reserved.
+#
+# This file is part of Threading Building Blocks.
+#
+# Threading Building Blocks is free software; you can redistribute it
+# and/or modify it under the terms of the GNU General Public License
+# version 2 as published by the Free Software Foundation.
+#
+# Threading Building Blocks is distributed in the hope that it will be
+# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Threading Building Blocks; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# As a special exception, you may use this file as part of a free software
+# library without restriction.  Specifically, if other files instantiate
+# templates or use macros or inline functions from this file, or you compile
+# this file and link it with other files to produce an executable, this
+# file does not by itself cause the resulting executable to be covered by
+# the GNU General Public License.  This exception does not however
+# invalidate any other reasons why the executable file might be covered by
+# the GNU General Public License.
+
+# Script used to generate version info string
+echo "#define __TBB_VERSION_STRINGS(N) \\"
+echo  '#N": '"BUILD_HOST\t\t"`hostname -s`" ("`arch`")"'" ENDL \'
+echo  '#N": '"BUILD_ARCH\t\t("`arch`")"'" ENDL \'
+echo  '#N": '"BUILD_OS\t\t"Cygwin'" ENDL \'
+echo  '#N": '"BUILD_KERNEL\t1.5.25"'" ENDL \'
+echo  '#N": '"BUILD_GCC\t\t"`g++ -v </dev/null 2>&1 | grep 'gcc.*version '`'" ENDL \'
+[ -z "$COMPILER_VERSION" ] || echo '"#N: ' "BUILD_COMPILER\t"$COMPILER_VERSION'" ENDL \'
+echo '#N": ' "BUILD_LD\t\t"`ld -v | grep 'version'`'" ENDL \'
+echo '#N": ' "BUILD_TARGET\t$arch on $runtime"'" ENDL \'
+echo '#N": ' "BUILD_COMMAND\t"$*'" ENDL \'
+echo ""
+echo "#define __TBB_DATETIME \""`date -u`"\""
diff -rupN tbb42_20140601oss/include/tbb/tbb_config.h tbb_patched/include/tbb/tbb_config.h
--- tbb42_20140601oss/include/tbb/tbb_config.h	2014-06-06 07:17:53.000000000 -0400
+++ tbb_patched/include/tbb/tbb_config.h	2014-07-01 19:57:46.496875000 -0400
@@ -315,7 +315,7 @@
 
 /** __TBB_WEAK_SYMBOLS_PRESENT denotes that the system supports the weak symbol mechanism **/
 #ifndef __TBB_WEAK_SYMBOLS_PRESENT
-#define __TBB_WEAK_SYMBOLS_PRESENT ( !_WIN32 && !__APPLE__ && !__sun && (__TBB_GCC_VERSION >= 40000 || __INTEL_COMPILER ) )
+#define __TBB_WEAK_SYMBOLS_PRESENT ( !_WIN32 && !__APPLE__ && !__sun && !__CYGWIN__ &&(__TBB_GCC_VERSION >= 40000 || __INTEL_COMPILER ) )
 #endif
 
 /** __TBB_DYNAMIC_LOAD_ENABLED describes the system possibility to load shared libraries at run time **/
diff -rupN tbb42_20140601oss/include/tbb/tbb_machine.h tbb_patched/include/tbb/tbb_machine.h
--- tbb42_20140601oss/include/tbb/tbb_machine.h	2014-06-06 07:17:51.000000000 -0400
+++ tbb_patched/include/tbb/tbb_machine.h	2014-06-26 13:42:08.116218700 -0400
@@ -236,7 +236,17 @@ template<> struct atomic_selector<8> {
     #else
         #include "machine/linux_intel64.h"
     #endif
-
+#elif __CYGWIN64__ || __CYGWIN__
+	#if (TBB_USE_GCC_BUILTINS && __TBB_GCC_BUILTIN_ATOMICS_PRESENT)
+		#include "machine/gcc_generic.h"
+	#elif __CYGWIN64__
+		#include "machine/linux_intel64.h"
+	#elif __CYGWIN__
+		#include "machine/linux_ia32.h"
+	#endif
+	
+	#include <sched.h>
+    #define __TBB_Yield() sched_yield()
 #elif __linux__ || __FreeBSD__ || __NetBSD__
 
     #if (TBB_USE_GCC_BUILTINS && __TBB_GCC_BUILTIN_ATOMICS_PRESENT)
diff -rupN tbb42_20140601oss/src/rml/client/rml_factory.h tbb_patched/src/rml/client/rml_factory.h
--- tbb42_20140601oss/src/rml/client/rml_factory.h	2014-06-06 07:18:02.000000000 -0400
+++ tbb_patched/src/rml/client/rml_factory.h	2014-07-01 20:38:54.356250000 -0400
@@ -35,7 +35,7 @@
 #endif /* TBB_USE_DEBUG */
 
 // RML_SERVER_NAME is the name of the RML server library.
-#if _WIN32||_WIN64
+#if _WIN32||_WIN64||__CYGWIN__
 #define RML_SERVER_NAME "irml" DEBUG_SUFFIX ".dll"
 #elif __APPLE__
 #define RML_SERVER_NAME "libirml" DEBUG_SUFFIX ".dylib"
diff -rupN tbb42_20140601oss/src/tbb/cache_aligned_allocator.cpp tbb_patched/src/tbb/cache_aligned_allocator.cpp
--- tbb42_20140601oss/src/tbb/cache_aligned_allocator.cpp	2014-06-06 07:17:59.000000000 -0400
+++ tbb_patched/src/tbb/cache_aligned_allocator.cpp	2014-07-01 20:38:13.965625000 -0400
@@ -108,7 +108,7 @@ static const dynamic_link_descriptor Mal
 #endif /* TBB_USE_DEBUG */
 
 // MALLOCLIB_NAME is the name of the TBB memory allocator library.
-#if _WIN32||_WIN64
+#if _WIN32||_WIN64||__CYGWIN__
 #define MALLOCLIB_NAME "tbbmalloc" DEBUG_SUFFIX ".dll"
 #elif __APPLE__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".dylib"
diff -rupN tbb42_20140601oss/src/tbb/dynamic_link.cpp tbb_patched/src/tbb/dynamic_link.cpp
--- tbb42_20140601oss/src/tbb/dynamic_link.cpp	2014-06-06 07:17:59.000000000 -0400
+++ tbb_patched/src/tbb/dynamic_link.cpp	2014-07-01 20:37:05.996875000 -0400
@@ -73,6 +73,12 @@
 #include <pthread.h>
 #endif
 
+#ifdef __CYGWIN__
+#define WINDOWS_LEAN_AND_MEAN
+#include <windows.h>
+#include <sys/cygwin.h>
+#endif
+
 /*
 dynamic_link is a common interface for searching for required symbols in an
 executable and dynamic libraries.
@@ -290,7 +296,7 @@ OPEN_INTERNAL_NAMESPACE
         #if __TBB_WEAK_SYMBOLS_PRESENT
             if ( !dladdr || !dlerror ) return;
         #endif /* __TBB_WEAK_SYMBOLS_PRESENT */
-        Dl_info dlinfo;
+        /*Dl_info dlinfo;
         int res = dladdr( (void*)&dynamic_link, &dlinfo ); // any function inside the library can be used for the address
         if ( !res ) {
             char const * err = dlerror();
@@ -298,17 +304,42 @@ OPEN_INTERNAL_NAMESPACE
             return;
         } else {
             LIBRARY_ASSERT( dlinfo.dli_fname!=NULL, "Unbelievable." );
-        }
-
-        char const *slash = strrchr( dlinfo.dli_fname, '/' );
+        }*/
+		char *dli_fname;
+
+		#ifdef __CYGWIN__
+			MEMORY_BASIC_INFORMATION mbi;
+			char path[MAX_PATH];
+			VirtualQuery((void*)&dynamic_link, &mbi,
+                sizeof(mbi));
+			GetModuleFileNameA((HINSTANCE)mbi.AllocationBase, path, MAX_PATH);
+
+			char posix_path[MAX_PATH];
+			cygwin_conv_path(CCP_WIN_A_TO_POSIX | CCP_RELATIVE, path, posix_path, MAX_PATH);
+			dli_fname = posix_path;
+
+		#else
+			Dl_info dlinfo;
+			int res = dladdr( (void*)&dynamic_link, &dlinfo ); // any function inside the library can be used for the address
+			if ( !res ) {
+				char const * err = dlerror();
+				DYNAMIC_LINK_WARNING( dl_sys_fail, "dladdr", err );
+				return;
+			} else {
+				LIBRARY_ASSERT( dlinfo.dli_fname!=NULL, "Unbelievable." );
+			}
+			dli_fname = dlinfo.dli_fname;
+		#endif
+
+        char const *slash = strrchr( dli_fname, '/' );
         size_t fname_len=0;
         if ( slash ) {
-            LIBRARY_ASSERT( slash >= dlinfo.dli_fname, "Unbelievable.");
-            fname_len = (size_t)(slash - dlinfo.dli_fname) + 1;
+            LIBRARY_ASSERT( slash >= dli_fname, "Unbelievable.");
+            fname_len = (size_t)(slash - dli_fname) + 1;
         }
 
         size_t rc;
-        if ( dlinfo.dli_fname[0]=='/' ) {
+        if ( dli_fname[0]=='/' ) {
             // The library path is absolute
             rc = 0;
             ap_data._len = 0;
@@ -329,7 +360,7 @@ OPEN_INTERNAL_NAMESPACE
                 ap_data._len=0;
                 return;
             }
-            strncpy( ap_data._path+rc, dlinfo.dli_fname, fname_len );
+            strncpy( ap_data._path+rc, dli_fname, fname_len );
             ap_data._len += fname_len;
             ap_data._path[ap_data._len]=0;
         }
@@ -446,11 +477,25 @@ OPEN_INTERNAL_NAMESPACE
         // But after we obtained the symbol the library can be unloaded by another thread
         // invalidating our symbol. Therefore we need to pin the library in memory.
         dynamic_link_handle library_handle;
+		char * dli_fname;
+		#ifdef __CYGWIN__
+			MEMORY_BASIC_INFORMATION mbi;
+			char path[MAX_PATH];
+			VirtualQuery((void*)&dynamic_link, &mbi,
+                sizeof(mbi));
+		if(GetModuleFileNameA((HINSTANCE)mbi.AllocationBase, path, MAX_PATH)) {
+			char posix_path[MAX_PATH];
+			cygwin_conv_path(CCP_WIN_A_TO_POSIX | CCP_RELATIVE, path, posix_path, MAX_PATH);
+			dli_fname = posix_path;
+			
+		#else
         Dl_info info;
         // Get library's name from earlier found symbol
         if ( dladdr( (void*)*desc.handler, &info ) ) {
+		    dli_fname = info.dli_fname;
+		#endif
             // Pin the library
-            library_handle = dlopen( info.dli_fname, RTLD_LAZY );
+            library_handle = dlopen( dli_fname, RTLD_LAZY );
             if ( library_handle ) {
                 // If original library was unloaded before we pinned it
                 // and then another module loaded in its place, the earlier
@@ -462,7 +507,7 @@ OPEN_INTERNAL_NAMESPACE
                 }
             } else {
                 char const * err = dlerror();
-                DYNAMIC_LINK_WARNING( dl_lib_not_found, info.dli_fname, err );
+                DYNAMIC_LINK_WARNING( dl_lib_not_found, dli_fname, err );
             }
         }
         else {
diff -rupN tbb42_20140601oss/src/tbb/itt_notify.cpp tbb_patched/src/tbb/itt_notify.cpp
--- tbb42_20140601oss/src/tbb/itt_notify.cpp	2014-06-06 07:17:58.000000000 -0400
+++ tbb_patched/src/tbb/itt_notify.cpp	2014-07-02 09:42:26.715625000 -0400
@@ -32,7 +32,7 @@
     #ifndef UNICODE
         #define UNICODE
     #endif
-#else
+#elif !defined(__CYGWIN__)
     #pragma weak dlopen
     #pragma weak dlsym
     #pragma weak dlerror
diff -rupN tbb42_20140601oss/src/tbbmalloc/frontend.cpp tbb_patched/src/tbbmalloc/frontend.cpp
--- tbb42_20140601oss/src/tbbmalloc/frontend.cpp	2014-06-06 07:17:59.000000000 -0400
+++ tbb_patched/src/tbbmalloc/frontend.cpp	2014-07-02 08:56:45.153125000 -0400
@@ -766,7 +766,7 @@ static inline unsigned int highestBitPos
     unsigned int pos;
 #if __ARCH_x86_32||__ARCH_x86_64
 
-# if __linux__||__APPLE__||__FreeBSD__||__NetBSD__||__sun||__MINGW32__
+# if __linux__||__APPLE__||__FreeBSD__||__NetBSD__||__sun||__MINGW32__||__CYGWIN__
     __asm__ ("bsr %1,%0" : "=r"(pos) : "r"(n));
 # elif (_WIN32 && (!_WIN64 || __INTEL_COMPILER))
     __asm
diff -rupN tbb42_20140601oss/src/tbbmalloc/tbbmalloc.cpp tbb_patched/src/tbbmalloc/tbbmalloc.cpp
--- tbb42_20140601oss/src/tbbmalloc/tbbmalloc.cpp	2014-06-06 07:17:59.000000000 -0400
+++ tbb_patched/src/tbbmalloc/tbbmalloc.cpp	2014-07-02 08:17:18.793750000 -0400
@@ -92,7 +92,7 @@ extern "C" void MallocInitializeITT() {
 #endif /* TBB_USE_DEBUG */
 
 // MALLOCLIB_NAME is the name of the TBB memory allocator library.
-#if _WIN32||_WIN64
+#if _WIN32||_WIN64||__CYGWIN__
 #define MALLOCLIB_NAME "tbbmalloc" DEBUG_SUFFIX ".dll"
 #elif __APPLE__
 #define MALLOCLIB_NAME "libtbbmalloc" DEBUG_SUFFIX ".dylib"
