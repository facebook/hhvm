/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace test {
namespace fixtures {
namespace basic {


folly::Future<folly::Unit>
FooServiceClientWrapper::simple_rpc(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::test::fixtures::basic::FooServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_simple_rpc, channel_);
  client->simple_rpc(
    rpcOptions,
    std::move(callback)
  );
  return _future;
}

folly::Future<::test::fixtures::basic::ReservedKeyword>
FB303ServiceClientWrapper::simple_rpc(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_int_parameter) {
  auto* client = static_cast<::test::fixtures::basic::FB303ServiceAsyncClient*>(async_client_.get());
  folly::Promise<::test::fixtures::basic::ReservedKeyword> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<::test::fixtures::basic::ReservedKeyword>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_simple_rpc, channel_);
  client->simple_rpc(
    rpcOptions,
    std::move(callback),
    arg_int_parameter
  );
  return _future;
}

folly::Future<folly::Unit>
MyServiceClientWrapper::ping(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_ping, channel_);
  client->ping(
    rpcOptions,
    std::move(callback)
  );
  return _future;
}

folly::Future<std::string>
MyServiceClientWrapper::getRandomData(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<std::string> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::string>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_getRandomData, channel_);
  client->getRandomData(
    rpcOptions,
    std::move(callback)
  );
  return _future;
}

folly::Future<folly::Unit>
MyServiceClientWrapper::sink(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_sink) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_sink, channel_);
  client->sink(
    rpcOptions,
    std::move(callback),
    arg_sink
  );
  return _future;
}

folly::Future<folly::Unit>
MyServiceClientWrapper::putDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id,
    std::string arg_data) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_putDataById, channel_);
  client->putDataById(
    rpcOptions,
    std::move(callback),
    arg_id,
    arg_data
  );
  return _future;
}

folly::Future<bool>
MyServiceClientWrapper::hasDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<bool> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<bool>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_hasDataById, channel_);
  client->hasDataById(
    rpcOptions,
    std::move(callback),
    arg_id
  );
  return _future;
}

folly::Future<std::string>
MyServiceClientWrapper::getDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<std::string> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::string>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_getDataById, channel_);
  client->getDataById(
    rpcOptions,
    std::move(callback),
    arg_id
  );
  return _future;
}

folly::Future<folly::Unit>
MyServiceClientWrapper::deleteDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_deleteDataById, channel_);
  client->deleteDataById(
    rpcOptions,
    std::move(callback),
    arg_id
  );
  return _future;
}

folly::Future<folly::Unit>
MyServiceClientWrapper::lobDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id,
    std::string arg_data) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::apache::thrift::OneWayFutureCallback>(
    std::move(_promise), channel_);
  client->lobDataById(
    rpcOptions,
    std::move(callback),
    arg_id,
    arg_data
  );
  return _future;
}

folly::Future<std::set<float>>
MyServiceClientWrapper::invalid_return_for_hack(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<std::set<float>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::set<float>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_invalid_return_for_hack, channel_);
  client->invalid_return_for_hack(
    rpcOptions,
    std::move(callback)
  );
  return _future;
}

folly::Future<folly::Unit>
MyServiceClientWrapper::rpc_skipped_codegen(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::test::fixtures::basic::MyServiceAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_rpc_skipped_codegen, channel_);
  client->rpc_skipped_codegen(
    rpcOptions,
    std::move(callback)
  );
  return _future;
}

folly::Future<std::string>
DbMixedStackArgumentsClientWrapper::getDataByKey0(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_key) {
  auto* client = static_cast<::test::fixtures::basic::DbMixedStackArgumentsAsyncClient*>(async_client_.get());
  folly::Promise<std::string> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::string>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_getDataByKey0, channel_);
  client->getDataByKey0(
    rpcOptions,
    std::move(callback),
    arg_key
  );
  return _future;
}

folly::Future<std::string>
DbMixedStackArgumentsClientWrapper::getDataByKey1(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_key) {
  auto* client = static_cast<::test::fixtures::basic::DbMixedStackArgumentsAsyncClient*>(async_client_.get());
  folly::Promise<std::string> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::string>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_getDataByKey1, channel_);
  client->getDataByKey1(
    rpcOptions,
    std::move(callback),
    arg_key
  );
  return _future;
}

} // namespace test
} // namespace fixtures
} // namespace basic
