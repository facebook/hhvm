// Autogenerated by Thrift for thrift/compiler/test/fixtures/sink/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.VOID

// Premade codec specs
var (
    premadeCodecTypeSpec_string = &thrift.TypeSpec{
        FullName: "string",
        CodecPrimitiveSpec:
            &thrift.CodecPrimitiveSpec{
                PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_STRING,
            },
    }
    premadeCodecTypeSpec_module_InitialResponse = &thrift.TypeSpec{
        FullName: "module.InitialResponse",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.InitialResponse",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewInitialResponse() },
            },
    }
    premadeCodecTypeSpec_module_FinalResponse = &thrift.TypeSpec{
        FullName: "module.FinalResponse",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.FinalResponse",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewFinalResponse() },
            },
    }
    premadeCodecTypeSpec_module_SinkPayload = &thrift.TypeSpec{
        FullName: "module.SinkPayload",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.SinkPayload",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewSinkPayload() },
            },
    }
    premadeCodecTypeSpec_module_CompatibleWithKeywordSink = &thrift.TypeSpec{
        FullName: "module.CompatibleWithKeywordSink",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.CompatibleWithKeywordSink",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewCompatibleWithKeywordSink() },
            },
    }
    premadeCodecTypeSpec_module_InitialException = &thrift.TypeSpec{
        FullName: "module.InitialException",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.InitialException",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewInitialException() },
            },
    }
    premadeCodecTypeSpec_module_SinkException1 = &thrift.TypeSpec{
        FullName: "module.SinkException1",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.SinkException1",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewSinkException1() },
            },
    }
    premadeCodecTypeSpec_i64 = &thrift.TypeSpec{
        FullName: "i64",
        CodecPrimitiveSpec:
            &thrift.CodecPrimitiveSpec{
                PrimitiveType: thrift.CODEC_PRIMITIVE_TYPE_I64,
            },
    }
    premadeCodecTypeSpec_module_SinkException2 = &thrift.TypeSpec{
        FullName: "module.SinkException2",
        CodecStructSpec:
            &thrift.CodecStructSpec{
                ScopedName: "module.SinkException2",
                IsUnion:    false,
                NewFunc:    func() thrift.Struct { return NewSinkException2() },
            },
    }
)

// Premade struct specs
var (
    premadeStructSpec_InitialResponse =
        &thrift.StructSpec{
            Name:                 "InitialResponse",
            ScopedName:           "module.InitialResponse",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.STRING,
                    Name:                 "content",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_string,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "content": 0,
            },
        }
    premadeStructSpec_FinalResponse =
        &thrift.StructSpec{
            Name:                 "FinalResponse",
            ScopedName:           "module.FinalResponse",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.STRING,
                    Name:                 "content",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_string,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "content": 0,
            },
        }
    premadeStructSpec_SinkPayload =
        &thrift.StructSpec{
            Name:                 "SinkPayload",
            ScopedName:           "module.SinkPayload",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.STRING,
                    Name:                 "content",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_string,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "content": 0,
            },
        }
    premadeStructSpec_CompatibleWithKeywordSink =
        &thrift.StructSpec{
            Name:                 "CompatibleWithKeywordSink",
            ScopedName:           "module.CompatibleWithKeywordSink",
            IsUnion:              false,
            IsException:          false,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.STRING,
                    Name:                 "sink",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_string,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "sink": 0,
            },
        }
    premadeStructSpec_InitialException =
        &thrift.StructSpec{
            Name:                 "InitialException",
            ScopedName:           "module.InitialException",
            IsUnion:              false,
            IsException:          true,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.STRING,
                    Name:                 "reason",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_string,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "reason": 0,
            },
        }
    premadeStructSpec_SinkException1 =
        &thrift.StructSpec{
            Name:                 "SinkException1",
            ScopedName:           "module.SinkException1",
            IsUnion:              false,
            IsException:          true,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.STRING,
                    Name:                 "reason",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_string,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "reason": 0,
            },
        }
    premadeStructSpec_SinkException2 =
        &thrift.StructSpec{
            Name:                 "SinkException2",
            ScopedName:           "module.SinkException2",
            IsUnion:              false,
            IsException:          true,
            FieldSpecs:           []thrift.FieldSpec{
                {
                    ID:                   1,
                    WireType:             thrift.I64,
                    Name:                 "reason",
                    ReflectIndex:         0,
                    IsOptional:           false,
                    ValueTypeSpec:        premadeCodecTypeSpec_i64,
                    MustBeSetToSerialize: false,
                },
            },
            FieldSpecIDToIndex:   map[int16]int{
                1: 0,
            },
            FieldSpecNameToIndex: map[string]int{
                "reason": 0,
            },
        }
)

var premadeCodecSpecsMap = func() map[string]*thrift.TypeSpec {
    fbthriftTypeSpecsMap := make(map[string]*thrift.TypeSpec)
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_string.FullName] = premadeCodecTypeSpec_string
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_InitialResponse.FullName] = premadeCodecTypeSpec_module_InitialResponse
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_FinalResponse.FullName] = premadeCodecTypeSpec_module_FinalResponse
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_SinkPayload.FullName] = premadeCodecTypeSpec_module_SinkPayload
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_CompatibleWithKeywordSink.FullName] = premadeCodecTypeSpec_module_CompatibleWithKeywordSink
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_InitialException.FullName] = premadeCodecTypeSpec_module_InitialException
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_SinkException1.FullName] = premadeCodecTypeSpec_module_SinkException1
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_i64.FullName] = premadeCodecTypeSpec_i64
    fbthriftTypeSpecsMap[premadeCodecTypeSpec_module_SinkException2.FullName] = premadeCodecTypeSpec_module_SinkException2
    return fbthriftTypeSpecsMap
}()

// GetMetadataThriftType (INTERNAL USE ONLY).
// Returns metadata TypeSpec for a given full type name.
func GetCodecTypeSpec(fullName string) *thrift.TypeSpec {
    return premadeCodecSpecsMap[fullName]
}
