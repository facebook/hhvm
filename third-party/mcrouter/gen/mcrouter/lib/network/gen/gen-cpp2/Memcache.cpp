/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mcrouter/lib/network/gen/gen-cpp2/Memcache.h"
#include "mcrouter/lib/network/gen/gen-cpp2/Memcache.tcc"
#include "mcrouter/lib/network/gen/gen-cpp2/MemcacheService_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace facebook { namespace memcache { namespace thrift {
std::unique_ptr<apache::thrift::AsyncProcessor> MemcacheSvIf::getProcessor() {
  return std::make_unique<MemcacheAsyncProcessor>(this);
}



void MemcacheSvIf::async_eb_mcAdd(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McAddReply>> callback, const facebook::memcache::McAddRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcAdd is unimplemented"));
}


void MemcacheSvIf::async_eb_mcAppend(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McAppendReply>> callback, const facebook::memcache::McAppendRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcAppend is unimplemented"));
}


void MemcacheSvIf::async_eb_mcCas(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McCasReply>> callback, const facebook::memcache::McCasRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcCas is unimplemented"));
}


void MemcacheSvIf::async_eb_mcDecr(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McDecrReply>> callback, const facebook::memcache::McDecrRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcDecr is unimplemented"));
}


void MemcacheSvIf::async_eb_mcDelete(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McDeleteReply>> callback, const facebook::memcache::McDeleteRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcDelete is unimplemented"));
}


void MemcacheSvIf::async_eb_mcFlushAll(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McFlushAllReply>> callback, const facebook::memcache::McFlushAllRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcFlushAll is unimplemented"));
}


void MemcacheSvIf::async_eb_mcFlushRe(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McFlushReReply>> callback, const facebook::memcache::McFlushReRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcFlushRe is unimplemented"));
}


void MemcacheSvIf::async_eb_mcGat(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McGatReply>> callback, const facebook::memcache::McGatRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcGat is unimplemented"));
}


void MemcacheSvIf::async_eb_mcGats(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McGatsReply>> callback, const facebook::memcache::McGatsRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcGats is unimplemented"));
}


void MemcacheSvIf::async_eb_mcGet(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McGetReply>> callback, const facebook::memcache::McGetRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcGet is unimplemented"));
}


void MemcacheSvIf::async_eb_mcGets(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McGetsReply>> callback, const facebook::memcache::McGetsRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcGets is unimplemented"));
}


void MemcacheSvIf::async_eb_mcIncr(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McIncrReply>> callback, const facebook::memcache::McIncrRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcIncr is unimplemented"));
}


void MemcacheSvIf::async_eb_mcLeaseGet(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McLeaseGetReply>> callback, const facebook::memcache::McLeaseGetRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcLeaseGet is unimplemented"));
}


void MemcacheSvIf::async_eb_mcLeaseSet(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McLeaseSetReply>> callback, const facebook::memcache::McLeaseSetRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcLeaseSet is unimplemented"));
}


void MemcacheSvIf::async_eb_mcMetaget(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McMetagetReply>> callback, const facebook::memcache::McMetagetRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcMetaget is unimplemented"));
}


void MemcacheSvIf::async_eb_mcPrepend(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McPrependReply>> callback, const facebook::memcache::McPrependRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcPrepend is unimplemented"));
}


void MemcacheSvIf::async_eb_mcReplace(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McReplaceReply>> callback, const facebook::memcache::McReplaceRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcReplace is unimplemented"));
}


void MemcacheSvIf::async_eb_mcSet(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McSetReply>> callback, const facebook::memcache::McSetRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcSet is unimplemented"));
}


void MemcacheSvIf::async_eb_mcTouch(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McTouchReply>> callback, const facebook::memcache::McTouchRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcTouch is unimplemented"));
}


void MemcacheSvIf::async_eb_mcVersion(std::unique_ptr<apache::thrift::HandlerCallback<facebook::memcache::McVersionReply>> callback, const facebook::memcache::McVersionRequest& /*request*/) {
  callback->exception(apache::thrift::TApplicationException("Function mcVersion is unimplemented"));
}

const char* MemcacheAsyncProcessor::getServiceName() {
  return "Memcache";
}

void MemcacheAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<MemcacheSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void MemcacheAsyncProcessor::processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> MemcacheAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const MemcacheAsyncProcessor::ProcessMap& MemcacheAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const MemcacheAsyncProcessor::ProcessMap MemcacheAsyncProcessor::binaryProcessMap_ {
  {"mcAdd", &MemcacheAsyncProcessor::process_mcAdd<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcAppend", &MemcacheAsyncProcessor::process_mcAppend<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcCas", &MemcacheAsyncProcessor::process_mcCas<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcDecr", &MemcacheAsyncProcessor::process_mcDecr<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcDelete", &MemcacheAsyncProcessor::process_mcDelete<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcFlushAll", &MemcacheAsyncProcessor::process_mcFlushAll<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcFlushRe", &MemcacheAsyncProcessor::process_mcFlushRe<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcGat", &MemcacheAsyncProcessor::process_mcGat<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcGats", &MemcacheAsyncProcessor::process_mcGats<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcGet", &MemcacheAsyncProcessor::process_mcGet<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcGets", &MemcacheAsyncProcessor::process_mcGets<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcIncr", &MemcacheAsyncProcessor::process_mcIncr<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcLeaseGet", &MemcacheAsyncProcessor::process_mcLeaseGet<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcLeaseSet", &MemcacheAsyncProcessor::process_mcLeaseSet<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcMetaget", &MemcacheAsyncProcessor::process_mcMetaget<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcPrepend", &MemcacheAsyncProcessor::process_mcPrepend<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcReplace", &MemcacheAsyncProcessor::process_mcReplace<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcSet", &MemcacheAsyncProcessor::process_mcSet<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcTouch", &MemcacheAsyncProcessor::process_mcTouch<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mcVersion", &MemcacheAsyncProcessor::process_mcVersion<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const MemcacheAsyncProcessor::ProcessMap& MemcacheAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const MemcacheAsyncProcessor::ProcessMap MemcacheAsyncProcessor::compactProcessMap_ {
  {"mcAdd", &MemcacheAsyncProcessor::process_mcAdd<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcAppend", &MemcacheAsyncProcessor::process_mcAppend<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcCas", &MemcacheAsyncProcessor::process_mcCas<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcDecr", &MemcacheAsyncProcessor::process_mcDecr<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcDelete", &MemcacheAsyncProcessor::process_mcDelete<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcFlushAll", &MemcacheAsyncProcessor::process_mcFlushAll<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcFlushRe", &MemcacheAsyncProcessor::process_mcFlushRe<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcGat", &MemcacheAsyncProcessor::process_mcGat<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcGats", &MemcacheAsyncProcessor::process_mcGats<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcGet", &MemcacheAsyncProcessor::process_mcGet<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcGets", &MemcacheAsyncProcessor::process_mcGets<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcIncr", &MemcacheAsyncProcessor::process_mcIncr<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcLeaseGet", &MemcacheAsyncProcessor::process_mcLeaseGet<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcLeaseSet", &MemcacheAsyncProcessor::process_mcLeaseSet<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcMetaget", &MemcacheAsyncProcessor::process_mcMetaget<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcPrepend", &MemcacheAsyncProcessor::process_mcPrepend<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcReplace", &MemcacheAsyncProcessor::process_mcReplace<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcSet", &MemcacheAsyncProcessor::process_mcSet<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcTouch", &MemcacheAsyncProcessor::process_mcTouch<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mcVersion", &MemcacheAsyncProcessor::process_mcVersion<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // facebook::memcache::thrift
