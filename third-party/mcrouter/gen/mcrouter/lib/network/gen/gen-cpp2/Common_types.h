/**
 * Autogenerated by Thrift for Common.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "mcrouter/lib/carbon/gen-cpp2/carbon_types.h"
#include "mcrouter/lib/carbon/gen-cpp2/carbon_result_types.h"
#include <mcrouter/lib/carbon/CarbonProtocolReader.h>

namespace apache {
namespace thrift {
namespace tag {
struct key;
struct result;
struct value;
struct message;
struct appSpecificErrorCode;
struct key;
struct result;
struct message;
struct stats;
struct appSpecificErrorCode;
struct key;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct result;
struct message;
struct appSpecificErrorCode;
struct key;
struct result;
struct response;
struct message;
struct appSpecificErrorCode;
struct result;
struct reason;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_value
#define APACHE_THRIFT_ACCESSOR_value
APACHE_THRIFT_DEFINE_ACCESSOR(value);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stats
#define APACHE_THRIFT_ACCESSOR_stats
APACHE_THRIFT_DEFINE_ACCESSOR(stats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_key
#define APACHE_THRIFT_ACCESSOR_key
APACHE_THRIFT_DEFINE_ACCESSOR(key);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_response
#define APACHE_THRIFT_ACCESSOR_response
APACHE_THRIFT_DEFINE_ACCESSOR(response);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
#define APACHE_THRIFT_ACCESSOR_appSpecificErrorCode
APACHE_THRIFT_DEFINE_ACCESSOR(appSpecificErrorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_result
#define APACHE_THRIFT_ACCESSOR_result
APACHE_THRIFT_DEFINE_ACCESSOR(result);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reason
#define APACHE_THRIFT_ACCESSOR_reason
APACHE_THRIFT_DEFINE_ACCESSOR(reason);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace memcache { namespace thrift {
class McVersionRequest;
class McVersionReply;
class McStatsRequest;
class McStatsReply;
class McShutdownRequest;
class McShutdownReply;
class McQuitRequest;
class McQuitReply;
class McExecRequest;
class McExecReply;
class GoAwayAcknowledgement;
class GoAwayRequest;
}}} // facebook::memcache::thrift
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace memcache { namespace thrift {
class McVersionRequest  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McVersionRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McVersionRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McVersionRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McVersionRequest(McVersionRequest&&) = default;

  McVersionRequest(const McVersionRequest&) = default;


  McVersionRequest& operator=(McVersionRequest&&) = default;

  McVersionRequest& operator=(const McVersionRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McVersionRequest() {}

 private:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McVersionRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McVersionRequest& __x, const McVersionRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McVersionRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McVersionRequest& __x, const McVersionRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McVersionRequest& __x, const McVersionRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McVersionRequest& __x, const McVersionRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McVersionRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McVersionRequest_key_struct_setter&& key_) {
    key = std::forward<T_McVersionRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McVersionRequest >;
  friend void swap(McVersionRequest& a, McVersionRequest& b);
};

template <class Protocol_>
uint32_t McVersionRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McVersionReply  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McVersionReply;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McVersionReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McVersionReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, folly::IOBuf value__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McVersionReply(McVersionReply&&) = default;

  McVersionReply(const McVersionReply&) = default;


  McVersionReply& operator=(McVersionReply&&) = default;

  McVersionReply& operator=(const McVersionReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McVersionReply() {}

 private:
   ::carbon::Result result;
 private:
  folly::IOBuf value;
 private:
  ::std::string message;
 private:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool value;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McVersionReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McVersionReply& __x, const McVersionReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McVersionReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McVersionReply& __x, const McVersionReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McVersionReply& __x, const McVersionReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McVersionReply& __x, const McVersionReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> value_ref() const& {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> value_ref() const&& {
    return {std::move(this->value), __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> value_ref() & {
    return {this->value, __isset.value};
  }

  template <typename..., typename T = folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> value_ref() && {
    return {std::move(this->value), __isset.value};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const folly::IOBuf& get_value() const& {
    return value;
  }

  folly::IOBuf get_value() && {
    return std::move(value);
  }

  template <typename T_McVersionReply_value_struct_setter = folly::IOBuf>
  folly::IOBuf& set_value(T_McVersionReply_value_struct_setter&& value_) {
    value = std::forward<T_McVersionReply_value_struct_setter>(value_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.value = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return value;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McVersionReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McVersionReply_message_struct_setter&& message_) {
    message = std::forward<T_McVersionReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McVersionReply >;
  friend void swap(McVersionReply& a, McVersionReply& b);
};

template <class Protocol_>
uint32_t McVersionReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McStatsRequest  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McStatsRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McStatsRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McStatsRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McStatsRequest(McStatsRequest&&) = default;

  McStatsRequest(const McStatsRequest&) = default;


  McStatsRequest& operator=(McStatsRequest&&) = default;

  McStatsRequest& operator=(const McStatsRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McStatsRequest() {}

 private:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McStatsRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McStatsRequest& __x, const McStatsRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McStatsRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McStatsRequest& __x, const McStatsRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McStatsRequest& __x, const McStatsRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McStatsRequest& __x, const McStatsRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McStatsRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McStatsRequest_key_struct_setter&& key_) {
    key = std::forward<T_McStatsRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McStatsRequest >;
  friend void swap(McStatsRequest& a, McStatsRequest& b);
};

template <class Protocol_>
uint32_t McStatsRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McStatsReply  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McStatsReply;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McStatsReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McStatsReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, ::std::vector<::std::string> stats__arg, int16_t appSpecificErrorCode__arg);

  McStatsReply(McStatsReply&&) = default;

  McStatsReply(const McStatsReply&) = default;


  McStatsReply& operator=(McStatsReply&&) = default;

  McStatsReply& operator=(const McStatsReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McStatsReply() {}

 private:
   ::carbon::Result result;
 private:
  ::std::string message;
 private:
  ::std::vector<::std::string> stats;
 private:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool stats;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McStatsReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McStatsReply& __x, const McStatsReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McStatsReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McStatsReply& __x, const McStatsReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McStatsReply& __x, const McStatsReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McStatsReply& __x, const McStatsReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stats_ref() const& {
    return {this->stats, __isset.stats};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stats_ref() const&& {
    return {std::move(this->stats), __isset.stats};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stats_ref() & {
    return {this->stats, __isset.stats};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stats_ref() && {
    return {std::move(this->stats), __isset.stats};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McStatsReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McStatsReply_message_struct_setter&& message_) {
    message = std::forward<T_McStatsReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }
  const ::std::vector<::std::string>& get_stats() const&;
  ::std::vector<::std::string> get_stats() &&;

  template <typename T_McStatsReply_stats_struct_setter = ::std::vector<::std::string>>
  ::std::vector<::std::string>& set_stats(T_McStatsReply_stats_struct_setter&& stats_) {
    stats = std::forward<T_McStatsReply_stats_struct_setter>(stats_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.stats = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return stats;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McStatsReply >;
  friend void swap(McStatsReply& a, McStatsReply& b);
};

template <class Protocol_>
uint32_t McStatsReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McShutdownRequest  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McShutdownRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McShutdownRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McShutdownRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McShutdownRequest(McShutdownRequest&&) = default;

  McShutdownRequest(const McShutdownRequest&) = default;


  McShutdownRequest& operator=(McShutdownRequest&&) = default;

  McShutdownRequest& operator=(const McShutdownRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McShutdownRequest() {}

 private:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McShutdownRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McShutdownRequest& __x, const McShutdownRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McShutdownRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McShutdownRequest& __x, const McShutdownRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McShutdownRequest& __x, const McShutdownRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McShutdownRequest& __x, const McShutdownRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McShutdownRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McShutdownRequest_key_struct_setter&& key_) {
    key = std::forward<T_McShutdownRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McShutdownRequest >;
  friend void swap(McShutdownRequest& a, McShutdownRequest& b);
};

template <class Protocol_>
uint32_t McShutdownRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McShutdownReply  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McShutdownReply;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McShutdownReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McShutdownReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McShutdownReply(McShutdownReply&&) = default;

  McShutdownReply(const McShutdownReply&) = default;


  McShutdownReply& operator=(McShutdownReply&&) = default;

  McShutdownReply& operator=(const McShutdownReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McShutdownReply() {}

 private:
   ::carbon::Result result;
 private:
  ::std::string message;
 private:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McShutdownReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McShutdownReply& __x, const McShutdownReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McShutdownReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McShutdownReply& __x, const McShutdownReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McShutdownReply& __x, const McShutdownReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McShutdownReply& __x, const McShutdownReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McShutdownReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McShutdownReply_message_struct_setter&& message_) {
    message = std::forward<T_McShutdownReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McShutdownReply >;
  friend void swap(McShutdownReply& a, McShutdownReply& b);
};

template <class Protocol_>
uint32_t McShutdownReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McQuitRequest  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McQuitRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McQuitRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McQuitRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McQuitRequest(McQuitRequest&&) = default;

  McQuitRequest(const McQuitRequest&) = default;


  McQuitRequest& operator=(McQuitRequest&&) = default;

  McQuitRequest& operator=(const McQuitRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McQuitRequest() {}

 private:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McQuitRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McQuitRequest& __x, const McQuitRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McQuitRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McQuitRequest& __x, const McQuitRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McQuitRequest& __x, const McQuitRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McQuitRequest& __x, const McQuitRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McQuitRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McQuitRequest_key_struct_setter&& key_) {
    key = std::forward<T_McQuitRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McQuitRequest >;
  friend void swap(McQuitRequest& a, McQuitRequest& b);
};

template <class Protocol_>
uint32_t McQuitRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McQuitReply  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McQuitReply;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McQuitReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McQuitReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McQuitReply(McQuitReply&&) = default;

  McQuitReply(const McQuitReply&) = default;


  McQuitReply& operator=(McQuitReply&&) = default;

  McQuitReply& operator=(const McQuitReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McQuitReply() {}

 private:
   ::carbon::Result result;
 private:
  ::std::string message;
 private:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McQuitReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McQuitReply& __x, const McQuitReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McQuitReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McQuitReply& __x, const McQuitReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McQuitReply& __x, const McQuitReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McQuitReply& __x, const McQuitReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McQuitReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McQuitReply_message_struct_setter&& message_) {
    message = std::forward<T_McQuitReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McQuitReply >;
  friend void swap(McQuitReply& a, McQuitReply& b);
};

template <class Protocol_>
uint32_t McQuitReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McExecRequest  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McExecRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McExecRequest() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McExecRequest(apache::thrift::FragileConstructor,  ::carbon::thrift::IOBufKey key__arg);

  McExecRequest(McExecRequest&&) = default;

  McExecRequest(const McExecRequest&) = default;


  McExecRequest& operator=(McExecRequest&&) = default;

  McExecRequest& operator=(const McExecRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McExecRequest() {}

 private:
   ::carbon::thrift::IOBufKey key;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool key;
  } __isset = {};
  bool operator==(const McExecRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McExecRequest& __x, const McExecRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McExecRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const McExecRequest& __x, const McExecRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McExecRequest& __x, const McExecRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McExecRequest& __x, const McExecRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> key_ref() const& {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> key_ref() const&& {
    return {std::move(this->key), __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> key_ref() & {
    return {this->key, __isset.key};
  }

  template <typename..., typename T =  ::carbon::thrift::IOBufKey>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> key_ref() && {
    return {std::move(this->key), __isset.key};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

  const  ::carbon::thrift::IOBufKey& get_key() const& {
    return key;
  }

   ::carbon::thrift::IOBufKey get_key() && {
    return std::move(key);
  }

  template <typename T_McExecRequest_key_struct_setter =  ::carbon::thrift::IOBufKey>
   ::carbon::thrift::IOBufKey& set_key(T_McExecRequest_key_struct_setter&& key_) {
    key = std::forward<T_McExecRequest_key_struct_setter>(key_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.key = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return key;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McExecRequest >;
  friend void swap(McExecRequest& a, McExecRequest& b);
};

template <class Protocol_>
uint32_t McExecRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class McExecReply  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = McExecReply;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  McExecReply() :
      result( ::carbon::Result::UNKNOWN),
      appSpecificErrorCode(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  McExecReply(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string response__arg, ::std::string message__arg, int16_t appSpecificErrorCode__arg);

  McExecReply(McExecReply&&) = default;

  McExecReply(const McExecReply&) = default;


  McExecReply& operator=(McExecReply&&) = default;

  McExecReply& operator=(const McExecReply&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~McExecReply() {}

 private:
   ::carbon::Result result;
 private:
  ::std::string response;
 private:
  ::std::string message;
 private:
  int16_t appSpecificErrorCode;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool response;
    bool message;
    bool appSpecificErrorCode;
  } __isset = {};
  bool operator==(const McExecReply& rhs) const;
#ifndef SWIG
  friend bool operator!=(const McExecReply& __x, const McExecReply& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const McExecReply& rhs) const;
#ifndef SWIG
  friend bool operator>(const McExecReply& __x, const McExecReply& __y) {
    return __y < __x;
  }
  friend bool operator<=(const McExecReply& __x, const McExecReply& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const McExecReply& __x, const McExecReply& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> response_ref() const& {
    return {this->response, __isset.response};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> response_ref() const&& {
    return {std::move(this->response), __isset.response};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> response_ref() & {
    return {this->response, __isset.response};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> response_ref() && {
    return {std::move(this->response), __isset.response};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> appSpecificErrorCode_ref() const& {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> appSpecificErrorCode_ref() const&& {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> appSpecificErrorCode_ref() & {
    return {this->appSpecificErrorCode, __isset.appSpecificErrorCode};
  }

  template <typename..., typename T = int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> appSpecificErrorCode_ref() && {
    return {std::move(this->appSpecificErrorCode), __isset.appSpecificErrorCode};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_response() const& {
    return response;
  }

  ::std::string get_response() && {
    return std::move(response);
  }

  template <typename T_McExecReply_response_struct_setter = ::std::string>
  ::std::string& set_response(T_McExecReply_response_struct_setter&& response_) {
    response = std::forward<T_McExecReply_response_struct_setter>(response_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.response = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return response;
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_McExecReply_message_struct_setter = ::std::string>
  ::std::string& set_message(T_McExecReply_message_struct_setter&& message_) {
    message = std::forward<T_McExecReply_message_struct_setter>(message_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.message = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return message;
  }

  int16_t get_appSpecificErrorCode() const {
    return appSpecificErrorCode;
  }

  int16_t& set_appSpecificErrorCode(int16_t appSpecificErrorCode_) {
    appSpecificErrorCode = appSpecificErrorCode_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.appSpecificErrorCode = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return appSpecificErrorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< McExecReply >;
  friend void swap(McExecReply& a, McExecReply& b);
};

template <class Protocol_>
uint32_t McExecReply::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class GoAwayAcknowledgement  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = GoAwayAcknowledgement;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  GoAwayAcknowledgement() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  GoAwayAcknowledgement(apache::thrift::FragileConstructor);

  GoAwayAcknowledgement(GoAwayAcknowledgement&&) = default;

  GoAwayAcknowledgement(const GoAwayAcknowledgement&) = default;


  GoAwayAcknowledgement& operator=(GoAwayAcknowledgement&&) = default;

  GoAwayAcknowledgement& operator=(const GoAwayAcknowledgement&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~GoAwayAcknowledgement() {}

  bool operator==(const GoAwayAcknowledgement& rhs) const;
#ifndef SWIG
  friend bool operator!=(const GoAwayAcknowledgement& __x, const GoAwayAcknowledgement& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const GoAwayAcknowledgement& rhs) const;
#ifndef SWIG
  friend bool operator>(const GoAwayAcknowledgement& __x, const GoAwayAcknowledgement& __y) {
    return __y < __x;
  }
  friend bool operator<=(const GoAwayAcknowledgement& __x, const GoAwayAcknowledgement& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const GoAwayAcknowledgement& __x, const GoAwayAcknowledgement& __y) {
    return !(__x < __y);
  }
#endif

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< GoAwayAcknowledgement >;
  friend void swap(GoAwayAcknowledgement& a, GoAwayAcknowledgement& b);
};

template <class Protocol_>
uint32_t GoAwayAcknowledgement::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
namespace facebook { namespace memcache { namespace thrift {
class GoAwayRequest  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;

 public:
  using __fbthrift_cpp2_type = GoAwayRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  GoAwayRequest() :
      result( ::carbon::Result::UNKNOWN) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  GoAwayRequest(apache::thrift::FragileConstructor,  ::carbon::Result result__arg, ::std::string reason__arg);

  GoAwayRequest(GoAwayRequest&&) = default;

  GoAwayRequest(const GoAwayRequest&) = default;


  GoAwayRequest& operator=(GoAwayRequest&&) = default;

  GoAwayRequest& operator=(const GoAwayRequest&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  void __clear();

  virtual ~GoAwayRequest() {}

 private:
   ::carbon::Result result;
 private:
  ::std::string reason;

 public:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool result;
    bool reason;
  } __isset = {};
  bool operator==(const GoAwayRequest& rhs) const;
#ifndef SWIG
  friend bool operator!=(const GoAwayRequest& __x, const GoAwayRequest& __y) {
    return !(__x == __y);
  }
#endif
  bool operator<(const GoAwayRequest& rhs) const;
#ifndef SWIG
  friend bool operator>(const GoAwayRequest& __x, const GoAwayRequest& __y) {
    return __y < __x;
  }
  friend bool operator<=(const GoAwayRequest& __x, const GoAwayRequest& __y) {
    return !(__y < __x);
  }
  friend bool operator>=(const GoAwayRequest& __x, const GoAwayRequest& __y) {
    return !(__x < __y);
  }
#endif

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> result_ref() const& {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> result_ref() const&& {
    return {std::move(this->result), __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> result_ref() & {
    return {this->result, __isset.result};
  }

  template <typename..., typename T =  ::carbon::Result>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> result_ref() && {
    return {std::move(this->result), __isset.result};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> reason_ref() const& {
    return {this->reason, __isset.reason};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> reason_ref() const&& {
    return {std::move(this->reason), __isset.reason};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> reason_ref() & {
    return {this->reason, __isset.reason};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> reason_ref() && {
    return {std::move(this->reason), __isset.reason};
  }
THRIFT_IGNORE_ISSET_USE_WARNING_END

   ::carbon::Result get_result() const {
    return result;
  }

   ::carbon::Result& set_result( ::carbon::Result result_) {
    result = result_;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.result = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return result;
  }

  const ::std::string& get_reason() const& {
    return reason;
  }

  ::std::string get_reason() && {
    return std::move(reason);
  }

  template <typename T_GoAwayRequest_reason_struct_setter = ::std::string>
  ::std::string& set_reason(T_GoAwayRequest_reason_struct_setter&& reason_) {
    reason = std::forward<T_GoAwayRequest_reason_struct_setter>(reason_);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    __isset.reason = true;
THRIFT_IGNORE_ISSET_USE_WARNING_END
    return reason;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
  // user defined code (cpp2.methods = ...)
  
  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);



 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< GoAwayRequest >;
  friend void swap(GoAwayRequest& a, GoAwayRequest& b);
};

template <class Protocol_>
uint32_t GoAwayRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::memcache::thrift
