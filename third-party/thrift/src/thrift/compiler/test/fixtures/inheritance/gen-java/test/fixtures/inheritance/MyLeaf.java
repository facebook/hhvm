/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.inheritance;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;
import reactor.core.publisher.Mono;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("MyLeaf")
public interface MyLeaf extends java.io.Closeable, com.facebook.thrift.util.BlockingService, test.fixtures.inheritance.MyNode {
    static com.facebook.thrift.server.RpcServerHandlerBuilder<MyLeaf> serverHandlerBuilder(MyLeaf _serverImpl) {
        return new com.facebook.thrift.server.RpcServerHandlerBuilder<MyLeaf>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                return new MyLeafRpcServerHandler(impl, eventHandlers);
            }
        };
    }

    static com.facebook.thrift.client.ClientBuilder<MyLeaf> clientBuilder() {
        return new ClientBuilder<MyLeaf>() {
            @java.lang.Override
            public MyLeaf build(Mono<RpcClient> rpcClientMono) {
                MyLeaf.Reactive _delegate =
                    new MyLeafReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                return new MyLeafReactiveBlockingWrapper(_delegate);
            }
        };
    }

    @com.facebook.swift.service.ThriftService("MyLeaf")
    public interface Async extends java.io.Closeable, com.facebook.thrift.util.AsyncService, test.fixtures.inheritance.MyNode.Async {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<MyLeaf.Async> serverHandlerBuilder(MyLeaf.Async _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<MyLeaf.Async>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new MyLeafRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<MyLeaf.Async> clientBuilder() {
            return new ClientBuilder<MyLeaf.Async>() {
                @java.lang.Override
                public MyLeaf.Async build(Mono<RpcClient> rpcClientMono) {
                    MyLeaf.Reactive _delegate =
                        new MyLeafReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                    return new MyLeafReactiveAsyncWrapper(_delegate);
                }
            };
        }

        @java.lang.Override void close();

        @ThriftMethod(value = "do_leaf")
        ListenableFuture<Void> doLeaf();

        default ListenableFuture<Void> doLeaf(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Void>> doLeafWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "do_leaf")
    void doLeaf() throws org.apache.thrift.TException;

    default void doLeaf(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Void> doLeafWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("MyLeaf")
    interface Reactive extends reactor.core.Disposable, com.facebook.thrift.util.ReactiveService, test.fixtures.inheritance.MyNode.Reactive {
        static com.facebook.thrift.server.RpcServerHandlerBuilder<MyLeaf.Reactive> serverHandlerBuilder(MyLeaf.Reactive _serverImpl) {
            return new com.facebook.thrift.server.RpcServerHandlerBuilder<MyLeaf.Reactive>(_serverImpl) {
                @java.lang.Override
                public com.facebook.thrift.server.RpcServerHandler build() {
                    return new MyLeafRpcServerHandler(impl, eventHandlers);
                }
            };
        }

        static com.facebook.thrift.client.ClientBuilder<MyLeaf.Reactive> clientBuilder() {
            return new ClientBuilder<MyLeaf.Reactive>() {
                @java.lang.Override
                public MyLeaf.Reactive build(Mono<RpcClient> rpcClientMono) {
                    return new MyLeafReactiveClient(protocolId, rpcClientMono, headers, persistentHeaders);
                }
            };
        }

        @ThriftMethod(value = "do_leaf")
        reactor.core.publisher.Mono<Void> doLeaf();

        default reactor.core.publisher.Mono<Void> doLeaf(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Void>> doLeafWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
