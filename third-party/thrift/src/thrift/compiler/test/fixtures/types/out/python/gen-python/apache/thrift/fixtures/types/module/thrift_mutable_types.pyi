#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import typing as _typing
import builtins


import folly.iobuf as _fbthrift_iobuf
import apache.thrift.fixtures.types.module.thrift_abstract_types as _fbthrift_python_abstract_types
import thrift.python.types as _fbthrift_python_types
import thrift.python.mutable_types as _fbthrift_python_mutable_types
import thrift.python.mutable_exceptions as _fbthrift_python_mutable_exceptions
import thrift.python.mutable_containers as _fbthrift_python_mutable_containers

import apache.thrift.fixtures.types.included.thrift_mutable_types as _fbthrift__apache__thrift__fixtures__types__included__thrift_mutable_types

from apache.thrift.fixtures.types.module.thrift_enums import (
    has_bitwise_ops as _fbthrift_has_bitwise_ops,
    is_unscoped as _fbthrift_is_unscoped,
    MyForwardRefEnum as _fbthrift_MyForwardRefEnum,
)
has_bitwise_ops = _fbthrift_has_bitwise_ops
is_unscoped = _fbthrift_is_unscoped
MyForwardRefEnum = _fbthrift_MyForwardRefEnum


@_typing.final
class empty_struct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.empty_struct):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.empty_struct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.empty_struct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.empty_struct": ...  # type: ignore
_fbthrift_empty_struct = empty_struct

@_typing.final
class decorated_struct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.decorated_struct):
    @property
    def field(self) -> builtins.str: ...
    @field.setter
    def field(self, value: builtins.str) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[builtins.str]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.decorated_struct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.decorated_struct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.decorated_struct": ...  # type: ignore
_fbthrift_decorated_struct = decorated_struct

@_typing.final
class ContainerStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.ContainerStruct):
    @property
    def fieldB(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @fieldB.setter
    def fieldB(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    @property
    def fieldC(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @fieldC.setter
    def fieldC(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    @property
    def fieldD(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @fieldD.setter
    def fieldD(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    @property
    def fieldE(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @fieldE.setter
    def fieldE(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    @property
    def fieldF(self) -> _fbthrift_python_mutable_containers.MutableSet[builtins.int]: ...
    @fieldF.setter
    def fieldF(self, value: _fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper) -> None: ...

    @property
    def fieldG(self) -> _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]: ...
    @fieldG.setter
    def fieldG(self, value: _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    @property
    def fieldH(self) -> _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]: ...
    @fieldH.setter
    def fieldH(self, value: _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    @property
    def fieldA(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @fieldA.setter
    def fieldA(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        fieldB: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldC: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldD: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldE: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldF: _typing.Optional[_fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper]=...,
        fieldG: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...,
        fieldH: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...,
        fieldA: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        fieldB: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldC: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldD: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldE: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        fieldF: _typing.Optional[_fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper]=...,
        fieldG: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...,
        fieldH: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...,
        fieldA: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[builtins.int], _fbthrift_python_mutable_containers.MutableList[builtins.int], _fbthrift_python_mutable_containers.MutableList[builtins.int], _fbthrift_python_mutable_containers.MutableList[builtins.int], _fbthrift_python_mutable_containers.MutableSet[builtins.int], _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str], _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str], _fbthrift_python_mutable_containers.MutableList[builtins.int]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.ContainerStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.ContainerStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ContainerStruct": ...  # type: ignore
_fbthrift_ContainerStruct = ContainerStruct

@_typing.final
class CppTypeStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.CppTypeStruct):
    @property
    def fieldA(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @fieldA.setter
    def fieldA(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        fieldA: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        fieldA: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[builtins.int]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.CppTypeStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.CppTypeStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CppTypeStruct": ...  # type: ignore
_fbthrift_CppTypeStruct = CppTypeStruct

@_typing.final
class VirtualStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.VirtualStruct):
    @property
    def MyIntField(self) -> builtins.int: ...
    @MyIntField.setter
    def MyIntField(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        MyIntField: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        MyIntField: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.VirtualStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.VirtualStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.VirtualStruct": ...  # type: ignore
_fbthrift_VirtualStruct = VirtualStruct

@_typing.final
class MyStructWithForwardRefEnum(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.MyStructWithForwardRefEnum):
    @property
    def a(self) -> _fbthrift_MyForwardRefEnum: ...
    @a.setter
    def a(self, value: _fbthrift_MyForwardRefEnum) -> None: ...

    @property
    def b(self) -> _fbthrift_MyForwardRefEnum: ...
    @b.setter
    def b(self, value: _fbthrift_MyForwardRefEnum) -> None: ...

    def __init__(
        self, *,
        a: _typing.Optional[_fbthrift_MyForwardRefEnum]=...,
        b: _typing.Optional[_fbthrift_MyForwardRefEnum]=...
    ) -> None: ...

    def __call__(
        self, *,
        a: _typing.Optional[_fbthrift_MyForwardRefEnum]=...,
        b: _typing.Optional[_fbthrift_MyForwardRefEnum]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_MyForwardRefEnum, _fbthrift_MyForwardRefEnum]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.MyStructWithForwardRefEnum": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.MyStructWithForwardRefEnum": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStructWithForwardRefEnum": ...  # type: ignore
_fbthrift_MyStructWithForwardRefEnum = MyStructWithForwardRefEnum

@_typing.final
class TrivialNumeric(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.TrivialNumeric):
    @property
    def a(self) -> builtins.int: ...
    @a.setter
    def a(self, value: builtins.int) -> None: ...

    @property
    def b(self) -> builtins.bool: ...
    @b.setter
    def b(self, value: builtins.bool) -> None: ...

    def __init__(
        self, *,
        a: _typing.Optional[builtins.int]=...,
        b: _typing.Optional[builtins.bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        a: _typing.Optional[builtins.int]=...,
        b: _typing.Optional[builtins.bool]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.bool]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.TrivialNumeric": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.TrivialNumeric": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.TrivialNumeric": ...  # type: ignore
_fbthrift_TrivialNumeric = TrivialNumeric

@_typing.final
class TrivialNestedWithDefault(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.TrivialNestedWithDefault):
    @property
    def z(self) -> builtins.int: ...
    @z.setter
    def z(self, value: builtins.int) -> None: ...

    @property
    def n(self) -> _fbthrift_TrivialNumeric: ...
    @n.setter
    def n(self, value: _fbthrift_TrivialNumeric) -> None: ...

    def __init__(
        self, *,
        z: _typing.Optional[builtins.int]=...,
        n: _typing.Optional[_fbthrift_TrivialNumeric]=...
    ) -> None: ...

    def __call__(
        self, *,
        z: _typing.Optional[builtins.int]=...,
        n: _typing.Optional[_fbthrift_TrivialNumeric]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, _fbthrift_TrivialNumeric]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.TrivialNestedWithDefault": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.TrivialNestedWithDefault": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.TrivialNestedWithDefault": ...  # type: ignore
_fbthrift_TrivialNestedWithDefault = TrivialNestedWithDefault

@_typing.final
class ComplexString(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.ComplexString):
    @property
    def a(self) -> builtins.str: ...
    @a.setter
    def a(self, value: builtins.str) -> None: ...

    @property
    def b(self) -> _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int]: ...
    @b.setter
    def b(self, value: _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    def __init__(
        self, *,
        a: _typing.Optional[builtins.str]=...,
        b: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        a: _typing.Optional[builtins.str]=...,
        b: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str, _fbthrift_python_mutable_containers.MutableMap[builtins.str, builtins.int]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.ComplexString": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.ComplexString": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ComplexString": ...  # type: ignore
_fbthrift_ComplexString = ComplexString

@_typing.final
class ComplexNestedWithDefault(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.ComplexNestedWithDefault):
    @property
    def z(self) -> builtins.str: ...
    @z.setter
    def z(self, value: builtins.str) -> None: ...

    @property
    def n(self) -> _fbthrift_ComplexString: ...
    @n.setter
    def n(self, value: _fbthrift_ComplexString) -> None: ...

    def __init__(
        self, *,
        z: _typing.Optional[builtins.str]=...,
        n: _typing.Optional[_fbthrift_ComplexString]=...
    ) -> None: ...

    def __call__(
        self, *,
        z: _typing.Optional[builtins.str]=...,
        n: _typing.Optional[_fbthrift_ComplexString]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.str, _fbthrift_ComplexString]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.ComplexNestedWithDefault": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.ComplexNestedWithDefault": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ComplexNestedWithDefault": ...  # type: ignore
_fbthrift_ComplexNestedWithDefault = ComplexNestedWithDefault

@_typing.final
class MinPadding(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.MinPadding):
    @property
    def small(self) -> builtins.int: ...
    @small.setter
    def small(self, value: builtins.int) -> None: ...

    @property
    def big(self) -> builtins.int: ...
    @big.setter
    def big(self, value: builtins.int) -> None: ...

    @property
    def medium(self) -> builtins.int: ...
    @medium.setter
    def medium(self, value: builtins.int) -> None: ...

    @property
    def biggish(self) -> builtins.int: ...
    @biggish.setter
    def biggish(self, value: builtins.int) -> None: ...

    @property
    def tiny(self) -> builtins.int: ...
    @tiny.setter
    def tiny(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        small: _typing.Optional[builtins.int]=...,
        big: _typing.Optional[builtins.int]=...,
        medium: _typing.Optional[builtins.int]=...,
        biggish: _typing.Optional[builtins.int]=...,
        tiny: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        small: _typing.Optional[builtins.int]=...,
        big: _typing.Optional[builtins.int]=...,
        medium: _typing.Optional[builtins.int]=...,
        biggish: _typing.Optional[builtins.int]=...,
        tiny: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.int, builtins.int, builtins.int, builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.MinPadding": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.MinPadding": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MinPadding": ...  # type: ignore
_fbthrift_MinPadding = MinPadding

@_typing.final
class MinPaddingWithCustomType(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.MinPaddingWithCustomType):
    @property
    def small(self) -> builtins.int: ...
    @small.setter
    def small(self, value: builtins.int) -> None: ...

    @property
    def biggish(self) -> builtins.int: ...
    @biggish.setter
    def biggish(self, value: builtins.int) -> None: ...

    @property
    def medium(self) -> builtins.int: ...
    @medium.setter
    def medium(self, value: builtins.int) -> None: ...

    @property
    def big(self) -> builtins.int: ...
    @big.setter
    def big(self, value: builtins.int) -> None: ...

    @property
    def tiny(self) -> builtins.int: ...
    @tiny.setter
    def tiny(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        small: _typing.Optional[builtins.int]=...,
        biggish: _typing.Optional[builtins.int]=...,
        medium: _typing.Optional[builtins.int]=...,
        big: _typing.Optional[builtins.int]=...,
        tiny: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        small: _typing.Optional[builtins.int]=...,
        biggish: _typing.Optional[builtins.int]=...,
        medium: _typing.Optional[builtins.int]=...,
        big: _typing.Optional[builtins.int]=...,
        tiny: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.int, builtins.int, builtins.int, builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.MinPaddingWithCustomType": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.MinPaddingWithCustomType": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MinPaddingWithCustomType": ...  # type: ignore
_fbthrift_MinPaddingWithCustomType = MinPaddingWithCustomType

@_typing.final
class MyStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.MyStruct):
    @property
    def MyIntField(self) -> builtins.int: ...
    @MyIntField.setter
    def MyIntField(self, value: builtins.int) -> None: ...

    @property
    def MyStringField(self) -> builtins.str: ...
    @MyStringField.setter
    def MyStringField(self, value: builtins.str) -> None: ...

    @property
    def majorVer(self) -> builtins.int: ...
    @majorVer.setter
    def majorVer(self, value: builtins.int) -> None: ...

    @property
    def data(self) -> _fbthrift_MyDataItem: ...
    @data.setter
    def data(self, value: _fbthrift_MyDataItem) -> None: ...

    def __init__(
        self, *,
        MyIntField: _typing.Optional[builtins.int]=...,
        MyStringField: _typing.Optional[builtins.str]=...,
        majorVer: _typing.Optional[builtins.int]=...,
        data: _typing.Optional[_fbthrift_MyDataItem]=...
    ) -> None: ...

    def __call__(
        self, *,
        MyIntField: _typing.Optional[builtins.int]=...,
        MyStringField: _typing.Optional[builtins.str]=...,
        majorVer: _typing.Optional[builtins.int]=...,
        data: _typing.Optional[_fbthrift_MyDataItem]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.str, builtins.int, _fbthrift_MyDataItem]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.MyStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.MyStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStruct": ...  # type: ignore
_fbthrift_MyStruct = MyStruct

@_typing.final
class MyDataItem(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.MyDataItem):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.MyDataItem": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.MyDataItem": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyDataItem": ...  # type: ignore
_fbthrift_MyDataItem = MyDataItem

@_typing.final
class Renaming(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.Renaming):
    @property
    def foo(self) -> builtins.int: ...
    @foo.setter
    def foo(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        foo: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        foo: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.Renaming": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.Renaming": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Renaming": ...  # type: ignore
_fbthrift_Renaming = Renaming

@_typing.final
class AnnotatedTypes(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.AnnotatedTypes):
    @property
    def binary_field(self) -> builtins.bytes: ...
    @binary_field.setter
    def binary_field(self, value: builtins.bytes) -> None: ...

    @property
    def list_field(self) -> _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]]: ...
    @list_field.setter
    def list_field(self, value: _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.bytes, _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.AnnotatedTypes": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.AnnotatedTypes": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AnnotatedTypes": ...  # type: ignore
_fbthrift_AnnotatedTypes = AnnotatedTypes

@_typing.final
class ForwardUsageRoot(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.ForwardUsageRoot):
    @property
    def ForwardUsageStruct(self) -> _typing.Optional[_fbthrift_ForwardUsageStruct]: ...
    @ForwardUsageStruct.setter
    def ForwardUsageStruct(self, value: _typing.Optional[_fbthrift_ForwardUsageStruct]) -> None: ...

    @property
    def ForwardUsageByRef(self) -> _typing.Optional[_fbthrift_ForwardUsageByRef]: ...
    @ForwardUsageByRef.setter
    def ForwardUsageByRef(self, value: _typing.Optional[_fbthrift_ForwardUsageByRef]) -> None: ...

    def __init__(
        self, *,
        ForwardUsageStruct: _typing.Optional[_fbthrift_ForwardUsageStruct]=...,
        ForwardUsageByRef: _typing.Optional[_fbthrift_ForwardUsageByRef]=...
    ) -> None: ...

    def __call__(
        self, *,
        ForwardUsageStruct: _typing.Optional[_fbthrift_ForwardUsageStruct]=...,
        ForwardUsageByRef: _typing.Optional[_fbthrift_ForwardUsageByRef]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_ForwardUsageStruct, _fbthrift_ForwardUsageByRef]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.ForwardUsageRoot": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.ForwardUsageRoot": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ForwardUsageRoot": ...  # type: ignore
_fbthrift_ForwardUsageRoot = ForwardUsageRoot

@_typing.final
class ForwardUsageStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.ForwardUsageStruct):
    @property
    def foo(self) -> _typing.Optional[_fbthrift_ForwardUsageRoot]: ...
    @foo.setter
    def foo(self, value: _typing.Optional[_fbthrift_ForwardUsageRoot]) -> None: ...

    def __init__(
        self, *,
        foo: _typing.Optional[_fbthrift_ForwardUsageRoot]=...
    ) -> None: ...

    def __call__(
        self, *,
        foo: _typing.Optional[_fbthrift_ForwardUsageRoot]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_ForwardUsageRoot]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.ForwardUsageStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.ForwardUsageStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ForwardUsageStruct": ...  # type: ignore
_fbthrift_ForwardUsageStruct = ForwardUsageStruct

@_typing.final
class ForwardUsageByRef(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.ForwardUsageByRef):
    @property
    def foo(self) -> _typing.Optional[_fbthrift_ForwardUsageRoot]: ...
    @foo.setter
    def foo(self, value: _typing.Optional[_fbthrift_ForwardUsageRoot]) -> None: ...

    def __init__(
        self, *,
        foo: _typing.Optional[_fbthrift_ForwardUsageRoot]=...
    ) -> None: ...

    def __call__(
        self, *,
        foo: _typing.Optional[_fbthrift_ForwardUsageRoot]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_ForwardUsageRoot]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.ForwardUsageByRef": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.ForwardUsageByRef": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ForwardUsageByRef": ...  # type: ignore
_fbthrift_ForwardUsageByRef = ForwardUsageByRef

@_typing.final
class IncompleteMap(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.IncompleteMap):
    @property
    def field(self) -> _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_IncompleteMapDep]]: ...
    @field.setter
    def field(self, value: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_IncompleteMapDep]] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_IncompleteMapDep] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_IncompleteMapDep] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_IncompleteMapDep]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.IncompleteMap": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.IncompleteMap": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.IncompleteMap": ...  # type: ignore
_fbthrift_IncompleteMap = IncompleteMap

@_typing.final
class IncompleteMapDep(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.IncompleteMapDep):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.IncompleteMapDep": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.IncompleteMapDep": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.IncompleteMapDep": ...  # type: ignore
_fbthrift_IncompleteMapDep = IncompleteMapDep

@_typing.final
class CompleteMap(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.CompleteMap):
    @property
    def field(self) -> _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_CompleteMapDep]]: ...
    @field.setter
    def field(self, value: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_CompleteMapDep]] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_CompleteMapDep] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_CompleteMapDep] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableMap[builtins.int, _fbthrift_CompleteMapDep]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.CompleteMap": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.CompleteMap": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CompleteMap": ...  # type: ignore
_fbthrift_CompleteMap = CompleteMap

@_typing.final
class CompleteMapDep(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.CompleteMapDep):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.CompleteMapDep": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.CompleteMapDep": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CompleteMapDep": ...  # type: ignore
_fbthrift_CompleteMapDep = CompleteMapDep

@_typing.final
class IncompleteList(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.IncompleteList):
    @property
    def field(self) -> _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_IncompleteListDep]]: ...
    @field.setter
    def field(self, value: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_IncompleteListDep]] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_IncompleteListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_IncompleteListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[_fbthrift_IncompleteListDep]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.IncompleteList": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.IncompleteList": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.IncompleteList": ...  # type: ignore
_fbthrift_IncompleteList = IncompleteList

@_typing.final
class IncompleteListDep(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.IncompleteListDep):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.IncompleteListDep": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.IncompleteListDep": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.IncompleteListDep": ...  # type: ignore
_fbthrift_IncompleteListDep = IncompleteListDep

@_typing.final
class CompleteList(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.CompleteList):
    @property
    def field(self) -> _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_CompleteListDep]]: ...
    @field.setter
    def field(self, value: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_CompleteListDep]] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_CompleteListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_CompleteListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[_fbthrift_CompleteListDep]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.CompleteList": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.CompleteList": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CompleteList": ...  # type: ignore
_fbthrift_CompleteList = CompleteList

@_typing.final
class CompleteListDep(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.CompleteListDep):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[None]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.CompleteListDep": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.CompleteListDep": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CompleteListDep": ...  # type: ignore
_fbthrift_CompleteListDep = CompleteListDep

@_typing.final
class AdaptedList(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.AdaptedList):
    @property
    def field(self) -> _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_AdaptedListDep]]: ...
    @field.setter
    def field(self, value: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_AdaptedListDep]] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_AdaptedListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_AdaptedListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[_fbthrift_AdaptedListDep]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.AdaptedList": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.AdaptedList": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AdaptedList": ...  # type: ignore
_fbthrift_AdaptedList = AdaptedList

@_typing.final
class AdaptedListDep(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.AdaptedListDep):
    @property
    def field(self) -> _fbthrift_AdaptedList: ...
    @field.setter
    def field(self, value: _fbthrift_AdaptedList) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_AdaptedList]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_AdaptedList]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_AdaptedList]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.AdaptedListDep": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.AdaptedListDep": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AdaptedListDep": ...  # type: ignore
_fbthrift_AdaptedListDep = AdaptedListDep

@_typing.final
class DependentAdaptedList(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.DependentAdaptedList):
    @property
    def field(self) -> _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_DependentAdaptedListDep]]: ...
    @field.setter
    def field(self, value: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_DependentAdaptedListDep]] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_DependentAdaptedListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[_fbthrift_DependentAdaptedListDep] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[_fbthrift_DependentAdaptedListDep]]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.DependentAdaptedList": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.DependentAdaptedList": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.DependentAdaptedList": ...  # type: ignore
_fbthrift_DependentAdaptedList = DependentAdaptedList

@_typing.final
class DependentAdaptedListDep(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.DependentAdaptedListDep):
    @property
    def field(self) -> _typing.Optional[builtins.int]: ...
    @field.setter
    def field(self, value: _typing.Optional[builtins.int]) -> None: ...

    def __init__(
        self, *,
        field: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        field: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.DependentAdaptedListDep": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.DependentAdaptedListDep": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.DependentAdaptedListDep": ...  # type: ignore
_fbthrift_DependentAdaptedListDep = DependentAdaptedListDep

@_typing.final
class AllocatorAware(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.AllocatorAware):
    @property
    def aa_list(self) -> _fbthrift_python_mutable_containers.MutableList[builtins.int]: ...
    @aa_list.setter
    def aa_list(self, value: _fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper) -> None: ...

    @property
    def aa_set(self) -> _fbthrift_python_mutable_containers.MutableSet[builtins.int]: ...
    @aa_set.setter
    def aa_set(self, value: _fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper) -> None: ...

    @property
    def aa_map(self) -> _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.int]: ...
    @aa_map.setter
    def aa_map(self, value: _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper) -> None: ...

    @property
    def aa_string(self) -> builtins.str: ...
    @aa_string.setter
    def aa_string(self, value: builtins.str) -> None: ...

    @property
    def not_a_container(self) -> builtins.int: ...
    @not_a_container.setter
    def not_a_container(self, value: builtins.int) -> None: ...

    @property
    def aa_unique(self) -> builtins.int: ...
    @aa_unique.setter
    def aa_unique(self, value: builtins.int) -> None: ...

    @property
    def aa_shared(self) -> builtins.int: ...
    @aa_shared.setter
    def aa_shared(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        aa_list: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        aa_set: _typing.Optional[_fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper]=...,
        aa_map: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...,
        aa_string: _typing.Optional[builtins.str]=...,
        not_a_container: _typing.Optional[builtins.int]=...,
        aa_unique: _typing.Optional[builtins.int]=...,
        aa_shared: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        aa_list: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...,
        aa_set: _typing.Optional[_fbthrift_python_mutable_containers.MutableSet[builtins.int] | _fbthrift_python_mutable_types._ThriftSetWrapper]=...,
        aa_map: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.int] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...,
        aa_string: _typing.Optional[builtins.str]=...,
        not_a_container: _typing.Optional[builtins.int]=...,
        aa_unique: _typing.Optional[builtins.int]=...,
        aa_shared: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_python_mutable_containers.MutableList[builtins.int], _fbthrift_python_mutable_containers.MutableSet[builtins.int], _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.int], builtins.str, builtins.int, builtins.int, builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.AllocatorAware": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.AllocatorAware": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AllocatorAware": ...  # type: ignore
_fbthrift_AllocatorAware = AllocatorAware

@_typing.final
class AllocatorAware2(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.AllocatorAware2):
    @property
    def not_a_container(self) -> builtins.int: ...
    @not_a_container.setter
    def not_a_container(self, value: builtins.int) -> None: ...

    @property
    def box_field(self) -> _typing.Optional[builtins.int]: ...
    @box_field.setter
    def box_field(self, value: _typing.Optional[builtins.int]) -> None: ...

    def __init__(
        self, *,
        not_a_container: _typing.Optional[builtins.int]=...,
        box_field: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        not_a_container: _typing.Optional[builtins.int]=...,
        box_field: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.AllocatorAware2": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.AllocatorAware2": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AllocatorAware2": ...  # type: ignore
_fbthrift_AllocatorAware2 = AllocatorAware2

@_typing.final
class TypedefStruct(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.TypedefStruct):
    @property
    def i32_field(self) -> builtins.int: ...
    @i32_field.setter
    def i32_field(self, value: builtins.int) -> None: ...

    @property
    def IntTypedef_field(self) -> builtins.int: ...
    @IntTypedef_field.setter
    def IntTypedef_field(self, value: builtins.int) -> None: ...

    @property
    def UintTypedef_field(self) -> builtins.int: ...
    @UintTypedef_field.setter
    def UintTypedef_field(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        i32_field: _typing.Optional[builtins.int]=...,
        IntTypedef_field: _typing.Optional[builtins.int]=...,
        UintTypedef_field: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        i32_field: _typing.Optional[builtins.int]=...,
        IntTypedef_field: _typing.Optional[builtins.int]=...,
        UintTypedef_field: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int, builtins.int, builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.TypedefStruct": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.TypedefStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.TypedefStruct": ...  # type: ignore
_fbthrift_TypedefStruct = TypedefStruct

@_typing.final
class StructWithDoubleUnderscores(_fbthrift_python_mutable_types.MutableStruct, _fbthrift_python_abstract_types.StructWithDoubleUnderscores):
    @property
    def _StructWithDoubleUnderscores__field(self) -> builtins.int: ...
    @_StructWithDoubleUnderscores__field.setter
    def _StructWithDoubleUnderscores__field(self, value: builtins.int) -> None: ...

    def __init__(
        self, *,
        _StructWithDoubleUnderscores__field: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __call__(
        self, *,
        _StructWithDoubleUnderscores__field: _typing.Optional[builtins.int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> "apache.thrift.fixtures.types.module.thrift_types.StructWithDoubleUnderscores": ...  # type: ignore
    def _to_mutable_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "apache.thrift.fixtures.types.module.types.StructWithDoubleUnderscores": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.StructWithDoubleUnderscores": ...  # type: ignore
_fbthrift_StructWithDoubleUnderscores = StructWithDoubleUnderscores

TBinary = builtins.bytes
IntTypedef = builtins.int
UintTypedef = builtins.int
SomeListOfTypeMap_2468 = _fbthrift_python_mutable_containers.MutableList[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]]
TBinary_8623 = builtins.bytes
i32_9314 = builtins.int
list_i32_9187 = _fbthrift_python_mutable_containers.MutableList[builtins.int]
map_i32_i32_9565 = _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.int]
map_i32_string_1261 = _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]
set_i32_7070 = _fbthrift_python_mutable_containers.MutableSet[builtins.int]
set_i32_7194 = _fbthrift_python_mutable_containers.MutableSet[builtins.int]
string_5252 = builtins.str


class _fbthrift_SomeService_bounce_map_args(_fbthrift_python_mutable_types.MutableStruct):
    m: _typing.Final[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]] = ...

    def __init__(
        self, *,
        m: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str] | _fbthrift_python_mutable_types._ThriftMapWrapper]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]]]]: ...


class _fbthrift_SomeService_bounce_map_result(_fbthrift_python_mutable_types.MutableStruct):
    success: _typing.Final[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]]

    def __init__(
        self, *, success: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _fbthrift_python_mutable_containers.MutableMap[builtins.int, builtins.str],
        ]]]: ...


class _fbthrift_SomeService_binary_keyed_map_args(_fbthrift_python_mutable_types.MutableStruct):
    r: _typing.Final[_fbthrift_python_mutable_containers.MutableList[builtins.int]] = ...

    def __init__(
        self, *,
        r: _typing.Optional[_fbthrift_python_mutable_containers.MutableList[builtins.int] | _fbthrift_python_mutable_types._ThriftListWrapper]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_python_mutable_containers.MutableList[builtins.int]]]]: ...


class _fbthrift_SomeService_binary_keyed_map_result(_fbthrift_python_mutable_types.MutableStruct):
    success: _typing.Final[_fbthrift_python_mutable_containers.MutableMap[builtins.bytes, builtins.int]]

    def __init__(
        self, *, success: _typing.Optional[_fbthrift_python_mutable_containers.MutableMap[builtins.bytes, builtins.int]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _fbthrift_python_mutable_containers.MutableMap[builtins.bytes, builtins.int],
        ]]]: ...
