/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/lib/thrift/RpcMetadata_extra.h"

namespace apache {
namespace thrift {
namespace tag {
struct compressionAlgos;
struct protocol;
struct name;
struct kind;
struct seqId;
struct clientTimeoutMs;
struct queueTimeoutMs;
struct priority;
struct otherMetadata;
struct host;
struct url;
struct crc32c;
struct flags;
struct loadMetric;
struct compression;
struct protocol;
struct seqId;
struct otherMetadata;
struct load;
struct crc32c;
struct compression;
struct compression;
struct otherMetadata;
struct opaque;
struct interfaceKind;
struct otherMetadata;
struct compression;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_compressionAlgos
#define APACHE_THRIFT_ACCESSOR_compressionAlgos
APACHE_THRIFT_DEFINE_ACCESSOR(compressionAlgos);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_protocol
#define APACHE_THRIFT_ACCESSOR_protocol
APACHE_THRIFT_DEFINE_ACCESSOR(protocol);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_kind
#define APACHE_THRIFT_ACCESSOR_kind
APACHE_THRIFT_DEFINE_ACCESSOR(kind);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_seqId
#define APACHE_THRIFT_ACCESSOR_seqId
APACHE_THRIFT_DEFINE_ACCESSOR(seqId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clientTimeoutMs
#define APACHE_THRIFT_ACCESSOR_clientTimeoutMs
APACHE_THRIFT_DEFINE_ACCESSOR(clientTimeoutMs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_queueTimeoutMs
#define APACHE_THRIFT_ACCESSOR_queueTimeoutMs
APACHE_THRIFT_DEFINE_ACCESSOR(queueTimeoutMs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_priority
#define APACHE_THRIFT_ACCESSOR_priority
APACHE_THRIFT_DEFINE_ACCESSOR(priority);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_otherMetadata
#define APACHE_THRIFT_ACCESSOR_otherMetadata
APACHE_THRIFT_DEFINE_ACCESSOR(otherMetadata);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_host
#define APACHE_THRIFT_ACCESSOR_host
APACHE_THRIFT_DEFINE_ACCESSOR(host);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_url
#define APACHE_THRIFT_ACCESSOR_url
APACHE_THRIFT_DEFINE_ACCESSOR(url);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_crc32c
#define APACHE_THRIFT_ACCESSOR_crc32c
APACHE_THRIFT_DEFINE_ACCESSOR(crc32c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flags
#define APACHE_THRIFT_ACCESSOR_flags
APACHE_THRIFT_DEFINE_ACCESSOR(flags);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_loadMetric
#define APACHE_THRIFT_ACCESSOR_loadMetric
APACHE_THRIFT_DEFINE_ACCESSOR(loadMetric);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compression
#define APACHE_THRIFT_ACCESSOR_compression
APACHE_THRIFT_DEFINE_ACCESSOR(compression);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_protocol
#define APACHE_THRIFT_ACCESSOR_protocol
APACHE_THRIFT_DEFINE_ACCESSOR(protocol);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_seqId
#define APACHE_THRIFT_ACCESSOR_seqId
APACHE_THRIFT_DEFINE_ACCESSOR(seqId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_otherMetadata
#define APACHE_THRIFT_ACCESSOR_otherMetadata
APACHE_THRIFT_DEFINE_ACCESSOR(otherMetadata);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_load
#define APACHE_THRIFT_ACCESSOR_load
APACHE_THRIFT_DEFINE_ACCESSOR(load);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_crc32c
#define APACHE_THRIFT_ACCESSOR_crc32c
APACHE_THRIFT_DEFINE_ACCESSOR(crc32c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compression
#define APACHE_THRIFT_ACCESSOR_compression
APACHE_THRIFT_DEFINE_ACCESSOR(compression);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compression
#define APACHE_THRIFT_ACCESSOR_compression
APACHE_THRIFT_DEFINE_ACCESSOR(compression);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_otherMetadata
#define APACHE_THRIFT_ACCESSOR_otherMetadata
APACHE_THRIFT_DEFINE_ACCESSOR(otherMetadata);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_opaque
#define APACHE_THRIFT_ACCESSOR_opaque
APACHE_THRIFT_DEFINE_ACCESSOR(opaque);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_interfaceKind
#define APACHE_THRIFT_ACCESSOR_interfaceKind
APACHE_THRIFT_DEFINE_ACCESSOR(interfaceKind);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_otherMetadata
#define APACHE_THRIFT_ACCESSOR_otherMetadata
APACHE_THRIFT_DEFINE_ACCESSOR(otherMetadata);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compression
#define APACHE_THRIFT_ACCESSOR_compression
APACHE_THRIFT_DEFINE_ACCESSOR(compression);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace apache { namespace thrift {

enum class ProtocolId {
  BINARY = 0,
  COMPACT = 2
};




enum class RpcKind {
  SINGLE_REQUEST_SINGLE_RESPONSE = 0,
  SINGLE_REQUEST_NO_RESPONSE = 1,
  STREAMING_REQUEST_SINGLE_RESPONSE = 2,
  STREAMING_REQUEST_NO_RESPONSE = 3,
  SINGLE_REQUEST_STREAMING_RESPONSE = 4,
  STREAMING_REQUEST_STREAMING_RESPONSE = 5,
  SINK = 6
};




enum class RpcPriority {
  HIGH_IMPORTANT = 0,
  HIGH = 1,
  IMPORTANT = 2,
  NORMAL = 3,
  BEST_EFFORT = 4,
  N_PRIORITIES = 5
};




enum class CompressionAlgorithm {
  NONE = 0,
  ZLIB = 1,
  ZSTD = 2
};




enum class RequestRpcMetadataFlags {
  UNKNOWN = 0,
  QUERY_SERVER_LOAD = 1
};




enum class InterfaceKind {
  USER = 0,
  DEBUGGING = 1
};




}} // apache::thrift
namespace std {


template<> struct hash<typename ::apache::thrift::ProtocolId> : public apache::thrift::detail::enum_hash<typename ::apache::thrift::ProtocolId> {};
template<> struct equal_to<typename ::apache::thrift::ProtocolId> : public apache::thrift::detail::enum_equal_to<typename ::apache::thrift::ProtocolId> {};


template<> struct hash<typename ::apache::thrift::RpcKind> : public apache::thrift::detail::enum_hash<typename ::apache::thrift::RpcKind> {};
template<> struct equal_to<typename ::apache::thrift::RpcKind> : public apache::thrift::detail::enum_equal_to<typename ::apache::thrift::RpcKind> {};


template<> struct hash<typename ::apache::thrift::RpcPriority> : public apache::thrift::detail::enum_hash<typename ::apache::thrift::RpcPriority> {};
template<> struct equal_to<typename ::apache::thrift::RpcPriority> : public apache::thrift::detail::enum_equal_to<typename ::apache::thrift::RpcPriority> {};


template<> struct hash<typename ::apache::thrift::CompressionAlgorithm> : public apache::thrift::detail::enum_hash<typename ::apache::thrift::CompressionAlgorithm> {};
template<> struct equal_to<typename ::apache::thrift::CompressionAlgorithm> : public apache::thrift::detail::enum_equal_to<typename ::apache::thrift::CompressionAlgorithm> {};


template<> struct hash<typename ::apache::thrift::RequestRpcMetadataFlags> : public apache::thrift::detail::enum_hash<typename ::apache::thrift::RequestRpcMetadataFlags> {};
template<> struct equal_to<typename ::apache::thrift::RequestRpcMetadataFlags> : public apache::thrift::detail::enum_equal_to<typename ::apache::thrift::RequestRpcMetadataFlags> {};


template<> struct hash<typename ::apache::thrift::InterfaceKind> : public apache::thrift::detail::enum_hash<typename ::apache::thrift::InterfaceKind> {};
template<> struct equal_to<typename ::apache::thrift::InterfaceKind> : public apache::thrift::detail::enum_equal_to<typename ::apache::thrift::InterfaceKind> {};


} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::apache::thrift::ProtocolId>;

template <> struct TEnumTraits<::apache::thrift::ProtocolId> {
  using type = ::apache::thrift::ProtocolId;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::BINARY; }
  static constexpr type max() { return type::COMPACT; }
};


template <> struct TEnumDataStorage<::apache::thrift::RpcKind>;

template <> struct TEnumTraits<::apache::thrift::RpcKind> {
  using type = ::apache::thrift::RpcKind;

  static constexpr std::size_t const size = 7;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::SINGLE_REQUEST_SINGLE_RESPONSE; }
  static constexpr type max() { return type::SINK; }
};


template <> struct TEnumDataStorage<::apache::thrift::RpcPriority>;

template <> struct TEnumTraits<::apache::thrift::RpcPriority> {
  using type = ::apache::thrift::RpcPriority;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::HIGH_IMPORTANT; }
  static constexpr type max() { return type::N_PRIORITIES; }
};


template <> struct TEnumDataStorage<::apache::thrift::CompressionAlgorithm>;

template <> struct TEnumTraits<::apache::thrift::CompressionAlgorithm> {
  using type = ::apache::thrift::CompressionAlgorithm;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::NONE; }
  static constexpr type max() { return type::ZSTD; }
};


template <> struct TEnumDataStorage<::apache::thrift::RequestRpcMetadataFlags>;

template <> struct TEnumTraits<::apache::thrift::RequestRpcMetadataFlags> {
  using type = ::apache::thrift::RequestRpcMetadataFlags;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::QUERY_SERVER_LOAD; }
};


template <> struct TEnumDataStorage<::apache::thrift::InterfaceKind>;

template <> struct TEnumTraits<::apache::thrift::InterfaceKind> {
  using type = ::apache::thrift::InterfaceKind;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::USER; }
  static constexpr type max() { return type::DEBUGGING; }
};


}} // apache::thrift

namespace apache { namespace thrift {

using _ProtocolId_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<ProtocolId>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _ProtocolId_EnumMapFactory::ValuesToNamesMapType _ProtocolId_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _ProtocolId_EnumMapFactory::NamesToValuesMapType _ProtocolId_NAMES_TO_VALUES;

using _RpcKind_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<RpcKind>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _RpcKind_EnumMapFactory::ValuesToNamesMapType _RpcKind_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _RpcKind_EnumMapFactory::NamesToValuesMapType _RpcKind_NAMES_TO_VALUES;

using _RpcPriority_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<RpcPriority>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _RpcPriority_EnumMapFactory::ValuesToNamesMapType _RpcPriority_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _RpcPriority_EnumMapFactory::NamesToValuesMapType _RpcPriority_NAMES_TO_VALUES;

using _CompressionAlgorithm_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<CompressionAlgorithm>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _CompressionAlgorithm_EnumMapFactory::ValuesToNamesMapType _CompressionAlgorithm_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _CompressionAlgorithm_EnumMapFactory::NamesToValuesMapType _CompressionAlgorithm_NAMES_TO_VALUES;

using _RequestRpcMetadataFlags_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<RequestRpcMetadataFlags>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _RequestRpcMetadataFlags_EnumMapFactory::ValuesToNamesMapType _RequestRpcMetadataFlags_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _RequestRpcMetadataFlags_EnumMapFactory::NamesToValuesMapType _RequestRpcMetadataFlags_NAMES_TO_VALUES;

using _InterfaceKind_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<InterfaceKind>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _InterfaceKind_EnumMapFactory::ValuesToNamesMapType _InterfaceKind_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _InterfaceKind_EnumMapFactory::NamesToValuesMapType _InterfaceKind_NAMES_TO_VALUES;

}} // apache::thrift

// END declare_enums
// BEGIN struct_indirection

// END struct_indirection
// BEGIN forward_declare
namespace apache { namespace thrift {
class NegotiationParameters;
class RequestRpcMetadata;
class ResponseRpcMetadata;
class StreamPayloadMetadata;
class RequestSetupMetadata;
class HeadersPayloadContent;
class HeadersPayloadMetadata;
}} // apache::thrift
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace apache { namespace thrift {
class NegotiationParameters final : private apache::thrift::detail::st::ComparisonOperators<NegotiationParameters> {
 public:

  NegotiationParameters() :
      compressionAlgos(0) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  NegotiationParameters(apache::thrift::FragileConstructor, std::uint64_t compressionAlgos__arg);

  NegotiationParameters(NegotiationParameters&&) = default;

  NegotiationParameters(const NegotiationParameters&) = default;

  NegotiationParameters& operator=(NegotiationParameters&&) = default;

  NegotiationParameters& operator=(const NegotiationParameters&) = default;
  void __clear();
 private:
  std::uint64_t compressionAlgos;

 public:
  struct __isset {
    bool compressionAlgos;
  } __isset = {};
  bool operator==(const NegotiationParameters& rhs) const;
  bool operator<(const NegotiationParameters& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint64_t&> compressionAlgos_ref() const& {
    return {compressionAlgos, __isset.compressionAlgos};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint64_t&&> compressionAlgos_ref() const&& {
    return {std::move(compressionAlgos), __isset.compressionAlgos};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint64_t&> compressionAlgos_ref() & {
    return {compressionAlgos, __isset.compressionAlgos};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint64_t&&> compressionAlgos_ref() && {
    return {std::move(compressionAlgos), __isset.compressionAlgos};
  }

  const std::uint64_t* get_compressionAlgos() const& {
    return __isset.compressionAlgos ? std::addressof(compressionAlgos) : nullptr;
  }

  std::uint64_t* get_compressionAlgos() & {
    return __isset.compressionAlgos ? std::addressof(compressionAlgos) : nullptr;
  }
  std::uint64_t* get_compressionAlgos() && = delete;

  std::uint64_t& set_compressionAlgos(std::uint64_t compressionAlgos_) {
    compressionAlgos = compressionAlgos_;
    __isset.compressionAlgos = true;
    return compressionAlgos;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< NegotiationParameters >;
};

void swap(NegotiationParameters& a, NegotiationParameters& b);

template <class Protocol_>
uint32_t NegotiationParameters::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {
class RequestRpcMetadata final : private apache::thrift::detail::st::ComparisonOperators<RequestRpcMetadata> {
 public:

  RequestRpcMetadata();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RequestRpcMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::ProtocolId protocol__arg, ::std::string name__arg,  ::apache::thrift::RpcKind kind__arg, int32_t seqId__arg, int32_t clientTimeoutMs__arg, int32_t queueTimeoutMs__arg,  ::apache::thrift::RpcPriority priority__arg, ::std::map<::std::string, ::std::string> otherMetadata__arg, ::std::string host__arg, ::std::string url__arg, std::uint32_t crc32c__arg, std::uint64_t flags__arg, ::std::string loadMetric__arg,  ::apache::thrift::CompressionAlgorithm compression__arg);

  RequestRpcMetadata(RequestRpcMetadata&&) = default;

  RequestRpcMetadata(const RequestRpcMetadata&) = default;

  RequestRpcMetadata& operator=(RequestRpcMetadata&&) = default;

  RequestRpcMetadata& operator=(const RequestRpcMetadata&) = default;
  void __clear();

  ~RequestRpcMetadata();

 private:
   ::apache::thrift::ProtocolId protocol;
 private:
  ::std::string name;
 private:
   ::apache::thrift::RpcKind kind;
 private:
  int32_t seqId;
 private:
  int32_t clientTimeoutMs;
 private:
  int32_t queueTimeoutMs;
 private:
   ::apache::thrift::RpcPriority priority;
 private:
  ::std::map<::std::string, ::std::string> otherMetadata;
 private:
  ::std::string host;
 private:
  ::std::string url;
 private:
  std::uint32_t crc32c;
 private:
  std::uint64_t flags;
 private:
  ::std::string loadMetric;
 private:
   ::apache::thrift::CompressionAlgorithm compression;

 public:
  struct __isset {
    bool protocol;
    bool name;
    bool kind;
    bool seqId;
    bool clientTimeoutMs;
    bool queueTimeoutMs;
    bool priority;
    bool otherMetadata;
    bool host;
    bool url;
    bool crc32c;
    bool flags;
    bool loadMetric;
    bool compression;
  } __isset = {};
  bool operator==(const RequestRpcMetadata& rhs) const;
  bool operator<(const RequestRpcMetadata& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::ProtocolId&> protocol_ref() const& {
    return {protocol, __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::ProtocolId&&> protocol_ref() const&& {
    return {std::move(protocol), __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::ProtocolId&> protocol_ref() & {
    return {protocol, __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::ProtocolId&&> protocol_ref() && {
    return {std::move(protocol), __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&> name_ref() const& {
    return {name, __isset.name};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&&> name_ref() const&& {
    return {std::move(name), __isset.name};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&> name_ref() & {
    return {name, __isset.name};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&&> name_ref() && {
    return {std::move(name), __isset.name};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::RpcKind&> kind_ref() const& {
    return {kind, __isset.kind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::RpcKind&&> kind_ref() const&& {
    return {std::move(kind), __isset.kind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::RpcKind&> kind_ref() & {
    return {kind, __isset.kind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::RpcKind&&> kind_ref() && {
    return {std::move(kind), __isset.kind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&> seqId_ref() const& {
    return {seqId, __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&&> seqId_ref() const&& {
    return {std::move(seqId), __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&> seqId_ref() & {
    return {seqId, __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&&> seqId_ref() && {
    return {std::move(seqId), __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&> clientTimeoutMs_ref() const& {
    return {clientTimeoutMs, __isset.clientTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&&> clientTimeoutMs_ref() const&& {
    return {std::move(clientTimeoutMs), __isset.clientTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&> clientTimeoutMs_ref() & {
    return {clientTimeoutMs, __isset.clientTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&&> clientTimeoutMs_ref() && {
    return {std::move(clientTimeoutMs), __isset.clientTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&> queueTimeoutMs_ref() const& {
    return {queueTimeoutMs, __isset.queueTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&&> queueTimeoutMs_ref() const&& {
    return {std::move(queueTimeoutMs), __isset.queueTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&> queueTimeoutMs_ref() & {
    return {queueTimeoutMs, __isset.queueTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&&> queueTimeoutMs_ref() && {
    return {std::move(queueTimeoutMs), __isset.queueTimeoutMs};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::RpcPriority&> priority_ref() const& {
    return {priority, __isset.priority};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::RpcPriority&&> priority_ref() const&& {
    return {std::move(priority), __isset.priority};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::RpcPriority&> priority_ref() & {
    return {priority, __isset.priority};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::RpcPriority&&> priority_ref() && {
    return {std::move(priority), __isset.priority};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&> otherMetadata_ref() const& {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&&> otherMetadata_ref() const&& {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&> otherMetadata_ref() & {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&&> otherMetadata_ref() && {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&> host_ref() const& {
    return {host, __isset.host};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&&> host_ref() const&& {
    return {std::move(host), __isset.host};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&> host_ref() & {
    return {host, __isset.host};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&&> host_ref() && {
    return {std::move(host), __isset.host};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&> url_ref() const& {
    return {url, __isset.url};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&&> url_ref() const&& {
    return {std::move(url), __isset.url};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&> url_ref() & {
    return {url, __isset.url};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&&> url_ref() && {
    return {std::move(url), __isset.url};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint32_t&> crc32c_ref() const& {
    return {crc32c, __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint32_t&&> crc32c_ref() const&& {
    return {std::move(crc32c), __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint32_t&> crc32c_ref() & {
    return {crc32c, __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint32_t&&> crc32c_ref() && {
    return {std::move(crc32c), __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint64_t&> flags_ref() const& {
    return {flags, __isset.flags};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint64_t&&> flags_ref() const&& {
    return {std::move(flags), __isset.flags};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint64_t&> flags_ref() & {
    return {flags, __isset.flags};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint64_t&&> flags_ref() && {
    return {std::move(flags), __isset.flags};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&> loadMetric_ref() const& {
    return {loadMetric, __isset.loadMetric};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::string&&> loadMetric_ref() const&& {
    return {std::move(loadMetric), __isset.loadMetric};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&> loadMetric_ref() & {
    return {loadMetric, __isset.loadMetric};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::string&&> loadMetric_ref() && {
    return {std::move(loadMetric), __isset.loadMetric};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&> compression_ref() const& {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&&> compression_ref() const&& {
    return {std::move(compression), __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&> compression_ref() & {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&&> compression_ref() && {
    return {std::move(compression), __isset.compression};
  }

  const  ::apache::thrift::ProtocolId* get_protocol() const& {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }

   ::apache::thrift::ProtocolId* get_protocol() & {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }
   ::apache::thrift::ProtocolId* get_protocol() && = delete;

   ::apache::thrift::ProtocolId& set_protocol( ::apache::thrift::ProtocolId protocol_) {
    protocol = protocol_;
    __isset.protocol = true;
    return protocol;
  }

  const ::std::string* get_name() const& {
    return __isset.name ? std::addressof(name) : nullptr;
  }

  ::std::string* get_name() & {
    return __isset.name ? std::addressof(name) : nullptr;
  }
  ::std::string* get_name() && = delete;

  template <typename T_RequestRpcMetadata_name_struct_setter = ::std::string>
  ::std::string& set_name(T_RequestRpcMetadata_name_struct_setter&& name_) {
    name = std::forward<T_RequestRpcMetadata_name_struct_setter>(name_);
    __isset.name = true;
    return name;
  }

  const  ::apache::thrift::RpcKind* get_kind() const& {
    return __isset.kind ? std::addressof(kind) : nullptr;
  }

   ::apache::thrift::RpcKind* get_kind() & {
    return __isset.kind ? std::addressof(kind) : nullptr;
  }
   ::apache::thrift::RpcKind* get_kind() && = delete;

   ::apache::thrift::RpcKind& set_kind( ::apache::thrift::RpcKind kind_) {
    kind = kind_;
    __isset.kind = true;
    return kind;
  }

  const int32_t* get_seqId() const& {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }

  int32_t* get_seqId() & {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }
  int32_t* get_seqId() && = delete;

  int32_t& set_seqId(int32_t seqId_) {
    seqId = seqId_;
    __isset.seqId = true;
    return seqId;
  }

  const int32_t* get_clientTimeoutMs() const& {
    return __isset.clientTimeoutMs ? std::addressof(clientTimeoutMs) : nullptr;
  }

  int32_t* get_clientTimeoutMs() & {
    return __isset.clientTimeoutMs ? std::addressof(clientTimeoutMs) : nullptr;
  }
  int32_t* get_clientTimeoutMs() && = delete;

  int32_t& set_clientTimeoutMs(int32_t clientTimeoutMs_) {
    clientTimeoutMs = clientTimeoutMs_;
    __isset.clientTimeoutMs = true;
    return clientTimeoutMs;
  }

  const int32_t* get_queueTimeoutMs() const& {
    return __isset.queueTimeoutMs ? std::addressof(queueTimeoutMs) : nullptr;
  }

  int32_t* get_queueTimeoutMs() & {
    return __isset.queueTimeoutMs ? std::addressof(queueTimeoutMs) : nullptr;
  }
  int32_t* get_queueTimeoutMs() && = delete;

  int32_t& set_queueTimeoutMs(int32_t queueTimeoutMs_) {
    queueTimeoutMs = queueTimeoutMs_;
    __isset.queueTimeoutMs = true;
    return queueTimeoutMs;
  }

  const  ::apache::thrift::RpcPriority* get_priority() const& {
    return __isset.priority ? std::addressof(priority) : nullptr;
  }

   ::apache::thrift::RpcPriority* get_priority() & {
    return __isset.priority ? std::addressof(priority) : nullptr;
  }
   ::apache::thrift::RpcPriority* get_priority() && = delete;

   ::apache::thrift::RpcPriority& set_priority( ::apache::thrift::RpcPriority priority_) {
    priority = priority_;
    __isset.priority = true;
    return priority;
  }
  const ::std::map<::std::string, ::std::string>* get_otherMetadata() const&;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() &;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() && = delete;

  template <typename T_RequestRpcMetadata_otherMetadata_struct_setter = ::std::map<::std::string, ::std::string>>
  ::std::map<::std::string, ::std::string>& set_otherMetadata(T_RequestRpcMetadata_otherMetadata_struct_setter&& otherMetadata_) {
    otherMetadata = std::forward<T_RequestRpcMetadata_otherMetadata_struct_setter>(otherMetadata_);
    __isset.otherMetadata = true;
    return otherMetadata;
  }

  const ::std::string* get_host() const& {
    return __isset.host ? std::addressof(host) : nullptr;
  }

  ::std::string* get_host() & {
    return __isset.host ? std::addressof(host) : nullptr;
  }
  ::std::string* get_host() && = delete;

  template <typename T_RequestRpcMetadata_host_struct_setter = ::std::string>
  ::std::string& set_host(T_RequestRpcMetadata_host_struct_setter&& host_) {
    host = std::forward<T_RequestRpcMetadata_host_struct_setter>(host_);
    __isset.host = true;
    return host;
  }

  const ::std::string* get_url() const& {
    return __isset.url ? std::addressof(url) : nullptr;
  }

  ::std::string* get_url() & {
    return __isset.url ? std::addressof(url) : nullptr;
  }
  ::std::string* get_url() && = delete;

  template <typename T_RequestRpcMetadata_url_struct_setter = ::std::string>
  ::std::string& set_url(T_RequestRpcMetadata_url_struct_setter&& url_) {
    url = std::forward<T_RequestRpcMetadata_url_struct_setter>(url_);
    __isset.url = true;
    return url;
  }

  const std::uint32_t* get_crc32c() const& {
    return __isset.crc32c ? std::addressof(crc32c) : nullptr;
  }

  std::uint32_t* get_crc32c() & {
    return __isset.crc32c ? std::addressof(crc32c) : nullptr;
  }
  std::uint32_t* get_crc32c() && = delete;

  std::uint32_t& set_crc32c(std::uint32_t crc32c_) {
    crc32c = crc32c_;
    __isset.crc32c = true;
    return crc32c;
  }

  const std::uint64_t* get_flags() const& {
    return __isset.flags ? std::addressof(flags) : nullptr;
  }

  std::uint64_t* get_flags() & {
    return __isset.flags ? std::addressof(flags) : nullptr;
  }
  std::uint64_t* get_flags() && = delete;

  std::uint64_t& set_flags(std::uint64_t flags_) {
    flags = flags_;
    __isset.flags = true;
    return flags;
  }

  const ::std::string* get_loadMetric() const& {
    return __isset.loadMetric ? std::addressof(loadMetric) : nullptr;
  }

  ::std::string* get_loadMetric() & {
    return __isset.loadMetric ? std::addressof(loadMetric) : nullptr;
  }
  ::std::string* get_loadMetric() && = delete;

  template <typename T_RequestRpcMetadata_loadMetric_struct_setter = ::std::string>
  ::std::string& set_loadMetric(T_RequestRpcMetadata_loadMetric_struct_setter&& loadMetric_) {
    loadMetric = std::forward<T_RequestRpcMetadata_loadMetric_struct_setter>(loadMetric_);
    __isset.loadMetric = true;
    return loadMetric;
  }

  const  ::apache::thrift::CompressionAlgorithm* get_compression() const& {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }

   ::apache::thrift::CompressionAlgorithm* get_compression() & {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }
   ::apache::thrift::CompressionAlgorithm* get_compression() && = delete;

   ::apache::thrift::CompressionAlgorithm& set_compression( ::apache::thrift::CompressionAlgorithm compression_) {
    compression = compression_;
    __isset.compression = true;
    return compression;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< RequestRpcMetadata >;
};

void swap(RequestRpcMetadata& a, RequestRpcMetadata& b);

template <class Protocol_>
uint32_t RequestRpcMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {
class ResponseRpcMetadata final : private apache::thrift::detail::st::ComparisonOperators<ResponseRpcMetadata> {
 public:

  ResponseRpcMetadata();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ResponseRpcMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::ProtocolId protocol__arg, int32_t seqId__arg, ::std::map<::std::string, ::std::string> otherMetadata__arg, int64_t load__arg, std::uint32_t crc32c__arg,  ::apache::thrift::CompressionAlgorithm compression__arg);

  ResponseRpcMetadata(ResponseRpcMetadata&&) = default;

  ResponseRpcMetadata(const ResponseRpcMetadata&) = default;

  ResponseRpcMetadata& operator=(ResponseRpcMetadata&&) = default;

  ResponseRpcMetadata& operator=(const ResponseRpcMetadata&) = default;
  void __clear();

  ~ResponseRpcMetadata();

 private:
   ::apache::thrift::ProtocolId protocol;
 private:
  int32_t seqId;
 private:
  ::std::map<::std::string, ::std::string> otherMetadata;
 private:
  int64_t load;
 private:
  std::uint32_t crc32c;
 private:
   ::apache::thrift::CompressionAlgorithm compression;

 public:
  struct __isset {
    bool protocol;
    bool seqId;
    bool otherMetadata;
    bool load;
    bool crc32c;
    bool compression;
  } __isset = {};
  bool operator==(const ResponseRpcMetadata& rhs) const;
  bool operator<(const ResponseRpcMetadata& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::ProtocolId&> protocol_ref() const& {
    return {protocol, __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::ProtocolId&&> protocol_ref() const&& {
    return {std::move(protocol), __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::ProtocolId&> protocol_ref() & {
    return {protocol, __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::ProtocolId&&> protocol_ref() && {
    return {std::move(protocol), __isset.protocol};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&> seqId_ref() const& {
    return {seqId, __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int32_t&&> seqId_ref() const&& {
    return {std::move(seqId), __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&> seqId_ref() & {
    return {seqId, __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int32_t&&> seqId_ref() && {
    return {std::move(seqId), __isset.seqId};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&> otherMetadata_ref() const& {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&&> otherMetadata_ref() const&& {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&> otherMetadata_ref() & {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&&> otherMetadata_ref() && {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int64_t&> load_ref() const& {
    return {load, __isset.load};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const int64_t&&> load_ref() const&& {
    return {std::move(load), __isset.load};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int64_t&> load_ref() & {
    return {load, __isset.load};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<int64_t&&> load_ref() && {
    return {std::move(load), __isset.load};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint32_t&> crc32c_ref() const& {
    return {crc32c, __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::uint32_t&&> crc32c_ref() const&& {
    return {std::move(crc32c), __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint32_t&> crc32c_ref() & {
    return {crc32c, __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::uint32_t&&> crc32c_ref() && {
    return {std::move(crc32c), __isset.crc32c};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&> compression_ref() const& {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&&> compression_ref() const&& {
    return {std::move(compression), __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&> compression_ref() & {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&&> compression_ref() && {
    return {std::move(compression), __isset.compression};
  }

  const  ::apache::thrift::ProtocolId* get_protocol() const& {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }

   ::apache::thrift::ProtocolId* get_protocol() & {
    return __isset.protocol ? std::addressof(protocol) : nullptr;
  }
   ::apache::thrift::ProtocolId* get_protocol() && = delete;

   ::apache::thrift::ProtocolId& set_protocol( ::apache::thrift::ProtocolId protocol_) {
    protocol = protocol_;
    __isset.protocol = true;
    return protocol;
  }

  const int32_t* get_seqId() const& {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }

  int32_t* get_seqId() & {
    return __isset.seqId ? std::addressof(seqId) : nullptr;
  }
  int32_t* get_seqId() && = delete;

  int32_t& set_seqId(int32_t seqId_) {
    seqId = seqId_;
    __isset.seqId = true;
    return seqId;
  }
  const ::std::map<::std::string, ::std::string>* get_otherMetadata() const&;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() &;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() && = delete;

  template <typename T_ResponseRpcMetadata_otherMetadata_struct_setter = ::std::map<::std::string, ::std::string>>
  ::std::map<::std::string, ::std::string>& set_otherMetadata(T_ResponseRpcMetadata_otherMetadata_struct_setter&& otherMetadata_) {
    otherMetadata = std::forward<T_ResponseRpcMetadata_otherMetadata_struct_setter>(otherMetadata_);
    __isset.otherMetadata = true;
    return otherMetadata;
  }

  const int64_t* get_load() const& {
    return __isset.load ? std::addressof(load) : nullptr;
  }

  int64_t* get_load() & {
    return __isset.load ? std::addressof(load) : nullptr;
  }
  int64_t* get_load() && = delete;

  int64_t& set_load(int64_t load_) {
    load = load_;
    __isset.load = true;
    return load;
  }

  const std::uint32_t* get_crc32c() const& {
    return __isset.crc32c ? std::addressof(crc32c) : nullptr;
  }

  std::uint32_t* get_crc32c() & {
    return __isset.crc32c ? std::addressof(crc32c) : nullptr;
  }
  std::uint32_t* get_crc32c() && = delete;

  std::uint32_t& set_crc32c(std::uint32_t crc32c_) {
    crc32c = crc32c_;
    __isset.crc32c = true;
    return crc32c;
  }

  const  ::apache::thrift::CompressionAlgorithm* get_compression() const& {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }

   ::apache::thrift::CompressionAlgorithm* get_compression() & {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }
   ::apache::thrift::CompressionAlgorithm* get_compression() && = delete;

   ::apache::thrift::CompressionAlgorithm& set_compression( ::apache::thrift::CompressionAlgorithm compression_) {
    compression = compression_;
    __isset.compression = true;
    return compression;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< ResponseRpcMetadata >;
};

void swap(ResponseRpcMetadata& a, ResponseRpcMetadata& b);

template <class Protocol_>
uint32_t ResponseRpcMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {
class StreamPayloadMetadata final : private apache::thrift::detail::st::ComparisonOperators<StreamPayloadMetadata> {
 public:

  StreamPayloadMetadata() :
      compression( ::apache::thrift::CompressionAlgorithm::NONE) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StreamPayloadMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::CompressionAlgorithm compression__arg, ::std::map<::std::string, ::std::string> otherMetadata__arg);

  StreamPayloadMetadata(StreamPayloadMetadata&&) = default;

  StreamPayloadMetadata(const StreamPayloadMetadata&) = default;

  StreamPayloadMetadata& operator=(StreamPayloadMetadata&&) = default;

  StreamPayloadMetadata& operator=(const StreamPayloadMetadata&) = default;
  void __clear();
 private:
   ::apache::thrift::CompressionAlgorithm compression;
 private:
  ::std::map<::std::string, ::std::string> otherMetadata;

 public:
  struct __isset {
    bool compression;
    bool otherMetadata;
  } __isset = {};
  bool operator==(const StreamPayloadMetadata& rhs) const;
  bool operator<(const StreamPayloadMetadata& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&> compression_ref() const& {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&&> compression_ref() const&& {
    return {std::move(compression), __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&> compression_ref() & {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&&> compression_ref() && {
    return {std::move(compression), __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&> otherMetadata_ref() const& {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&&> otherMetadata_ref() const&& {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&> otherMetadata_ref() & {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&&> otherMetadata_ref() && {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  const  ::apache::thrift::CompressionAlgorithm* get_compression() const& {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }

   ::apache::thrift::CompressionAlgorithm* get_compression() & {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }
   ::apache::thrift::CompressionAlgorithm* get_compression() && = delete;

   ::apache::thrift::CompressionAlgorithm& set_compression( ::apache::thrift::CompressionAlgorithm compression_) {
    compression = compression_;
    __isset.compression = true;
    return compression;
  }
  const ::std::map<::std::string, ::std::string>* get_otherMetadata() const&;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() &;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() && = delete;

  template <typename T_StreamPayloadMetadata_otherMetadata_struct_setter = ::std::map<::std::string, ::std::string>>
  ::std::map<::std::string, ::std::string>& set_otherMetadata(T_StreamPayloadMetadata_otherMetadata_struct_setter&& otherMetadata_) {
    otherMetadata = std::forward<T_StreamPayloadMetadata_otherMetadata_struct_setter>(otherMetadata_);
    __isset.otherMetadata = true;
    return otherMetadata;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< StreamPayloadMetadata >;
};

void swap(StreamPayloadMetadata& a, StreamPayloadMetadata& b);

template <class Protocol_>
uint32_t StreamPayloadMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {
class RequestSetupMetadata final : private apache::thrift::detail::st::ComparisonOperators<RequestSetupMetadata> {
 public:

  RequestSetupMetadata() :
      interfaceKind( ::apache::thrift::InterfaceKind::USER) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  RequestSetupMetadata(apache::thrift::FragileConstructor, apache::thrift::MetadataOpaqueMap<::std::string, ::std::string> opaque__arg,  ::apache::thrift::InterfaceKind interfaceKind__arg);

  RequestSetupMetadata(RequestSetupMetadata&&) = default;

  RequestSetupMetadata(const RequestSetupMetadata&) = default;

  RequestSetupMetadata& operator=(RequestSetupMetadata&&) = default;

  RequestSetupMetadata& operator=(const RequestSetupMetadata&) = default;
  void __clear();
 private:
  apache::thrift::MetadataOpaqueMap<::std::string, ::std::string> opaque;
 private:
   ::apache::thrift::InterfaceKind interfaceKind;

 public:
  struct __isset {
    bool opaque;
    bool interfaceKind;
  } __isset = {};
  bool operator==(const RequestSetupMetadata& rhs) const;
  bool operator<(const RequestSetupMetadata& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>&> opaque_ref() const& {
    return {opaque, __isset.opaque};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>&&> opaque_ref() const&& {
    return {std::move(opaque), __isset.opaque};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>&> opaque_ref() & {
    return {opaque, __isset.opaque};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>&&> opaque_ref() && {
    return {std::move(opaque), __isset.opaque};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::InterfaceKind&> interfaceKind_ref() const& {
    return {interfaceKind, __isset.interfaceKind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::InterfaceKind&&> interfaceKind_ref() const&& {
    return {std::move(interfaceKind), __isset.interfaceKind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::InterfaceKind&> interfaceKind_ref() & {
    return {interfaceKind, __isset.interfaceKind};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::InterfaceKind&&> interfaceKind_ref() && {
    return {std::move(interfaceKind), __isset.interfaceKind};
  }
  const apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>* get_opaque() const&;
  apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>* get_opaque() &;
  apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>* get_opaque() && = delete;

  template <typename T_RequestSetupMetadata_opaque_struct_setter = apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>>
  apache::thrift::MetadataOpaqueMap<::std::string, ::std::string>& set_opaque(T_RequestSetupMetadata_opaque_struct_setter&& opaque_) {
    opaque = std::forward<T_RequestSetupMetadata_opaque_struct_setter>(opaque_);
    __isset.opaque = true;
    return opaque;
  }

  const  ::apache::thrift::InterfaceKind* get_interfaceKind() const& {
    return __isset.interfaceKind ? std::addressof(interfaceKind) : nullptr;
  }

   ::apache::thrift::InterfaceKind* get_interfaceKind() & {
    return __isset.interfaceKind ? std::addressof(interfaceKind) : nullptr;
  }
   ::apache::thrift::InterfaceKind* get_interfaceKind() && = delete;

   ::apache::thrift::InterfaceKind& set_interfaceKind( ::apache::thrift::InterfaceKind interfaceKind_) {
    interfaceKind = interfaceKind_;
    __isset.interfaceKind = true;
    return interfaceKind;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< RequestSetupMetadata >;
};

void swap(RequestSetupMetadata& a, RequestSetupMetadata& b);

template <class Protocol_>
uint32_t RequestSetupMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {
class HeadersPayloadContent final : private apache::thrift::detail::st::ComparisonOperators<HeadersPayloadContent> {
 public:

  HeadersPayloadContent() {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HeadersPayloadContent(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> otherMetadata__arg);

  HeadersPayloadContent(HeadersPayloadContent&&) = default;

  HeadersPayloadContent(const HeadersPayloadContent&) = default;

  HeadersPayloadContent& operator=(HeadersPayloadContent&&) = default;

  HeadersPayloadContent& operator=(const HeadersPayloadContent&) = default;
  void __clear();
 private:
  ::std::map<::std::string, ::std::string> otherMetadata;

 public:
  struct __isset {
    bool otherMetadata;
  } __isset = {};
  bool operator==(const HeadersPayloadContent& rhs) const;
  bool operator<(const HeadersPayloadContent& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&> otherMetadata_ref() const& {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const ::std::map<::std::string, ::std::string>&&> otherMetadata_ref() const&& {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&> otherMetadata_ref() & {
    return {otherMetadata, __isset.otherMetadata};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<::std::map<::std::string, ::std::string>&&> otherMetadata_ref() && {
    return {std::move(otherMetadata), __isset.otherMetadata};
  }
  const ::std::map<::std::string, ::std::string>* get_otherMetadata() const&;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() &;
  ::std::map<::std::string, ::std::string>* get_otherMetadata() && = delete;

  template <typename T_HeadersPayloadContent_otherMetadata_struct_setter = ::std::map<::std::string, ::std::string>>
  ::std::map<::std::string, ::std::string>& set_otherMetadata(T_HeadersPayloadContent_otherMetadata_struct_setter&& otherMetadata_) {
    otherMetadata = std::forward<T_HeadersPayloadContent_otherMetadata_struct_setter>(otherMetadata_);
    __isset.otherMetadata = true;
    return otherMetadata;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< HeadersPayloadContent >;
};

void swap(HeadersPayloadContent& a, HeadersPayloadContent& b);

template <class Protocol_>
uint32_t HeadersPayloadContent::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
namespace apache { namespace thrift {
class HeadersPayloadMetadata final : private apache::thrift::detail::st::ComparisonOperators<HeadersPayloadMetadata> {
 public:

  HeadersPayloadMetadata() :
      compression( ::apache::thrift::CompressionAlgorithm::NONE) {}
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  HeadersPayloadMetadata(apache::thrift::FragileConstructor,  ::apache::thrift::CompressionAlgorithm compression__arg);

  HeadersPayloadMetadata(HeadersPayloadMetadata&&) = default;

  HeadersPayloadMetadata(const HeadersPayloadMetadata&) = default;

  HeadersPayloadMetadata& operator=(HeadersPayloadMetadata&&) = default;

  HeadersPayloadMetadata& operator=(const HeadersPayloadMetadata&) = default;
  void __clear();
 private:
   ::apache::thrift::CompressionAlgorithm compression;

 public:
  struct __isset {
    bool compression;
  } __isset = {};
  bool operator==(const HeadersPayloadMetadata& rhs) const;
  bool operator<(const HeadersPayloadMetadata& rhs) const;

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&> compression_ref() const& {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref<const  ::apache::thrift::CompressionAlgorithm&&> compression_ref() const&& {
    return {std::move(compression), __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&> compression_ref() & {
    return {compression, __isset.compression};
  }

  FOLLY_ERASE ::apache::thrift::optional_field_ref< ::apache::thrift::CompressionAlgorithm&&> compression_ref() && {
    return {std::move(compression), __isset.compression};
  }

  const  ::apache::thrift::CompressionAlgorithm* get_compression() const& {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }

   ::apache::thrift::CompressionAlgorithm* get_compression() & {
    return __isset.compression ? std::addressof(compression) : nullptr;
  }
   ::apache::thrift::CompressionAlgorithm* get_compression() && = delete;

   ::apache::thrift::CompressionAlgorithm& set_compression( ::apache::thrift::CompressionAlgorithm compression_) {
    compression = compression_;
    __isset.compression = true;
    return compression;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops< HeadersPayloadMetadata >;
};

void swap(HeadersPayloadMetadata& a, HeadersPayloadMetadata& b);

template <class Protocol_>
uint32_t HeadersPayloadMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // apache::thrift
