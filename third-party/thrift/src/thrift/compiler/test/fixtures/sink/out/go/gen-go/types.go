// Autogenerated by Thrift for thrift/compiler/test/fixtures/sink/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID
var _ = metadata.GoUnusedProtection__

type InitialResponse struct {
    Content string `thrift:"content,1" json:"content" db:"content"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InitialResponse)(nil)

func NewInitialResponse() *InitialResponse {
    return (&InitialResponse{}).setDefaults()
}

func (x *InitialResponse) GetContent() string {
    return x.Content
}

func (x *InitialResponse) SetContentNonCompat(value string) *InitialResponse {
    x.Content = value
    return x
}

func (x *InitialResponse) SetContent(value string) *InitialResponse {
    x.Content = value
    return x
}

func (x *InitialResponse) writeField1(p thrift.Encoder) error {  // Content
    if err := p.WriteFieldBegin("content", thrift.STRING, 1); err != nil {
        return thrift.PrependError("InitialResponse write field begin error: ", err)
    }

    item := x.Content
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("InitialResponse write field end error: ", err)
    }
    return nil
}

func (x *InitialResponse) readField1(p thrift.Decoder) error {  // Content
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Content = result
    return nil
}



func (x *InitialResponse) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("InitialResponse"); err != nil {
        return thrift.PrependError("InitialResponse write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("InitialResponse write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("InitialResponse write struct end error: ", err)
    }
    return nil
}

func (x *InitialResponse) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("InitialResponse read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("InitialResponse field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "content")):  // content
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("InitialResponse read struct end error: ", err)
    }

    return nil
}

func (x *InitialResponse) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *InitialResponse) setDefaults() *InitialResponse {
    return x.
        SetContentNonCompat("")
}

func (x *InitialResponse) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_InitialResponse
}

type FinalResponse struct {
    Content string `thrift:"content,1" json:"content" db:"content"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*FinalResponse)(nil)

func NewFinalResponse() *FinalResponse {
    return (&FinalResponse{}).setDefaults()
}

func (x *FinalResponse) GetContent() string {
    return x.Content
}

func (x *FinalResponse) SetContentNonCompat(value string) *FinalResponse {
    x.Content = value
    return x
}

func (x *FinalResponse) SetContent(value string) *FinalResponse {
    x.Content = value
    return x
}

func (x *FinalResponse) writeField1(p thrift.Encoder) error {  // Content
    if err := p.WriteFieldBegin("content", thrift.STRING, 1); err != nil {
        return thrift.PrependError("FinalResponse write field begin error: ", err)
    }

    item := x.Content
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("FinalResponse write field end error: ", err)
    }
    return nil
}

func (x *FinalResponse) readField1(p thrift.Decoder) error {  // Content
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Content = result
    return nil
}



func (x *FinalResponse) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("FinalResponse"); err != nil {
        return thrift.PrependError("FinalResponse write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("FinalResponse write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("FinalResponse write struct end error: ", err)
    }
    return nil
}

func (x *FinalResponse) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("FinalResponse read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("FinalResponse field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "content")):  // content
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("FinalResponse read struct end error: ", err)
    }

    return nil
}

func (x *FinalResponse) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *FinalResponse) setDefaults() *FinalResponse {
    return x.
        SetContentNonCompat("")
}

func (x *FinalResponse) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_FinalResponse
}

type SinkPayload struct {
    Content string `thrift:"content,1" json:"content" db:"content"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*SinkPayload)(nil)

func NewSinkPayload() *SinkPayload {
    return (&SinkPayload{}).setDefaults()
}

func (x *SinkPayload) GetContent() string {
    return x.Content
}

func (x *SinkPayload) SetContentNonCompat(value string) *SinkPayload {
    x.Content = value
    return x
}

func (x *SinkPayload) SetContent(value string) *SinkPayload {
    x.Content = value
    return x
}

func (x *SinkPayload) writeField1(p thrift.Encoder) error {  // Content
    if err := p.WriteFieldBegin("content", thrift.STRING, 1); err != nil {
        return thrift.PrependError("SinkPayload write field begin error: ", err)
    }

    item := x.Content
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("SinkPayload write field end error: ", err)
    }
    return nil
}

func (x *SinkPayload) readField1(p thrift.Decoder) error {  // Content
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Content = result
    return nil
}



func (x *SinkPayload) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("SinkPayload"); err != nil {
        return thrift.PrependError("SinkPayload write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("SinkPayload write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("SinkPayload write struct end error: ", err)
    }
    return nil
}

func (x *SinkPayload) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("SinkPayload read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("SinkPayload field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "content")):  // content
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("SinkPayload read struct end error: ", err)
    }

    return nil
}

func (x *SinkPayload) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *SinkPayload) setDefaults() *SinkPayload {
    return x.
        SetContentNonCompat("")
}

func (x *SinkPayload) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_SinkPayload
}

type CompatibleWithKeywordSink struct {
    Sink string `thrift:"sink,1" json:"sink" db:"sink"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*CompatibleWithKeywordSink)(nil)

func NewCompatibleWithKeywordSink() *CompatibleWithKeywordSink {
    return (&CompatibleWithKeywordSink{}).setDefaults()
}

func (x *CompatibleWithKeywordSink) GetSink() string {
    return x.Sink
}

func (x *CompatibleWithKeywordSink) SetSinkNonCompat(value string) *CompatibleWithKeywordSink {
    x.Sink = value
    return x
}

func (x *CompatibleWithKeywordSink) SetSink(value string) *CompatibleWithKeywordSink {
    x.Sink = value
    return x
}

func (x *CompatibleWithKeywordSink) writeField1(p thrift.Encoder) error {  // Sink
    if err := p.WriteFieldBegin("sink", thrift.STRING, 1); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink write field begin error: ", err)
    }

    item := x.Sink
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink write field end error: ", err)
    }
    return nil
}

func (x *CompatibleWithKeywordSink) readField1(p thrift.Decoder) error {  // Sink
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Sink = result
    return nil
}



func (x *CompatibleWithKeywordSink) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("CompatibleWithKeywordSink"); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink write struct end error: ", err)
    }
    return nil
}

func (x *CompatibleWithKeywordSink) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("CompatibleWithKeywordSink field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "sink")):  // sink
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("CompatibleWithKeywordSink read struct end error: ", err)
    }

    return nil
}

func (x *CompatibleWithKeywordSink) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *CompatibleWithKeywordSink) setDefaults() *CompatibleWithKeywordSink {
    return x.
        SetSinkNonCompat("")
}

func (x *CompatibleWithKeywordSink) GetThriftStructMetadata() *metadata.ThriftStruct {
    return premadeStructMetadata_CompatibleWithKeywordSink
}

type InitialException struct {
    Reason string `thrift:"reason,1" json:"reason" db:"reason"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InitialException)(nil)

func NewInitialException() *InitialException {
    return (&InitialException{}).setDefaults()
}

func (x *InitialException) GetReason() string {
    return x.Reason
}

func (x *InitialException) SetReasonNonCompat(value string) *InitialException {
    x.Reason = value
    return x
}

func (x *InitialException) SetReason(value string) *InitialException {
    x.Reason = value
    return x
}

func (x *InitialException) writeField1(p thrift.Encoder) error {  // Reason
    if err := p.WriteFieldBegin("reason", thrift.STRING, 1); err != nil {
        return thrift.PrependError("InitialException write field begin error: ", err)
    }

    item := x.Reason
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("InitialException write field end error: ", err)
    }
    return nil
}

func (x *InitialException) readField1(p thrift.Decoder) error {  // Reason
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Reason = result
    return nil
}



func (x *InitialException) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("InitialException"); err != nil {
        return thrift.PrependError("InitialException write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("InitialException write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("InitialException write struct end error: ", err)
    }
    return nil
}

func (x *InitialException) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("InitialException read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("InitialException field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "reason")):  // reason
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("InitialException read struct end error: ", err)
    }

    return nil
}

func (x *InitialException) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *InitialException) setDefaults() *InitialException {
    return x.
        SetReasonNonCompat("")
}

func (x *InitialException) GetThriftStructMetadata() *metadata.ThriftException {
    return premadeStructMetadata_InitialException
}

func (x *InitialException) Error() string {
    return x.String()
}
type SinkException1 struct {
    Reason string `thrift:"reason,1" json:"reason" db:"reason"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*SinkException1)(nil)

func NewSinkException1() *SinkException1 {
    return (&SinkException1{}).setDefaults()
}

func (x *SinkException1) GetReason() string {
    return x.Reason
}

func (x *SinkException1) SetReasonNonCompat(value string) *SinkException1 {
    x.Reason = value
    return x
}

func (x *SinkException1) SetReason(value string) *SinkException1 {
    x.Reason = value
    return x
}

func (x *SinkException1) writeField1(p thrift.Encoder) error {  // Reason
    if err := p.WriteFieldBegin("reason", thrift.STRING, 1); err != nil {
        return thrift.PrependError("SinkException1 write field begin error: ", err)
    }

    item := x.Reason
    if err := p.WriteString(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("SinkException1 write field end error: ", err)
    }
    return nil
}

func (x *SinkException1) readField1(p thrift.Decoder) error {  // Reason
    result, err := p.ReadString()
    if err != nil {
        return err
    }

    x.Reason = result
    return nil
}



func (x *SinkException1) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("SinkException1"); err != nil {
        return thrift.PrependError("SinkException1 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("SinkException1 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("SinkException1 write struct end error: ", err)
    }
    return nil
}

func (x *SinkException1) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("SinkException1 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("SinkException1 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.STRING) || (id == thrift.NO_FIELD_ID && fieldName == "reason")):  // reason
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("SinkException1 read struct end error: ", err)
    }

    return nil
}

func (x *SinkException1) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *SinkException1) setDefaults() *SinkException1 {
    return x.
        SetReasonNonCompat("")
}

func (x *SinkException1) GetThriftStructMetadata() *metadata.ThriftException {
    return premadeStructMetadata_SinkException1
}

func (x *SinkException1) Error() string {
    return x.String()
}
type SinkException2 struct {
    Reason int64 `thrift:"reason,1" json:"reason" db:"reason"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*SinkException2)(nil)

func NewSinkException2() *SinkException2 {
    return (&SinkException2{}).setDefaults()
}

func (x *SinkException2) GetReason() int64 {
    return x.Reason
}

func (x *SinkException2) SetReasonNonCompat(value int64) *SinkException2 {
    x.Reason = value
    return x
}

func (x *SinkException2) SetReason(value int64) *SinkException2 {
    x.Reason = value
    return x
}

func (x *SinkException2) writeField1(p thrift.Encoder) error {  // Reason
    if err := p.WriteFieldBegin("reason", thrift.I64, 1); err != nil {
        return thrift.PrependError("SinkException2 write field begin error: ", err)
    }

    item := x.Reason
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("SinkException2 write field end error: ", err)
    }
    return nil
}

func (x *SinkException2) readField1(p thrift.Decoder) error {  // Reason
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Reason = result
    return nil
}



func (x *SinkException2) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("SinkException2"); err != nil {
        return thrift.PrependError("SinkException2 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("SinkException2 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("SinkException2 write struct end error: ", err)
    }
    return nil
}

func (x *SinkException2) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("SinkException2 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("SinkException2 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "reason")):  // reason
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("SinkException2 read struct end error: ", err)
    }

    return nil
}

func (x *SinkException2) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *SinkException2) setDefaults() *SinkException2 {
    return x.
        SetReasonNonCompat(0)
}

func (x *SinkException2) GetThriftStructMetadata() *metadata.ThriftException {
    return premadeStructMetadata_SinkException2
}

func (x *SinkException2) Error() string {
    return x.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
