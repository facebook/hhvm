/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/complex-struct/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";


namespace apache { namespace thrift {

const std::string_view TEnumTraits<::cpp2::MyEnum>::__fbthrift_module_name_internal_do_not_use = kModuleName;
folly::Range<::cpp2::MyEnum const*> const TEnumTraits<::cpp2::MyEnum>::values = folly::range(TEnumDataStorage<::cpp2::MyEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::MyEnum>::names = folly::range(TEnumDataStorage<::cpp2::MyEnum>::names);

bool TEnumTraits<::cpp2::MyEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

const std::vector<std::any>& TEnumTraits<::cpp2::MyEnum>::annotations() noexcept {
  return ::apache::thrift::detail::annotation::empty_annotations();
}

const std::vector<std::any>& TEnumTraits<::cpp2::MyEnum>::enumValueAnnotations(::cpp2::MyEnum value) noexcept {
  switch (static_cast<std::int32_t>(value)) {
    default:
      return ::apache::thrift::detail::annotation::empty_annotations();
  }
}


}} // apache::thrift



namespace cpp2 {

std::string_view MyStructFloatFieldThrowExp::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructFloatFieldThrowExp>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStructFloatFieldThrowExp::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructFloatFieldThrowExp>::name;
}

MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp(const MyStructFloatFieldThrowExp&) = default;
MyStructFloatFieldThrowExp& MyStructFloatFieldThrowExp::operator=(const MyStructFloatFieldThrowExp&) = default;
MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp() :
    __fbthrift_field_myLongField(),
    __fbthrift_field_MyByteField(),
    __fbthrift_field_myFloatField() {
}


MyStructFloatFieldThrowExp::~MyStructFloatFieldThrowExp() {}

MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp([[maybe_unused]] MyStructFloatFieldThrowExp&& other) noexcept :
    __fbthrift_field_myLongField(std::move(other.__fbthrift_field_myLongField)),
    __fbthrift_field_MyByteField(std::move(other.__fbthrift_field_MyByteField)),
    __fbthrift_field_myStringField(std::move(other.__fbthrift_field_myStringField)),
    __fbthrift_field_myFloatField(std::move(other.__fbthrift_field_myFloatField)),
    __isset(other.__isset) {
}

MyStructFloatFieldThrowExp& MyStructFloatFieldThrowExp::operator=([[maybe_unused]] MyStructFloatFieldThrowExp&& other) noexcept {
    this->__fbthrift_field_myLongField = std::move(other.__fbthrift_field_myLongField);
    this->__fbthrift_field_MyByteField = std::move(other.__fbthrift_field_MyByteField);
    this->__fbthrift_field_myStringField = std::move(other.__fbthrift_field_myStringField);
    this->__fbthrift_field_myFloatField = std::move(other.__fbthrift_field_myFloatField);
    __isset = other.__isset;
    return *this;
}


MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::int8_t MyByteField__arg, ::std::string myStringField__arg, float myFloatField__arg) :
    __fbthrift_field_myLongField(std::move(myLongField__arg)),
    __fbthrift_field_MyByteField(std::move(MyByteField__arg)),
    __fbthrift_field_myStringField(std::move(myStringField__arg)),
    __fbthrift_field_myFloatField(std::move(myFloatField__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}

void MyStructFloatFieldThrowExp::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongField = ::std::int64_t();
  this->__fbthrift_field_MyByteField = ::std::int8_t();
  this->__fbthrift_field_myStringField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_myFloatField = float();
  __isset = {};
}

void MyStructFloatFieldThrowExp::__fbthrift_clear_terse_fields() {
}

bool MyStructFloatFieldThrowExp::__fbthrift_is_empty() const {
  return false;
}

bool MyStructFloatFieldThrowExp::operator==([[maybe_unused]] const MyStructFloatFieldThrowExp& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructFloatFieldThrowExp::operator<([[maybe_unused]] const MyStructFloatFieldThrowExp& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyStructFloatFieldThrowExp::get_myLongField() const {
  return __fbthrift_field_myLongField;
}

::std::int64_t& MyStructFloatFieldThrowExp::set_myLongField(::std::int64_t myLongField_) {
  myLongField_ref() = myLongField_;
  return __fbthrift_field_myLongField;
}

::std::int8_t MyStructFloatFieldThrowExp::get_MyByteField() const {
  return __fbthrift_field_MyByteField;
}

::std::int8_t& MyStructFloatFieldThrowExp::set_MyByteField(::std::int8_t MyByteField_) {
  MyByteField_ref() = MyByteField_;
  return __fbthrift_field_MyByteField;
}

float MyStructFloatFieldThrowExp::get_myFloatField() const {
  return __fbthrift_field_myFloatField;
}

float& MyStructFloatFieldThrowExp::set_myFloatField(float myFloatField_) {
  myFloatField_ref() = myFloatField_;
  return __fbthrift_field_myFloatField;
}

void swap([[maybe_unused]] MyStructFloatFieldThrowExp& a, [[maybe_unused]] MyStructFloatFieldThrowExp& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongField, b.__fbthrift_field_myLongField);
  swap(a.__fbthrift_field_MyByteField, b.__fbthrift_field_MyByteField);
  swap(a.__fbthrift_field_myStringField, b.__fbthrift_field_myStringField);
  swap(a.__fbthrift_field_myFloatField, b.__fbthrift_field_myFloatField);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view MyStructMapFloatThrowExp::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructMapFloatThrowExp>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStructMapFloatThrowExp::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructMapFloatThrowExp>::name;
}

MyStructMapFloatThrowExp::MyStructMapFloatThrowExp(const MyStructMapFloatThrowExp&) = default;
MyStructMapFloatThrowExp& MyStructMapFloatThrowExp::operator=(const MyStructMapFloatThrowExp&) = default;
MyStructMapFloatThrowExp::MyStructMapFloatThrowExp() :
    __fbthrift_field_myLongField() {
}


MyStructMapFloatThrowExp::~MyStructMapFloatThrowExp() {}

MyStructMapFloatThrowExp::MyStructMapFloatThrowExp([[maybe_unused]] MyStructMapFloatThrowExp&& other) noexcept :
    __fbthrift_field_myLongField(std::move(other.__fbthrift_field_myLongField)),
    __fbthrift_field_mapListOfFloats(std::move(other.__fbthrift_field_mapListOfFloats)),
    __isset(other.__isset) {
}

MyStructMapFloatThrowExp& MyStructMapFloatThrowExp::operator=([[maybe_unused]] MyStructMapFloatThrowExp&& other) noexcept {
    this->__fbthrift_field_myLongField = std::move(other.__fbthrift_field_myLongField);
    this->__fbthrift_field_mapListOfFloats = std::move(other.__fbthrift_field_mapListOfFloats);
    __isset = other.__isset;
    return *this;
}


MyStructMapFloatThrowExp::MyStructMapFloatThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> mapListOfFloats__arg) :
    __fbthrift_field_myLongField(std::move(myLongField__arg)),
    __fbthrift_field_mapListOfFloats(std::move(mapListOfFloats__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void MyStructMapFloatThrowExp::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongField = ::std::int64_t();
  this->__fbthrift_field_mapListOfFloats.clear();
  __isset = {};
}

void MyStructMapFloatThrowExp::__fbthrift_clear_terse_fields() {
}

bool MyStructMapFloatThrowExp::__fbthrift_is_empty() const {
  return false;
}

bool MyStructMapFloatThrowExp::operator==([[maybe_unused]] const MyStructMapFloatThrowExp& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructMapFloatThrowExp::operator<([[maybe_unused]] const MyStructMapFloatThrowExp& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyStructMapFloatThrowExp::get_myLongField() const {
  return __fbthrift_field_myLongField;
}

::std::int64_t& MyStructMapFloatThrowExp::set_myLongField(::std::int64_t myLongField_) {
  myLongField_ref() = myLongField_;
  return __fbthrift_field_myLongField;
}

const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>& MyStructMapFloatThrowExp::get_mapListOfFloats() const& {
  return __fbthrift_field_mapListOfFloats;
}

::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> MyStructMapFloatThrowExp::get_mapListOfFloats() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>&&>(__fbthrift_field_mapListOfFloats);
}

void swap([[maybe_unused]] MyStructMapFloatThrowExp& a, [[maybe_unused]] MyStructMapFloatThrowExp& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongField, b.__fbthrift_field_myLongField);
  swap(a.__fbthrift_field_mapListOfFloats, b.__fbthrift_field_mapListOfFloats);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
    __fbthrift_field_MyIntField(),
    __fbthrift_field_myEnum(),
    __fbthrift_field_MyBoolField(),
    __fbthrift_field_MyByteField(),
    __fbthrift_field_MyShortField(),
    __fbthrift_field_MyLongField(),
    __fbthrift_field_MyDoubleField() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct([[maybe_unused]] MyStruct&& other) noexcept :
    __fbthrift_field_MyIntField(std::move(other.__fbthrift_field_MyIntField)),
    __fbthrift_field_MyStringField(std::move(other.__fbthrift_field_MyStringField)),
    __fbthrift_field_MyDataField(std::move(other.__fbthrift_field_MyDataField)),
    __fbthrift_field_myEnum(std::move(other.__fbthrift_field_myEnum)),
    __fbthrift_field_MyBoolField(std::move(other.__fbthrift_field_MyBoolField)),
    __fbthrift_field_MyByteField(std::move(other.__fbthrift_field_MyByteField)),
    __fbthrift_field_MyShortField(std::move(other.__fbthrift_field_MyShortField)),
    __fbthrift_field_MyLongField(std::move(other.__fbthrift_field_MyLongField)),
    __fbthrift_field_MyDoubleField(std::move(other.__fbthrift_field_MyDoubleField)),
    __fbthrift_field_lDouble(std::move(other.__fbthrift_field_lDouble)),
    __fbthrift_field_lShort(std::move(other.__fbthrift_field_lShort)),
    __fbthrift_field_lInteger(std::move(other.__fbthrift_field_lInteger)),
    __fbthrift_field_lLong(std::move(other.__fbthrift_field_lLong)),
    __fbthrift_field_lString(std::move(other.__fbthrift_field_lString)),
    __fbthrift_field_lBool(std::move(other.__fbthrift_field_lBool)),
    __fbthrift_field_lByte(std::move(other.__fbthrift_field_lByte)),
    __fbthrift_field_mShortString(std::move(other.__fbthrift_field_mShortString)),
    __fbthrift_field_mIntegerString(std::move(other.__fbthrift_field_mIntegerString)),
    __fbthrift_field_mStringMyStruct(std::move(other.__fbthrift_field_mStringMyStruct)),
    __fbthrift_field_mStringBool(std::move(other.__fbthrift_field_mStringBool)),
    __fbthrift_field_mIntegerInteger(std::move(other.__fbthrift_field_mIntegerInteger)),
    __fbthrift_field_mIntegerBool(std::move(other.__fbthrift_field_mIntegerBool)),
    __fbthrift_field_sShort(std::move(other.__fbthrift_field_sShort)),
    __fbthrift_field_sMyStruct(std::move(other.__fbthrift_field_sMyStruct)),
    __fbthrift_field_sLong(std::move(other.__fbthrift_field_sLong)),
    __fbthrift_field_sString(std::move(other.__fbthrift_field_sString)),
    __fbthrift_field_sByte(std::move(other.__fbthrift_field_sByte)),
    __fbthrift_field_mListList(std::move(other.__fbthrift_field_mListList)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=([[maybe_unused]] MyStruct&& other) noexcept {
    this->__fbthrift_field_MyIntField = std::move(other.__fbthrift_field_MyIntField);
    this->__fbthrift_field_MyStringField = std::move(other.__fbthrift_field_MyStringField);
    this->__fbthrift_field_MyDataField = std::move(other.__fbthrift_field_MyDataField);
    this->__fbthrift_field_myEnum = std::move(other.__fbthrift_field_myEnum);
    this->__fbthrift_field_MyBoolField = std::move(other.__fbthrift_field_MyBoolField);
    this->__fbthrift_field_MyByteField = std::move(other.__fbthrift_field_MyByteField);
    this->__fbthrift_field_MyShortField = std::move(other.__fbthrift_field_MyShortField);
    this->__fbthrift_field_MyLongField = std::move(other.__fbthrift_field_MyLongField);
    this->__fbthrift_field_MyDoubleField = std::move(other.__fbthrift_field_MyDoubleField);
    this->__fbthrift_field_lDouble = std::move(other.__fbthrift_field_lDouble);
    this->__fbthrift_field_lShort = std::move(other.__fbthrift_field_lShort);
    this->__fbthrift_field_lInteger = std::move(other.__fbthrift_field_lInteger);
    this->__fbthrift_field_lLong = std::move(other.__fbthrift_field_lLong);
    this->__fbthrift_field_lString = std::move(other.__fbthrift_field_lString);
    this->__fbthrift_field_lBool = std::move(other.__fbthrift_field_lBool);
    this->__fbthrift_field_lByte = std::move(other.__fbthrift_field_lByte);
    this->__fbthrift_field_mShortString = std::move(other.__fbthrift_field_mShortString);
    this->__fbthrift_field_mIntegerString = std::move(other.__fbthrift_field_mIntegerString);
    this->__fbthrift_field_mStringMyStruct = std::move(other.__fbthrift_field_mStringMyStruct);
    this->__fbthrift_field_mStringBool = std::move(other.__fbthrift_field_mStringBool);
    this->__fbthrift_field_mIntegerInteger = std::move(other.__fbthrift_field_mIntegerInteger);
    this->__fbthrift_field_mIntegerBool = std::move(other.__fbthrift_field_mIntegerBool);
    this->__fbthrift_field_sShort = std::move(other.__fbthrift_field_sShort);
    this->__fbthrift_field_sMyStruct = std::move(other.__fbthrift_field_sMyStruct);
    this->__fbthrift_field_sLong = std::move(other.__fbthrift_field_sLong);
    this->__fbthrift_field_sString = std::move(other.__fbthrift_field_sString);
    this->__fbthrift_field_sByte = std::move(other.__fbthrift_field_sByte);
    this->__fbthrift_field_mListList = std::move(other.__fbthrift_field_mListList);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::cpp2::MyDataItem MyDataField__arg, ::cpp2::MyEnum myEnum__arg, bool MyBoolField__arg, ::std::int8_t MyByteField__arg, ::std::int16_t MyShortField__arg, ::std::int64_t MyLongField__arg, double MyDoubleField__arg, ::std::vector<double> lDouble__arg, ::std::vector<::std::int16_t> lShort__arg, ::std::vector<::std::int32_t> lInteger__arg, ::std::vector<::std::int64_t> lLong__arg, ::std::vector<::std::string> lString__arg, ::std::vector<bool> lBool__arg, ::std::vector<::std::int8_t> lByte__arg, ::std::map<::std::int16_t, ::std::string> mShortString__arg, ::std::map<::std::int32_t, ::std::string> mIntegerString__arg, ::std::map<::std::string, ::cpp2::MyStruct> mStringMyStruct__arg, ::std::map<::std::string, bool> mStringBool__arg, ::std::map<::std::int32_t, ::std::int32_t> mIntegerInteger__arg, ::std::map<::std::int32_t, bool> mIntegerBool__arg, ::std::set<::std::int16_t> sShort__arg, ::std::set<::cpp2::MyStruct> sMyStruct__arg, ::std::set<::std::int64_t> sLong__arg, ::std::set<::std::string> sString__arg, ::std::set<::std::int8_t> sByte__arg, ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> mListList__arg) :
    __fbthrift_field_MyIntField(std::move(MyIntField__arg)),
    __fbthrift_field_MyStringField(std::move(MyStringField__arg)),
    __fbthrift_field_MyDataField(std::move(MyDataField__arg)),
    __fbthrift_field_myEnum(std::move(myEnum__arg)),
    __fbthrift_field_MyBoolField(std::move(MyBoolField__arg)),
    __fbthrift_field_MyByteField(std::move(MyByteField__arg)),
    __fbthrift_field_MyShortField(std::move(MyShortField__arg)),
    __fbthrift_field_MyLongField(std::move(MyLongField__arg)),
    __fbthrift_field_MyDoubleField(std::move(MyDoubleField__arg)),
    __fbthrift_field_lDouble(std::move(lDouble__arg)),
    __fbthrift_field_lShort(std::move(lShort__arg)),
    __fbthrift_field_lInteger(std::move(lInteger__arg)),
    __fbthrift_field_lLong(std::move(lLong__arg)),
    __fbthrift_field_lString(std::move(lString__arg)),
    __fbthrift_field_lBool(std::move(lBool__arg)),
    __fbthrift_field_lByte(std::move(lByte__arg)),
    __fbthrift_field_mShortString(std::move(mShortString__arg)),
    __fbthrift_field_mIntegerString(std::move(mIntegerString__arg)),
    __fbthrift_field_mStringMyStruct(std::move(mStringMyStruct__arg)),
    __fbthrift_field_mStringBool(std::move(mStringBool__arg)),
    __fbthrift_field_mIntegerInteger(std::move(mIntegerInteger__arg)),
    __fbthrift_field_mIntegerBool(std::move(mIntegerBool__arg)),
    __fbthrift_field_sShort(std::move(sShort__arg)),
    __fbthrift_field_sMyStruct(std::move(sMyStruct__arg)),
    __fbthrift_field_sLong(std::move(sLong__arg)),
    __fbthrift_field_sString(std::move(sString__arg)),
    __fbthrift_field_sByte(std::move(sByte__arg)),
    __fbthrift_field_mListList(std::move(mListList__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
}

void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_MyIntField = ::std::int64_t();
  this->__fbthrift_field_MyStringField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_myEnum = ::cpp2::MyEnum();
  this->__fbthrift_field_MyBoolField = bool();
  this->__fbthrift_field_MyByteField = ::std::int8_t();
  this->__fbthrift_field_MyShortField = ::std::int16_t();
  this->__fbthrift_field_MyLongField = ::std::int64_t();
  this->__fbthrift_field_MyDoubleField = double();
  this->__fbthrift_field_lDouble.clear();
  this->__fbthrift_field_lShort.clear();
  this->__fbthrift_field_lInteger.clear();
  this->__fbthrift_field_lLong.clear();
  this->__fbthrift_field_lString.clear();
  this->__fbthrift_field_lBool.clear();
  this->__fbthrift_field_lByte.clear();
  this->__fbthrift_field_mShortString.clear();
  this->__fbthrift_field_mIntegerString.clear();
  this->__fbthrift_field_mStringMyStruct.clear();
  this->__fbthrift_field_mStringBool.clear();
  this->__fbthrift_field_mIntegerInteger.clear();
  this->__fbthrift_field_mIntegerBool.clear();
  this->__fbthrift_field_sShort.clear();
  this->__fbthrift_field_sMyStruct.clear();
  this->__fbthrift_field_sLong.clear();
  this->__fbthrift_field_sString.clear();
  this->__fbthrift_field_sByte.clear();
  this->__fbthrift_field_mListList.clear();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyStruct::get_MyIntField() const {
  return __fbthrift_field_MyIntField;
}

::std::int64_t& MyStruct::set_MyIntField(::std::int64_t MyIntField_) {
  MyIntField_ref() = MyIntField_;
  return __fbthrift_field_MyIntField;
}

const ::cpp2::MyDataItem& MyStruct::get_MyDataField() const& {
  return __fbthrift_field_MyDataField;
}

::cpp2::MyDataItem MyStruct::get_MyDataField() && {
  return static_cast<::cpp2::MyDataItem&&>(__fbthrift_field_MyDataField);
}

::cpp2::MyEnum MyStruct::get_myEnum() const {
  return __fbthrift_field_myEnum;
}

::cpp2::MyEnum& MyStruct::set_myEnum(::cpp2::MyEnum myEnum_) {
  myEnum_ref() = myEnum_;
  return __fbthrift_field_myEnum;
}

bool MyStruct::get_MyBoolField() const {
  return __fbthrift_field_MyBoolField;
}

bool& MyStruct::set_MyBoolField(bool MyBoolField_) {
  MyBoolField_ref() = MyBoolField_;
  return __fbthrift_field_MyBoolField;
}

::std::int8_t MyStruct::get_MyByteField() const {
  return __fbthrift_field_MyByteField;
}

::std::int8_t& MyStruct::set_MyByteField(::std::int8_t MyByteField_) {
  MyByteField_ref() = MyByteField_;
  return __fbthrift_field_MyByteField;
}

::std::int16_t MyStruct::get_MyShortField() const {
  return __fbthrift_field_MyShortField;
}

::std::int16_t& MyStruct::set_MyShortField(::std::int16_t MyShortField_) {
  MyShortField_ref() = MyShortField_;
  return __fbthrift_field_MyShortField;
}

::std::int64_t MyStruct::get_MyLongField() const {
  return __fbthrift_field_MyLongField;
}

::std::int64_t& MyStruct::set_MyLongField(::std::int64_t MyLongField_) {
  MyLongField_ref() = MyLongField_;
  return __fbthrift_field_MyLongField;
}

double MyStruct::get_MyDoubleField() const {
  return __fbthrift_field_MyDoubleField;
}

double& MyStruct::set_MyDoubleField(double MyDoubleField_) {
  MyDoubleField_ref() = MyDoubleField_;
  return __fbthrift_field_MyDoubleField;
}

const ::std::vector<double>& MyStruct::get_lDouble() const& {
  return __fbthrift_field_lDouble;
}

::std::vector<double> MyStruct::get_lDouble() && {
  return static_cast<::std::vector<double>&&>(__fbthrift_field_lDouble);
}

const ::std::vector<::std::int16_t>& MyStruct::get_lShort() const& {
  return __fbthrift_field_lShort;
}

::std::vector<::std::int16_t> MyStruct::get_lShort() && {
  return static_cast<::std::vector<::std::int16_t>&&>(__fbthrift_field_lShort);
}

const ::std::vector<::std::int32_t>& MyStruct::get_lInteger() const& {
  return __fbthrift_field_lInteger;
}

::std::vector<::std::int32_t> MyStruct::get_lInteger() && {
  return static_cast<::std::vector<::std::int32_t>&&>(__fbthrift_field_lInteger);
}

const ::std::vector<::std::int64_t>& MyStruct::get_lLong() const& {
  return __fbthrift_field_lLong;
}

::std::vector<::std::int64_t> MyStruct::get_lLong() && {
  return static_cast<::std::vector<::std::int64_t>&&>(__fbthrift_field_lLong);
}

const ::std::vector<::std::string>& MyStruct::get_lString() const& {
  return __fbthrift_field_lString;
}

::std::vector<::std::string> MyStruct::get_lString() && {
  return static_cast<::std::vector<::std::string>&&>(__fbthrift_field_lString);
}

const ::std::vector<bool>& MyStruct::get_lBool() const& {
  return __fbthrift_field_lBool;
}

::std::vector<bool> MyStruct::get_lBool() && {
  return static_cast<::std::vector<bool>&&>(__fbthrift_field_lBool);
}

const ::std::vector<::std::int8_t>& MyStruct::get_lByte() const& {
  return __fbthrift_field_lByte;
}

::std::vector<::std::int8_t> MyStruct::get_lByte() && {
  return static_cast<::std::vector<::std::int8_t>&&>(__fbthrift_field_lByte);
}

const ::std::map<::std::int16_t, ::std::string>& MyStruct::get_mShortString() const& {
  return __fbthrift_field_mShortString;
}

::std::map<::std::int16_t, ::std::string> MyStruct::get_mShortString() && {
  return static_cast<::std::map<::std::int16_t, ::std::string>&&>(__fbthrift_field_mShortString);
}

const ::std::map<::std::int32_t, ::std::string>& MyStruct::get_mIntegerString() const& {
  return __fbthrift_field_mIntegerString;
}

::std::map<::std::int32_t, ::std::string> MyStruct::get_mIntegerString() && {
  return static_cast<::std::map<::std::int32_t, ::std::string>&&>(__fbthrift_field_mIntegerString);
}

const ::std::map<::std::string, ::cpp2::MyStruct>& MyStruct::get_mStringMyStruct() const& {
  return __fbthrift_field_mStringMyStruct;
}

::std::map<::std::string, ::cpp2::MyStruct> MyStruct::get_mStringMyStruct() && {
  return static_cast<::std::map<::std::string, ::cpp2::MyStruct>&&>(__fbthrift_field_mStringMyStruct);
}

const ::std::map<::std::string, bool>& MyStruct::get_mStringBool() const& {
  return __fbthrift_field_mStringBool;
}

::std::map<::std::string, bool> MyStruct::get_mStringBool() && {
  return static_cast<::std::map<::std::string, bool>&&>(__fbthrift_field_mStringBool);
}

const ::std::map<::std::int32_t, ::std::int32_t>& MyStruct::get_mIntegerInteger() const& {
  return __fbthrift_field_mIntegerInteger;
}

::std::map<::std::int32_t, ::std::int32_t> MyStruct::get_mIntegerInteger() && {
  return static_cast<::std::map<::std::int32_t, ::std::int32_t>&&>(__fbthrift_field_mIntegerInteger);
}

const ::std::map<::std::int32_t, bool>& MyStruct::get_mIntegerBool() const& {
  return __fbthrift_field_mIntegerBool;
}

::std::map<::std::int32_t, bool> MyStruct::get_mIntegerBool() && {
  return static_cast<::std::map<::std::int32_t, bool>&&>(__fbthrift_field_mIntegerBool);
}

const ::std::set<::std::int16_t>& MyStruct::get_sShort() const& {
  return __fbthrift_field_sShort;
}

::std::set<::std::int16_t> MyStruct::get_sShort() && {
  return static_cast<::std::set<::std::int16_t>&&>(__fbthrift_field_sShort);
}

const ::std::set<::cpp2::MyStruct>& MyStruct::get_sMyStruct() const& {
  return __fbthrift_field_sMyStruct;
}

::std::set<::cpp2::MyStruct> MyStruct::get_sMyStruct() && {
  return static_cast<::std::set<::cpp2::MyStruct>&&>(__fbthrift_field_sMyStruct);
}

const ::std::set<::std::int64_t>& MyStruct::get_sLong() const& {
  return __fbthrift_field_sLong;
}

::std::set<::std::int64_t> MyStruct::get_sLong() && {
  return static_cast<::std::set<::std::int64_t>&&>(__fbthrift_field_sLong);
}

const ::std::set<::std::string>& MyStruct::get_sString() const& {
  return __fbthrift_field_sString;
}

::std::set<::std::string> MyStruct::get_sString() && {
  return static_cast<::std::set<::std::string>&&>(__fbthrift_field_sString);
}

const ::std::set<::std::int8_t>& MyStruct::get_sByte() const& {
  return __fbthrift_field_sByte;
}

::std::set<::std::int8_t> MyStruct::get_sByte() && {
  return static_cast<::std::set<::std::int8_t>&&>(__fbthrift_field_sByte);
}

const ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>& MyStruct::get_mListList() const& {
  return __fbthrift_field_mListList;
}

::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> MyStruct::get_mListList() && {
  return static_cast<::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>&&>(__fbthrift_field_mListList);
}

void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIntField, b.__fbthrift_field_MyIntField);
  swap(a.__fbthrift_field_MyStringField, b.__fbthrift_field_MyStringField);
  swap(a.__fbthrift_field_MyDataField, b.__fbthrift_field_MyDataField);
  swap(a.__fbthrift_field_myEnum, b.__fbthrift_field_myEnum);
  swap(a.__fbthrift_field_MyBoolField, b.__fbthrift_field_MyBoolField);
  swap(a.__fbthrift_field_MyByteField, b.__fbthrift_field_MyByteField);
  swap(a.__fbthrift_field_MyShortField, b.__fbthrift_field_MyShortField);
  swap(a.__fbthrift_field_MyLongField, b.__fbthrift_field_MyLongField);
  swap(a.__fbthrift_field_MyDoubleField, b.__fbthrift_field_MyDoubleField);
  swap(a.__fbthrift_field_lDouble, b.__fbthrift_field_lDouble);
  swap(a.__fbthrift_field_lShort, b.__fbthrift_field_lShort);
  swap(a.__fbthrift_field_lInteger, b.__fbthrift_field_lInteger);
  swap(a.__fbthrift_field_lLong, b.__fbthrift_field_lLong);
  swap(a.__fbthrift_field_lString, b.__fbthrift_field_lString);
  swap(a.__fbthrift_field_lBool, b.__fbthrift_field_lBool);
  swap(a.__fbthrift_field_lByte, b.__fbthrift_field_lByte);
  swap(a.__fbthrift_field_mShortString, b.__fbthrift_field_mShortString);
  swap(a.__fbthrift_field_mIntegerString, b.__fbthrift_field_mIntegerString);
  swap(a.__fbthrift_field_mStringMyStruct, b.__fbthrift_field_mStringMyStruct);
  swap(a.__fbthrift_field_mStringBool, b.__fbthrift_field_mStringBool);
  swap(a.__fbthrift_field_mIntegerInteger, b.__fbthrift_field_mIntegerInteger);
  swap(a.__fbthrift_field_mIntegerBool, b.__fbthrift_field_mIntegerBool);
  swap(a.__fbthrift_field_sShort, b.__fbthrift_field_sShort);
  swap(a.__fbthrift_field_sMyStruct, b.__fbthrift_field_sMyStruct);
  swap(a.__fbthrift_field_sLong, b.__fbthrift_field_sLong);
  swap(a.__fbthrift_field_sString, b.__fbthrift_field_sString);
  swap(a.__fbthrift_field_sByte, b.__fbthrift_field_sByte);
  swap(a.__fbthrift_field_mListList, b.__fbthrift_field_mListList);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyDataItem>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::cpp2::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::cpp2::MyStruct>>,
    "inconsistent use of json option");

} // namespace cpp2


namespace cpp2 {

std::string_view SimpleStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SimpleStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleStruct>::name;
}

SimpleStruct::SimpleStruct(const SimpleStruct&) = default;
SimpleStruct& SimpleStruct::operator=(const SimpleStruct&) = default;
SimpleStruct::SimpleStruct() :
    __fbthrift_field_age(static_cast<::std::int64_t>(60)),
    __fbthrift_field_name(apache::thrift::StringTraits<::std::string>::fromStringLiteral("Batman")) {
}


SimpleStruct::~SimpleStruct() {}

SimpleStruct::SimpleStruct([[maybe_unused]] SimpleStruct&& other) noexcept :
    __fbthrift_field_age(std::move(other.__fbthrift_field_age)),
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __isset(other.__isset) {
}

SimpleStruct& SimpleStruct::operator=([[maybe_unused]] SimpleStruct&& other) noexcept {
    this->__fbthrift_field_age = std::move(other.__fbthrift_field_age);
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    __isset = other.__isset;
    return *this;
}


SimpleStruct::SimpleStruct(apache::thrift::FragileConstructor, ::std::int64_t age__arg, ::std::string name__arg) :
    __fbthrift_field_age(std::move(age__arg)),
    __fbthrift_field_name(std::move(name__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void SimpleStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_age = ::std::int64_t();
  this->__fbthrift_field_name = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void SimpleStruct::__fbthrift_clear_terse_fields() {
}

bool SimpleStruct::__fbthrift_is_empty() const {
  return false;
}

bool SimpleStruct::operator==([[maybe_unused]] const SimpleStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SimpleStruct::operator<([[maybe_unused]] const SimpleStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t SimpleStruct::get_age() const {
  return __fbthrift_field_age;
}

::std::int64_t& SimpleStruct::set_age(::std::int64_t age_) {
  age_ref() = age_;
  return __fbthrift_field_age;
}

void swap([[maybe_unused]] SimpleStruct& a, [[maybe_unused]] SimpleStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_age, b.__fbthrift_field_age);
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view defaultStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<defaultStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view defaultStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<defaultStruct>::name;
}

defaultStruct::defaultStruct(const defaultStruct&) = default;
defaultStruct& defaultStruct::operator=(const defaultStruct&) = default;
defaultStruct::defaultStruct() :
    __fbthrift_field_myLongDFset(static_cast<::std::int64_t>(10)),
    __fbthrift_field_myLongDF(),
    __fbthrift_field_portDFset(static_cast<::std::int32_t>(3456)),
    __fbthrift_field_portNum(),
    __fbthrift_field_myBinaryDFset(apache::thrift::StringTraits<::std::string>::fromStringLiteral("abc")),
    __fbthrift_field_myByteDFSet(static_cast<::std::int8_t>(17)),
    __fbthrift_field_myByte(),
    __fbthrift_field_myDoubleDFset(static_cast<double>(99.7678)),
    __fbthrift_field_myDoubleDFZero(static_cast<double>(0)),
    __fbthrift_field_myDouble(),
    __fbthrift_field_field3(std::initializer_list<::std::map<::std::int32_t, ::std::string>::value_type>{ { static_cast<::std::int32_t>(15), apache::thrift::StringTraits<::std::string>::fromStringLiteral("a_value") },
  { static_cast<::std::int32_t>(2), apache::thrift::StringTraits<::std::string>::fromStringLiteral("b_value") } }),
    __fbthrift_field_myList(std::initializer_list<::cpp2::MyEnum>{  ::cpp2::MyEnum::MyValue1,
   ::cpp2::MyEnum::MyValue1,
   ::cpp2::MyEnum::MyValue2 }),
    __fbthrift_field_mySet(std::initializer_list<::std::string>{ apache::thrift::StringTraits<::std::string>::fromStringLiteral("house"),
  apache::thrift::StringTraits<::std::string>::fromStringLiteral("car"),
  apache::thrift::StringTraits<::std::string>::fromStringLiteral("dog") }),
    __fbthrift_field_simpleStruct(::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(40)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("John")))),
    __fbthrift_field_listStructDFset(std::initializer_list<::cpp2::SimpleStruct>{ ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(40)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("IronMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(999)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("Thanos"))) }),
    __fbthrift_field_myUnion(::apache::thrift::detail::make_structured_constant<::cpp2::MyUnion>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::myEnum>( ::cpp2::MyEnum::MyValue2))),
    __fbthrift_field_listUnionDFset(std::initializer_list<::cpp2::MyUnion>{ ::apache::thrift::detail::make_structured_constant<::cpp2::MyUnion>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::myEnum>( ::cpp2::MyEnum::MyValue2)),
  ::apache::thrift::detail::make_structured_constant<::cpp2::MyUnion>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::intValue>(static_cast<::std::int32_t>(123))) }),
    __fbthrift_field_mapNestlistStructDfSet(std::initializer_list<::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>::value_type>{ { static_cast<::std::int32_t>(1), std::initializer_list<::cpp2::SimpleStruct>{ ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(40)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("IronMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(999)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("Thanos"))) } },
  { static_cast<::std::int32_t>(2), std::initializer_list<::cpp2::SimpleStruct>{ ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(28)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("BatMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(12)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("Robin"))) } },
  { static_cast<::std::int32_t>(5), std::initializer_list<::cpp2::SimpleStruct>{ ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(12)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("RatMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(6)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<::std::string>::fromStringLiteral("Catman"))) } } }),
    __fbthrift_field_mapJavaTypeDFset(std::initializer_list<::cpp2::map_i64_string_5732::value_type>{ { static_cast<::std::int64_t>(15), apache::thrift::StringTraits<::std::string>::fromStringLiteral("a_value") },
  { static_cast<::std::int64_t>(2), apache::thrift::StringTraits<::std::string>::fromStringLiteral("b_value") } }),
    __fbthrift_field_enumMapDFset(std::initializer_list<::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>::value_type>{ { apache::thrift::StringTraits<::std::string>::fromStringLiteral("SANDY BRIDGE"), std::initializer_list<::std::map<::std::int32_t, ::cpp2::MyEnum>::value_type>{ { static_cast<::std::int32_t>(16),  ::cpp2::MyEnum::MyValue1 },
  { static_cast<::std::int32_t>(144),  ::cpp2::MyEnum::MyValue1 } } },
  { apache::thrift::StringTraits<::std::string>::fromStringLiteral("IVY BRIDGE"), std::initializer_list<::std::map<::std::int32_t, ::cpp2::MyEnum>::value_type>{ { static_cast<::std::int32_t>(32),  ::cpp2::MyEnum::MyValue2 },
  { static_cast<::std::int32_t>(144),  ::cpp2::MyEnum::MyValue2 } } },
  { apache::thrift::StringTraits<::std::string>::fromStringLiteral("HASWELL"), std::initializer_list<::std::map<::std::int32_t, ::cpp2::MyEnum>::value_type>{ { static_cast<::std::int32_t>(32),  ::cpp2::MyEnum::MyValue3 },
  { static_cast<::std::int32_t>(128),  ::cpp2::MyEnum::MyValue3 },
  { static_cast<::std::int32_t>(256),  ::cpp2::MyEnum::MyValue3 } } } }) {
}


defaultStruct::~defaultStruct() {}

defaultStruct::defaultStruct([[maybe_unused]] defaultStruct&& other) noexcept :
    __fbthrift_field_myLongDFset(std::move(other.__fbthrift_field_myLongDFset)),
    __fbthrift_field_myLongDF(std::move(other.__fbthrift_field_myLongDF)),
    __fbthrift_field_portDFset(std::move(other.__fbthrift_field_portDFset)),
    __fbthrift_field_portNum(std::move(other.__fbthrift_field_portNum)),
    __fbthrift_field_myBinaryDFset(std::move(other.__fbthrift_field_myBinaryDFset)),
    __fbthrift_field_myBinary(std::move(other.__fbthrift_field_myBinary)),
    __fbthrift_field_myByteDFSet(std::move(other.__fbthrift_field_myByteDFSet)),
    __fbthrift_field_myByte(std::move(other.__fbthrift_field_myByte)),
    __fbthrift_field_myDoubleDFset(std::move(other.__fbthrift_field_myDoubleDFset)),
    __fbthrift_field_myDoubleDFZero(std::move(other.__fbthrift_field_myDoubleDFZero)),
    __fbthrift_field_myDouble(std::move(other.__fbthrift_field_myDouble)),
    __fbthrift_field_field3(std::move(other.__fbthrift_field_field3)),
    __fbthrift_field_myList(std::move(other.__fbthrift_field_myList)),
    __fbthrift_field_mySet(std::move(other.__fbthrift_field_mySet)),
    __fbthrift_field_simpleStruct(std::move(other.__fbthrift_field_simpleStruct)),
    __fbthrift_field_listStructDFset(std::move(other.__fbthrift_field_listStructDFset)),
    __fbthrift_field_myUnion(std::move(other.__fbthrift_field_myUnion)),
    __fbthrift_field_listUnionDFset(std::move(other.__fbthrift_field_listUnionDFset)),
    __fbthrift_field_mapNestlistStructDfSet(std::move(other.__fbthrift_field_mapNestlistStructDfSet)),
    __fbthrift_field_mapJavaTypeDFset(std::move(other.__fbthrift_field_mapJavaTypeDFset)),
    __fbthrift_field_emptyMap(std::move(other.__fbthrift_field_emptyMap)),
    __fbthrift_field_enumMapDFset(std::move(other.__fbthrift_field_enumMapDFset)),
    __isset(other.__isset) {
}

defaultStruct& defaultStruct::operator=([[maybe_unused]] defaultStruct&& other) noexcept {
    this->__fbthrift_field_myLongDFset = std::move(other.__fbthrift_field_myLongDFset);
    this->__fbthrift_field_myLongDF = std::move(other.__fbthrift_field_myLongDF);
    this->__fbthrift_field_portDFset = std::move(other.__fbthrift_field_portDFset);
    this->__fbthrift_field_portNum = std::move(other.__fbthrift_field_portNum);
    this->__fbthrift_field_myBinaryDFset = std::move(other.__fbthrift_field_myBinaryDFset);
    this->__fbthrift_field_myBinary = std::move(other.__fbthrift_field_myBinary);
    this->__fbthrift_field_myByteDFSet = std::move(other.__fbthrift_field_myByteDFSet);
    this->__fbthrift_field_myByte = std::move(other.__fbthrift_field_myByte);
    this->__fbthrift_field_myDoubleDFset = std::move(other.__fbthrift_field_myDoubleDFset);
    this->__fbthrift_field_myDoubleDFZero = std::move(other.__fbthrift_field_myDoubleDFZero);
    this->__fbthrift_field_myDouble = std::move(other.__fbthrift_field_myDouble);
    this->__fbthrift_field_field3 = std::move(other.__fbthrift_field_field3);
    this->__fbthrift_field_myList = std::move(other.__fbthrift_field_myList);
    this->__fbthrift_field_mySet = std::move(other.__fbthrift_field_mySet);
    this->__fbthrift_field_simpleStruct = std::move(other.__fbthrift_field_simpleStruct);
    this->__fbthrift_field_listStructDFset = std::move(other.__fbthrift_field_listStructDFset);
    this->__fbthrift_field_myUnion = std::move(other.__fbthrift_field_myUnion);
    this->__fbthrift_field_listUnionDFset = std::move(other.__fbthrift_field_listUnionDFset);
    this->__fbthrift_field_mapNestlistStructDfSet = std::move(other.__fbthrift_field_mapNestlistStructDfSet);
    this->__fbthrift_field_mapJavaTypeDFset = std::move(other.__fbthrift_field_mapJavaTypeDFset);
    this->__fbthrift_field_emptyMap = std::move(other.__fbthrift_field_emptyMap);
    this->__fbthrift_field_enumMapDFset = std::move(other.__fbthrift_field_enumMapDFset);
    __isset = other.__isset;
    return *this;
}


defaultStruct::defaultStruct(apache::thrift::FragileConstructor, ::std::int64_t myLongDFset__arg, ::std::int64_t myLongDF__arg, ::std::int32_t portDFset__arg, ::std::int32_t portNum__arg, ::std::string myBinaryDFset__arg, ::std::string myBinary__arg, ::std::int8_t myByteDFSet__arg, ::std::int8_t myByte__arg, double myDoubleDFset__arg, double myDoubleDFZero__arg, double myDouble__arg, ::std::map<::std::int32_t, ::std::string> field3__arg, ::std::vector<::cpp2::MyEnum> myList__arg, ::std::set<::std::string> mySet__arg, ::cpp2::SimpleStruct simpleStruct__arg, ::std::vector<::cpp2::SimpleStruct> listStructDFset__arg, ::cpp2::MyUnion myUnion__arg, ::std::vector<::cpp2::MyUnion> listUnionDFset__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> mapNestlistStructDfSet__arg, ::cpp2::map_i64_string_5732 mapJavaTypeDFset__arg, ::std::map<::std::int64_t, ::std::int32_t> emptyMap__arg, ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> enumMapDFset__arg) :
    __fbthrift_field_myLongDFset(std::move(myLongDFset__arg)),
    __fbthrift_field_myLongDF(std::move(myLongDF__arg)),
    __fbthrift_field_portDFset(std::move(portDFset__arg)),
    __fbthrift_field_portNum(std::move(portNum__arg)),
    __fbthrift_field_myBinaryDFset(std::move(myBinaryDFset__arg)),
    __fbthrift_field_myBinary(std::move(myBinary__arg)),
    __fbthrift_field_myByteDFSet(std::move(myByteDFSet__arg)),
    __fbthrift_field_myByte(std::move(myByte__arg)),
    __fbthrift_field_myDoubleDFset(std::move(myDoubleDFset__arg)),
    __fbthrift_field_myDoubleDFZero(std::move(myDoubleDFZero__arg)),
    __fbthrift_field_myDouble(std::move(myDouble__arg)),
    __fbthrift_field_field3(std::move(field3__arg)),
    __fbthrift_field_myList(std::move(myList__arg)),
    __fbthrift_field_mySet(std::move(mySet__arg)),
    __fbthrift_field_simpleStruct(std::move(simpleStruct__arg)),
    __fbthrift_field_listStructDFset(std::move(listStructDFset__arg)),
    __fbthrift_field_myUnion(std::move(myUnion__arg)),
    __fbthrift_field_listUnionDFset(std::move(listUnionDFset__arg)),
    __fbthrift_field_mapNestlistStructDfSet(std::move(mapNestlistStructDfSet__arg)),
    __fbthrift_field_mapJavaTypeDFset(std::move(mapJavaTypeDFset__arg)),
    __fbthrift_field_emptyMap(std::move(emptyMap__arg)),
    __fbthrift_field_enumMapDFset(std::move(enumMapDFset__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
}

void defaultStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongDFset = ::std::int64_t();
  this->__fbthrift_field_myLongDF = ::std::int64_t();
  this->__fbthrift_field_portDFset = ::std::int32_t();
  this->__fbthrift_field_portNum = ::std::int32_t();
  this->__fbthrift_field_myBinaryDFset = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_myBinary = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_myByteDFSet = ::std::int8_t();
  this->__fbthrift_field_myByte = ::std::int8_t();
  this->__fbthrift_field_myDoubleDFset = double();
  this->__fbthrift_field_myDoubleDFZero = double();
  this->__fbthrift_field_myDouble = double();
  this->__fbthrift_field_field3.clear();
  this->__fbthrift_field_myList.clear();
  this->__fbthrift_field_mySet.clear();
  ::apache::thrift::clear(this->__fbthrift_field_simpleStruct);
  this->__fbthrift_field_listStructDFset.clear();
  ::apache::thrift::clear(this->__fbthrift_field_myUnion);
  this->__fbthrift_field_listUnionDFset.clear();
  this->__fbthrift_field_mapNestlistStructDfSet.clear();
  this->__fbthrift_field_mapJavaTypeDFset.clear();
  this->__fbthrift_field_emptyMap.clear();
  this->__fbthrift_field_enumMapDFset.clear();
  __isset = {};
}

void defaultStruct::__fbthrift_clear_terse_fields() {
}

bool defaultStruct::__fbthrift_is_empty() const {
  return false;
}

bool defaultStruct::operator==([[maybe_unused]] const defaultStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool defaultStruct::operator<([[maybe_unused]] const defaultStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t defaultStruct::get_myLongDFset() const {
  return __fbthrift_field_myLongDFset;
}

::std::int64_t& defaultStruct::set_myLongDFset(::std::int64_t myLongDFset_) {
  myLongDFset_ref() = myLongDFset_;
  return __fbthrift_field_myLongDFset;
}

::std::int64_t defaultStruct::get_myLongDF() const {
  return __fbthrift_field_myLongDF;
}

::std::int64_t& defaultStruct::set_myLongDF(::std::int64_t myLongDF_) {
  myLongDF_ref() = myLongDF_;
  return __fbthrift_field_myLongDF;
}

::std::int32_t defaultStruct::get_portDFset() const {
  return __fbthrift_field_portDFset;
}

::std::int32_t& defaultStruct::set_portDFset(::std::int32_t portDFset_) {
  portDFset_ref() = portDFset_;
  return __fbthrift_field_portDFset;
}

::std::int32_t defaultStruct::get_portNum() const {
  return __fbthrift_field_portNum;
}

::std::int32_t& defaultStruct::set_portNum(::std::int32_t portNum_) {
  portNum_ref() = portNum_;
  return __fbthrift_field_portNum;
}

::std::int8_t defaultStruct::get_myByteDFSet() const {
  return __fbthrift_field_myByteDFSet;
}

::std::int8_t& defaultStruct::set_myByteDFSet(::std::int8_t myByteDFSet_) {
  myByteDFSet_ref() = myByteDFSet_;
  return __fbthrift_field_myByteDFSet;
}

::std::int8_t defaultStruct::get_myByte() const {
  return __fbthrift_field_myByte;
}

::std::int8_t& defaultStruct::set_myByte(::std::int8_t myByte_) {
  myByte_ref() = myByte_;
  return __fbthrift_field_myByte;
}

double defaultStruct::get_myDoubleDFset() const {
  return __fbthrift_field_myDoubleDFset;
}

double& defaultStruct::set_myDoubleDFset(double myDoubleDFset_) {
  myDoubleDFset_ref() = myDoubleDFset_;
  return __fbthrift_field_myDoubleDFset;
}

double defaultStruct::get_myDoubleDFZero() const {
  return __fbthrift_field_myDoubleDFZero;
}

double& defaultStruct::set_myDoubleDFZero(double myDoubleDFZero_) {
  myDoubleDFZero_ref() = myDoubleDFZero_;
  return __fbthrift_field_myDoubleDFZero;
}

double defaultStruct::get_myDouble() const {
  return __fbthrift_field_myDouble;
}

double& defaultStruct::set_myDouble(double myDouble_) {
  myDouble_ref() = myDouble_;
  return __fbthrift_field_myDouble;
}

const ::std::map<::std::int32_t, ::std::string>& defaultStruct::get_field3() const& {
  return __fbthrift_field_field3;
}

::std::map<::std::int32_t, ::std::string> defaultStruct::get_field3() && {
  return static_cast<::std::map<::std::int32_t, ::std::string>&&>(__fbthrift_field_field3);
}

const ::std::vector<::cpp2::MyEnum>& defaultStruct::get_myList() const& {
  return __fbthrift_field_myList;
}

::std::vector<::cpp2::MyEnum> defaultStruct::get_myList() && {
  return static_cast<::std::vector<::cpp2::MyEnum>&&>(__fbthrift_field_myList);
}

const ::std::set<::std::string>& defaultStruct::get_mySet() const& {
  return __fbthrift_field_mySet;
}

::std::set<::std::string> defaultStruct::get_mySet() && {
  return static_cast<::std::set<::std::string>&&>(__fbthrift_field_mySet);
}

const ::cpp2::SimpleStruct& defaultStruct::get_simpleStruct() const& {
  return __fbthrift_field_simpleStruct;
}

::cpp2::SimpleStruct defaultStruct::get_simpleStruct() && {
  return static_cast<::cpp2::SimpleStruct&&>(__fbthrift_field_simpleStruct);
}

const ::std::vector<::cpp2::SimpleStruct>& defaultStruct::get_listStructDFset() const& {
  return __fbthrift_field_listStructDFset;
}

::std::vector<::cpp2::SimpleStruct> defaultStruct::get_listStructDFset() && {
  return static_cast<::std::vector<::cpp2::SimpleStruct>&&>(__fbthrift_field_listStructDFset);
}

const ::cpp2::MyUnion& defaultStruct::get_myUnion() const& {
  return __fbthrift_field_myUnion;
}

::cpp2::MyUnion defaultStruct::get_myUnion() && {
  return static_cast<::cpp2::MyUnion&&>(__fbthrift_field_myUnion);
}

const ::std::vector<::cpp2::MyUnion>& defaultStruct::get_listUnionDFset() const& {
  return __fbthrift_field_listUnionDFset;
}

::std::vector<::cpp2::MyUnion> defaultStruct::get_listUnionDFset() && {
  return static_cast<::std::vector<::cpp2::MyUnion>&&>(__fbthrift_field_listUnionDFset);
}

const ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>& defaultStruct::get_mapNestlistStructDfSet() const& {
  return __fbthrift_field_mapNestlistStructDfSet;
}

::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> defaultStruct::get_mapNestlistStructDfSet() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>&&>(__fbthrift_field_mapNestlistStructDfSet);
}

const ::cpp2::map_i64_string_5732& defaultStruct::get_mapJavaTypeDFset() const& {
  return __fbthrift_field_mapJavaTypeDFset;
}

::cpp2::map_i64_string_5732 defaultStruct::get_mapJavaTypeDFset() && {
  return static_cast<::cpp2::map_i64_string_5732&&>(__fbthrift_field_mapJavaTypeDFset);
}

const ::std::map<::std::int64_t, ::std::int32_t>& defaultStruct::get_emptyMap() const& {
  return __fbthrift_field_emptyMap;
}

::std::map<::std::int64_t, ::std::int32_t> defaultStruct::get_emptyMap() && {
  return static_cast<::std::map<::std::int64_t, ::std::int32_t>&&>(__fbthrift_field_emptyMap);
}

const ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>& defaultStruct::get_enumMapDFset() const& {
  return __fbthrift_field_enumMapDFset;
}

::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> defaultStruct::get_enumMapDFset() && {
  return static_cast<::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>&&>(__fbthrift_field_enumMapDFset);
}

void swap([[maybe_unused]] defaultStruct& a, [[maybe_unused]] defaultStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongDFset, b.__fbthrift_field_myLongDFset);
  swap(a.__fbthrift_field_myLongDF, b.__fbthrift_field_myLongDF);
  swap(a.__fbthrift_field_portDFset, b.__fbthrift_field_portDFset);
  swap(a.__fbthrift_field_portNum, b.__fbthrift_field_portNum);
  swap(a.__fbthrift_field_myBinaryDFset, b.__fbthrift_field_myBinaryDFset);
  swap(a.__fbthrift_field_myBinary, b.__fbthrift_field_myBinary);
  swap(a.__fbthrift_field_myByteDFSet, b.__fbthrift_field_myByteDFSet);
  swap(a.__fbthrift_field_myByte, b.__fbthrift_field_myByte);
  swap(a.__fbthrift_field_myDoubleDFset, b.__fbthrift_field_myDoubleDFset);
  swap(a.__fbthrift_field_myDoubleDFZero, b.__fbthrift_field_myDoubleDFZero);
  swap(a.__fbthrift_field_myDouble, b.__fbthrift_field_myDouble);
  swap(a.__fbthrift_field_field3, b.__fbthrift_field_field3);
  swap(a.__fbthrift_field_myList, b.__fbthrift_field_myList);
  swap(a.__fbthrift_field_mySet, b.__fbthrift_field_mySet);
  swap(a.__fbthrift_field_simpleStruct, b.__fbthrift_field_simpleStruct);
  swap(a.__fbthrift_field_listStructDFset, b.__fbthrift_field_listStructDFset);
  swap(a.__fbthrift_field_myUnion, b.__fbthrift_field_myUnion);
  swap(a.__fbthrift_field_listUnionDFset, b.__fbthrift_field_listUnionDFset);
  swap(a.__fbthrift_field_mapNestlistStructDfSet, b.__fbthrift_field_mapNestlistStructDfSet);
  swap(a.__fbthrift_field_mapJavaTypeDFset, b.__fbthrift_field_mapJavaTypeDFset);
  swap(a.__fbthrift_field_emptyMap, b.__fbthrift_field_emptyMap);
  swap(a.__fbthrift_field_enumMapDFset, b.__fbthrift_field_enumMapDFset);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::SimpleStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::cpp2::SimpleStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::variant,
        ::cpp2::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::cpp2::MyUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>,
    "inconsistent use of json option");

} // namespace cpp2


namespace cpp2 {

std::string_view MyStructTypeDef::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructTypeDef>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyStructTypeDef::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructTypeDef>::name;
}

MyStructTypeDef::MyStructTypeDef(const MyStructTypeDef&) = default;
MyStructTypeDef& MyStructTypeDef::operator=(const MyStructTypeDef&) = default;
MyStructTypeDef::MyStructTypeDef() :
    __fbthrift_field_myLongField(),
    __fbthrift_field_myLongTypeDef() {
}


MyStructTypeDef::~MyStructTypeDef() {}

MyStructTypeDef::MyStructTypeDef([[maybe_unused]] MyStructTypeDef&& other) noexcept :
    __fbthrift_field_myLongField(std::move(other.__fbthrift_field_myLongField)),
    __fbthrift_field_myLongTypeDef(std::move(other.__fbthrift_field_myLongTypeDef)),
    __fbthrift_field_myStringField(std::move(other.__fbthrift_field_myStringField)),
    __fbthrift_field_myStringTypedef(std::move(other.__fbthrift_field_myStringTypedef)),
    __fbthrift_field_myMapField(std::move(other.__fbthrift_field_myMapField)),
    __fbthrift_field_myMapTypedef(std::move(other.__fbthrift_field_myMapTypedef)),
    __fbthrift_field_myListField(std::move(other.__fbthrift_field_myListField)),
    __fbthrift_field_myListTypedef(std::move(other.__fbthrift_field_myListTypedef)),
    __fbthrift_field_myMapListOfTypeDef(std::move(other.__fbthrift_field_myMapListOfTypeDef)),
    __isset(other.__isset) {
}

MyStructTypeDef& MyStructTypeDef::operator=([[maybe_unused]] MyStructTypeDef&& other) noexcept {
    this->__fbthrift_field_myLongField = std::move(other.__fbthrift_field_myLongField);
    this->__fbthrift_field_myLongTypeDef = std::move(other.__fbthrift_field_myLongTypeDef);
    this->__fbthrift_field_myStringField = std::move(other.__fbthrift_field_myStringField);
    this->__fbthrift_field_myStringTypedef = std::move(other.__fbthrift_field_myStringTypedef);
    this->__fbthrift_field_myMapField = std::move(other.__fbthrift_field_myMapField);
    this->__fbthrift_field_myMapTypedef = std::move(other.__fbthrift_field_myMapTypedef);
    this->__fbthrift_field_myListField = std::move(other.__fbthrift_field_myListField);
    this->__fbthrift_field_myListTypedef = std::move(other.__fbthrift_field_myListTypedef);
    this->__fbthrift_field_myMapListOfTypeDef = std::move(other.__fbthrift_field_myMapListOfTypeDef);
    __isset = other.__isset;
    return *this;
}


MyStructTypeDef::MyStructTypeDef(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::cpp2::longTypeDef myLongTypeDef__arg, ::std::string myStringField__arg, ::cpp2::stringTypedef myStringTypedef__arg, ::std::map<::std::int16_t, ::std::string> myMapField__arg, ::cpp2::mapTypedef myMapTypedef__arg, ::std::vector<double> myListField__arg, ::cpp2::listTypedef myListTypedef__arg, ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> myMapListOfTypeDef__arg) :
    __fbthrift_field_myLongField(std::move(myLongField__arg)),
    __fbthrift_field_myLongTypeDef(std::move(myLongTypeDef__arg)),
    __fbthrift_field_myStringField(std::move(myStringField__arg)),
    __fbthrift_field_myStringTypedef(std::move(myStringTypedef__arg)),
    __fbthrift_field_myMapField(std::move(myMapField__arg)),
    __fbthrift_field_myMapTypedef(std::move(myMapTypedef__arg)),
    __fbthrift_field_myListField(std::move(myListField__arg)),
    __fbthrift_field_myListTypedef(std::move(myListTypedef__arg)),
    __fbthrift_field_myMapListOfTypeDef(std::move(myMapListOfTypeDef__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}

void MyStructTypeDef::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongField = ::std::int64_t();
  this->__fbthrift_field_myLongTypeDef = ::cpp2::longTypeDef();
  this->__fbthrift_field_myStringField = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_myStringTypedef = apache::thrift::StringTraits<::cpp2::stringTypedef>::fromStringLiteral("");
  this->__fbthrift_field_myMapField.clear();
  this->__fbthrift_field_myMapTypedef.clear();
  this->__fbthrift_field_myListField.clear();
  this->__fbthrift_field_myListTypedef.clear();
  this->__fbthrift_field_myMapListOfTypeDef.clear();
  __isset = {};
}

void MyStructTypeDef::__fbthrift_clear_terse_fields() {
}

bool MyStructTypeDef::__fbthrift_is_empty() const {
  return false;
}

bool MyStructTypeDef::operator==([[maybe_unused]] const MyStructTypeDef& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructTypeDef::operator<([[maybe_unused]] const MyStructTypeDef& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int64_t MyStructTypeDef::get_myLongField() const {
  return __fbthrift_field_myLongField;
}

::std::int64_t& MyStructTypeDef::set_myLongField(::std::int64_t myLongField_) {
  myLongField_ref() = myLongField_;
  return __fbthrift_field_myLongField;
}

::cpp2::longTypeDef MyStructTypeDef::get_myLongTypeDef() const {
  return __fbthrift_field_myLongTypeDef;
}

::cpp2::longTypeDef& MyStructTypeDef::set_myLongTypeDef(::cpp2::longTypeDef myLongTypeDef_) {
  myLongTypeDef_ref() = myLongTypeDef_;
  return __fbthrift_field_myLongTypeDef;
}

const ::std::map<::std::int16_t, ::std::string>& MyStructTypeDef::get_myMapField() const& {
  return __fbthrift_field_myMapField;
}

::std::map<::std::int16_t, ::std::string> MyStructTypeDef::get_myMapField() && {
  return static_cast<::std::map<::std::int16_t, ::std::string>&&>(__fbthrift_field_myMapField);
}

const ::cpp2::mapTypedef& MyStructTypeDef::get_myMapTypedef() const& {
  return __fbthrift_field_myMapTypedef;
}

::cpp2::mapTypedef MyStructTypeDef::get_myMapTypedef() && {
  return static_cast<::cpp2::mapTypedef&&>(__fbthrift_field_myMapTypedef);
}

const ::std::vector<double>& MyStructTypeDef::get_myListField() const& {
  return __fbthrift_field_myListField;
}

::std::vector<double> MyStructTypeDef::get_myListField() && {
  return static_cast<::std::vector<double>&&>(__fbthrift_field_myListField);
}

const ::cpp2::listTypedef& MyStructTypeDef::get_myListTypedef() const& {
  return __fbthrift_field_myListTypedef;
}

::cpp2::listTypedef MyStructTypeDef::get_myListTypedef() && {
  return static_cast<::cpp2::listTypedef&&>(__fbthrift_field_myListTypedef);
}

const ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>& MyStructTypeDef::get_myMapListOfTypeDef() const& {
  return __fbthrift_field_myMapListOfTypeDef;
}

::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> MyStructTypeDef::get_myMapListOfTypeDef() && {
  return static_cast<::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>&&>(__fbthrift_field_myMapListOfTypeDef);
}

void swap([[maybe_unused]] MyStructTypeDef& a, [[maybe_unused]] MyStructTypeDef& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongField, b.__fbthrift_field_myLongField);
  swap(a.__fbthrift_field_myLongTypeDef, b.__fbthrift_field_myLongTypeDef);
  swap(a.__fbthrift_field_myStringField, b.__fbthrift_field_myStringField);
  swap(a.__fbthrift_field_myStringTypedef, b.__fbthrift_field_myStringTypedef);
  swap(a.__fbthrift_field_myMapField, b.__fbthrift_field_myMapField);
  swap(a.__fbthrift_field_myMapTypedef, b.__fbthrift_field_myMapTypedef);
  swap(a.__fbthrift_field_myListField, b.__fbthrift_field_myListField);
  swap(a.__fbthrift_field_myListTypedef, b.__fbthrift_field_myListTypedef);
  swap(a.__fbthrift_field_myMapListOfTypeDef, b.__fbthrift_field_myMapListOfTypeDef);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view MyDataItem::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItem>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyDataItem::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItem>::name;
}


MyDataItem::MyDataItem(apache::thrift::FragileConstructor) {}

void MyDataItem::__fbthrift_clear() {
  // clear all fields
}

void MyDataItem::__fbthrift_clear_terse_fields() {
}

bool MyDataItem::__fbthrift_is_empty() const {
  return true;
}

bool MyDataItem::operator==([[maybe_unused]] const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataItem::operator<([[maybe_unused]] const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataItem& a, [[maybe_unused]] MyDataItem& b) {
  using ::std::swap;
}


} // namespace cpp2


namespace apache { namespace thrift {

folly::Range<::cpp2::MyUnion::Type const*> const TEnumTraits<::cpp2::MyUnion::Type>::values = folly::range(TEnumDataStorage<::cpp2::MyUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::MyUnion::Type>::names = folly::range(TEnumDataStorage<::cpp2::MyUnion::Type>::names);

bool TEnumTraits<::cpp2::MyUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

std::string_view MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::myEnum:
      ::std::destroy_at(::std::addressof(value_.myEnum));
      break;
    case Type::myStruct:
      ::std::destroy_at(::std::addressof(value_.myStruct));
      break;
    case Type::myDataItem:
      ::std::destroy_at(::std::addressof(value_.myDataItem));
      break;
    case Type::complexNestedStruct:
      ::std::destroy_at(::std::addressof(value_.complexNestedStruct));
      break;
    case Type::longValue:
      ::std::destroy_at(::std::addressof(value_.longValue));
      break;
    case Type::intValue:
      ::std::destroy_at(::std::addressof(value_.intValue));
      break;
    default:
      assert(false);
      break;
  }
}

void MyUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  MyUnion::~MyUnion() {
    __fbthrift_destruct();
  }

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MyUnion::MyUnion(const MyUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::myStruct:
        set_myStruct(rhs.value_.myStruct);
        break;
      case Type::myDataItem:
        set_myDataItem(rhs.value_.myDataItem);
        break;
      case Type::complexNestedStruct:
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      case Type::longValue:
        set_longValue(rhs.value_.longValue);
        break;
      case Type::intValue:
        set_intValue(rhs.value_.intValue);
        break;
      default:
        assert(false);
    }
  }

    MyUnion&MyUnion::operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::myStruct:
        set_myStruct(rhs.value_.myStruct);
        break;
      case Type::myDataItem:
        set_myDataItem(rhs.value_.myDataItem);
        break;
      case Type::complexNestedStruct:
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      case Type::longValue:
        set_longValue(rhs.value_.longValue);
        break;
      case Type::intValue:
        set_intValue(rhs.value_.intValue);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MyUnion::operator==(const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MyUnion::operator<([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyDataItem>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::ComplexNestedStruct>,
    "inconsistent use of json option");

} // namespace cpp2


namespace apache { namespace thrift {

folly::Range<::cpp2::MyUnionFloatFieldThrowExp::Type const*> const TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::values = folly::range(TEnumDataStorage<::cpp2::MyUnionFloatFieldThrowExp::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::names = folly::range(TEnumDataStorage<::cpp2::MyUnionFloatFieldThrowExp::Type>::names);

bool TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

std::string_view MyUnionFloatFieldThrowExp::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionFloatFieldThrowExp>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view MyUnionFloatFieldThrowExp::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnionFloatFieldThrowExp>::name;
}

void MyUnionFloatFieldThrowExp::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::myEnum:
      ::std::destroy_at(::std::addressof(value_.myEnum));
      break;
    case Type::setFloat:
      ::std::destroy_at(::std::addressof(value_.setFloat));
      break;
    case Type::myDataItem:
      ::std::destroy_at(::std::addressof(value_.myDataItem));
      break;
    case Type::complexNestedStruct:
      ::std::destroy_at(::std::addressof(value_.complexNestedStruct));
      break;
    default:
      assert(false);
      break;
  }
}

void MyUnionFloatFieldThrowExp::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  MyUnionFloatFieldThrowExp::~MyUnionFloatFieldThrowExp() {
    __fbthrift_destruct();
  }

bool MyUnionFloatFieldThrowExp::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MyUnionFloatFieldThrowExp::MyUnionFloatFieldThrowExp(const MyUnionFloatFieldThrowExp& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::setFloat:
        set_setFloat(rhs.value_.setFloat);
        break;
      case Type::myDataItem:
        set_myDataItem(rhs.value_.myDataItem);
        break;
      case Type::complexNestedStruct:
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      default:
        assert(false);
    }
  }

    MyUnionFloatFieldThrowExp&MyUnionFloatFieldThrowExp::operator=(const MyUnionFloatFieldThrowExp& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::myEnum:
        set_myEnum(rhs.value_.myEnum);
        break;
      case Type::setFloat:
        set_setFloat(rhs.value_.setFloat);
        break;
      case Type::myDataItem:
        set_myDataItem(rhs.value_.myDataItem);
        break;
      case Type::complexNestedStruct:
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MyUnionFloatFieldThrowExp::operator==(const MyUnionFloatFieldThrowExp& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MyUnionFloatFieldThrowExp::operator<([[maybe_unused]] const MyUnionFloatFieldThrowExp& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MyUnionFloatFieldThrowExp& a, MyUnionFloatFieldThrowExp& b) {
  MyUnionFloatFieldThrowExp temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFloatFieldThrowExp,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyDataItem>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFloatFieldThrowExp,
        ::apache::thrift::type_class::structure,
        ::cpp2::ComplexNestedStruct>,
    "inconsistent use of json option");

} // namespace cpp2


namespace cpp2 {

std::string_view ComplexNestedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComplexNestedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ComplexNestedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComplexNestedStruct>::name;
}

ComplexNestedStruct::ComplexNestedStruct(const ComplexNestedStruct&) = default;
ComplexNestedStruct& ComplexNestedStruct::operator=(const ComplexNestedStruct&) = default;
ComplexNestedStruct::ComplexNestedStruct() {
}


ComplexNestedStruct::~ComplexNestedStruct() {}

ComplexNestedStruct::ComplexNestedStruct([[maybe_unused]] ComplexNestedStruct&& other) noexcept :
    __fbthrift_field_setOfSetOfInt(std::move(other.__fbthrift_field_setOfSetOfInt)),
    __fbthrift_field_listofListOfListOfListOfEnum(std::move(other.__fbthrift_field_listofListOfListOfListOfEnum)),
    __fbthrift_field_listOfListOfMyStruct(std::move(other.__fbthrift_field_listOfListOfMyStruct)),
    __fbthrift_field_setOfListOfListOfLong(std::move(other.__fbthrift_field_setOfListOfListOfLong)),
    __fbthrift_field_setOfSetOfsetOfLong(std::move(other.__fbthrift_field_setOfSetOfsetOfLong)),
    __fbthrift_field_mapStructListOfListOfLong(std::move(other.__fbthrift_field_mapStructListOfListOfLong)),
    __fbthrift_field_mKeyStructValInt(std::move(other.__fbthrift_field_mKeyStructValInt)),
    __fbthrift_field_listOfMapKeyIntValInt(std::move(other.__fbthrift_field_listOfMapKeyIntValInt)),
    __fbthrift_field_listOfMapKeyStrValList(std::move(other.__fbthrift_field_listOfMapKeyStrValList)),
    __fbthrift_field_mapKeySetValLong(std::move(other.__fbthrift_field_mapKeySetValLong)),
    __fbthrift_field_mapKeyListValLong(std::move(other.__fbthrift_field_mapKeyListValLong)),
    __fbthrift_field_mapKeyMapValMap(std::move(other.__fbthrift_field_mapKeyMapValMap)),
    __fbthrift_field_mapKeySetValMap(std::move(other.__fbthrift_field_mapKeySetValMap)),
    __fbthrift_field_NestedMaps(std::move(other.__fbthrift_field_NestedMaps)),
    __fbthrift_field_mapKeyIntValList(std::move(other.__fbthrift_field_mapKeyIntValList)),
    __fbthrift_field_mapKeyIntValSet(std::move(other.__fbthrift_field_mapKeyIntValSet)),
    __fbthrift_field_mapKeySetValInt(std::move(other.__fbthrift_field_mapKeySetValInt)),
    __fbthrift_field_mapKeyListValSet(std::move(other.__fbthrift_field_mapKeyListValSet)),
    __isset(other.__isset) {
}

ComplexNestedStruct& ComplexNestedStruct::operator=([[maybe_unused]] ComplexNestedStruct&& other) noexcept {
    this->__fbthrift_field_setOfSetOfInt = std::move(other.__fbthrift_field_setOfSetOfInt);
    this->__fbthrift_field_listofListOfListOfListOfEnum = std::move(other.__fbthrift_field_listofListOfListOfListOfEnum);
    this->__fbthrift_field_listOfListOfMyStruct = std::move(other.__fbthrift_field_listOfListOfMyStruct);
    this->__fbthrift_field_setOfListOfListOfLong = std::move(other.__fbthrift_field_setOfListOfListOfLong);
    this->__fbthrift_field_setOfSetOfsetOfLong = std::move(other.__fbthrift_field_setOfSetOfsetOfLong);
    this->__fbthrift_field_mapStructListOfListOfLong = std::move(other.__fbthrift_field_mapStructListOfListOfLong);
    this->__fbthrift_field_mKeyStructValInt = std::move(other.__fbthrift_field_mKeyStructValInt);
    this->__fbthrift_field_listOfMapKeyIntValInt = std::move(other.__fbthrift_field_listOfMapKeyIntValInt);
    this->__fbthrift_field_listOfMapKeyStrValList = std::move(other.__fbthrift_field_listOfMapKeyStrValList);
    this->__fbthrift_field_mapKeySetValLong = std::move(other.__fbthrift_field_mapKeySetValLong);
    this->__fbthrift_field_mapKeyListValLong = std::move(other.__fbthrift_field_mapKeyListValLong);
    this->__fbthrift_field_mapKeyMapValMap = std::move(other.__fbthrift_field_mapKeyMapValMap);
    this->__fbthrift_field_mapKeySetValMap = std::move(other.__fbthrift_field_mapKeySetValMap);
    this->__fbthrift_field_NestedMaps = std::move(other.__fbthrift_field_NestedMaps);
    this->__fbthrift_field_mapKeyIntValList = std::move(other.__fbthrift_field_mapKeyIntValList);
    this->__fbthrift_field_mapKeyIntValSet = std::move(other.__fbthrift_field_mapKeyIntValSet);
    this->__fbthrift_field_mapKeySetValInt = std::move(other.__fbthrift_field_mapKeySetValInt);
    this->__fbthrift_field_mapKeyListValSet = std::move(other.__fbthrift_field_mapKeyListValSet);
    __isset = other.__isset;
    return *this;
}


ComplexNestedStruct::ComplexNestedStruct(apache::thrift::FragileConstructor, ::std::set<::std::set<::std::int32_t>> setOfSetOfInt__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> listofListOfListOfListOfEnum__arg, ::std::vector<::std::vector<::cpp2::MyStruct>> listOfListOfMyStruct__arg, ::std::set<::std::vector<::std::vector<::std::int64_t>>> setOfListOfListOfLong__arg, ::std::set<::std::set<::std::set<::std::int64_t>>> setOfSetOfsetOfLong__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> mapStructListOfListOfLong__arg, ::std::map<::cpp2::MyStruct, ::std::int32_t> mKeyStructValInt__arg, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> listOfMapKeyIntValInt__arg, ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> listOfMapKeyStrValList__arg, ::std::map<::std::set<::std::int32_t>, ::std::int64_t> mapKeySetValLong__arg, ::std::map<::std::vector<::std::string>, ::std::int32_t> mapKeyListValLong__arg, ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> mapKeyMapValMap__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> mapKeySetValMap__arg, ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> NestedMaps__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> mapKeyIntValList__arg, ::std::map<::std::int32_t, ::std::set<bool>> mapKeyIntValSet__arg, ::std::map<::std::set<bool>, ::cpp2::MyEnum> mapKeySetValInt__arg, ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> mapKeyListValSet__arg) :
    __fbthrift_field_setOfSetOfInt(std::move(setOfSetOfInt__arg)),
    __fbthrift_field_listofListOfListOfListOfEnum(std::move(listofListOfListOfListOfEnum__arg)),
    __fbthrift_field_listOfListOfMyStruct(std::move(listOfListOfMyStruct__arg)),
    __fbthrift_field_setOfListOfListOfLong(std::move(setOfListOfListOfLong__arg)),
    __fbthrift_field_setOfSetOfsetOfLong(std::move(setOfSetOfsetOfLong__arg)),
    __fbthrift_field_mapStructListOfListOfLong(std::move(mapStructListOfListOfLong__arg)),
    __fbthrift_field_mKeyStructValInt(std::move(mKeyStructValInt__arg)),
    __fbthrift_field_listOfMapKeyIntValInt(std::move(listOfMapKeyIntValInt__arg)),
    __fbthrift_field_listOfMapKeyStrValList(std::move(listOfMapKeyStrValList__arg)),
    __fbthrift_field_mapKeySetValLong(std::move(mapKeySetValLong__arg)),
    __fbthrift_field_mapKeyListValLong(std::move(mapKeyListValLong__arg)),
    __fbthrift_field_mapKeyMapValMap(std::move(mapKeyMapValMap__arg)),
    __fbthrift_field_mapKeySetValMap(std::move(mapKeySetValMap__arg)),
    __fbthrift_field_NestedMaps(std::move(NestedMaps__arg)),
    __fbthrift_field_mapKeyIntValList(std::move(mapKeyIntValList__arg)),
    __fbthrift_field_mapKeyIntValSet(std::move(mapKeyIntValSet__arg)),
    __fbthrift_field_mapKeySetValInt(std::move(mapKeySetValInt__arg)),
    __fbthrift_field_mapKeyListValSet(std::move(mapKeyListValSet__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
}

void ComplexNestedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_setOfSetOfInt.clear();
  this->__fbthrift_field_listofListOfListOfListOfEnum.clear();
  this->__fbthrift_field_listOfListOfMyStruct.clear();
  this->__fbthrift_field_setOfListOfListOfLong.clear();
  this->__fbthrift_field_setOfSetOfsetOfLong.clear();
  this->__fbthrift_field_mapStructListOfListOfLong.clear();
  this->__fbthrift_field_mKeyStructValInt.clear();
  this->__fbthrift_field_listOfMapKeyIntValInt.clear();
  this->__fbthrift_field_listOfMapKeyStrValList.clear();
  this->__fbthrift_field_mapKeySetValLong.clear();
  this->__fbthrift_field_mapKeyListValLong.clear();
  this->__fbthrift_field_mapKeyMapValMap.clear();
  this->__fbthrift_field_mapKeySetValMap.clear();
  this->__fbthrift_field_NestedMaps.clear();
  this->__fbthrift_field_mapKeyIntValList.clear();
  this->__fbthrift_field_mapKeyIntValSet.clear();
  this->__fbthrift_field_mapKeySetValInt.clear();
  this->__fbthrift_field_mapKeyListValSet.clear();
  __isset = {};
}

void ComplexNestedStruct::__fbthrift_clear_terse_fields() {
}

bool ComplexNestedStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComplexNestedStruct::operator==([[maybe_unused]] const ComplexNestedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ComplexNestedStruct::operator<([[maybe_unused]] const ComplexNestedStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::set<::std::set<::std::int32_t>>& ComplexNestedStruct::get_setOfSetOfInt() const& {
  return __fbthrift_field_setOfSetOfInt;
}

::std::set<::std::set<::std::int32_t>> ComplexNestedStruct::get_setOfSetOfInt() && {
  return static_cast<::std::set<::std::set<::std::int32_t>>&&>(__fbthrift_field_setOfSetOfInt);
}

const ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>& ComplexNestedStruct::get_listofListOfListOfListOfEnum() const& {
  return __fbthrift_field_listofListOfListOfListOfEnum;
}

::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> ComplexNestedStruct::get_listofListOfListOfListOfEnum() && {
  return static_cast<::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>&&>(__fbthrift_field_listofListOfListOfListOfEnum);
}

const ::std::vector<::std::vector<::cpp2::MyStruct>>& ComplexNestedStruct::get_listOfListOfMyStruct() const& {
  return __fbthrift_field_listOfListOfMyStruct;
}

::std::vector<::std::vector<::cpp2::MyStruct>> ComplexNestedStruct::get_listOfListOfMyStruct() && {
  return static_cast<::std::vector<::std::vector<::cpp2::MyStruct>>&&>(__fbthrift_field_listOfListOfMyStruct);
}

const ::std::set<::std::vector<::std::vector<::std::int64_t>>>& ComplexNestedStruct::get_setOfListOfListOfLong() const& {
  return __fbthrift_field_setOfListOfListOfLong;
}

::std::set<::std::vector<::std::vector<::std::int64_t>>> ComplexNestedStruct::get_setOfListOfListOfLong() && {
  return static_cast<::std::set<::std::vector<::std::vector<::std::int64_t>>>&&>(__fbthrift_field_setOfListOfListOfLong);
}

const ::std::set<::std::set<::std::set<::std::int64_t>>>& ComplexNestedStruct::get_setOfSetOfsetOfLong() const& {
  return __fbthrift_field_setOfSetOfsetOfLong;
}

::std::set<::std::set<::std::set<::std::int64_t>>> ComplexNestedStruct::get_setOfSetOfsetOfLong() && {
  return static_cast<::std::set<::std::set<::std::set<::std::int64_t>>>&&>(__fbthrift_field_setOfSetOfsetOfLong);
}

const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>& ComplexNestedStruct::get_mapStructListOfListOfLong() const& {
  return __fbthrift_field_mapStructListOfListOfLong;
}

::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> ComplexNestedStruct::get_mapStructListOfListOfLong() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>&&>(__fbthrift_field_mapStructListOfListOfLong);
}

const ::std::map<::cpp2::MyStruct, ::std::int32_t>& ComplexNestedStruct::get_mKeyStructValInt() const& {
  return __fbthrift_field_mKeyStructValInt;
}

::std::map<::cpp2::MyStruct, ::std::int32_t> ComplexNestedStruct::get_mKeyStructValInt() && {
  return static_cast<::std::map<::cpp2::MyStruct, ::std::int32_t>&&>(__fbthrift_field_mKeyStructValInt);
}

const ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& ComplexNestedStruct::get_listOfMapKeyIntValInt() const& {
  return __fbthrift_field_listOfMapKeyIntValInt;
}

::std::vector<::std::map<::std::int32_t, ::std::int32_t>> ComplexNestedStruct::get_listOfMapKeyIntValInt() && {
  return static_cast<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>&&>(__fbthrift_field_listOfMapKeyIntValInt);
}

const ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>& ComplexNestedStruct::get_listOfMapKeyStrValList() const& {
  return __fbthrift_field_listOfMapKeyStrValList;
}

::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> ComplexNestedStruct::get_listOfMapKeyStrValList() && {
  return static_cast<::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>&&>(__fbthrift_field_listOfMapKeyStrValList);
}

const ::std::map<::std::set<::std::int32_t>, ::std::int64_t>& ComplexNestedStruct::get_mapKeySetValLong() const& {
  return __fbthrift_field_mapKeySetValLong;
}

::std::map<::std::set<::std::int32_t>, ::std::int64_t> ComplexNestedStruct::get_mapKeySetValLong() && {
  return static_cast<::std::map<::std::set<::std::int32_t>, ::std::int64_t>&&>(__fbthrift_field_mapKeySetValLong);
}

const ::std::map<::std::vector<::std::string>, ::std::int32_t>& ComplexNestedStruct::get_mapKeyListValLong() const& {
  return __fbthrift_field_mapKeyListValLong;
}

::std::map<::std::vector<::std::string>, ::std::int32_t> ComplexNestedStruct::get_mapKeyListValLong() && {
  return static_cast<::std::map<::std::vector<::std::string>, ::std::int32_t>&&>(__fbthrift_field_mapKeyListValLong);
}

const ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& ComplexNestedStruct::get_mapKeyMapValMap() const& {
  return __fbthrift_field_mapKeyMapValMap;
}

::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> ComplexNestedStruct::get_mapKeyMapValMap() && {
  return static_cast<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>&&>(__fbthrift_field_mapKeyMapValMap);
}

const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& ComplexNestedStruct::get_mapKeySetValMap() const& {
  return __fbthrift_field_mapKeySetValMap;
}

::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> ComplexNestedStruct::get_mapKeySetValMap() && {
  return static_cast<::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>&&>(__fbthrift_field_mapKeySetValMap);
}

const ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& ComplexNestedStruct::get_NestedMaps() const& {
  return __fbthrift_field_NestedMaps;
}

::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> ComplexNestedStruct::get_NestedMaps() && {
  return static_cast<::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>&&>(__fbthrift_field_NestedMaps);
}

const ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>& ComplexNestedStruct::get_mapKeyIntValList() const& {
  return __fbthrift_field_mapKeyIntValList;
}

::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> ComplexNestedStruct::get_mapKeyIntValList() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>&&>(__fbthrift_field_mapKeyIntValList);
}

const ::std::map<::std::int32_t, ::std::set<bool>>& ComplexNestedStruct::get_mapKeyIntValSet() const& {
  return __fbthrift_field_mapKeyIntValSet;
}

::std::map<::std::int32_t, ::std::set<bool>> ComplexNestedStruct::get_mapKeyIntValSet() && {
  return static_cast<::std::map<::std::int32_t, ::std::set<bool>>&&>(__fbthrift_field_mapKeyIntValSet);
}

const ::std::map<::std::set<bool>, ::cpp2::MyEnum>& ComplexNestedStruct::get_mapKeySetValInt() const& {
  return __fbthrift_field_mapKeySetValInt;
}

::std::map<::std::set<bool>, ::cpp2::MyEnum> ComplexNestedStruct::get_mapKeySetValInt() && {
  return static_cast<::std::map<::std::set<bool>, ::cpp2::MyEnum>&&>(__fbthrift_field_mapKeySetValInt);
}

const ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>& ComplexNestedStruct::get_mapKeyListValSet() const& {
  return __fbthrift_field_mapKeyListValSet;
}

::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> ComplexNestedStruct::get_mapKeyListValSet() && {
  return static_cast<::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>&&>(__fbthrift_field_mapKeyListValSet);
}

void swap([[maybe_unused]] ComplexNestedStruct& a, [[maybe_unused]] ComplexNestedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_setOfSetOfInt, b.__fbthrift_field_setOfSetOfInt);
  swap(a.__fbthrift_field_listofListOfListOfListOfEnum, b.__fbthrift_field_listofListOfListOfListOfEnum);
  swap(a.__fbthrift_field_listOfListOfMyStruct, b.__fbthrift_field_listOfListOfMyStruct);
  swap(a.__fbthrift_field_setOfListOfListOfLong, b.__fbthrift_field_setOfListOfListOfLong);
  swap(a.__fbthrift_field_setOfSetOfsetOfLong, b.__fbthrift_field_setOfSetOfsetOfLong);
  swap(a.__fbthrift_field_mapStructListOfListOfLong, b.__fbthrift_field_mapStructListOfListOfLong);
  swap(a.__fbthrift_field_mKeyStructValInt, b.__fbthrift_field_mKeyStructValInt);
  swap(a.__fbthrift_field_listOfMapKeyIntValInt, b.__fbthrift_field_listOfMapKeyIntValInt);
  swap(a.__fbthrift_field_listOfMapKeyStrValList, b.__fbthrift_field_listOfMapKeyStrValList);
  swap(a.__fbthrift_field_mapKeySetValLong, b.__fbthrift_field_mapKeySetValLong);
  swap(a.__fbthrift_field_mapKeyListValLong, b.__fbthrift_field_mapKeyListValLong);
  swap(a.__fbthrift_field_mapKeyMapValMap, b.__fbthrift_field_mapKeyMapValMap);
  swap(a.__fbthrift_field_mapKeySetValMap, b.__fbthrift_field_mapKeySetValMap);
  swap(a.__fbthrift_field_NestedMaps, b.__fbthrift_field_NestedMaps);
  swap(a.__fbthrift_field_mapKeyIntValList, b.__fbthrift_field_mapKeyIntValList);
  swap(a.__fbthrift_field_mapKeyIntValSet, b.__fbthrift_field_mapKeyIntValSet);
  swap(a.__fbthrift_field_mapKeySetValInt, b.__fbthrift_field_mapKeySetValInt);
  swap(a.__fbthrift_field_mapKeyListValSet, b.__fbthrift_field_mapKeyListValSet);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::vector<::std::vector<::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>,
        ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>,
        ::std::map<::cpp2::MyStruct, ::std::int32_t>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>,
        ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>,
    "inconsistent use of json option");

} // namespace cpp2


namespace cpp2 {

std::string_view TypeRemapped::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TypeRemapped>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TypeRemapped::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TypeRemapped>::name;
}

TypeRemapped::TypeRemapped(const TypeRemapped&) = default;
TypeRemapped& TypeRemapped::operator=(const TypeRemapped&) = default;
TypeRemapped::TypeRemapped() :
    __fbthrift_field_BigInteger() {
}


TypeRemapped::~TypeRemapped() {}

TypeRemapped::TypeRemapped([[maybe_unused]] TypeRemapped&& other) noexcept :
    __fbthrift_field_lsMap(std::move(other.__fbthrift_field_lsMap)),
    __fbthrift_field_ioMap(std::move(other.__fbthrift_field_ioMap)),
    __fbthrift_field_BigInteger(std::move(other.__fbthrift_field_BigInteger)),
    __fbthrift_field_binaryTestBuffer(std::move(other.__fbthrift_field_binaryTestBuffer)),
    __isset(other.__isset) {
}

TypeRemapped& TypeRemapped::operator=([[maybe_unused]] TypeRemapped&& other) noexcept {
    this->__fbthrift_field_lsMap = std::move(other.__fbthrift_field_lsMap);
    this->__fbthrift_field_ioMap = std::move(other.__fbthrift_field_ioMap);
    this->__fbthrift_field_BigInteger = std::move(other.__fbthrift_field_BigInteger);
    this->__fbthrift_field_binaryTestBuffer = std::move(other.__fbthrift_field_binaryTestBuffer);
    __isset = other.__isset;
    return *this;
}


TypeRemapped::TypeRemapped(apache::thrift::FragileConstructor, ::cpp2::map_i64_string_5732 lsMap__arg, ::cpp2::map_i32_FMap_6797 ioMap__arg, ::cpp2::i32_1194 BigInteger__arg, ::cpp2::binary_4918 binaryTestBuffer__arg) :
    __fbthrift_field_lsMap(std::move(lsMap__arg)),
    __fbthrift_field_ioMap(std::move(ioMap__arg)),
    __fbthrift_field_BigInteger(std::move(BigInteger__arg)),
    __fbthrift_field_binaryTestBuffer(std::move(binaryTestBuffer__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}

void TypeRemapped::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_lsMap.clear();
  this->__fbthrift_field_ioMap.clear();
  this->__fbthrift_field_BigInteger = ::cpp2::i32_1194();
  this->__fbthrift_field_binaryTestBuffer = apache::thrift::StringTraits<::cpp2::binary_4918>::fromStringLiteral("");
  __isset = {};
}

void TypeRemapped::__fbthrift_clear_terse_fields() {
}

bool TypeRemapped::__fbthrift_is_empty() const {
  return false;
}

bool TypeRemapped::operator==([[maybe_unused]] const TypeRemapped& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool TypeRemapped::operator<([[maybe_unused]] const TypeRemapped& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2::map_i64_string_5732& TypeRemapped::get_lsMap() const& {
  return __fbthrift_field_lsMap;
}

::cpp2::map_i64_string_5732 TypeRemapped::get_lsMap() && {
  return static_cast<::cpp2::map_i64_string_5732&&>(__fbthrift_field_lsMap);
}

const ::cpp2::map_i32_FMap_6797& TypeRemapped::get_ioMap() const& {
  return __fbthrift_field_ioMap;
}

::cpp2::map_i32_FMap_6797 TypeRemapped::get_ioMap() && {
  return static_cast<::cpp2::map_i32_FMap_6797&&>(__fbthrift_field_ioMap);
}

::cpp2::i32_1194 TypeRemapped::get_BigInteger() const {
  return __fbthrift_field_BigInteger;
}

::cpp2::i32_1194& TypeRemapped::set_BigInteger(::cpp2::i32_1194 BigInteger_) {
  BigInteger_ref() = BigInteger_;
  return __fbthrift_field_BigInteger;
}

void swap([[maybe_unused]] TypeRemapped& a, [[maybe_unused]] TypeRemapped& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_lsMap, b.__fbthrift_field_lsMap);
  swap(a.__fbthrift_field_ioMap, b.__fbthrift_field_ioMap);
  swap(a.__fbthrift_field_BigInteger, b.__fbthrift_field_BigInteger);
  swap(a.__fbthrift_field_binaryTestBuffer, b.__fbthrift_field_binaryTestBuffer);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view emptyXcep::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<emptyXcep>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view emptyXcep::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<emptyXcep>::name;
}

emptyXcep::emptyXcep(const emptyXcep&) = default;
emptyXcep& emptyXcep::operator=(const emptyXcep&) = default;
emptyXcep::emptyXcep() {
}


emptyXcep::~emptyXcep() {}

emptyXcep::emptyXcep([[maybe_unused]] emptyXcep&& other) noexcept{}
emptyXcep& emptyXcep::operator=([[maybe_unused]] emptyXcep&& other) noexcept {
    return *this;
}


emptyXcep::emptyXcep(apache::thrift::FragileConstructor) {}

void emptyXcep::__fbthrift_clear() {
  // clear all fields
}

void emptyXcep::__fbthrift_clear_terse_fields() {
}

bool emptyXcep::__fbthrift_is_empty() const {
  return true;
}

bool emptyXcep::operator==([[maybe_unused]] const emptyXcep& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool emptyXcep::operator<([[maybe_unused]] const emptyXcep& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] emptyXcep& a, [[maybe_unused]] emptyXcep& b) {
  using ::std::swap;
}


} // namespace cpp2


namespace cpp2 {

std::string_view reqXcep::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<reqXcep>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view reqXcep::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<reqXcep>::name;
}

reqXcep::reqXcep(const reqXcep&) = default;
reqXcep& reqXcep::operator=(const reqXcep&) = default;
reqXcep::reqXcep() :
    __fbthrift_field_errorCode() {
}


reqXcep::~reqXcep() {}

reqXcep::reqXcep([[maybe_unused]] reqXcep&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_errorCode(std::move(other.__fbthrift_field_errorCode)) {
}

reqXcep& reqXcep::operator=([[maybe_unused]] reqXcep&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_errorCode = std::move(other.__fbthrift_field_errorCode);
    return *this;
}


reqXcep::reqXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg) :
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_errorCode(std::move(errorCode__arg)) { 
}

void reqXcep::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_errorCode = ::std::int32_t();
}

void reqXcep::__fbthrift_clear_terse_fields() {
}

bool reqXcep::__fbthrift_is_empty() const {
  return false;
}

bool reqXcep::operator==([[maybe_unused]] const reqXcep& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool reqXcep::operator<([[maybe_unused]] const reqXcep& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t reqXcep::get_errorCode() const {
  return __fbthrift_field_errorCode;
}

::std::int32_t& reqXcep::set_errorCode(::std::int32_t errorCode_) {
  errorCode_ref() = errorCode_;
  return __fbthrift_field_errorCode;
}

void swap([[maybe_unused]] reqXcep& a, [[maybe_unused]] reqXcep& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_errorCode, b.__fbthrift_field_errorCode);
}


} // namespace cpp2


namespace cpp2 {

std::string_view optXcep::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<optXcep>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view optXcep::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<optXcep>::name;
}

optXcep::optXcep(const optXcep&) = default;
optXcep& optXcep::operator=(const optXcep&) = default;
optXcep::optXcep() :
    __fbthrift_field_errorCode() {
}


optXcep::~optXcep() {}

optXcep::optXcep([[maybe_unused]] optXcep&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_errorCode(std::move(other.__fbthrift_field_errorCode)),
    __isset(other.__isset) {
}

optXcep& optXcep::operator=([[maybe_unused]] optXcep&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_errorCode = std::move(other.__fbthrift_field_errorCode);
    __isset = other.__isset;
    return *this;
}


optXcep::optXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg) :
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_errorCode(std::move(errorCode__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}

void optXcep::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_errorCode = ::std::int32_t();
  __isset = {};
}

void optXcep::__fbthrift_clear_terse_fields() {
}

bool optXcep::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1));
}

bool optXcep::operator==([[maybe_unused]] const optXcep& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool optXcep::operator<([[maybe_unused]] const optXcep& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::string* optXcep::get_message() const& {
  return message_ref().has_value() ? std::addressof(__fbthrift_field_message) : nullptr;
}

::std::string* optXcep::get_message() & {
  return message_ref().has_value() ? std::addressof(__fbthrift_field_message) : nullptr;
}

const ::std::int32_t* optXcep::get_errorCode() const& {
  return errorCode_ref().has_value() ? std::addressof(__fbthrift_field_errorCode) : nullptr;
}

::std::int32_t* optXcep::get_errorCode() & {
  return errorCode_ref().has_value() ? std::addressof(__fbthrift_field_errorCode) : nullptr;
}

::std::int32_t& optXcep::set_errorCode(::std::int32_t errorCode_) {
  errorCode_ref() = errorCode_;
  return __fbthrift_field_errorCode;
}

void swap([[maybe_unused]] optXcep& a, [[maybe_unused]] optXcep& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_errorCode, b.__fbthrift_field_errorCode);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2


namespace cpp2 {

std::string_view complexException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<complexException>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view complexException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<complexException>::name;
}

complexException::complexException(const complexException&) = default;
complexException& complexException::operator=(const complexException&) = default;
complexException::complexException() :
    __fbthrift_field_errorEnum() {
}


complexException::~complexException() {}

complexException::complexException([[maybe_unused]] complexException&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_listStrings(std::move(other.__fbthrift_field_listStrings)),
    __fbthrift_field_errorEnum(std::move(other.__fbthrift_field_errorEnum)),
    __fbthrift_field_unionError(std::move(other.__fbthrift_field_unionError)),
    __fbthrift_field_structError(std::move(other.__fbthrift_field_structError)),
    __fbthrift_field_lsMap(std::move(other.__fbthrift_field_lsMap)),
    __isset(other.__isset) {
}

complexException& complexException::operator=([[maybe_unused]] complexException&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_listStrings = std::move(other.__fbthrift_field_listStrings);
    this->__fbthrift_field_errorEnum = std::move(other.__fbthrift_field_errorEnum);
    this->__fbthrift_field_unionError = std::move(other.__fbthrift_field_unionError);
    this->__fbthrift_field_structError = std::move(other.__fbthrift_field_structError);
    this->__fbthrift_field_lsMap = std::move(other.__fbthrift_field_lsMap);
    __isset = other.__isset;
    return *this;
}


complexException::complexException(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::vector<::std::string> listStrings__arg, ::cpp2::MyEnum errorEnum__arg, ::cpp2::MyUnion unionError__arg, ::cpp2::MyStruct structError__arg, ::cpp2::map_i64_string_5732 lsMap__arg) :
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_listStrings(std::move(listStrings__arg)),
    __fbthrift_field_errorEnum(std::move(errorEnum__arg)),
    __fbthrift_field_unionError(std::move(unionError__arg)),
    __fbthrift_field_structError(std::move(structError__arg)),
    __fbthrift_field_lsMap(std::move(lsMap__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}

void complexException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  this->__fbthrift_field_listStrings.clear();
  this->__fbthrift_field_errorEnum = ::cpp2::MyEnum();
  ::apache::thrift::clear(this->__fbthrift_field_unionError);
  ::apache::thrift::clear(this->__fbthrift_field_structError);
  this->__fbthrift_field_lsMap.clear();
  __isset = {};
}

void complexException::__fbthrift_clear_terse_fields() {
}

bool complexException::__fbthrift_is_empty() const {
  return false;
}

bool complexException::operator==([[maybe_unused]] const complexException& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool complexException::operator<([[maybe_unused]] const complexException& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::std::string>& complexException::get_listStrings() const& {
  return __fbthrift_field_listStrings;
}

::std::vector<::std::string> complexException::get_listStrings() && {
  return static_cast<::std::vector<::std::string>&&>(__fbthrift_field_listStrings);
}

::cpp2::MyEnum complexException::get_errorEnum() const {
  return __fbthrift_field_errorEnum;
}

::cpp2::MyEnum& complexException::set_errorEnum(::cpp2::MyEnum errorEnum_) {
  errorEnum_ref() = errorEnum_;
  return __fbthrift_field_errorEnum;
}

const ::cpp2::MyUnion* complexException::get_unionError() const& {
  return unionError_ref().has_value() ? std::addressof(__fbthrift_field_unionError) : nullptr;
}

::cpp2::MyUnion* complexException::get_unionError() & {
  return unionError_ref().has_value() ? std::addressof(__fbthrift_field_unionError) : nullptr;
}

const ::cpp2::MyStruct& complexException::get_structError() const& {
  return __fbthrift_field_structError;
}

::cpp2::MyStruct complexException::get_structError() && {
  return static_cast<::cpp2::MyStruct&&>(__fbthrift_field_structError);
}

const ::cpp2::map_i64_string_5732& complexException::get_lsMap() const& {
  return __fbthrift_field_lsMap;
}

::cpp2::map_i64_string_5732 complexException::get_lsMap() && {
  return static_cast<::cpp2::map_i64_string_5732&&>(__fbthrift_field_lsMap);
}

void swap([[maybe_unused]] complexException& a, [[maybe_unused]] complexException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_listStrings, b.__fbthrift_field_listStrings);
  swap(a.__fbthrift_field_errorEnum, b.__fbthrift_field_errorEnum);
  swap(a.__fbthrift_field_unionError, b.__fbthrift_field_unionError);
  swap(a.__fbthrift_field_structError, b.__fbthrift_field_structError);
  swap(a.__fbthrift_field_lsMap, b.__fbthrift_field_lsMap);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        complexException,
        ::apache::thrift::type_class::variant,
        ::cpp2::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        complexException,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyStruct>,
    "inconsistent use of json option");

} // namespace cpp2


namespace cpp2 {

std::string_view Containers::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Containers>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Containers::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Containers>::name;
}

Containers::Containers(const Containers&) = default;
Containers& Containers::operator=(const Containers&) = default;
Containers::Containers() {
}


Containers::~Containers() {}

Containers::Containers([[maybe_unused]] Containers&& other) noexcept :
    __fbthrift_field_struct_list(std::move(other.__fbthrift_field_struct_list)),
    __fbthrift_field_union_list(std::move(other.__fbthrift_field_union_list)),
    __fbthrift_field_enum_list(std::move(other.__fbthrift_field_enum_list)),
    __fbthrift_field_struct_set(std::move(other.__fbthrift_field_struct_set)),
    __fbthrift_field_union_set(std::move(other.__fbthrift_field_union_set)),
    __fbthrift_field_enum_set(std::move(other.__fbthrift_field_enum_set)),
    __fbthrift_field_struct_map(std::move(other.__fbthrift_field_struct_map)),
    __fbthrift_field_union_map(std::move(other.__fbthrift_field_union_map)),
    __fbthrift_field_enum_map(std::move(other.__fbthrift_field_enum_map)),
    __fbthrift_field_struct_map_2(std::move(other.__fbthrift_field_struct_map_2)),
    __fbthrift_field_union_map_2(std::move(other.__fbthrift_field_union_map_2)),
    __fbthrift_field_enum_map_2(std::move(other.__fbthrift_field_enum_map_2)),
    __fbthrift_field_list_map(std::move(other.__fbthrift_field_list_map)),
    __fbthrift_field_list_map_2(std::move(other.__fbthrift_field_list_map_2)),
    __fbthrift_field_set_map(std::move(other.__fbthrift_field_set_map)),
    __fbthrift_field_set_map_2(std::move(other.__fbthrift_field_set_map_2)),
    __fbthrift_field_map_map(std::move(other.__fbthrift_field_map_map)),
    __fbthrift_field_map_map_2(std::move(other.__fbthrift_field_map_map_2)),
    __fbthrift_field_list_list_i32(std::move(other.__fbthrift_field_list_list_i32)),
    __fbthrift_field_list_list_struct(std::move(other.__fbthrift_field_list_list_struct)),
    __fbthrift_field_list_set_i32(std::move(other.__fbthrift_field_list_set_i32)),
    __fbthrift_field_list_set_struct(std::move(other.__fbthrift_field_list_set_struct)),
    __fbthrift_field_list_map_i32_i32(std::move(other.__fbthrift_field_list_map_i32_i32)),
    __fbthrift_field_list_map_i32_struct(std::move(other.__fbthrift_field_list_map_i32_struct)),
    __fbthrift_field_list_map_struct_i32(std::move(other.__fbthrift_field_list_map_struct_i32)),
    __fbthrift_field_set_list_i32(std::move(other.__fbthrift_field_set_list_i32)),
    __fbthrift_field_set_list_struct(std::move(other.__fbthrift_field_set_list_struct)),
    __fbthrift_field_set_set_i32(std::move(other.__fbthrift_field_set_set_i32)),
    __fbthrift_field_set_set_struct(std::move(other.__fbthrift_field_set_set_struct)),
    __fbthrift_field_set_map_i32_i32(std::move(other.__fbthrift_field_set_map_i32_i32)),
    __fbthrift_field_set_map_i32_struct(std::move(other.__fbthrift_field_set_map_i32_struct)),
    __fbthrift_field_set_map_struct_i32(std::move(other.__fbthrift_field_set_map_struct_i32)),
    __fbthrift_field_map_i32_map_i32_i32(std::move(other.__fbthrift_field_map_i32_map_i32_i32)),
    __fbthrift_field_map_i32_map_struct_i32(std::move(other.__fbthrift_field_map_i32_map_struct_i32)),
    __fbthrift_field_map_i32_map_i32_struct(std::move(other.__fbthrift_field_map_i32_map_i32_struct)),
    __fbthrift_field_map_i32_map_list_i32_i32(std::move(other.__fbthrift_field_map_i32_map_list_i32_i32)),
    __fbthrift_field_map_i32_map_list_struct_i32(std::move(other.__fbthrift_field_map_i32_map_list_struct_i32)),
    __isset(other.__isset) {
}

Containers& Containers::operator=([[maybe_unused]] Containers&& other) noexcept {
    this->__fbthrift_field_struct_list = std::move(other.__fbthrift_field_struct_list);
    this->__fbthrift_field_union_list = std::move(other.__fbthrift_field_union_list);
    this->__fbthrift_field_enum_list = std::move(other.__fbthrift_field_enum_list);
    this->__fbthrift_field_struct_set = std::move(other.__fbthrift_field_struct_set);
    this->__fbthrift_field_union_set = std::move(other.__fbthrift_field_union_set);
    this->__fbthrift_field_enum_set = std::move(other.__fbthrift_field_enum_set);
    this->__fbthrift_field_struct_map = std::move(other.__fbthrift_field_struct_map);
    this->__fbthrift_field_union_map = std::move(other.__fbthrift_field_union_map);
    this->__fbthrift_field_enum_map = std::move(other.__fbthrift_field_enum_map);
    this->__fbthrift_field_struct_map_2 = std::move(other.__fbthrift_field_struct_map_2);
    this->__fbthrift_field_union_map_2 = std::move(other.__fbthrift_field_union_map_2);
    this->__fbthrift_field_enum_map_2 = std::move(other.__fbthrift_field_enum_map_2);
    this->__fbthrift_field_list_map = std::move(other.__fbthrift_field_list_map);
    this->__fbthrift_field_list_map_2 = std::move(other.__fbthrift_field_list_map_2);
    this->__fbthrift_field_set_map = std::move(other.__fbthrift_field_set_map);
    this->__fbthrift_field_set_map_2 = std::move(other.__fbthrift_field_set_map_2);
    this->__fbthrift_field_map_map = std::move(other.__fbthrift_field_map_map);
    this->__fbthrift_field_map_map_2 = std::move(other.__fbthrift_field_map_map_2);
    this->__fbthrift_field_list_list_i32 = std::move(other.__fbthrift_field_list_list_i32);
    this->__fbthrift_field_list_list_struct = std::move(other.__fbthrift_field_list_list_struct);
    this->__fbthrift_field_list_set_i32 = std::move(other.__fbthrift_field_list_set_i32);
    this->__fbthrift_field_list_set_struct = std::move(other.__fbthrift_field_list_set_struct);
    this->__fbthrift_field_list_map_i32_i32 = std::move(other.__fbthrift_field_list_map_i32_i32);
    this->__fbthrift_field_list_map_i32_struct = std::move(other.__fbthrift_field_list_map_i32_struct);
    this->__fbthrift_field_list_map_struct_i32 = std::move(other.__fbthrift_field_list_map_struct_i32);
    this->__fbthrift_field_set_list_i32 = std::move(other.__fbthrift_field_set_list_i32);
    this->__fbthrift_field_set_list_struct = std::move(other.__fbthrift_field_set_list_struct);
    this->__fbthrift_field_set_set_i32 = std::move(other.__fbthrift_field_set_set_i32);
    this->__fbthrift_field_set_set_struct = std::move(other.__fbthrift_field_set_set_struct);
    this->__fbthrift_field_set_map_i32_i32 = std::move(other.__fbthrift_field_set_map_i32_i32);
    this->__fbthrift_field_set_map_i32_struct = std::move(other.__fbthrift_field_set_map_i32_struct);
    this->__fbthrift_field_set_map_struct_i32 = std::move(other.__fbthrift_field_set_map_struct_i32);
    this->__fbthrift_field_map_i32_map_i32_i32 = std::move(other.__fbthrift_field_map_i32_map_i32_i32);
    this->__fbthrift_field_map_i32_map_struct_i32 = std::move(other.__fbthrift_field_map_i32_map_struct_i32);
    this->__fbthrift_field_map_i32_map_i32_struct = std::move(other.__fbthrift_field_map_i32_map_i32_struct);
    this->__fbthrift_field_map_i32_map_list_i32_i32 = std::move(other.__fbthrift_field_map_i32_map_list_i32_i32);
    this->__fbthrift_field_map_i32_map_list_struct_i32 = std::move(other.__fbthrift_field_map_i32_map_list_struct_i32);
    __isset = other.__isset;
    return *this;
}


Containers::Containers(apache::thrift::FragileConstructor, ::std::vector<::cpp2::MyStruct> struct_list__arg, ::std::vector<::cpp2::MyUnion> union_list__arg, ::std::vector<::cpp2::MyEnum> enum_list__arg, ::std::set<::cpp2::MyStruct> struct_set__arg, ::std::set<::cpp2::MyUnion> union_set__arg, ::std::set<::cpp2::MyEnum> enum_set__arg, ::std::map<::cpp2::MyStruct, ::std::int64_t> struct_map__arg, ::std::map<::cpp2::MyUnion, ::std::int64_t> union_map__arg, ::std::map<::cpp2::MyEnum, ::std::int64_t> enum_map__arg, ::std::map<::std::int32_t, ::cpp2::MyStruct> struct_map_2__arg, ::std::map<::std::int32_t, ::cpp2::MyUnion> union_map_2__arg, ::std::map<::std::int32_t, ::cpp2::MyEnum> enum_map_2__arg, ::std::map<::std::vector<::std::int32_t>, ::std::int32_t> list_map__arg, ::std::map<::std::int32_t, ::std::vector<::std::int32_t>> list_map_2__arg, ::std::map<::std::set<::std::int32_t>, ::std::int32_t> set_map__arg, ::std::map<::std::int32_t, ::std::set<::std::int32_t>> set_map_2__arg, ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t> map_map__arg, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> map_map_2__arg, ::std::vector<::std::vector<::std::int32_t>> list_list_i32__arg, ::std::vector<::std::vector<::cpp2::MyStruct>> list_list_struct__arg, ::std::vector<::std::set<::std::int32_t>> list_set_i32__arg, ::std::vector<::std::set<::cpp2::MyStruct>> list_set_struct__arg, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> list_map_i32_i32__arg, ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>> list_map_i32_struct__arg, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>> list_map_struct_i32__arg, ::std::set<::std::vector<::std::int32_t>> set_list_i32__arg, ::std::set<::std::vector<::cpp2::MyStruct>> set_list_struct__arg, ::std::set<::std::set<::std::int32_t>> set_set_i32__arg, ::std::set<::std::set<::cpp2::MyStruct>> set_set_struct__arg, ::std::set<::std::map<::std::int32_t, ::std::int32_t>> set_map_i32_i32__arg, ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>> set_map_i32_struct__arg, ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>> set_map_struct_i32__arg, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> map_i32_map_i32_i32__arg, ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>> map_i32_map_struct_i32__arg, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>> map_i32_map_i32_struct__arg, ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> map_i32_map_list_i32_i32__arg, ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>> map_i32_map_list_struct_i32__arg) :
    __fbthrift_field_struct_list(std::move(struct_list__arg)),
    __fbthrift_field_union_list(std::move(union_list__arg)),
    __fbthrift_field_enum_list(std::move(enum_list__arg)),
    __fbthrift_field_struct_set(std::move(struct_set__arg)),
    __fbthrift_field_union_set(std::move(union_set__arg)),
    __fbthrift_field_enum_set(std::move(enum_set__arg)),
    __fbthrift_field_struct_map(std::move(struct_map__arg)),
    __fbthrift_field_union_map(std::move(union_map__arg)),
    __fbthrift_field_enum_map(std::move(enum_map__arg)),
    __fbthrift_field_struct_map_2(std::move(struct_map_2__arg)),
    __fbthrift_field_union_map_2(std::move(union_map_2__arg)),
    __fbthrift_field_enum_map_2(std::move(enum_map_2__arg)),
    __fbthrift_field_list_map(std::move(list_map__arg)),
    __fbthrift_field_list_map_2(std::move(list_map_2__arg)),
    __fbthrift_field_set_map(std::move(set_map__arg)),
    __fbthrift_field_set_map_2(std::move(set_map_2__arg)),
    __fbthrift_field_map_map(std::move(map_map__arg)),
    __fbthrift_field_map_map_2(std::move(map_map_2__arg)),
    __fbthrift_field_list_list_i32(std::move(list_list_i32__arg)),
    __fbthrift_field_list_list_struct(std::move(list_list_struct__arg)),
    __fbthrift_field_list_set_i32(std::move(list_set_i32__arg)),
    __fbthrift_field_list_set_struct(std::move(list_set_struct__arg)),
    __fbthrift_field_list_map_i32_i32(std::move(list_map_i32_i32__arg)),
    __fbthrift_field_list_map_i32_struct(std::move(list_map_i32_struct__arg)),
    __fbthrift_field_list_map_struct_i32(std::move(list_map_struct_i32__arg)),
    __fbthrift_field_set_list_i32(std::move(set_list_i32__arg)),
    __fbthrift_field_set_list_struct(std::move(set_list_struct__arg)),
    __fbthrift_field_set_set_i32(std::move(set_set_i32__arg)),
    __fbthrift_field_set_set_struct(std::move(set_set_struct__arg)),
    __fbthrift_field_set_map_i32_i32(std::move(set_map_i32_i32__arg)),
    __fbthrift_field_set_map_i32_struct(std::move(set_map_i32_struct__arg)),
    __fbthrift_field_set_map_struct_i32(std::move(set_map_struct_i32__arg)),
    __fbthrift_field_map_i32_map_i32_i32(std::move(map_i32_map_i32_i32__arg)),
    __fbthrift_field_map_i32_map_struct_i32(std::move(map_i32_map_struct_i32__arg)),
    __fbthrift_field_map_i32_map_i32_struct(std::move(map_i32_map_i32_struct__arg)),
    __fbthrift_field_map_i32_map_list_i32_i32(std::move(map_i32_map_list_i32_i32__arg)),
    __fbthrift_field_map_i32_map_list_struct_i32(std::move(map_i32_map_list_struct_i32__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
  __isset.set(folly::index_constant<28>(), true);
  __isset.set(folly::index_constant<29>(), true);
  __isset.set(folly::index_constant<30>(), true);
  __isset.set(folly::index_constant<31>(), true);
  __isset.set(folly::index_constant<32>(), true);
  __isset.set(folly::index_constant<33>(), true);
  __isset.set(folly::index_constant<34>(), true);
  __isset.set(folly::index_constant<35>(), true);
  __isset.set(folly::index_constant<36>(), true);
}

void Containers::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_struct_list.clear();
  this->__fbthrift_field_union_list.clear();
  this->__fbthrift_field_enum_list.clear();
  this->__fbthrift_field_struct_set.clear();
  this->__fbthrift_field_union_set.clear();
  this->__fbthrift_field_enum_set.clear();
  this->__fbthrift_field_struct_map.clear();
  this->__fbthrift_field_union_map.clear();
  this->__fbthrift_field_enum_map.clear();
  this->__fbthrift_field_struct_map_2.clear();
  this->__fbthrift_field_union_map_2.clear();
  this->__fbthrift_field_enum_map_2.clear();
  this->__fbthrift_field_list_map.clear();
  this->__fbthrift_field_list_map_2.clear();
  this->__fbthrift_field_set_map.clear();
  this->__fbthrift_field_set_map_2.clear();
  this->__fbthrift_field_map_map.clear();
  this->__fbthrift_field_map_map_2.clear();
  this->__fbthrift_field_list_list_i32.clear();
  this->__fbthrift_field_list_list_struct.clear();
  this->__fbthrift_field_list_set_i32.clear();
  this->__fbthrift_field_list_set_struct.clear();
  this->__fbthrift_field_list_map_i32_i32.clear();
  this->__fbthrift_field_list_map_i32_struct.clear();
  this->__fbthrift_field_list_map_struct_i32.clear();
  this->__fbthrift_field_set_list_i32.clear();
  this->__fbthrift_field_set_list_struct.clear();
  this->__fbthrift_field_set_set_i32.clear();
  this->__fbthrift_field_set_set_struct.clear();
  this->__fbthrift_field_set_map_i32_i32.clear();
  this->__fbthrift_field_set_map_i32_struct.clear();
  this->__fbthrift_field_set_map_struct_i32.clear();
  this->__fbthrift_field_map_i32_map_i32_i32.clear();
  this->__fbthrift_field_map_i32_map_struct_i32.clear();
  this->__fbthrift_field_map_i32_map_i32_struct.clear();
  this->__fbthrift_field_map_i32_map_list_i32_i32.clear();
  this->__fbthrift_field_map_i32_map_list_struct_i32.clear();
  __isset = {};
}

void Containers::__fbthrift_clear_terse_fields() {
}

bool Containers::__fbthrift_is_empty() const {
  return false;
}

bool Containers::operator==([[maybe_unused]] const Containers& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Containers::operator<([[maybe_unused]] const Containers& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::std::vector<::cpp2::MyStruct>& Containers::get_struct_list() const& {
  return __fbthrift_field_struct_list;
}

::std::vector<::cpp2::MyStruct> Containers::get_struct_list() && {
  return static_cast<::std::vector<::cpp2::MyStruct>&&>(__fbthrift_field_struct_list);
}

const ::std::vector<::cpp2::MyUnion>& Containers::get_union_list() const& {
  return __fbthrift_field_union_list;
}

::std::vector<::cpp2::MyUnion> Containers::get_union_list() && {
  return static_cast<::std::vector<::cpp2::MyUnion>&&>(__fbthrift_field_union_list);
}

const ::std::vector<::cpp2::MyEnum>& Containers::get_enum_list() const& {
  return __fbthrift_field_enum_list;
}

::std::vector<::cpp2::MyEnum> Containers::get_enum_list() && {
  return static_cast<::std::vector<::cpp2::MyEnum>&&>(__fbthrift_field_enum_list);
}

const ::std::set<::cpp2::MyStruct>& Containers::get_struct_set() const& {
  return __fbthrift_field_struct_set;
}

::std::set<::cpp2::MyStruct> Containers::get_struct_set() && {
  return static_cast<::std::set<::cpp2::MyStruct>&&>(__fbthrift_field_struct_set);
}

const ::std::set<::cpp2::MyUnion>& Containers::get_union_set() const& {
  return __fbthrift_field_union_set;
}

::std::set<::cpp2::MyUnion> Containers::get_union_set() && {
  return static_cast<::std::set<::cpp2::MyUnion>&&>(__fbthrift_field_union_set);
}

const ::std::set<::cpp2::MyEnum>& Containers::get_enum_set() const& {
  return __fbthrift_field_enum_set;
}

::std::set<::cpp2::MyEnum> Containers::get_enum_set() && {
  return static_cast<::std::set<::cpp2::MyEnum>&&>(__fbthrift_field_enum_set);
}

const ::std::map<::cpp2::MyStruct, ::std::int64_t>& Containers::get_struct_map() const& {
  return __fbthrift_field_struct_map;
}

::std::map<::cpp2::MyStruct, ::std::int64_t> Containers::get_struct_map() && {
  return static_cast<::std::map<::cpp2::MyStruct, ::std::int64_t>&&>(__fbthrift_field_struct_map);
}

const ::std::map<::cpp2::MyUnion, ::std::int64_t>& Containers::get_union_map() const& {
  return __fbthrift_field_union_map;
}

::std::map<::cpp2::MyUnion, ::std::int64_t> Containers::get_union_map() && {
  return static_cast<::std::map<::cpp2::MyUnion, ::std::int64_t>&&>(__fbthrift_field_union_map);
}

const ::std::map<::cpp2::MyEnum, ::std::int64_t>& Containers::get_enum_map() const& {
  return __fbthrift_field_enum_map;
}

::std::map<::cpp2::MyEnum, ::std::int64_t> Containers::get_enum_map() && {
  return static_cast<::std::map<::cpp2::MyEnum, ::std::int64_t>&&>(__fbthrift_field_enum_map);
}

const ::std::map<::std::int32_t, ::cpp2::MyStruct>& Containers::get_struct_map_2() const& {
  return __fbthrift_field_struct_map_2;
}

::std::map<::std::int32_t, ::cpp2::MyStruct> Containers::get_struct_map_2() && {
  return static_cast<::std::map<::std::int32_t, ::cpp2::MyStruct>&&>(__fbthrift_field_struct_map_2);
}

const ::std::map<::std::int32_t, ::cpp2::MyUnion>& Containers::get_union_map_2() const& {
  return __fbthrift_field_union_map_2;
}

::std::map<::std::int32_t, ::cpp2::MyUnion> Containers::get_union_map_2() && {
  return static_cast<::std::map<::std::int32_t, ::cpp2::MyUnion>&&>(__fbthrift_field_union_map_2);
}

const ::std::map<::std::int32_t, ::cpp2::MyEnum>& Containers::get_enum_map_2() const& {
  return __fbthrift_field_enum_map_2;
}

::std::map<::std::int32_t, ::cpp2::MyEnum> Containers::get_enum_map_2() && {
  return static_cast<::std::map<::std::int32_t, ::cpp2::MyEnum>&&>(__fbthrift_field_enum_map_2);
}

const ::std::map<::std::vector<::std::int32_t>, ::std::int32_t>& Containers::get_list_map() const& {
  return __fbthrift_field_list_map;
}

::std::map<::std::vector<::std::int32_t>, ::std::int32_t> Containers::get_list_map() && {
  return static_cast<::std::map<::std::vector<::std::int32_t>, ::std::int32_t>&&>(__fbthrift_field_list_map);
}

const ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>& Containers::get_list_map_2() const& {
  return __fbthrift_field_list_map_2;
}

::std::map<::std::int32_t, ::std::vector<::std::int32_t>> Containers::get_list_map_2() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>&&>(__fbthrift_field_list_map_2);
}

const ::std::map<::std::set<::std::int32_t>, ::std::int32_t>& Containers::get_set_map() const& {
  return __fbthrift_field_set_map;
}

::std::map<::std::set<::std::int32_t>, ::std::int32_t> Containers::get_set_map() && {
  return static_cast<::std::map<::std::set<::std::int32_t>, ::std::int32_t>&&>(__fbthrift_field_set_map);
}

const ::std::map<::std::int32_t, ::std::set<::std::int32_t>>& Containers::get_set_map_2() const& {
  return __fbthrift_field_set_map_2;
}

::std::map<::std::int32_t, ::std::set<::std::int32_t>> Containers::get_set_map_2() && {
  return static_cast<::std::map<::std::int32_t, ::std::set<::std::int32_t>>&&>(__fbthrift_field_set_map_2);
}

const ::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>& Containers::get_map_map() const& {
  return __fbthrift_field_map_map;
}

::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t> Containers::get_map_map() && {
  return static_cast<::std::map<::std::map<::std::int32_t, ::std::int32_t>, ::std::int32_t>&&>(__fbthrift_field_map_map);
}

const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>& Containers::get_map_map_2() const& {
  return __fbthrift_field_map_map_2;
}

::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> Containers::get_map_map_2() && {
  return static_cast<::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>&&>(__fbthrift_field_map_map_2);
}

const ::std::vector<::std::vector<::std::int32_t>>& Containers::get_list_list_i32() const& {
  return __fbthrift_field_list_list_i32;
}

::std::vector<::std::vector<::std::int32_t>> Containers::get_list_list_i32() && {
  return static_cast<::std::vector<::std::vector<::std::int32_t>>&&>(__fbthrift_field_list_list_i32);
}

const ::std::vector<::std::vector<::cpp2::MyStruct>>& Containers::get_list_list_struct() const& {
  return __fbthrift_field_list_list_struct;
}

::std::vector<::std::vector<::cpp2::MyStruct>> Containers::get_list_list_struct() && {
  return static_cast<::std::vector<::std::vector<::cpp2::MyStruct>>&&>(__fbthrift_field_list_list_struct);
}

const ::std::vector<::std::set<::std::int32_t>>& Containers::get_list_set_i32() const& {
  return __fbthrift_field_list_set_i32;
}

::std::vector<::std::set<::std::int32_t>> Containers::get_list_set_i32() && {
  return static_cast<::std::vector<::std::set<::std::int32_t>>&&>(__fbthrift_field_list_set_i32);
}

const ::std::vector<::std::set<::cpp2::MyStruct>>& Containers::get_list_set_struct() const& {
  return __fbthrift_field_list_set_struct;
}

::std::vector<::std::set<::cpp2::MyStruct>> Containers::get_list_set_struct() && {
  return static_cast<::std::vector<::std::set<::cpp2::MyStruct>>&&>(__fbthrift_field_list_set_struct);
}

const ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& Containers::get_list_map_i32_i32() const& {
  return __fbthrift_field_list_map_i32_i32;
}

::std::vector<::std::map<::std::int32_t, ::std::int32_t>> Containers::get_list_map_i32_i32() && {
  return static_cast<::std::vector<::std::map<::std::int32_t, ::std::int32_t>>&&>(__fbthrift_field_list_map_i32_i32);
}

const ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>& Containers::get_list_map_i32_struct() const& {
  return __fbthrift_field_list_map_i32_struct;
}

::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>> Containers::get_list_map_i32_struct() && {
  return static_cast<::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>&&>(__fbthrift_field_list_map_i32_struct);
}

const ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>& Containers::get_list_map_struct_i32() const& {
  return __fbthrift_field_list_map_struct_i32;
}

::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>> Containers::get_list_map_struct_i32() && {
  return static_cast<::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>&&>(__fbthrift_field_list_map_struct_i32);
}

const ::std::set<::std::vector<::std::int32_t>>& Containers::get_set_list_i32() const& {
  return __fbthrift_field_set_list_i32;
}

::std::set<::std::vector<::std::int32_t>> Containers::get_set_list_i32() && {
  return static_cast<::std::set<::std::vector<::std::int32_t>>&&>(__fbthrift_field_set_list_i32);
}

const ::std::set<::std::vector<::cpp2::MyStruct>>& Containers::get_set_list_struct() const& {
  return __fbthrift_field_set_list_struct;
}

::std::set<::std::vector<::cpp2::MyStruct>> Containers::get_set_list_struct() && {
  return static_cast<::std::set<::std::vector<::cpp2::MyStruct>>&&>(__fbthrift_field_set_list_struct);
}

const ::std::set<::std::set<::std::int32_t>>& Containers::get_set_set_i32() const& {
  return __fbthrift_field_set_set_i32;
}

::std::set<::std::set<::std::int32_t>> Containers::get_set_set_i32() && {
  return static_cast<::std::set<::std::set<::std::int32_t>>&&>(__fbthrift_field_set_set_i32);
}

const ::std::set<::std::set<::cpp2::MyStruct>>& Containers::get_set_set_struct() const& {
  return __fbthrift_field_set_set_struct;
}

::std::set<::std::set<::cpp2::MyStruct>> Containers::get_set_set_struct() && {
  return static_cast<::std::set<::std::set<::cpp2::MyStruct>>&&>(__fbthrift_field_set_set_struct);
}

const ::std::set<::std::map<::std::int32_t, ::std::int32_t>>& Containers::get_set_map_i32_i32() const& {
  return __fbthrift_field_set_map_i32_i32;
}

::std::set<::std::map<::std::int32_t, ::std::int32_t>> Containers::get_set_map_i32_i32() && {
  return static_cast<::std::set<::std::map<::std::int32_t, ::std::int32_t>>&&>(__fbthrift_field_set_map_i32_i32);
}

const ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>& Containers::get_set_map_i32_struct() const& {
  return __fbthrift_field_set_map_i32_struct;
}

::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>> Containers::get_set_map_i32_struct() && {
  return static_cast<::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>&&>(__fbthrift_field_set_map_i32_struct);
}

const ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>& Containers::get_set_map_struct_i32() const& {
  return __fbthrift_field_set_map_struct_i32;
}

::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>> Containers::get_set_map_struct_i32() && {
  return static_cast<::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>&&>(__fbthrift_field_set_map_struct_i32);
}

const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>& Containers::get_map_i32_map_i32_i32() const& {
  return __fbthrift_field_map_i32_map_i32_i32;
}

::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>> Containers::get_map_i32_map_i32_i32() && {
  return static_cast<::std::map<::std::int32_t, ::std::map<::std::int32_t, ::std::int32_t>>&&>(__fbthrift_field_map_i32_map_i32_i32);
}

const ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>& Containers::get_map_i32_map_struct_i32() const& {
  return __fbthrift_field_map_i32_map_struct_i32;
}

::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>> Containers::get_map_i32_map_struct_i32() && {
  return static_cast<::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>&&>(__fbthrift_field_map_i32_map_struct_i32);
}

const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>& Containers::get_map_i32_map_i32_struct() const& {
  return __fbthrift_field_map_i32_map_i32_struct;
}

::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>> Containers::get_map_i32_map_i32_struct() && {
  return static_cast<::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>&&>(__fbthrift_field_map_i32_map_i32_struct);
}

const ::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>& Containers::get_map_i32_map_list_i32_i32() const& {
  return __fbthrift_field_map_i32_map_list_i32_i32;
}

::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>> Containers::get_map_i32_map_list_i32_i32() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>&&>(__fbthrift_field_map_i32_map_list_i32_i32);
}

const ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>& Containers::get_map_i32_map_list_struct_i32() const& {
  return __fbthrift_field_map_i32_map_list_struct_i32;
}

::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>> Containers::get_map_i32_map_list_struct_i32() && {
  return static_cast<::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>&&>(__fbthrift_field_map_i32_map_list_struct_i32);
}

void swap([[maybe_unused]] Containers& a, [[maybe_unused]] Containers& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_struct_list, b.__fbthrift_field_struct_list);
  swap(a.__fbthrift_field_union_list, b.__fbthrift_field_union_list);
  swap(a.__fbthrift_field_enum_list, b.__fbthrift_field_enum_list);
  swap(a.__fbthrift_field_struct_set, b.__fbthrift_field_struct_set);
  swap(a.__fbthrift_field_union_set, b.__fbthrift_field_union_set);
  swap(a.__fbthrift_field_enum_set, b.__fbthrift_field_enum_set);
  swap(a.__fbthrift_field_struct_map, b.__fbthrift_field_struct_map);
  swap(a.__fbthrift_field_union_map, b.__fbthrift_field_union_map);
  swap(a.__fbthrift_field_enum_map, b.__fbthrift_field_enum_map);
  swap(a.__fbthrift_field_struct_map_2, b.__fbthrift_field_struct_map_2);
  swap(a.__fbthrift_field_union_map_2, b.__fbthrift_field_union_map_2);
  swap(a.__fbthrift_field_enum_map_2, b.__fbthrift_field_enum_map_2);
  swap(a.__fbthrift_field_list_map, b.__fbthrift_field_list_map);
  swap(a.__fbthrift_field_list_map_2, b.__fbthrift_field_list_map_2);
  swap(a.__fbthrift_field_set_map, b.__fbthrift_field_set_map);
  swap(a.__fbthrift_field_set_map_2, b.__fbthrift_field_set_map_2);
  swap(a.__fbthrift_field_map_map, b.__fbthrift_field_map_map);
  swap(a.__fbthrift_field_map_map_2, b.__fbthrift_field_map_map_2);
  swap(a.__fbthrift_field_list_list_i32, b.__fbthrift_field_list_list_i32);
  swap(a.__fbthrift_field_list_list_struct, b.__fbthrift_field_list_list_struct);
  swap(a.__fbthrift_field_list_set_i32, b.__fbthrift_field_list_set_i32);
  swap(a.__fbthrift_field_list_set_struct, b.__fbthrift_field_list_set_struct);
  swap(a.__fbthrift_field_list_map_i32_i32, b.__fbthrift_field_list_map_i32_i32);
  swap(a.__fbthrift_field_list_map_i32_struct, b.__fbthrift_field_list_map_i32_struct);
  swap(a.__fbthrift_field_list_map_struct_i32, b.__fbthrift_field_list_map_struct_i32);
  swap(a.__fbthrift_field_set_list_i32, b.__fbthrift_field_set_list_i32);
  swap(a.__fbthrift_field_set_list_struct, b.__fbthrift_field_set_list_struct);
  swap(a.__fbthrift_field_set_set_i32, b.__fbthrift_field_set_set_i32);
  swap(a.__fbthrift_field_set_set_struct, b.__fbthrift_field_set_set_struct);
  swap(a.__fbthrift_field_set_map_i32_i32, b.__fbthrift_field_set_map_i32_i32);
  swap(a.__fbthrift_field_set_map_i32_struct, b.__fbthrift_field_set_map_i32_struct);
  swap(a.__fbthrift_field_set_map_struct_i32, b.__fbthrift_field_set_map_struct_i32);
  swap(a.__fbthrift_field_map_i32_map_i32_i32, b.__fbthrift_field_map_i32_map_i32_i32);
  swap(a.__fbthrift_field_map_i32_map_struct_i32, b.__fbthrift_field_map_i32_map_struct_i32);
  swap(a.__fbthrift_field_map_i32_map_i32_struct, b.__fbthrift_field_map_i32_map_i32_struct);
  swap(a.__fbthrift_field_map_i32_map_list_i32_i32, b.__fbthrift_field_map_i32_map_list_i32_i32);
  swap(a.__fbthrift_field_map_i32_map_list_struct_i32, b.__fbthrift_field_map_i32_map_list_struct_i32);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::cpp2::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::cpp2::MyUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::cpp2::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::std::set<::cpp2::MyUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>,
        ::std::map<::cpp2::MyStruct, ::std::int64_t>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::variant, ::apache::thrift::type_class::integral>,
        ::std::map<::cpp2::MyUnion, ::std::int64_t>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
        ::std::map<::std::int32_t, ::cpp2::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
        ::std::map<::std::int32_t, ::cpp2::MyUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::vector<::std::vector<::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>,
        ::std::vector<::std::set<::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
        ::std::vector<::std::map<::std::int32_t, ::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>,
        ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::set<::std::vector<::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>,
        ::std::set<::std::set<::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
        ::std::set<::std::map<::std::int32_t, ::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>,
        ::std::set<::std::map<::cpp2::MyStruct, ::std::int32_t>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>,
        ::std::map<::std::int32_t, ::std::map<::cpp2::MyStruct, ::std::int32_t>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
        ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Containers,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>>,
        ::std::map<::std::int32_t, ::std::vector<::std::map<::cpp2::MyStruct, ::std::int32_t>>>>,
    "inconsistent use of json option");

} // namespace cpp2

namespace cpp2 { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace cpp2
namespace apache::thrift::detail::annotation {
}
