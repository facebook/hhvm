{
    "preamble": "",
    "consts": [
        {
            "name": "INF",
            "type": "Double"
        },
        {
            "name": "NAN",
            "type": "Double"
        },
        {
            "name": "PHP_DEBUG",
            "type": "Boolean"
        },
        {
            "name": "PHP_MAXPATHLEN",
            "type": "Int64"
        }
    ],
    "funcs": [
        {
            "name": "connection_aborted",
            "desc": "Checks whether the client disconnected.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns 1 if client disconnected, 0 otherwise."
            },
            "args": [
            ]
        },
        {
            "name": "connection_status",
            "desc": "Gets the connection status bitfield.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the connection status bitfield, which can be used against the CONNECTION_XXX constants to determine the connection status."
            },
            "args": [
            ]
        },
        {
            "name": "connection_timeout",
            "desc": "Determines whether the script timed out.",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns 1 if the script timed out, 0 otherwise."
            },
            "args": [
            ]
        },
        {
            "name": "constant",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns the value of the constant, or NULL if the constant is not defined."
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "desc": "The constant name."
                }
            ]
        },
        {
            "name": "define",
            "desc": "Defines a named constant at runtime.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "desc": "The name of the constant."
                },
                {
                    "name": "value",
                    "type": "Variant",
                    "desc": "The value of the constant; only scalar and null values are allowed. Scalar values are integer, float, string or boolean values. It is possible to define resource constants, however it is not recommended and may cause unpredictable behavior."
                },
                {
                    "name": "case_insensitive",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "If set to TRUE, the constant will be defined case-insensitive. The default behavior is case-sensitive; i.e. CONSTANT and Constant represent different values.\n\nCase-insensitive constants are stored as lower-case."
                }
            ]
        },
        {
            "name": "defined",
            "desc": "Checks whether the given constant exists and is defined.\n\nIf you want to see if a variable exists, use isset() as defined() only applies to constants. If you want to see if a function exists, use function_exists().",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE if the named constant given by name has been defined, FALSE otherwise."
            },
            "args": [
                {
                    "name": "name",
                    "type": "String",
                    "desc": "The constant name."
                },
                {
                    "name": "autoload",
                    "type": "Boolean",
                    "value": "true",
                    "desc": "Whether to try to autoload."
                }
            ]
        },
        {
            "name": "die",
            "flags": [
            ],
            "return": {
                "type": "Variant"
            },
            "args": [
                {
                    "name": "status",
                    "type": "Variant",
                    "value": "null_variant"
                }
            ]
        },
        {
            "name": "exit",
            "desc": "Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit() is called.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "status",
                    "type": "Variant",
                    "value": "null_variant",
                    "desc": "If status is a string, this function prints the status just before exiting.\n\nIf status is an integer, that value will be used as the exit status and not printed. Exit statuses should be in the range 0 to 254, the exit status 255 is reserved by PHP and shall not be used. The status 0 is used to terminate the program successfully. PHP >= 4.2.0 does NOT print the status if it is an integer."
                }
            ]
        },
        {
            "name": "__halt_compiler",
            "flags": [
            ],
            "return": {
                "type": null
            },
            "args": [
            ]
        },
        {
            "name": "ignore_user_abort",
            "desc": "Sets whether a client disconnect should cause a script to be aborted.\n\nWhen running PHP as a command line script, and the script's tty goes away without the script being terminated then the script will die the next time it tries to write anything, unless value is set to TRUE",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns the previous setting, as an integer."
            },
            "args": [
                {
                    "name": "setting",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "If set, this function will set the ignore_user_abort ini setting to the given value. If not, this function will only return the previous setting without changing it."
                }
            ]
        },
        {
            "name": "pack",
            "desc": "Pack given arguments into binary string according to format.\n\nThe idea for this function was taken from Perl and all formatting codes work the same as in Perl. However, there are some formatting codes that are missing such as Perl's \"u\" format code.\n\nNote that the distinction between signed and unsigned values only affects the function unpack(), where as function pack() gives the same result for signed and unsigned format codes.\n\nAlso note that PHP internally stores integer values as signed values of a machine-dependent size. If you give it an unsigned integer value too large to be stored that way it is converted to a float which often yields an undesired result.",
            "flags": [
                "VariableArguments"
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns a binary string containing data."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String",
                    "desc": "The format string consists of format codes followed by an optional repeater argument. The repeater argument can be either an integer value or * for repeating to the end of the input data. For a, A, h, H the repeat count specifies how many characters of one data argument are taken, for @ it is the absolute position where to put the next data, for everything else the repeat count specifies how many data arguments are consumed and packed into the resulting binary string.\n\nCurrently implemented formats are: pack() format characters Code Description a NUL-padded string A SPACE-padded string h Hex string, low nibble first H Hex string, high nibble first csigned char C unsigned char s signed short (always 16 bit, machine byte order) S unsigned short (always 16 bit, machine byte order) n unsigned short (always 16 bit, big endian byte order) v unsigned short (always 16 bit, little endian byte order) i signed integer (machine dependent size and byte order) I unsigned integer (machine dependent size and byte order) l signed long (always 32 bit, machine byte order) L unsigned long (always 32 bit, machine byte order) N unsigned long (always 32 bit, big endian byte order) V unsigned long (always 32 bit, little endian byte order) f float (machine dependent size and representation) d double (machine dependent size and representation) x NUL byte X Back up one byte @ NUL-fill to absolute position"
                }
            ]
        },
        {
            "name": "sleep",
            "flags": [
            ],
            "return": {
                "type": "Int64",
                "desc": "Returns zero on success, or FALSE on errors. If the call was interrupted by a signal, sleep() returns the number of seconds left to sleep."
            },
            "args": [
                {
                    "name": "seconds",
                    "type": "Int32",
                    "desc": "Halt time in seconds."
                }
            ]
        },
        {
            "name": "usleep",
            "desc": "Delays program execution for the given number of micro seconds.",
            "flags": [
            ],
            "return": {
                "type": null,
                "desc": "No value is returned."
            },
            "args": [
                {
                    "name": "micro_seconds",
                    "type": "Int32",
                    "desc": "Halt time in micro seconds. A micro second is one millionth of a second."
                }
            ]
        },
        {
            "name": "time_nanosleep",
            "desc": "Delays program execution for the given number of seconds and nanoseconds.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns TRUE on success or FALSE on failure.\n\nIf the delay was interrupted by a signal, an associative array will be returned with the components: seconds - number of seconds remaining in the delay nanoseconds - number of nanoseconds remaining in the delay"
            },
            "args": [
                {
                    "name": "seconds",
                    "type": "Int32",
                    "desc": "Must be a positive integer."
                },
                {
                    "name": "nanoseconds",
                    "type": "Int32",
                    "desc": "Must be a positive integer less than 1 billion."
                }
            ]
        },
        {
            "name": "time_sleep_until",
            "desc": "Makes the script sleep until the specified timestamp.",
            "flags": [
            ],
            "return": {
                "type": "Boolean",
                "desc": "Returns TRUE on success or FALSE on failure."
            },
            "args": [
                {
                    "name": "timestamp",
                    "type": "Double",
                    "desc": "The timestamp when the script should wake."
                }
            ]
        },
        {
            "name": "uniqid",
            "desc": "Gets a prefixed unique identifier based on the current time in microseconds.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "Returns the unique identifier, as a string."
            },
            "args": [
                {
                    "name": "prefix",
                    "type": "String",
                    "value": "null_string",
                    "desc": "Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond.\n\nWith an empty prefix, the returned string will be 13 characters long. If more_entropy is TRUE, it will be 23 characters."
                },
                {
                    "name": "more_entropy",
                    "type": "Boolean",
                    "value": "false",
                    "desc": "If set to TRUE, uniqid() will add additional entropy (using the combined linear congruential generator) at the end of the return value, which should make the results more unique."
                }
            ]
        },
        {
            "name": "unpack",
            "desc": "Unpacks from a binary string into an array according to the given format.\n\nunpack() works slightly different from Perl as the unpacked data is stored in an associative array. To accomplish this you have to name the different format codes and separate them by a slash \/.",
            "flags": [
            ],
            "return": {
                "type": "Variant",
                "desc": "Returns an associative array containing unpacked elements of binary string."
            },
            "args": [
                {
                    "name": "format",
                    "type": "String",
                    "desc": "See pack() for an explanation of the format codes."
                },
                {
                    "name": "data",
                    "type": "String",
                    "desc": "The packed data."
                }
            ]
        },
        {
            "name": "sys_getloadavg",
            "desc": "Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "Returns an array with three samples (last 1, 5 and 15 minutes)."
            },
            "args": [
            ]
        },
        {
            "name": "token_get_all",
            "desc": "token_get_all() parses the given source string into PHP language tokens using the Zend engine's lexical scanner.\n\nFor a list of parser tokens, see List of Parser Tokens, or use token_name() to translate a token value into its string representation.",
            "flags": [
            ],
            "return": {
                "type": "VariantMap",
                "desc": "An array of token identifiers. Each individual token identifier is either a single character (i.e.: ;, ., >, !, etc...), or a three element array containing the token index in element 0, the string content of the original token in element 1 and the line number in element 2."
            },
            "args": [
                {
                    "name": "source",
                    "type": "String",
                    "desc": "The PHP source to parse."
                }
            ]
        },
        {
            "name": "token_name",
            "desc": "token_name() gets the symbolic name for a PHP token value.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "The symbolic name of the given token. The returned name returned matches the name of the matching token constant."
            },
            "args": [
                {
                    "name": "token",
                    "type": "Int64",
                    "desc": "The token value."
                }
            ]
        },
        {
            "name": "hphp_to_string",
            "desc": "Casts a given value to a string.",
            "flags": [
            ],
            "return": {
                "type": "String",
                "desc": "The result of the string cast."
            },
            "args": [
                {
                    "name": "v",
                    "type": "Variant",
                    "desc": "The value being casted to a string."
                }
            ]
        }
    ],
    "classes": [
    ]
}
