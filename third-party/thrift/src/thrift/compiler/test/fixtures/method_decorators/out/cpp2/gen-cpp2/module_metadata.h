/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/method_decorators/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <vector>

#include <thrift/lib/cpp2/gen/module_metadata_h.h>
#include "thrift/compiler/test/fixtures/method_decorators/gen-cpp2/module_types.h"

namespace cpp2 {
class DecoratedService;
} // namespace cpp2
namespace cpp2 {
class UndecoratedService;
} // namespace cpp2
namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService;
} // namespace cpp2
namespace cpp2 {
class DecoratedService_ExtendsDecoratedService;
} // namespace cpp2
namespace cpp2 {
class UndecoratedService_ExtendsDecoratedService;
} // namespace cpp2
namespace cpp2 {
class DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService;
} // namespace cpp2

namespace apache {
namespace thrift {
namespace detail {
namespace md {

template <>
class StructMetadata<::cpp2::Request> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::cpp2::Response> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::DecoratedService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_noop(ThriftMetadata& metadata, ThriftService& context);
  static void gen_echo(ThriftMetadata& metadata, ThriftService& context);
  static void gen_increment(ThriftMetadata& metadata, ThriftService& context);
  static void gen_sum(ThriftMetadata& metadata, ThriftService& context);
  static void gen_withStruct(ThriftMetadata& metadata, ThriftService& context);
  static void gen_multiParam(ThriftMetadata& metadata, ThriftService& context);
  static void gen_echoInteraction(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::UndecoratedService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_noop(ThriftMetadata& metadata, ThriftService& context);
  static void gen_echo(ThriftMetadata& metadata, ThriftService& context);
  static void gen_increment(ThriftMetadata& metadata, ThriftService& context);
  static void gen_sum(ThriftMetadata& metadata, ThriftService& context);
  static void gen_withStruct(ThriftMetadata& metadata, ThriftService& context);
  static void gen_multiParam(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_extension(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsDecoratedService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_extension(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::UndecoratedService_ExtendsDecoratedService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_extension(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::apache::thrift::ServiceHandler<::cpp2::DecoratedService_ExtendsUndecoratedService_ExtendsDecoratedService>> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_secondExtension(ThriftMetadata& metadata, ThriftService& context);
};
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
