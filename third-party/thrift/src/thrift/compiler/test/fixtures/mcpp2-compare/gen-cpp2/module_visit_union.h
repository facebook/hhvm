/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/visitation/visit_union.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitUnion<::some::valid::ns::SimpleUnion> {

  template <typename F, typename T>
  decltype(auto) operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::intValue:
      return f(0, *static_cast<T&&>(t).intValue_ref());
    case Union::Type::stringValue:
      return f(1, *static_cast<T&&>(t).stringValue_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).intValue_ref()))();
    }
  }
};
template <>
struct VisitUnion<::some::valid::ns::ComplexUnion> {

  template <typename F, typename T>
  decltype(auto) operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::intValue:
      return f(0, *static_cast<T&&>(t).intValue_ref());
    case Union::Type::opt_intValue:
      return f(1, *static_cast<T&&>(t).opt_intValue_ref());
    case Union::Type::stringValue:
      return f(2, *static_cast<T&&>(t).stringValue_ref());
    case Union::Type::opt_stringValue:
      return f(3, *static_cast<T&&>(t).opt_stringValue_ref());
    case Union::Type::intValue2:
      return f(4, *static_cast<T&&>(t).intValue2_ref());
    case Union::Type::intValue3:
      return f(5, *static_cast<T&&>(t).intValue3_ref());
    case Union::Type::doubelValue:
      return f(6, *static_cast<T&&>(t).doubelValue_ref());
    case Union::Type::boolValue:
      return f(7, *static_cast<T&&>(t).boolValue_ref());
    case Union::Type::union_list:
      return f(8, *static_cast<T&&>(t).union_list_ref());
    case Union::Type::union_set:
      return f(9, *static_cast<T&&>(t).union_set_ref());
    case Union::Type::union_map:
      return f(10, *static_cast<T&&>(t).union_map_ref());
    case Union::Type::opt_union_map:
      return f(11, *static_cast<T&&>(t).opt_union_map_ref());
    case Union::Type::enum_field:
      return f(12, *static_cast<T&&>(t).enum_field_ref());
    case Union::Type::enum_container:
      return f(13, *static_cast<T&&>(t).enum_container_ref());
    case Union::Type::a_struct:
      return f(14, *static_cast<T&&>(t).a_struct_ref());
    case Union::Type::a_set_struct:
      return f(15, *static_cast<T&&>(t).a_set_struct_ref());
    case Union::Type::a_union:
      return f(16, *static_cast<T&&>(t).a_union_ref());
    case Union::Type::opt_a_union:
      return f(17, *static_cast<T&&>(t).opt_a_union_ref());
    case Union::Type::a_union_list:
      return f(18, *static_cast<T&&>(t).a_union_list_ref());
    case Union::Type::a_union_typedef:
      return f(19, *static_cast<T&&>(t).a_union_typedef_ref());
    case Union::Type::a_union_typedef_list:
      return f(20, *static_cast<T&&>(t).a_union_typedef_list_ref());
    case Union::Type::MyBinaryField:
      return f(21, *static_cast<T&&>(t).MyBinaryField_ref());
    case Union::Type::MyBinaryField2:
      return f(22, *static_cast<T&&>(t).MyBinaryField2_ref());
    case Union::Type::MyBinaryListField4:
      return f(23, *static_cast<T&&>(t).MyBinaryListField4_ref());
    case Union::Type::ref_field:
      return f(24, *static_cast<T&&>(t).ref_field_ref());
    case Union::Type::ref_field2:
      return f(25, *static_cast<T&&>(t).ref_field2_ref());
    case Union::Type::excp_field:
      return f(26, *static_cast<T&&>(t).excp_field_ref());
    case Union::Type::MyCustomField:
      return f(27, *static_cast<T&&>(t).MyCustomField_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).intValue_ref()))();
    }
  }
};
template <>
struct VisitUnion<::some::valid::ns::FloatUnion> {

  template <typename F, typename T>
  decltype(auto) operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::floatSide:
      return f(0, *static_cast<T&&>(t).floatSide_ref());
    case Union::Type::doubleSide:
      return f(1, *static_cast<T&&>(t).doubleSide_ref());
    case Union::Type::__EMPTY__:
      return decltype(f(0, *static_cast<T&&>(t).floatSide_ref()))();
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
