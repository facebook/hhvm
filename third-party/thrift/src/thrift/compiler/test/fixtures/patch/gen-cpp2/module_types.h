/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

#include <thrift/lib/cpp2/type/Tag.h>

#include "thrift/annotation/gen-cpp2/thrift_types.h"
#include "thrift/lib/thrift/gen-cpp2/patch_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct data1;
struct data2;
struct innerOption;
struct option1;
struct option2;
struct option3;
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct structVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct optStructVal;
struct optListVal;
struct optSetVal;
struct optMapVal;
struct unionVal;
struct data1;
struct data2;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct innerOption;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct option1;
struct option2;
struct option3;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct assign;
struct clear;
struct prepend;
struct append;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct assign;
struct clear;
struct remove;
struct add;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct assign;
struct clear;
struct add;
struct put;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct structVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct optStructVal;
struct optListVal;
struct optSetVal;
struct optMapVal;
struct unionVal;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_innerOption
#define APACHE_THRIFT_ACCESSOR_innerOption
APACHE_THRIFT_DEFINE_ACCESSOR(innerOption);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option1
#define APACHE_THRIFT_ACCESSOR_option1
APACHE_THRIFT_DEFINE_ACCESSOR(option1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option2
#define APACHE_THRIFT_ACCESSOR_option2
APACHE_THRIFT_DEFINE_ACCESSOR(option2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option3
#define APACHE_THRIFT_ACCESSOR_option3
APACHE_THRIFT_DEFINE_ACCESSOR(option3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionVal
#define APACHE_THRIFT_ACCESSOR_unionVal
APACHE_THRIFT_DEFINE_ACCESSOR(unionVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_innerOption
#define APACHE_THRIFT_ACCESSOR_innerOption
APACHE_THRIFT_DEFINE_ACCESSOR(innerOption);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option1
#define APACHE_THRIFT_ACCESSOR_option1
APACHE_THRIFT_DEFINE_ACCESSOR(option1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option2
#define APACHE_THRIFT_ACCESSOR_option2
APACHE_THRIFT_DEFINE_ACCESSOR(option2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_option3
#define APACHE_THRIFT_ACCESSOR_option3
APACHE_THRIFT_DEFINE_ACCESSOR(option3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_prepend
#define APACHE_THRIFT_ACCESSOR_prepend
APACHE_THRIFT_DEFINE_ACCESSOR(prepend);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_append
#define APACHE_THRIFT_ACCESSOR_append
APACHE_THRIFT_DEFINE_ACCESSOR(append);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionVal
#define APACHE_THRIFT_ACCESSOR_unionVal
APACHE_THRIFT_DEFINE_ACCESSOR(unionVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace patch {
class MyData;
class InnerUnion;
class MyUnion;
class MyStruct;
class MyDataFieldPatchStruct;
class MyDataPatchStruct;
class OptionalMyDataPatchStruct;
class InnerUnionFieldPatchStruct;
class InnerUnionPatchStruct;
class OptionalInnerUnionPatchStruct;
class MyUnionFieldPatchStruct;
class MyUnionPatchStruct;
class OptionalMyUnionPatchStruct;
class MyStructField21PatchStruct;
class OptionalMyStructField21PatchStruct;
class MyStructField22PatchStruct;
class OptionalMyStructField22PatchStruct;
class MyStructField23PatchStruct;
class OptionalMyStructField23PatchStruct;
class MyStructFieldPatchStruct;
class MyStructPatchStruct;
class OptionalMyStructPatchStruct;
}}} // test::fixtures::patch
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace patch {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class MyData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::string_t,
                                                         ::apache::thrift::type::i32_t>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::data1,
                                                      ::apache::thrift::tag::data2>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::data1> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::data2> = 2;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::data1>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::data2>) { return 2; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::string_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::i32_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyData() :
      __fbthrift_field_data2() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg);

  MyData(MyData&&) noexcept;

  MyData(const MyData& src);


  MyData& operator=(MyData&&) noexcept;
  MyData& operator=(const MyData& src);
 private:
  ::std::string __fbthrift_field_data1;
 private:
  ::std::int32_t __fbthrift_field_data2;

 public:

  bool operator==(const MyData&) const;
  bool operator<(const MyData&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data1_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data1_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data1_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data1_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data1() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data1() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data1() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data1};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data1() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data2_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data2_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data2_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data2_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> data2() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> data2() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_data2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> data2() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_data2};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> data2() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_data2)};
  }

  const ::std::string& get_data1() const& {
    return __fbthrift_field_data1;
  }

  ::std::string get_data1() && {
    return std::move(__fbthrift_field_data1);
  }

  template <typename T_MyData_data1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.data1_ref() = BAR;` instead of `FOO.set_data1(BAR);`")]]
  ::std::string& set_data1(T_MyData_data1_struct_setter&& data1_) {
    data1_ref() = std::forward<T_MyData_data1_struct_setter>(data1_);
    return __fbthrift_field_data1;
  }

  ::std::int32_t get_data2() const {
    return __fbthrift_field_data2;
  }

  [[deprecated("Use `FOO.data2_ref() = BAR;` instead of `FOO.set_data2(BAR);`")]]
  ::std::int32_t& set_data2(::std::int32_t data2_) {
    data2_ref() = data2_;
    return __fbthrift_field_data2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyData>;
  friend void swap(MyData& a, MyData& b);
};

template <class Protocol_>
unsigned long MyData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class InnerUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::binary_t>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::innerOption>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::innerOption> = 1;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::innerOption>) { return 1; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::binary_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InnerUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    innerOption = 1,
  } ;

  InnerUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  InnerUnion(InnerUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::innerOption:
      {
        set_innerOption(std::move(rhs.value_.innerOption));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  InnerUnion(const InnerUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::innerOption:
      {
        set_innerOption(rhs.value_.innerOption);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  InnerUnion& operator=(InnerUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::innerOption:
      {
        set_innerOption(std::move(rhs.value_.innerOption));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  InnerUnion& operator=(const InnerUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::innerOption:
      {
        set_innerOption(rhs.value_.innerOption);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~InnerUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::std::string innerOption;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const InnerUnion&) const;
  bool operator<(const InnerUnion&) const;

  ::std::string& set_innerOption(::std::string const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::innerOption);
    ::new (std::addressof(value_.innerOption)) ::std::string(t);
    return value_.innerOption;
  }

  ::std::string& set_innerOption(::std::string&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::innerOption);
    ::new (std::addressof(value_.innerOption)) ::std::string(std::move(t));
    return value_.innerOption;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_innerOption(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::innerOption);
    ::new (std::addressof(value_.innerOption)) ::std::string(std::forward<T>(t)...);
    return value_.innerOption;
  }

  ::std::string const& get_innerOption() const {
    if (getType() != Type::innerOption) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.innerOption;
  }

  ::std::string& mutable_innerOption() {
    assert(getType() == Type::innerOption);
    return value_.innerOption;
  }

  ::std::string move_innerOption() {
    assert(getType() == Type::innerOption);
    return std::move(value_.innerOption);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> innerOption_ref() const& {
    return {value_.innerOption, type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> innerOption_ref() const&& {
    return {std::move(value_.innerOption), type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> innerOption_ref() & {
    return {value_.innerOption, type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> innerOption_ref() && {
    return {std::move(value_.innerOption), type_, folly::to_underlying(Type::innerOption), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InnerUnion>;
  friend void swap(InnerUnion& a, InnerUnion& b);
};

template <class Protocol_>
unsigned long InnerUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::string_t,
                                                         ::apache::thrift::type::i32_t,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::option1,
                                                      ::apache::thrift::tag::option2,
                                                      ::apache::thrift::tag::option3>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::option1> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::option2> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::option3> = 3;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::option1>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::option2>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::option3>) { return 3; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::string_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::i32_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    option1 = 1,
    option2 = 2,
    option3 = 3,
  } ;

  MyUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::option1:
      {
        set_option1(std::move(rhs.value_.option1));
        break;
      }
      case Type::option2:
      {
        set_option2(std::move(rhs.value_.option2));
        break;
      }
      case Type::option3:
      {
        set_option3(std::move(rhs.value_.option3));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    if (rhs.getType() == Type::__EMPTY__) { return; }
    switch (rhs.getType()) {
      case Type::option1:
      {
        set_option1(rhs.value_.option1);
        break;
      }
      case Type::option2:
      {
        set_option2(rhs.value_.option2);
        break;
      }
      case Type::option3:
      {
        set_option3(rhs.value_.option3);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::option1:
      {
        set_option1(std::move(rhs.value_.option1));
        break;
      }
      case Type::option2:
      {
        set_option2(std::move(rhs.value_.option2));
        break;
      }
      case Type::option3:
      {
        set_option3(std::move(rhs.value_.option3));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    if (rhs.getType() == Type::__EMPTY__) { return *this; }
    switch (rhs.getType()) {
      case Type::option1:
      {
        set_option1(rhs.value_.option1);
        break;
      }
      case Type::option2:
      {
        set_option2(rhs.value_.option2);
        break;
      }
      case Type::option3:
      {
        set_option3(rhs.value_.option3);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~MyUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::std::string option1;
    ::std::int32_t option2;
    ::test::fixtures::patch::InnerUnion option3;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  ::std::string& set_option1(::std::string const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option1);
    ::new (std::addressof(value_.option1)) ::std::string(t);
    return value_.option1;
  }

  ::std::string& set_option1(::std::string&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option1);
    ::new (std::addressof(value_.option1)) ::std::string(std::move(t));
    return value_.option1;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_option1(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option1);
    ::new (std::addressof(value_.option1)) ::std::string(std::forward<T>(t)...);
    return value_.option1;
  }

  ::std::int32_t& set_option2(::std::int32_t t = ::std::int32_t()) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option2);
    ::new (std::addressof(value_.option2)) ::std::int32_t(t);
    return value_.option2;
  }

  ::test::fixtures::patch::InnerUnion& set_option3(::test::fixtures::patch::InnerUnion const &t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option3);
    ::new (std::addressof(value_.option3)) ::test::fixtures::patch::InnerUnion(t);
    return value_.option3;
  }

  ::test::fixtures::patch::InnerUnion& set_option3(::test::fixtures::patch::InnerUnion&& t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option3);
    ::new (std::addressof(value_.option3)) ::test::fixtures::patch::InnerUnion(std::move(t));
    return value_.option3;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::patch::InnerUnion, T...>> ::test::fixtures::patch::InnerUnion& set_option3(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::option3);
    ::new (std::addressof(value_.option3)) ::test::fixtures::patch::InnerUnion(std::forward<T>(t)...);
    return value_.option3;
  }

  ::std::string const& get_option1() const {
    if (getType() != Type::option1) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.option1;
  }

  ::std::int32_t const& get_option2() const {
    if (getType() != Type::option2) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.option2;
  }

  ::test::fixtures::patch::InnerUnion const& get_option3() const {
    if (getType() != Type::option3) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.option3;
  }

  ::std::string& mutable_option1() {
    assert(getType() == Type::option1);
    return value_.option1;
  }

  ::std::int32_t& mutable_option2() {
    assert(getType() == Type::option2);
    return value_.option2;
  }

  ::test::fixtures::patch::InnerUnion& mutable_option3() {
    assert(getType() == Type::option3);
    return value_.option3;
  }

  ::std::string move_option1() {
    assert(getType() == Type::option1);
    return std::move(value_.option1);
  }

  ::std::int32_t move_option2() {
    assert(getType() == Type::option2);
    return std::move(value_.option2);
  }

  ::test::fixtures::patch::InnerUnion move_option3() {
    assert(getType() == Type::option3);
    return std::move(value_.option3);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> option1_ref() const& {
    return {value_.option1, type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> option1_ref() const&& {
    return {std::move(value_.option1), type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> option1_ref() & {
    return {value_.option1, type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> option1_ref() && {
    return {std::move(value_.option1), type_, folly::to_underlying(Type::option1), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> option2_ref() const& {
    return {value_.option2, type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> option2_ref() const&& {
    return {std::move(value_.option2), type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> option2_ref() & {
    return {value_.option2, type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> option2_ref() && {
    return {std::move(value_.option2), type_, folly::to_underlying(Type::option2), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> option3_ref() const& {
    return {value_.option3, type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> option3_ref() const&& {
    return {std::move(value_.option3), type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> option3_ref() & {
    return {value_.option3, type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> option3_ref() && {
    return {std::move(value_.option3), type_, folly::to_underlying(Type::option3), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 24;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<6>,
                                                   ::apache::thrift::field_id<7>,
                                                   ::apache::thrift::field_id<8>,
                                                   ::apache::thrift::field_id<9>,
                                                   ::apache::thrift::field_id<10>,
                                                   ::apache::thrift::field_id<11>,
                                                   ::apache::thrift::field_id<12>,
                                                   ::apache::thrift::field_id<13>,
                                                   ::apache::thrift::field_id<14>,
                                                   ::apache::thrift::field_id<15>,
                                                   ::apache::thrift::field_id<16>,
                                                   ::apache::thrift::field_id<17>,
                                                   ::apache::thrift::field_id<18>,
                                                   ::apache::thrift::field_id<19>,
                                                   ::apache::thrift::field_id<20>,
                                                   ::apache::thrift::field_id<21>,
                                                   ::apache::thrift::field_id<22>,
                                                   ::apache::thrift::field_id<23>,
                                                   ::apache::thrift::field_id<30>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::byte_t,
                                                         ::apache::thrift::type::i16_t,
                                                         ::apache::thrift::type::i32_t,
                                                         ::apache::thrift::type::i64_t,
                                                         ::apache::thrift::type::float_t,
                                                         ::apache::thrift::type::double_t,
                                                         ::apache::thrift::type::string_t,
                                                         ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::byte_t,
                                                         ::apache::thrift::type::i16_t,
                                                         ::apache::thrift::type::i32_t,
                                                         ::apache::thrift::type::i64_t,
                                                         ::apache::thrift::type::float_t,
                                                         ::apache::thrift::type::double_t,
                                                         ::apache::thrift::type::string_t,
                                                         ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
                                                         ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
                                                         ::apache::thrift::type::set<::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::boolVal,
                                                      ::apache::thrift::tag::byteVal,
                                                      ::apache::thrift::tag::i16Val,
                                                      ::apache::thrift::tag::i32Val,
                                                      ::apache::thrift::tag::i64Val,
                                                      ::apache::thrift::tag::floatVal,
                                                      ::apache::thrift::tag::doubleVal,
                                                      ::apache::thrift::tag::stringVal,
                                                      ::apache::thrift::tag::binaryVal,
                                                      ::apache::thrift::tag::structVal,
                                                      ::apache::thrift::tag::optBoolVal,
                                                      ::apache::thrift::tag::optByteVal,
                                                      ::apache::thrift::tag::optI16Val,
                                                      ::apache::thrift::tag::optI32Val,
                                                      ::apache::thrift::tag::optI64Val,
                                                      ::apache::thrift::tag::optFloatVal,
                                                      ::apache::thrift::tag::optDoubleVal,
                                                      ::apache::thrift::tag::optStringVal,
                                                      ::apache::thrift::tag::optBinaryVal,
                                                      ::apache::thrift::tag::optStructVal,
                                                      ::apache::thrift::tag::optListVal,
                                                      ::apache::thrift::tag::optSetVal,
                                                      ::apache::thrift::tag::optMapVal,
                                                      ::apache::thrift::tag::unionVal>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::boolVal> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::byteVal> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::i16Val> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::i32Val> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 5;
    template<> static constexpr int value<::apache::thrift::tag::i64Val> = 5;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 6;
    template<> static constexpr int value<::apache::thrift::tag::floatVal> = 6;
    template<> static constexpr int value<::apache::thrift::field_id<7>> = 7;
    template<> static constexpr int value<::apache::thrift::tag::doubleVal> = 7;
    template<> static constexpr int value<::apache::thrift::field_id<8>> = 8;
    template<> static constexpr int value<::apache::thrift::tag::stringVal> = 8;
    template<> static constexpr int value<::apache::thrift::field_id<9>> = 9;
    template<> static constexpr int value<::apache::thrift::tag::binaryVal> = 9;
    template<> static constexpr int value<::apache::thrift::field_id<10>> = 10;
    template<> static constexpr int value<::apache::thrift::tag::structVal> = 10;
    template<> static constexpr int value<::apache::thrift::field_id<11>> = 11;
    template<> static constexpr int value<::apache::thrift::tag::optBoolVal> = 11;
    template<> static constexpr int value<::apache::thrift::field_id<12>> = 12;
    template<> static constexpr int value<::apache::thrift::tag::optByteVal> = 12;
    template<> static constexpr int value<::apache::thrift::field_id<13>> = 13;
    template<> static constexpr int value<::apache::thrift::tag::optI16Val> = 13;
    template<> static constexpr int value<::apache::thrift::field_id<14>> = 14;
    template<> static constexpr int value<::apache::thrift::tag::optI32Val> = 14;
    template<> static constexpr int value<::apache::thrift::field_id<15>> = 15;
    template<> static constexpr int value<::apache::thrift::tag::optI64Val> = 15;
    template<> static constexpr int value<::apache::thrift::field_id<16>> = 16;
    template<> static constexpr int value<::apache::thrift::tag::optFloatVal> = 16;
    template<> static constexpr int value<::apache::thrift::field_id<17>> = 17;
    template<> static constexpr int value<::apache::thrift::tag::optDoubleVal> = 17;
    template<> static constexpr int value<::apache::thrift::field_id<18>> = 18;
    template<> static constexpr int value<::apache::thrift::tag::optStringVal> = 18;
    template<> static constexpr int value<::apache::thrift::field_id<19>> = 19;
    template<> static constexpr int value<::apache::thrift::tag::optBinaryVal> = 19;
    template<> static constexpr int value<::apache::thrift::field_id<20>> = 20;
    template<> static constexpr int value<::apache::thrift::tag::optStructVal> = 20;
    template<> static constexpr int value<::apache::thrift::field_id<21>> = 21;
    template<> static constexpr int value<::apache::thrift::tag::optListVal> = 21;
    template<> static constexpr int value<::apache::thrift::field_id<22>> = 22;
    template<> static constexpr int value<::apache::thrift::tag::optSetVal> = 22;
    template<> static constexpr int value<::apache::thrift::field_id<23>> = 23;
    template<> static constexpr int value<::apache::thrift::tag::optMapVal> = 23;
    template<> static constexpr int value<::apache::thrift::field_id<30>> = 24;
    template<> static constexpr int value<::apache::thrift::tag::unionVal> = 24;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::boolVal>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::byteVal>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::i16Val>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::i32Val>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::i64Val>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::floatVal>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<7>>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::doubleVal>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<8>>) { return 8; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::stringVal>) { return 8; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<9>>) { return 9; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::binaryVal>) { return 9; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<10>>) { return 10; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::structVal>) { return 10; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<11>>) { return 11; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optBoolVal>) { return 11; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<12>>) { return 12; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optByteVal>) { return 12; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<13>>) { return 13; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optI16Val>) { return 13; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<14>>) { return 14; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optI32Val>) { return 14; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<15>>) { return 15; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optI64Val>) { return 15; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<16>>) { return 16; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optFloatVal>) { return 16; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<17>>) { return 17; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optDoubleVal>) { return 17; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<18>>) { return 18; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optStringVal>) { return 18; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<19>>) { return 19; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optBinaryVal>) { return 19; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<20>>) { return 20; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optStructVal>) { return 20; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<21>>) { return 21; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optListVal>) { return 21; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<22>>) { return 22; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optSetVal>) { return 22; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<23>>) { return 23; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optMapVal>) { return 23; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<30>>) { return 24; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::unionVal>) { return 24; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::byte_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::i16_t, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::i32_t, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::i64_t, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };
    template<class T> struct Impl<::apache::thrift::type::float_t, T, std::enable_if_t<sizeof(T) != -6>> { static constexpr int value = 6; };
    template<class T> struct Impl<::apache::thrift::type::double_t, T, std::enable_if_t<sizeof(T) != -7>> { static constexpr int value = 7; };
    template<class T> struct Impl<::apache::thrift::type::string_t, T, std::enable_if_t<sizeof(T) != -8>> { static constexpr int value = 8; };
    template<class T> struct Impl<::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>, T, std::enable_if_t<sizeof(T) != -9>> { static constexpr int value = 9; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>, T, std::enable_if_t<sizeof(T) != -10>> { static constexpr int value = 10; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -11>> { static constexpr int value = 11; };
    template<class T> struct Impl<::apache::thrift::type::byte_t, T, std::enable_if_t<sizeof(T) != -12>> { static constexpr int value = 12; };
    template<class T> struct Impl<::apache::thrift::type::i16_t, T, std::enable_if_t<sizeof(T) != -13>> { static constexpr int value = 13; };
    template<class T> struct Impl<::apache::thrift::type::i32_t, T, std::enable_if_t<sizeof(T) != -14>> { static constexpr int value = 14; };
    template<class T> struct Impl<::apache::thrift::type::i64_t, T, std::enable_if_t<sizeof(T) != -15>> { static constexpr int value = 15; };
    template<class T> struct Impl<::apache::thrift::type::float_t, T, std::enable_if_t<sizeof(T) != -16>> { static constexpr int value = 16; };
    template<class T> struct Impl<::apache::thrift::type::double_t, T, std::enable_if_t<sizeof(T) != -17>> { static constexpr int value = 17; };
    template<class T> struct Impl<::apache::thrift::type::string_t, T, std::enable_if_t<sizeof(T) != -18>> { static constexpr int value = 18; };
    template<class T> struct Impl<::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>, T, std::enable_if_t<sizeof(T) != -19>> { static constexpr int value = 19; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>, T, std::enable_if_t<sizeof(T) != -20>> { static constexpr int value = 20; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::i16_t>, T, std::enable_if_t<sizeof(T) != -21>> { static constexpr int value = 21; };
    template<class T> struct Impl<::apache::thrift::type::set<::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -22>> { static constexpr int value = 22; };
    template<class T> struct Impl<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -23>> { static constexpr int value = 23; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>, T, std::enable_if_t<sizeof(T) != -24>> { static constexpr int value = 24; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, ::folly::IOBuf binaryVal__arg, ::test::fixtures::patch::MyData structVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, ::folly::IOBuf optBinaryVal__arg, ::test::fixtures::patch::MyData optStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::test::fixtures::patch::MyUnion unionVal__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  bool __fbthrift_field_boolVal;
 private:
  ::std::int8_t __fbthrift_field_byteVal;
 private:
  ::std::int16_t __fbthrift_field_i16Val;
 private:
  ::std::int32_t __fbthrift_field_i32Val;
 private:
  ::std::int64_t __fbthrift_field_i64Val;
 private:
  float __fbthrift_field_floatVal;
 private:
  double __fbthrift_field_doubleVal;
 private:
  ::std::string __fbthrift_field_stringVal;
 private:
  ::folly::IOBuf __fbthrift_field_binaryVal;
 private:
  ::test::fixtures::patch::MyData __fbthrift_field_structVal;
 private:
  bool __fbthrift_field_optBoolVal;
 private:
  ::std::int8_t __fbthrift_field_optByteVal;
 private:
  ::std::int16_t __fbthrift_field_optI16Val;
 private:
  ::std::int32_t __fbthrift_field_optI32Val;
 private:
  ::std::int64_t __fbthrift_field_optI64Val;
 private:
  float __fbthrift_field_optFloatVal;
 private:
  double __fbthrift_field_optDoubleVal;
 private:
  ::std::string __fbthrift_field_optStringVal;
 private:
  ::folly::IOBuf __fbthrift_field_optBinaryVal;
 private:
  ::test::fixtures::patch::MyData __fbthrift_field_optStructVal;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_optListVal;
 private:
  ::std::set<::std::string> __fbthrift_field_optSetVal;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_optMapVal;
 private:
  ::test::fixtures::patch::MyUnion __fbthrift_field_unionVal;
 private:
  apache::thrift::detail::isset_bitset<13, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> boolVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> boolVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> boolVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> boolVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> boolVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> boolVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> boolVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_boolVal};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> boolVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_boolVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byteVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byteVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byteVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byteVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> byteVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> byteVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> byteVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_byteVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> byteVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_byteVal)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i16Val_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i16Val_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i16Val_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i16Val_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i16Val() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i16Val() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i16Val() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i16Val};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i16Val() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i16Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i32Val_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i32Val_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i32Val_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i32Val_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i32Val() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i32Val() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i32Val() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i32Val};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i32Val() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i32Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i64Val_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i64Val_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i64Val_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i64Val_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> i64Val() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> i64Val() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> i64Val() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_i64Val};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> i64Val() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_i64Val)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> floatVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> floatVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> floatVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> floatVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> floatVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> floatVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> floatVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_floatVal};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> floatVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> doubleVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> doubleVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> doubleVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> doubleVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> doubleVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> doubleVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> doubleVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_doubleVal};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> doubleVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_doubleVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> stringVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> stringVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> stringVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> stringVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> stringVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> stringVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> stringVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_stringVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> stringVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringVal)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binaryVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binaryVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binaryVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binaryVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> binaryVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> binaryVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> binaryVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_binaryVal};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> binaryVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binaryVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> structVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> structVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> structVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_structVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> structVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_structVal)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStructVal_ref() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStructVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStructVal_ref() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStructVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStructVal() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStructVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStructVal() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStructVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal_ref() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal_ref() & {
    return {this->__fbthrift_field_optListVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal() & {
    return {this->__fbthrift_field_optListVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal_ref() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal_ref() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal_ref() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal_ref() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> unionVal_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> unionVal_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> unionVal_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> unionVal_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> unionVal() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> unionVal() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_unionVal)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> unionVal() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_unionVal};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> unionVal() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_unionVal)};
  }

  bool get_boolVal() const {
    return __fbthrift_field_boolVal;
  }

  [[deprecated("Use `FOO.boolVal_ref() = BAR;` instead of `FOO.set_boolVal(BAR);`")]]
  bool& set_boolVal(bool boolVal_) {
    boolVal_ref() = boolVal_;
    return __fbthrift_field_boolVal;
  }

  ::std::int8_t get_byteVal() const {
    return __fbthrift_field_byteVal;
  }

  [[deprecated("Use `FOO.byteVal_ref() = BAR;` instead of `FOO.set_byteVal(BAR);`")]]
  ::std::int8_t& set_byteVal(::std::int8_t byteVal_) {
    byteVal_ref() = byteVal_;
    return __fbthrift_field_byteVal;
  }

  ::std::int16_t get_i16Val() const {
    return __fbthrift_field_i16Val;
  }

  [[deprecated("Use `FOO.i16Val_ref() = BAR;` instead of `FOO.set_i16Val(BAR);`")]]
  ::std::int16_t& set_i16Val(::std::int16_t i16Val_) {
    i16Val_ref() = i16Val_;
    return __fbthrift_field_i16Val;
  }

  ::std::int32_t get_i32Val() const {
    return __fbthrift_field_i32Val;
  }

  [[deprecated("Use `FOO.i32Val_ref() = BAR;` instead of `FOO.set_i32Val(BAR);`")]]
  ::std::int32_t& set_i32Val(::std::int32_t i32Val_) {
    i32Val_ref() = i32Val_;
    return __fbthrift_field_i32Val;
  }

  ::std::int64_t get_i64Val() const {
    return __fbthrift_field_i64Val;
  }

  [[deprecated("Use `FOO.i64Val_ref() = BAR;` instead of `FOO.set_i64Val(BAR);`")]]
  ::std::int64_t& set_i64Val(::std::int64_t i64Val_) {
    i64Val_ref() = i64Val_;
    return __fbthrift_field_i64Val;
  }

  float get_floatVal() const {
    return __fbthrift_field_floatVal;
  }

  [[deprecated("Use `FOO.floatVal_ref() = BAR;` instead of `FOO.set_floatVal(BAR);`")]]
  float& set_floatVal(float floatVal_) {
    floatVal_ref() = floatVal_;
    return __fbthrift_field_floatVal;
  }

  double get_doubleVal() const {
    return __fbthrift_field_doubleVal;
  }

  [[deprecated("Use `FOO.doubleVal_ref() = BAR;` instead of `FOO.set_doubleVal(BAR);`")]]
  double& set_doubleVal(double doubleVal_) {
    doubleVal_ref() = doubleVal_;
    return __fbthrift_field_doubleVal;
  }

  const ::std::string& get_stringVal() const& {
    return __fbthrift_field_stringVal;
  }

  ::std::string get_stringVal() && {
    return std::move(__fbthrift_field_stringVal);
  }

  template <typename T_MyStruct_stringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringVal_ref() = BAR;` instead of `FOO.set_stringVal(BAR);`")]]
  ::std::string& set_stringVal(T_MyStruct_stringVal_struct_setter&& stringVal_) {
    stringVal_ref() = std::forward<T_MyStruct_stringVal_struct_setter>(stringVal_);
    return __fbthrift_field_stringVal;
  }

  const ::folly::IOBuf& get_binaryVal() const& {
    return __fbthrift_field_binaryVal;
  }

  ::folly::IOBuf get_binaryVal() && {
    return std::move(__fbthrift_field_binaryVal);
  }

  template <typename T_MyStruct_binaryVal_struct_setter = ::folly::IOBuf>
  [[deprecated("Use `FOO.binaryVal_ref() = BAR;` instead of `FOO.set_binaryVal(BAR);`")]]
  ::folly::IOBuf& set_binaryVal(T_MyStruct_binaryVal_struct_setter&& binaryVal_) {
    binaryVal_ref() = std::forward<T_MyStruct_binaryVal_struct_setter>(binaryVal_);
    return __fbthrift_field_binaryVal;
  }
  const ::test::fixtures::patch::MyData& get_structVal() const&;
  ::test::fixtures::patch::MyData get_structVal() &&;

  template <typename T_MyStruct_structVal_struct_setter = ::test::fixtures::patch::MyData>
  [[deprecated("Use `FOO.structVal_ref() = BAR;` instead of `FOO.set_structVal(BAR);`")]]
  ::test::fixtures::patch::MyData& set_structVal(T_MyStruct_structVal_struct_setter&& structVal_) {
    structVal_ref() = std::forward<T_MyStruct_structVal_struct_setter>(structVal_);
    return __fbthrift_field_structVal;
  }

  const bool* get_optBoolVal() const& {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }

  bool* get_optBoolVal() & {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }
  bool* get_optBoolVal() && = delete;

  [[deprecated("Use `FOO.optBoolVal_ref() = BAR;` instead of `FOO.set_optBoolVal(BAR);`")]]
  bool& set_optBoolVal(bool optBoolVal_) {
    optBoolVal_ref() = optBoolVal_;
    return __fbthrift_field_optBoolVal;
  }

  const ::std::int8_t* get_optByteVal() const& {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }

  ::std::int8_t* get_optByteVal() & {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }
  ::std::int8_t* get_optByteVal() && = delete;

  [[deprecated("Use `FOO.optByteVal_ref() = BAR;` instead of `FOO.set_optByteVal(BAR);`")]]
  ::std::int8_t& set_optByteVal(::std::int8_t optByteVal_) {
    optByteVal_ref() = optByteVal_;
    return __fbthrift_field_optByteVal;
  }

  const ::std::int16_t* get_optI16Val() const& {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }

  ::std::int16_t* get_optI16Val() & {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }
  ::std::int16_t* get_optI16Val() && = delete;

  [[deprecated("Use `FOO.optI16Val_ref() = BAR;` instead of `FOO.set_optI16Val(BAR);`")]]
  ::std::int16_t& set_optI16Val(::std::int16_t optI16Val_) {
    optI16Val_ref() = optI16Val_;
    return __fbthrift_field_optI16Val;
  }

  const ::std::int32_t* get_optI32Val() const& {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }

  ::std::int32_t* get_optI32Val() & {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }
  ::std::int32_t* get_optI32Val() && = delete;

  [[deprecated("Use `FOO.optI32Val_ref() = BAR;` instead of `FOO.set_optI32Val(BAR);`")]]
  ::std::int32_t& set_optI32Val(::std::int32_t optI32Val_) {
    optI32Val_ref() = optI32Val_;
    return __fbthrift_field_optI32Val;
  }

  const ::std::int64_t* get_optI64Val() const& {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }

  ::std::int64_t* get_optI64Val() & {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }
  ::std::int64_t* get_optI64Val() && = delete;

  [[deprecated("Use `FOO.optI64Val_ref() = BAR;` instead of `FOO.set_optI64Val(BAR);`")]]
  ::std::int64_t& set_optI64Val(::std::int64_t optI64Val_) {
    optI64Val_ref() = optI64Val_;
    return __fbthrift_field_optI64Val;
  }

  const float* get_optFloatVal() const& {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }

  float* get_optFloatVal() & {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }
  float* get_optFloatVal() && = delete;

  [[deprecated("Use `FOO.optFloatVal_ref() = BAR;` instead of `FOO.set_optFloatVal(BAR);`")]]
  float& set_optFloatVal(float optFloatVal_) {
    optFloatVal_ref() = optFloatVal_;
    return __fbthrift_field_optFloatVal;
  }

  const double* get_optDoubleVal() const& {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }

  double* get_optDoubleVal() & {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }
  double* get_optDoubleVal() && = delete;

  [[deprecated("Use `FOO.optDoubleVal_ref() = BAR;` instead of `FOO.set_optDoubleVal(BAR);`")]]
  double& set_optDoubleVal(double optDoubleVal_) {
    optDoubleVal_ref() = optDoubleVal_;
    return __fbthrift_field_optDoubleVal;
  }

  const ::std::string* get_optStringVal() const& {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }

  ::std::string* get_optStringVal() & {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }
  ::std::string* get_optStringVal() && = delete;

  template <typename T_MyStruct_optStringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.optStringVal_ref() = BAR;` instead of `FOO.set_optStringVal(BAR);`")]]
  ::std::string& set_optStringVal(T_MyStruct_optStringVal_struct_setter&& optStringVal_) {
    optStringVal_ref() = std::forward<T_MyStruct_optStringVal_struct_setter>(optStringVal_);
    return __fbthrift_field_optStringVal;
  }

  const ::folly::IOBuf* get_optBinaryVal() const& {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }

  ::folly::IOBuf* get_optBinaryVal() & {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }
  ::folly::IOBuf* get_optBinaryVal() && = delete;

  template <typename T_MyStruct_optBinaryVal_struct_setter = ::folly::IOBuf>
  [[deprecated("Use `FOO.optBinaryVal_ref() = BAR;` instead of `FOO.set_optBinaryVal(BAR);`")]]
  ::folly::IOBuf& set_optBinaryVal(T_MyStruct_optBinaryVal_struct_setter&& optBinaryVal_) {
    optBinaryVal_ref() = std::forward<T_MyStruct_optBinaryVal_struct_setter>(optBinaryVal_);
    return __fbthrift_field_optBinaryVal;
  }
  const ::test::fixtures::patch::MyData* get_optStructVal() const&;
  ::test::fixtures::patch::MyData* get_optStructVal() &;
  ::test::fixtures::patch::MyData* get_optStructVal() && = delete;

  template <typename T_MyStruct_optStructVal_struct_setter = ::test::fixtures::patch::MyData>
  [[deprecated("Use `FOO.optStructVal_ref() = BAR;` instead of `FOO.set_optStructVal(BAR);`")]]
  ::test::fixtures::patch::MyData& set_optStructVal(T_MyStruct_optStructVal_struct_setter&& optStructVal_) {
    optStructVal_ref() = std::forward<T_MyStruct_optStructVal_struct_setter>(optStructVal_);
    return __fbthrift_field_optStructVal;
  }
  const ::std::vector<::std::int16_t>* get_optListVal() const&;
  ::std::vector<::std::int16_t>* get_optListVal() &;
  ::std::vector<::std::int16_t>* get_optListVal() && = delete;

  template <typename T_MyStruct_optListVal_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.optListVal_ref() = BAR;` instead of `FOO.set_optListVal(BAR);`")]]
  ::std::vector<::std::int16_t>& set_optListVal(T_MyStruct_optListVal_struct_setter&& optListVal_) {
    optListVal_ref() = std::forward<T_MyStruct_optListVal_struct_setter>(optListVal_);
    return __fbthrift_field_optListVal;
  }
  const ::std::set<::std::string>* get_optSetVal() const&;
  ::std::set<::std::string>* get_optSetVal() &;
  ::std::set<::std::string>* get_optSetVal() && = delete;

  template <typename T_MyStruct_optSetVal_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.optSetVal_ref() = BAR;` instead of `FOO.set_optSetVal(BAR);`")]]
  ::std::set<::std::string>& set_optSetVal(T_MyStruct_optSetVal_struct_setter&& optSetVal_) {
    optSetVal_ref() = std::forward<T_MyStruct_optSetVal_struct_setter>(optSetVal_);
    return __fbthrift_field_optSetVal;
  }
  const ::std::map<::std::string, ::std::string>* get_optMapVal() const&;
  ::std::map<::std::string, ::std::string>* get_optMapVal() &;
  ::std::map<::std::string, ::std::string>* get_optMapVal() && = delete;

  template <typename T_MyStruct_optMapVal_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.optMapVal_ref() = BAR;` instead of `FOO.set_optMapVal(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_optMapVal(T_MyStruct_optMapVal_struct_setter&& optMapVal_) {
    optMapVal_ref() = std::forward<T_MyStruct_optMapVal_struct_setter>(optMapVal_);
    return __fbthrift_field_optMapVal;
  }
  const ::test::fixtures::patch::MyUnion& get_unionVal() const&;
  ::test::fixtures::patch::MyUnion get_unionVal() &&;

  template <typename T_MyStruct_unionVal_struct_setter = ::test::fixtures::patch::MyUnion>
  [[deprecated("Use `FOO.unionVal_ref() = BAR;` instead of `FOO.set_unionVal(BAR);`")]]
  ::test::fixtures::patch::MyUnion& set_unionVal(T_MyStruct_unionVal_struct_setter&& unionVal_) {
    unionVal_ref() = std::forward<T_MyStruct_unionVal_struct_setter>(unionVal_);
    return __fbthrift_field_unionVal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyDataFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::data1,
                                                      ::apache::thrift::tag::data2>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::data1> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::data2> = 2;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::data1>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::data2>) { return 2; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataFieldPatchStruct() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch data1__arg, ::apache::thrift::op::I32Patch data2__arg);

  MyDataFieldPatchStruct(MyDataFieldPatchStruct&&) noexcept;
  MyDataFieldPatchStruct(const MyDataFieldPatchStruct& src);


  MyDataFieldPatchStruct& operator=(MyDataFieldPatchStruct&&) noexcept;
  MyDataFieldPatchStruct& operator=(const MyDataFieldPatchStruct& src);
 private:
  ::apache::thrift::op::StringPatch __fbthrift_field_data1;
 private:
  ::apache::thrift::op::I32Patch __fbthrift_field_data2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataFieldPatchStruct&) const;
  bool operator<(const MyDataFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data1_ref() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data1_ref() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data1() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data1() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data1() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data2_ref() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data2_ref() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data2() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data2() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data2() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataFieldPatchStruct>;
  friend void swap(MyDataFieldPatchStruct& a, MyDataFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter, ::test::fixtures::patch::MyDataFieldPatchStruct>;


class MyDataPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 5;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 5;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 5; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataFieldPatch patchPrior__arg, ::test::fixtures::patch::MyData ensure__arg, ::test::fixtures::patch::MyDataFieldPatch patch__arg);

  MyDataPatchStruct(MyDataPatchStruct&&) noexcept;
  MyDataPatchStruct(const MyDataPatchStruct& src);


  MyDataPatchStruct& operator=(MyDataPatchStruct&&) noexcept;
  MyDataPatchStruct& operator=(const MyDataPatchStruct& src);

  ~MyDataPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyDataFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::MyData __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyDataFieldPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataPatchStruct&) const;
  bool operator<(const MyDataPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::MyData& get_ensure() const&;
  ::test::fixtures::patch::MyData get_ensure() &&;

  template <typename T_MyDataPatchStruct_ensure_struct_setter = ::test::fixtures::patch::MyData>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::MyData& set_ensure(T_MyDataPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyDataPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataPatchStruct>;
  friend void swap(MyDataPatchStruct& a, MyDataPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::test::fixtures::patch::MyDataPatchStruct>;


class OptionalMyDataPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyDataPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyDataPatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyDataPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyDataPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> ensure__arg, ::test::fixtures::patch::MyDataPatch patch__arg);

  OptionalMyDataPatchStruct(OptionalMyDataPatchStruct&&) noexcept;
  OptionalMyDataPatchStruct(const OptionalMyDataPatchStruct& src);


  OptionalMyDataPatchStruct& operator=(OptionalMyDataPatchStruct&&) noexcept;
  OptionalMyDataPatchStruct& operator=(const OptionalMyDataPatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyDataPatch __fbthrift_field_patchPrior;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyDataPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyDataPatchStruct&) const;
  bool operator<(const OptionalMyDataPatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyDataPatchStruct>;
  friend void swap(OptionalMyDataPatchStruct& a, OptionalMyDataPatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalMyDataPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalMyDataPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalMyDataPatchStruct>;


class InnerUnionFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::innerOption>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::innerOption> = 1;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::innerOption>) { return 1; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InnerUnionFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  InnerUnionFieldPatchStruct() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InnerUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BinaryPatch innerOption__arg);

  InnerUnionFieldPatchStruct(InnerUnionFieldPatchStruct&&) noexcept;
  InnerUnionFieldPatchStruct(const InnerUnionFieldPatchStruct& src);


  InnerUnionFieldPatchStruct& operator=(InnerUnionFieldPatchStruct&&) noexcept;
  InnerUnionFieldPatchStruct& operator=(const InnerUnionFieldPatchStruct& src);
 private:
  ::apache::thrift::op::BinaryPatch __fbthrift_field_innerOption;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const InnerUnionFieldPatchStruct&) const;
  bool operator<(const InnerUnionFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> innerOption_ref() const& {
    return {this->__fbthrift_field_innerOption, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> innerOption_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_innerOption), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> innerOption_ref() & {
    return {this->__fbthrift_field_innerOption, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> innerOption_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_innerOption), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> innerOption() const& {
    return {this->__fbthrift_field_innerOption, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> innerOption() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_innerOption), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> innerOption() & {
    return {this->__fbthrift_field_innerOption, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> innerOption() && {
    return {static_cast<T&&>(this->__fbthrift_field_innerOption), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InnerUnionFieldPatchStruct>;
  friend void swap(InnerUnionFieldPatchStruct& a, InnerUnionFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long InnerUnionFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using InnerUnionFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter, ::test::fixtures::patch::InnerUnionFieldPatchStruct>;


class InnerUnionPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 5;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 5;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 5; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = InnerUnionPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  InnerUnionPatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  InnerUnionPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::InnerUnion assign__arg, bool clear__arg, ::test::fixtures::patch::InnerUnionFieldPatch patchPrior__arg, ::test::fixtures::patch::InnerUnion ensure__arg, ::test::fixtures::patch::InnerUnionFieldPatch patch__arg);

  InnerUnionPatchStruct(InnerUnionPatchStruct&&) noexcept;
  InnerUnionPatchStruct(const InnerUnionPatchStruct& src);


  InnerUnionPatchStruct& operator=(InnerUnionPatchStruct&&) noexcept;
  InnerUnionPatchStruct& operator=(const InnerUnionPatchStruct& src);
 private:
  ::test::fixtures::patch::InnerUnion __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::InnerUnionFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::InnerUnion __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::InnerUnionFieldPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const InnerUnionPatchStruct&) const;
  bool operator<(const InnerUnionPatchStruct&) const;

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }
  const ::test::fixtures::patch::InnerUnion& get_assign() const&;
  ::test::fixtures::patch::InnerUnion get_assign() &&;

  template <typename T_InnerUnionPatchStruct_assign_struct_setter = ::test::fixtures::patch::InnerUnion>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::test::fixtures::patch::InnerUnion& set_assign(T_InnerUnionPatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_InnerUnionPatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::InnerUnion& get_ensure() const&;
  ::test::fixtures::patch::InnerUnion get_ensure() &&;

  template <typename T_InnerUnionPatchStruct_ensure_struct_setter = ::test::fixtures::patch::InnerUnion>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::InnerUnion& set_ensure(T_InnerUnionPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_InnerUnionPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<InnerUnionPatchStruct>;
  friend void swap(InnerUnionPatchStruct& a, InnerUnionPatchStruct& b);
};

template <class Protocol_>
unsigned long InnerUnionPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using InnerUnionPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::UnionPatchAdapter, ::test::fixtures::patch::InnerUnionPatchStruct>;


class OptionalInnerUnionPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalInnerUnionPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalInnerUnionPatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalInnerUnionPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::InnerUnionPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> ensure__arg, ::test::fixtures::patch::InnerUnionPatch patch__arg);

  OptionalInnerUnionPatchStruct(OptionalInnerUnionPatchStruct&&) noexcept;
  OptionalInnerUnionPatchStruct(const OptionalInnerUnionPatchStruct& src);


  OptionalInnerUnionPatchStruct& operator=(OptionalInnerUnionPatchStruct&&) noexcept;
  OptionalInnerUnionPatchStruct& operator=(const OptionalInnerUnionPatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::InnerUnionPatch __fbthrift_field_patchPrior;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::InnerUnionPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalInnerUnionPatchStruct&) const;
  bool operator<(const OptionalInnerUnionPatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalInnerUnionPatchStruct>;
  friend void swap(OptionalInnerUnionPatchStruct& a, OptionalInnerUnionPatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalInnerUnionPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalInnerUnionPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalInnerUnionPatchStruct>;


class MyUnionFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::option1,
                                                      ::apache::thrift::tag::option2,
                                                      ::apache::thrift::tag::option3>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::option1> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::option2> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::option3> = 3;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::option1>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::option2>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::option3>) { return 3; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnionFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyUnionFieldPatchStruct() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_option3, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch option1__arg, ::apache::thrift::op::I32Patch option2__arg, ::test::fixtures::patch::InnerUnionPatch option3__arg);

  MyUnionFieldPatchStruct(MyUnionFieldPatchStruct&&) noexcept;
  MyUnionFieldPatchStruct(const MyUnionFieldPatchStruct& src);


  MyUnionFieldPatchStruct& operator=(MyUnionFieldPatchStruct&&) noexcept;
  MyUnionFieldPatchStruct& operator=(const MyUnionFieldPatchStruct& src);
 private:
  ::apache::thrift::op::StringPatch __fbthrift_field_option1;
 private:
  ::apache::thrift::op::I32Patch __fbthrift_field_option2;
 private:
  ::test::fixtures::patch::InnerUnionPatch __fbthrift_field_option3;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyUnionFieldPatchStruct&) const;
  bool operator<(const MyUnionFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> option1_ref() const& {
    return {this->__fbthrift_field_option1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> option1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_option1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> option1_ref() & {
    return {this->__fbthrift_field_option1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> option1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_option1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> option1() const& {
    return {this->__fbthrift_field_option1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> option1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_option1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> option1() & {
    return {this->__fbthrift_field_option1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> option1() && {
    return {static_cast<T&&>(this->__fbthrift_field_option1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> option2_ref() const& {
    return {this->__fbthrift_field_option2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> option2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_option2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> option2_ref() & {
    return {this->__fbthrift_field_option2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> option2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_option2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> option2() const& {
    return {this->__fbthrift_field_option2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> option2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_option2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> option2() & {
    return {this->__fbthrift_field_option2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> option2() && {
    return {static_cast<T&&>(this->__fbthrift_field_option2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> option3_ref() const& {
    return {this->__fbthrift_field_option3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> option3_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_option3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> option3_ref() & {
    return {this->__fbthrift_field_option3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> option3_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_option3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> option3() const& {
    return {this->__fbthrift_field_option3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> option3() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_option3), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> option3() & {
    return {this->__fbthrift_field_option3, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::InnerUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> option3() && {
    return {static_cast<T&&>(this->__fbthrift_field_option3), __isset.at(2), __isset.bit(2)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnionFieldPatchStruct>;
  friend void swap(MyUnionFieldPatchStruct& a, MyUnionFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyUnionFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyUnionFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter, ::test::fixtures::patch::MyUnionFieldPatchStruct>;


class MyUnionPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 5;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 5;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 5; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnionPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyUnionPatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyUnionPatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyUnion assign__arg, bool clear__arg, ::test::fixtures::patch::MyUnionFieldPatch patchPrior__arg, ::test::fixtures::patch::MyUnion ensure__arg, ::test::fixtures::patch::MyUnionFieldPatch patch__arg);

  MyUnionPatchStruct(MyUnionPatchStruct&&) noexcept;
  MyUnionPatchStruct(const MyUnionPatchStruct& src);


  MyUnionPatchStruct& operator=(MyUnionPatchStruct&&) noexcept;
  MyUnionPatchStruct& operator=(const MyUnionPatchStruct& src);
 private:
  ::test::fixtures::patch::MyUnion __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyUnionFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::MyUnion __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyUnionFieldPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<5, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyUnionPatchStruct&) const;
  bool operator<(const MyUnionPatchStruct&) const;

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(4), __isset.bit(4)};
  }
  const ::test::fixtures::patch::MyUnion& get_assign() const&;
  ::test::fixtures::patch::MyUnion get_assign() &&;

  template <typename T_MyUnionPatchStruct_assign_struct_setter = ::test::fixtures::patch::MyUnion>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::test::fixtures::patch::MyUnion& set_assign(T_MyUnionPatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyUnionPatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::MyUnion& get_ensure() const&;
  ::test::fixtures::patch::MyUnion get_ensure() &&;

  template <typename T_MyUnionPatchStruct_ensure_struct_setter = ::test::fixtures::patch::MyUnion>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::MyUnion& set_ensure(T_MyUnionPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyUnionPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnionPatchStruct>;
  friend void swap(MyUnionPatchStruct& a, MyUnionPatchStruct& b);
};

template <class Protocol_>
unsigned long MyUnionPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyUnionPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::UnionPatchAdapter, ::test::fixtures::patch::MyUnionPatchStruct>;


class OptionalMyUnionPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>,
                                                         ::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyUnionPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyUnionPatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyUnionPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyUnionPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> ensure__arg, ::test::fixtures::patch::MyUnionPatch patch__arg);

  OptionalMyUnionPatchStruct(OptionalMyUnionPatchStruct&&) noexcept;
  OptionalMyUnionPatchStruct(const OptionalMyUnionPatchStruct& src);


  OptionalMyUnionPatchStruct& operator=(OptionalMyUnionPatchStruct&&) noexcept;
  OptionalMyUnionPatchStruct& operator=(const OptionalMyUnionPatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyUnionPatch __fbthrift_field_patchPrior;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyUnionPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyUnionPatchStruct&) const;
  bool operator<(const OptionalMyUnionPatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyUnionPatchStruct>;
  friend void swap(OptionalMyUnionPatchStruct& a, OptionalMyUnionPatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalMyUnionPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalMyUnionPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalMyUnionPatchStruct>;


class MyStructField21PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<8>,
                                                   ::apache::thrift::field_id<9>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
                                                         ::apache::thrift::type::list<::apache::thrift::type::i16_t>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::prepend,
                                                      ::apache::thrift::tag::append>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<8>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::prepend> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<9>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::append> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<8>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::prepend>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<9>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::append>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::i16_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::i16_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::i16_t>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField21PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField21PatchStruct() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField21PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg);

  MyStructField21PatchStruct(MyStructField21PatchStruct&&) noexcept;

  MyStructField21PatchStruct(const MyStructField21PatchStruct& src);


  MyStructField21PatchStruct& operator=(MyStructField21PatchStruct&&) noexcept;
  MyStructField21PatchStruct& operator=(const MyStructField21PatchStruct& src);
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_prepend;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_append;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField21PatchStruct&) const;
  bool operator<(const MyStructField21PatchStruct&) const;

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> prepend_ref() const& {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> prepend_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> prepend_ref() & {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> prepend_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> prepend() const& {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> prepend() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> prepend() & {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> prepend() && {
    return {static_cast<T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> append_ref() const& {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> append_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> append_ref() & {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> append_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> append() const& {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> append() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> append() & {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> append() && {
    return {static_cast<T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }
  const ::std::vector<::std::int16_t>* get_assign() const&;
  ::std::vector<::std::int16_t>* get_assign() &;
  ::std::vector<::std::int16_t>* get_assign() && = delete;

  template <typename T_MyStructField21PatchStruct_assign_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::vector<::std::int16_t>& set_assign(T_MyStructField21PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField21PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::vector<::std::int16_t>& get_prepend() const&;
  ::std::vector<::std::int16_t> get_prepend() &&;

  template <typename T_MyStructField21PatchStruct_prepend_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.prepend_ref() = BAR;` instead of `FOO.set_prepend(BAR);`")]]
  ::std::vector<::std::int16_t>& set_prepend(T_MyStructField21PatchStruct_prepend_struct_setter&& prepend_) {
    prepend_ref() = std::forward<T_MyStructField21PatchStruct_prepend_struct_setter>(prepend_);
    return __fbthrift_field_prepend;
  }
  const ::std::vector<::std::int16_t>& get_append() const&;
  ::std::vector<::std::int16_t> get_append() &&;

  template <typename T_MyStructField21PatchStruct_append_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.append_ref() = BAR;` instead of `FOO.set_append(BAR);`")]]
  ::std::vector<::std::int16_t>& set_append(T_MyStructField21PatchStruct_append_struct_setter&& append_) {
    append_ref() = std::forward<T_MyStructField21PatchStruct_append_struct_setter>(append_);
    return __fbthrift_field_append;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField21PatchStruct>;
  friend void swap(MyStructField21PatchStruct& a, MyStructField21PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField21PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField21Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::test::fixtures::patch::MyStructField21PatchStruct>;


class OptionalMyStructField21PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField21PatchStruct>>,
                                                         ::apache::thrift::type::list<::apache::thrift::type::i16_t>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField21PatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField21PatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::list<::apache::thrift::type::i16_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField21PatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructField21PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructField21PatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructField21PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField21Patch patchPrior__arg, ::std::vector<::std::int16_t> ensure__arg, ::test::fixtures::patch::MyStructField21Patch patch__arg);

  OptionalMyStructField21PatchStruct(OptionalMyStructField21PatchStruct&&) noexcept;
  OptionalMyStructField21PatchStruct(const OptionalMyStructField21PatchStruct& src);


  OptionalMyStructField21PatchStruct& operator=(OptionalMyStructField21PatchStruct&&) noexcept;
  OptionalMyStructField21PatchStruct& operator=(const OptionalMyStructField21PatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyStructField21Patch __fbthrift_field_patchPrior;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyStructField21Patch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructField21PatchStruct&) const;
  bool operator<(const OptionalMyStructField21PatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::vector<::std::int16_t>* get_ensure() const&;
  ::std::vector<::std::int16_t>* get_ensure() &;
  ::std::vector<::std::int16_t>* get_ensure() && = delete;

  template <typename T_OptionalMyStructField21PatchStruct_ensure_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::std::vector<::std::int16_t>& set_ensure(T_OptionalMyStructField21PatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_OptionalMyStructField21PatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructField21PatchStruct>;
  friend void swap(OptionalMyStructField21PatchStruct& a, OptionalMyStructField21PatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalMyStructField21PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalMyStructField21Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalMyStructField21PatchStruct>;


class MyStructField22PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<7>,
                                                   ::apache::thrift::field_id<8>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::set<::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::set<::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::set<::apache::thrift::type::string_t>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::remove,
                                                      ::apache::thrift::tag::add>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<7>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::remove> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<8>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::add> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<7>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::remove>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<8>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::add>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::set<::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::set<::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::set<::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField22PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField22PatchStruct() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField22PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg);

  MyStructField22PatchStruct(MyStructField22PatchStruct&&) noexcept;

  MyStructField22PatchStruct(const MyStructField22PatchStruct& src);


  MyStructField22PatchStruct& operator=(MyStructField22PatchStruct&&) noexcept;
  MyStructField22PatchStruct& operator=(const MyStructField22PatchStruct& src);
 private:
  ::std::set<::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::set<::std::string> __fbthrift_field_remove;
 private:
  ::std::set<::std::string> __fbthrift_field_add;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField22PatchStruct&) const;
  bool operator<(const MyStructField22PatchStruct&) const;

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> remove_ref() const& {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> remove_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> remove_ref() & {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> remove_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> remove() const& {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> remove() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> remove() & {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> remove() && {
    return {static_cast<T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> add_ref() const& {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> add_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> add_ref() & {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> add_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> add() const& {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> add() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> add() & {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> add() && {
    return {static_cast<T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }
  const ::std::set<::std::string>* get_assign() const&;
  ::std::set<::std::string>* get_assign() &;
  ::std::set<::std::string>* get_assign() && = delete;

  template <typename T_MyStructField22PatchStruct_assign_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::set<::std::string>& set_assign(T_MyStructField22PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField22PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::set<::std::string>& get_remove() const&;
  ::std::set<::std::string> get_remove() &&;

  template <typename T_MyStructField22PatchStruct_remove_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::set<::std::string>& set_remove(T_MyStructField22PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField22PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::set<::std::string>& get_add() const&;
  ::std::set<::std::string> get_add() &&;

  template <typename T_MyStructField22PatchStruct_add_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::set<::std::string>& set_add(T_MyStructField22PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField22PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField22PatchStruct>;
  friend void swap(MyStructField22PatchStruct& a, MyStructField22PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField22PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField22Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::test::fixtures::patch::MyStructField22PatchStruct>;


class OptionalMyStructField22PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField22PatchStruct>>,
                                                         ::apache::thrift::type::set<::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField22PatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField22PatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::set<::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField22PatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructField22PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructField22PatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructField22PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField22Patch patchPrior__arg, ::std::set<::std::string> ensure__arg, ::test::fixtures::patch::MyStructField22Patch patch__arg);

  OptionalMyStructField22PatchStruct(OptionalMyStructField22PatchStruct&&) noexcept;
  OptionalMyStructField22PatchStruct(const OptionalMyStructField22PatchStruct& src);


  OptionalMyStructField22PatchStruct& operator=(OptionalMyStructField22PatchStruct&&) noexcept;
  OptionalMyStructField22PatchStruct& operator=(const OptionalMyStructField22PatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyStructField22Patch __fbthrift_field_patchPrior;
 private:
  ::std::set<::std::string> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyStructField22Patch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructField22PatchStruct&) const;
  bool operator<(const OptionalMyStructField22PatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::set<::std::string>* get_ensure() const&;
  ::std::set<::std::string>* get_ensure() &;
  ::std::set<::std::string>* get_ensure() && = delete;

  template <typename T_OptionalMyStructField22PatchStruct_ensure_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::std::set<::std::string>& set_ensure(T_OptionalMyStructField22PatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_OptionalMyStructField22PatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructField22PatchStruct>;
  friend void swap(OptionalMyStructField22PatchStruct& a, OptionalMyStructField22PatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalMyStructField22PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalMyStructField22Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalMyStructField22PatchStruct>;


class MyStructField23PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<9>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::add,
                                                      ::apache::thrift::tag::put>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::add> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<9>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::put> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::add>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<9>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::put>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField23PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField23PatchStruct() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField23PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::map<::std::string, ::std::string> put__arg);

  MyStructField23PatchStruct(MyStructField23PatchStruct&&) noexcept;

  MyStructField23PatchStruct(const MyStructField23PatchStruct& src);


  MyStructField23PatchStruct& operator=(MyStructField23PatchStruct&&) noexcept;
  MyStructField23PatchStruct& operator=(const MyStructField23PatchStruct& src);
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_add;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField23PatchStruct&) const;
  bool operator<(const MyStructField23PatchStruct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> add_ref() const& {
    return {this->__fbthrift_field_add, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> add_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_add), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> add_ref() & {
    return {this->__fbthrift_field_add, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> add_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_add), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> add() const& {
    return {this->__fbthrift_field_add, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> add() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_add), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> add() & {
    return {this->__fbthrift_field_add, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> add() && {
    return {static_cast<T&&>(this->__fbthrift_field_add), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> put_ref() const& {
    return {this->__fbthrift_field_put, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> put_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_put), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> put_ref() & {
    return {this->__fbthrift_field_put, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> put_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_put), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> put() const& {
    return {this->__fbthrift_field_put, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> put() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_put), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> put() & {
    return {this->__fbthrift_field_put, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> put() && {
    return {static_cast<T&&>(this->__fbthrift_field_put), __isset.at(3), __isset.bit(3)};
  }
  const ::std::map<::std::string, ::std::string>* get_assign() const&;
  ::std::map<::std::string, ::std::string>* get_assign() &;
  ::std::map<::std::string, ::std::string>* get_assign() && = delete;

  template <typename T_MyStructField23PatchStruct_assign_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_assign(T_MyStructField23PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField23PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::map<::std::string, ::std::string>& get_add() const&;
  ::std::map<::std::string, ::std::string> get_add() &&;

  template <typename T_MyStructField23PatchStruct_add_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_add(T_MyStructField23PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField23PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }
  const ::std::map<::std::string, ::std::string>& get_put() const&;
  ::std::map<::std::string, ::std::string> get_put() &&;

  template <typename T_MyStructField23PatchStruct_put_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_put(T_MyStructField23PatchStruct_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField23PatchStruct_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField23PatchStruct>;
  friend void swap(MyStructField23PatchStruct& a, MyStructField23PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField23PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField23Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::test::fixtures::patch::MyStructField23PatchStruct>;


class OptionalMyStructField23PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>,
                                                         ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructField23PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructField23PatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructField23PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField23Patch patchPrior__arg, ::std::map<::std::string, ::std::string> ensure__arg, ::test::fixtures::patch::MyStructField23Patch patch__arg);

  OptionalMyStructField23PatchStruct(OptionalMyStructField23PatchStruct&&) noexcept;
  OptionalMyStructField23PatchStruct(const OptionalMyStructField23PatchStruct& src);


  OptionalMyStructField23PatchStruct& operator=(OptionalMyStructField23PatchStruct&&) noexcept;
  OptionalMyStructField23PatchStruct& operator=(const OptionalMyStructField23PatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyStructField23Patch __fbthrift_field_patchPrior;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyStructField23Patch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructField23PatchStruct&) const;
  bool operator<(const OptionalMyStructField23PatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::map<::std::string, ::std::string>* get_ensure() const&;
  ::std::map<::std::string, ::std::string>* get_ensure() &;
  ::std::map<::std::string, ::std::string>* get_ensure() && = delete;

  template <typename T_OptionalMyStructField23PatchStruct_ensure_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_ensure(T_OptionalMyStructField23PatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_OptionalMyStructField23PatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructField23PatchStruct>;
  friend void swap(OptionalMyStructField23PatchStruct& a, OptionalMyStructField23PatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalMyStructField23PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalMyStructField23Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalMyStructField23PatchStruct>;


class MyStructFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 24;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<6>,
                                                   ::apache::thrift::field_id<7>,
                                                   ::apache::thrift::field_id<8>,
                                                   ::apache::thrift::field_id<9>,
                                                   ::apache::thrift::field_id<10>,
                                                   ::apache::thrift::field_id<11>,
                                                   ::apache::thrift::field_id<12>,
                                                   ::apache::thrift::field_id<13>,
                                                   ::apache::thrift::field_id<14>,
                                                   ::apache::thrift::field_id<15>,
                                                   ::apache::thrift::field_id<16>,
                                                   ::apache::thrift::field_id<17>,
                                                   ::apache::thrift::field_id<18>,
                                                   ::apache::thrift::field_id<19>,
                                                   ::apache::thrift::field_id<20>,
                                                   ::apache::thrift::field_id<21>,
                                                   ::apache::thrift::field_id<22>,
                                                   ::apache::thrift::field_id<23>,
                                                   ::apache::thrift::field_id<30>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalBoolPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalBytePatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalI16PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalI32PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalI64PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalFloatPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalDoublePatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalStringPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalBinaryPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyDataPatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyStructField21PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyStructField22PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyStructField23PatchStruct>>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::boolVal,
                                                      ::apache::thrift::tag::byteVal,
                                                      ::apache::thrift::tag::i16Val,
                                                      ::apache::thrift::tag::i32Val,
                                                      ::apache::thrift::tag::i64Val,
                                                      ::apache::thrift::tag::floatVal,
                                                      ::apache::thrift::tag::doubleVal,
                                                      ::apache::thrift::tag::stringVal,
                                                      ::apache::thrift::tag::binaryVal,
                                                      ::apache::thrift::tag::structVal,
                                                      ::apache::thrift::tag::optBoolVal,
                                                      ::apache::thrift::tag::optByteVal,
                                                      ::apache::thrift::tag::optI16Val,
                                                      ::apache::thrift::tag::optI32Val,
                                                      ::apache::thrift::tag::optI64Val,
                                                      ::apache::thrift::tag::optFloatVal,
                                                      ::apache::thrift::tag::optDoubleVal,
                                                      ::apache::thrift::tag::optStringVal,
                                                      ::apache::thrift::tag::optBinaryVal,
                                                      ::apache::thrift::tag::optStructVal,
                                                      ::apache::thrift::tag::optListVal,
                                                      ::apache::thrift::tag::optSetVal,
                                                      ::apache::thrift::tag::optMapVal,
                                                      ::apache::thrift::tag::unionVal>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::boolVal> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::byteVal> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::i16Val> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::i32Val> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 5;
    template<> static constexpr int value<::apache::thrift::tag::i64Val> = 5;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 6;
    template<> static constexpr int value<::apache::thrift::tag::floatVal> = 6;
    template<> static constexpr int value<::apache::thrift::field_id<7>> = 7;
    template<> static constexpr int value<::apache::thrift::tag::doubleVal> = 7;
    template<> static constexpr int value<::apache::thrift::field_id<8>> = 8;
    template<> static constexpr int value<::apache::thrift::tag::stringVal> = 8;
    template<> static constexpr int value<::apache::thrift::field_id<9>> = 9;
    template<> static constexpr int value<::apache::thrift::tag::binaryVal> = 9;
    template<> static constexpr int value<::apache::thrift::field_id<10>> = 10;
    template<> static constexpr int value<::apache::thrift::tag::structVal> = 10;
    template<> static constexpr int value<::apache::thrift::field_id<11>> = 11;
    template<> static constexpr int value<::apache::thrift::tag::optBoolVal> = 11;
    template<> static constexpr int value<::apache::thrift::field_id<12>> = 12;
    template<> static constexpr int value<::apache::thrift::tag::optByteVal> = 12;
    template<> static constexpr int value<::apache::thrift::field_id<13>> = 13;
    template<> static constexpr int value<::apache::thrift::tag::optI16Val> = 13;
    template<> static constexpr int value<::apache::thrift::field_id<14>> = 14;
    template<> static constexpr int value<::apache::thrift::tag::optI32Val> = 14;
    template<> static constexpr int value<::apache::thrift::field_id<15>> = 15;
    template<> static constexpr int value<::apache::thrift::tag::optI64Val> = 15;
    template<> static constexpr int value<::apache::thrift::field_id<16>> = 16;
    template<> static constexpr int value<::apache::thrift::tag::optFloatVal> = 16;
    template<> static constexpr int value<::apache::thrift::field_id<17>> = 17;
    template<> static constexpr int value<::apache::thrift::tag::optDoubleVal> = 17;
    template<> static constexpr int value<::apache::thrift::field_id<18>> = 18;
    template<> static constexpr int value<::apache::thrift::tag::optStringVal> = 18;
    template<> static constexpr int value<::apache::thrift::field_id<19>> = 19;
    template<> static constexpr int value<::apache::thrift::tag::optBinaryVal> = 19;
    template<> static constexpr int value<::apache::thrift::field_id<20>> = 20;
    template<> static constexpr int value<::apache::thrift::tag::optStructVal> = 20;
    template<> static constexpr int value<::apache::thrift::field_id<21>> = 21;
    template<> static constexpr int value<::apache::thrift::tag::optListVal> = 21;
    template<> static constexpr int value<::apache::thrift::field_id<22>> = 22;
    template<> static constexpr int value<::apache::thrift::tag::optSetVal> = 22;
    template<> static constexpr int value<::apache::thrift::field_id<23>> = 23;
    template<> static constexpr int value<::apache::thrift::tag::optMapVal> = 23;
    template<> static constexpr int value<::apache::thrift::field_id<30>> = 24;
    template<> static constexpr int value<::apache::thrift::tag::unionVal> = 24;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::boolVal>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::byteVal>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::i16Val>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::i32Val>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::i64Val>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::floatVal>) { return 6; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<7>>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::doubleVal>) { return 7; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<8>>) { return 8; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::stringVal>) { return 8; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<9>>) { return 9; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::binaryVal>) { return 9; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<10>>) { return 10; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::structVal>) { return 10; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<11>>) { return 11; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optBoolVal>) { return 11; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<12>>) { return 12; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optByteVal>) { return 12; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<13>>) { return 13; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optI16Val>) { return 13; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<14>>) { return 14; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optI32Val>) { return 14; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<15>>) { return 15; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optI64Val>) { return 15; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<16>>) { return 16; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optFloatVal>) { return 16; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<17>>) { return 17; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optDoubleVal>) { return 17; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<18>>) { return 18; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optStringVal>) { return 18; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<19>>) { return 19; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optBinaryVal>) { return 19; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<20>>) { return 20; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optStructVal>) { return 20; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<21>>) { return 21; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optListVal>) { return 21; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<22>>) { return 22; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optSetVal>) { return 22; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<23>>) { return 23; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::optMapVal>) { return 23; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<30>>) { return 24; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::unionVal>) { return 24; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>, T, std::enable_if_t<sizeof(T) != -6>> { static constexpr int value = 6; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>, T, std::enable_if_t<sizeof(T) != -7>> { static constexpr int value = 7; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>, T, std::enable_if_t<sizeof(T) != -8>> { static constexpr int value = 8; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>, T, std::enable_if_t<sizeof(T) != -9>> { static constexpr int value = 9; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>, T, std::enable_if_t<sizeof(T) != -10>> { static constexpr int value = 10; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalBoolPatchStruct>>, T, std::enable_if_t<sizeof(T) != -11>> { static constexpr int value = 11; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalBytePatchStruct>>, T, std::enable_if_t<sizeof(T) != -12>> { static constexpr int value = 12; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalI16PatchStruct>>, T, std::enable_if_t<sizeof(T) != -13>> { static constexpr int value = 13; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalI32PatchStruct>>, T, std::enable_if_t<sizeof(T) != -14>> { static constexpr int value = 14; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalI64PatchStruct>>, T, std::enable_if_t<sizeof(T) != -15>> { static constexpr int value = 15; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalFloatPatchStruct>>, T, std::enable_if_t<sizeof(T) != -16>> { static constexpr int value = 16; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalDoublePatchStruct>>, T, std::enable_if_t<sizeof(T) != -17>> { static constexpr int value = 17; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalStringPatchStruct>>, T, std::enable_if_t<sizeof(T) != -18>> { static constexpr int value = 18; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::apache::thrift::op::OptionalBinaryPatchStruct>>, T, std::enable_if_t<sizeof(T) != -19>> { static constexpr int value = 19; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyDataPatchStruct>>, T, std::enable_if_t<sizeof(T) != -20>> { static constexpr int value = 20; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyStructField21PatchStruct>>, T, std::enable_if_t<sizeof(T) != -21>> { static constexpr int value = 21; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyStructField22PatchStruct>>, T, std::enable_if_t<sizeof(T) != -22>> { static constexpr int value = 22; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::OptionalMyStructField23PatchStruct>>, T, std::enable_if_t<sizeof(T) != -23>> { static constexpr int value = 23; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>, T, std::enable_if_t<sizeof(T) != -24>> { static constexpr int value = 24; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructFieldPatchStruct() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 10>(__fbthrift_field_structVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 30>(__fbthrift_field_unionVal, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BoolPatch boolVal__arg, ::apache::thrift::op::BytePatch byteVal__arg, ::apache::thrift::op::I16Patch i16Val__arg, ::apache::thrift::op::I32Patch i32Val__arg, ::apache::thrift::op::I64Patch i64Val__arg, ::apache::thrift::op::FloatPatch floatVal__arg, ::apache::thrift::op::DoublePatch doubleVal__arg, ::apache::thrift::op::StringPatch stringVal__arg, ::apache::thrift::op::BinaryPatch binaryVal__arg, ::test::fixtures::patch::MyDataPatch structVal__arg, ::apache::thrift::op::OptionalBoolPatch optBoolVal__arg, ::apache::thrift::op::OptionalBytePatch optByteVal__arg, ::apache::thrift::op::OptionalI16Patch optI16Val__arg, ::apache::thrift::op::OptionalI32Patch optI32Val__arg, ::apache::thrift::op::OptionalI64Patch optI64Val__arg, ::apache::thrift::op::OptionalFloatPatch optFloatVal__arg, ::apache::thrift::op::OptionalDoublePatch optDoubleVal__arg, ::apache::thrift::op::OptionalStringPatch optStringVal__arg, ::apache::thrift::op::OptionalBinaryPatch optBinaryVal__arg, ::test::fixtures::patch::OptionalMyDataPatch optStructVal__arg, ::test::fixtures::patch::OptionalMyStructField21Patch optListVal__arg, ::test::fixtures::patch::OptionalMyStructField22Patch optSetVal__arg, ::test::fixtures::patch::OptionalMyStructField23Patch optMapVal__arg, ::test::fixtures::patch::MyUnionPatch unionVal__arg);

  MyStructFieldPatchStruct(MyStructFieldPatchStruct&&) noexcept;
  MyStructFieldPatchStruct(const MyStructFieldPatchStruct& src);


  MyStructFieldPatchStruct& operator=(MyStructFieldPatchStruct&&) noexcept;
  MyStructFieldPatchStruct& operator=(const MyStructFieldPatchStruct& src);
 private:
  ::apache::thrift::op::BoolPatch __fbthrift_field_boolVal;
 private:
  ::apache::thrift::op::BytePatch __fbthrift_field_byteVal;
 private:
  ::apache::thrift::op::I16Patch __fbthrift_field_i16Val;
 private:
  ::apache::thrift::op::I32Patch __fbthrift_field_i32Val;
 private:
  ::apache::thrift::op::I64Patch __fbthrift_field_i64Val;
 private:
  ::apache::thrift::op::FloatPatch __fbthrift_field_floatVal;
 private:
  ::apache::thrift::op::DoublePatch __fbthrift_field_doubleVal;
 private:
  ::apache::thrift::op::StringPatch __fbthrift_field_stringVal;
 private:
  ::apache::thrift::op::BinaryPatch __fbthrift_field_binaryVal;
 private:
  ::test::fixtures::patch::MyDataPatch __fbthrift_field_structVal;
 private:
  ::apache::thrift::op::OptionalBoolPatch __fbthrift_field_optBoolVal;
 private:
  ::apache::thrift::op::OptionalBytePatch __fbthrift_field_optByteVal;
 private:
  ::apache::thrift::op::OptionalI16Patch __fbthrift_field_optI16Val;
 private:
  ::apache::thrift::op::OptionalI32Patch __fbthrift_field_optI32Val;
 private:
  ::apache::thrift::op::OptionalI64Patch __fbthrift_field_optI64Val;
 private:
  ::apache::thrift::op::OptionalFloatPatch __fbthrift_field_optFloatVal;
 private:
  ::apache::thrift::op::OptionalDoublePatch __fbthrift_field_optDoubleVal;
 private:
  ::apache::thrift::op::OptionalStringPatch __fbthrift_field_optStringVal;
 private:
  ::apache::thrift::op::OptionalBinaryPatch __fbthrift_field_optBinaryVal;
 private:
  ::test::fixtures::patch::OptionalMyDataPatch __fbthrift_field_optStructVal;
 private:
  ::test::fixtures::patch::OptionalMyStructField21Patch __fbthrift_field_optListVal;
 private:
  ::test::fixtures::patch::OptionalMyStructField22Patch __fbthrift_field_optSetVal;
 private:
  ::test::fixtures::patch::OptionalMyStructField23Patch __fbthrift_field_optMapVal;
 private:
  ::test::fixtures::patch::MyUnionPatch __fbthrift_field_unionVal;
 private:
  apache::thrift::detail::isset_bitset<24, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructFieldPatchStruct&) const;
  bool operator<(const MyStructFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal_ref() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal_ref() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal_ref() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal_ref() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::BytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val_ref() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val_ref() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val_ref() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val_ref() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val_ref() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val_ref() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::I64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal_ref() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal_ref() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::FloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal_ref() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal_ref() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::DoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal_ref() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal_ref() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::StringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal_ref() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal_ref() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::op::BinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structVal_ref() const& {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structVal_ref() & {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structVal() const& {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structVal() & {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBoolPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBytePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI16Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI32Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalI64Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalFloatPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalDoublePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalStringPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::op::OptionalBinaryPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStructVal_ref() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStructVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStructVal_ref() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStructVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStructVal() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStructVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStructVal() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStructVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optListVal_ref() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optListVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optListVal_ref() & {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optListVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optListVal() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optListVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optListVal() & {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField21Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optListVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optSetVal_ref() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optSetVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optSetVal_ref() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optSetVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optSetVal() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optSetVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optSetVal() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField22Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optSetVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optMapVal_ref() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optMapVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optMapVal_ref() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optMapVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optMapVal() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optMapVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optMapVal() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::OptionalMyStructField23Patch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optMapVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unionVal_ref() const& {
    return {this->__fbthrift_field_unionVal, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unionVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unionVal), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unionVal_ref() & {
    return {this->__fbthrift_field_unionVal, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unionVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_unionVal), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unionVal() const& {
    return {this->__fbthrift_field_unionVal, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unionVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unionVal), __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unionVal() & {
    return {this->__fbthrift_field_unionVal, __isset.at(23), __isset.bit(23)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyUnionPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unionVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_unionVal), __isset.at(23), __isset.bit(23)};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructFieldPatchStruct>;
  friend void swap(MyStructFieldPatchStruct& a, MyStructFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter, ::test::fixtures::patch::MyStructFieldPatchStruct>;


class MyStructPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 5;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<1>,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<5>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::assign,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<1>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::assign> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<5>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 4;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 5;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 5;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<1>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::assign>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<5>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 5; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 5; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>, T, std::enable_if_t<sizeof(T) != -5>> { static constexpr int value = 5; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::MyStructFieldPatch patchPrior__arg, ::test::fixtures::patch::MyStruct ensure__arg, ::test::fixtures::patch::MyStructFieldPatch patch__arg);

  MyStructPatchStruct(MyStructPatchStruct&&) noexcept;
  MyStructPatchStruct(const MyStructPatchStruct& src);


  MyStructPatchStruct& operator=(MyStructPatchStruct&&) noexcept;
  MyStructPatchStruct& operator=(const MyStructPatchStruct& src);

  ~MyStructPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyStructFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::patch::MyStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyStructFieldPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructPatchStruct&) const;
  bool operator<(const MyStructPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(3), __isset.bit(3)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::patch::MyStruct& get_ensure() const&;
  ::test::fixtures::patch::MyStruct get_ensure() &&;

  template <typename T_MyStructPatchStruct_ensure_struct_setter = ::test::fixtures::patch::MyStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::patch::MyStruct& set_ensure(T_MyStructPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyStructPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructPatchStruct>;
  friend void swap(MyStructPatchStruct& a, MyStructPatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::test::fixtures::patch::MyStructPatchStruct>;


class OptionalMyStructPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                   void,
                                                   ::apache::thrift::field_id<2>,
                                                   ::apache::thrift::field_id<3>,
                                                   ::apache::thrift::field_id<4>,
                                                   ::apache::thrift::field_id<6>>;

  template<class T>
  using __fbthrift_type_tag = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                         void,
                                                         ::apache::thrift::type::bool_t,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructPatchStruct>>,
                                                         ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>,
                                                         ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructPatchStruct>>>;

  template<class T>
  using __fbthrift_ident = folly::type_pack_element_t<folly::to_underlying(T::value),
                                                      void,
                                                      ::apache::thrift::tag::clear,
                                                      ::apache::thrift::tag::patchPrior,
                                                      ::apache::thrift::tag::ensure,
                                                      ::apache::thrift::tag::patch>;

  struct __fbthrift_ordinal_impl {
#if defined(_MSC_VER) || defined(__clang__)
    template<class> static constexpr int value = 0;
    template<> static constexpr int value<::apache::thrift::field_id<2>> = 1;
    template<> static constexpr int value<::apache::thrift::tag::clear> = 1;
    template<> static constexpr int value<::apache::thrift::field_id<3>> = 2;
    template<> static constexpr int value<::apache::thrift::tag::patchPrior> = 2;
    template<> static constexpr int value<::apache::thrift::field_id<4>> = 3;
    template<> static constexpr int value<::apache::thrift::tag::ensure> = 3;
    template<> static constexpr int value<::apache::thrift::field_id<6>> = 4;
    template<> static constexpr int value<::apache::thrift::tag::patch> = 4;
#else
    template<class T> static constexpr int value_impl(folly::tag_t<T>) { return 0; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<2>>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::clear>) { return 1; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<3>>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patchPrior>) { return 2; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<4>>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::ensure>) { return 3; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::field_id<6>>) { return 4; }
    static constexpr int value_impl(folly::tag_t<::apache::thrift::tag::patch>) { return 4; }
    template<class T> static constexpr int value = value_impl(folly::tag_t<T>{});
#endif
  };

  struct __fbthrift_ordinal_impl_for_non_unique_type {
    template<class, class, class> struct Impl { static constexpr int value = 0; };
    template<class T> struct Impl<::apache::thrift::type::bool_t, T, std::enable_if_t<sizeof(T) != -1>> { static constexpr int value = 1; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructPatchStruct>>, T, std::enable_if_t<sizeof(T) != -2>> { static constexpr int value = 2; };
    template<class T> struct Impl<::apache::thrift::type::struct_t<::test::fixtures::patch::MyStruct>, T, std::enable_if_t<sizeof(T) != -3>> { static constexpr int value = 3; };
    template<class T> struct Impl<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructPatchStruct>>, T, std::enable_if_t<sizeof(T) != -4>> { static constexpr int value = 4; };

    template<class T> static constexpr int value = Impl<T, T, void>::value;
  };

  template<class T> using __fbthrift_ordinal = ::apache::thrift::field_ordinal<
    std::conditional_t<
        __fbthrift_ordinal_impl::value<T> != 0,
        __fbthrift_ordinal_impl,
        __fbthrift_ordinal_impl_for_non_unique_type>::template value<T>
  >;

  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructPatchStruct() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patchPrior, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 6>(__fbthrift_field_patch, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructPatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructPatch patchPrior__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> ensure__arg, ::test::fixtures::patch::MyStructPatch patch__arg);

  OptionalMyStructPatchStruct(OptionalMyStructPatchStruct&&) noexcept;
  OptionalMyStructPatchStruct(const OptionalMyStructPatchStruct& src);


  OptionalMyStructPatchStruct& operator=(OptionalMyStructPatchStruct&&) noexcept;
  OptionalMyStructPatchStruct& operator=(const OptionalMyStructPatchStruct& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::patch::MyStructPatch __fbthrift_field_patchPrior;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> __fbthrift_field_ensure;
 private:
  ::test::fixtures::patch::MyStructPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructPatchStruct&) const;
  bool operator<(const OptionalMyStructPatchStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior_ref() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior_ref() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchPrior() const& {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchPrior() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchPrior() & {
    return {this->__fbthrift_field_patchPrior, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchPrior() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchPrior), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::patch::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(2), __isset.bit(2)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructPatchStruct>;
  friend void swap(OptionalMyStructPatchStruct& a, OptionalMyStructPatchStruct& b);
};

template <class Protocol_>
unsigned long OptionalMyStructPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using OptionalMyStructPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::test::fixtures::patch::OptionalMyStructPatchStruct>;


}}} // test::fixtures::patch

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::patch::InnerUnion::Type> {
  using type = ::test::fixtures::patch::InnerUnion::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};

template <> struct TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::patch::MyUnion::Type> {
  using type = ::test::fixtures::patch::MyUnion::Type;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
