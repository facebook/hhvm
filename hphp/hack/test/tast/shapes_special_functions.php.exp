[(Fun
    { Aast.AnnotatedAST.f_annotation = (); f_mode = <opaque>;
      f_ret = (Some ([5:26-30], (Hprim Tvoid)));
      f_name = ([5:10-14], "\\test"); f_tparams = [];
      f_where_constraints = []; f_variadic = FVnonVariadic;
      f_params =
      [{ Aast.AnnotatedAST.param_annotation =
         ([5:21-23], shape('x' => int, ?'y' => int));
         param_hint =
         (Some ([5:15-20], (Happly (([5:15-20], "\\Point"), []))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = [5:21-23]; param_name = "$p"; param_expr = None;
         param_callconv = None; param_user_attributes = [] }
        ];
      f_body =
      (NamedBody
         { Aast.AnnotatedAST.fnb_nast =
           [(Expr
               (([6:3-23], int),
                (Call (Cnormal,
                   (([6:3-14], (function(shape('x' => int, ?'y' => int) $shape, arraykey $index, $default): int)),
                    (Class_const (
                       (([6:3-9], Shapes), (CI (([6:3-9], "\\Shapes"), []))),
                       ([6:11-14], "idx")))),
                   [],
                   [(([6:15-17], shape('x' => int, ?'y' => int)),
                     (Lvar ([6:15-17], $p)));
                     (([6:19-22], string), (String "x"))],
                   []))));
             (Expr
                (([7:3-26], int),
                 (Call (Cnormal,
                    (([7:3-14], (function(shape('x' => int, ?'y' => int) $shape, arraykey $index, $default): int)),
                     (Class_const (
                        (([7:3-9], Shapes), (CI (([7:3-9], "\\Shapes"), []))),
                        ([7:11-14], "idx")))),
                    [],
                    [(([7:15-17], shape('x' => int, ?'y' => int)),
                      (Lvar ([7:15-17], $p)));
                      (([7:19-22], string), (String "x"));
                      (([7:24-25], int), (Int "3"))],
                    []))));
             (Expr
                (([8:3-29], bool),
                 (Call (Cnormal,
                    (([8:3-20], (function(shape('x' => int, ?'y' => int) $shape, arraykey $index): bool)),
                     (Class_const (
                        (([8:3-9], Shapes), (CI (([8:3-9], "\\Shapes"), []))),
                        ([8:11-20], "keyExists")))),
                    [],
                    [(([8:21-23], shape('x' => int, ?'y' => int)),
                      (Lvar ([8:21-23], $p)));
                      (([8:25-28], string), (String "y"))],
                    []))));
             (Expr
                (([9:3-30], void),
                 (Call (Cnormal,
                    (([9:3-20], (function(inout shape('x' => int, ?'y' => int) $shape, arraykey $index): void)),
                     (Class_const (
                        (([9:3-9], Shapes), (CI (([9:3-9], "\\Shapes"), []))),
                        ([9:11-20], "removeKey")))),
                    [],
                    [(([9:21-24], shape('x' => int, ?'y' => int)),
                      (Unop (Uref,
                         (([9:22-24], shape('x' => int, ?'y' => int)),
                          (Lvar ([9:22-24], $p)))
                         )));
                      (([9:26-29], string), (String "y"))],
                    []))));
             (Expr
                (([10:3-22], array<string, int>),
                 (Call (Cnormal,
                    (([10:3-18], (function(shape('x' => int) $shape): array<string, int>)),
                     (Class_const (
                        (([10:3-9], Shapes),
                         (CI (([10:3-9], "\\Shapes"), []))),
                        ([10:11-18], "toArray")))),
                    [],
                    [(([10:19-21], shape('x' => int)),
                      (Lvar ([10:19-21], $p)))],
                    []))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false;
      f_external = false });
  (Typedef
     { Aast.AnnotatedAST.t_annotation = (); t_name = ([3:6-11], "\\Point");
       t_tparams = []; t_constraint = None;
       t_kind =
       ([3:14-44],
        (Hshape
           { Aast_defs.nsi_allows_unknown_fields = false;
             nsi_field_map = [ShapeMap] }));
       t_user_attributes = []; t_mode = <opaque>; t_vis = Transparent })
  ]
