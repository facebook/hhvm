// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]


import (
    "context"
    "fmt"

    thrift0 "thrift/annotation/thrift"

    "thrift/lib/go/thrift"
)

var _ = thrift0.GoUnusedProtection__

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = fmt.Printf
var _ = thrift.ZERO



type Raiser interface {
    DoBland(ctx context.Context) (error)
    DoRaise(ctx context.Context) (error)
    Get200(ctx context.Context) (string, error)
    Get500(ctx context.Context) (string, error)
}

// Deprecated: Use Raiser instead.
type RaiserClientInterface interface {
    thrift.ClientInterface
    DoBland() (error)
    DoRaise() (error)
    Get200() (string, error)
    Get500() (string, error)
}

type RaiserChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ Raiser = &RaiserChannelClient{}

func NewRaiserChannelClient(channel thrift.RequestChannel) *RaiserChannelClient {
    return &RaiserChannelClient{
        ch: channel,
    }
}

func (c *RaiserChannelClient) Close() error {
    return c.ch.Close()
}

func (c *RaiserChannelClient) IsOpen() bool {
    return c.ch.IsOpen()
}

func (c *RaiserChannelClient) Open() error {
    return c.ch.Open()
}

// Deprecated: Use RaiserChannelClient instead.
type RaiserClient struct {
    chClient *RaiserChannelClient
}
// Compile time interface enforcer
var _ RaiserClientInterface = &RaiserClient{}

// Deprecated: Use NewRaiserChannelClient() instead.
func NewRaiserClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *RaiserClient {
    return &RaiserClient{
        chClient: NewRaiserChannelClient(
            thrift.NewSerialChannel(iprot),
        ),
    }
}

func (c *RaiserClient) Close() error {
    return c.chClient.Close()
}

func (c *RaiserClient) IsOpen() bool {
    return c.chClient.IsOpen()
}

func (c *RaiserClient) Open() error {
    return c.chClient.Open()
}

// Deprecated: Use RaiserChannelClient instead.
type RaiserThreadsafeClient = RaiserClient

// Deprecated: Use NewRaiserChannelClient() instead.
func NewRaiserThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *RaiserThreadsafeClient {
    return NewRaiserClient(t, iprot, oprot)
}

// Deprecated: Use NewRaiserChannelClient() instead.
func NewRaiserClientProtocol(prot thrift.Protocol) *RaiserClient {
  return NewRaiserClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewRaiserChannelClient() instead.
func NewRaiserThreadsafeClientProtocol(prot thrift.Protocol) *RaiserClient {
  return NewRaiserClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewRaiserChannelClient() instead.
func NewRaiserClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *RaiserClient {
  iprot := pf.GetProtocol(t)
  oprot := pf.GetProtocol(t)
  return NewRaiserClient(t, iprot, oprot)
}

// Deprecated: Use NewRaiserChannelClient() instead.
func NewRaiserThreadsafeClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *RaiserThreadsafeClient {
  return NewRaiserClientFactory(t, pf)
}


func (c *RaiserChannelClient) DoBland(ctx context.Context) (error) {
    in := &reqRaiserDoBland{
    }
    out := newRespRaiserDoBland()
    err := c.ch.Call(ctx, "doBland", in, out)
    if err != nil {
        return err
    }
    return nil
}

func (c *RaiserClient) DoBland() (error) {
    return c.chClient.DoBland(nil)
}


func (c *RaiserChannelClient) DoRaise(ctx context.Context) (error) {
    in := &reqRaiserDoRaise{
    }
    out := newRespRaiserDoRaise()
    err := c.ch.Call(ctx, "doRaise", in, out)
    if err != nil {
        return err
    } else if out.B != nil {
        return out.B
    } else if out.F != nil {
        return out.F
    } else if out.S != nil {
        return out.S
    }
    return nil
}

func (c *RaiserClient) DoRaise() (error) {
    return c.chClient.DoRaise(nil)
}


func (c *RaiserChannelClient) Get200(ctx context.Context) (string, error) {
    in := &reqRaiserGet200{
    }
    out := newRespRaiserGet200()
    err := c.ch.Call(ctx, "get200", in, out)
    if err != nil {
        return out.Value, err
    }
    return out.Value, nil
}

func (c *RaiserClient) Get200() (string, error) {
    return c.chClient.Get200(nil)
}


func (c *RaiserChannelClient) Get500(ctx context.Context) (string, error) {
    in := &reqRaiserGet500{
    }
    out := newRespRaiserGet500()
    err := c.ch.Call(ctx, "get500", in, out)
    if err != nil {
        return out.Value, err
    } else if out.F != nil {
        return out.Value, out.F
    } else if out.B != nil {
        return out.Value, out.B
    } else if out.S != nil {
        return out.Value, out.S
    }
    return out.Value, nil
}

func (c *RaiserClient) Get500() (string, error) {
    return c.chClient.Get500(nil)
}


type reqRaiserDoBland struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqRaiserDoBland{}


func newReqRaiserDoBland() *reqRaiserDoBland {
    return (&reqRaiserDoBland{})
}

func (x *reqRaiserDoBland) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqRaiserDoBland.Set* methods instead or set the fields directly.
type reqRaiserDoBlandBuilder struct {
    obj *reqRaiserDoBland
}

func newReqRaiserDoBlandBuilder() *reqRaiserDoBlandBuilder {
    return &reqRaiserDoBlandBuilder{
        obj: newReqRaiserDoBland(),
    }
}

func (x *reqRaiserDoBlandBuilder) Emit() *reqRaiserDoBland {
    var objCopy reqRaiserDoBland = *x.obj
    return &objCopy
}

func (x *reqRaiserDoBland) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqRaiserDoBland"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqRaiserDoBland) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respRaiserDoBland struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &respRaiserDoBland{}
var _ thrift.WritableResult = &respRaiserDoBland{}


func newRespRaiserDoBland() *respRaiserDoBland {
    return (&respRaiserDoBland{})
}

func (x *respRaiserDoBland) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respRaiserDoBland.Set* methods instead or set the fields directly.
type respRaiserDoBlandBuilder struct {
    obj *respRaiserDoBland
}

func newRespRaiserDoBlandBuilder() *respRaiserDoBlandBuilder {
    return &respRaiserDoBlandBuilder{
        obj: newRespRaiserDoBland(),
    }
}

func (x *respRaiserDoBlandBuilder) Emit() *respRaiserDoBland {
    var objCopy respRaiserDoBland = *x.obj
    return &objCopy
}

func (x *respRaiserDoBland) Exception() thrift.WritableException {
    return nil
}

func (x *respRaiserDoBland) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respRaiserDoBland"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respRaiserDoBland) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqRaiserDoRaise struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqRaiserDoRaise{}


func newReqRaiserDoRaise() *reqRaiserDoRaise {
    return (&reqRaiserDoRaise{})
}

func (x *reqRaiserDoRaise) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqRaiserDoRaise.Set* methods instead or set the fields directly.
type reqRaiserDoRaiseBuilder struct {
    obj *reqRaiserDoRaise
}

func newReqRaiserDoRaiseBuilder() *reqRaiserDoRaiseBuilder {
    return &reqRaiserDoRaiseBuilder{
        obj: newReqRaiserDoRaise(),
    }
}

func (x *reqRaiserDoRaiseBuilder) Emit() *reqRaiserDoRaise {
    var objCopy reqRaiserDoRaise = *x.obj
    return &objCopy
}

func (x *reqRaiserDoRaise) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqRaiserDoRaise"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqRaiserDoRaise) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respRaiserDoRaise struct {
    B *Banal `thrift:"b,1,optional" json:"b,omitempty" db:"b"`
    F *Fiery `thrift:"f,2,optional" json:"f,omitempty" db:"f"`
    S *Serious `thrift:"s,3,optional" json:"s,omitempty" db:"s"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respRaiserDoRaise{}
var _ thrift.WritableResult = &respRaiserDoRaise{}


func newRespRaiserDoRaise() *respRaiserDoRaise {
    return (&respRaiserDoRaise{})
}

// Deprecated: Use newRespRaiserDoRaise().B instead.
var respRaiserDoRaise_B_DEFAULT = newRespRaiserDoRaise().B

// Deprecated: Use newRespRaiserDoRaise().F instead.
var respRaiserDoRaise_F_DEFAULT = newRespRaiserDoRaise().F

// Deprecated: Use newRespRaiserDoRaise().S instead.
var respRaiserDoRaise_S_DEFAULT = newRespRaiserDoRaise().S

func (x *respRaiserDoRaise) GetBNonCompat() *Banal {
    return x.B
}

func (x *respRaiserDoRaise) GetB() *Banal {
    if !x.IsSetB() {
      return NewBanal()
    }

    return x.B
}

func (x *respRaiserDoRaise) GetFNonCompat() *Fiery {
    return x.F
}

func (x *respRaiserDoRaise) GetF() *Fiery {
    if !x.IsSetF() {
      return NewFiery()
    }

    return x.F
}

func (x *respRaiserDoRaise) GetSNonCompat() *Serious {
    return x.S
}

func (x *respRaiserDoRaise) GetS() *Serious {
    if !x.IsSetS() {
      return NewSerious()
    }

    return x.S
}

func (x *respRaiserDoRaise) SetB(value Banal) *respRaiserDoRaise {
    x.B = &value
    return x
}

func (x *respRaiserDoRaise) SetF(value Fiery) *respRaiserDoRaise {
    x.F = &value
    return x
}

func (x *respRaiserDoRaise) SetS(value Serious) *respRaiserDoRaise {
    x.S = &value
    return x
}

func (x *respRaiserDoRaise) IsSetB() bool {
    return x.B != nil
}

func (x *respRaiserDoRaise) IsSetF() bool {
    return x.F != nil
}

func (x *respRaiserDoRaise) IsSetS() bool {
    return x.S != nil
}

func (x *respRaiserDoRaise) writeField1(p thrift.Protocol) error {  // B
    if !x.IsSetB() {
        return nil
    }

    if err := p.WriteFieldBegin("b", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserDoRaise) writeField2(p thrift.Protocol) error {  // F
    if !x.IsSetF() {
        return nil
    }

    if err := p.WriteFieldBegin("f", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserDoRaise) writeField3(p thrift.Protocol) error {  // S
    if !x.IsSetS() {
        return nil
    }

    if err := p.WriteFieldBegin("s", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserDoRaise) readField1(p thrift.Protocol) error {  // B
    result := *NewBanal()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetB(result)
    return nil
}

func (x *respRaiserDoRaise) readField2(p thrift.Protocol) error {  // F
    result := *NewFiery()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetF(result)
    return nil
}

func (x *respRaiserDoRaise) readField3(p thrift.Protocol) error {  // S
    result := *NewSerious()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetS(result)
    return nil
}

func (x *respRaiserDoRaise) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respRaiserDoRaise.Set* methods instead or set the fields directly.
type respRaiserDoRaiseBuilder struct {
    obj *respRaiserDoRaise
}

func newRespRaiserDoRaiseBuilder() *respRaiserDoRaiseBuilder {
    return &respRaiserDoRaiseBuilder{
        obj: newRespRaiserDoRaise(),
    }
}

func (x *respRaiserDoRaiseBuilder) B(value *Banal) *respRaiserDoRaiseBuilder {
    x.obj.B = value
    return x
}

func (x *respRaiserDoRaiseBuilder) F(value *Fiery) *respRaiserDoRaiseBuilder {
    x.obj.F = value
    return x
}

func (x *respRaiserDoRaiseBuilder) S(value *Serious) *respRaiserDoRaiseBuilder {
    x.obj.S = value
    return x
}

func (x *respRaiserDoRaiseBuilder) Emit() *respRaiserDoRaise {
    var objCopy respRaiserDoRaise = *x.obj
    return &objCopy
}

func (x *respRaiserDoRaise) Exception() thrift.WritableException {
    if x.B != nil {
        return x.B
    }
    if x.F != nil {
        return x.F
    }
    if x.S != nil {
        return x.S
    }
    return nil
}

func (x *respRaiserDoRaise) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respRaiserDoRaise"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respRaiserDoRaise) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // b
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // f
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // s
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqRaiserGet200 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqRaiserGet200{}


func newReqRaiserGet200() *reqRaiserGet200 {
    return (&reqRaiserGet200{})
}

func (x *reqRaiserGet200) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqRaiserGet200.Set* methods instead or set the fields directly.
type reqRaiserGet200Builder struct {
    obj *reqRaiserGet200
}

func newReqRaiserGet200Builder() *reqRaiserGet200Builder {
    return &reqRaiserGet200Builder{
        obj: newReqRaiserGet200(),
    }
}

func (x *reqRaiserGet200Builder) Emit() *reqRaiserGet200 {
    var objCopy reqRaiserGet200 = *x.obj
    return &objCopy
}

func (x *reqRaiserGet200) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqRaiserGet200"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqRaiserGet200) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respRaiserGet200 struct {
    Value string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respRaiserGet200{}
var _ thrift.WritableResult = &respRaiserGet200{}


func newRespRaiserGet200() *respRaiserGet200 {
    return (&respRaiserGet200{})
}

func (x *respRaiserGet200) GetValueNonCompat() string {
    return x.Value
}

func (x *respRaiserGet200) GetValue() string {
    return x.Value
}

func (x *respRaiserGet200) SetValue(value string) *respRaiserGet200 {
    x.Value = value
    return x
}


func (x *respRaiserGet200) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet200) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respRaiserGet200) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respRaiserGet200.Set* methods instead or set the fields directly.
type respRaiserGet200Builder struct {
    obj *respRaiserGet200
}

func newRespRaiserGet200Builder() *respRaiserGet200Builder {
    return &respRaiserGet200Builder{
        obj: newRespRaiserGet200(),
    }
}

func (x *respRaiserGet200Builder) Value(value string) *respRaiserGet200Builder {
    x.obj.Value = value
    return x
}

func (x *respRaiserGet200Builder) Emit() *respRaiserGet200 {
    var objCopy respRaiserGet200 = *x.obj
    return &objCopy
}

func (x *respRaiserGet200) Exception() thrift.WritableException {
    return nil
}

func (x *respRaiserGet200) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respRaiserGet200"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet200) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type reqRaiserGet500 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqRaiserGet500{}


func newReqRaiserGet500() *reqRaiserGet500 {
    return (&reqRaiserGet500{})
}

func (x *reqRaiserGet500) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use reqRaiserGet500.Set* methods instead or set the fields directly.
type reqRaiserGet500Builder struct {
    obj *reqRaiserGet500
}

func newReqRaiserGet500Builder() *reqRaiserGet500Builder {
    return &reqRaiserGet500Builder{
        obj: newReqRaiserGet500(),
    }
}

func (x *reqRaiserGet500Builder) Emit() *reqRaiserGet500 {
    var objCopy reqRaiserGet500 = *x.obj
    return &objCopy
}

func (x *reqRaiserGet500) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqRaiserGet500"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqRaiserGet500) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type respRaiserGet500 struct {
    Value string `thrift:"value,0" json:"value" db:"value"`
    F *Fiery `thrift:"f,1,optional" json:"f,omitempty" db:"f"`
    B *Banal `thrift:"b,2,optional" json:"b,omitempty" db:"b"`
    S *Serious `thrift:"s,3,optional" json:"s,omitempty" db:"s"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respRaiserGet500{}
var _ thrift.WritableResult = &respRaiserGet500{}


func newRespRaiserGet500() *respRaiserGet500 {
    return (&respRaiserGet500{})
}

// Deprecated: Use newRespRaiserGet500().F instead.
var respRaiserGet500_F_DEFAULT = newRespRaiserGet500().F

// Deprecated: Use newRespRaiserGet500().B instead.
var respRaiserGet500_B_DEFAULT = newRespRaiserGet500().B

// Deprecated: Use newRespRaiserGet500().S instead.
var respRaiserGet500_S_DEFAULT = newRespRaiserGet500().S

func (x *respRaiserGet500) GetValueNonCompat() string {
    return x.Value
}

func (x *respRaiserGet500) GetValue() string {
    return x.Value
}

func (x *respRaiserGet500) GetFNonCompat() *Fiery {
    return x.F
}

func (x *respRaiserGet500) GetF() *Fiery {
    if !x.IsSetF() {
      return NewFiery()
    }

    return x.F
}

func (x *respRaiserGet500) GetBNonCompat() *Banal {
    return x.B
}

func (x *respRaiserGet500) GetB() *Banal {
    if !x.IsSetB() {
      return NewBanal()
    }

    return x.B
}

func (x *respRaiserGet500) GetSNonCompat() *Serious {
    return x.S
}

func (x *respRaiserGet500) GetS() *Serious {
    if !x.IsSetS() {
      return NewSerious()
    }

    return x.S
}

func (x *respRaiserGet500) SetValue(value string) *respRaiserGet500 {
    x.Value = value
    return x
}

func (x *respRaiserGet500) SetF(value Fiery) *respRaiserGet500 {
    x.F = &value
    return x
}

func (x *respRaiserGet500) SetB(value Banal) *respRaiserGet500 {
    x.B = &value
    return x
}

func (x *respRaiserGet500) SetS(value Serious) *respRaiserGet500 {
    x.S = &value
    return x
}


func (x *respRaiserGet500) IsSetF() bool {
    return x.F != nil
}

func (x *respRaiserGet500) IsSetB() bool {
    return x.B != nil
}

func (x *respRaiserGet500) IsSetS() bool {
    return x.S != nil
}

func (x *respRaiserGet500) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet500) writeField1(p thrift.Protocol) error {  // F
    if !x.IsSetF() {
        return nil
    }

    if err := p.WriteFieldBegin("f", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet500) writeField2(p thrift.Protocol) error {  // B
    if !x.IsSetB() {
        return nil
    }

    if err := p.WriteFieldBegin("b", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet500) writeField3(p thrift.Protocol) error {  // S
    if !x.IsSetS() {
        return nil
    }

    if err := p.WriteFieldBegin("s", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet500) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetValue(result)
    return nil
}

func (x *respRaiserGet500) readField1(p thrift.Protocol) error {  // F
    result := *NewFiery()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetF(result)
    return nil
}

func (x *respRaiserGet500) readField2(p thrift.Protocol) error {  // B
    result := *NewBanal()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetB(result)
    return nil
}

func (x *respRaiserGet500) readField3(p thrift.Protocol) error {  // S
    result := *NewSerious()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetS(result)
    return nil
}

func (x *respRaiserGet500) String() string {
    return fmt.Sprintf("%+v", x)
}


// Deprecated: Use respRaiserGet500.Set* methods instead or set the fields directly.
type respRaiserGet500Builder struct {
    obj *respRaiserGet500
}

func newRespRaiserGet500Builder() *respRaiserGet500Builder {
    return &respRaiserGet500Builder{
        obj: newRespRaiserGet500(),
    }
}

func (x *respRaiserGet500Builder) Value(value string) *respRaiserGet500Builder {
    x.obj.Value = value
    return x
}

func (x *respRaiserGet500Builder) F(value *Fiery) *respRaiserGet500Builder {
    x.obj.F = value
    return x
}

func (x *respRaiserGet500Builder) B(value *Banal) *respRaiserGet500Builder {
    x.obj.B = value
    return x
}

func (x *respRaiserGet500Builder) S(value *Serious) *respRaiserGet500Builder {
    x.obj.S = value
    return x
}

func (x *respRaiserGet500Builder) Emit() *respRaiserGet500 {
    var objCopy respRaiserGet500 = *x.obj
    return &objCopy
}

func (x *respRaiserGet500) Exception() thrift.WritableException {
    if x.F != nil {
        return x.F
    }
    if x.B != nil {
        return x.B
    }
    if x.S != nil {
        return x.S
    }
    return nil
}

func (x *respRaiserGet500) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respRaiserGet500"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respRaiserGet500) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            if err := x.readField0(p); err != nil {
                return err
            }
        case 1:  // f
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // b
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // s
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}



type RaiserProcessor struct {
    processorMap       map[string]thrift.ProcessorFunction
    functionServiceMap map[string]string
    handler            Raiser
}
// Compile time interface enforcer
var _ thrift.Processor = &RaiserProcessor{}

func (p *RaiserProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
    p.processorMap[key] = processor
}

func (p *RaiserProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *RaiserProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *RaiserProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
    return p.processorMap
}

func (p *RaiserProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func NewRaiserProcessor(handler Raiser) *RaiserProcessor {
    p := &RaiserProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunction),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("doBland", &procFuncRaiserDoBland{handler: handler})
    p.AddToProcessorMap("doRaise", &procFuncRaiserDoRaise{handler: handler})
    p.AddToProcessorMap("get200", &procFuncRaiserGet200{handler: handler})
    p.AddToProcessorMap("get500", &procFuncRaiserGet500{handler: handler})
    p.AddToFunctionServiceMap("doBland", "Raiser")
    p.AddToFunctionServiceMap("doRaise", "Raiser")
    p.AddToFunctionServiceMap("get200", "Raiser")
    p.AddToFunctionServiceMap("get500", "Raiser")

    return p
}


type procFuncRaiserDoBland struct {
    handler Raiser
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncRaiserDoBland{}

func (p *procFuncRaiserDoBland) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqRaiserDoBland()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncRaiserDoBland) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("DoBland", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncRaiserDoBland) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespRaiserDoBland()
    err := p.handler.DoBland()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing DoBland: " + err.Error(), err)
        return x, x
    }

    return result, nil
}


type procFuncRaiserDoRaise struct {
    handler Raiser
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncRaiserDoRaise{}

func (p *procFuncRaiserDoRaise) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqRaiserDoRaise()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncRaiserDoRaise) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch v := result.(type) {
    case *Banal:
        result = &respRaiserDoRaise{
            B: v,
        }
    case *Fiery:
        result = &respRaiserDoRaise{
            F: v,
        }
    case *Serious:
        result = &respRaiserDoRaise{
            S: v,
        }
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("DoRaise", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncRaiserDoRaise) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespRaiserDoRaise()
    err := p.handler.DoRaise()
    if err != nil {
        switch v := err.(type) {
        case *Banal:
            result.B = v
        case *Fiery:
            result.F = v
        case *Serious:
            result.S = v
        default:
            x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing doRaise: " + err.Error(), err)
            return x, x
        }
    }

    return result, nil
}


type procFuncRaiserGet200 struct {
    handler Raiser
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncRaiserGet200{}

func (p *procFuncRaiserGet200) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqRaiserGet200()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncRaiserGet200) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("Get200", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncRaiserGet200) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespRaiserGet200()
    retval, err := p.handler.Get200()
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Get200: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncRaiserGet500 struct {
    handler Raiser
}
// Compile time interface enforcer
var _ thrift.ProcessorFunction = &procFuncRaiserGet500{}

func (p *procFuncRaiserGet500) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqRaiserGet500()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncRaiserGet500) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch v := result.(type) {
    case *Fiery:
        result = &respRaiserGet500{
            F: v,
        }
    case *Banal:
        result = &respRaiserGet500{
            B: v,
        }
    case *Serious:
        result = &respRaiserGet500{
            S: v,
        }
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("Get500", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncRaiserGet500) Run(reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespRaiserGet500()
    retval, err := p.handler.Get500()
    if err != nil {
        switch v := err.(type) {
        case *Fiery:
            result.F = v
        case *Banal:
            result.B = v
        case *Serious:
            result.S = v
        default:
            x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing doRaise: " + err.Error(), err)
            return x, x
        }
    }

    result.Value = retval
    return result, nil
}


