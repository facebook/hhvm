// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package standard

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	thrift0 "thrift/annotation/thrift"
	java1 "thrift/annotation/java"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = thrift0.GoUnusedProtection__
var _ = java1.GoUnusedProtection__
var GoUnusedProtection__ int;

type Void int64
const (
  Void_Unused Void = 0
)

var VoidToName = map[Void]string {
  Void_Unused: "Unused",
}

var VoidToValue = map[string]Void {
  "Unused": Void_Unused,
}

var VoidNames = []string {
  "Unused",
}

var VoidValues = []Void {
  Void_Unused,
}

func (p Void) String() string {
  if v, ok := VoidToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func VoidFromString(s string) (Void, error) {
  if v, ok := VoidToValue[s]; ok {
    return v, nil
  }
  return Void(0), fmt.Errorf("not a valid Void string")
}

func VoidPtr(v Void) *Void { return &v }

//The standard Thrift protocols.
type StandardProtocol int64
const (
  StandardProtocol_Custom StandardProtocol = 0
  StandardProtocol_Binary StandardProtocol = 1
  StandardProtocol_Compact StandardProtocol = 2
  StandardProtocol_Json StandardProtocol = 3
  StandardProtocol_SimpleJson StandardProtocol = 4
)

var StandardProtocolToName = map[StandardProtocol]string {
  StandardProtocol_Custom: "Custom",
  StandardProtocol_Binary: "Binary",
  StandardProtocol_Compact: "Compact",
  StandardProtocol_Json: "Json",
  StandardProtocol_SimpleJson: "SimpleJson",
}

var StandardProtocolToValue = map[string]StandardProtocol {
  "Custom": StandardProtocol_Custom,
  "Binary": StandardProtocol_Binary,
  "Compact": StandardProtocol_Compact,
  "Json": StandardProtocol_Json,
  "SimpleJson": StandardProtocol_SimpleJson,
}

var StandardProtocolNames = []string {
  "Custom",
  "Binary",
  "Compact",
  "Json",
  "SimpleJson",
}

var StandardProtocolValues = []StandardProtocol {
  StandardProtocol_Custom,
  StandardProtocol_Binary,
  StandardProtocol_Compact,
  StandardProtocol_Json,
  StandardProtocol_SimpleJson,
}

func (p StandardProtocol) String() string {
  if v, ok := StandardProtocolToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func StandardProtocolFromString(s string) (StandardProtocol, error) {
  if v, ok := StandardProtocolToValue[s]; ok {
    return v, nil
  }
  return StandardProtocol(0), fmt.Errorf("not a valid StandardProtocol string")
}

func StandardProtocolPtr(v StandardProtocol) *StandardProtocol { return &v }

//Typedef for binary data which can be represented as a string of 8-bit bytes.
//
//Each language can map this type into a customized memory efficient object.
type ByteString = []byte

func ByteStringPtr(v ByteString) *ByteString { return &v }

//Typedef for binary data.
//
//Each language can map this type into a customized memory efficient object
//May be used for zero-copy slice of data.
type ByteBuffer = []byte

func ByteBufferPtr(v ByteBuffer) *ByteBuffer { return &v }

//A (scheme-less) URI.
//
//Of the form described in RFC 3986, but with every component optional.
//
//See rfc3986
type Uri = string

func UriPtr(v Uri) *Uri { return &v }

// The uri of an IDL defined type.
// 
// Attributes:
//  - Uri: The unique Thrift URI for this type.
//  - TypeHashPrefixSha2_256: A prefix of the SHA2-256 hash of the URI.
type TypeUri struct {
  Uri *Uri `thrift:"uri,1,optional" db:"uri" json:"uri,omitempty"`
  TypeHashPrefixSha2_256 ByteString `thrift:"typeHashPrefixSha2_256,2,optional" db:"typeHashPrefixSha2_256" json:"typeHashPrefixSha2_256,omitempty"`
}

func NewTypeUri() *TypeUri {
  return &TypeUri{}
}

var TypeUri_Uri_DEFAULT Uri
func (p *TypeUri) GetUri() Uri {
  if !p.IsSetUri() {
    return TypeUri_Uri_DEFAULT
  }
  return *p.Uri
}
var TypeUri_TypeHashPrefixSha2_256_DEFAULT ByteString

func (p *TypeUri) GetTypeHashPrefixSha2_256() ByteString {
  return p.TypeHashPrefixSha2_256
}
func (p *TypeUri) CountSetFieldsTypeUri() int {
  count := 0
  if (p.IsSetUri()) {
    count++
  }
  if (p.IsSetTypeHashPrefixSha2_256()) {
    count++
  }
  return count

}

func (p *TypeUri) IsSetUri() bool {
  return p != nil && p.Uri != nil
}

func (p *TypeUri) IsSetTypeHashPrefixSha2_256() bool {
  return p != nil && p.TypeHashPrefixSha2_256 != nil
}

type TypeUriBuilder struct {
  obj *TypeUri
}

func NewTypeUriBuilder() *TypeUriBuilder{
  return &TypeUriBuilder{
    obj: NewTypeUri(),
  }
}

func (p TypeUriBuilder) Emit() *TypeUri{
  return &TypeUri{
    Uri: p.obj.Uri,
    TypeHashPrefixSha2_256: p.obj.TypeHashPrefixSha2_256,
  }
}

func (t *TypeUriBuilder) Uri(uri *Uri) *TypeUriBuilder {
  t.obj.Uri = uri
  return t
}

func (t *TypeUriBuilder) TypeHashPrefixSha2_256(typeHashPrefixSha2_256 ByteString) *TypeUriBuilder {
  t.obj.TypeHashPrefixSha2_256 = typeHashPrefixSha2_256
  return t
}

func (t *TypeUri) SetUri(uri *Uri) *TypeUri {
  t.Uri = uri
  return t
}

func (t *TypeUri) SetTypeHashPrefixSha2_256(typeHashPrefixSha2_256 ByteString) *TypeUri {
  t.TypeHashPrefixSha2_256 = typeHashPrefixSha2_256
  return t
}

func (p *TypeUri) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TypeUri)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := Uri(v)
    p.Uri = &temp
  }
  return nil
}

func (p *TypeUri)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := ByteString(v)
    p.TypeHashPrefixSha2_256 = temp
  }
  return nil
}

func (p *TypeUri) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsTypeUri(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("TypeUri"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TypeUri) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetUri() {
    if err := oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uri: ", p), err) }
    if err := oprot.WriteString(string(*p.Uri)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.uri (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uri: ", p), err) }
  }
  return err
}

func (p *TypeUri) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTypeHashPrefixSha2_256() {
    if err := oprot.WriteFieldBegin("typeHashPrefixSha2_256", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:typeHashPrefixSha2_256: ", p), err) }
    if err := oprot.WriteBinary(p.TypeHashPrefixSha2_256); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.typeHashPrefixSha2_256 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:typeHashPrefixSha2_256: ", p), err) }
  }
  return err
}

func (p *TypeUri) String() string {
  if p == nil {
    return "<nil>"
  }

  var uriVal string
  if p.Uri == nil {
    uriVal = "<nil>"
  } else {
    uriVal = fmt.Sprintf("%v", *p.Uri)
  }
  typeHashPrefixSha2_256Val := fmt.Sprintf("%v", p.TypeHashPrefixSha2_256)
  return fmt.Sprintf("TypeUri({Uri:%s TypeHashPrefixSha2_256:%s})", uriVal, typeHashPrefixSha2_256Val)
}

// Uniquely identifies a Thrift type.
// 
// Attributes:
//  - BoolType: True(1) or False(0)
//  - ByteType: 8-bit signed integer
//  - I16Type: 16-bit signed integer
//  - I32Type: 32-bit signed integer
//  - I64Type: 64-bit signed integer
//  - FloatType: 32-bit floating point
//  - DoubleType: 64-bit floating point
//  - StringType: UTF-8 encoded string
//  - BinaryType: Arbitrary byte string
//  - EnumType: 32-bit signed integer, with named values.
//  - TypedefType: `typedef` definition
//  - StructType: `struct` definition
//  - UnionType: `union` definition
//  - ExceptionType: `exception` definition
//  - ListType: `list<V>` definition
//  - SetType: `set<K>` definition
//  - MapType: `map<K, V>` definition
type TypeName struct {
  BoolType *Void `thrift:"boolType,1,optional" db:"boolType" json:"boolType,omitempty"`
  ByteType *Void `thrift:"byteType,2,optional" db:"byteType" json:"byteType,omitempty"`
  I16Type *Void `thrift:"i16Type,3,optional" db:"i16Type" json:"i16Type,omitempty"`
  I32Type *Void `thrift:"i32Type,4,optional" db:"i32Type" json:"i32Type,omitempty"`
  I64Type *Void `thrift:"i64Type,5,optional" db:"i64Type" json:"i64Type,omitempty"`
  FloatType *Void `thrift:"floatType,6,optional" db:"floatType" json:"floatType,omitempty"`
  DoubleType *Void `thrift:"doubleType,7,optional" db:"doubleType" json:"doubleType,omitempty"`
  StringType *Void `thrift:"stringType,8,optional" db:"stringType" json:"stringType,omitempty"`
  BinaryType *Void `thrift:"binaryType,9,optional" db:"binaryType" json:"binaryType,omitempty"`
  EnumType *TypeUri `thrift:"enumType,10,optional" db:"enumType" json:"enumType,omitempty"`
  StructType *TypeUri `thrift:"structType,11,optional" db:"structType" json:"structType,omitempty"`
  UnionType *TypeUri `thrift:"unionType,12,optional" db:"unionType" json:"unionType,omitempty"`
  ExceptionType *TypeUri `thrift:"exceptionType,13,optional" db:"exceptionType" json:"exceptionType,omitempty"`
  ListType *Void `thrift:"listType,14,optional" db:"listType" json:"listType,omitempty"`
  SetType *Void `thrift:"setType,15,optional" db:"setType" json:"setType,omitempty"`
  MapType *Void `thrift:"mapType,16,optional" db:"mapType" json:"mapType,omitempty"`
  TypedefType *TypeUri `thrift:"typedefType,17,optional" db:"typedefType" json:"typedefType,omitempty"`
}

func NewTypeName() *TypeName {
  return &TypeName{}
}

var TypeName_BoolType_DEFAULT Void
func (p *TypeName) GetBoolType() Void {
  if !p.IsSetBoolType() {
    return TypeName_BoolType_DEFAULT
  }
  return *p.BoolType
}
var TypeName_ByteType_DEFAULT Void
func (p *TypeName) GetByteType() Void {
  if !p.IsSetByteType() {
    return TypeName_ByteType_DEFAULT
  }
  return *p.ByteType
}
var TypeName_I16Type_DEFAULT Void
func (p *TypeName) GetI16Type() Void {
  if !p.IsSetI16Type() {
    return TypeName_I16Type_DEFAULT
  }
  return *p.I16Type
}
var TypeName_I32Type_DEFAULT Void
func (p *TypeName) GetI32Type() Void {
  if !p.IsSetI32Type() {
    return TypeName_I32Type_DEFAULT
  }
  return *p.I32Type
}
var TypeName_I64Type_DEFAULT Void
func (p *TypeName) GetI64Type() Void {
  if !p.IsSetI64Type() {
    return TypeName_I64Type_DEFAULT
  }
  return *p.I64Type
}
var TypeName_FloatType_DEFAULT Void
func (p *TypeName) GetFloatType() Void {
  if !p.IsSetFloatType() {
    return TypeName_FloatType_DEFAULT
  }
  return *p.FloatType
}
var TypeName_DoubleType_DEFAULT Void
func (p *TypeName) GetDoubleType() Void {
  if !p.IsSetDoubleType() {
    return TypeName_DoubleType_DEFAULT
  }
  return *p.DoubleType
}
var TypeName_StringType_DEFAULT Void
func (p *TypeName) GetStringType() Void {
  if !p.IsSetStringType() {
    return TypeName_StringType_DEFAULT
  }
  return *p.StringType
}
var TypeName_BinaryType_DEFAULT Void
func (p *TypeName) GetBinaryType() Void {
  if !p.IsSetBinaryType() {
    return TypeName_BinaryType_DEFAULT
  }
  return *p.BinaryType
}
var TypeName_EnumType_DEFAULT *TypeUri
func (p *TypeName) GetEnumType() *TypeUri {
  if !p.IsSetEnumType() {
    return TypeName_EnumType_DEFAULT
  }
  return p.EnumType
}
func (p *TypeName) DefaultGetEnumType() *TypeUri {
  if !p.IsSetEnumType() {
    return NewTypeUri()
  }
  return p.EnumType
}
var TypeName_TypedefType_DEFAULT *TypeUri
func (p *TypeName) GetTypedefType() *TypeUri {
  if !p.IsSetTypedefType() {
    return TypeName_TypedefType_DEFAULT
  }
  return p.TypedefType
}
func (p *TypeName) DefaultGetTypedefType() *TypeUri {
  if !p.IsSetTypedefType() {
    return NewTypeUri()
  }
  return p.TypedefType
}
var TypeName_StructType_DEFAULT *TypeUri
func (p *TypeName) GetStructType() *TypeUri {
  if !p.IsSetStructType() {
    return TypeName_StructType_DEFAULT
  }
  return p.StructType
}
func (p *TypeName) DefaultGetStructType() *TypeUri {
  if !p.IsSetStructType() {
    return NewTypeUri()
  }
  return p.StructType
}
var TypeName_UnionType_DEFAULT *TypeUri
func (p *TypeName) GetUnionType() *TypeUri {
  if !p.IsSetUnionType() {
    return TypeName_UnionType_DEFAULT
  }
  return p.UnionType
}
func (p *TypeName) DefaultGetUnionType() *TypeUri {
  if !p.IsSetUnionType() {
    return NewTypeUri()
  }
  return p.UnionType
}
var TypeName_ExceptionType_DEFAULT *TypeUri
func (p *TypeName) GetExceptionType() *TypeUri {
  if !p.IsSetExceptionType() {
    return TypeName_ExceptionType_DEFAULT
  }
  return p.ExceptionType
}
func (p *TypeName) DefaultGetExceptionType() *TypeUri {
  if !p.IsSetExceptionType() {
    return NewTypeUri()
  }
  return p.ExceptionType
}
var TypeName_ListType_DEFAULT Void
func (p *TypeName) GetListType() Void {
  if !p.IsSetListType() {
    return TypeName_ListType_DEFAULT
  }
  return *p.ListType
}
var TypeName_SetType_DEFAULT Void
func (p *TypeName) GetSetType() Void {
  if !p.IsSetSetType() {
    return TypeName_SetType_DEFAULT
  }
  return *p.SetType
}
var TypeName_MapType_DEFAULT Void
func (p *TypeName) GetMapType() Void {
  if !p.IsSetMapType() {
    return TypeName_MapType_DEFAULT
  }
  return *p.MapType
}
func (p *TypeName) CountSetFieldsTypeName() int {
  count := 0
  if (p.IsSetBoolType()) {
    count++
  }
  if (p.IsSetByteType()) {
    count++
  }
  if (p.IsSetI16Type()) {
    count++
  }
  if (p.IsSetI32Type()) {
    count++
  }
  if (p.IsSetI64Type()) {
    count++
  }
  if (p.IsSetFloatType()) {
    count++
  }
  if (p.IsSetDoubleType()) {
    count++
  }
  if (p.IsSetStringType()) {
    count++
  }
  if (p.IsSetBinaryType()) {
    count++
  }
  if (p.IsSetEnumType()) {
    count++
  }
  if (p.IsSetTypedefType()) {
    count++
  }
  if (p.IsSetStructType()) {
    count++
  }
  if (p.IsSetUnionType()) {
    count++
  }
  if (p.IsSetExceptionType()) {
    count++
  }
  if (p.IsSetListType()) {
    count++
  }
  if (p.IsSetSetType()) {
    count++
  }
  if (p.IsSetMapType()) {
    count++
  }
  return count

}

func (p *TypeName) IsSetBoolType() bool {
  return p != nil && p.BoolType != nil
}

func (p *TypeName) IsSetByteType() bool {
  return p != nil && p.ByteType != nil
}

func (p *TypeName) IsSetI16Type() bool {
  return p != nil && p.I16Type != nil
}

func (p *TypeName) IsSetI32Type() bool {
  return p != nil && p.I32Type != nil
}

func (p *TypeName) IsSetI64Type() bool {
  return p != nil && p.I64Type != nil
}

func (p *TypeName) IsSetFloatType() bool {
  return p != nil && p.FloatType != nil
}

func (p *TypeName) IsSetDoubleType() bool {
  return p != nil && p.DoubleType != nil
}

func (p *TypeName) IsSetStringType() bool {
  return p != nil && p.StringType != nil
}

func (p *TypeName) IsSetBinaryType() bool {
  return p != nil && p.BinaryType != nil
}

func (p *TypeName) IsSetEnumType() bool {
  return p != nil && p.EnumType != nil
}

func (p *TypeName) IsSetTypedefType() bool {
  return p != nil && p.TypedefType != nil
}

func (p *TypeName) IsSetStructType() bool {
  return p != nil && p.StructType != nil
}

func (p *TypeName) IsSetUnionType() bool {
  return p != nil && p.UnionType != nil
}

func (p *TypeName) IsSetExceptionType() bool {
  return p != nil && p.ExceptionType != nil
}

func (p *TypeName) IsSetListType() bool {
  return p != nil && p.ListType != nil
}

func (p *TypeName) IsSetSetType() bool {
  return p != nil && p.SetType != nil
}

func (p *TypeName) IsSetMapType() bool {
  return p != nil && p.MapType != nil
}

type TypeNameBuilder struct {
  obj *TypeName
}

func NewTypeNameBuilder() *TypeNameBuilder{
  return &TypeNameBuilder{
    obj: NewTypeName(),
  }
}

func (p TypeNameBuilder) Emit() *TypeName{
  return &TypeName{
    BoolType: p.obj.BoolType,
    ByteType: p.obj.ByteType,
    I16Type: p.obj.I16Type,
    I32Type: p.obj.I32Type,
    I64Type: p.obj.I64Type,
    FloatType: p.obj.FloatType,
    DoubleType: p.obj.DoubleType,
    StringType: p.obj.StringType,
    BinaryType: p.obj.BinaryType,
    EnumType: p.obj.EnumType,
    TypedefType: p.obj.TypedefType,
    StructType: p.obj.StructType,
    UnionType: p.obj.UnionType,
    ExceptionType: p.obj.ExceptionType,
    ListType: p.obj.ListType,
    SetType: p.obj.SetType,
    MapType: p.obj.MapType,
  }
}

func (t *TypeNameBuilder) BoolType(boolType *Void) *TypeNameBuilder {
  t.obj.BoolType = boolType
  return t
}

func (t *TypeNameBuilder) ByteType(byteType *Void) *TypeNameBuilder {
  t.obj.ByteType = byteType
  return t
}

func (t *TypeNameBuilder) I16Type(i16Type *Void) *TypeNameBuilder {
  t.obj.I16Type = i16Type
  return t
}

func (t *TypeNameBuilder) I32Type(i32Type *Void) *TypeNameBuilder {
  t.obj.I32Type = i32Type
  return t
}

func (t *TypeNameBuilder) I64Type(i64Type *Void) *TypeNameBuilder {
  t.obj.I64Type = i64Type
  return t
}

func (t *TypeNameBuilder) FloatType(floatType *Void) *TypeNameBuilder {
  t.obj.FloatType = floatType
  return t
}

func (t *TypeNameBuilder) DoubleType(doubleType *Void) *TypeNameBuilder {
  t.obj.DoubleType = doubleType
  return t
}

func (t *TypeNameBuilder) StringType(stringType *Void) *TypeNameBuilder {
  t.obj.StringType = stringType
  return t
}

func (t *TypeNameBuilder) BinaryType(binaryType *Void) *TypeNameBuilder {
  t.obj.BinaryType = binaryType
  return t
}

func (t *TypeNameBuilder) EnumType(enumType *TypeUri) *TypeNameBuilder {
  t.obj.EnumType = enumType
  return t
}

func (t *TypeNameBuilder) TypedefType(typedefType *TypeUri) *TypeNameBuilder {
  t.obj.TypedefType = typedefType
  return t
}

func (t *TypeNameBuilder) StructType(structType *TypeUri) *TypeNameBuilder {
  t.obj.StructType = structType
  return t
}

func (t *TypeNameBuilder) UnionType(unionType *TypeUri) *TypeNameBuilder {
  t.obj.UnionType = unionType
  return t
}

func (t *TypeNameBuilder) ExceptionType(exceptionType *TypeUri) *TypeNameBuilder {
  t.obj.ExceptionType = exceptionType
  return t
}

func (t *TypeNameBuilder) ListType(listType *Void) *TypeNameBuilder {
  t.obj.ListType = listType
  return t
}

func (t *TypeNameBuilder) SetType(setType *Void) *TypeNameBuilder {
  t.obj.SetType = setType
  return t
}

func (t *TypeNameBuilder) MapType(mapType *Void) *TypeNameBuilder {
  t.obj.MapType = mapType
  return t
}

func (t *TypeName) SetBoolType(boolType *Void) *TypeName {
  t.BoolType = boolType
  return t
}

func (t *TypeName) SetByteType(byteType *Void) *TypeName {
  t.ByteType = byteType
  return t
}

func (t *TypeName) SetI16Type(i16Type *Void) *TypeName {
  t.I16Type = i16Type
  return t
}

func (t *TypeName) SetI32Type(i32Type *Void) *TypeName {
  t.I32Type = i32Type
  return t
}

func (t *TypeName) SetI64Type(i64Type *Void) *TypeName {
  t.I64Type = i64Type
  return t
}

func (t *TypeName) SetFloatType(floatType *Void) *TypeName {
  t.FloatType = floatType
  return t
}

func (t *TypeName) SetDoubleType(doubleType *Void) *TypeName {
  t.DoubleType = doubleType
  return t
}

func (t *TypeName) SetStringType(stringType *Void) *TypeName {
  t.StringType = stringType
  return t
}

func (t *TypeName) SetBinaryType(binaryType *Void) *TypeName {
  t.BinaryType = binaryType
  return t
}

func (t *TypeName) SetEnumType(enumType *TypeUri) *TypeName {
  t.EnumType = enumType
  return t
}

func (t *TypeName) SetTypedefType(typedefType *TypeUri) *TypeName {
  t.TypedefType = typedefType
  return t
}

func (t *TypeName) SetStructType(structType *TypeUri) *TypeName {
  t.StructType = structType
  return t
}

func (t *TypeName) SetUnionType(unionType *TypeUri) *TypeName {
  t.UnionType = unionType
  return t
}

func (t *TypeName) SetExceptionType(exceptionType *TypeUri) *TypeName {
  t.ExceptionType = exceptionType
  return t
}

func (t *TypeName) SetListType(listType *Void) *TypeName {
  t.ListType = listType
  return t
}

func (t *TypeName) SetSetType(setType *Void) *TypeName {
  t.SetType = setType
  return t
}

func (t *TypeName) SetMapType(mapType *Void) *TypeName {
  t.MapType = mapType
  return t
}

func (p *TypeName) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TypeName)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := Void(v)
    p.BoolType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := Void(v)
    p.ByteType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := Void(v)
    p.I16Type = &temp
  }
  return nil
}

func (p *TypeName)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := Void(v)
    p.I32Type = &temp
  }
  return nil
}

func (p *TypeName)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := Void(v)
    p.I64Type = &temp
  }
  return nil
}

func (p *TypeName)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    temp := Void(v)
    p.FloatType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    temp := Void(v)
    p.DoubleType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    temp := Void(v)
    p.StringType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    temp := Void(v)
    p.BinaryType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField10(iprot thrift.Protocol) error {
  p.EnumType = NewTypeUri()
  if err := p.EnumType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnumType), err)
  }
  return nil
}

func (p *TypeName)  ReadField17(iprot thrift.Protocol) error {
  p.TypedefType = NewTypeUri()
  if err := p.TypedefType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TypedefType), err)
  }
  return nil
}

func (p *TypeName)  ReadField11(iprot thrift.Protocol) error {
  p.StructType = NewTypeUri()
  if err := p.StructType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructType), err)
  }
  return nil
}

func (p *TypeName)  ReadField12(iprot thrift.Protocol) error {
  p.UnionType = NewTypeUri()
  if err := p.UnionType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionType), err)
  }
  return nil
}

func (p *TypeName)  ReadField13(iprot thrift.Protocol) error {
  p.ExceptionType = NewTypeUri()
  if err := p.ExceptionType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionType), err)
  }
  return nil
}

func (p *TypeName)  ReadField14(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 14: ", err)
  } else {
    temp := Void(v)
    p.ListType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField15(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 15: ", err)
  } else {
    temp := Void(v)
    p.SetType = &temp
  }
  return nil
}

func (p *TypeName)  ReadField16(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 16: ", err)
  } else {
    temp := Void(v)
    p.MapType = &temp
  }
  return nil
}

func (p *TypeName) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsTypeName(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("TypeName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := p.writeField16(oprot); err != nil { return err }
  if err := p.writeField17(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TypeName) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetBoolType() {
    if err := oprot.WriteFieldBegin("boolType", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BoolType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolType (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetByteType() {
    if err := oprot.WriteFieldBegin("byteType", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ByteType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.byteType (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetI16Type() {
    if err := oprot.WriteFieldBegin("i16Type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I16Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i16Type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Type: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetI32Type() {
    if err := oprot.WriteFieldBegin("i32Type", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I32Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i32Type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Type: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetI64Type() {
    if err := oprot.WriteFieldBegin("i64Type", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.I64Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.i64Type (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Type: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetFloatType() {
    if err := oprot.WriteFieldBegin("floatType", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FloatType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.floatType (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetDoubleType() {
    if err := oprot.WriteFieldBegin("doubleType", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DoubleType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleType (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetStringType() {
    if err := oprot.WriteFieldBegin("stringType", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.StringType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringType (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetBinaryType() {
    if err := oprot.WriteFieldBegin("binaryType", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BinaryType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.binaryType (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField10(oprot thrift.Protocol) (err error) {
  if p.IsSetEnumType() {
    if err := oprot.WriteFieldBegin("enumType", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:enumType: ", p), err) }
    if err := p.EnumType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnumType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:enumType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField11(oprot thrift.Protocol) (err error) {
  if p.IsSetStructType() {
    if err := oprot.WriteFieldBegin("structType", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:structType: ", p), err) }
    if err := p.StructType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:structType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField12(oprot thrift.Protocol) (err error) {
  if p.IsSetUnionType() {
    if err := oprot.WriteFieldBegin("unionType", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:unionType: ", p), err) }
    if err := p.UnionType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:unionType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField13(oprot thrift.Protocol) (err error) {
  if p.IsSetExceptionType() {
    if err := oprot.WriteFieldBegin("exceptionType", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:exceptionType: ", p), err) }
    if err := p.ExceptionType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:exceptionType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField14(oprot thrift.Protocol) (err error) {
  if p.IsSetListType() {
    if err := oprot.WriteFieldBegin("listType", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:listType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ListType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.listType (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:listType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField15(oprot thrift.Protocol) (err error) {
  if p.IsSetSetType() {
    if err := oprot.WriteFieldBegin("setType", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:setType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SetType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.setType (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:setType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField16(oprot thrift.Protocol) (err error) {
  if p.IsSetMapType() {
    if err := oprot.WriteFieldBegin("mapType", thrift.I32, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:mapType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MapType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mapType (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:mapType: ", p), err) }
  }
  return err
}

func (p *TypeName) writeField17(oprot thrift.Protocol) (err error) {
  if p.IsSetTypedefType() {
    if err := oprot.WriteFieldBegin("typedefType", thrift.STRUCT, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:typedefType: ", p), err) }
    if err := p.TypedefType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TypedefType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:typedefType: ", p), err) }
  }
  return err
}

func (p *TypeName) String() string {
  if p == nil {
    return "<nil>"
  }

  var boolTypeVal string
  if p.BoolType == nil {
    boolTypeVal = "<nil>"
  } else {
    boolTypeVal = fmt.Sprintf("%v", *p.BoolType)
  }
  var byteTypeVal string
  if p.ByteType == nil {
    byteTypeVal = "<nil>"
  } else {
    byteTypeVal = fmt.Sprintf("%v", *p.ByteType)
  }
  var i16TypeVal string
  if p.I16Type == nil {
    i16TypeVal = "<nil>"
  } else {
    i16TypeVal = fmt.Sprintf("%v", *p.I16Type)
  }
  var i32TypeVal string
  if p.I32Type == nil {
    i32TypeVal = "<nil>"
  } else {
    i32TypeVal = fmt.Sprintf("%v", *p.I32Type)
  }
  var i64TypeVal string
  if p.I64Type == nil {
    i64TypeVal = "<nil>"
  } else {
    i64TypeVal = fmt.Sprintf("%v", *p.I64Type)
  }
  var floatTypeVal string
  if p.FloatType == nil {
    floatTypeVal = "<nil>"
  } else {
    floatTypeVal = fmt.Sprintf("%v", *p.FloatType)
  }
  var doubleTypeVal string
  if p.DoubleType == nil {
    doubleTypeVal = "<nil>"
  } else {
    doubleTypeVal = fmt.Sprintf("%v", *p.DoubleType)
  }
  var stringTypeVal string
  if p.StringType == nil {
    stringTypeVal = "<nil>"
  } else {
    stringTypeVal = fmt.Sprintf("%v", *p.StringType)
  }
  var binaryTypeVal string
  if p.BinaryType == nil {
    binaryTypeVal = "<nil>"
  } else {
    binaryTypeVal = fmt.Sprintf("%v", *p.BinaryType)
  }
  var enumTypeVal string
  if p.EnumType == nil {
    enumTypeVal = "<nil>"
  } else {
    enumTypeVal = fmt.Sprintf("%v", p.EnumType)
  }
  var structTypeVal string
  if p.StructType == nil {
    structTypeVal = "<nil>"
  } else {
    structTypeVal = fmt.Sprintf("%v", p.StructType)
  }
  var unionTypeVal string
  if p.UnionType == nil {
    unionTypeVal = "<nil>"
  } else {
    unionTypeVal = fmt.Sprintf("%v", p.UnionType)
  }
  var exceptionTypeVal string
  if p.ExceptionType == nil {
    exceptionTypeVal = "<nil>"
  } else {
    exceptionTypeVal = fmt.Sprintf("%v", p.ExceptionType)
  }
  var listTypeVal string
  if p.ListType == nil {
    listTypeVal = "<nil>"
  } else {
    listTypeVal = fmt.Sprintf("%v", *p.ListType)
  }
  var setTypeVal string
  if p.SetType == nil {
    setTypeVal = "<nil>"
  } else {
    setTypeVal = fmt.Sprintf("%v", *p.SetType)
  }
  var mapTypeVal string
  if p.MapType == nil {
    mapTypeVal = "<nil>"
  } else {
    mapTypeVal = fmt.Sprintf("%v", *p.MapType)
  }
  var typedefTypeVal string
  if p.TypedefType == nil {
    typedefTypeVal = "<nil>"
  } else {
    typedefTypeVal = fmt.Sprintf("%v", p.TypedefType)
  }
  return fmt.Sprintf("TypeName({BoolType:%s ByteType:%s I16Type:%s I32Type:%s I64Type:%s FloatType:%s DoubleType:%s StringType:%s BinaryType:%s EnumType:%s StructType:%s UnionType:%s ExceptionType:%s ListType:%s SetType:%s MapType:%s TypedefType:%s})", boolTypeVal, byteTypeVal, i16TypeVal, i32TypeVal, i64TypeVal, floatTypeVal, doubleTypeVal, stringTypeVal, binaryTypeVal, enumTypeVal, structTypeVal, unionTypeVal, exceptionTypeVal, listTypeVal, setTypeVal, mapTypeVal, typedefTypeVal)
}

