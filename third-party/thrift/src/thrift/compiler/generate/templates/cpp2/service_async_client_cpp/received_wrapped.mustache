{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{^function:cpp_recv_arg?}}{{!
}}folly::exception_wrapper {{> service_common/client_class_name}}::recv_wrapped_{{function:cpp_name}}(::apache::thrift::ClientReceiveState& state) {
{{/function:cpp_recv_arg?}}
{{#function:cpp_recv_arg?}}
folly::exception_wrapper {{> service_common/client_class_name}}::recv_wrapped_{{function:cpp_name}}({{> types/return_type_client_no_handle}}& _return, ::apache::thrift::ClientReceiveState& state) {
{{/function:cpp_recv_arg?}}
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.hasResponseBuffer()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = ::{{service:qualified_namespace}}::{{service:parent_service_cpp_name}}_{{function:prefixed_name}}_presult;
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      {{#function:sink?}}
      return apache::thrift::detail::ac::recv_wrapped<result, apache::thrift::BinaryProtocolWriter>(
          &reader, state{{#function:cpp_recv_arg?}}, state.extractSink(), _return{{/function:cpp_recv_arg?}});
      {{/function:sink?}}
      {{^function:sink?}}
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state{{#function:cpp_recv_arg?}}, _return{{/function:cpp_recv_arg?}});
      {{/function:sink?}}
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      {{#function:sink?}}
      return apache::thrift::detail::ac::recv_wrapped<result, apache::thrift::CompactProtocolWriter>(
          &reader, state{{#function:cpp_recv_arg?}}, state.extractSink(), _return{{/function:cpp_recv_arg?}});
      {{/function:sink?}}
      {{^function:sink?}}
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state{{#function:cpp_recv_arg?}}, _return{{/function:cpp_recv_arg?}});
      {{/function:sink?}}
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}
