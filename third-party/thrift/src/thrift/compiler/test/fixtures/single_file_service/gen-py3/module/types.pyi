#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools
import thrift.py3.stream


__property__ = property


class Foo(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        value: bool
        pass

    value: Final[_typing.Optional[int]] = ...

    def __init__(
        self, *,
        value: _typing.Optional[int]=None
    ) -> None: ...

    def __call__(
        self, *,
        value: _typing.Union[int, '__NotSet', None]=NOTSET
    ) -> Foo: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Foo'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'Foo') -> bool: ...
    def __gt__(self, other: 'Foo') -> bool: ...
    def __le__(self, other: 'Foo') -> bool: ...
    def __ge__(self, other: 'Foo') -> bool: ...

    def _to_python(self) -> "module.thrift_types.Foo": ...   # type: ignore
    def _to_py3(self) -> Foo: ...
    def _to_py_deprecated(self) -> "module.ttypes.Foo": ...   # type: ignore


class ClientBufferedStream__i32(thrift.py3.stream.ClientBufferedStream[int]):
    def __aiter__(self) -> _typing.AsyncIterator[int]: ...
    async def __anext__(self) -> int: ...

class ServerStream__i32(thrift.py3.stream.ServerStream[int]):
    pass

class ServerPublisher_cint32_t(thrift.py3.stream.ServerPublisher):
    def complete(self) -> None: ...
    def send(self, item: cint32_t) -> None: ...

