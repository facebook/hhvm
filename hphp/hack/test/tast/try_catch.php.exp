[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([11:10-21], "\\might_throw");
      fd_fun =
      { f_span = [11:1-32]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((void), (Some ([11:25-29], (Hprim Tvoid)))); 
        f_params = []; f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
        f_fun_kind = FSync; f_user_attributes = []; f_external = false;
        f_doc_comment =
        (Some ([2:1-10:4],
               "/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the \"hack\" directory of this source tree.\n *\n *\n */"))
        };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([13:10-40], "\\terminal_catch_can_do_whatever");
       fd_fun =
       { f_span = [13:1-31:2]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_ret = ((int), (Some ([13:44-47], (Hprim Tint)))); 
         f_params = []; f_ctxs = None; f_unsafe_ctxs = None;
         f_body =
         { fb_ast =
           [([14:3-11], (Expr ((int), [14:3-10], (Binop { bop = (Eq None); lhs = ((int), [14:3-5], (Lvar ([14:3-5], $a))); rhs = ((int), [14:8-10], (Int "23")) }))));
             ([15:3-28:4],
              (Try (
                 [([16:5-14], (Expr ((int), [16:5-13], (Binop { bop = (Eq None); lhs = ((int), [16:5-7], (Lvar ([16:5-7], $a))); rhs = ((int), [16:10-13], (Int "456")) }))));
                   ([17:5-19], (Expr ((void), [17:5-18], (Call ((((function(): void)), [17:5-16], (Id ([17:5-16], "\\might_throw"))), [], [], None)))))],
                 [(([18:12-25], "\\YourException"), ([18:26-28], $e), [([19:5-15], (Return (Some ((int), [19:12-14], (Lvar ([19:12-14], $a))))))]);
                   (([20:12-23], "\\MyException"), ([20:24-26], $e),
                    [([22:5-17], (Expr ((string), [22:5-16], (Binop { bop = (Eq None); lhs = ((string), [22:5-7], (Lvar ([22:5-7], $a))); rhs = ((string), [22:10-16], (String "duck")) }))));
                      ([23:5-18], (Return (Some ((int), [23:12-17], (Int "23904")))))]);
                   (([24:12-21], "\\Exception"), ([24:22-24], $e), [([25:5-15], (Return (Some ((int), [25:12-14], (Lvar ([25:12-14], $a))))))])],
                 [([27:5-12], (Expr ((int), [27:5-11], (Binop { bop = (Eq None); lhs = ((int), [27:5-7], (Lvar ([27:5-7], $a))); rhs = ((int), [27:10-11], (Int "4")) }))))])));
             ([30:3-13], (Return (Some ((int), [30:10-12], (Lvar ([30:10-12], $a))))))]
           };
         f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
         f_doc_comment = None };
       fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] });
  (Class
     { c_span = [33:1-41]; c_annotation = (); c_mode = Mstrict; c_final = false; 
       c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
       c_name = ([33:7-20], "\\YourException"); c_tparams = []; c_extends = [([33:29-38], (Happly (([33:29-38], "\\Exception"), [])))]; 
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = []; 
       c_implements = []; c_where_constraints = []; c_consts = []; c_typeconsts = []; 
       c_vars = []; c_methods = []; c_xhp_children = []; c_xhp_attrs = [];
       c_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       c_user_attributes = []; c_file_attributes = []; c_docs_url = None; 
       c_enum = None; c_doc_comment = None; c_emit_id = None; c_internal = false; 
       c_module = None });
  (Class
     { c_span = [34:1-39]; c_annotation = (); c_mode = Mstrict; c_final = false; 
       c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
       c_name = ([34:7-18], "\\MyException"); c_tparams = []; c_extends = [([34:27-36], (Happly (([34:27-36], "\\Exception"), [])))]; 
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = []; 
       c_implements = []; c_where_constraints = []; c_consts = []; c_typeconsts = []; 
       c_vars = []; c_methods = []; c_xhp_children = []; c_xhp_attrs = [];
       c_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
       c_user_attributes = []; c_file_attributes = []; c_docs_url = None; 
       c_enum = None; c_doc_comment = None; c_emit_id = None; c_internal = false; 
       c_module = None })