Errors:
  [4:10-13] Was expecting a return type hint
[(Fun
    { fd_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([4:10-13], "\\foo");
      fd_fun =
      { f_span = [4:1-7:2]; f_readonly_this = None; f_annotation = (); 
        f_readonly_ret = None; f_ret = ((?int), None);
        f_params =
        [{ param_annotation = (MyMap<string, int>); param_type_hint = ((MyMap<string, int>), (Some ([4:14-19], (Happly (([4:14-19], "\\MyMap"), []))))); 
           param_is_variadic = false; param_pos = [4:20-22]; param_name = "$m"; 
           param_expr = None; param_readonly = None; param_callconv = Pnormal; 
           param_user_attributes = []; param_visibility = None }
          ];
        f_ctxs = None; f_unsafe_ctxs = None;
        f_body =
        { fb_ast =
          [([5:3-22],
            (Expr
               ((void), [5:3-21],
                (Call (
                   (((function(string $x, int $y): void)), [5:3-10],
                    (Obj_get (((MyMap<string, int>), [5:3-5], (Lvar ([5:3-5], $m))), (((function(string $x, int $y): void)), [5:7-10], (Id ([5:7-10], "add"))), OG_nullthrows, Is_method))),
                   [], [(Pnormal, ((string), [5:11-16], (String "hey"))); (Pnormal, ((int), [5:18-20], (Int "40")))], None)))));
            ([6:3-24],
             (Return
                (Some ((?int), [6:10-23],
                       (Call (
                          (((function(string $x): ?int)), [6:10-17],
                           (Obj_get (((MyMap<string, int>), [6:10-12], (Lvar ([6:10-12], $m))), (((function(string $x): ?int)), [6:14-17], (Id ([6:14-17], "get"))), OG_nullthrows, Is_method))),
                          [], [(Pnormal, ((string), [6:18-22], (String "ho")))], None))))))
            ]
          };
        f_fun_kind = FSync; f_user_attributes = []; f_external = false; 
        f_doc_comment = None };
      fd_internal = false; fd_module = None; fd_tparams = []; fd_where_constraints = [] })[(Class
    { c_span = [3:1-8:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Concrete); 
      c_name = ([3:7-12], "\\MyMap");
      c_tparams =
      [{ tp_variance = Invariant; tp_name = ([3:13-15], "Tk"); tp_parameters = []; tp_constraints = []; tp_reified = Erased; tp_user_attributes = [] };
        { tp_variance = Invariant; tp_name = ([3:17-19], "Tv"); tp_parameters = []; tp_constraints = []; tp_reified = Erased; tp_user_attributes = [] }];
      c_extends = []; c_uses = []; c_xhp_attr_uses = []; c_xhp_category = None; 
      c_reqs = []; c_implements = []; c_where_constraints = []; c_consts = []; 
      c_typeconsts = []; c_vars = [];
      c_methods =
      [{ m_span = [4:3-45]; m_annotation = (); m_final = false; m_abstract = false; 
         m_static = false; m_readonly_this = false; m_visibility = Public; 
         m_name = ([4:19-22], "add"); m_tparams = []; m_where_constraints = [];
         m_params =
         [{ param_annotation = (Tk); param_type_hint = ((Tk), (Some ([4:23-25], (Habstr ("Tk", []))))); 
            param_is_variadic = false; param_pos = [4:26-28]; param_name = "$x"; 
            param_expr = None; param_readonly = None; param_callconv = Pnormal; 
            param_user_attributes = []; param_visibility = None };
           { param_annotation = (Tv); param_type_hint = ((Tv), (Some ([4:30-32], (Habstr ("Tv", []))))); 
             param_is_variadic = false; param_pos = [4:33-35]; param_name = "$y"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None }
           ];
         m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([Pos.none], Noop)] }; 
         m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
         m_ret = ((void), (Some ([4:38-42], (Hprim Tvoid)))); m_external = false; 
         m_doc_comment = None };
        { m_span = [5:3-7:4]; m_annotation = (); m_final = false; m_abstract = false; 
          m_static = false; m_readonly_this = false; m_visibility = Public; 
          m_name = ([5:19-22], "get"); m_tparams = []; m_where_constraints = [];
          m_params =
          [{ param_annotation = (Tk); param_type_hint = ((Tk), (Some ([5:23-25], (Habstr ("Tk", []))))); 
             param_is_variadic = false; param_pos = [5:26-28]; param_name = "$x"; 
             param_expr = None; param_readonly = None; param_callconv = Pnormal; 
             param_user_attributes = []; param_visibility = None }
            ];
          m_ctxs = None; m_unsafe_ctxs = None; m_body = { fb_ast = [([6:5-17], (Return (Some ((null), [6:12-16], Null))))] }; 
          m_fun_kind = FSync; m_user_attributes = []; m_readonly_ret = None; 
          m_ret = ((?Tv), (Some ([5:31-34], (Hoption ([5:32-34], (Habstr ("Tv", []))))))); 
          m_external = false; m_doc_comment = None }
        ];
      c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_auto_ns_map = []; ns_is_codegen = false; ns_disable_xhp_element_mangling = false };
      c_user_attributes = []; c_file_attributes = []; c_docs_url = None; 
      c_enum = None; c_doc_comment = None; c_emit_id = None; c_internal = false; 
      c_module = None })