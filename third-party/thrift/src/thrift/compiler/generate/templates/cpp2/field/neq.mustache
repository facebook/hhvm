<%!

  Copyright (c) Meta Platforms, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%
// Computes lhs.{field} != rhs.{field}
%><%#field:cpp_ref?%><%
  %><%#field:intern_boxed_ref?%><%
    // TODO(dokwon): Support nested adapter neq.
    // TODO(dokwon): Support @thrift.Box and @cpp.Adapter.
    // TODO(dokwon): Support pointer comparison for @thrift.InternBox.
    %>!::apache::thrift::op::equal<<%field:type_tag%>>(*lhs.<%field:cpp_storage_name%>, *rhs.<%field:cpp_storage_name%>)<%
  %><%/field:intern_boxed_ref?%><%!
  %><%^field:intern_boxed_ref?%><%!
    %>(!::apache::thrift::detail::pointer_equal(lhs.<%field:cpp_name%>_ref(), rhs.<%field:cpp_name%>_ref()))<%
  %><%/field:intern_boxed_ref?%><%!
%><%/field:cpp_ref?%><%
%><%^field:cpp_ref?%><%
  %><%#field:raw_binary?%><%
    // Not all standard binary types define equality operators, so we forward the check to StringTraits.
    // TODO(afuller): Move this to a shared helper function in the runtime.
    %><%#field:optional?%><%
      %>lhs.<%field:cpp_name%>_ref().has_value() != rhs.<%field:cpp_name%>_ref().has_value() || (lhs.<%field:cpp_name%>_ref().has_value() && <%
    %><%/field:optional?%><%
    %>!apache::thrift::StringTraits<<% > types/indirected_string_type%>>::isEqual(<% > types/apply_indirection_pre%>lhs.<%field:cpp_storage_name%><% > types/apply_indirection_post%>, <% > types/apply_indirection_pre%>rhs.<%field:cpp_storage_name%><% > types/apply_indirection_post%>)<%
    %><%#field:optional?%>)<%/field:optional?%><%
  %><%/field:raw_binary?%><%
  %><%^field:raw_binary?%><%
    %><%#field:cpp_first_adapter%><%
      %><%#field:optional?%><%
        %>::apache::thrift::adapt_detail::not_equal_opt<<%field:cpp_first_adapter%>>(lhs.<%field:cpp_name%>_ref(), rhs.<%field:cpp_name%>_ref())<%
      %><%/field:optional?%><%
      %><%^field:optional?%><%
        %>::apache::thrift::adapt_detail::not_equal<<%field:cpp_first_adapter%>>(lhs.<%field:cpp_storage_name%>, rhs.<%field:cpp_storage_name%>)<%
      %><%/field:optional?%><%
    %><%/field:cpp_first_adapter%><%
    %><%^field:cpp_first_adapter%><%
      // Just use the field_ref impl.
      // We only require that types define the == operator, so avoid using != directly.
      %>!(lhs.<%field:cpp_name%>_ref() == rhs.<%field:cpp_name%>_ref())<%
    %><%/field:cpp_first_adapter%><%
  %><%/field:raw_binary?%><%
%><%/field:cpp_ref?%>
