<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace test\fixtures\lazy_constants;

class module_CONSTANTS implements \IThriftConstants {
  /**
   * Original thrift constant:-
   * i32 myInt
   */
  const int myInt = 1337;

  /**
   * Original thrift constant:-
   * string name
   */
  const string name = "Mark Zuckerberg";

  /**
   * Original thrift constant:-
   * list<map<string, i32>> states
   */
  const vec<dict<string, int>> states = vec[
    dict[
      "San Diego" => 3211000,
      "Sacramento" => 479600,
      "SF" => 837400,
    ],
    dict[
      "New York" => 8406000,
      "Albany" => 98400,
    ],
  ];

  /**
   * Original thrift constant:-
   * set<string> cities
   */
  const keyset<string> cities = keyset[
    "New York",
    "Sacramento",
  ];

  /**
   * Original thrift constant:-
   * double x
   */
  const float x = 1.0;

  /**
   * Original thrift constant:-
   * double y
   */
  const float y = 1000000.0;

  /**
   * Original thrift constant:-
   * double z
   */
  const float z = 1e+09;

  /**
   * Original thrift constant:-
   * map<module.Company, i32> const_enum_map
   */
  const dict<\test\fixtures\lazy_constants\Company, int> const_enum_map = dict[
    \test\fixtures\lazy_constants\Company::FACEBOOK => 123,
    \test\fixtures\lazy_constants\Company::WHATSAPP => 2,
  ];

  /**
   * Original thrift constant:-
   * module.Internship instagram
   */
  <<__Memoize>>
  public static function instagram()[write_props]: \test\fixtures\lazy_constants\Internship{
    return \test\fixtures\lazy_constants\Internship::fromShape(
      shape(
        "weeks" => 12,
        "title" => "Software Engineer",
        "employer" => \test\fixtures\lazy_constants\Company::INSTAGRAM,
      )
    );
  }

  /**
   * Original thrift constant:-
   * list<module.Range> kRanges
   */
  <<__Memoize>>
  public static function kRanges()[write_props]: vec<\test\fixtures\lazy_constants\Range>{
    return vec[
      \test\fixtures\lazy_constants\Range::fromShape(
        shape(
          "min" => 1,
          "max" => 2,
        )
      ),
      \test\fixtures\lazy_constants\Range::fromShape(
        shape(
          "min" => 5,
          "max" => 6,
        )
      ),
    ];
  }

  /**
   * Original thrift constant:-
   * list<module.Internship> internList
   */
  <<__Memoize>>
  public static function internList()[write_props]: vec<\test\fixtures\lazy_constants\Internship>{
    return vec[
      \test\fixtures\lazy_constants\Internship::fromShape(
        shape(
          "weeks" => 12,
          "title" => "Software Engineer",
          "employer" => \test\fixtures\lazy_constants\Company::INSTAGRAM,
        )
      ),
      \test\fixtures\lazy_constants\Internship::fromShape(
        shape(
          "weeks" => 10,
          "title" => "Sales Intern",
          "employer" => \test\fixtures\lazy_constants\Company::FACEBOOK,
        )
      ),
    ];
  }

  /**
   * Original thrift constant:-
   * string apostrophe
   */
  const string apostrophe = "'";

  /**
   * Original thrift constant:-
   * string tripleApostrophe
   */
  const string tripleApostrophe = "'''";

  /**
   * Original thrift constant:-
   * string quotationMark
   */
  const string quotationMark = "\"";

  /**
   * Original thrift constant:-
   * string backslash
   */
  const string backslash = "\\";

  /**
   * Original thrift constant:-
   * string escaped_a
   */
  const string escaped_a = "a";

  /**
   * Original thrift constant:-
   * map<string, i32> char2ascii
   */
  const dict<string, int> char2ascii = dict[
    "'" => 39,
    "\"" => 34,
    "\\" => 92,
    "a" => 97,
  ];


  public static function getAllStructuredAnnotations()[write_props]: dict<string, dict<string, \IThriftStruct>> {
    return dict[
    ];
  }
}

