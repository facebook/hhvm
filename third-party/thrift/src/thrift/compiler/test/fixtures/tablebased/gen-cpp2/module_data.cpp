/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/tablebased/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_data_cpp.h>

namespace apache {
namespace thrift {

const std::array<::test::fixtures::tablebased::ExampleEnum, 2> TEnumDataStorage<::test::fixtures::tablebased::ExampleEnum>::values = {{
  type::ZERO,
  type::NONZERO,
}};
const std::array<folly::StringPiece, 2> TEnumDataStorage<::test::fixtures::tablebased::ExampleEnum>::names = {{
  "ZERO",
  "NONZERO",
}};

const std::array<::test::fixtures::tablebased::ExampleUnion::Type, 2> TEnumDataStorage<::test::fixtures::tablebased::ExampleUnion::Type>::values = {{
  type::fieldA,
  type::fieldB,
}};
const std::array<folly::StringPiece, 2> TEnumDataStorage<::test::fixtures::tablebased::ExampleUnion::Type>::names = {{
  "fieldA",
  "fieldB",
}};

const std::array<folly::StringPiece, 5> TStructDataStorage<::test::fixtures::tablebased::TrivialTypesStruct>::fields_names = {{
  "fieldA",
  "fieldB",
  "fieldC",
  "fieldD",
  "fieldE",
}};
const std::array<int16_t, 5> TStructDataStorage<::test::fixtures::tablebased::TrivialTypesStruct>::fields_ids = {{
  1,
  2,
  3,
  4,
  5,
}};
const std::array<protocol::TType, 5> TStructDataStorage<::test::fixtures::tablebased::TrivialTypesStruct>::fields_types = {{
  TType::T_I32,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
  TType::T_I32,
}};
const std::array<folly::StringPiece, 5> TStructDataStorage<::test::fixtures::tablebased::TrivialTypesStruct>::storage_names = {{
  "__fbthrift_field_fieldA",
  "__fbthrift_field_fieldB",
  "__fbthrift_field_fieldC",
  "__fbthrift_field_fieldD",
  "__fbthrift_field_fieldE",
}};
const std::array<int, 5> TStructDataStorage<::test::fixtures::tablebased::TrivialTypesStruct>::isset_indexes = {{
  0,
  1,
  2,
  3,
  4,
}};

const std::array<folly::StringPiece, 8> TStructDataStorage<::test::fixtures::tablebased::ContainerStruct>::fields_names = {{
  "fieldA",
  "fieldB",
  "fieldC",
  "fieldD",
  "fieldE",
  "fieldF",
  "fieldG",
  "fieldH",
}};
const std::array<int16_t, 8> TStructDataStorage<::test::fixtures::tablebased::ContainerStruct>::fields_ids = {{
  12,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
}};
const std::array<protocol::TType, 8> TStructDataStorage<::test::fixtures::tablebased::ContainerStruct>::fields_types = {{
  TType::T_LIST,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
  TType::T_LIST,
}};
const std::array<folly::StringPiece, 8> TStructDataStorage<::test::fixtures::tablebased::ContainerStruct>::storage_names = {{
  "__fbthrift_field_fieldA",
  "__fbthrift_field_fieldB",
  "__fbthrift_field_fieldC",
  "__fbthrift_field_fieldD",
  "__fbthrift_field_fieldE",
  "__fbthrift_field_fieldF",
  "__fbthrift_field_fieldG",
  "__fbthrift_field_fieldH",
}};
const std::array<int, 8> TStructDataStorage<::test::fixtures::tablebased::ContainerStruct>::isset_indexes = {{
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
}};

const std::array<folly::StringPiece, 2> TStructDataStorage<::test::fixtures::tablebased::ExampleUnion>::fields_names = {{
  "fieldA",
  "fieldB",
}};
const std::array<int16_t, 2> TStructDataStorage<::test::fixtures::tablebased::ExampleUnion>::fields_ids = {{
  1,
  2,
}};
const std::array<protocol::TType, 2> TStructDataStorage<::test::fixtures::tablebased::ExampleUnion>::fields_types = {{
  TType::T_STRUCT,
  TType::T_STRUCT,
}};
const std::array<folly::StringPiece, 2> TStructDataStorage<::test::fixtures::tablebased::ExampleUnion>::storage_names = {{
  "fieldA",
  "fieldB",
}};
const std::array<int, 2> TStructDataStorage<::test::fixtures::tablebased::ExampleUnion>::isset_indexes = {{
  0,
  1,
}};

} // namespace thrift
} // namespace apache
