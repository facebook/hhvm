/**
 * Autogenerated by Thrift for Common.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "mcrouter/lib/network/gen/gen-cpp2/Common_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::facebook::memcache::thrift::McVersionRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McVersionRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McVersionReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McVersionReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).value_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McStatsRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McStatsRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McStatsReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McStatsReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).stats_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McShutdownRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McShutdownRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McShutdownReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McShutdownReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McQuitRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McQuitRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McQuitReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McQuitReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McExecRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McExecRequest>;

    f(get_metadata(0), static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::McExecReply> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::McExecReply>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).response_ref()...);
    f(get_metadata(2), static_cast<T&&>(t).message_ref()...);
    f(get_metadata(3), static_cast<T&&>(t).appSpecificErrorCode_ref()...);
  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::GoAwayAcknowledgement> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::GoAwayAcknowledgement>;

  }
};

template <>
struct ForEachField<::facebook::memcache::thrift::GoAwayRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    FOLLY_MAYBE_UNUSED constexpr auto get_metadata =
        get_field_metadata<::facebook::memcache::thrift::GoAwayRequest>;

    f(get_metadata(0), static_cast<T&&>(t).result_ref()...);
    f(get_metadata(1), static_cast<T&&>(t).reason_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
