[(Class
    { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
      c_final = false; c_is_xhp = false; c_kind = Cnormal;
      c_name = ([3:7-10], "\\Foo"); c_tparams = <opaque>; c_extends = [];
      c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
      c_req_extends = []; c_req_implements = [];
      c_implements =
      [([3:22-43], (Happly (([3:22-43], "\\HH\\TypeAliasAttribute"), [])))];
      c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
      c_constructor =
      (Some { Aast.AnnotatedAST.m_annotation = (); m_final = false;
              m_abstract = false; m_visibility = Public;
              m_name = ([3:62-73], "__construct"); m_tparams = [];
              m_where_constraints = [];
              m_variadic =
              (FVvariadicArg
                 { Aast.AnnotatedAST.param_annotation =
                   ([3:81-83], varray<int>);
                   param_hint = (Some ([3:74-77], (Hprim Tint)));
                   param_is_reference = false; param_is_variadic = true;
                   param_pos = [3:81-83]; param_name = "$x";
                   param_expr = None; param_callconv = None;
                   param_user_attributes = [] });
              m_params = [];
              m_body =
              (NamedBody
                 { Aast.AnnotatedAST.fnb_nast = [Noop]; fnb_unsafe = false });
              m_fun_kind = FSync; m_user_attributes = [];
              m_ret = (Some ([3:62-73], (Happly (([3:62-73], "void"), []))));
              m_ret_by_ref = false; m_external = false });
      c_static_methods = []; c_methods = []; c_user_attributes = [];
      c_enum = None });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([4:7-10], "\\Bar"); c_tparams = <opaque>; c_extends = [];
       c_uses = []; c_xhp_attr_uses = []; c_xhp_category = [];
       c_req_extends = []; c_req_implements = [];
       c_implements =
       [([4:22-43], (Happly (([4:22-43], "\\HH\\TypeAliasAttribute"), [])))];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None });
  (Class
     { Aast.AnnotatedAST.c_annotation = (); c_mode = <opaque>;
       c_final = false; c_is_xhp = false; c_kind = Cnormal;
       c_name = ([5:7-22], "\\SingleAttribute"); c_tparams = <opaque>;
       c_extends = []; c_uses = []; c_xhp_attr_uses = [];
       c_xhp_category = []; c_req_extends = []; c_req_implements = [];
       c_implements =
       [([5:34-55], (Happly (([5:34-55], "\\HH\\TypeAliasAttribute"), [])))];
       c_consts = []; c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None });
  (Typedef
     { Aast.AnnotatedAST.t_annotation = (); t_name = ([8:6-8], "\\T1");
       t_tparams = []; t_constraint = None;
       t_kind = ([8:11-14], (Hprim Tint));
       t_user_attributes =
       [{ Aast.AnnotatedAST.ua_name = ([7:15-18], "\\Bar"); ua_params = [] };
         { Aast.AnnotatedAST.ua_name = ([7:3-6], "\\Foo");
           ua_params =
           [(([7:7-8], int), (Int "1")); (([7:9-10], int), (Int "2"));
             (([7:11-12], int), (Int "3"))]
           }
         ];
       t_mode = <opaque>; t_vis = Transparent });
  (Typedef
     { Aast.AnnotatedAST.t_annotation = (); t_name = ([11:6-8], "\\T2");
       t_tparams = []; t_constraint = None;
       t_kind = ([11:11-18], (Hoption ([11:12-18], (Hprim Tstring))));
       t_user_attributes =
       [{ Aast.AnnotatedAST.ua_name = ([10:3-18], "\\SingleAttribute");
          ua_params = [] }
         ];
       t_mode = <opaque>; t_vis = Transparent });
  (Typedef
     { Aast.AnnotatedAST.t_annotation = ();
       t_name = ([13:6-23], "\\Serialized_contra");
       t_tparams = [(Contravariant, ([13:25-26], "T"), [], false)];
       t_constraint = None; t_kind = ([13:30-36], (Hprim Tstring));
       t_user_attributes = []; t_mode = <opaque>; t_vis = Transparent });
  (Typedef
     { Aast.AnnotatedAST.t_annotation = ();
       t_name = ([14:6-19], "\\Serialized_co");
       t_tparams = [(Covariant, ([14:21-22], "T"), [], false)];
       t_constraint = None; t_kind = ([14:26-32], (Hprim Tstring));
       t_user_attributes = []; t_mode = <opaque>; t_vis = Transparent })
  ]
