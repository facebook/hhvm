/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/mcpp2-compare/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_types_custom_protocol.h"

namespace some::valid::ns {

template void Empty::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ASimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ASimpleStructNoexcept::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ASimpleStructNoexcept::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ASimpleStructNoexcept::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ASimpleStructNoexcept::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void SimpleUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ComplexUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AnException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AnotherException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void containerStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyIncludedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AnnotatedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ComplexContainerStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexContainerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexContainerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexContainerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void FloatStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t FloatStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t FloatStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t FloatStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void FloatUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t FloatUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t FloatUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t FloatUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void AllRequiredNoExceptMoveCtrStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AllRequiredNoExceptMoveCtrStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // namespace some::valid::ns
