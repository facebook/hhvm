/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/complex-struct/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types_custom_protocol.h"

namespace cpp2 {

template void MyStructFloatFieldThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructFloatFieldThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructFloatFieldThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStructMapFloatThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructMapFloatThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructMapFloatThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructMapFloatThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void SimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void defaultStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t defaultStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t defaultStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t defaultStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyStructTypeDef::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructTypeDef::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructTypeDef::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructTypeDef::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyDataItem::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void MyUnionFloatFieldThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionFloatFieldThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionFloatFieldThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void ComplexNestedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexNestedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexNestedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexNestedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void TypeRemapped::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TypeRemapped::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TypeRemapped::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TypeRemapped::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void emptyXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t emptyXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t emptyXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t emptyXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void reqXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t reqXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t reqXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t reqXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void optXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t optXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t optXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t optXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void complexException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t complexException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t complexException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t complexException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

template void Containers::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Containers::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Containers::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Containers::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // namespace cpp2
