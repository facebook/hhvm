#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations
import builtins


import typing as _typing
import types as _py_types

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import folly.iobuf as _fbthrift_iobuf
from thrift.python.client import (
    AsyncClient as _fbthrift_python_AsyncClient,
    SyncClient as _fbthrift_python_SyncClient,
    Client as _fbthrift_python_Client,
)
from thrift.python.client.omni_client import InteractionMethodPosition as _fbthrift_InteractionMethodPosition, FunctionQualifier as _fbthrift_FunctionQualifier
from thrift.python.common import RpcOptions
import thrift.python.exceptions as _fbthrift_python_exceptions
import thrift.python.types as _fbthrift_python_types
import module.thrift_types as _fbthrift__module__thrift_types
import module.thrift_metadata as _fbthrift__module__thrift_metadata

class PubSubStreamingService(_fbthrift_python_Client["PubSubStreamingService.Async", "PubSubStreamingService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.PubSubStreamingService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__module__thrift_metadata.gen_metadata_service_PubSubStreamingService()
    
    class Async(_fbthrift_python_AsyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.PubSubStreamingService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_PubSubStreamingService()
    
        async def returnstream(
            self,
            i32_from: builtins.int,
            i32_to: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.AsyncGenerator[builtins.int, None]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "returnstream",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_returnstream_args(
                    i32_from=i32_from,
                    i32_to=i32_to,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_returnstream_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_returnstream_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            return _fbthrift_stream
    
        async def streamthrows(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.AsyncGenerator[builtins.int, None]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "streamthrows",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_streamthrows_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_streamthrows_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_streamthrows_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            return _fbthrift_stream
    
        async def servicethrows(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.AsyncGenerator[builtins.int, None]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "servicethrows",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_servicethrows_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_servicethrows_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_servicethrows_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__e`
            if (_fbthrift_ex := _fbthrift_resp._ex0__e) is not None:
                raise _fbthrift_ex
            return _fbthrift_stream
    
        async def servicethrows2(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.AsyncGenerator[builtins.int, None]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "servicethrows2",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_servicethrows2_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_servicethrows2_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_servicethrows2_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__e1`
            if (_fbthrift_ex := _fbthrift_resp._ex0__e1) is not None:
                raise _fbthrift_ex
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex1__e2`
            if (_fbthrift_ex := _fbthrift_resp._ex1__e2) is not None:
                raise _fbthrift_ex
            return _fbthrift_stream
    
        async def boththrows(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.AsyncGenerator[builtins.int, None]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "boththrows",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_boththrows_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_boththrows_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_boththrows_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__e`
            if (_fbthrift_ex := _fbthrift_resp._ex0__e) is not None:
                raise _fbthrift_ex
            return _fbthrift_stream
    
        async def responseandstreamstreamthrows(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.Tuple[builtins.int, _typing.AsyncGenerator[builtins.int, None]]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "responseandstreamstreamthrows",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamstreamthrows_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamstreamthrows_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamstreamthrows_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success, _fbthrift_stream
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def responseandstreamservicethrows(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.Tuple[builtins.int, _typing.AsyncGenerator[builtins.int, None]]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "responseandstreamservicethrows",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamservicethrows_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamservicethrows_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamservicethrows_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success, _fbthrift_stream
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__e`
            if (_fbthrift_ex := _fbthrift_resp._ex0__e) is not None:
                raise _fbthrift_ex
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def responseandstreamboththrows(
            self,
            foo: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.Tuple[builtins.int, _typing.AsyncGenerator[builtins.int, None]]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "responseandstreamboththrows",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamboththrows_args(
                    foo=foo,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamboththrows_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_responseandstreamboththrows_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success, _fbthrift_stream
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__e`
            if (_fbthrift_ex := _fbthrift_resp._ex0__e) is not None:
                raise _fbthrift_ex
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
        async def returnstreamFast(
            self,
            i32_from: builtins.int,
            i32_to: builtins.int,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _typing.AsyncGenerator[builtins.int, None]:
            _fbthrift_resp = await self._send_request(
                "PubSubStreamingService",
                "returnstreamFast",
                _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_returnstreamFast_args(
                    i32_from=i32_from,
                    i32_to=i32_to,),
                (_fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_returnstreamFast_result, _fbthrift__module__thrift_types._fbthrift_PubSubStreamingService_returnstreamFast_result_stream_elem),
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="PubSubStreamingService",
                rpc_options=rpc_options,
            )
            _fbthrift_resp, _fbthrift_stream = _fbthrift_resp
            return _fbthrift_stream
    
    
    # pyre-ignore[4]: Missing annotation.
    returnstream = Async.returnstream
    # pyre-ignore[4]: Missing annotation.
    streamthrows = Async.streamthrows
    # pyre-ignore[4]: Missing annotation.
    servicethrows = Async.servicethrows
    # pyre-ignore[4]: Missing annotation.
    servicethrows2 = Async.servicethrows2
    # pyre-ignore[4]: Missing annotation.
    boththrows = Async.boththrows
    # pyre-ignore[4]: Missing annotation.
    responseandstreamstreamthrows = Async.responseandstreamstreamthrows
    # pyre-ignore[4]: Missing annotation.
    responseandstreamservicethrows = Async.responseandstreamservicethrows
    # pyre-ignore[4]: Missing annotation.
    responseandstreamboththrows = Async.responseandstreamboththrows
    # pyre-ignore[4]: Missing annotation.
    returnstreamFast = Async.returnstreamFast
    
    class Sync(_fbthrift_python_SyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "module.PubSubStreamingService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__module__thrift_metadata.gen_metadata_service_PubSubStreamingService()

