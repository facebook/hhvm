// Autogenerated by Thrift for thrift/compiler/test/fixtures/serialization_field_order/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID

type Foo struct {
    Field2 int32 `thrift:"field2,1" json:"field2" db:"field2"`
    Field3 int32 `thrift:"field3,2" json:"field3" db:"field3"`
    Field1 int32 `thrift:"field1,3" json:"field1" db:"field1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Foo)(nil)

func NewFoo() *Foo {
    return (&Foo{}).setDefaults()
}

func (x *Foo) GetField2() int32 {
    return x.Field2
}

func (x *Foo) GetField3() int32 {
    return x.Field3
}

func (x *Foo) GetField1() int32 {
    return x.Field1
}

func (x *Foo) SetField2NonCompat(value int32) *Foo {
    x.Field2 = value
    return x
}

func (x *Foo) SetField2(value int32) *Foo {
    x.Field2 = value
    return x
}

func (x *Foo) SetField3NonCompat(value int32) *Foo {
    x.Field3 = value
    return x
}

func (x *Foo) SetField3(value int32) *Foo {
    x.Field3 = value
    return x
}

func (x *Foo) SetField1NonCompat(value int32) *Foo {
    x.Field1 = value
    return x
}

func (x *Foo) SetField1(value int32) *Foo {
    x.Field1 = value
    return x
}

func (x *Foo) writeField1(p thrift.Encoder) error {  // Field2
    if err := p.WriteFieldBegin("field2", thrift.I32, 1); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.Field2
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField2(p thrift.Encoder) error {  // Field3
    if err := p.WriteFieldBegin("field3", thrift.I32, 2); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.Field3
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) writeField3(p thrift.Encoder) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I32, 3); err != nil {
        return thrift.PrependError("Foo write field begin error: ", err)
    }

    item := x.Field1
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo write field end error: ", err)
    }
    return nil
}

func (x *Foo) readField1(p thrift.Decoder) error {  // Field2
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field2 = result
    return nil
}

func (x *Foo) readField2(p thrift.Decoder) error {  // Field3
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field3 = result
    return nil
}

func (x *Foo) readField3(p thrift.Decoder) error {  // Field1
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field1 = result
    return nil
}



func (x *Foo) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Foo"); err != nil {
        return thrift.PrependError("Foo write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Foo write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Foo write struct end error: ", err)
    }
    return nil
}

func (x *Foo) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Foo read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Foo field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field2")):  // field2
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field3")):  // field3
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field1")):  // field1
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Foo read struct end error: ", err)
    }

    return nil
}

func (x *Foo) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Foo) setDefaults() *Foo {
    return x.
        SetField2NonCompat(0).
        SetField3NonCompat(0).
        SetField1NonCompat(0)
}

type Foo2 struct {
    Field2 int32 `thrift:"field2,1" json:"field2" db:"field2"`
    Field3 int32 `thrift:"field3,2" json:"field3" db:"field3"`
    Field1 int32 `thrift:"field1,3" json:"field1" db:"field1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Foo2)(nil)

func NewFoo2() *Foo2 {
    return (&Foo2{}).setDefaults()
}

func (x *Foo2) GetField2() int32 {
    return x.Field2
}

func (x *Foo2) GetField3() int32 {
    return x.Field3
}

func (x *Foo2) GetField1() int32 {
    return x.Field1
}

func (x *Foo2) SetField2NonCompat(value int32) *Foo2 {
    x.Field2 = value
    return x
}

func (x *Foo2) SetField2(value int32) *Foo2 {
    x.Field2 = value
    return x
}

func (x *Foo2) SetField3NonCompat(value int32) *Foo2 {
    x.Field3 = value
    return x
}

func (x *Foo2) SetField3(value int32) *Foo2 {
    x.Field3 = value
    return x
}

func (x *Foo2) SetField1NonCompat(value int32) *Foo2 {
    x.Field1 = value
    return x
}

func (x *Foo2) SetField1(value int32) *Foo2 {
    x.Field1 = value
    return x
}

func (x *Foo2) writeField1(p thrift.Encoder) error {  // Field2
    if err := p.WriteFieldBegin("field2", thrift.I32, 1); err != nil {
        return thrift.PrependError("Foo2 write field begin error: ", err)
    }

    item := x.Field2
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo2 write field end error: ", err)
    }
    return nil
}

func (x *Foo2) writeField2(p thrift.Encoder) error {  // Field3
    if err := p.WriteFieldBegin("field3", thrift.I32, 2); err != nil {
        return thrift.PrependError("Foo2 write field begin error: ", err)
    }

    item := x.Field3
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo2 write field end error: ", err)
    }
    return nil
}

func (x *Foo2) writeField3(p thrift.Encoder) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I32, 3); err != nil {
        return thrift.PrependError("Foo2 write field begin error: ", err)
    }

    item := x.Field1
    if err := p.WriteI32(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("Foo2 write field end error: ", err)
    }
    return nil
}

func (x *Foo2) readField1(p thrift.Decoder) error {  // Field2
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field2 = result
    return nil
}

func (x *Foo2) readField2(p thrift.Decoder) error {  // Field3
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field3 = result
    return nil
}

func (x *Foo2) readField3(p thrift.Decoder) error {  // Field1
    result, err := p.ReadI32()
    if err != nil {
        return err
    }

    x.Field1 = result
    return nil
}



func (x *Foo2) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("Foo2"); err != nil {
        return thrift.PrependError("Foo2 write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }
    if err := x.writeField2(p); err != nil {
        return err
    }
    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("Foo2 write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("Foo2 write struct end error: ", err)
    }
    return nil
}

func (x *Foo2) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("Foo2 read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("Foo2 field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field2")):  // field2
            fieldReadErr = x.readField1(p)
        case ((id == 2 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field3")):  // field3
            fieldReadErr = x.readField2(p)
        case ((id == 3 && wireType == thrift.I32) || (id == thrift.NO_FIELD_ID && fieldName == "field1")):  // field1
            fieldReadErr = x.readField3(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("Foo2 read struct end error: ", err)
    }

    return nil
}

func (x *Foo2) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *Foo2) setDefaults() *Foo2 {
    return x.
        SetField2NonCompat(0).
        SetField3NonCompat(0).
        SetField1NonCompat(0)
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
