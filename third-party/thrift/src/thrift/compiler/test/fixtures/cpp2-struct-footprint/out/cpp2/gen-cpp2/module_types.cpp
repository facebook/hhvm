/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_types.tcc"
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_constants.h"
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

[[maybe_unused]] static constexpr std::string_view kModuleName = "module";



namespace cpp2_struct_footprint {

std::string_view SimpleStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SimpleStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleStruct>::name;
}


SimpleStruct::SimpleStruct(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void SimpleStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void SimpleStruct::__fbthrift_clear_terse_fields() {
}

bool SimpleStruct::__fbthrift_is_empty() const {
  return false;
}

bool SimpleStruct::operator==([[maybe_unused]] const SimpleStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SimpleStruct::operator<([[maybe_unused]] const SimpleStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


::std::int32_t SimpleStruct::get_field() const {
  return __fbthrift_field_field;
}

::std::int32_t& SimpleStruct::set_field(::std::int32_t field_) {
  field_ref() = field_;
  return __fbthrift_field_field;
}

void swap([[maybe_unused]] SimpleStruct& a, [[maybe_unused]] SimpleStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field, b.__fbthrift_field_field);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view ComplexStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComplexStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ComplexStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComplexStruct>::name;
}


ComplexStruct::ComplexStruct(apache::thrift::FragileConstructor, ::cpp2_struct_footprint::SimpleStruct nested__arg) :
    __fbthrift_field_nested(std::move(nested__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void ComplexStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_nested);
  __isset = {};
}

void ComplexStruct::__fbthrift_clear_terse_fields() {
}

bool ComplexStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComplexStruct::operator==([[maybe_unused]] const ComplexStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ComplexStruct::operator<([[maybe_unused]] const ComplexStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


const ::cpp2_struct_footprint::SimpleStruct& ComplexStruct::get_nested() const& {
  return __fbthrift_field_nested;
}

::cpp2_struct_footprint::SimpleStruct ComplexStruct::get_nested() && {
  return static_cast<::cpp2_struct_footprint::SimpleStruct&&>(__fbthrift_field_nested);
}

void swap([[maybe_unused]] ComplexStruct& a, [[maybe_unused]] ComplexStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_nested, b.__fbthrift_field_nested);
  swap(a.__isset, b.__isset);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2_struct_footprint::SimpleStruct>,
    "inconsistent use of json option");

} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view Struct1::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Struct1>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Struct1::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Struct1>::name;
}


Struct1::Struct1(apache::thrift::FragileConstructor) {}

void Struct1::__fbthrift_clear() {
  // clear all fields
}

void Struct1::__fbthrift_clear_terse_fields() {
}

bool Struct1::__fbthrift_is_empty() const {
  return true;
}

bool Struct1::operator==([[maybe_unused]] const Struct1& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Struct1::operator<([[maybe_unused]] const Struct1& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Struct1& a, [[maybe_unused]] Struct1& b) {
  using ::std::swap;
}


} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view Struct2::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Struct2>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Struct2::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Struct2>::name;
}


Struct2::Struct2(apache::thrift::FragileConstructor) {}

void Struct2::__fbthrift_clear() {
  // clear all fields
}

void Struct2::__fbthrift_clear_terse_fields() {
}

bool Struct2::__fbthrift_is_empty() const {
  return true;
}

bool Struct2::operator==([[maybe_unused]] const Struct2& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Struct2::operator<([[maybe_unused]] const Struct2& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Struct2& a, [[maybe_unused]] Struct2& b) {
  using ::std::swap;
}


} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view Struct3::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Struct3>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Struct3::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Struct3>::name;
}


Struct3::Struct3(apache::thrift::FragileConstructor) {}

void Struct3::__fbthrift_clear() {
  // clear all fields
}

void Struct3::__fbthrift_clear_terse_fields() {
}

bool Struct3::__fbthrift_is_empty() const {
  return true;
}

bool Struct3::operator==([[maybe_unused]] const Struct3& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Struct3::operator<([[maybe_unused]] const Struct3& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Struct3& a, [[maybe_unused]] Struct3& b) {
  using ::std::swap;
}


} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view Struct4::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Struct4>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Struct4::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Struct4>::name;
}


Struct4::Struct4(apache::thrift::FragileConstructor) {}

void Struct4::__fbthrift_clear() {
  // clear all fields
}

void Struct4::__fbthrift_clear_terse_fields() {
}

bool Struct4::__fbthrift_is_empty() const {
  return true;
}

bool Struct4::operator==([[maybe_unused]] const Struct4& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Struct4::operator<([[maybe_unused]] const Struct4& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Struct4& a, [[maybe_unused]] Struct4& b) {
  using ::std::swap;
}


} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view Struct5::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Struct5>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view Struct5::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Struct5>::name;
}


Struct5::Struct5(apache::thrift::FragileConstructor) {}

void Struct5::__fbthrift_clear() {
  // clear all fields
}

void Struct5::__fbthrift_clear_terse_fields() {
}

bool Struct5::__fbthrift_is_empty() const {
  return true;
}

bool Struct5::operator==([[maybe_unused]] const Struct5& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Struct5::operator<([[maybe_unused]] const Struct5& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Struct5& a, [[maybe_unused]] Struct5& b) {
  using ::std::swap;
}


} // namespace cpp2_struct_footprint


namespace cpp2_struct_footprint {

std::string_view ExStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ExStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ExStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ExStruct>::name;
}

ExStruct::ExStruct(const ExStruct&) = default;
ExStruct& ExStruct::operator=(const ExStruct&) = default;
ExStruct::ExStruct() {
}


ExStruct::~ExStruct() {}

ExStruct::ExStruct([[maybe_unused]] ExStruct&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __isset(other.__isset) {
}

ExStruct& ExStruct::operator=([[maybe_unused]] ExStruct&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    __isset = other.__isset;
    return *this;
}


ExStruct::ExStruct(apache::thrift::FragileConstructor, ::std::string message__arg) :
    __fbthrift_field_message(std::move(message__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}

void ExStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<::std::string>::fromStringLiteral("");
  __isset = {};
}

void ExStruct::__fbthrift_clear_terse_fields() {
}

bool ExStruct::__fbthrift_is_empty() const {
  return false;
}

bool ExStruct::operator==([[maybe_unused]] const ExStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ExStruct::operator<([[maybe_unused]] const ExStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] ExStruct& a, [[maybe_unused]] ExStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__isset, b.__isset);
}


} // namespace cpp2_struct_footprint


namespace apache { namespace thrift {

folly::Range<::cpp2_struct_footprint::TestUnion::Type const*> const TEnumTraits<::cpp2_struct_footprint::TestUnion::Type>::values = folly::range(TEnumDataStorage<::cpp2_struct_footprint::TestUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::cpp2_struct_footprint::TestUnion::Type>::names = folly::range(TEnumDataStorage<::cpp2_struct_footprint::TestUnion::Type>::names);

bool TEnumTraits<::cpp2_struct_footprint::TestUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2_struct_footprint::TestUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2_struct_footprint {

std::string_view TestUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TestUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TestUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TestUnion>::name;
}

void TestUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::int_value:
      ::std::destroy_at(::std::addressof(value_.int_value));
      break;
    case Type::struct_value:
      ::std::destroy_at(::std::addressof(value_.struct_value));
      break;
    default:
      assert(false);
      break;
  }
}

void TestUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  fbthrift_type_ = folly::to_underlying(Type::__EMPTY__);
}

  TestUnion::~TestUnion() {
    __fbthrift_destruct();
  }

bool TestUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  TestUnion::TestUnion(const TestUnion& rhs)
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::int_value:
        set_int_value(rhs.value_.int_value);
        break;
      case Type::struct_value:
        set_struct_value(rhs.value_.struct_value);
        break;
      default:
        assert(false);
    }
  }

    TestUnion&TestUnion::operator=(const TestUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::int_value:
        set_int_value(rhs.value_.int_value);
        break;
      case Type::struct_value:
        set_struct_value(rhs.value_.struct_value);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool TestUnion::operator==(const TestUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool TestUnion::operator<([[maybe_unused]] const TestUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(TestUnion& a, TestUnion& b) {
  TestUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        TestUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2_struct_footprint::SimpleStruct>,
    "inconsistent use of json option");

} // namespace cpp2_struct_footprint

namespace cpp2_struct_footprint { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace cpp2_struct_footprint
namespace apache::thrift::detail::annotation {
}
