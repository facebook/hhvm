#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
from thrift.py3.types import _IsSet as _fbthrift_IsSet
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.py3.types cimport (
    cSetOp as __cSetOp,
    richcmp as __richcmp,
    set_op as __set_op,
    setcmp as __setcmp,
    list_index as __list_index,
    list_count as __list_count,
    list_slice as __list_slice,
    list_getitem as __list_getitem,
    set_iter as __set_iter,
    map_iter as __map_iter,
    map_contains as __map_contains,
    map_getitem as __map_getitem,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport facebook.thrift.annotation.cpp.types as _facebook_thrift_annotation_cpp_types
import facebook.thrift.annotation.cpp.types as _facebook_thrift_annotation_cpp_types
cimport facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types
import facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types
cimport apache.thrift.fixtures.types.included.types as _apache_thrift_fixtures_types_included_types
import apache.thrift.fixtures.types.included.types as _apache_thrift_fixtures_types_included_types

cimport apache.thrift.fixtures.types.module.types_reflection as _types_reflection


cdef __EnumData __has_bitwise_ops_enum_data  = __EnumData._fbthrift_create(thrift.py3.types.createEnumData[chas_bitwise_ops](), has_bitwise_ops)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __has_bitwise_opsMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __has_bitwise_ops_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __has_bitwise_ops_enum_data.get_all_names()

    def __len__(cls):
        return __has_bitwise_ops_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __has_bitwise_ops_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class has_bitwise_ops(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __has_bitwise_ops_enum_data.get_by_name(name)


    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        EnumMetadata[chas_bitwise_ops].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.has_bitwise_ops"

    def _to_python(self):
        import importlib
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return python_types.has_bitwise_ops(self.value)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        return self.value


__SetMetaClass(<PyTypeObject*> has_bitwise_ops, <PyTypeObject*> __has_bitwise_opsMeta)


cdef __EnumData __is_unscoped_enum_data  = __EnumData._fbthrift_create(thrift.py3.types.createEnumData[cis_unscoped](), is_unscoped)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __is_unscopedMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __is_unscoped_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __is_unscoped_enum_data.get_all_names()

    def __len__(cls):
        return __is_unscoped_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __is_unscoped_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class is_unscoped(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __is_unscoped_enum_data.get_by_name(name)


    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        EnumMetadata[cis_unscoped].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.is_unscoped"

    def _to_python(self):
        import importlib
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return python_types.is_unscoped(self.value)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        return self.value


__SetMetaClass(<PyTypeObject*> is_unscoped, <PyTypeObject*> __is_unscopedMeta)


cdef __EnumData __MyForwardRefEnum_enum_data  = __EnumData._fbthrift_create(thrift.py3.types.createEnumData[cMyForwardRefEnum](), MyForwardRefEnum)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __MyForwardRefEnumMeta(thrift.py3.types.EnumMeta):
    def _fbthrift_get_by_value(cls, int value):
        return __MyForwardRefEnum_enum_data.get_by_value(value)

    def _fbthrift_get_all_names(cls):
        return __MyForwardRefEnum_enum_data.get_all_names()

    def __len__(cls):
        return __MyForwardRefEnum_enum_data.size()

    def __getattribute__(cls, str name not None):
        if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
            return super().__getattribute__(name)
        return __MyForwardRefEnum_enum_data.get_by_name(name)


@__cython.final
@__cython.auto_pickle(False)
cdef class MyForwardRefEnum(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __MyForwardRefEnum_enum_data.get_by_name(name)


    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        EnumMetadata[cMyForwardRefEnum].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyForwardRefEnum"

    def _to_python(self):
        import importlib
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return python_types.MyForwardRefEnum(self.value)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        return self.value


__SetMetaClass(<PyTypeObject*> MyForwardRefEnum, <PyTypeObject*> __MyForwardRefEnumMeta)



@__cython.auto_pickle(False)
cdef class empty_struct(thrift.py3.types.Struct):
    def __init__(empty_struct self, **kwargs):
        self._cpp_obj = make_shared[cempty_struct]()
        self._fields_setter = _fbthrift_types_fields.__empty_struct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(empty_struct self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("empty_struct", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cempty_struct] cpp_obj):
        __fbthrift_inst = <empty_struct>empty_struct.__new__(empty_struct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(empty_struct self):
        return super().__hash__()

    def __repr__(empty_struct self):
        return super().__repr__()

    def __str__(empty_struct self):
        return super().__str__()


    def __copy__(empty_struct self):
        cdef shared_ptr[cempty_struct] cpp_obj = make_shared[cempty_struct](
            deref(self._cpp_obj)
        )
        return empty_struct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cempty_struct](
            self._cpp_obj,
            (<empty_struct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__empty_struct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cempty_struct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.empty_struct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cempty_struct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(empty_struct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cempty_struct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(empty_struct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cempty_struct]()
        with nogil:
            needed = serializer.cdeserialize[cempty_struct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.empty_struct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.empty_struct, self)
@__cython.auto_pickle(False)
cdef class decorated_struct(thrift.py3.types.Struct):
    def __init__(decorated_struct self, **kwargs):
        self._cpp_obj = make_shared[cdecorated_struct]()
        self._fields_setter = _fbthrift_types_fields.__decorated_struct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(decorated_struct self, **kwargs):
        if not kwargs:
            return self
        cdef decorated_struct __fbthrift_inst = decorated_struct.__new__(decorated_struct)
        __fbthrift_inst._cpp_obj = make_shared[cdecorated_struct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__decorated_struct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("decorated_struct", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cdecorated_struct] cpp_obj):
        __fbthrift_inst = <decorated_struct>decorated_struct.__new__(decorated_struct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):

        return (<bytes>deref(self._cpp_obj).field_ref().value()).decode('UTF-8')

    @property
    def field(self):
        return self.field_impl()


    def __hash__(decorated_struct self):
        return super().__hash__()

    def __repr__(decorated_struct self):
        return super().__repr__()

    def __str__(decorated_struct self):
        return super().__str__()


    def __copy__(decorated_struct self):
        cdef shared_ptr[cdecorated_struct] cpp_obj = make_shared[cdecorated_struct](
            deref(self._cpp_obj)
        )
        return decorated_struct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cdecorated_struct](
            self._cpp_obj,
            (<decorated_struct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__decorated_struct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cdecorated_struct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.decorated_struct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cdecorated_struct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(decorated_struct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cdecorated_struct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(decorated_struct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cdecorated_struct]()
        with nogil:
            needed = serializer.cdeserialize[cdecorated_struct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.decorated_struct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.decorated_struct, self)
@__cython.auto_pickle(False)
cdef class ContainerStruct(thrift.py3.types.Struct):
    def __init__(ContainerStruct self, **kwargs):
        self._cpp_obj = make_shared[cContainerStruct]()
        self._fields_setter = _fbthrift_types_fields.__ContainerStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(ContainerStruct self, **kwargs):
        if not kwargs:
            return self
        cdef ContainerStruct __fbthrift_inst = ContainerStruct.__new__(ContainerStruct)
        __fbthrift_inst._cpp_obj = make_shared[cContainerStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ContainerStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ContainerStruct", {
          "fieldA": deref(self._cpp_obj).fieldA_ref().has_value(),
          "fieldB": deref(self._cpp_obj).fieldB_ref().has_value(),
          "fieldC": deref(self._cpp_obj).fieldC_ref().has_value(),
          "fieldD": deref(self._cpp_obj).fieldD_ref().has_value(),
          "fieldE": deref(self._cpp_obj).fieldE_ref().has_value(),
          "fieldF": deref(self._cpp_obj).fieldF_ref().has_value(),
          "fieldG": deref(self._cpp_obj).fieldG_ref().has_value(),
          "fieldH": deref(self._cpp_obj).fieldH_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cContainerStruct] cpp_obj):
        __fbthrift_inst = <ContainerStruct>ContainerStruct.__new__(ContainerStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline fieldA_impl(self):

        if self.__fbthrift_cached_fieldA is None:
            self.__fbthrift_cached_fieldA = List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldA_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldA

    @property
    def fieldA(self):
        return self.fieldA_impl()

    cdef inline fieldB_impl(self):

        if self.__fbthrift_cached_fieldB is None:
            self.__fbthrift_cached_fieldB = std_list__List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldB_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldB

    @property
    def fieldB(self):
        return self.fieldB_impl()

    cdef inline fieldC_impl(self):

        if self.__fbthrift_cached_fieldC is None:
            self.__fbthrift_cached_fieldC = std_deque__List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldC_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldC

    @property
    def fieldC(self):
        return self.fieldC_impl()

    cdef inline fieldD_impl(self):

        if self.__fbthrift_cached_fieldD is None:
            self.__fbthrift_cached_fieldD = folly_fbvector__List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldD_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldD

    @property
    def fieldD(self):
        return self.fieldD_impl()

    cdef inline fieldE_impl(self):

        if self.__fbthrift_cached_fieldE is None:
            self.__fbthrift_cached_fieldE = folly_small_vector__List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldE_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldE

    @property
    def fieldE(self):
        return self.fieldE_impl()

    cdef inline fieldF_impl(self):

        if self.__fbthrift_cached_fieldF is None:
            self.__fbthrift_cached_fieldF = folly_sorted_vector_set__Set__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldF_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldF

    @property
    def fieldF(self):
        return self.fieldF_impl()

    cdef inline fieldG_impl(self):

        if self.__fbthrift_cached_fieldG is None:
            self.__fbthrift_cached_fieldG = folly_sorted_vector_map__Map__i32_string._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldG_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldG

    @property
    def fieldG(self):
        return self.fieldG_impl()

    cdef inline fieldH_impl(self):

        if self.__fbthrift_cached_fieldH is None:
            self.__fbthrift_cached_fieldH = std_unordered_map__Map__i32_string._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldH_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldH

    @property
    def fieldH(self):
        return self.fieldH_impl()


    def __hash__(ContainerStruct self):
        return super().__hash__()

    def __repr__(ContainerStruct self):
        return super().__repr__()

    def __str__(ContainerStruct self):
        return super().__str__()


    def __copy__(ContainerStruct self):
        cdef shared_ptr[cContainerStruct] cpp_obj = make_shared[cContainerStruct](
            deref(self._cpp_obj)
        )
        return ContainerStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cContainerStruct](
            self._cpp_obj,
            (<ContainerStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ContainerStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cContainerStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ContainerStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cContainerStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 8

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ContainerStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cContainerStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ContainerStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cContainerStruct]()
        with nogil:
            needed = serializer.cdeserialize[cContainerStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.ContainerStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ContainerStruct, self)
@__cython.auto_pickle(False)
cdef class CppTypeStruct(thrift.py3.types.Struct):
    def __init__(CppTypeStruct self, **kwargs):
        self._cpp_obj = make_shared[cCppTypeStruct]()
        self._fields_setter = _fbthrift_types_fields.__CppTypeStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(CppTypeStruct self, **kwargs):
        if not kwargs:
            return self
        cdef CppTypeStruct __fbthrift_inst = CppTypeStruct.__new__(CppTypeStruct)
        __fbthrift_inst._cpp_obj = make_shared[cCppTypeStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__CppTypeStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CppTypeStruct", {
          "fieldA": deref(self._cpp_obj).fieldA_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cCppTypeStruct] cpp_obj):
        __fbthrift_inst = <CppTypeStruct>CppTypeStruct.__new__(CppTypeStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline fieldA_impl(self):

        if self.__fbthrift_cached_fieldA is None:
            self.__fbthrift_cached_fieldA = std_list_int32_t__List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).fieldA_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_fieldA

    @property
    def fieldA(self):
        return self.fieldA_impl()


    def __hash__(CppTypeStruct self):
        return super().__hash__()

    def __repr__(CppTypeStruct self):
        return super().__repr__()

    def __str__(CppTypeStruct self):
        return super().__str__()


    def __copy__(CppTypeStruct self):
        cdef shared_ptr[cCppTypeStruct] cpp_obj = make_shared[cCppTypeStruct](
            deref(self._cpp_obj)
        )
        return CppTypeStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cCppTypeStruct](
            self._cpp_obj,
            (<CppTypeStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__CppTypeStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cCppTypeStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CppTypeStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cCppTypeStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CppTypeStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cCppTypeStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CppTypeStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCppTypeStruct]()
        with nogil:
            needed = serializer.cdeserialize[cCppTypeStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.CppTypeStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CppTypeStruct, self)
@__cython.auto_pickle(False)
cdef class VirtualStruct(thrift.py3.types.Struct):
    def __init__(VirtualStruct self, **kwargs):
        self._cpp_obj = make_shared[cVirtualStruct]()
        self._fields_setter = _fbthrift_types_fields.__VirtualStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(VirtualStruct self, **kwargs):
        if not kwargs:
            return self
        cdef VirtualStruct __fbthrift_inst = VirtualStruct.__new__(VirtualStruct)
        __fbthrift_inst._cpp_obj = make_shared[cVirtualStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__VirtualStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("VirtualStruct", {
          "MyIntField": deref(self._cpp_obj).MyIntField_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cVirtualStruct] cpp_obj):
        __fbthrift_inst = <VirtualStruct>VirtualStruct.__new__(VirtualStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline MyIntField_impl(self):

        return deref(self._cpp_obj).MyIntField_ref().value()

    @property
    def MyIntField(self):
        return self.MyIntField_impl()


    def __hash__(VirtualStruct self):
        return super().__hash__()

    def __repr__(VirtualStruct self):
        return super().__repr__()

    def __str__(VirtualStruct self):
        return super().__str__()


    def __copy__(VirtualStruct self):
        cdef shared_ptr[cVirtualStruct] cpp_obj = make_shared[cVirtualStruct](
            deref(self._cpp_obj)
        )
        return VirtualStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cVirtualStruct](
            self._cpp_obj,
            (<VirtualStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__VirtualStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cVirtualStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.VirtualStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cVirtualStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(VirtualStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cVirtualStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(VirtualStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cVirtualStruct]()
        with nogil:
            needed = serializer.cdeserialize[cVirtualStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.VirtualStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.VirtualStruct, self)
@__cython.auto_pickle(False)
cdef class MyStructWithForwardRefEnum(thrift.py3.types.Struct):
    def __init__(MyStructWithForwardRefEnum self, **kwargs):
        self._cpp_obj = make_shared[cMyStructWithForwardRefEnum]()
        self._fields_setter = _fbthrift_types_fields.__MyStructWithForwardRefEnum_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MyStructWithForwardRefEnum self, **kwargs):
        if not kwargs:
            return self
        cdef MyStructWithForwardRefEnum __fbthrift_inst = MyStructWithForwardRefEnum.__new__(MyStructWithForwardRefEnum)
        __fbthrift_inst._cpp_obj = make_shared[cMyStructWithForwardRefEnum](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyStructWithForwardRefEnum_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MyStructWithForwardRefEnum", {
          "a": deref(self._cpp_obj).a_ref().has_value(),
          "b": deref(self._cpp_obj).b_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyStructWithForwardRefEnum] cpp_obj):
        __fbthrift_inst = <MyStructWithForwardRefEnum>MyStructWithForwardRefEnum.__new__(MyStructWithForwardRefEnum)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):

        if self.__fbthrift_cached_a is None:
            self.__fbthrift_cached_a = translate_cpp_enum_to_python(MyForwardRefEnum, <int>(deref(self._cpp_obj).a_ref().value()))
        return self.__fbthrift_cached_a

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):

        if self.__fbthrift_cached_b is None:
            self.__fbthrift_cached_b = translate_cpp_enum_to_python(MyForwardRefEnum, <int>(deref(self._cpp_obj).b_ref().value()))
        return self.__fbthrift_cached_b

    @property
    def b(self):
        return self.b_impl()


    def __hash__(MyStructWithForwardRefEnum self):
        return super().__hash__()

    def __repr__(MyStructWithForwardRefEnum self):
        return super().__repr__()

    def __str__(MyStructWithForwardRefEnum self):
        return super().__str__()


    def __copy__(MyStructWithForwardRefEnum self):
        cdef shared_ptr[cMyStructWithForwardRefEnum] cpp_obj = make_shared[cMyStructWithForwardRefEnum](
            deref(self._cpp_obj)
        )
        return MyStructWithForwardRefEnum._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cMyStructWithForwardRefEnum](
            self._cpp_obj,
            (<MyStructWithForwardRefEnum>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStructWithForwardRefEnum()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMyStructWithForwardRefEnum].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyStructWithForwardRefEnum"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cMyStructWithForwardRefEnum](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyStructWithForwardRefEnum self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStructWithForwardRefEnum](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyStructWithForwardRefEnum self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStructWithForwardRefEnum]()
        with nogil:
            needed = serializer.cdeserialize[cMyStructWithForwardRefEnum](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.MyStructWithForwardRefEnum, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MyStructWithForwardRefEnum, self)
@__cython.auto_pickle(False)
cdef class TrivialNumeric(thrift.py3.types.Struct):
    def __init__(TrivialNumeric self, **kwargs):
        self._cpp_obj = make_shared[cTrivialNumeric]()
        self._fields_setter = _fbthrift_types_fields.__TrivialNumeric_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(TrivialNumeric self, **kwargs):
        if not kwargs:
            return self
        cdef TrivialNumeric __fbthrift_inst = TrivialNumeric.__new__(TrivialNumeric)
        __fbthrift_inst._cpp_obj = make_shared[cTrivialNumeric](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TrivialNumeric_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("TrivialNumeric", {
          "a": deref(self._cpp_obj).a_ref().has_value(),
          "b": deref(self._cpp_obj).b_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cTrivialNumeric] cpp_obj):
        __fbthrift_inst = <TrivialNumeric>TrivialNumeric.__new__(TrivialNumeric)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):

        return deref(self._cpp_obj).a_ref().value()

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):

        return <pbool> deref(self._cpp_obj).b_ref().value()

    @property
    def b(self):
        return self.b_impl()


    def __hash__(TrivialNumeric self):
        return super().__hash__()

    def __repr__(TrivialNumeric self):
        return super().__repr__()

    def __str__(TrivialNumeric self):
        return super().__str__()


    def __copy__(TrivialNumeric self):
        cdef shared_ptr[cTrivialNumeric] cpp_obj = make_shared[cTrivialNumeric](
            deref(self._cpp_obj)
        )
        return TrivialNumeric._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cTrivialNumeric](
            self._cpp_obj,
            (<TrivialNumeric>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__TrivialNumeric()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cTrivialNumeric].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.TrivialNumeric"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cTrivialNumeric](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(TrivialNumeric self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cTrivialNumeric](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(TrivialNumeric self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cTrivialNumeric]()
        with nogil:
            needed = serializer.cdeserialize[cTrivialNumeric](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.TrivialNumeric, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.TrivialNumeric, self)
@__cython.auto_pickle(False)
cdef class TrivialNestedWithDefault(thrift.py3.types.Struct):
    def __init__(TrivialNestedWithDefault self, **kwargs):
        self._cpp_obj = make_shared[cTrivialNestedWithDefault]()
        self._fields_setter = _fbthrift_types_fields.__TrivialNestedWithDefault_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(TrivialNestedWithDefault self, **kwargs):
        if not kwargs:
            return self
        cdef TrivialNestedWithDefault __fbthrift_inst = TrivialNestedWithDefault.__new__(TrivialNestedWithDefault)
        __fbthrift_inst._cpp_obj = make_shared[cTrivialNestedWithDefault](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TrivialNestedWithDefault_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("TrivialNestedWithDefault", {
          "z": deref(self._cpp_obj).z_ref().has_value(),
          "n": deref(self._cpp_obj).n_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cTrivialNestedWithDefault] cpp_obj):
        __fbthrift_inst = <TrivialNestedWithDefault>TrivialNestedWithDefault.__new__(TrivialNestedWithDefault)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline z_impl(self):

        return deref(self._cpp_obj).z_ref().value()

    @property
    def z(self):
        return self.z_impl()

    cdef inline n_impl(self):

        if self.__fbthrift_cached_n is None:
            self.__fbthrift_cached_n = TrivialNumeric._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).n_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_n

    @property
    def n(self):
        return self.n_impl()


    def __hash__(TrivialNestedWithDefault self):
        return super().__hash__()

    def __repr__(TrivialNestedWithDefault self):
        return super().__repr__()

    def __str__(TrivialNestedWithDefault self):
        return super().__str__()


    def __copy__(TrivialNestedWithDefault self):
        cdef shared_ptr[cTrivialNestedWithDefault] cpp_obj = make_shared[cTrivialNestedWithDefault](
            deref(self._cpp_obj)
        )
        return TrivialNestedWithDefault._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cTrivialNestedWithDefault](
            self._cpp_obj,
            (<TrivialNestedWithDefault>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__TrivialNestedWithDefault()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cTrivialNestedWithDefault].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.TrivialNestedWithDefault"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cTrivialNestedWithDefault](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(TrivialNestedWithDefault self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cTrivialNestedWithDefault](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(TrivialNestedWithDefault self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cTrivialNestedWithDefault]()
        with nogil:
            needed = serializer.cdeserialize[cTrivialNestedWithDefault](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.TrivialNestedWithDefault, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.TrivialNestedWithDefault, self)
@__cython.auto_pickle(False)
cdef class ComplexString(thrift.py3.types.Struct):
    def __init__(ComplexString self, **kwargs):
        self._cpp_obj = make_shared[cComplexString]()
        self._fields_setter = _fbthrift_types_fields.__ComplexString_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(ComplexString self, **kwargs):
        if not kwargs:
            return self
        cdef ComplexString __fbthrift_inst = ComplexString.__new__(ComplexString)
        __fbthrift_inst._cpp_obj = make_shared[cComplexString](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ComplexString_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ComplexString", {
          "a": deref(self._cpp_obj).a_ref().has_value(),
          "b": deref(self._cpp_obj).b_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cComplexString] cpp_obj):
        __fbthrift_inst = <ComplexString>ComplexString.__new__(ComplexString)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline a_impl(self):

        return (<bytes>deref(self._cpp_obj).a_ref().value()).decode('UTF-8')

    @property
    def a(self):
        return self.a_impl()

    cdef inline b_impl(self):

        if self.__fbthrift_cached_b is None:
            self.__fbthrift_cached_b = Map__string_i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).b_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_b

    @property
    def b(self):
        return self.b_impl()


    def __hash__(ComplexString self):
        return super().__hash__()

    def __repr__(ComplexString self):
        return super().__repr__()

    def __str__(ComplexString self):
        return super().__str__()


    def __copy__(ComplexString self):
        cdef shared_ptr[cComplexString] cpp_obj = make_shared[cComplexString](
            deref(self._cpp_obj)
        )
        return ComplexString._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cComplexString](
            self._cpp_obj,
            (<ComplexString>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ComplexString()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cComplexString].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ComplexString"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cComplexString](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ComplexString self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cComplexString](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ComplexString self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cComplexString]()
        with nogil:
            needed = serializer.cdeserialize[cComplexString](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.ComplexString, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ComplexString, self)
@__cython.auto_pickle(False)
cdef class ComplexNestedWithDefault(thrift.py3.types.Struct):
    def __init__(ComplexNestedWithDefault self, **kwargs):
        self._cpp_obj = make_shared[cComplexNestedWithDefault]()
        self._fields_setter = _fbthrift_types_fields.__ComplexNestedWithDefault_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(ComplexNestedWithDefault self, **kwargs):
        if not kwargs:
            return self
        cdef ComplexNestedWithDefault __fbthrift_inst = ComplexNestedWithDefault.__new__(ComplexNestedWithDefault)
        __fbthrift_inst._cpp_obj = make_shared[cComplexNestedWithDefault](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ComplexNestedWithDefault_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ComplexNestedWithDefault", {
          "z": deref(self._cpp_obj).z_ref().has_value(),
          "n": deref(self._cpp_obj).n_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cComplexNestedWithDefault] cpp_obj):
        __fbthrift_inst = <ComplexNestedWithDefault>ComplexNestedWithDefault.__new__(ComplexNestedWithDefault)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline z_impl(self):

        return (<bytes>deref(self._cpp_obj).z_ref().value()).decode('UTF-8')

    @property
    def z(self):
        return self.z_impl()

    cdef inline n_impl(self):

        if self.__fbthrift_cached_n is None:
            self.__fbthrift_cached_n = ComplexString._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).n_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_n

    @property
    def n(self):
        return self.n_impl()


    def __hash__(ComplexNestedWithDefault self):
        return super().__hash__()

    def __repr__(ComplexNestedWithDefault self):
        return super().__repr__()

    def __str__(ComplexNestedWithDefault self):
        return super().__str__()


    def __copy__(ComplexNestedWithDefault self):
        cdef shared_ptr[cComplexNestedWithDefault] cpp_obj = make_shared[cComplexNestedWithDefault](
            deref(self._cpp_obj)
        )
        return ComplexNestedWithDefault._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cComplexNestedWithDefault](
            self._cpp_obj,
            (<ComplexNestedWithDefault>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ComplexNestedWithDefault()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cComplexNestedWithDefault].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ComplexNestedWithDefault"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cComplexNestedWithDefault](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ComplexNestedWithDefault self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cComplexNestedWithDefault](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ComplexNestedWithDefault self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cComplexNestedWithDefault]()
        with nogil:
            needed = serializer.cdeserialize[cComplexNestedWithDefault](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.ComplexNestedWithDefault, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ComplexNestedWithDefault, self)
@__cython.auto_pickle(False)
cdef class MinPadding(thrift.py3.types.Struct):
    def __init__(MinPadding self, **kwargs):
        self._cpp_obj = make_shared[cMinPadding]()
        self._fields_setter = _fbthrift_types_fields.__MinPadding_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MinPadding self, **kwargs):
        if not kwargs:
            return self
        cdef MinPadding __fbthrift_inst = MinPadding.__new__(MinPadding)
        __fbthrift_inst._cpp_obj = make_shared[cMinPadding](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MinPadding_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MinPadding", {
          "small": deref(self._cpp_obj).small_ref().has_value(),
          "big": deref(self._cpp_obj).big_ref().has_value(),
          "medium": deref(self._cpp_obj).medium_ref().has_value(),
          "biggish": deref(self._cpp_obj).biggish_ref().has_value(),
          "tiny": deref(self._cpp_obj).tiny_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMinPadding] cpp_obj):
        __fbthrift_inst = <MinPadding>MinPadding.__new__(MinPadding)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline small_impl(self):

        return deref(self._cpp_obj).small_ref().value()

    @property
    def small(self):
        return self.small_impl()

    cdef inline big_impl(self):

        return deref(self._cpp_obj).big_ref().value()

    @property
    def big(self):
        return self.big_impl()

    cdef inline medium_impl(self):

        return deref(self._cpp_obj).medium_ref().value()

    @property
    def medium(self):
        return self.medium_impl()

    cdef inline biggish_impl(self):

        return deref(self._cpp_obj).biggish_ref().value()

    @property
    def biggish(self):
        return self.biggish_impl()

    cdef inline tiny_impl(self):

        return deref(self._cpp_obj).tiny_ref().value()

    @property
    def tiny(self):
        return self.tiny_impl()


    def __hash__(MinPadding self):
        return super().__hash__()

    def __repr__(MinPadding self):
        return super().__repr__()

    def __str__(MinPadding self):
        return super().__str__()


    def __copy__(MinPadding self):
        cdef shared_ptr[cMinPadding] cpp_obj = make_shared[cMinPadding](
            deref(self._cpp_obj)
        )
        return MinPadding._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cMinPadding](
            self._cpp_obj,
            (<MinPadding>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MinPadding()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMinPadding].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MinPadding"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cMinPadding](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 5

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MinPadding self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMinPadding](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MinPadding self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMinPadding]()
        with nogil:
            needed = serializer.cdeserialize[cMinPadding](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.MinPadding, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MinPadding, self)
@__cython.auto_pickle(False)
cdef class MinPaddingWithCustomType(thrift.py3.types.Struct):
    def __init__(MinPaddingWithCustomType self, **kwargs):
        self._cpp_obj = make_shared[cMinPaddingWithCustomType]()
        self._fields_setter = _fbthrift_types_fields.__MinPaddingWithCustomType_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MinPaddingWithCustomType self, **kwargs):
        if not kwargs:
            return self
        cdef MinPaddingWithCustomType __fbthrift_inst = MinPaddingWithCustomType.__new__(MinPaddingWithCustomType)
        __fbthrift_inst._cpp_obj = make_shared[cMinPaddingWithCustomType](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MinPaddingWithCustomType_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MinPaddingWithCustomType", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMinPaddingWithCustomType] cpp_obj):
        __fbthrift_inst = <MinPaddingWithCustomType>MinPaddingWithCustomType.__new__(MinPaddingWithCustomType)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline small_impl(self):

        return deref(self._cpp_obj).small_ref().value()

    @property
    def small(self):
        return self.small_impl()

    cdef inline big_impl(self):

        return deref(self._cpp_obj).big_ref().value()

    @property
    def big(self):
        return self.big_impl()

    cdef inline medium_impl(self):

        return deref(self._cpp_obj).medium_ref().value()

    @property
    def medium(self):
        return self.medium_impl()

    cdef inline biggish_impl(self):

        return deref(self._cpp_obj).biggish_ref().value()

    @property
    def biggish(self):
        return self.biggish_impl()

    cdef inline tiny_impl(self):

        return deref(self._cpp_obj).tiny_ref().value()

    @property
    def tiny(self):
        return self.tiny_impl()


    def __hash__(MinPaddingWithCustomType self):
        return super().__hash__()

    def __repr__(MinPaddingWithCustomType self):
        return super().__repr__()

    def __str__(MinPaddingWithCustomType self):
        return super().__str__()


    def __copy__(MinPaddingWithCustomType self):
        cdef shared_ptr[cMinPaddingWithCustomType] cpp_obj = make_shared[cMinPaddingWithCustomType](
            deref(self._cpp_obj)
        )
        return MinPaddingWithCustomType._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cMinPaddingWithCustomType](
            self._cpp_obj,
            (<MinPaddingWithCustomType>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MinPaddingWithCustomType()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMinPaddingWithCustomType].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MinPaddingWithCustomType"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cMinPaddingWithCustomType](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 5

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MinPaddingWithCustomType self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMinPaddingWithCustomType](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MinPaddingWithCustomType self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMinPaddingWithCustomType]()
        with nogil:
            needed = serializer.cdeserialize[cMinPaddingWithCustomType](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.MinPaddingWithCustomType, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MinPaddingWithCustomType, self)
@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):
    def __init__(MyStruct self, **kwargs):
        self._cpp_obj = make_shared[cMyStruct]()
        self._fields_setter = _fbthrift_types_fields.__MyStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MyStruct self, **kwargs):
        if not kwargs:
            return self
        cdef MyStruct __fbthrift_inst = MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = make_shared[cMyStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MyStruct", {
          "MyIntField": deref(self._cpp_obj).MyIntField_ref().has_value(),
          "MyStringField": deref(self._cpp_obj).MyStringField_ref().has_value(),
          "majorVer": deref(self._cpp_obj).majorVer_ref().has_value(),
          "data": deref(self._cpp_obj).data_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline MyIntField_impl(self):

        return deref(self._cpp_obj).MyIntField_ref().value()

    @property
    def MyIntField(self):
        return self.MyIntField_impl()

    cdef inline MyStringField_impl(self):

        return (<bytes>deref(self._cpp_obj).MyStringField_ref().value()).decode('UTF-8')

    @property
    def MyStringField(self):
        return self.MyStringField_impl()

    cdef inline majorVer_impl(self):

        return deref(self._cpp_obj).majorVer_ref().value()

    @property
    def majorVer(self):
        return self.majorVer_impl()

    cdef inline data_impl(self):

        if self.__fbthrift_cached_data is None:
            self.__fbthrift_cached_data = MyDataItem._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).data_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_data

    @property
    def data(self):
        return self.data_impl()


    def __hash__(MyStruct self):
        return super().__hash__()

    def __repr__(MyStruct self):
        return super().__repr__()

    def __str__(MyStruct self):
        return super().__str__()


    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct._fbthrift_create(cmove(cpp_obj))

    def __eq__(MyStruct self, other):
        return isinstance(other, MyStruct) and self._fbthrift_noncomparable_eq(other)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMyStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cMyStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 4

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        with nogil:
            needed = serializer.cdeserialize[cMyStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.MyStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MyStruct, self)
@__cython.auto_pickle(False)
cdef class MyDataItem(thrift.py3.types.Struct):
    def __init__(MyDataItem self, **kwargs):
        self._cpp_obj = make_shared[cMyDataItem]()
        self._fields_setter = _fbthrift_types_fields.__MyDataItem_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MyDataItem self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("MyDataItem", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyDataItem] cpp_obj):
        __fbthrift_inst = <MyDataItem>MyDataItem.__new__(MyDataItem)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(MyDataItem self):
        return super().__hash__()

    def __repr__(MyDataItem self):
        return super().__repr__()

    def __str__(MyDataItem self):
        return super().__str__()


    def __copy__(MyDataItem self):
        cdef shared_ptr[cMyDataItem] cpp_obj = make_shared[cMyDataItem](
            deref(self._cpp_obj)
        )
        return MyDataItem._fbthrift_create(cmove(cpp_obj))

    def __eq__(MyDataItem self, other):
        return isinstance(other, MyDataItem) and self._fbthrift_noncomparable_eq(other)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyDataItem()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMyDataItem].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyDataItem"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cMyDataItem](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyDataItem self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyDataItem](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyDataItem self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyDataItem]()
        with nogil:
            needed = serializer.cdeserialize[cMyDataItem](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.MyDataItem, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.MyDataItem, self)
@__cython.auto_pickle(False)
cdef class Renaming(thrift.py3.types.Struct):
    def __init__(Renaming self, **kwargs):
        self._cpp_obj = make_shared[cRenaming]()
        self._fields_setter = _fbthrift_types_fields.__Renaming_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(Renaming self, **kwargs):
        if not kwargs:
            return self
        cdef Renaming __fbthrift_inst = Renaming.__new__(Renaming)
        __fbthrift_inst._cpp_obj = make_shared[cRenaming](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__Renaming_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("Renaming", {
          "foo": deref(self._cpp_obj).foo_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cRenaming] cpp_obj):
        __fbthrift_inst = <Renaming>Renaming.__new__(Renaming)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline foo_impl(self):

        return deref(self._cpp_obj).foo_ref().value()

    @property
    def foo(self):
        return self.foo_impl()


    def __hash__(Renaming self):
        return super().__hash__()

    def __repr__(Renaming self):
        return super().__repr__()

    def __str__(Renaming self):
        return super().__str__()


    def __copy__(Renaming self):
        cdef shared_ptr[cRenaming] cpp_obj = make_shared[cRenaming](
            deref(self._cpp_obj)
        )
        return Renaming._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cRenaming](
            self._cpp_obj,
            (<Renaming>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Renaming()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cRenaming].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.Renaming"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cRenaming](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(Renaming self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cRenaming](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(Renaming self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cRenaming]()
        with nogil:
            needed = serializer.cdeserialize[cRenaming](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.Renaming, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.Renaming, self)
@__cython.auto_pickle(False)
cdef class AnnotatedTypes(thrift.py3.types.Struct):
    def __init__(AnnotatedTypes self, **kwargs):
        self._cpp_obj = make_shared[cAnnotatedTypes]()
        self._fields_setter = _fbthrift_types_fields.__AnnotatedTypes_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(AnnotatedTypes self, **kwargs):
        if not kwargs:
            return self
        cdef AnnotatedTypes __fbthrift_inst = AnnotatedTypes.__new__(AnnotatedTypes)
        __fbthrift_inst._cpp_obj = make_shared[cAnnotatedTypes](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__AnnotatedTypes_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AnnotatedTypes", {
          "binary_field": deref(self._cpp_obj).binary_field_ref().has_value(),
          "list_field": deref(self._cpp_obj).list_field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cAnnotatedTypes] cpp_obj):
        __fbthrift_inst = <AnnotatedTypes>AnnotatedTypes.__new__(AnnotatedTypes)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline binary_field_impl(self):

        return deref(self._cpp_obj).binary_field_ref().value()

    @property
    def binary_field(self):
        return self.binary_field_impl()

    cdef inline list_field_impl(self):

        if self.__fbthrift_cached_list_field is None:
            self.__fbthrift_cached_list_field = List__std_unordered_map__Map__i32_string._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).list_field_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_list_field

    @property
    def list_field(self):
        return self.list_field_impl()


    def __hash__(AnnotatedTypes self):
        return super().__hash__()

    def __repr__(AnnotatedTypes self):
        return super().__repr__()

    def __str__(AnnotatedTypes self):
        return super().__str__()


    def __copy__(AnnotatedTypes self):
        cdef shared_ptr[cAnnotatedTypes] cpp_obj = make_shared[cAnnotatedTypes](
            deref(self._cpp_obj)
        )
        return AnnotatedTypes._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cAnnotatedTypes](
            self._cpp_obj,
            (<AnnotatedTypes>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AnnotatedTypes()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cAnnotatedTypes].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AnnotatedTypes"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cAnnotatedTypes](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AnnotatedTypes self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cAnnotatedTypes](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AnnotatedTypes self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAnnotatedTypes]()
        with nogil:
            needed = serializer.cdeserialize[cAnnotatedTypes](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.AnnotatedTypes, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AnnotatedTypes, self)
@__cython.auto_pickle(False)
cdef class ForwardUsageRoot(thrift.py3.types.Struct):
    def __init__(ForwardUsageRoot self, **kwargs):
        self._cpp_obj = make_shared[cForwardUsageRoot]()
        self._fields_setter = _fbthrift_types_fields.__ForwardUsageRoot_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(ForwardUsageRoot self, **kwargs):
        if not kwargs:
            return self
        cdef ForwardUsageRoot __fbthrift_inst = ForwardUsageRoot.__new__(ForwardUsageRoot)
        __fbthrift_inst._cpp_obj = make_shared[cForwardUsageRoot](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ForwardUsageRoot_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ForwardUsageRoot", {
          "ForwardUsageStruct": deref(self._cpp_obj).ForwardUsageStruct_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cForwardUsageRoot] cpp_obj):
        __fbthrift_inst = <ForwardUsageRoot>ForwardUsageRoot.__new__(ForwardUsageRoot)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline ForwardUsageStruct_impl(self):
        if not deref(self._cpp_obj).ForwardUsageStruct_ref().has_value():
            return None

        if self.__fbthrift_cached_ForwardUsageStruct is None:
            self.__fbthrift_cached_ForwardUsageStruct = ForwardUsageStruct._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).ForwardUsageStruct_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_ForwardUsageStruct

    @property
    def ForwardUsageStruct(self):
        return self.ForwardUsageStruct_impl()

    cdef inline ForwardUsageByRef_impl(self):

        if self.__fbthrift_cached_ForwardUsageByRef is None:
            if not deref(self._cpp_obj).ForwardUsageByRef_ref():
                return None
            self.__fbthrift_cached_ForwardUsageByRef = ForwardUsageByRef._fbthrift_create(__reference_shared_ptr(deref(deref(self._cpp_obj).ForwardUsageByRef_ref()), self._cpp_obj))
        return self.__fbthrift_cached_ForwardUsageByRef

    @property
    def ForwardUsageByRef(self):
        return self.ForwardUsageByRef_impl()


    def __hash__(ForwardUsageRoot self):
        return super().__hash__()

    def __repr__(ForwardUsageRoot self):
        return super().__repr__()

    def __str__(ForwardUsageRoot self):
        return super().__str__()


    def __copy__(ForwardUsageRoot self):
        cdef shared_ptr[cForwardUsageRoot] cpp_obj = make_shared[cForwardUsageRoot](
            deref(self._cpp_obj)
        )
        return ForwardUsageRoot._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cForwardUsageRoot](
            self._cpp_obj,
            (<ForwardUsageRoot>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ForwardUsageRoot()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cForwardUsageRoot].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ForwardUsageRoot"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cForwardUsageRoot](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ForwardUsageRoot self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cForwardUsageRoot](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ForwardUsageRoot self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cForwardUsageRoot]()
        with nogil:
            needed = serializer.cdeserialize[cForwardUsageRoot](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.ForwardUsageRoot, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ForwardUsageRoot, self)
@__cython.auto_pickle(False)
cdef class ForwardUsageStruct(thrift.py3.types.Struct):
    def __init__(ForwardUsageStruct self, **kwargs):
        self._cpp_obj = make_shared[cForwardUsageStruct]()
        self._fields_setter = _fbthrift_types_fields.__ForwardUsageStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(ForwardUsageStruct self, **kwargs):
        if not kwargs:
            return self
        cdef ForwardUsageStruct __fbthrift_inst = ForwardUsageStruct.__new__(ForwardUsageStruct)
        __fbthrift_inst._cpp_obj = make_shared[cForwardUsageStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ForwardUsageStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ForwardUsageStruct", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cForwardUsageStruct] cpp_obj):
        __fbthrift_inst = <ForwardUsageStruct>ForwardUsageStruct.__new__(ForwardUsageStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline foo_impl(self):

        if self.__fbthrift_cached_foo is None:
            if not deref(self._cpp_obj).foo_ref():
                return None
            self.__fbthrift_cached_foo = ForwardUsageRoot._fbthrift_create(__reference_shared_ptr(deref(deref(self._cpp_obj).foo_ref()), self._cpp_obj))
        return self.__fbthrift_cached_foo

    @property
    def foo(self):
        return self.foo_impl()


    def __hash__(ForwardUsageStruct self):
        return super().__hash__()

    def __repr__(ForwardUsageStruct self):
        return super().__repr__()

    def __str__(ForwardUsageStruct self):
        return super().__str__()


    def __copy__(ForwardUsageStruct self):
        cdef shared_ptr[cForwardUsageStruct] cpp_obj = make_shared[cForwardUsageStruct](
            deref(self._cpp_obj)
        )
        return ForwardUsageStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cForwardUsageStruct](
            self._cpp_obj,
            (<ForwardUsageStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ForwardUsageStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cForwardUsageStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ForwardUsageStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cForwardUsageStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ForwardUsageStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cForwardUsageStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ForwardUsageStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cForwardUsageStruct]()
        with nogil:
            needed = serializer.cdeserialize[cForwardUsageStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.ForwardUsageStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ForwardUsageStruct, self)
@__cython.auto_pickle(False)
cdef class ForwardUsageByRef(thrift.py3.types.Struct):
    def __init__(ForwardUsageByRef self, **kwargs):
        self._cpp_obj = make_shared[cForwardUsageByRef]()
        self._fields_setter = _fbthrift_types_fields.__ForwardUsageByRef_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(ForwardUsageByRef self, **kwargs):
        if not kwargs:
            return self
        cdef ForwardUsageByRef __fbthrift_inst = ForwardUsageByRef.__new__(ForwardUsageByRef)
        __fbthrift_inst._cpp_obj = make_shared[cForwardUsageByRef](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ForwardUsageByRef_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("ForwardUsageByRef", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cForwardUsageByRef] cpp_obj):
        __fbthrift_inst = <ForwardUsageByRef>ForwardUsageByRef.__new__(ForwardUsageByRef)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline foo_impl(self):

        if self.__fbthrift_cached_foo is None:
            if not deref(self._cpp_obj).foo_ref():
                return None
            self.__fbthrift_cached_foo = ForwardUsageRoot._fbthrift_create(__reference_shared_ptr(deref(deref(self._cpp_obj).foo_ref()), self._cpp_obj))
        return self.__fbthrift_cached_foo

    @property
    def foo(self):
        return self.foo_impl()


    def __hash__(ForwardUsageByRef self):
        return super().__hash__()

    def __repr__(ForwardUsageByRef self):
        return super().__repr__()

    def __str__(ForwardUsageByRef self):
        return super().__str__()


    def __copy__(ForwardUsageByRef self):
        cdef shared_ptr[cForwardUsageByRef] cpp_obj = make_shared[cForwardUsageByRef](
            deref(self._cpp_obj)
        )
        return ForwardUsageByRef._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cForwardUsageByRef](
            self._cpp_obj,
            (<ForwardUsageByRef>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__ForwardUsageByRef()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cForwardUsageByRef].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.ForwardUsageByRef"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cForwardUsageByRef](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(ForwardUsageByRef self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cForwardUsageByRef](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(ForwardUsageByRef self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cForwardUsageByRef]()
        with nogil:
            needed = serializer.cdeserialize[cForwardUsageByRef](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.ForwardUsageByRef, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.ForwardUsageByRef, self)
@__cython.auto_pickle(False)
cdef class IncompleteMap(thrift.py3.types.Struct):
    def __init__(IncompleteMap self, **kwargs):
        self._cpp_obj = make_shared[cIncompleteMap]()
        self._fields_setter = _fbthrift_types_fields.__IncompleteMap_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(IncompleteMap self, **kwargs):
        if not kwargs:
            return self
        cdef IncompleteMap __fbthrift_inst = IncompleteMap.__new__(IncompleteMap)
        __fbthrift_inst._cpp_obj = make_shared[cIncompleteMap](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__IncompleteMap_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("IncompleteMap", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cIncompleteMap] cpp_obj):
        __fbthrift_inst = <IncompleteMap>IncompleteMap.__new__(IncompleteMap)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):
        if not deref(self._cpp_obj).field_ref().has_value():
            return None

        if self.__fbthrift_cached_field is None:
            self.__fbthrift_cached_field = Map__i32_IncompleteMapDep._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).field_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_field

    @property
    def field(self):
        return self.field_impl()


    def __hash__(IncompleteMap self):
        return super().__hash__()

    def __repr__(IncompleteMap self):
        return super().__repr__()

    def __str__(IncompleteMap self):
        return super().__str__()


    def __copy__(IncompleteMap self):
        cdef shared_ptr[cIncompleteMap] cpp_obj = make_shared[cIncompleteMap](
            deref(self._cpp_obj)
        )
        return IncompleteMap._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cIncompleteMap](
            self._cpp_obj,
            (<IncompleteMap>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__IncompleteMap()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cIncompleteMap].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.IncompleteMap"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cIncompleteMap](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(IncompleteMap self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cIncompleteMap](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(IncompleteMap self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cIncompleteMap]()
        with nogil:
            needed = serializer.cdeserialize[cIncompleteMap](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.IncompleteMap, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.IncompleteMap, self)
@__cython.auto_pickle(False)
cdef class IncompleteMapDep(thrift.py3.types.Struct):
    def __init__(IncompleteMapDep self, **kwargs):
        self._cpp_obj = make_shared[cIncompleteMapDep]()
        self._fields_setter = _fbthrift_types_fields.__IncompleteMapDep_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(IncompleteMapDep self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("IncompleteMapDep", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cIncompleteMapDep] cpp_obj):
        __fbthrift_inst = <IncompleteMapDep>IncompleteMapDep.__new__(IncompleteMapDep)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(IncompleteMapDep self):
        return super().__hash__()

    def __repr__(IncompleteMapDep self):
        return super().__repr__()

    def __str__(IncompleteMapDep self):
        return super().__str__()


    def __copy__(IncompleteMapDep self):
        cdef shared_ptr[cIncompleteMapDep] cpp_obj = make_shared[cIncompleteMapDep](
            deref(self._cpp_obj)
        )
        return IncompleteMapDep._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cIncompleteMapDep](
            self._cpp_obj,
            (<IncompleteMapDep>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__IncompleteMapDep()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cIncompleteMapDep].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.IncompleteMapDep"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cIncompleteMapDep](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(IncompleteMapDep self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cIncompleteMapDep](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(IncompleteMapDep self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cIncompleteMapDep]()
        with nogil:
            needed = serializer.cdeserialize[cIncompleteMapDep](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.IncompleteMapDep, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.IncompleteMapDep, self)
@__cython.auto_pickle(False)
cdef class CompleteMap(thrift.py3.types.Struct):
    def __init__(CompleteMap self, **kwargs):
        self._cpp_obj = make_shared[cCompleteMap]()
        self._fields_setter = _fbthrift_types_fields.__CompleteMap_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(CompleteMap self, **kwargs):
        if not kwargs:
            return self
        cdef CompleteMap __fbthrift_inst = CompleteMap.__new__(CompleteMap)
        __fbthrift_inst._cpp_obj = make_shared[cCompleteMap](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__CompleteMap_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CompleteMap", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cCompleteMap] cpp_obj):
        __fbthrift_inst = <CompleteMap>CompleteMap.__new__(CompleteMap)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):
        if not deref(self._cpp_obj).field_ref().has_value():
            return None

        if self.__fbthrift_cached_field is None:
            self.__fbthrift_cached_field = std_unordered_map__Map__i32_CompleteMapDep._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).field_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_field

    @property
    def field(self):
        return self.field_impl()


    def __hash__(CompleteMap self):
        return super().__hash__()

    def __repr__(CompleteMap self):
        return super().__repr__()

    def __str__(CompleteMap self):
        return super().__str__()


    def __copy__(CompleteMap self):
        cdef shared_ptr[cCompleteMap] cpp_obj = make_shared[cCompleteMap](
            deref(self._cpp_obj)
        )
        return CompleteMap._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cCompleteMap](
            self._cpp_obj,
            (<CompleteMap>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__CompleteMap()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cCompleteMap].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CompleteMap"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cCompleteMap](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CompleteMap self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cCompleteMap](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CompleteMap self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCompleteMap]()
        with nogil:
            needed = serializer.cdeserialize[cCompleteMap](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.CompleteMap, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CompleteMap, self)
@__cython.auto_pickle(False)
cdef class CompleteMapDep(thrift.py3.types.Struct):
    def __init__(CompleteMapDep self, **kwargs):
        self._cpp_obj = make_shared[cCompleteMapDep]()
        self._fields_setter = _fbthrift_types_fields.__CompleteMapDep_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(CompleteMapDep self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CompleteMapDep", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cCompleteMapDep] cpp_obj):
        __fbthrift_inst = <CompleteMapDep>CompleteMapDep.__new__(CompleteMapDep)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(CompleteMapDep self):
        return super().__hash__()

    def __repr__(CompleteMapDep self):
        return super().__repr__()

    def __str__(CompleteMapDep self):
        return super().__str__()


    def __copy__(CompleteMapDep self):
        cdef shared_ptr[cCompleteMapDep] cpp_obj = make_shared[cCompleteMapDep](
            deref(self._cpp_obj)
        )
        return CompleteMapDep._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cCompleteMapDep](
            self._cpp_obj,
            (<CompleteMapDep>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__CompleteMapDep()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cCompleteMapDep].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CompleteMapDep"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cCompleteMapDep](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CompleteMapDep self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cCompleteMapDep](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CompleteMapDep self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCompleteMapDep]()
        with nogil:
            needed = serializer.cdeserialize[cCompleteMapDep](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.CompleteMapDep, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CompleteMapDep, self)
@__cython.auto_pickle(False)
cdef class IncompleteList(thrift.py3.types.Struct):
    def __init__(IncompleteList self, **kwargs):
        self._cpp_obj = make_shared[cIncompleteList]()
        self._fields_setter = _fbthrift_types_fields.__IncompleteList_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(IncompleteList self, **kwargs):
        if not kwargs:
            return self
        cdef IncompleteList __fbthrift_inst = IncompleteList.__new__(IncompleteList)
        __fbthrift_inst._cpp_obj = make_shared[cIncompleteList](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__IncompleteList_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("IncompleteList", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cIncompleteList] cpp_obj):
        __fbthrift_inst = <IncompleteList>IncompleteList.__new__(IncompleteList)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):
        if not deref(self._cpp_obj).field_ref().has_value():
            return None

        if self.__fbthrift_cached_field is None:
            self.__fbthrift_cached_field = _std_list__List__IncompleteListDep._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).field_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_field

    @property
    def field(self):
        return self.field_impl()


    def __hash__(IncompleteList self):
        return super().__hash__()

    def __repr__(IncompleteList self):
        return super().__repr__()

    def __str__(IncompleteList self):
        return super().__str__()


    def __copy__(IncompleteList self):
        cdef shared_ptr[cIncompleteList] cpp_obj = make_shared[cIncompleteList](
            deref(self._cpp_obj)
        )
        return IncompleteList._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cIncompleteList](
            self._cpp_obj,
            (<IncompleteList>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__IncompleteList()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cIncompleteList].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.IncompleteList"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cIncompleteList](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(IncompleteList self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cIncompleteList](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(IncompleteList self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cIncompleteList]()
        with nogil:
            needed = serializer.cdeserialize[cIncompleteList](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.IncompleteList, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.IncompleteList, self)
@__cython.auto_pickle(False)
cdef class IncompleteListDep(thrift.py3.types.Struct):
    def __init__(IncompleteListDep self, **kwargs):
        self._cpp_obj = make_shared[cIncompleteListDep]()
        self._fields_setter = _fbthrift_types_fields.__IncompleteListDep_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(IncompleteListDep self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("IncompleteListDep", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cIncompleteListDep] cpp_obj):
        __fbthrift_inst = <IncompleteListDep>IncompleteListDep.__new__(IncompleteListDep)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(IncompleteListDep self):
        return super().__hash__()

    def __repr__(IncompleteListDep self):
        return super().__repr__()

    def __str__(IncompleteListDep self):
        return super().__str__()


    def __copy__(IncompleteListDep self):
        cdef shared_ptr[cIncompleteListDep] cpp_obj = make_shared[cIncompleteListDep](
            deref(self._cpp_obj)
        )
        return IncompleteListDep._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cIncompleteListDep](
            self._cpp_obj,
            (<IncompleteListDep>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__IncompleteListDep()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cIncompleteListDep].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.IncompleteListDep"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cIncompleteListDep](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(IncompleteListDep self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cIncompleteListDep](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(IncompleteListDep self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cIncompleteListDep]()
        with nogil:
            needed = serializer.cdeserialize[cIncompleteListDep](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.IncompleteListDep, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.IncompleteListDep, self)
@__cython.auto_pickle(False)
cdef class CompleteList(thrift.py3.types.Struct):
    def __init__(CompleteList self, **kwargs):
        self._cpp_obj = make_shared[cCompleteList]()
        self._fields_setter = _fbthrift_types_fields.__CompleteList_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(CompleteList self, **kwargs):
        if not kwargs:
            return self
        cdef CompleteList __fbthrift_inst = CompleteList.__new__(CompleteList)
        __fbthrift_inst._cpp_obj = make_shared[cCompleteList](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__CompleteList_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CompleteList", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cCompleteList] cpp_obj):
        __fbthrift_inst = <CompleteList>CompleteList.__new__(CompleteList)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):
        if not deref(self._cpp_obj).field_ref().has_value():
            return None

        if self.__fbthrift_cached_field is None:
            self.__fbthrift_cached_field = folly_small_vector__List__CompleteListDep._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).field_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_field

    @property
    def field(self):
        return self.field_impl()


    def __hash__(CompleteList self):
        return super().__hash__()

    def __repr__(CompleteList self):
        return super().__repr__()

    def __str__(CompleteList self):
        return super().__str__()


    def __copy__(CompleteList self):
        cdef shared_ptr[cCompleteList] cpp_obj = make_shared[cCompleteList](
            deref(self._cpp_obj)
        )
        return CompleteList._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cCompleteList](
            self._cpp_obj,
            (<CompleteList>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__CompleteList()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cCompleteList].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CompleteList"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cCompleteList](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CompleteList self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cCompleteList](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CompleteList self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCompleteList]()
        with nogil:
            needed = serializer.cdeserialize[cCompleteList](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.CompleteList, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CompleteList, self)
@__cython.auto_pickle(False)
cdef class CompleteListDep(thrift.py3.types.Struct):
    def __init__(CompleteListDep self, **kwargs):
        self._cpp_obj = make_shared[cCompleteListDep]()
        self._fields_setter = _fbthrift_types_fields.__CompleteListDep_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(CompleteListDep self, **kwargs):
        return self

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("CompleteListDep", {
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cCompleteListDep] cpp_obj):
        __fbthrift_inst = <CompleteListDep>CompleteListDep.__new__(CompleteListDep)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst


    def __hash__(CompleteListDep self):
        return super().__hash__()

    def __repr__(CompleteListDep self):
        return super().__repr__()

    def __str__(CompleteListDep self):
        return super().__str__()


    def __copy__(CompleteListDep self):
        cdef shared_ptr[cCompleteListDep] cpp_obj = make_shared[cCompleteListDep](
            deref(self._cpp_obj)
        )
        return CompleteListDep._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cCompleteListDep](
            self._cpp_obj,
            (<CompleteListDep>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__CompleteListDep()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cCompleteListDep].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.CompleteListDep"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cCompleteListDep](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 0

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(CompleteListDep self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cCompleteListDep](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(CompleteListDep self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCompleteListDep]()
        with nogil:
            needed = serializer.cdeserialize[cCompleteListDep](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.CompleteListDep, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.CompleteListDep, self)
@__cython.auto_pickle(False)
cdef class AdaptedList(thrift.py3.types.Struct):
    def __init__(AdaptedList self, **kwargs):
        self._cpp_obj = make_shared[cAdaptedList]()
        self._fields_setter = _fbthrift_types_fields.__AdaptedList_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(AdaptedList self, **kwargs):
        if not kwargs:
            return self
        cdef AdaptedList __fbthrift_inst = AdaptedList.__new__(AdaptedList)
        __fbthrift_inst._cpp_obj = make_shared[cAdaptedList](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__AdaptedList_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AdaptedList", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cAdaptedList] cpp_obj):
        __fbthrift_inst = <AdaptedList>AdaptedList.__new__(AdaptedList)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):
        if not deref(self._cpp_obj).field_ref().has_value():
            return None

        if self.__fbthrift_cached_field is None:
            self.__fbthrift_cached_field = List__AdaptedListDep._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).field_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_field

    @property
    def field(self):
        return self.field_impl()


    def __hash__(AdaptedList self):
        return super().__hash__()

    def __repr__(AdaptedList self):
        return super().__repr__()

    def __str__(AdaptedList self):
        return super().__str__()


    def __copy__(AdaptedList self):
        cdef shared_ptr[cAdaptedList] cpp_obj = make_shared[cAdaptedList](
            deref(self._cpp_obj)
        )
        return AdaptedList._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cAdaptedList](
            self._cpp_obj,
            (<AdaptedList>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AdaptedList()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cAdaptedList].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AdaptedList"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cAdaptedList](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AdaptedList self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cAdaptedList](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AdaptedList self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAdaptedList]()
        with nogil:
            needed = serializer.cdeserialize[cAdaptedList](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.AdaptedList, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AdaptedList, self)
@__cython.auto_pickle(False)
cdef class DependentAdaptedList(thrift.py3.types.Struct):
    def __init__(DependentAdaptedList self, **kwargs):
        self._cpp_obj = make_shared[cDependentAdaptedList]()
        self._fields_setter = _fbthrift_types_fields.__DependentAdaptedList_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(DependentAdaptedList self, **kwargs):
        if not kwargs:
            return self
        cdef DependentAdaptedList __fbthrift_inst = DependentAdaptedList.__new__(DependentAdaptedList)
        __fbthrift_inst._cpp_obj = make_shared[cDependentAdaptedList](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__DependentAdaptedList_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("DependentAdaptedList", {
          "field": deref(self._cpp_obj).field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cDependentAdaptedList] cpp_obj):
        __fbthrift_inst = <DependentAdaptedList>DependentAdaptedList.__new__(DependentAdaptedList)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline field_impl(self):
        if not deref(self._cpp_obj).field_ref().has_value():
            return None

        if self.__fbthrift_cached_field is None:
            self.__fbthrift_cached_field = List__DependentAdaptedListDep._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).field_ref().ref_unchecked(), self._cpp_obj))
        return self.__fbthrift_cached_field

    @property
    def field(self):
        return self.field_impl()


    def __hash__(DependentAdaptedList self):
        return super().__hash__()

    def __repr__(DependentAdaptedList self):
        return super().__repr__()

    def __str__(DependentAdaptedList self):
        return super().__str__()


    def __copy__(DependentAdaptedList self):
        cdef shared_ptr[cDependentAdaptedList] cpp_obj = make_shared[cDependentAdaptedList](
            deref(self._cpp_obj)
        )
        return DependentAdaptedList._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cDependentAdaptedList](
            self._cpp_obj,
            (<DependentAdaptedList>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__DependentAdaptedList()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cDependentAdaptedList].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.DependentAdaptedList"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cDependentAdaptedList](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(DependentAdaptedList self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cDependentAdaptedList](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(DependentAdaptedList self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cDependentAdaptedList]()
        with nogil:
            needed = serializer.cdeserialize[cDependentAdaptedList](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.DependentAdaptedList, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.DependentAdaptedList, self)
@__cython.auto_pickle(False)
cdef class AllocatorAware(thrift.py3.types.Struct):
    def __init__(AllocatorAware self, **kwargs):
        self._cpp_obj = make_shared[cAllocatorAware]()
        self._fields_setter = _fbthrift_types_fields.__AllocatorAware_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(AllocatorAware self, **kwargs):
        if not kwargs:
            return self
        cdef AllocatorAware __fbthrift_inst = AllocatorAware.__new__(AllocatorAware)
        __fbthrift_inst._cpp_obj = make_shared[cAllocatorAware](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__AllocatorAware_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AllocatorAware", {
          "aa_list": deref(self._cpp_obj).aa_list_ref().has_value(),
          "aa_set": deref(self._cpp_obj).aa_set_ref().has_value(),
          "aa_map": deref(self._cpp_obj).aa_map_ref().has_value(),
          "aa_string": deref(self._cpp_obj).aa_string_ref().has_value(),
          "not_a_container": deref(self._cpp_obj).not_a_container_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cAllocatorAware] cpp_obj):
        __fbthrift_inst = <AllocatorAware>AllocatorAware.__new__(AllocatorAware)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline aa_list_impl(self):

        if self.__fbthrift_cached_aa_list is None:
            self.__fbthrift_cached_aa_list = List__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).aa_list_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_aa_list

    @property
    def aa_list(self):
        return self.aa_list_impl()

    cdef inline aa_set_impl(self):

        if self.__fbthrift_cached_aa_set is None:
            self.__fbthrift_cached_aa_set = Set__i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).aa_set_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_aa_set

    @property
    def aa_set(self):
        return self.aa_set_impl()

    cdef inline aa_map_impl(self):

        if self.__fbthrift_cached_aa_map is None:
            self.__fbthrift_cached_aa_map = Map__i32_i32._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).aa_map_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_aa_map

    @property
    def aa_map(self):
        return self.aa_map_impl()

    cdef inline aa_string_impl(self):

        return (<bytes>deref(self._cpp_obj).aa_string_ref().value()).decode('UTF-8')

    @property
    def aa_string(self):
        return self.aa_string_impl()

    cdef inline not_a_container_impl(self):

        return deref(self._cpp_obj).not_a_container_ref().value()

    @property
    def not_a_container(self):
        return self.not_a_container_impl()

    cdef inline aa_unique_impl(self):

        if self.__fbthrift_cached_aa_unique is None:
            if not deref(self._cpp_obj).aa_unique_ref():
                return None
            self.__fbthrift_cached_aa_unique = cint32_t._fbthrift_create(__reference_shared_ptr(deref(deref(self._cpp_obj).aa_unique_ref()), self._cpp_obj))
        return self.__fbthrift_cached_aa_unique

    @property
    def aa_unique(self):
        return self.aa_unique_impl()

    cdef inline aa_shared_impl(self):

        if self.__fbthrift_cached_aa_shared is None:
            if not deref(self._cpp_obj).aa_shared_ref():
                return None
            self.__fbthrift_cached_aa_shared = cint32_t._fbthrift_create(__reference_shared_ptr(deref(deref(self._cpp_obj).aa_shared_ref()), self._cpp_obj))
        return self.__fbthrift_cached_aa_shared

    @property
    def aa_shared(self):
        return self.aa_shared_impl()


    def __hash__(AllocatorAware self):
        return super().__hash__()

    def __repr__(AllocatorAware self):
        return super().__repr__()

    def __str__(AllocatorAware self):
        return super().__str__()


    def __copy__(AllocatorAware self):
        cdef shared_ptr[cAllocatorAware] cpp_obj = make_shared[cAllocatorAware](
            deref(self._cpp_obj)
        )
        return AllocatorAware._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cAllocatorAware](
            self._cpp_obj,
            (<AllocatorAware>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AllocatorAware()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cAllocatorAware].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AllocatorAware"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cAllocatorAware](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 7

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AllocatorAware self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cAllocatorAware](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AllocatorAware self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAllocatorAware]()
        with nogil:
            needed = serializer.cdeserialize[cAllocatorAware](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.AllocatorAware, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AllocatorAware, self)
@__cython.auto_pickle(False)
cdef class AllocatorAware2(thrift.py3.types.Struct):
    def __init__(AllocatorAware2 self, **kwargs):
        self._cpp_obj = make_shared[cAllocatorAware2]()
        self._fields_setter = _fbthrift_types_fields.__AllocatorAware2_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(AllocatorAware2 self, **kwargs):
        if not kwargs:
            return self
        cdef AllocatorAware2 __fbthrift_inst = AllocatorAware2.__new__(AllocatorAware2)
        __fbthrift_inst._cpp_obj = make_shared[cAllocatorAware2](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__AllocatorAware2_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("AllocatorAware2", {
          "not_a_container": deref(self._cpp_obj).not_a_container_ref().has_value(),
          "box_field": deref(self._cpp_obj).box_field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cAllocatorAware2] cpp_obj):
        __fbthrift_inst = <AllocatorAware2>AllocatorAware2.__new__(AllocatorAware2)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline not_a_container_impl(self):

        return deref(self._cpp_obj).not_a_container_ref().value()

    @property
    def not_a_container(self):
        return self.not_a_container_impl()

    cdef inline box_field_impl(self):
        if not deref(self._cpp_obj).box_field_ref().has_value():
            return None

        return deref(self._cpp_obj).box_field_ref().value()

    @property
    def box_field(self):
        return self.box_field_impl()


    def __hash__(AllocatorAware2 self):
        return super().__hash__()

    def __repr__(AllocatorAware2 self):
        return super().__repr__()

    def __str__(AllocatorAware2 self):
        return super().__str__()


    def __copy__(AllocatorAware2 self):
        cdef shared_ptr[cAllocatorAware2] cpp_obj = make_shared[cAllocatorAware2](
            deref(self._cpp_obj)
        )
        return AllocatorAware2._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cAllocatorAware2](
            self._cpp_obj,
            (<AllocatorAware2>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AllocatorAware2()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cAllocatorAware2].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.AllocatorAware2"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cAllocatorAware2](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 2

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(AllocatorAware2 self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cAllocatorAware2](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(AllocatorAware2 self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAllocatorAware2]()
        with nogil:
            needed = serializer.cdeserialize[cAllocatorAware2](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.AllocatorAware2, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.AllocatorAware2, self)
@__cython.auto_pickle(False)
cdef class TypedefStruct(thrift.py3.types.Struct):
    def __init__(TypedefStruct self, **kwargs):
        self._cpp_obj = make_shared[cTypedefStruct]()
        self._fields_setter = _fbthrift_types_fields.__TypedefStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(TypedefStruct self, **kwargs):
        if not kwargs:
            return self
        cdef TypedefStruct __fbthrift_inst = TypedefStruct.__new__(TypedefStruct)
        __fbthrift_inst._cpp_obj = make_shared[cTypedefStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TypedefStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("TypedefStruct", {
          "i32_field": deref(self._cpp_obj).i32_field_ref().has_value(),
          "IntTypedef_field": deref(self._cpp_obj).IntTypedef_field_ref().has_value(),
          "UintTypedef_field": deref(self._cpp_obj).UintTypedef_field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cTypedefStruct] cpp_obj):
        __fbthrift_inst = <TypedefStruct>TypedefStruct.__new__(TypedefStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline i32_field_impl(self):

        return deref(self._cpp_obj).i32_field_ref().value()

    @property
    def i32_field(self):
        return self.i32_field_impl()

    cdef inline IntTypedef_field_impl(self):

        return deref(self._cpp_obj).IntTypedef_field_ref().value()

    @property
    def IntTypedef_field(self):
        return self.IntTypedef_field_impl()

    cdef inline UintTypedef_field_impl(self):

        return deref(self._cpp_obj).UintTypedef_field_ref().value()

    @property
    def UintTypedef_field(self):
        return self.UintTypedef_field_impl()


    def __hash__(TypedefStruct self):
        return super().__hash__()

    def __repr__(TypedefStruct self):
        return super().__repr__()

    def __str__(TypedefStruct self):
        return super().__str__()


    def __copy__(TypedefStruct self):
        cdef shared_ptr[cTypedefStruct] cpp_obj = make_shared[cTypedefStruct](
            deref(self._cpp_obj)
        )
        return TypedefStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cTypedefStruct](
            self._cpp_obj,
            (<TypedefStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__TypedefStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cTypedefStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.TypedefStruct"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cTypedefStruct](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 3

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(TypedefStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cTypedefStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(TypedefStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cTypedefStruct]()
        with nogil:
            needed = serializer.cdeserialize[cTypedefStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.TypedefStruct, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.TypedefStruct, self)
@__cython.auto_pickle(False)
cdef class StructWithDoubleUnderscores(thrift.py3.types.Struct):
    def __init__(StructWithDoubleUnderscores self, **kwargs):
        self._cpp_obj = make_shared[cStructWithDoubleUnderscores]()
        self._fields_setter = _fbthrift_types_fields.__StructWithDoubleUnderscores_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(StructWithDoubleUnderscores self, **kwargs):
        if not kwargs:
            return self
        cdef StructWithDoubleUnderscores __fbthrift_inst = StructWithDoubleUnderscores.__new__(StructWithDoubleUnderscores)
        __fbthrift_inst._cpp_obj = make_shared[cStructWithDoubleUnderscores](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__StructWithDoubleUnderscores_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return _fbthrift_IsSet("StructWithDoubleUnderscores", {
          "__field": deref(self._cpp_obj).__field_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cStructWithDoubleUnderscores] cpp_obj):
        __fbthrift_inst = <StructWithDoubleUnderscores>StructWithDoubleUnderscores.__new__(StructWithDoubleUnderscores)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline __field_impl(self):

        return deref(self._cpp_obj).__field_ref().value()

    @property
    def __field(self):
        return self.__field_impl()


    def __hash__(StructWithDoubleUnderscores self):
        return super().__hash__()

    def __repr__(StructWithDoubleUnderscores self):
        return super().__repr__()

    def __str__(StructWithDoubleUnderscores self):
        return super().__str__()


    def __copy__(StructWithDoubleUnderscores self):
        cdef shared_ptr[cStructWithDoubleUnderscores] cpp_obj = make_shared[cStructWithDoubleUnderscores](
            deref(self._cpp_obj)
        )
        return StructWithDoubleUnderscores._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cStructWithDoubleUnderscores](
            self._cpp_obj,
            (<StructWithDoubleUnderscores>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithDoubleUnderscores()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cStructWithDoubleUnderscores].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.StructWithDoubleUnderscores"

    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx):
        return __sv_to_str(__get_field_name_by_index[cStructWithDoubleUnderscores](idx))

    @classmethod
    def _fbthrift_get_struct_size(cls):
        return 1

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(StructWithDoubleUnderscores self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cStructWithDoubleUnderscores](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(StructWithDoubleUnderscores self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithDoubleUnderscores]()
        with nogil:
            needed = serializer.cdeserialize[cStructWithDoubleUnderscores](buf, self._cpp_obj.get(), proto)
        return needed

    def _to_python(self):
        import importlib
        import thrift.python.converter
        python_types = importlib.import_module(
            "apache.thrift.fixtures.types.module.thrift_types"
        )
        return thrift.python.converter.to_python_struct(python_types.StructWithDoubleUnderscores, self)

    def _to_py3(self):
        return self

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        py_deprecated_types = importlib.import_module("module.ttypes")
        return thrift.util.converter.to_py_struct(py_deprecated_types.StructWithDoubleUnderscores, self)
@__cython.auto_pickle(False)
cdef class std_unordered_map__Map__i32_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, std_unordered_map__Map__i32_string):
            self._cpp_obj = (<std_unordered_map__Map__i32_string> items)._cpp_obj
        else:
            self._cpp_obj = std_unordered_map__Map__i32_string._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[std_unordered_map[cint32_t,string]] c_items):
        __fbthrift_inst = <std_unordered_map__Map__i32_string>std_unordered_map__Map__i32_string.__new__(std_unordered_map__Map__i32_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_unordered_map__Map__i32_string self):
        cdef shared_ptr[std_unordered_map[cint32_t,string]] cpp_obj = make_shared[std_unordered_map[cint32_t,string]](
            deref(self._cpp_obj)
        )
        return std_unordered_map__Map__i32_string._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_unordered_map[cint32_t,string]] _make_instance(object items) except *:
        cdef shared_ptr[std_unordered_map[cint32_t,string]] c_inst = make_shared[std_unordered_map[cint32_t,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map[cint32_t,string]] itr = __map_iter[std_unordered_map[cint32_t,string]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map[cint32_t,string]] itr = __map_iter[std_unordered_map[cint32_t,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map[cint32_t,string]] itr = __map_iter[std_unordered_map[cint32_t,string]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_unordered_map__Map__i32_string()

Mapping.register(std_unordered_map__Map__i32_string)

@__cython.auto_pickle(False)
cdef class List__i64(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__i64):
            self._cpp_obj = (<List__i64> items)._cpp_obj
        else:
            self._cpp_obj = List__i64._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[cint64_t]] c_items):
        __fbthrift_inst = <List__i64>List__i64.__new__(List__i64)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__i64 self):
        cdef shared_ptr[vector[cint64_t]] cpp_obj = make_shared[vector[cint64_t]](
            deref(self._cpp_obj)
        )
        return List__i64._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint64_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__i64._fbthrift_create(
            __list_slice[vector[cint64_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint64_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint64_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint64_t citem = item
        return __list_count[vector[cint64_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__i64()


Sequence.register(List__i64)

@__cython.auto_pickle(False)
cdef class Map__binary_i64(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__binary_i64):
            self._cpp_obj = (<Map__binary_i64> items)._cpp_obj
        else:
            self._cpp_obj = Map__binary_i64._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cmap[string,cint64_t]] c_items):
        __fbthrift_inst = <Map__binary_i64>Map__binary_i64.__new__(Map__binary_i64)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__binary_i64 self):
        cdef shared_ptr[cmap[string,cint64_t]] cpp_obj = make_shared[cmap[string,cint64_t]](
            deref(self._cpp_obj)
        )
        return Map__binary_i64._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cint64_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cint64_t]] c_inst = make_shared[cmap[string,cint64_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, bytes):
                    raise TypeError(f"{key!r} is not of type bytes")
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint64_t> item

                deref(c_inst)[key] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, bytes):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef cint64_t citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint64_t]] itr = __map_iter[cmap[string,cint64_t]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem)

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint64_t]] itr = __map_iter[cmap[string,cint64_t]](self._cpp_obj)
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint64_t]] itr = __map_iter[cmap[string,cint64_t]](self._cpp_obj)
        cdef string ckey
        cdef cint64_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__binary_i64()

Mapping.register(Map__binary_i64)

@__cython.auto_pickle(False)
cdef class List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__i32):
            self._cpp_obj = (<List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[cint32_t]] c_items):
        __fbthrift_inst = <List__i32>List__i32.__new__(List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__i32 self):
        cdef shared_ptr[vector[cint32_t]] cpp_obj = make_shared[vector[cint32_t]](
            deref(self._cpp_obj)
        )
        return List__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cint32_t]] c_inst = make_shared[vector[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__i32._fbthrift_create(
            __list_slice[vector[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[vector[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__i32()


Sequence.register(List__i32)

@__cython.auto_pickle(False)
cdef class std_list__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, std_list__List__i32):
            self._cpp_obj = (<std_list__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = std_list__List__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[std_list[cint32_t]] c_items):
        __fbthrift_inst = <std_list__List__i32>std_list__List__i32.__new__(std_list__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_list__List__i32 self):
        cdef shared_ptr[std_list[cint32_t]] cpp_obj = make_shared[std_list[cint32_t]](
            deref(self._cpp_obj)
        )
        return std_list__List__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_list[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[std_list[cint32_t]] c_inst = make_shared[std_list[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return std_list__List__i32._fbthrift_create(
            __list_slice[std_list[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[std_list[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[std_list[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_list__List__i32()


Sequence.register(std_list__List__i32)

@__cython.auto_pickle(False)
cdef class std_deque__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, std_deque__List__i32):
            self._cpp_obj = (<std_deque__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = std_deque__List__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[std_deque[cint32_t]] c_items):
        __fbthrift_inst = <std_deque__List__i32>std_deque__List__i32.__new__(std_deque__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_deque__List__i32 self):
        cdef shared_ptr[std_deque[cint32_t]] cpp_obj = make_shared[std_deque[cint32_t]](
            deref(self._cpp_obj)
        )
        return std_deque__List__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_deque[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[std_deque[cint32_t]] c_inst = make_shared[std_deque[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return std_deque__List__i32._fbthrift_create(
            __list_slice[std_deque[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[std_deque[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[std_deque[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_deque__List__i32()


Sequence.register(std_deque__List__i32)

@__cython.auto_pickle(False)
cdef class folly_fbvector__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, folly_fbvector__List__i32):
            self._cpp_obj = (<folly_fbvector__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = folly_fbvector__List__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[folly_fbvector[cint32_t]] c_items):
        __fbthrift_inst = <folly_fbvector__List__i32>folly_fbvector__List__i32.__new__(folly_fbvector__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_fbvector__List__i32 self):
        cdef shared_ptr[folly_fbvector[cint32_t]] cpp_obj = make_shared[folly_fbvector[cint32_t]](
            deref(self._cpp_obj)
        )
        return folly_fbvector__List__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_fbvector[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[folly_fbvector[cint32_t]] c_inst = make_shared[folly_fbvector[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return folly_fbvector__List__i32._fbthrift_create(
            __list_slice[folly_fbvector[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[folly_fbvector[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[folly_fbvector[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_fbvector__List__i32()


Sequence.register(folly_fbvector__List__i32)

@__cython.auto_pickle(False)
cdef class folly_small_vector__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, folly_small_vector__List__i32):
            self._cpp_obj = (<folly_small_vector__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = folly_small_vector__List__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[folly_small_vector[cint32_t]] c_items):
        __fbthrift_inst = <folly_small_vector__List__i32>folly_small_vector__List__i32.__new__(folly_small_vector__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_small_vector__List__i32 self):
        cdef shared_ptr[folly_small_vector[cint32_t]] cpp_obj = make_shared[folly_small_vector[cint32_t]](
            deref(self._cpp_obj)
        )
        return folly_small_vector__List__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_small_vector[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[folly_small_vector[cint32_t]] c_inst = make_shared[folly_small_vector[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return folly_small_vector__List__i32._fbthrift_create(
            __list_slice[folly_small_vector[cint32_t]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[folly_small_vector[cint32_t]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[folly_small_vector[cint32_t]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_small_vector__List__i32()


Sequence.register(folly_small_vector__List__i32)

@__cython.auto_pickle(False)
cdef class folly_sorted_vector_set__Set__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, folly_sorted_vector_set__Set__i32):
            self._cpp_obj = (<folly_sorted_vector_set__Set__i32> items)._cpp_obj
        else:
            self._cpp_obj = folly_sorted_vector_set__Set__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[folly_sorted_vector_set[cint32_t]] c_items):
        __fbthrift_inst = <folly_sorted_vector_set__Set__i32>folly_sorted_vector_set__Set__i32.__new__(folly_sorted_vector_set__Set__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_sorted_vector_set__Set__i32 self):
        cdef shared_ptr[folly_sorted_vector_set[cint32_t]] cpp_obj = make_shared[folly_sorted_vector_set[cint32_t]](
            deref(self._cpp_obj)
        )
        return folly_sorted_vector_set__Set__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_sorted_vector_set[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[folly_sorted_vector_set[cint32_t]] c_inst = make_shared[folly_sorted_vector_set[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[folly_sorted_vector_set[cint32_t]] itr = __set_iter[folly_sorted_vector_set[cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield citem

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, folly_sorted_vector_set__Set__i32):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<folly_sorted_vector_set__Set__i32> other)._cpp_obj,
                op,
            )
        return self._fbthrift_py_richcmp(other, op)

    cdef _fbthrift_do_set_op(self, other, __cSetOp op):
        if not isinstance(other, folly_sorted_vector_set__Set__i32):
            other = folly_sorted_vector_set__Set__i32(other)
        cdef shared_ptr[folly_sorted_vector_set[cint32_t]] result
        return folly_sorted_vector_set__Set__i32._fbthrift_create(__set_op[folly_sorted_vector_set[cint32_t]](
            self._cpp_obj,
            (<folly_sorted_vector_set__Set__i32>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_sorted_vector_set__Set__i32()


Set.register(folly_sorted_vector_set__Set__i32)

@__cython.auto_pickle(False)
cdef class folly_sorted_vector_map__Map__i32_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, folly_sorted_vector_map__Map__i32_string):
            self._cpp_obj = (<folly_sorted_vector_map__Map__i32_string> items)._cpp_obj
        else:
            self._cpp_obj = folly_sorted_vector_map__Map__i32_string._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[folly_sorted_vector_map[cint32_t,string]] c_items):
        __fbthrift_inst = <folly_sorted_vector_map__Map__i32_string>folly_sorted_vector_map__Map__i32_string.__new__(folly_sorted_vector_map__Map__i32_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_sorted_vector_map__Map__i32_string self):
        cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] cpp_obj = make_shared[folly_sorted_vector_map[cint32_t,string]](
            deref(self._cpp_obj)
        )
        return folly_sorted_vector_map__Map__i32_string._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] _make_instance(object items) except *:
        cdef shared_ptr[folly_sorted_vector_map[cint32_t,string]] c_inst = make_shared[folly_sorted_vector_map[cint32_t,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key] = item.encode('UTF-8')
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef string citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[folly_sorted_vector_map[cint32_t,string]] itr = __map_iter[folly_sorted_vector_map[cint32_t,string]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[folly_sorted_vector_map[cint32_t,string]] itr = __map_iter[folly_sorted_vector_map[cint32_t,string]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def items(self):
        if not self:
            return
        cdef __map_iter[folly_sorted_vector_map[cint32_t,string]] itr = __map_iter[folly_sorted_vector_map[cint32_t,string]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, bytes(citem).decode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_sorted_vector_map__Map__i32_string()

Mapping.register(folly_sorted_vector_map__Map__i32_string)

@__cython.auto_pickle(False)
cdef class std_list_int32_t__List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, std_list_int32_t__List__i32):
            self._cpp_obj = (<std_list_int32_t__List__i32> items)._cpp_obj
        else:
            self._cpp_obj = std_list_int32_t__List__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[std_list_int32_t] c_items):
        __fbthrift_inst = <std_list_int32_t__List__i32>std_list_int32_t__List__i32.__new__(std_list_int32_t__List__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_list_int32_t__List__i32 self):
        cdef shared_ptr[std_list_int32_t] cpp_obj = make_shared[std_list_int32_t](
            deref(self._cpp_obj)
        )
        return std_list_int32_t__List__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_list_int32_t] _make_instance(object items) except *:
        cdef shared_ptr[std_list_int32_t] c_inst = make_shared[std_list_int32_t]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return std_list_int32_t__List__i32._fbthrift_create(
            __list_slice[std_list_int32_t](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef cint32_t citem = 0
        __list_getitem(self._cpp_obj, index, citem)
        return citem

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, int):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cint32_t citem = item
        cdef std_libcpp.optional[size_t] found = __list_index[std_list_int32_t](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cint32_t citem = item
        return __list_count[std_list_int32_t](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_list_int32_t__List__i32()


Sequence.register(std_list_int32_t__List__i32)

@__cython.auto_pickle(False)
cdef class Map__string_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_i32):
            self._cpp_obj = (<Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cmap[string,cint32_t]] c_items):
        __fbthrift_inst = <Map__string_i32>Map__string_i32.__new__(Map__string_i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_i32 self):
        cdef shared_ptr[cmap[string,cint32_t]] cpp_obj = make_shared[cmap[string,cint32_t]](
            deref(self._cpp_obj)
        )
        return Map__string_i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cint32_t]] c_inst = make_shared[cmap[string,cint32_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key.encode('UTF-8')] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, str):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef string ckey = key.encode('UTF-8')
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef cint32_t citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint32_t]] itr = __map_iter[cmap[string,cint32_t]](self._cpp_obj)
        cdef string citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield bytes(citem).decode('UTF-8')

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef string ckey = key.encode('UTF-8')
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint32_t]] itr = __map_iter[cmap[string,cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[string,cint32_t]] itr = __map_iter[cmap[string,cint32_t]](self._cpp_obj)
        cdef string ckey
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey.data().decode('UTF-8'), citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_i32()

Mapping.register(Map__string_i32)

@__cython.auto_pickle(False)
cdef class List__std_unordered_map__Map__i32_string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__std_unordered_map__Map__i32_string):
            self._cpp_obj = (<List__std_unordered_map__Map__i32_string> items)._cpp_obj
        else:
            self._cpp_obj = List__std_unordered_map__Map__i32_string._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[std_unordered_map[cint32_t,string]]] c_items):
        __fbthrift_inst = <List__std_unordered_map__Map__i32_string>List__std_unordered_map__Map__i32_string.__new__(List__std_unordered_map__Map__i32_string)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__std_unordered_map__Map__i32_string self):
        cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] cpp_obj = make_shared[vector[std_unordered_map[cint32_t,string]]](
            deref(self._cpp_obj)
        )
        return List__std_unordered_map__Map__i32_string._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[std_unordered_map[cint32_t,string]]] c_inst = make_shared[vector[std_unordered_map[cint32_t,string]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Mapping[int, str]")
                if not isinstance(item, std_unordered_map__Map__i32_string):
                    item = std_unordered_map__Map__i32_string(item)
                deref(c_inst).push_back(deref((<std_unordered_map__Map__i32_string>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__std_unordered_map__Map__i32_string._fbthrift_create(
            __list_slice[vector[std_unordered_map[cint32_t,string]]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[std_unordered_map[cint32_t,string]] citem
        __list_getitem(self._cpp_obj, index, citem)
        return std_unordered_map__Map__i32_string._fbthrift_create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, std_unordered_map__Map__i32_string):
            return item
        try:
            return std_unordered_map__Map__i32_string(item)
        except:
            pass

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef std_unordered_map[cint32_t,string] citem = deref((<std_unordered_map__Map__i32_string>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[std_unordered_map[cint32_t,string]]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef std_unordered_map[cint32_t,string] citem = deref((<std_unordered_map__Map__i32_string>item)._cpp_obj)
        return __list_count[vector[std_unordered_map[cint32_t,string]]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__std_unordered_map__Map__i32_string()


Sequence.register(List__std_unordered_map__Map__i32_string)

@__cython.auto_pickle(False)
cdef class Map__i32_IncompleteMapDep(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_IncompleteMapDep):
            self._cpp_obj = (<Map__i32_IncompleteMapDep> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_IncompleteMapDep._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cmap[cint32_t,cIncompleteMapDep]] c_items):
        __fbthrift_inst = <Map__i32_IncompleteMapDep>Map__i32_IncompleteMapDep.__new__(Map__i32_IncompleteMapDep)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_IncompleteMapDep self):
        cdef shared_ptr[cmap[cint32_t,cIncompleteMapDep]] cpp_obj = make_shared[cmap[cint32_t,cIncompleteMapDep]](
            deref(self._cpp_obj)
        )
        return Map__i32_IncompleteMapDep._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,cIncompleteMapDep]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,cIncompleteMapDep]] c_inst = make_shared[cmap[cint32_t,cIncompleteMapDep]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, IncompleteMapDep):
                    raise TypeError(f"{item!r} is not of type IncompleteMapDep")

                deref(c_inst)[key] = deref((<IncompleteMapDep>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[cIncompleteMapDep] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return IncompleteMapDep._fbthrift_create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,cIncompleteMapDep]] itr = __map_iter[cmap[cint32_t,cIncompleteMapDep]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,cIncompleteMapDep]] itr = __map_iter[cmap[cint32_t,cIncompleteMapDep]](self._cpp_obj)
        cdef shared_ptr[cIncompleteMapDep] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield IncompleteMapDep._fbthrift_create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,cIncompleteMapDep]] itr = __map_iter[cmap[cint32_t,cIncompleteMapDep]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef shared_ptr[cIncompleteMapDep] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, IncompleteMapDep._fbthrift_create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_IncompleteMapDep()

Mapping.register(Map__i32_IncompleteMapDep)

@__cython.auto_pickle(False)
cdef class std_unordered_map__Map__i32_CompleteMapDep(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, std_unordered_map__Map__i32_CompleteMapDep):
            self._cpp_obj = (<std_unordered_map__Map__i32_CompleteMapDep> items)._cpp_obj
        else:
            self._cpp_obj = std_unordered_map__Map__i32_CompleteMapDep._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[std_unordered_map[cint32_t,cCompleteMapDep]] c_items):
        __fbthrift_inst = <std_unordered_map__Map__i32_CompleteMapDep>std_unordered_map__Map__i32_CompleteMapDep.__new__(std_unordered_map__Map__i32_CompleteMapDep)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(std_unordered_map__Map__i32_CompleteMapDep self):
        cdef shared_ptr[std_unordered_map[cint32_t,cCompleteMapDep]] cpp_obj = make_shared[std_unordered_map[cint32_t,cCompleteMapDep]](
            deref(self._cpp_obj)
        )
        return std_unordered_map__Map__i32_CompleteMapDep._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[std_unordered_map[cint32_t,cCompleteMapDep]] _make_instance(object items) except *:
        cdef shared_ptr[std_unordered_map[cint32_t,cCompleteMapDep]] c_inst = make_shared[std_unordered_map[cint32_t,cCompleteMapDep]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, CompleteMapDep):
                    raise TypeError(f"{item!r} is not of type CompleteMapDep")

                deref(c_inst)[key] = deref((<CompleteMapDep>item)._cpp_obj)
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef shared_ptr[cCompleteMapDep] citem
        __map_getitem(self._cpp_obj, ckey, citem)
        return CompleteMapDep._fbthrift_create(citem)

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map[cint32_t,cCompleteMapDep]] itr = __map_iter[std_unordered_map[cint32_t,cCompleteMapDep]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map[cint32_t,cCompleteMapDep]] itr = __map_iter[std_unordered_map[cint32_t,cCompleteMapDep]](self._cpp_obj)
        cdef shared_ptr[cCompleteMapDep] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield CompleteMapDep._fbthrift_create(citem)

    def items(self):
        if not self:
            return
        cdef __map_iter[std_unordered_map[cint32_t,cCompleteMapDep]] itr = __map_iter[std_unordered_map[cint32_t,cCompleteMapDep]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef shared_ptr[cCompleteMapDep] citem
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, CompleteMapDep._fbthrift_create(citem))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__std_unordered_map__Map__i32_CompleteMapDep()

Mapping.register(std_unordered_map__Map__i32_CompleteMapDep)

@__cython.auto_pickle(False)
cdef class _std_list__List__IncompleteListDep(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, _std_list__List__IncompleteListDep):
            self._cpp_obj = (<_std_list__List__IncompleteListDep> items)._cpp_obj
        else:
            self._cpp_obj = _std_list__List__IncompleteListDep._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[_std_list[cIncompleteListDep]] c_items):
        __fbthrift_inst = <_std_list__List__IncompleteListDep>_std_list__List__IncompleteListDep.__new__(_std_list__List__IncompleteListDep)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(_std_list__List__IncompleteListDep self):
        cdef shared_ptr[_std_list[cIncompleteListDep]] cpp_obj = make_shared[_std_list[cIncompleteListDep]](
            deref(self._cpp_obj)
        )
        return _std_list__List__IncompleteListDep._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[_std_list[cIncompleteListDep]] _make_instance(object items) except *:
        cdef shared_ptr[_std_list[cIncompleteListDep]] c_inst = make_shared[_std_list[cIncompleteListDep]]()
        if items is not None:
            for item in items:
                if not isinstance(item, IncompleteListDep):
                    raise TypeError(f"{item!r} is not of type IncompleteListDep")
                deref(c_inst).push_back(deref((<IncompleteListDep>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return _std_list__List__IncompleteListDep._fbthrift_create(
            __list_slice[_std_list[cIncompleteListDep]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cIncompleteListDep] citem
        __list_getitem(self._cpp_obj, index, citem)
        return IncompleteListDep._fbthrift_create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, IncompleteListDep):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cIncompleteListDep citem = deref((<IncompleteListDep>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[_std_list[cIncompleteListDep]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cIncompleteListDep citem = deref((<IncompleteListDep>item)._cpp_obj)
        return __list_count[_std_list[cIncompleteListDep]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection___std_list__List__IncompleteListDep()


Sequence.register(_std_list__List__IncompleteListDep)

@__cython.auto_pickle(False)
cdef class folly_small_vector__List__CompleteListDep(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, folly_small_vector__List__CompleteListDep):
            self._cpp_obj = (<folly_small_vector__List__CompleteListDep> items)._cpp_obj
        else:
            self._cpp_obj = folly_small_vector__List__CompleteListDep._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[folly_small_vector[cCompleteListDep]] c_items):
        __fbthrift_inst = <folly_small_vector__List__CompleteListDep>folly_small_vector__List__CompleteListDep.__new__(folly_small_vector__List__CompleteListDep)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(folly_small_vector__List__CompleteListDep self):
        cdef shared_ptr[folly_small_vector[cCompleteListDep]] cpp_obj = make_shared[folly_small_vector[cCompleteListDep]](
            deref(self._cpp_obj)
        )
        return folly_small_vector__List__CompleteListDep._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[folly_small_vector[cCompleteListDep]] _make_instance(object items) except *:
        cdef shared_ptr[folly_small_vector[cCompleteListDep]] c_inst = make_shared[folly_small_vector[cCompleteListDep]]()
        if items is not None:
            for item in items:
                if not isinstance(item, CompleteListDep):
                    raise TypeError(f"{item!r} is not of type CompleteListDep")
                deref(c_inst).push_back(deref((<CompleteListDep>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return folly_small_vector__List__CompleteListDep._fbthrift_create(
            __list_slice[folly_small_vector[cCompleteListDep]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cCompleteListDep] citem
        __list_getitem(self._cpp_obj, index, citem)
        return CompleteListDep._fbthrift_create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, CompleteListDep):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cCompleteListDep citem = deref((<CompleteListDep>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[folly_small_vector[cCompleteListDep]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cCompleteListDep citem = deref((<CompleteListDep>item)._cpp_obj)
        return __list_count[folly_small_vector[cCompleteListDep]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__folly_small_vector__List__CompleteListDep()


Sequence.register(folly_small_vector__List__CompleteListDep)

@__cython.auto_pickle(False)
cdef class List__AdaptedListDep(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__AdaptedListDep):
            self._cpp_obj = (<List__AdaptedListDep> items)._cpp_obj
        else:
            self._cpp_obj = List__AdaptedListDep._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[cAdaptedListDep]] c_items):
        __fbthrift_inst = <List__AdaptedListDep>List__AdaptedListDep.__new__(List__AdaptedListDep)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__AdaptedListDep self):
        cdef shared_ptr[vector[cAdaptedListDep]] cpp_obj = make_shared[vector[cAdaptedListDep]](
            deref(self._cpp_obj)
        )
        return List__AdaptedListDep._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cAdaptedListDep]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cAdaptedListDep]] c_inst = make_shared[vector[cAdaptedListDep]]()
        if items is not None:
            for item in items:
                if not isinstance(item, AdaptedListDep):
                    raise TypeError(f"{item!r} is not of type AdaptedListDep")
                deref(c_inst).push_back(deref((<AdaptedListDep>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__AdaptedListDep._fbthrift_create(
            __list_slice[vector[cAdaptedListDep]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cAdaptedListDep] citem
        __list_getitem(self._cpp_obj, index, citem)
        return AdaptedListDep._fbthrift_create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, AdaptedListDep):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cAdaptedListDep citem = deref((<AdaptedListDep>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cAdaptedListDep]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cAdaptedListDep citem = deref((<AdaptedListDep>item)._cpp_obj)
        return __list_count[vector[cAdaptedListDep]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__AdaptedListDep()


Sequence.register(List__AdaptedListDep)

@__cython.auto_pickle(False)
cdef class List__DependentAdaptedListDep(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__DependentAdaptedListDep):
            self._cpp_obj = (<List__DependentAdaptedListDep> items)._cpp_obj
        else:
            self._cpp_obj = List__DependentAdaptedListDep._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[vector[cDependentAdaptedListDep]] c_items):
        __fbthrift_inst = <List__DependentAdaptedListDep>List__DependentAdaptedListDep.__new__(List__DependentAdaptedListDep)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(List__DependentAdaptedListDep self):
        cdef shared_ptr[vector[cDependentAdaptedListDep]] cpp_obj = make_shared[vector[cDependentAdaptedListDep]](
            deref(self._cpp_obj)
        )
        return List__DependentAdaptedListDep._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cDependentAdaptedListDep]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cDependentAdaptedListDep]] c_inst = make_shared[vector[cDependentAdaptedListDep]]()
        if items is not None:
            for item in items:
                if not isinstance(item, DependentAdaptedListDep):
                    raise TypeError(f"{item!r} is not of type DependentAdaptedListDep")
                deref(c_inst).push_back(deref((<DependentAdaptedListDep>item)._cpp_obj))
        return c_inst

    cdef _get_slice(self, slice index_obj):
        cdef int start, stop, step
        start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
        return List__DependentAdaptedListDep._fbthrift_create(
            __list_slice[vector[cDependentAdaptedListDep]](self._cpp_obj, start, stop, step)
        )

    cdef _get_single_item(self, size_t index):
        cdef shared_ptr[cDependentAdaptedListDep] citem
        __list_getitem(self._cpp_obj, index, citem)
        return DependentAdaptedListDep._fbthrift_create(citem)

    cdef _check_item_type(self, item):
        if not self or item is None:
            return
        if isinstance(item, DependentAdaptedListDep):
            return item

    def index(self, item, start=0, stop=None):
        err = ValueError(f'{item} is not in list')
        item = self._check_item_type(item)
        if item is None:
            raise err
        cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
        cdef cDependentAdaptedListDep citem = deref((<DependentAdaptedListDep>item)._cpp_obj)
        cdef std_libcpp.optional[size_t] found = __list_index[vector[cDependentAdaptedListDep]](self._cpp_obj, indices[0], indices[1], citem)
        if not found.has_value():
            raise err
        return found.value()

    def count(self, item):
        item = self._check_item_type(item)
        if item is None:
            return 0
        cdef cDependentAdaptedListDep citem = deref((<DependentAdaptedListDep>item)._cpp_obj)
        return __list_count[vector[cDependentAdaptedListDep]](self._cpp_obj, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__DependentAdaptedListDep()


Sequence.register(List__DependentAdaptedListDep)

@__cython.auto_pickle(False)
cdef class Set__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__i32):
            self._cpp_obj = (<Set__i32> items)._cpp_obj
        else:
            self._cpp_obj = Set__i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cset[cint32_t]] c_items):
        __fbthrift_inst = <Set__i32>Set__i32.__new__(Set__i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Set__i32 self):
        cdef shared_ptr[cset[cint32_t]] cpp_obj = make_shared[cset[cint32_t]](
            deref(self._cpp_obj)
        )
        return Set__i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cint32_t]] c_inst = make_shared[cset[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef __set_iter[cset[cint32_t]] itr = __set_iter[cset[cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNext(self._cpp_obj, citem)
            yield citem

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, int op):
        if isinstance(other, Set__i32):
            # C level comparisons
            return __setcmp(
                self._cpp_obj,
                (<Set__i32> other)._cpp_obj,
                op,
            )
        return self._fbthrift_py_richcmp(other, op)

    cdef _fbthrift_do_set_op(self, other, __cSetOp op):
        if not isinstance(other, Set__i32):
            other = Set__i32(other)
        cdef shared_ptr[cset[cint32_t]] result
        return Set__i32._fbthrift_create(__set_op[cset[cint32_t]](
            self._cpp_obj,
            (<Set__i32>other)._cpp_obj,
            op,
        ))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__i32()


Set.register(Set__i32)

@__cython.auto_pickle(False)
cdef class Map__i32_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_i32):
            self._cpp_obj = (<Map__i32_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_i32._make_instance(items)

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cmap[cint32_t,cint32_t]] c_items):
        __fbthrift_inst = <Map__i32_i32>Map__i32_i32.__new__(Map__i32_i32)
        __fbthrift_inst._cpp_obj = cmove(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_i32 self):
        cdef shared_ptr[cmap[cint32_t,cint32_t]] cpp_obj = make_shared[cmap[cint32_t,cint32_t]](
            deref(self._cpp_obj)
        )
        return Map__i32_i32._fbthrift_create(cmove(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,cint32_t]] c_inst = make_shared[cmap[cint32_t,cint32_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key] = item
        return c_inst

    cdef _check_key_type(self, key):
        if not self or key is None:
            return
        if isinstance(key, int):
            return key

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        key = self._check_key_type(key)
        if key is None:
            raise err
        cdef cint32_t ckey = key
        if not __map_contains(self._cpp_obj, ckey):
            raise err
        cdef cint32_t citem = 0
        __map_getitem(self._cpp_obj, ckey, citem)
        return citem

    def __iter__(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,cint32_t]] itr = __map_iter[cmap[cint32_t,cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextKey(self._cpp_obj, citem)
            yield citem

    def __contains__(self, key):
        key = self._check_key_type(key)
        if key is None:
            return False
        cdef cint32_t ckey = key
        return __map_contains(self._cpp_obj, ckey)

    def values(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,cint32_t]] itr = __map_iter[cmap[cint32_t,cint32_t]](self._cpp_obj)
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextValue(self._cpp_obj, citem)
            yield citem

    def items(self):
        if not self:
            return
        cdef __map_iter[cmap[cint32_t,cint32_t]] itr = __map_iter[cmap[cint32_t,cint32_t]](self._cpp_obj)
        cdef cint32_t ckey = 0
        cdef cint32_t citem = 0
        for i in range(deref(self._cpp_obj).size()):
            itr.genNextItem(self._cpp_obj, ckey, citem)
            yield (ckey, citem)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_i32()

Mapping.register(Map__i32_i32)

TBinary = bytes
IntTypedef = int
UintTypedef = int
