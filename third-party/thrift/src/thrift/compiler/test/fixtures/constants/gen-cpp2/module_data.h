/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "thrift/compiler/test/fixtures/constants/gen-cpp2/module_types.h"

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::cpp2::EmptyEnum> {
  using type = ::cpp2::EmptyEnum;
  static constexpr const std::size_t size = 0;
  static constexpr std::array<type, size> values = {{
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
  }};
};

template <> struct TEnumDataStorage<::cpp2::City> {
  using type = ::cpp2::City;
  static constexpr const std::size_t size = 4;
  static constexpr std::array<type, size> values = {{
      type::NYC,
      type::MPK,
      type::SEA,
      type::LON,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "NYC",
      "MPK",
      "SEA",
      "LON",
  }};
};

template <> struct TEnumDataStorage<::cpp2::Company> {
  using type = ::cpp2::Company;
  static constexpr const std::size_t size = 4;
  static constexpr std::array<type, size> values = {{
      type::FACEBOOK,
      type::WHATSAPP,
      type::OCULUS,
      type::INSTAGRAM,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "FACEBOOK",
      "WHATSAPP",
      "OCULUS",
      "INSTAGRAM",
  }};
};

template <> struct TEnumDataStorage<::cpp2::union1::Type> {
  using type = ::cpp2::union1::Type;
  static constexpr const std::size_t size = 2;
  static constexpr std::array<type, size> values = {{
      type::i,
      type::d,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "i",
      "d",
  }};
};

template <> struct TEnumDataStorage<::cpp2::union2::Type> {
  using type = ::cpp2::union2::Type;
  static constexpr const std::size_t size = 4;
  static constexpr std::array<type, size> values = {{
      type::i,
      type::d,
      type::s,
      type::u,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "i",
      "d",
      "s",
      "u",
  }};
};

template <> struct TStructDataStorage<::cpp2::Internship> {
  static constexpr const std::size_t fields_size = 5;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::Range> {
  static constexpr const std::size_t fields_size = 2;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::struct1> {
  static constexpr const std::size_t fields_size = 2;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::struct2> {
  static constexpr const std::size_t fields_size = 4;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::struct3> {
  static constexpr const std::size_t fields_size = 3;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::struct4> {
  static constexpr const std::size_t fields_size = 3;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::union1> {
  static constexpr const std::size_t fields_size = 2;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::cpp2::union2> {
  static constexpr const std::size_t fields_size = 4;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

}} // apache::thrift
