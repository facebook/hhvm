Errors:
  [10:9-11] Type access is only valid for a class, `self`, or `this`. To relate type parameters and type constants, you likely want to use the 'with refinement' feature instead.
[(Class
    { c_span = [3:1-5:2]; c_annotation = (); c_mode = Mstrict; c_final = false; 
      c_is_xhp = false; c_has_xhp_keyword = false; c_kind = (Cclass Abstract); 
      c_name = ([3:16-17], "\\C"); c_tparams = []; c_extends = []; c_uses = []; 
      c_xhp_attr_uses = []; c_xhp_category = None; c_reqs = []; c_implements = []; 
      c_consts = [];
      c_typeconsts =
      [{ c_tconst_user_attributes = []; c_tconst_name = ([4:23-25], "TA"); 
         c_tconst_kind = (TCAbstract { c_atc_as_constraint = None; c_atc_super_constraint = None; c_atc_default = None }); 
         c_tconst_span = [4:3-26]; c_tconst_doc_comment = None; c_tconst_is_ctx = false }
        ];
      c_vars = []; c_methods = []; c_xhp_children = []; c_xhp_attrs = [];
      c_namespace =
      { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
        ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
        ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
      c_user_attributes = [{ ua_name = ([3:16-17], "__SupportDynamicType"); ua_params = [] }]; 
      c_file_attributes = []; c_docs_url = None; c_enum = None; c_doc_comment = None; 
      c_emit_id = None; c_internal = false; c_module = None; c_package = None });
  (Fun
     { fd_namespace =
       { Namespace_env.ns_ns_uses = <opaque>; ns_class_uses = <opaque>; 
         ns_fun_uses = <opaque>; ns_const_uses = <opaque>; ns_name = None; 
         ns_mode = Namespace_env.ForTypecheck; ns_disable_xhp_element_mangling = false };
       fd_file_attributes = []; fd_mode = Mstrict; fd_name = ([7:10-37], "\\taccess_tparam_where_clause");
       fd_fun =
       { f_span = [7:1-10:18]; f_readonly_this = None; f_annotation = (); 
         f_readonly_ret = None; f_tparams = []; f_ret = ((), (Some ([7:61-65], (Hprim Tvoid))));
         f_params =
         [{ param_annotation = (); param_type_hint = ((), (Some ([7:46-48], (Habstr "T1")))); 
            param_pos = [7:49-51]; param_name = "$x"; param_info = Param_required; 
            param_readonly = None; param_splat = None; param_callconv = Pnormal; 
            param_named = None; param_user_attributes = []; param_visibility = None };
           { param_annotation = (); param_type_hint = ((), (Some ([7:53-55], (Habstr "T2")))); 
             param_pos = [7:56-58]; param_name = "$y"; param_info = Param_required; 
             param_readonly = None; param_splat = None; param_callconv = Pnormal; 
             param_named = None; param_user_attributes = []; param_visibility = None }
           ];
         f_ctxs = None; f_unsafe_ctxs = None; f_body = { fb_ast = [([Pos.none], Noop)] }; 
         f_fun_kind = FSync; f_user_attributes = [{ ua_name = ([7:10-37], "__SupportDynamicType"); ua_params = [] }]; 
         f_external = false; f_doc_comment = None };
       fd_internal = false; fd_module = None;
       fd_tparams =
       [{ tp_variance = Invariant; tp_name = ([7:38-40], "T1"); tp_constraints = [(Constraint_as, ([7:38-40], (Happly (([7:38-40], "\\HH\\supportdyn"), [([7:38-40], Hmixed)]))))];
          tp_reified = Erased; tp_user_attributes = [] };
         { tp_variance = Invariant; tp_name = ([7:42-44], "T2"); tp_constraints = [(Constraint_as, ([7:42-44], (Happly (([7:42-44], "\\HH\\supportdyn"), [([7:42-44], Hmixed)]))))];
           tp_reified = Erased; tp_user_attributes = [] }
         ];
       fd_where_constraints =
       [(([9:3-5], (Habstr "T1")), Constraint_as, ([9:9-10], (Happly (([9:9-10], "\\C"), []))));
         (([10:3-5], (Habstr "T2")), Constraint_as, ([10:9-15], (Haccess (([10:9-11], (Habstr "T1")), [([10:13-15], "TA")]))))];
       fd_package = None })
  ]
