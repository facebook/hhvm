/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/enums/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "thrift/compiler/test/fixtures/enums/gen-cpp2/module_types.h"

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::enums::Metasyntactic> {
  using type = ::test::fixtures::enums::Metasyntactic;
  static constexpr const std::size_t size = 5;
  static constexpr std::array<type, size> values = {{
      type::FOO,
      type::BAR,
      type::BAZ,
      type::BAX,
      type::Unspecified,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "FOO",
      "BAR",
      "BAZ",
      "BAX",
      "Unspecified",
  }};
};

template <> struct TEnumDataStorage<::test::fixtures::enums::MyEnum1> {
  using type = ::test::fixtures::enums::MyEnum1;
  static constexpr const std::size_t size = 6;
  static constexpr std::array<type, size> values = {{
      type::ME1_1,
      type::ME1_2,
      type::ME1_3,
      type::ME1_5,
      type::ME1_6,
      type::ME1_0,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "ME1_1",
      "ME1_2",
      "ME1_3",
      "ME1_5",
      "ME1_6",
      "ME1_0",
  }};
};

template <> struct TEnumDataStorage<::test::fixtures::enums::MyEnum2> {
  using type = ::test::fixtures::enums::MyEnum2;
  static constexpr const std::size_t size = 3;
  static constexpr std::array<type, size> values = {{
      type::ME2_0,
      type::ME2_1,
      type::ME2_2,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "ME2_0",
      "ME2_1",
      "ME2_2",
  }};
};

template <> struct TEnumDataStorage<::test::fixtures::enums::MyEnum3> {
  using type = ::test::fixtures::enums::MyEnum3;
  static constexpr const std::size_t size = 6;
  static constexpr std::array<type, size> values = {{
      type::ME3_0,
      type::ME3_1,
      type::ME3_N2,
      type::ME3_N1,
      type::ME3_9,
      type::ME3_10,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "ME3_0",
      "ME3_1",
      "ME3_N2",
      "ME3_N1",
      "ME3_9",
      "ME3_10",
  }};
};

template <> struct TEnumDataStorage<::test::fixtures::enums::MyEnum4> {
  using type = ::test::fixtures::enums::MyEnum4;
  static constexpr const std::size_t size = 5;
  static constexpr std::array<type, size> values = {{
      type::ME4_A,
      type::ME4_B,
      type::ME4_C,
      type::ME4_D,
      type::Unspecified,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "ME4_A",
      "ME4_B",
      "ME4_C",
      "ME4_D",
      "Unspecified",
  }};
};

template <> struct TEnumDataStorage<::test::fixtures::enums::MyBitmaskEnum1> {
  using type = ::test::fixtures::enums::MyBitmaskEnum1;
  static constexpr const std::size_t size = 4;
  static constexpr std::array<type, size> values = {{
      type::ONE,
      type::TWO,
      type::FOUR,
      type::Unspecified,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "ONE",
      "TWO",
      "FOUR",
      "Unspecified",
  }};
};

template <> struct TEnumDataStorage<::test::fixtures::enums::MyBitmaskEnum2> {
  using type = ::test::fixtures::enums::MyBitmaskEnum2;
  static constexpr const std::size_t size = 4;
  static constexpr std::array<type, size> values = {{
      type::ONE,
      type::TWO,
      type::FOUR,
      type::Unspecified,
  }};
  static constexpr std::array<folly::StringPiece, size> names = {{
      "ONE",
      "TWO",
      "FOUR",
      "Unspecified",
  }};
};

template <> struct TStructDataStorage<::test::fixtures::enums::SomeStruct> {
  static constexpr const std::size_t fields_size = 4;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

template <> struct TStructDataStorage<::test::fixtures::enums::MyStruct> {
  static constexpr const std::size_t fields_size = 4;
  static const folly::StringPiece name;
  static const std::array<folly::StringPiece, fields_size> fields_names;
  static const std::array<int16_t, fields_size> fields_ids;
  static const std::array<protocol::TType, fields_size> fields_types;

 private:
  // The following fields describe internal storage metadata, and are private to
  // prevent user logic from accessing them, but they can be inspected by
  // debuggers.
  static const std::array<folly::StringPiece, fields_size> storage_names;
  // -1 if the field has no isset.
  static const std::array<int, fields_size> isset_indexes;
};

}} // apache::thrift
