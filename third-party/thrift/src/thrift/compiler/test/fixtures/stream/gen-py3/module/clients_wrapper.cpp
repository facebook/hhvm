/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <thrift/compiler/test/fixtures/stream/src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {


folly::Future<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::returnstream(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_i32_from,
    int32_t arg_i32_to) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ClientBufferedStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ClientBufferedStream<int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_returnstream, channel_);
  try {
    client->returnstream(
      rpcOptions,
      std::move(callback),
      arg_i32_from,
      arg_i32_to
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ClientBufferedStream<int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::streamthrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ClientBufferedStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ClientBufferedStream<int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_streamthrows, channel_);
  try {
    client->streamthrows(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ClientBufferedStream<int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::servicethrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ClientBufferedStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ClientBufferedStream<int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_servicethrows, channel_);
  try {
    client->servicethrows(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ClientBufferedStream<int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::servicethrows2(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ClientBufferedStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ClientBufferedStream<int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_servicethrows2, channel_);
  try {
    client->servicethrows2(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ClientBufferedStream<int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::boththrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ClientBufferedStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ClientBufferedStream<int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_boththrows, channel_);
  try {
    client->boththrows(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ClientBufferedStream<int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>
PubSubStreamingServiceClientWrapper::responseandstreamstreamthrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_responseandstreamstreamthrows, channel_);
  try {
    client->responseandstreamstreamthrows(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>
PubSubStreamingServiceClientWrapper::responseandstreamservicethrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_responseandstreamservicethrows, channel_);
  try {
    client->responseandstreamservicethrows(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>
PubSubStreamingServiceClientWrapper::responseandstreamboththrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_responseandstreamboththrows, channel_);
  try {
    client->responseandstreamboththrows(
      rpcOptions,
      std::move(callback),
      arg_foo
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

folly::Future<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::returnstreamFast(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_i32_from,
    int32_t arg_i32_to) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  folly::Promise<apache::thrift::ClientBufferedStream<int32_t>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<apache::thrift::ClientBufferedStream<int32_t>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_returnstreamFast, channel_);
  try {
    client->returnstreamFast(
      rpcOptions,
      std::move(callback),
      arg_i32_from,
      arg_i32_to
    );
  } catch (...) {
    return folly::makeFuture<apache::thrift::ClientBufferedStream<int32_t>>(folly::exception_wrapper(
      std::current_exception()
    ));
  }
  return _future;
}

} // namespace cpp2
