/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-enum/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct myEnum;
struct myBigEnum;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myBigEnum
#define APACHE_THRIFT_ACCESSOR_myBigEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myBigEnum);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace test::fixtures::enumstrict {

/** Glean {"file": "thrift/compiler/test/fixtures/basic-enum/src/module.thrift", "name": "EmptyEnum", "kind": "enum" } */
enum class EmptyEnum {
};

/** Glean {"file": "thrift/compiler/test/fixtures/basic-enum/src/module.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  ONE = 1,
  TWO = 2,
};

/** Glean {"file": "thrift/compiler/test/fixtures/basic-enum/src/module.thrift", "name": "MyUseIntrinsicDefaultEnum", "kind": "enum" } */
enum class MyUseIntrinsicDefaultEnum {
  ZERO = 0,
  ONE = 1,
  TWO = 2,
};

/** Glean {"file": "thrift/compiler/test/fixtures/basic-enum/src/module.thrift", "name": "MyBigEnum", "kind": "enum" } */
enum class MyBigEnum {
  UNKNOWN = 0,
  ONE = 1,
  TWO = 2,
  THREE = 3,
  FOUR = 4,
  FIVE = 5,
  SIX = 6,
  SEVEN = 7,
  EIGHT = 8,
  NINE = 9,
  TEN = 10,
  ELEVEN = 11,
  TWELVE = 12,
  THIRTEEN = 13,
  FOURTEEN = 14,
  FIFTEEN = 15,
  SIXTEEN = 16,
  SEVENTEEN = 17,
  EIGHTEEN = 18,
  NINETEEN = 19,
};

} // namespace test::fixtures::enumstrict

template<> struct std::hash<::test::fixtures::enumstrict::EmptyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::enumstrict::EmptyEnum> {};
template<> struct std::hash<::test::fixtures::enumstrict::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::enumstrict::MyEnum> {};
template<> struct std::hash<::test::fixtures::enumstrict::MyUseIntrinsicDefaultEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::enumstrict::MyUseIntrinsicDefaultEnum> {};
template<> struct std::hash<::test::fixtures::enumstrict::MyBigEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::enumstrict::MyBigEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::test::fixtures::enumstrict::EmptyEnum> {
  using type = ::test::fixtures::enumstrict::EmptyEnum;

  static constexpr std::size_t const size = 0;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "EmptyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};

template <> struct TEnumTraits<::test::fixtures::enumstrict::MyEnum> {
  using type = ::test::fixtures::enumstrict::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ONE; }
  static constexpr type max() { return type::TWO; }
};

template <> struct TEnumTraits<::test::fixtures::enumstrict::MyUseIntrinsicDefaultEnum> {
  using type = ::test::fixtures::enumstrict::MyUseIntrinsicDefaultEnum;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyUseIntrinsicDefaultEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::ZERO; }
  static constexpr type max() { return type::TWO; }
};

template <> struct TEnumTraits<::test::fixtures::enumstrict::MyBigEnum> {
  using type = ::test::fixtures::enumstrict::MyBigEnum;

  static constexpr std::size_t const size = 20;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyBigEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::UNKNOWN; }
  static constexpr type max() { return type::NINETEEN; }
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::enumstrict {
class MyStruct;
} // namespace test::fixtures::enumstrict
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::enumstrict {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


/** Glean {"file": "thrift/compiler/test/fixtures/basic-enum/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myBigEnum
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::enumstrict::MyEnum>,
    ::apache::thrift::type::enum_t<::test::fixtures::enumstrict::MyBigEnum>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MyStruct() :
      __fbthrift_field_myEnum(),
      __fbthrift_field_myBigEnum( ::test::fixtures::enumstrict::MyBigEnum::ONE) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::test::fixtures::enumstrict::MyEnum myEnum__arg, ::test::fixtures::enumstrict::MyBigEnum myBigEnum__arg);

  MyStruct(MyStruct&&) = default;

  MyStruct(const MyStruct&) = default;


  MyStruct& operator=(MyStruct&&) = default;

  MyStruct& operator=(const MyStruct&) = default;
 private:
  ::test::fixtures::enumstrict::MyEnum __fbthrift_field_myEnum;
 private:
  ::test::fixtures::enumstrict::MyBigEnum __fbthrift_field_myBigEnum;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnum_ref() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnum_ref() & {
    return {this->__fbthrift_field_myEnum, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnum), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnum() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnum() & {
    return {this->__fbthrift_field_myEnum, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnum), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "myBigEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyBigEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myBigEnum_ref() const& {
    return {this->__fbthrift_field_myBigEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myBigEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyBigEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myBigEnum_ref() & {
    return {this->__fbthrift_field_myBigEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myBigEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyBigEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myBigEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myBigEnum), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myBigEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyBigEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myBigEnum() const& {
    return {this->__fbthrift_field_myBigEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myBigEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyBigEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myBigEnum() & {
    return {this->__fbthrift_field_myBigEnum, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myBigEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::enumstrict::MyBigEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myBigEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myBigEnum), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myEnum" } */
  [[deprecated("Use `FOO.myEnum().value()` instead of `FOO.get_myEnum()`")]]
  ::test::fixtures::enumstrict::MyEnum get_myEnum() const;

  /** Glean { "field": "myEnum" } */
  [[deprecated("Use `FOO.myEnum() = BAR` instead of `FOO.set_myEnum(BAR)`")]]
  ::test::fixtures::enumstrict::MyEnum& set_myEnum(::test::fixtures::enumstrict::MyEnum myEnum_);

  /** Glean { "field": "myBigEnum" } */
  [[deprecated("Use `FOO.myBigEnum().value()` instead of `FOO.get_myBigEnum()`")]]
  ::test::fixtures::enumstrict::MyBigEnum get_myBigEnum() const;

  /** Glean { "field": "myBigEnum" } */
  [[deprecated("Use `FOO.myBigEnum() = BAR` instead of `FOO.set_myBigEnum(BAR)`")]]
  ::test::fixtures::enumstrict::MyBigEnum& set_myBigEnum(::test::fixtures::enumstrict::MyBigEnum myBigEnum_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::enumstrict

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::test::fixtures::enumstrict::MyStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4793286115894984127;
  static constexpr ::std::string_view definitionKey = {"\x4c\x93\xef\x2c\x54\xbb\x96\x74\x7d\xb9\x05\xfc\x55\x81\x02\xdc", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::enumstrict::EmptyEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4793286115894984127;
  static constexpr ::std::string_view definitionKey = {"\x6c\xfe\x24\xd7\xe6\x7e\x80\xc4\x7d\xb1\xdb\xa0\x10\x4a\x41\x18", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::enumstrict::MyEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4793286115894984127;
  static constexpr ::std::string_view definitionKey = {"\xa9\xb0\x64\x27\xe8\x75\xcb\xde\xf9\x80\x5f\xe1\xcd\xab\x7e\xb0", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::enumstrict::MyUseIntrinsicDefaultEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4793286115894984127;
  static constexpr ::std::string_view definitionKey = {"\x85\x87\xce\x48\x6f\xf5\x3b\x78\x4a\x89\xb1\xcf\x2e\x41\xea\xd5", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::enumstrict::MyBigEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4793286115894984127;
  static constexpr ::std::string_view definitionKey = {"\xbb\x26\x78\x49\x25\xc3\x1f\x6d\x64\x84\xa0\x96\x70\xfd\xeb\xdc", 16};
};
} // namespace apache::thrift::detail
