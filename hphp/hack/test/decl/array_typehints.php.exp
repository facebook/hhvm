[("\\a2",
  (Shallow_decl_defs.Fun
     { Typing_defs.fe_deprecated = None; fe_module = None;
       fe_internal = false;
       fe_type =
       (Rwitness_from_decl ([3:10-12]),
        (Tfun
           { ft_arity = (Fstandard ()); ft_tparams = [];
             ft_where_constraints = []; ft_params = [];
             ft_implicit_params = { capability = (CapDefaults [3:10-12]) };
             ft_ret =
             { et_enforced = Typing_defs_core.Unenforced;
               et_type =
               (Rhint ([3:16-35]),
                (Tapply (([3:16-22], "\\HH\\dict"),
                   [(Rhint ([3:23-26]), (Tprim Tint));
                     (Rhint ([3:28-34]), (Tprim Tstring))]
                   )))
               };
             ft_flags =
             (make_ft_flags FSync ~return_disposable:false
               ~returns_readonly:false ~support_dynamic_type:false
               ~readonly_this:false);
             ft_ifc_decl = FDPolicied {PUBLIC} }));
       fe_pos = [3:10-12]; fe_php_std_lib = false;
       fe_support_dynamic_type = false }));
  ("\\v0",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([7:10-12]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [7:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([7:16-22]),
                 (Tapply (([7:16-22], "\\HH\\vec"),
                    [(Rhint ([7:16-22]), Tany)])))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [7:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\v1",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([11:10-12]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [11:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([11:16-27]),
                 (Tapply (([11:16-22], "\\HH\\vec"),
                    [(Rhint ([11:23-26]), (Tprim Tint))])))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [11:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\d0",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([15:10-12]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [15:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([15:16-22]),
                 (Tapply (([15:16-22], "\\HH\\dict"),
                    [(Rhint ([15:16-22]), Tany); (Rhint ([15:16-22]), Tany)]
                    )))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [15:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\d2",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([19:10-12]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [19:10-12]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([19:16-35]),
                 (Tapply (([19:16-22], "\\HH\\dict"),
                    [(Rhint ([19:23-26]), (Tprim Tint));
                      (Rhint ([19:28-34]), (Tprim Tstring))]
                    )))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [19:10-12]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\vd0",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([23:10-13]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [23:10-13]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([23:17-33]),
                 (Tvec_or_dict
                    (Rvec_or_dict_key ([23:17-33]), (Tprim Tarraykey)),
                    (Rhint ([23:17-33]), Tany)))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [23:10-13]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\vd1",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([27:10-13]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [27:10-13]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([27:17-38]),
                 (Tvec_or_dict
                    (Rvec_or_dict_key ([27:17-38]), (Tprim Tarraykey)),
                    (Rhint ([27:34-37]), (Tprim Tint))))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [27:10-13]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\vd2",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([31:10-13]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [31:10-13]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type =
                (Rhint ([31:17-46]),
                 (Tvec_or_dict (Rhint ([31:34-37]), (Tprim Tint)),
                    (Rhint ([31:39-45]), (Tprim Tstring))))
                };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [31:10-13]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }));
  ("\\vd3",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None; fe_module = None;
        fe_internal = false;
        fe_type =
        (Rwitness_from_decl ([35:10-13]),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params = { capability = (CapDefaults [35:10-13]) };
              ft_ret =
              { et_enforced = Typing_defs_core.Unenforced;
                et_type = (Rhint ([35:17-52]), Tany) };
              ft_flags =
              (make_ft_flags FSync ~return_disposable:false
                ~returns_readonly:false ~support_dynamic_type:false
                ~readonly_this:false);
              ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [35:10-13]; fe_php_std_lib = false;
        fe_support_dynamic_type = false }))
  ]

They matched!
