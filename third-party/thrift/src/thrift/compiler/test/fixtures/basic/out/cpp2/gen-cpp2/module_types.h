/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct MyIntField;
struct MyStringField;
struct MyDataField;
struct myEnum;
struct oneway;
struct readonly;
struct idempotent;
struct floatSet;
struct no_hack_codegen_field;
struct I32List;
struct StringSet;
struct StringToI64Map;
struct myEnum;
struct myStruct;
struct myDataItem;
struct floatSet;
struct MyIntField;
struct MyStringField;
struct myStruct;
struct myUnion;
struct MyIntField;
struct MyStringField;
struct myStruct;
struct myUnion;
struct reserved_field;
struct reserved_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDataField
#define APACHE_THRIFT_ACCESSOR_MyDataField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDataField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_oneway
#define APACHE_THRIFT_ACCESSOR_oneway
APACHE_THRIFT_DEFINE_ACCESSOR(oneway);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_readonly
#define APACHE_THRIFT_ACCESSOR_readonly
APACHE_THRIFT_DEFINE_ACCESSOR(readonly);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_idempotent
#define APACHE_THRIFT_ACCESSOR_idempotent
APACHE_THRIFT_DEFINE_ACCESSOR(idempotent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatSet
#define APACHE_THRIFT_ACCESSOR_floatSet
APACHE_THRIFT_DEFINE_ACCESSOR(floatSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_no_hack_codegen_field
#define APACHE_THRIFT_ACCESSOR_no_hack_codegen_field
APACHE_THRIFT_DEFINE_ACCESSOR(no_hack_codegen_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_I32List
#define APACHE_THRIFT_ACCESSOR_I32List
APACHE_THRIFT_DEFINE_ACCESSOR(I32List);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_StringSet
#define APACHE_THRIFT_ACCESSOR_StringSet
APACHE_THRIFT_DEFINE_ACCESSOR(StringSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_StringToI64Map
#define APACHE_THRIFT_ACCESSOR_StringToI64Map
APACHE_THRIFT_DEFINE_ACCESSOR(StringToI64Map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatSet
#define APACHE_THRIFT_ACCESSOR_floatSet
APACHE_THRIFT_DEFINE_ACCESSOR(floatSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myUnion
#define APACHE_THRIFT_ACCESSOR_myUnion
APACHE_THRIFT_DEFINE_ACCESSOR(myUnion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myUnion
#define APACHE_THRIFT_ACCESSOR_myUnion
APACHE_THRIFT_DEFINE_ACCESSOR(myUnion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reserved_field
#define APACHE_THRIFT_ACCESSOR_reserved_field
APACHE_THRIFT_DEFINE_ACCESSOR(reserved_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reserved_field
#define APACHE_THRIFT_ACCESSOR_reserved_field
APACHE_THRIFT_DEFINE_ACCESSOR(reserved_field);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace test::fixtures::basic {

/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyEnum", "kind": "enum" } */
enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
};

/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "HackEnum", "kind": "enum" } */
enum class HackEnum {
  Value1 = 0,
  Value2 = 1,
};

} // namespace test::fixtures::basic

template<> struct std::hash<::test::fixtures::basic::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic::MyEnum> {};
template<> struct std::hash<::test::fixtures::basic::HackEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic::HackEnum> {};

namespace apache::thrift {

template <> struct TEnumTraits<::test::fixtures::basic::MyEnum> {
  using type = ::test::fixtures::basic::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "MyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "test.dev/fixtures/basic/MyEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue2; }

  static const std::vector<std::any>& annotations() noexcept;
  static const std::vector<std::any>& enumValueAnnotations(::test::fixtures::basic::MyEnum) noexcept;
};

template <> struct TEnumTraits<::test::fixtures::basic::HackEnum> {
  using type = ::test::fixtures::basic::HackEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "HackEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  FOLLY_ERASE static constexpr std::string_view __fbthrift_thrift_uri() noexcept {
    return "test.dev/fixtures/basic/HackEnum";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::Value1; }
  static constexpr type max() { return type::Value2; }

  static const std::vector<std::any>& annotations() noexcept;
  static const std::vector<std::any>& enumValueAnnotations(::test::fixtures::basic::HackEnum) noexcept;
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::basic {
class MyStruct;
class Containers;
class MyDataItem;
class MyUnion;
class MyException;
class MyExceptionWithMessage;
class ReservedKeyword;
class UnionToBeRenamed;
} // namespace test::fixtures::basic
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::basic {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyEnumAlias", "kind": "typedef" } */
using MyEnumAlias = ::test::fixtures::basic::MyEnum;
/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyDataItemAlias", "kind": "typedef" } */
using MyDataItemAlias = ::test::fixtures::basic::MyDataItem;

/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyDataItem", "kind": "struct" } */
class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 0;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0};

  using __fbthrift_reflection_idents = folly::tag_t<
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyStruct", "kind": "struct" } */
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 9;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5,6,7,8,9};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::MyDataField,
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::oneway,
    ::apache::thrift::ident::readonly,
    ::apache::thrift::ident::idempotent,
    ::apache::thrift::ident::floatSet,
    ::apache::thrift::ident::no_hack_codegen_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyDataItem>,
    ::apache::thrift::type::enum_t<::test::fixtures::basic::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::float_t>,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyDataItemAlias MyDataField__arg, ::test::fixtures::basic::MyEnum myEnum__arg, bool oneway__arg, bool readonly__arg, bool idempotent__arg, ::std::set<float> floatSet__arg, ::std::string no_hack_codegen_field__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::test::fixtures::basic::MyDataItemAlias __fbthrift_field_MyDataField;
 private:
  ::test::fixtures::basic::MyEnum __fbthrift_field_myEnum;
 private:
  bool __fbthrift_field_oneway;
 private:
  bool __fbthrift_field_readonly;
 private:
  bool __fbthrift_field_idempotent;
 private:
  ::std::set<float> __fbthrift_field_floatSet;
 private:
  ::std::string __fbthrift_field_no_hack_codegen_field;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyDataItemAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyDataField_ref() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyDataItemAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyDataField_ref() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyDataItemAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyDataField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyDataItemAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyDataField() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyDataItemAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyDataField() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "MyDataField" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyDataItemAlias>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyDataField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnum_ref() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnum_ref() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnum_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myEnum() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myEnum() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myEnum() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "oneway" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> oneway_ref() const& {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "oneway" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> oneway_ref() & {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "oneway" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> oneway_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "oneway" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> oneway() const& {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "oneway" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> oneway() & {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "oneway" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> oneway() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  /** Glean { "field": "readonly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> readonly_ref() const& {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "readonly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> readonly_ref() & {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "readonly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> readonly_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_readonly), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "readonly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> readonly() const& {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "readonly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> readonly() & {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "readonly" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> readonly() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_readonly), __isset.at(5), __isset.bit(5)};
  }

  /** Glean { "field": "idempotent" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> idempotent_ref() const& {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "idempotent" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> idempotent_ref() & {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "idempotent" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> idempotent_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_idempotent), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "idempotent" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> idempotent() const& {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "idempotent" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> idempotent() & {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "idempotent" } */
  template <typename..., typename fbthrift_T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> idempotent() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_idempotent), __isset.at(6), __isset.bit(6)};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename fbthrift_T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> floatSet_ref() const& {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename fbthrift_T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> floatSet_ref() & {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename fbthrift_T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> floatSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename fbthrift_T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> floatSet() const& {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename fbthrift_T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> floatSet() & {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename fbthrift_T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> floatSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> no_hack_codegen_field_ref() const& {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> no_hack_codegen_field_ref() & {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> no_hack_codegen_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_no_hack_codegen_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> no_hack_codegen_field() const& {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> no_hack_codegen_field() & {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> no_hack_codegen_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_no_hack_codegen_field), __isset.at(8), __isset.bit(8)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  ::std::string get_MyStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_MyStringField);
  }

  /** Glean { "field": "MyStringField" } */
  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField() = BAR` instead of `FOO.set_MyStringField(BAR)`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyDataField" } */
  [[deprecated("Use `FOO.MyDataField().value()` instead of `FOO.get_MyDataField()`")]]
  const ::test::fixtures::basic::MyDataItemAlias& get_MyDataField() const&;

  /** Glean { "field": "MyDataField" } */
  [[deprecated("Use `FOO.MyDataField().value()` instead of `FOO.get_MyDataField()`")]]
  ::test::fixtures::basic::MyDataItemAlias get_MyDataField() &&;

  /** Glean { "field": "MyDataField" } */
  template <typename T_MyStruct_MyDataField_struct_setter = ::test::fixtures::basic::MyDataItemAlias>
  [[deprecated("Use `FOO.MyDataField() = BAR` instead of `FOO.set_MyDataField(BAR)`")]]
  ::test::fixtures::basic::MyDataItemAlias& set_MyDataField(T_MyStruct_MyDataField_struct_setter&& MyDataField_) {
    MyDataField_ref() = std::forward<T_MyStruct_MyDataField_struct_setter>(MyDataField_);
    return __fbthrift_field_MyDataField;
  }

  /** Glean { "field": "myEnum" } */
  [[deprecated("Use `FOO.myEnum().value()` instead of `FOO.get_myEnum()`")]]
  ::test::fixtures::basic::MyEnum get_myEnum() const;

  /** Glean { "field": "myEnum" } */
  [[deprecated("Use `FOO.myEnum() = BAR` instead of `FOO.set_myEnum(BAR)`")]]
  ::test::fixtures::basic::MyEnum& set_myEnum(::test::fixtures::basic::MyEnum myEnum_);

  /** Glean { "field": "oneway" } */
  [[deprecated("Use `FOO.oneway().value()` instead of `FOO.get_oneway()`")]]
  bool get_oneway() const;

  /** Glean { "field": "oneway" } */
  [[deprecated("Use `FOO.oneway() = BAR` instead of `FOO.set_oneway(BAR)`")]]
  bool& set_oneway(bool oneway_);

  /** Glean { "field": "readonly" } */
  [[deprecated("Use `FOO.readonly().value()` instead of `FOO.get_readonly()`")]]
  bool get_readonly() const;

  /** Glean { "field": "readonly" } */
  [[deprecated("Use `FOO.readonly() = BAR` instead of `FOO.set_readonly(BAR)`")]]
  bool& set_readonly(bool readonly_);

  /** Glean { "field": "idempotent" } */
  [[deprecated("Use `FOO.idempotent().value()` instead of `FOO.get_idempotent()`")]]
  bool get_idempotent() const;

  /** Glean { "field": "idempotent" } */
  [[deprecated("Use `FOO.idempotent() = BAR` instead of `FOO.set_idempotent(BAR)`")]]
  bool& set_idempotent(bool idempotent_);

  /** Glean { "field": "floatSet" } */
  [[deprecated("Use `FOO.floatSet().value()` instead of `FOO.get_floatSet()`")]]
  const ::std::set<float>& get_floatSet() const&;

  /** Glean { "field": "floatSet" } */
  [[deprecated("Use `FOO.floatSet().value()` instead of `FOO.get_floatSet()`")]]
  ::std::set<float> get_floatSet() &&;

  /** Glean { "field": "floatSet" } */
  template <typename T_MyStruct_floatSet_struct_setter = ::std::set<float>>
  [[deprecated("Use `FOO.floatSet() = BAR` instead of `FOO.set_floatSet(BAR)`")]]
  ::std::set<float>& set_floatSet(T_MyStruct_floatSet_struct_setter&& floatSet_) {
    floatSet_ref() = std::forward<T_MyStruct_floatSet_struct_setter>(floatSet_);
    return __fbthrift_field_floatSet;
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  [[deprecated("Use `FOO.no_hack_codegen_field().value()` instead of `FOO.get_no_hack_codegen_field()`")]]
  const ::std::string& get_no_hack_codegen_field() const& {
    return __fbthrift_field_no_hack_codegen_field;
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  [[deprecated("Use `FOO.no_hack_codegen_field().value()` instead of `FOO.get_no_hack_codegen_field()`")]]
  ::std::string get_no_hack_codegen_field() && {
    return static_cast<::std::string&&>(__fbthrift_field_no_hack_codegen_field);
  }

  /** Glean { "field": "no_hack_codegen_field" } */
  template <typename T_MyStruct_no_hack_codegen_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.no_hack_codegen_field() = BAR` instead of `FOO.set_no_hack_codegen_field(BAR)`")]]
  ::std::string& set_no_hack_codegen_field(T_MyStruct_no_hack_codegen_field_struct_setter&& no_hack_codegen_field_) {
    no_hack_codegen_field_ref() = std::forward<T_MyStruct_no_hack_codegen_field_struct_setter>(no_hack_codegen_field_);
    return __fbthrift_field_no_hack_codegen_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "Containers", "kind": "struct" } */
class Containers final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::I32List,
    ::apache::thrift::ident::StringSet,
    ::apache::thrift::ident::StringToI64Map
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i64_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Containers;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Containers();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Containers(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> I32List__arg, ::std::set<::std::string> StringSet__arg, ::std::map<::std::string, ::std::int64_t> StringToI64Map__arg);

  Containers(Containers&&) noexcept;

  Containers(const Containers& src);


  Containers& operator=(Containers&&) noexcept;
  Containers& operator=(const Containers& src);

  ~Containers();

 private:
  ::std::vector<::std::int32_t> __fbthrift_field_I32List;
 private:
  ::std::set<::std::string> __fbthrift_field_StringSet;
 private:
  ::std::map<::std::string, ::std::int64_t> __fbthrift_field_StringToI64Map;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Containers&) const;
  bool operator<(const Containers&) const;

  /** Glean { "field": "I32List" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> I32List_ref() const& {
    return {this->__fbthrift_field_I32List, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "I32List" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> I32List_ref() & {
    return {this->__fbthrift_field_I32List, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "I32List" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> I32List_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_I32List), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "I32List" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> I32List() const& {
    return {this->__fbthrift_field_I32List, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "I32List" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> I32List() & {
    return {this->__fbthrift_field_I32List, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "I32List" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> I32List() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_I32List), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "StringSet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> StringSet_ref() const& {
    return {this->__fbthrift_field_StringSet, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "StringSet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> StringSet_ref() & {
    return {this->__fbthrift_field_StringSet, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "StringSet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> StringSet_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_StringSet), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "StringSet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> StringSet() const& {
    return {this->__fbthrift_field_StringSet, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "StringSet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> StringSet() & {
    return {this->__fbthrift_field_StringSet, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "StringSet" } */
  template <typename..., typename fbthrift_T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> StringSet() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_StringSet), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "StringToI64Map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> StringToI64Map_ref() const& {
    return {this->__fbthrift_field_StringToI64Map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "StringToI64Map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> StringToI64Map_ref() & {
    return {this->__fbthrift_field_StringToI64Map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "StringToI64Map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> StringToI64Map_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_StringToI64Map), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "StringToI64Map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> StringToI64Map() const& {
    return {this->__fbthrift_field_StringToI64Map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "StringToI64Map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> StringToI64Map() & {
    return {this->__fbthrift_field_StringToI64Map, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "StringToI64Map" } */
  template <typename..., typename fbthrift_T = ::std::map<::std::string, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> StringToI64Map() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_StringToI64Map), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "I32List" } */
  [[deprecated("Use `FOO.I32List().value()` instead of `FOO.get_I32List()`")]]
  const ::std::vector<::std::int32_t>& get_I32List() const&;

  /** Glean { "field": "I32List" } */
  [[deprecated("Use `FOO.I32List().value()` instead of `FOO.get_I32List()`")]]
  ::std::vector<::std::int32_t> get_I32List() &&;

  /** Glean { "field": "I32List" } */
  template <typename T_Containers_I32List_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.I32List() = BAR` instead of `FOO.set_I32List(BAR)`")]]
  ::std::vector<::std::int32_t>& set_I32List(T_Containers_I32List_struct_setter&& I32List_) {
    I32List_ref() = std::forward<T_Containers_I32List_struct_setter>(I32List_);
    return __fbthrift_field_I32List;
  }

  /** Glean { "field": "StringSet" } */
  [[deprecated("Use `FOO.StringSet().value()` instead of `FOO.get_StringSet()`")]]
  const ::std::set<::std::string>& get_StringSet() const&;

  /** Glean { "field": "StringSet" } */
  [[deprecated("Use `FOO.StringSet().value()` instead of `FOO.get_StringSet()`")]]
  ::std::set<::std::string> get_StringSet() &&;

  /** Glean { "field": "StringSet" } */
  template <typename T_Containers_StringSet_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.StringSet() = BAR` instead of `FOO.set_StringSet(BAR)`")]]
  ::std::set<::std::string>& set_StringSet(T_Containers_StringSet_struct_setter&& StringSet_) {
    StringSet_ref() = std::forward<T_Containers_StringSet_struct_setter>(StringSet_);
    return __fbthrift_field_StringSet;
  }

  /** Glean { "field": "StringToI64Map" } */
  [[deprecated("Use `FOO.StringToI64Map().value()` instead of `FOO.get_StringToI64Map()`")]]
  const ::std::map<::std::string, ::std::int64_t>& get_StringToI64Map() const&;

  /** Glean { "field": "StringToI64Map" } */
  [[deprecated("Use `FOO.StringToI64Map().value()` instead of `FOO.get_StringToI64Map()`")]]
  ::std::map<::std::string, ::std::int64_t> get_StringToI64Map() &&;

  /** Glean { "field": "StringToI64Map" } */
  template <typename T_Containers_StringToI64Map_struct_setter = ::std::map<::std::string, ::std::int64_t>>
  [[deprecated("Use `FOO.StringToI64Map() = BAR` instead of `FOO.set_StringToI64Map(BAR)`")]]
  ::std::map<::std::string, ::std::int64_t>& set_StringToI64Map(T_Containers_StringToI64Map_struct_setter&& StringToI64Map_) {
    StringToI64Map_ref() = std::forward<T_Containers_StringToI64Map_struct_setter>(StringToI64Map_);
    return __fbthrift_field_StringToI64Map;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Containers>;
  friend void swap(Containers& a, Containers& b);
};

template <class Protocol_>
unsigned long Containers::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyUnion", "kind": "union" } */
class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myDataItem,
    ::apache::thrift::ident::floatSet
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::basic::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyDataItem>,
    ::apache::thrift::type::set<::apache::thrift::type::float_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    myDataItem = 3,
    floatSet = 4,
  } ;

  MyUnion()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::floatSet:
      {
        set_floatSet(std::move(rhs.value_.floatSet));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs);

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::floatSet:
      {
        set_floatSet(std::move(rhs.value_.floatSet));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs);

  ~MyUnion();

  union storage_type {
    ::test::fixtures::basic::MyEnumAlias myEnum;
    ::test::fixtures::basic::MyStruct myStruct;
    ::test::fixtures::basic::MyDataItem myDataItem;
    ::std::set<float> floatSet;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  /** Glean { "field": "myEnum" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::basic::MyEnumAlias& set_myEnum(::test::fixtures::basic::MyEnumAlias t = ::test::fixtures::basic::MyEnumAlias()) {
    using T0 = ::test::fixtures::basic::MyEnumAlias;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }


  /** Glean { "field": "myStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::basic::MyStruct& set_myStruct(::test::fixtures::basic::MyStruct const &t) {
    using T0 = ::test::fixtures::basic::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(t);
    return value_.myStruct;
  }

  /** Glean { "field": "myStruct" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::basic::MyStruct& set_myStruct(::test::fixtures::basic::MyStruct&& t) {
    using T0 = ::test::fixtures::basic::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(std::move(t));
    return value_.myStruct;
  }

  /** Glean { "field": "myStruct" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic::MyStruct, T...>> ::test::fixtures::basic::MyStruct& set_myStruct(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) ::test::fixtures::basic::MyStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }

  /** Glean { "field": "myDataItem" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::basic::MyDataItem& set_myDataItem(::test::fixtures::basic::MyDataItem const &t) {
    using T0 = ::test::fixtures::basic::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(t);
    return value_.myDataItem;
  }

  /** Glean { "field": "myDataItem" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::test::fixtures::basic::MyDataItem& set_myDataItem(::test::fixtures::basic::MyDataItem&& t) {
    using T0 = ::test::fixtures::basic::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(std::move(t));
    return value_.myDataItem;
  }

  /** Glean { "field": "myDataItem" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic::MyDataItem, T...>> ::test::fixtures::basic::MyDataItem& set_myDataItem(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) ::test::fixtures::basic::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  /** Glean { "field": "floatSet" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::set<float>& set_floatSet(::std::set<float> const &t) {
    using T0 = ::std::set<float>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::floatSet);
    ::new (std::addressof(value_.floatSet)) T(t);
    return value_.floatSet;
  }

  /** Glean { "field": "floatSet" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::set<float>& set_floatSet(::std::set<float>&& t) {
    using T0 = ::std::set<float>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::floatSet);
    ::new (std::addressof(value_.floatSet)) T(std::move(t));
    return value_.floatSet;
  }

  /** Glean { "field": "floatSet" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::set<float>, T...>> ::std::set<float>& set_floatSet(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::floatSet);
    ::new (std::addressof(value_.floatSet)) ::std::set<float>(std::forward<T>(t)...);
    return value_.floatSet;
  }

  /** Glean { "field": "myEnum" } */
  ::test::fixtures::basic::MyEnumAlias const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  /** Glean { "field": "myStruct" } */
  ::test::fixtures::basic::MyStruct const& get_myStruct() const {
    if (getType() != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myStruct;
  }

  /** Glean { "field": "myDataItem" } */
  ::test::fixtures::basic::MyDataItem const& get_myDataItem() const {
    if (getType() != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myDataItem;
  }

  /** Glean { "field": "floatSet" } */
  ::std::set<float> const& get_floatSet() const {
    if (getType() != Type::floatSet) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.floatSet;
  }

  ::test::fixtures::basic::MyEnumAlias& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::test::fixtures::basic::MyStruct& mutable_myStruct() {
    assert(getType() == Type::myStruct);
    return value_.myStruct;
  }

  ::test::fixtures::basic::MyDataItem& mutable_myDataItem() {
    assert(getType() == Type::myDataItem);
    return value_.myDataItem;
  }

  ::std::set<float>& mutable_floatSet() {
    assert(getType() == Type::floatSet);
    return value_.floatSet;
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnumAlias>
  T move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  T move_myStruct() {
    assert(getType() == Type::myStruct);
    return std::move(value_.myStruct);
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  T move_myDataItem() {
    assert(getType() == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  template <typename..., typename T = ::std::set<float>>
  T move_floatSet() {
    assert(getType() == Type::floatSet);
    return std::move(value_.floatSet);
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::test::fixtures::basic::MyEnumAlias>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::test::fixtures::basic::MyEnumAlias>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  template <typename..., typename T = ::test::fixtures::basic::MyEnumAlias>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::basic::MyEnumAlias&> myEnum() const& {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic::MyEnumAlias&> myEnum() & {
    return {value_.myEnum, fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myEnum" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic::MyEnumAlias&&> myEnum() && {
    return {std::move(value_.myEnum), fbthrift_type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::basic::MyStruct&> myStruct() const& {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic::MyStruct&> myStruct() & {
    return {value_.myStruct, fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myStruct" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic::MyStruct&&> myStruct() && {
    return {std::move(value_.myStruct), fbthrift_type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::test::fixtures::basic::MyDataItem&> myDataItem() const& {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic::MyDataItem&> myDataItem() & {
    return {value_.myDataItem, fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "myDataItem" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::test::fixtures::basic::MyDataItem&&> myDataItem() && {
    return {std::move(value_.myDataItem), fbthrift_type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "floatSet" } */
  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> floatSet_ref() const& {
    return {value_.floatSet, fbthrift_type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> floatSet_ref() & {
    return {value_.floatSet, fbthrift_type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "floatSet" } */
  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> floatSet_ref() && {
    return {std::move(value_.floatSet), fbthrift_type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "floatSet" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::set<float>&> floatSet() const& {
    return {value_.floatSet, fbthrift_type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "floatSet" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::set<float>&> floatSet() & {
    return {value_.floatSet, fbthrift_type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "floatSet" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::set<float>&&> floatSet() && {
    return {std::move(value_.floatSet), fbthrift_type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyException", "kind": "exception" } */
class FOLLY_EXPORT MyException : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myUnion
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyStruct>,
    ::apache::thrift::type::union_t<::test::fixtures::basic::MyUnion>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = MyException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyException(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyStruct myStruct__arg, ::test::fixtures::basic::MyUnion myUnion__arg);

  MyException(MyException&&) noexcept;

  MyException(const MyException& src);


  MyException& operator=(MyException&&) noexcept;
  MyException& operator=(const MyException& src);

  ~MyException() override;

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::test::fixtures::basic::MyStruct __fbthrift_field_myStruct;
 private:
  ::test::fixtures::basic::MyUnion __fbthrift_field_myUnion;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyException&) const;
  bool operator<(const MyException&) const;

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStruct_ref() const& {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStruct_ref() & {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStruct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStruct() const& {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStruct() & {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStruct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myUnion_ref() const& {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myUnion_ref() & {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myUnion_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myUnion), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myUnion() const& {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myUnion() & {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myUnion() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myUnion), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  ::std::string get_MyStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_MyStringField);
  }

  /** Glean { "field": "MyStringField" } */
  template <typename T_MyException_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField() = BAR` instead of `FOO.set_MyStringField(BAR)`")]]
  ::std::string& set_MyStringField(T_MyException_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyException_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "myStruct" } */
  [[deprecated("Use `FOO.myStruct().value()` instead of `FOO.get_myStruct()`")]]
  const ::test::fixtures::basic::MyStruct& get_myStruct() const&;

  /** Glean { "field": "myStruct" } */
  [[deprecated("Use `FOO.myStruct().value()` instead of `FOO.get_myStruct()`")]]
  ::test::fixtures::basic::MyStruct get_myStruct() &&;

  /** Glean { "field": "myStruct" } */
  template <typename T_MyException_myStruct_struct_setter = ::test::fixtures::basic::MyStruct>
  [[deprecated("Use `FOO.myStruct() = BAR` instead of `FOO.set_myStruct(BAR)`")]]
  ::test::fixtures::basic::MyStruct& set_myStruct(T_MyException_myStruct_struct_setter&& myStruct_) {
    myStruct_ref() = std::forward<T_MyException_myStruct_struct_setter>(myStruct_);
    return __fbthrift_field_myStruct;
  }

  /** Glean { "field": "myUnion" } */
  [[deprecated("Use `FOO.myUnion().value()` instead of `FOO.get_myUnion()`")]]
  const ::test::fixtures::basic::MyUnion& get_myUnion() const&;

  /** Glean { "field": "myUnion" } */
  [[deprecated("Use `FOO.myUnion().value()` instead of `FOO.get_myUnion()`")]]
  ::test::fixtures::basic::MyUnion get_myUnion() &&;

  /** Glean { "field": "myUnion" } */
  template <typename T_MyException_myUnion_struct_setter = ::test::fixtures::basic::MyUnion>
  [[deprecated("Use `FOO.myUnion() = BAR` instead of `FOO.set_myUnion(BAR)`")]]
  ::test::fixtures::basic::MyUnion& set_myUnion(T_MyException_myUnion_struct_setter&& myUnion_) {
    myUnion_ref() = std::forward<T_MyException_myUnion_struct_setter>(myUnion_);
    return __fbthrift_field_myUnion;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::test::fixtures::basic::MyException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyException>;
  friend void swap(MyException& a, MyException& b);
};

template <class Protocol_>
unsigned long MyException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "MyExceptionWithMessage", "kind": "exception" } */
class FOLLY_EXPORT MyExceptionWithMessage : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myUnion
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyStruct>,
    ::apache::thrift::type::union_t<::test::fixtures::basic::MyUnion>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = MyExceptionWithMessage;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyExceptionWithMessage();
  explicit MyExceptionWithMessage(std::string __message);

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyExceptionWithMessage(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyStruct myStruct__arg, ::test::fixtures::basic::MyUnion myUnion__arg);

  MyExceptionWithMessage(MyExceptionWithMessage&&) noexcept;

  MyExceptionWithMessage(const MyExceptionWithMessage& src);


  MyExceptionWithMessage& operator=(MyExceptionWithMessage&&) noexcept;
  MyExceptionWithMessage& operator=(const MyExceptionWithMessage& src);

  ~MyExceptionWithMessage() override;

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::test::fixtures::basic::MyStruct __fbthrift_field_myStruct;
 private:
  ::test::fixtures::basic::MyUnion __fbthrift_field_myUnion;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyExceptionWithMessage&) const;
  bool operator<(const MyExceptionWithMessage&) const;

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyIntField" } */
  template <typename..., typename fbthrift_T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyIntField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "MyStringField" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> MyStringField() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStruct_ref() const& {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStruct_ref() & {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStruct_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStruct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myStruct() const& {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myStruct() & {
    return {this->__fbthrift_field_myStruct, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myStruct" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myStruct() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myStruct), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myUnion_ref() const& {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myUnion_ref() & {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myUnion_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myUnion), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> myUnion() const& {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> myUnion() & {
    return {this->__fbthrift_field_myUnion, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "myUnion" } */
  template <typename..., typename fbthrift_T = ::test::fixtures::basic::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> myUnion() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_myUnion), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField().value()` instead of `FOO.get_MyIntField()`")]]
  ::std::int64_t get_MyIntField() const;

  /** Glean { "field": "MyIntField" } */
  [[deprecated("Use `FOO.MyIntField() = BAR` instead of `FOO.set_MyIntField(BAR)`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_);

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "MyStringField" } */
  [[deprecated("Use `FOO.MyStringField().value()` instead of `FOO.get_MyStringField()`")]]
  ::std::string get_MyStringField() && {
    return static_cast<::std::string&&>(__fbthrift_field_MyStringField);
  }

  /** Glean { "field": "MyStringField" } */
  template <typename T_MyExceptionWithMessage_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField() = BAR` instead of `FOO.set_MyStringField(BAR)`")]]
  ::std::string& set_MyStringField(T_MyExceptionWithMessage_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyExceptionWithMessage_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }

  /** Glean { "field": "myStruct" } */
  [[deprecated("Use `FOO.myStruct().value()` instead of `FOO.get_myStruct()`")]]
  const ::test::fixtures::basic::MyStruct& get_myStruct() const&;

  /** Glean { "field": "myStruct" } */
  [[deprecated("Use `FOO.myStruct().value()` instead of `FOO.get_myStruct()`")]]
  ::test::fixtures::basic::MyStruct get_myStruct() &&;

  /** Glean { "field": "myStruct" } */
  template <typename T_MyExceptionWithMessage_myStruct_struct_setter = ::test::fixtures::basic::MyStruct>
  [[deprecated("Use `FOO.myStruct() = BAR` instead of `FOO.set_myStruct(BAR)`")]]
  ::test::fixtures::basic::MyStruct& set_myStruct(T_MyExceptionWithMessage_myStruct_struct_setter&& myStruct_) {
    myStruct_ref() = std::forward<T_MyExceptionWithMessage_myStruct_struct_setter>(myStruct_);
    return __fbthrift_field_myStruct;
  }

  /** Glean { "field": "myUnion" } */
  [[deprecated("Use `FOO.myUnion().value()` instead of `FOO.get_myUnion()`")]]
  const ::test::fixtures::basic::MyUnion& get_myUnion() const&;

  /** Glean { "field": "myUnion" } */
  [[deprecated("Use `FOO.myUnion().value()` instead of `FOO.get_myUnion()`")]]
  ::test::fixtures::basic::MyUnion get_myUnion() &&;

  /** Glean { "field": "myUnion" } */
  template <typename T_MyExceptionWithMessage_myUnion_struct_setter = ::test::fixtures::basic::MyUnion>
  [[deprecated("Use `FOO.myUnion() = BAR` instead of `FOO.set_myUnion(BAR)`")]]
  ::test::fixtures::basic::MyUnion& set_myUnion(T_MyExceptionWithMessage_myUnion_struct_setter&& myUnion_) {
    myUnion_ref() = std::forward<T_MyExceptionWithMessage_myUnion_struct_setter>(myUnion_);
    return __fbthrift_field_myUnion;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return __fbthrift_field_MyStringField.c_str();
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyExceptionWithMessage>;
  friend void swap(MyExceptionWithMessage& a, MyExceptionWithMessage& b);
};

template <class Protocol_>
unsigned long MyExceptionWithMessage::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "ReservedKeyword", "kind": "struct" } */
class ReservedKeyword final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::reserved_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ReservedKeyword;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ReservedKeyword() :
      __fbthrift_field_reserved_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ReservedKeyword(apache::thrift::FragileConstructor, ::std::int32_t reserved_field__arg);

  ReservedKeyword(ReservedKeyword&&) = default;

  ReservedKeyword(const ReservedKeyword&) = default;


  ReservedKeyword& operator=(ReservedKeyword&&) = default;

  ReservedKeyword& operator=(const ReservedKeyword&) = default;
 private:
  ::std::int32_t __fbthrift_field_reserved_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ReservedKeyword&) const;
  bool operator<(const ReservedKeyword&) const;

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reserved_field_ref() const& {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reserved_field_ref() & {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reserved_field_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reserved_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> reserved_field() const& {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> reserved_field() & {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> reserved_field() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_reserved_field), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "reserved_field" } */
  [[deprecated("Use `FOO.reserved_field().value()` instead of `FOO.get_reserved_field()`")]]
  ::std::int32_t get_reserved_field() const;

  /** Glean { "field": "reserved_field" } */
  [[deprecated("Use `FOO.reserved_field() = BAR` instead of `FOO.set_reserved_field(BAR)`")]]
  ::std::int32_t& set_reserved_field(::std::int32_t reserved_field_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ReservedKeyword>;
  friend void swap(ReservedKeyword& a, ReservedKeyword& b);
};

template <class Protocol_>
unsigned long ReservedKeyword::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/basic/src/module.thrift", "name": "UnionToBeRenamed", "kind": "union" } */
class UnionToBeRenamed final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 1;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::reserved_field
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = UnionToBeRenamed;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    reserved_field = 1,
  } ;

  UnionToBeRenamed()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  UnionToBeRenamed(UnionToBeRenamed&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::reserved_field:
      {
        set_reserved_field(std::move(rhs.value_.reserved_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  UnionToBeRenamed(const UnionToBeRenamed& rhs);

  UnionToBeRenamed& operator=(UnionToBeRenamed&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::reserved_field:
      {
        set_reserved_field(std::move(rhs.value_.reserved_field));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  UnionToBeRenamed& operator=(const UnionToBeRenamed& rhs);


  union storage_type {
    ::std::int32_t reserved_field;

  } ;

  bool operator==(const UnionToBeRenamed&) const;
  bool operator<(const UnionToBeRenamed&) const;

  /** Glean { "field": "reserved_field" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::int32_t& set_reserved_field(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::reserved_field);
    ::new (std::addressof(value_.reserved_field)) T(t);
    return value_.reserved_field;
  }


  /** Glean { "field": "reserved_field" } */
  ::std::int32_t const& get_reserved_field() const {
    if (getType() != Type::reserved_field) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.reserved_field;
  }

  ::std::int32_t& mutable_reserved_field() {
    assert(getType() == Type::reserved_field);
    return value_.reserved_field;
  }

  template <typename..., typename T = ::std::int32_t>
  T move_reserved_field() {
    assert(getType() == Type::reserved_field);
    return std::move(value_.reserved_field);
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> reserved_field_ref() const& {
    return {value_.reserved_field, fbthrift_type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> reserved_field_ref() & {
    return {value_.reserved_field, fbthrift_type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "reserved_field" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> reserved_field_ref() && {
    return {std::move(value_.reserved_field), fbthrift_type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "reserved_field" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int32_t&> reserved_field() const& {
    return {value_.reserved_field, fbthrift_type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "reserved_field" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&> reserved_field() & {
    return {value_.reserved_field, fbthrift_type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "reserved_field" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&&> reserved_field() && {
    return {std::move(value_.reserved_field), fbthrift_type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<UnionToBeRenamed>;
  friend void swap(UnionToBeRenamed& a, UnionToBeRenamed& b);
};

template <class Protocol_>
unsigned long UnionToBeRenamed::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::basic

namespace apache::thrift {

template <> struct TEnumDataStorage<::test::fixtures::basic::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::basic::MyUnion::Type> {
  using type = ::test::fixtures::basic::MyUnion::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::myEnum; }
  static constexpr type max() { return type::floatSet; }
};

template <> struct TEnumDataStorage<::test::fixtures::basic::UnionToBeRenamed::Type>;

template <> struct TEnumTraits<::test::fixtures::basic::UnionToBeRenamed::Type> {
  using type = ::test::fixtures::basic::UnionToBeRenamed::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::reserved_field; }
  static constexpr type max() { return type::reserved_field; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::test::fixtures::basic::MyStruct, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\xb7\xd9\x76\x56\xc1\x86\x98\x45\x62\x6d\xcd\x66\xe0\x1f\x59\x1c", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::Containers, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\xc9\x37\x30\x18\x5d\x57\x66\xed\x23\x3f\xb3\x97\x5c\x86\x56\x51", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::MyDataItem, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\xab\x25\xf9\x42\x08\x66\x47\xc2\xe0\x48\xec\x07\x9a\x7b\x40\x6a", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::MyUnion, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\x64\x9d\x59\xb9\xd5\xee\x2e\x37\x0e\x47\x7c\xd3\xb8\x89\x3a\xbc", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::MyException, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\x5c\x62\xfd\x94\x7d\x11\xaa\xeb\xf4\x37\x85\x57\x47\x66\x6c\x96", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::MyExceptionWithMessage, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\xb5\x32\x27\xe1\xf6\xd8\x8e\x1b\x71\x83\xbb\x81\x0f\x21\x68\xf2", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::ReservedKeyword, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\x56\xcf\xff\xaf\x39\xa3\xe0\x72\x10\xfd\x15\xfe\x99\x2f\x5e\xb6", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::UnionToBeRenamed, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\x79\x92\x1f\x65\x61\x51\xc8\xf1\x99\xbc\xa6\x1d\x7c\x2d\xa8\x72", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::MyEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\xa1\xee\x42\xe3\x27\x3f\x38\x85\xa3\x61\x17\x67\x36\x8b\xe9\x26", 16};
};
template <> struct TSchemaAssociation<::test::fixtures::basic::HackEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 8924281123066096965;
  static constexpr ::std::string_view definitionKey = {"\x01\x86\x5f\xc3\xcf\x44\x6a\xa7\xd0\xe4\x50\xae\xb0\x46\x29\xb3", 16};
};
} // namespace apache::thrift::detail
