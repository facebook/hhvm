/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/cpp2-struct-footprint/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/FootprintTestServiceAsyncClient.h"
#include "thrift/compiler/test/fixtures/cpp2-struct-footprint/gen-cpp2/module_types.h"
#include <thrift/lib/cpp2/async/ServerStream.h>
#include <thrift/lib/cpp2/async/Sink.h>

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace cpp2_struct_footprint {
class FootprintTestService;
class FootprintTestServiceAsyncProcessor;

class FootprintTestServiceServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};
} // namespace cpp2_struct_footprint

namespace apache::thrift {
template <>
class ServiceHandler<::cpp2_struct_footprint::FootprintTestService> : public apache::thrift::ServerInterface {
  static_assert(!folly::is_detected_v<::apache::thrift::detail::st::detect_complete, ::cpp2_struct_footprint::FootprintTestService>, "Definition collision with service tag. Either rename the Thrift service using @cpp.Name annotation or rename the conflicting C++ type.");

 public:
  std::string_view getGeneratedName() const override { return "FootprintTestService"; }

  typedef ::cpp2_struct_footprint::FootprintTestServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  bool isThriftGenerated() const override final { return true; }
 private:
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const;
 public:
class CalculatorServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};


class CalculatorIf : public apache::thrift::Tile, public apache::thrift::ServerInterface {
 public:
  std::string_view getGeneratedName() const override { return "Calculator"; }

  typedef ::cpp2_struct_footprint::FootprintTestServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override {
    std::terminate();
  }
  CreateMethodMetadataResult createMethodMetadata() override {
    std::terminate();
  }
  virtual ::std::int32_t sync_add(::std::int32_t /*a*/, ::std::int32_t /*b*/);
  [[deprecated("Use sync_add instead")]] virtual ::std::int32_t add(::std::int32_t /*a*/, ::std::int32_t /*b*/);
  virtual folly::SemiFuture<::std::int32_t> semifuture_add(::std::int32_t p_a, ::std::int32_t p_b);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::std::int32_t> co_add(::std::int32_t p_a, ::std::int32_t p_b);
  virtual folly::coro::Task<::std::int32_t> co_add(apache::thrift::RequestParams params, ::std::int32_t p_a, ::std::int32_t p_b);
#endif
  virtual void async_tm_add(apache::thrift::HandlerCallbackPtr<::std::int32_t> callback, ::std::int32_t p_a, ::std::int32_t p_b);
 private:
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_add{apache::thrift::detail::si::InvocationType::AsyncTm};
};
  virtual void sync_processIOBuf(std::unique_ptr<::cpp2_struct_footprint::IOBuf> /*buf*/, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> /*ptr*/, ::cpp2_struct_footprint::I32Alias /*alias*/);
  [[deprecated("Use sync_processIOBuf instead")]] virtual void processIOBuf(std::unique_ptr<::cpp2_struct_footprint::IOBuf> /*buf*/, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> /*ptr*/, ::cpp2_struct_footprint::I32Alias /*alias*/);
  virtual folly::Future<folly::Unit> future_processIOBuf(std::unique_ptr<::cpp2_struct_footprint::IOBuf> p_buf, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> p_ptr, ::cpp2_struct_footprint::I32Alias p_alias);
  virtual folly::SemiFuture<folly::Unit> semifuture_processIOBuf(std::unique_ptr<::cpp2_struct_footprint::IOBuf> p_buf, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> p_ptr, ::cpp2_struct_footprint::I32Alias p_alias);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_processIOBuf(std::unique_ptr<::cpp2_struct_footprint::IOBuf> p_buf, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> p_ptr, ::cpp2_struct_footprint::I32Alias p_alias);
  virtual folly::coro::Task<void> co_processIOBuf(apache::thrift::RequestParams params, std::unique_ptr<::cpp2_struct_footprint::IOBuf> p_buf, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> p_ptr, ::cpp2_struct_footprint::I32Alias p_alias);
#endif
  virtual void async_tm_processIOBuf(apache::thrift::HandlerCallbackPtr<void> callback, std::unique_ptr<::cpp2_struct_footprint::IOBuf> p_buf, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> p_ptr, ::cpp2_struct_footprint::I32Alias p_alias);
  virtual void sync_getStruct(::cpp2_struct_footprint::SimpleStruct& /*_return*/);
  [[deprecated("Use sync_getStruct instead")]] virtual void getStruct(::cpp2_struct_footprint::SimpleStruct& /*_return*/);
  virtual folly::Future<std::unique_ptr<::cpp2_struct_footprint::SimpleStruct>> future_getStruct();
  virtual folly::SemiFuture<std::unique_ptr<::cpp2_struct_footprint::SimpleStruct>> semifuture_getStruct();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::SimpleStruct>> co_getStruct();
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::SimpleStruct>> co_getStruct(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getStruct(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2_struct_footprint::SimpleStruct>> callback);
  virtual void sync_setStruct(std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> /*input*/);
  [[deprecated("Use sync_setStruct instead")]] virtual void setStruct(std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> /*input*/);
  virtual folly::Future<folly::Unit> future_setStruct(std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> p_input);
  virtual folly::SemiFuture<folly::Unit> semifuture_setStruct(std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_setStruct(std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> p_input);
  virtual folly::coro::Task<void> co_setStruct(apache::thrift::RequestParams params, std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> p_input);
#endif
  virtual void async_tm_setStruct(apache::thrift::HandlerCallbackPtr<void> callback, std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> p_input);
  virtual void sync_setStructList(std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> /*items*/);
  [[deprecated("Use sync_setStructList instead")]] virtual void setStructList(std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> /*items*/);
  virtual folly::Future<folly::Unit> future_setStructList(std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> p_items);
  virtual folly::SemiFuture<folly::Unit> semifuture_setStructList(std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> p_items);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<void> co_setStructList(std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> p_items);
  virtual folly::coro::Task<void> co_setStructList(apache::thrift::RequestParams params, std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> p_items);
#endif
  virtual void async_tm_setStructList(apache::thrift::HandlerCallbackPtr<void> callback, std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> p_items);
  virtual void sync_getStructList(::std::vector<::cpp2_struct_footprint::SimpleStruct>& /*_return*/);
  [[deprecated("Use sync_getStructList instead")]] virtual void getStructList(::std::vector<::cpp2_struct_footprint::SimpleStruct>& /*_return*/);
  virtual folly::Future<std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>>> future_getStructList();
  virtual folly::SemiFuture<std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>>> semifuture_getStructList();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>>> co_getStructList();
  virtual folly::coro::Task<std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>>> co_getStructList(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getStructList(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>>> callback);
  virtual void sync_getNestedContainer(::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>& /*_return*/);
  [[deprecated("Use sync_getNestedContainer instead")]] virtual void getNestedContainer(::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>& /*_return*/);
  virtual folly::Future<std::unique_ptr<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>> future_getNestedContainer();
  virtual folly::SemiFuture<std::unique_ptr<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>> semifuture_getNestedContainer();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>> co_getNestedContainer();
  virtual folly::coro::Task<std::unique_ptr<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>> co_getNestedContainer(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getNestedContainer(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>> callback);
  virtual void sync_getTypedefStruct(::cpp2_struct_footprint::MyStruct& /*_return*/);
  [[deprecated("Use sync_getTypedefStruct instead")]] virtual void getTypedefStruct(::cpp2_struct_footprint::MyStruct& /*_return*/);
  virtual folly::Future<std::unique_ptr<::cpp2_struct_footprint::MyStruct>> future_getTypedefStruct();
  virtual folly::SemiFuture<std::unique_ptr<::cpp2_struct_footprint::MyStruct>> semifuture_getTypedefStruct();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::MyStruct>> co_getTypedefStruct();
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::MyStruct>> co_getTypedefStruct(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getTypedefStruct(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2_struct_footprint::MyStruct>> callback);
  virtual void sync_getTypedefList(::cpp2_struct_footprint::StructList& /*_return*/);
  [[deprecated("Use sync_getTypedefList instead")]] virtual void getTypedefList(::cpp2_struct_footprint::StructList& /*_return*/);
  virtual folly::Future<std::unique_ptr<::cpp2_struct_footprint::StructList>> future_getTypedefList();
  virtual folly::SemiFuture<std::unique_ptr<::cpp2_struct_footprint::StructList>> semifuture_getTypedefList();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::StructList>> co_getTypedefList();
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::StructList>> co_getTypedefList(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getTypedefList(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2_struct_footprint::StructList>> callback);
  virtual void sync_getUnion(::cpp2_struct_footprint::TestUnion& /*_return*/);
  [[deprecated("Use sync_getUnion instead")]] virtual void getUnion(::cpp2_struct_footprint::TestUnion& /*_return*/);
  virtual folly::Future<std::unique_ptr<::cpp2_struct_footprint::TestUnion>> future_getUnion();
  virtual folly::SemiFuture<std::unique_ptr<::cpp2_struct_footprint::TestUnion>> semifuture_getUnion();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::TestUnion>> co_getUnion();
  virtual folly::coro::Task<std::unique_ptr<::cpp2_struct_footprint::TestUnion>> co_getUnion(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getUnion(apache::thrift::HandlerCallbackPtr<std::unique_ptr<::cpp2_struct_footprint::TestUnion>> callback);
  virtual apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void> sync_getCalculator();
  [[deprecated("Use sync_getCalculator instead")]] virtual apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void> getCalculator();
  virtual folly::Future<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void>> future_getCalculator();
  virtual folly::SemiFuture<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void>> semifuture_getCalculator();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void>> co_getCalculator();
  virtual folly::coro::Task<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void>> co_getCalculator(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_getCalculator(apache::thrift::HandlerCallbackPtr<apache::thrift::TileAndResponse<apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>::CalculatorIf, void>> callback);
  virtual ::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct> sync_streamStructs();
  [[deprecated("Use sync_streamStructs instead")]] virtual ::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct> streamStructs();
  virtual folly::Future<::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct>> future_streamStructs();
  virtual folly::SemiFuture<::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct>> semifuture_streamStructs();
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct>> co_streamStructs();
  virtual folly::coro::Task<::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct>> co_streamStructs(apache::thrift::RequestParams params);
#endif
  virtual void async_tm_streamStructs(apache::thrift::HandlerCallbackPtr<::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct>> callback);
  virtual ::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct> sync_streamWithSinkInitial(::std::int32_t /*input*/);
  [[deprecated("Use sync_streamWithSinkInitial instead")]] virtual ::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct> streamWithSinkInitial(::std::int32_t /*input*/);
  virtual folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> future_streamWithSinkInitial(::std::int32_t p_input);
  virtual folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> semifuture_streamWithSinkInitial(::std::int32_t p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> co_streamWithSinkInitial(::std::int32_t p_input);
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> co_streamWithSinkInitial(apache::thrift::RequestParams params, ::std::int32_t p_input);
#endif
  virtual void async_tm_streamWithSinkInitial(apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> callback, ::std::int32_t p_input);
  virtual ::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct> sync_streamWithSinkException(::std::int32_t /*input*/);
  [[deprecated("Use sync_streamWithSinkException instead")]] virtual ::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct> streamWithSinkException(::std::int32_t /*input*/);
  virtual folly::Future<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> future_streamWithSinkException(::std::int32_t p_input);
  virtual folly::SemiFuture<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> semifuture_streamWithSinkException(::std::int32_t p_input);
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> co_streamWithSinkException(::std::int32_t p_input);
  virtual folly::coro::Task<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> co_streamWithSinkException(apache::thrift::RequestParams params, ::std::int32_t p_input);
#endif
  virtual void async_tm_streamWithSinkException(apache::thrift::HandlerCallbackPtr<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>> callback, ::std::int32_t p_input);
 private:
  static ::cpp2_struct_footprint::FootprintTestServiceServiceInfoHolder __fbthrift_serviceInfoHolder;
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_processIOBuf{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getStruct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_setStruct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_setStructList{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getStructList{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getNestedContainer{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getTypedefStruct{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getTypedefList{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getUnion{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getCalculator{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_streamStructs{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_streamWithSinkInitial{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_streamWithSinkException{apache::thrift::detail::si::InvocationType::AsyncTm};
 public:

  virtual void fbthrift_execute_decorators_before_processIOBuf(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::IOBuf>::type /*p_buf*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::IOBufPtr>::type /*p_ptr*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::I32Alias>::type /*p_alias*/) {}
  virtual void fbthrift_execute_decorators_after_processIOBuf(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_processIOBuf(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_processIOBuf(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_getStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::SimpleStruct>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getStruct(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::SimpleStruct>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getStruct(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_setStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::cpp2_struct_footprint::SimpleStruct>::type /*p_input*/) {}
  virtual void fbthrift_execute_decorators_after_setStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_setStruct(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_setStruct(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_setStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::vector<::cpp2_struct_footprint::SimpleStruct>>::type /*p_items*/) {}
  virtual void fbthrift_execute_decorators_after_setStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_setStructList(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_setStructList(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_getStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getStructList(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::vector<::cpp2_struct_footprint::SimpleStruct>>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getStructList(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::vector<::cpp2_struct_footprint::SimpleStruct>>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getStructList(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_getNestedContainer(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getNestedContainer(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getNestedContainer(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getNestedContainer(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_getTypedefStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getTypedefStruct(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::MyStruct>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getTypedefStruct(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::MyStruct>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getTypedefStruct(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_getTypedefList(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getTypedefList(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::StructList>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getTypedefList(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::StructList>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getTypedefList(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_getUnion(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getUnion(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::TestUnion>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_getUnion(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::cpp2_struct_footprint::TestUnion>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getUnion(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_getCalculator(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_getCalculator(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_getCalculator(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_getCalculator(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_streamStructs(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  virtual void fbthrift_execute_decorators_after_streamStructs(apache::thrift::Cpp2RequestContext& /*requestCtx*/) {}
  static void fbthrift_invoke_decorator_after_streamStructs(void* iface, apache::thrift::Cpp2RequestContext* ctx) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_streamStructs(*ctx);
  }
  virtual void fbthrift_execute_decorators_before_streamWithSinkInitial(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int32_t>::type /*p_input*/) {}
  virtual void fbthrift_execute_decorators_after_streamWithSinkInitial(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_streamWithSinkInitial(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_streamWithSinkInitial(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_streamWithSinkException(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int32_t>::type /*p_input*/) {}
  virtual void fbthrift_execute_decorators_after_streamWithSinkException(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_streamWithSinkException(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_streamWithSinkException(*ctx, result);
  }
  virtual void fbthrift_execute_decorators_before_Calculator_add(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorArgType<::std::int32_t>::type /*p_a*/, apache::thrift::detail::DecoratorArgType<::std::int32_t>::type /*p_b*/) {}
  virtual void fbthrift_execute_decorators_after_Calculator_add(apache::thrift::Cpp2RequestContext& /*requestCtx*/, apache::thrift::detail::DecoratorReturnType<::std::int32_t>::type /*result*/) {}
  static void fbthrift_invoke_decorator_after_Calculator_add(void* iface, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::detail::DecoratorReturnType<::std::int32_t>::type result) {
    static_cast<ServiceHandler<::cpp2_struct_footprint::FootprintTestService>*>(iface)->fbthrift_execute_decorators_after_Calculator_add(*ctx, result);
  }
};

namespace detail {
template <> struct TSchemaAssociation<::cpp2_struct_footprint::FootprintTestService, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = -2016535262471784061;
  static constexpr ::std::string_view definitionKey = {"\xc5\x02\x98\x08\x5e\x2a\xc5\x07\xd6\x51\xe6\xd7\x0b\x48\x29\x80", 16};
};
}
} // namespace apache::thrift

namespace cpp2_struct_footprint {
using FootprintTestServiceSvIf [[deprecated("Use apache::thrift::ServiceHandler<FootprintTestService> instead")]] = ::apache::thrift::ServiceHandler<FootprintTestService>;
} // namespace cpp2_struct_footprint

namespace cpp2_struct_footprint {
class FootprintTestServiceSvNull : public ::apache::thrift::ServiceHandler<FootprintTestService> {
 public:
  void processIOBuf(std::unique_ptr<::cpp2_struct_footprint::IOBuf> /*buf*/, std::unique_ptr<::cpp2_struct_footprint::IOBufPtr> /*ptr*/, ::cpp2_struct_footprint::I32Alias /*alias*/) override;
  void getStruct(::cpp2_struct_footprint::SimpleStruct& /*_return*/) override;
  void setStruct(std::unique_ptr<::cpp2_struct_footprint::SimpleStruct> /*input*/) override;
  void setStructList(std::unique_ptr<::std::vector<::cpp2_struct_footprint::SimpleStruct>> /*items*/) override;
  void getStructList(::std::vector<::cpp2_struct_footprint::SimpleStruct>& /*_return*/) override;
  void getNestedContainer(::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>>& /*_return*/) override;
  void getTypedefStruct(::cpp2_struct_footprint::MyStruct& /*_return*/) override;
  void getTypedefList(::cpp2_struct_footprint::StructList& /*_return*/) override;
  void getUnion(::cpp2_struct_footprint::TestUnion& /*_return*/) override;
};

class FootprintTestServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessorBase {
 public:
  std::string_view getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ::apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>* iface_;
 public:
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  void executeRequest(apache::thrift::ServerRequest&& serverRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessorBase::ProcessFuncs<FootprintTestServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessorBase::ProcessMap<ProcessFuncs>;
  using InteractionConstructor = GeneratedAsyncProcessorBase::InteractionConstructor<FootprintTestServiceAsyncProcessor>;
  using InteractionConstructorMap = GeneratedAsyncProcessorBase::InteractionConstructorMap<InteractionConstructor>;
  static const FootprintTestServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
  static const FootprintTestServiceAsyncProcessor::InteractionConstructorMap& getInteractionConstructorMap();
  std::unique_ptr<apache::thrift::Tile> createInteractionImpl(const std::string& name, int16_t) override;
 private:
  static const FootprintTestServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
  static const FootprintTestServiceAsyncProcessor::InteractionConstructorMap interactionConstructorMap_;
 private:
  //
  // Service Methods
  //

  //
  // Method 'processIOBuf'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_processIOBuf(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_processIOBuf(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_processIOBuf(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_processIOBuf(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'processIOBuf'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getStruct'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getStruct(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getStruct(
      apache::thrift::ContextStack* ctx,
      ::cpp2_struct_footprint::SimpleStruct const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getStruct'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'setStruct'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_setStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_setStruct(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_setStruct(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_setStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'setStruct'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'setStructList'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_setStructList(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_setStructList(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_setStructList(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_setStructList(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'setStructList'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getStructList'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getStructList(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getStructList(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getStructList(
      apache::thrift::ContextStack* ctx,
      ::std::vector<::cpp2_struct_footprint::SimpleStruct> const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getStructList(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getStructList'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getNestedContainer'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getNestedContainer(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getNestedContainer(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getNestedContainer(
      apache::thrift::ContextStack* ctx,
      ::std::map<::std::string, ::std::vector<::cpp2_struct_footprint::SimpleStruct>> const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getNestedContainer(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getNestedContainer'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getTypedefStruct'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getTypedefStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getTypedefStruct(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getTypedefStruct(
      apache::thrift::ContextStack* ctx,
      ::cpp2_struct_footprint::MyStruct const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getTypedefStruct(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getTypedefStruct'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getTypedefList'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getTypedefList(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getTypedefList(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getTypedefList(
      apache::thrift::ContextStack* ctx,
      ::cpp2_struct_footprint::StructList const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getTypedefList(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getTypedefList'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getUnion'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getUnion(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getUnion(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getUnion(
      apache::thrift::ContextStack* ctx,
      ::cpp2_struct_footprint::TestUnion const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getUnion(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getUnion'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'getCalculator'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getCalculator(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_getCalculator(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getCalculator(
      apache::thrift::ContextStack* ctx);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getCalculator(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'getCalculator'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'streamStructs'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_streamStructs(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_streamStructs(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_streamStructs(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ServerStream<::cpp2_struct_footprint::SimpleStruct>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_streamStructs(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'streamStructs'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'streamWithSinkInitial'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_streamWithSinkInitial(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_streamWithSinkInitial(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_streamWithSinkInitial(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_streamWithSinkInitial(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'streamWithSinkInitial'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'streamWithSinkException'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_streamWithSinkException(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_streamWithSinkException(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::ResponseAndServerStreamFactory return_streamWithSinkException(
      apache::thrift::ContextStack* ctx,
      folly::Executor::KeepAlive<> executor,
      ::apache::thrift::ResponseAndServerStream<::cpp2_struct_footprint::Struct1, ::cpp2_struct_footprint::SimpleStruct>&& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_streamWithSinkException(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'streamWithSinkException'
  //

  //
  // End of Service Methods
  //
  //
  // Service Methods
  //

  //
  // Method 'add'
  //
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_Calculator_add(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      apache::thrift::SerializedCompressedRequest&& serializedRequest,
      apache::thrift::Cpp2RequestContext* ctx,
      folly::EventBase* eb,
      apache::thrift::concurrency::ThreadManager* tm);

  template <typename ProtocolIn_, typename ProtocolOut_>
  void executeRequest_Calculator_add(apache::thrift::ServerRequest&& serverRequest);

  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_Calculator_add(
      apache::thrift::ContextStack* ctx,
      ::std::int32_t const& _return);

  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_Calculator_add(
      apache::thrift::ResponseChannelRequest::UniquePtr req,
      int32_t protoSeqId,
      apache::thrift::ContextStack* ctx,
      folly::exception_wrapper ew,
      apache::thrift::Cpp2RequestContext* reqCtx);
  //
  // End of Method 'add'
  //

  //
  // End of Service Methods
  //
 public:
  FootprintTestServiceAsyncProcessor(::apache::thrift::ServiceHandler<::cpp2_struct_footprint::FootprintTestService>* iface) :
      iface_(iface) {}
  ~FootprintTestServiceAsyncProcessor() override {}
};

} // namespace cpp2_struct_footprint
