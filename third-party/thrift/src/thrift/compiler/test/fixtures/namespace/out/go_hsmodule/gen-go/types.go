// Autogenerated by Thrift for thrift/compiler/test/fixtures/namespace/src/hsmodule.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package test

import (
    "fmt"
    "reflect"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift/types"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = reflect.Ptr
var _ = thrift.VOID

type HsFoo struct {
    MyInt int64 `thrift:"MyInt,1" json:"MyInt" db:"MyInt"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*HsFoo)(nil)

func NewHsFoo() *HsFoo {
    return (&HsFoo{}).setDefaults()
}

func (x *HsFoo) GetMyInt() int64 {
    return x.MyInt
}

func (x *HsFoo) SetMyIntNonCompat(value int64) *HsFoo {
    x.MyInt = value
    return x
}

func (x *HsFoo) SetMyInt(value int64) *HsFoo {
    x.MyInt = value
    return x
}

func (x *HsFoo) writeField1(p thrift.Encoder) error {  // MyInt
    if err := p.WriteFieldBegin("MyInt", thrift.I64, 1); err != nil {
        return thrift.PrependError("HsFoo write field begin error: ", err)
    }

    item := x.MyInt
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("HsFoo write field end error: ", err)
    }
    return nil
}

func (x *HsFoo) readField1(p thrift.Decoder) error {  // MyInt
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.MyInt = result
    return nil
}



func (x *HsFoo) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("HsFoo"); err != nil {
        return thrift.PrependError("HsFoo write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("HsFoo write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("HsFoo write struct end error: ", err)
    }
    return nil
}

func (x *HsFoo) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("HsFoo read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("HsFoo field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "MyInt")):  // MyInt
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("HsFoo read struct end error: ", err)
    }

    return nil
}

func (x *HsFoo) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *HsFoo) setDefaults() *HsFoo {
    return x.
        SetMyIntNonCompat(0)
}

type reqHsTestServiceInit struct {
    Int1 int64 `thrift:"int1,1" json:"int1" db:"int1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqHsTestServiceInit)(nil)

// Deprecated: HsTestServiceInitArgsDeprecated is deprecated, since it is supposed to be internal.
type HsTestServiceInitArgsDeprecated = reqHsTestServiceInit

func newReqHsTestServiceInit() *reqHsTestServiceInit {
    return (&reqHsTestServiceInit{}).setDefaults()
}

func (x *reqHsTestServiceInit) GetInt1() int64 {
    return x.Int1
}

func (x *reqHsTestServiceInit) SetInt1NonCompat(value int64) *reqHsTestServiceInit {
    x.Int1 = value
    return x
}

func (x *reqHsTestServiceInit) SetInt1(value int64) *reqHsTestServiceInit {
    x.Int1 = value
    return x
}

func (x *reqHsTestServiceInit) writeField1(p thrift.Encoder) error {  // Int1
    if err := p.WriteFieldBegin("int1", thrift.I64, 1); err != nil {
        return thrift.PrependError("reqHsTestServiceInit write field begin error: ", err)
    }

    item := x.Int1
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("reqHsTestServiceInit write field end error: ", err)
    }
    return nil
}

func (x *reqHsTestServiceInit) readField1(p thrift.Decoder) error {  // Int1
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Int1 = result
    return nil
}



func (x *reqHsTestServiceInit) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("reqHsTestServiceInit"); err != nil {
        return thrift.PrependError("reqHsTestServiceInit write struct begin error: ", err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("reqHsTestServiceInit write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("reqHsTestServiceInit write struct end error: ", err)
    }
    return nil
}

func (x *reqHsTestServiceInit) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("reqHsTestServiceInit read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("reqHsTestServiceInit field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 1 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "int1")):  // int1
            fieldReadErr = x.readField1(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("reqHsTestServiceInit read struct end error: ", err)
    }

    return nil
}

func (x *reqHsTestServiceInit) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *reqHsTestServiceInit) setDefaults() *reqHsTestServiceInit {
    return x.
        SetInt1NonCompat(0)
}

type respHsTestServiceInit struct {
    Success *int64 `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respHsTestServiceInit)(nil)
var _ thrift.WritableResult = (*respHsTestServiceInit)(nil)

// Deprecated: HsTestServiceInitResultDeprecated is deprecated, since it is supposed to be internal.
type HsTestServiceInitResultDeprecated = respHsTestServiceInit

func newRespHsTestServiceInit() *respHsTestServiceInit {
    return (&respHsTestServiceInit{}).setDefaults()
}

func (x *respHsTestServiceInit) GetSuccess() int64 {
    if !x.IsSetSuccess() {
        return 0
    }
    return *x.Success
}

func (x *respHsTestServiceInit) SetSuccessNonCompat(value int64) *respHsTestServiceInit {
    x.Success = &value
    return x
}

func (x *respHsTestServiceInit) SetSuccess(value *int64) *respHsTestServiceInit {
    x.Success = value
    return x
}

func (x *respHsTestServiceInit) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respHsTestServiceInit) writeField0(p thrift.Encoder) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.I64, 0); err != nil {
        return thrift.PrependError("respHsTestServiceInit write field begin error: ", err)
    }

    item := *x.Success
    if err := p.WriteI64(item); err != nil {
        return err
    }

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError("respHsTestServiceInit write field end error: ", err)
    }
    return nil
}

func (x *respHsTestServiceInit) readField0(p thrift.Decoder) error {  // Success
    result, err := p.ReadI64()
    if err != nil {
        return err
    }

    x.Success = &result
    return nil
}




func (x *respHsTestServiceInit) Exception() thrift.WritableException {
    return nil
}

func (x *respHsTestServiceInit) Write(p thrift.Encoder) error {
    if err := p.WriteStructBegin("respHsTestServiceInit"); err != nil {
        return thrift.PrependError("respHsTestServiceInit write struct begin error: ", err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError("respHsTestServiceInit write field stop error: ", err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError("respHsTestServiceInit write struct end error: ", err)
    }
    return nil
}

func (x *respHsTestServiceInit) Read(p thrift.Decoder) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError("respHsTestServiceInit read error: ", err)
    }

    for {
        fieldName, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("respHsTestServiceInit field %d ('%s') read error: ", id, fieldName), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        var fieldReadErr error
        switch {
        case ((id == 0 && wireType == thrift.I64) || (id == thrift.NO_FIELD_ID && fieldName == "success")):  // success
            fieldReadErr = x.readField0(p)
        default:
            fieldReadErr = p.Skip(wireType)
        }

        if fieldReadErr != nil {
            return fieldReadErr
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError("respHsTestServiceInit read struct end error: ", err)
    }

    return nil
}

func (x *respHsTestServiceInit) String() string {
    return thrift.StructToString(reflect.ValueOf(x))
}

func (x *respHsTestServiceInit) setDefaults() *respHsTestServiceInit {
    return x
}


// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
