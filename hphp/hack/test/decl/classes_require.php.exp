Parsed decls:

{ Direct_decl_parser.classes =
  { "\\AirBus" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([23:7-13], "\\AirBus"); sc_tparams = [];
      sc_where_constraints = [];
      sc_extends =
      [(Rhint (root|classes_require.php line 23, characters 22-28),
        (Tapply (([23:22-29], "\\Machine"), [])))];
      sc_uses =
      [(Rhint (root|classes_require.php line 24, characters 7-11),
        (Tapply (([24:7-12], "\\Plane"), [])))];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements =
      [(Rhint (root|classes_require.php line 23, characters 41-46),
        (Tapply (([23:41-47], "\\Fliers"), [])))];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = []; sc_props = [];
      sc_sprops = []; sc_constructor = None; sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = false; sm_final = false;
         sm_memoizelsb = false; sm_name = ([26:19-22], "fly");
         sm_override = false; sm_dynamicallycallable = false;
         sm_reactivity = None;
         sm_type =
         (Rwitness (root|classes_require.php line 26, characters 19-21),
          (Tfun
             { ft_arity = (Fstandard ()); ft_tparams = [];
               ft_where_constraints = []; ft_params = [];
               ft_implicit_params =
               { capability =
                 (Rhint (root|classes_require.php line 26, characters 19-21),
                  (Tunion []))
                 };
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|classes_require.php line 26, characters 26-29),
                  (Tprim Tbool))
                 };
               ft_flags =
               (make_ft_flags sync none ~return_disposable:false
                 ~returns_mutable:false ~returns_void_to_rx:false);
               ft_reactive = Nonreactive }));
         sm_visibility = Public; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\Fliers" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cinterface;
      sc_name = ([8:11-17], "\\Fliers"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = true; sm_final = false;
         sm_memoizelsb = false; sm_name = ([9:19-22], "fly");
         sm_override = false; sm_dynamicallycallable = false;
         sm_reactivity = None;
         sm_type =
         (Rwitness (root|classes_require.php line 9, characters 19-21),
          (Tfun
             { ft_arity = (Fstandard ()); ft_tparams = [];
               ft_where_constraints = []; ft_params = [];
               ft_implicit_params =
               { capability =
                 (Rhint (root|classes_require.php line 9, characters 19-21),
                  (Tunion []))
                 };
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|classes_require.php line 9, characters 26-29),
                  (Tprim Tbool))
                 };
               ft_flags =
               (make_ft_flags sync none ~return_disposable:false
                 ~returns_mutable:false ~returns_void_to_rx:false);
               ft_reactive = Nonreactive }));
         sm_visibility = Public; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\Machine" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cabstract;
      sc_name = ([3:16-23], "\\Machine"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = false; sm_final = false;
         sm_memoizelsb = false; sm_name = ([4:19-28], "openDoors");
         sm_override = false; sm_dynamicallycallable = false;
         sm_reactivity = None;
         sm_type =
         (Rwitness (root|classes_require.php line 4, characters 19-27),
          (Tfun
             { ft_arity = (Fstandard ()); ft_tparams = [];
               ft_where_constraints = []; ft_params = [];
               ft_implicit_params =
               { capability =
                 (Rhint (root|classes_require.php line 4, characters 19-27),
                  (Tunion []))
                 };
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|classes_require.php line 4, characters 32-35),
                  (Tprim Tvoid))
                 };
               ft_flags =
               (make_ft_flags sync none ~return_disposable:false
                 ~returns_mutable:false ~returns_void_to_rx:false);
               ft_reactive = Nonreactive }));
         sm_visibility = Public; sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false; sm_name = ([5:19-29], "closeDoors");
          sm_override = false; sm_dynamicallycallable = false;
          sm_reactivity = None;
          sm_type =
          (Rwitness (root|classes_require.php line 5, characters 19-28),
           (Tfun
              { ft_arity = (Fstandard ()); ft_tparams = [];
                ft_where_constraints = []; ft_params = [];
                ft_implicit_params =
                { capability =
                  (Rhint (root|classes_require.php line 5, characters 19-28),
                   (Tunion []))
                  };
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes_require.php line 5, characters 33-36),
                   (Tprim Tvoid))
                  };
                ft_flags =
                (make_ft_flags sync none ~return_disposable:false
                  ~returns_mutable:false ~returns_void_to_rx:false);
                ft_reactive = Nonreactive }));
          sm_visibility = Public; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "\\Plane" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Ctrait;
      sc_name = ([12:7-12], "\\Plane"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_xhp_attr_uses = [];
      sc_req_extends =
      [(Rhint (root|classes_require.php line 13, characters 19-25),
        (Tapply (([13:19-26], "\\Machine"), [])))];
      sc_req_implements =
      [(Rhint (root|classes_require.php line 14, characters 22-27),
        (Tapply (([14:22-28], "\\Fliers"), [])))];
      sc_implements = []; sc_consts = []; sc_typeconsts = [];
      sc_pu_enums = []; sc_props = []; sc_sprops = []; sc_constructor = None;
      sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = false; sm_final = false;
         sm_memoizelsb = false; sm_name = ([16:19-26], "takeOff");
         sm_override = false; sm_dynamicallycallable = false;
         sm_reactivity = None;
         sm_type =
         (Rwitness (root|classes_require.php line 16, characters 19-25),
          (Tfun
             { ft_arity = (Fstandard ()); ft_tparams = [];
               ft_where_constraints = []; ft_params = [];
               ft_implicit_params =
               { capability =
                 (Rhint (root|classes_require.php line 16, characters 19-25),
                  (Tunion []))
                 };
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|classes_require.php line 16, characters 30-33),
                  (Tprim Tbool))
                 };
               ft_flags =
               (make_ft_flags sync none ~return_disposable:false
                 ~returns_mutable:false ~returns_void_to_rx:false);
               ft_reactive = Nonreactive }));
         sm_visibility = Public; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
