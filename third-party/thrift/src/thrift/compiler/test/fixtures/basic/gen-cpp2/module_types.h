/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/annotation/gen-cpp2/hack_types.h"

namespace apache {
namespace thrift {
namespace ident {
struct MyIntField;
struct MyStringField;
struct MyDataField;
struct myEnum;
struct oneway;
struct readonly;
struct idempotent;
struct floatSet;
struct no_hack_codegen_field;
struct myEnum;
struct myStruct;
struct myDataItem;
struct floatSet;
struct reserved_field;
struct reserved_field;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDataField
#define APACHE_THRIFT_ACCESSOR_MyDataField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDataField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_oneway
#define APACHE_THRIFT_ACCESSOR_oneway
APACHE_THRIFT_DEFINE_ACCESSOR(oneway);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_readonly
#define APACHE_THRIFT_ACCESSOR_readonly
APACHE_THRIFT_DEFINE_ACCESSOR(readonly);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_idempotent
#define APACHE_THRIFT_ACCESSOR_idempotent
APACHE_THRIFT_DEFINE_ACCESSOR(idempotent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatSet
#define APACHE_THRIFT_ACCESSOR_floatSet
APACHE_THRIFT_DEFINE_ACCESSOR(floatSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_no_hack_codegen_field
#define APACHE_THRIFT_ACCESSOR_no_hack_codegen_field
APACHE_THRIFT_DEFINE_ACCESSOR(no_hack_codegen_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatSet
#define APACHE_THRIFT_ACCESSOR_floatSet
APACHE_THRIFT_DEFINE_ACCESSOR(floatSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reserved_field
#define APACHE_THRIFT_ACCESSOR_reserved_field
APACHE_THRIFT_DEFINE_ACCESSOR(reserved_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_reserved_field
#define APACHE_THRIFT_ACCESSOR_reserved_field
APACHE_THRIFT_DEFINE_ACCESSOR(reserved_field);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace test { namespace fixtures { namespace basic {

enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
};



enum class HackEnum {
  Value1 = 0,
  Value2 = 1,
};



}}} // test::fixtures::basic

namespace std {
template<> struct hash<::test::fixtures::basic::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic::MyEnum> {};
template<> struct hash<::test::fixtures::basic::HackEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic::HackEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::test::fixtures::basic::MyEnum>;

template <> struct TEnumTraits<::test::fixtures::basic::MyEnum> {
  using type = ::test::fixtures::basic::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue2; }
};


template <> struct TEnumDataStorage<::test::fixtures::basic::HackEnum>;

template <> struct TEnumTraits<::test::fixtures::basic::HackEnum> {
  using type = ::test::fixtures::basic::HackEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::Value1; }
  static constexpr type max() { return type::Value2; }
};


}} // apache::thrift

namespace test { namespace fixtures { namespace basic {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
#endif
using _HackEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<HackEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _HackEnum_EnumMapFactory::ValuesToNamesMapType _HackEnum_VALUES_TO_NAMES;
#endif
}}} // test::fixtures::basic

// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace basic {
class MyStruct;
class MyDataItem;
class MyUnion;
class ReservedKeyword;
class UnionToBeRenamed;
}}} // test::fixtures::basic
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace basic {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::MyDataField,
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::oneway,
    ::apache::thrift::ident::readonly,
    ::apache::thrift::ident::idempotent,
    ::apache::thrift::ident::floatSet,
    ::apache::thrift::ident::no_hack_codegen_field
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyDataItem>,
    ::apache::thrift::type::enum_t<::test::fixtures::basic::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::float_t>,
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 9;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic::MyDataItem MyDataField__arg, ::test::fixtures::basic::MyEnum myEnum__arg, bool oneway__arg, bool readonly__arg, bool idempotent__arg, ::std::set<float> floatSet__arg, ::std::string no_hack_codegen_field__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::test::fixtures::basic::MyDataItem __fbthrift_field_MyDataField;
 private:
  ::test::fixtures::basic::MyEnum __fbthrift_field_myEnum;
 private:
  bool __fbthrift_field_oneway;
 private:
  bool __fbthrift_field_readonly;
 private:
  bool __fbthrift_field_idempotent;
 private:
  ::std::set<float> __fbthrift_field_floatSet;
 private:
  ::std::string __fbthrift_field_no_hack_codegen_field;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyDataField_ref() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyDataField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyDataField_ref() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyDataField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyDataField() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyDataField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyDataField() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyDataField() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnum_ref() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnum_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnum_ref() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnum_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnum() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnum() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnum() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnum() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> oneway_ref() const& {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> oneway_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> oneway_ref() & {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> oneway_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> oneway() const& {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> oneway() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> oneway() & {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> oneway() && {
    return {static_cast<T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> readonly_ref() const& {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> readonly_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_readonly), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> readonly_ref() & {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> readonly_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_readonly), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> readonly() const& {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> readonly() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_readonly), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> readonly() & {
    return {this->__fbthrift_field_readonly, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> readonly() && {
    return {static_cast<T&&>(this->__fbthrift_field_readonly), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> idempotent_ref() const& {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> idempotent_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_idempotent), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> idempotent_ref() & {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> idempotent_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_idempotent), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> idempotent() const& {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> idempotent() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_idempotent), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> idempotent() & {
    return {this->__fbthrift_field_idempotent, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> idempotent() && {
    return {static_cast<T&&>(this->__fbthrift_field_idempotent), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatSet_ref() const& {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatSet_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatSet_ref() & {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatSet_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatSet() const& {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatSet() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatSet() & {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatSet() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> no_hack_codegen_field_ref() const& {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> no_hack_codegen_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_no_hack_codegen_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> no_hack_codegen_field_ref() & {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> no_hack_codegen_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_no_hack_codegen_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> no_hack_codegen_field() const& {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> no_hack_codegen_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_no_hack_codegen_field), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> no_hack_codegen_field() & {
    return {this->__fbthrift_field_no_hack_codegen_field, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> no_hack_codegen_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_no_hack_codegen_field), __isset.at(8), __isset.bit(8)};
  }

  ::std::int64_t get_MyIntField() const {
    return __fbthrift_field_MyIntField;
  }

  [[deprecated("Use `FOO.MyIntField_ref() = BAR;` instead of `FOO.set_MyIntField(BAR);`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_) {
    MyIntField_ref() = MyIntField_;
    return __fbthrift_field_MyIntField;
  }

  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  ::std::string get_MyStringField() && {
    return std::move(__fbthrift_field_MyStringField);
  }

  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField_ref() = BAR;` instead of `FOO.set_MyStringField(BAR);`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }
  const ::test::fixtures::basic::MyDataItem& get_MyDataField() const&;
  ::test::fixtures::basic::MyDataItem get_MyDataField() &&;

  template <typename T_MyStruct_MyDataField_struct_setter = ::test::fixtures::basic::MyDataItem>
  [[deprecated("Use `FOO.MyDataField_ref() = BAR;` instead of `FOO.set_MyDataField(BAR);`")]]
  ::test::fixtures::basic::MyDataItem& set_MyDataField(T_MyStruct_MyDataField_struct_setter&& MyDataField_) {
    MyDataField_ref() = std::forward<T_MyStruct_MyDataField_struct_setter>(MyDataField_);
    return __fbthrift_field_MyDataField;
  }

  ::test::fixtures::basic::MyEnum get_myEnum() const {
    return __fbthrift_field_myEnum;
  }

  [[deprecated("Use `FOO.myEnum_ref() = BAR;` instead of `FOO.set_myEnum(BAR);`")]]
  ::test::fixtures::basic::MyEnum& set_myEnum(::test::fixtures::basic::MyEnum myEnum_) {
    myEnum_ref() = myEnum_;
    return __fbthrift_field_myEnum;
  }

  bool get_oneway() const {
    return __fbthrift_field_oneway;
  }

  [[deprecated("Use `FOO.oneway_ref() = BAR;` instead of `FOO.set_oneway(BAR);`")]]
  bool& set_oneway(bool oneway_) {
    oneway_ref() = oneway_;
    return __fbthrift_field_oneway;
  }

  bool get_readonly() const {
    return __fbthrift_field_readonly;
  }

  [[deprecated("Use `FOO.readonly_ref() = BAR;` instead of `FOO.set_readonly(BAR);`")]]
  bool& set_readonly(bool readonly_) {
    readonly_ref() = readonly_;
    return __fbthrift_field_readonly;
  }

  bool get_idempotent() const {
    return __fbthrift_field_idempotent;
  }

  [[deprecated("Use `FOO.idempotent_ref() = BAR;` instead of `FOO.set_idempotent(BAR);`")]]
  bool& set_idempotent(bool idempotent_) {
    idempotent_ref() = idempotent_;
    return __fbthrift_field_idempotent;
  }
  const ::std::set<float>& get_floatSet() const&;
  ::std::set<float> get_floatSet() &&;

  template <typename T_MyStruct_floatSet_struct_setter = ::std::set<float>>
  [[deprecated("Use `FOO.floatSet_ref() = BAR;` instead of `FOO.set_floatSet(BAR);`")]]
  ::std::set<float>& set_floatSet(T_MyStruct_floatSet_struct_setter&& floatSet_) {
    floatSet_ref() = std::forward<T_MyStruct_floatSet_struct_setter>(floatSet_);
    return __fbthrift_field_floatSet;
  }

  const ::std::string& get_no_hack_codegen_field() const& {
    return __fbthrift_field_no_hack_codegen_field;
  }

  ::std::string get_no_hack_codegen_field() && {
    return std::move(__fbthrift_field_no_hack_codegen_field);
  }

  template <typename T_MyStruct_no_hack_codegen_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.no_hack_codegen_field_ref() = BAR;` instead of `FOO.set_no_hack_codegen_field(BAR);`")]]
  ::std::string& set_no_hack_codegen_field(T_MyStruct_no_hack_codegen_field_struct_setter&& no_hack_codegen_field_) {
    no_hack_codegen_field_ref() = std::forward<T_MyStruct_no_hack_codegen_field_struct_setter>(no_hack_codegen_field_);
    return __fbthrift_field_no_hack_codegen_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myDataItem,
    ::apache::thrift::ident::floatSet
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::basic::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic::MyDataItem>,
    ::apache::thrift::type::set<::apache::thrift::type::float_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    myDataItem = 3,
    floatSet = 4,
  } ;

  MyUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::floatSet:
      {
        set_floatSet(std::move(rhs.value_.floatSet));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::floatSet:
      {
        set_floatSet(rhs.value_.floatSet);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::floatSet:
      {
        set_floatSet(std::move(rhs.value_.floatSet));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::floatSet:
      {
        set_floatSet(rhs.value_.floatSet);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~MyUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::test::fixtures::basic::MyEnum myEnum;
    ::test::fixtures::basic::MyStruct myStruct;
    ::test::fixtures::basic::MyDataItem myDataItem;
    ::std::set<float> floatSet;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic::MyEnum& set_myEnum(::test::fixtures::basic::MyEnum t = ::test::fixtures::basic::MyEnum()) {
    using T0 = ::test::fixtures::basic::MyEnum;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic::MyStruct& set_myStruct(::test::fixtures::basic::MyStruct const &t) {
    using T0 = ::test::fixtures::basic::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(t);
    return value_.myStruct;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic::MyStruct& set_myStruct(::test::fixtures::basic::MyStruct&& t) {
    using T0 = ::test::fixtures::basic::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(std::move(t));
    return value_.myStruct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic::MyStruct, T...>> ::test::fixtures::basic::MyStruct& set_myStruct(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) ::test::fixtures::basic::MyStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic::MyDataItem& set_myDataItem(::test::fixtures::basic::MyDataItem const &t) {
    using T0 = ::test::fixtures::basic::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(t);
    return value_.myDataItem;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic::MyDataItem& set_myDataItem(::test::fixtures::basic::MyDataItem&& t) {
    using T0 = ::test::fixtures::basic::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(std::move(t));
    return value_.myDataItem;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic::MyDataItem, T...>> ::test::fixtures::basic::MyDataItem& set_myDataItem(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) ::test::fixtures::basic::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::set<float>& set_floatSet(::std::set<float> const &t) {
    using T0 = ::std::set<float>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::floatSet);
    ::new (std::addressof(value_.floatSet)) T(t);
    return value_.floatSet;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::set<float>& set_floatSet(::std::set<float>&& t) {
    using T0 = ::std::set<float>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::floatSet);
    ::new (std::addressof(value_.floatSet)) T(std::move(t));
    return value_.floatSet;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::set<float>, T...>> ::std::set<float>& set_floatSet(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::floatSet);
    ::new (std::addressof(value_.floatSet)) ::std::set<float>(std::forward<T>(t)...);
    return value_.floatSet;
  }

  ::test::fixtures::basic::MyEnum const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  ::test::fixtures::basic::MyStruct const& get_myStruct() const {
    if (getType() != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myStruct;
  }

  ::test::fixtures::basic::MyDataItem const& get_myDataItem() const {
    if (getType() != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myDataItem;
  }

  ::std::set<float> const& get_floatSet() const {
    if (getType() != Type::floatSet) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.floatSet;
  }

  ::test::fixtures::basic::MyEnum& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::test::fixtures::basic::MyStruct& mutable_myStruct() {
    assert(getType() == Type::myStruct);
    return value_.myStruct;
  }

  ::test::fixtures::basic::MyDataItem& mutable_myDataItem() {
    assert(getType() == Type::myDataItem);
    return value_.myDataItem;
  }

  ::std::set<float>& mutable_floatSet() {
    assert(getType() == Type::floatSet);
    return value_.floatSet;
  }

  ::test::fixtures::basic::MyEnum move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  ::test::fixtures::basic::MyStruct move_myStruct() {
    assert(getType() == Type::myStruct);
    return std::move(value_.myStruct);
  }

  ::test::fixtures::basic::MyDataItem move_myDataItem() {
    assert(getType() == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  ::std::set<float> move_floatSet() {
    assert(getType() == Type::floatSet);
    return std::move(value_.floatSet);
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myEnum_ref() const&& {
    return {std::move(value_.myEnum), type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myStruct_ref() const&& {
    return {std::move(value_.myStruct), type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myDataItem_ref() const&& {
    return {std::move(value_.myDataItem), type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> floatSet_ref() const& {
    return {value_.floatSet, type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> floatSet_ref() const&& {
    return {std::move(value_.floatSet), type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> floatSet_ref() & {
    return {value_.floatSet, type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<float>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> floatSet_ref() && {
    return {std::move(value_.floatSet), type_, folly::to_underlying(Type::floatSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class ReservedKeyword final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::reserved_field
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ReservedKeyword;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ReservedKeyword() :
      __fbthrift_field_reserved_field() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ReservedKeyword(apache::thrift::FragileConstructor, ::std::int32_t reserved_field__arg);

  ReservedKeyword(ReservedKeyword&&) = default;

  ReservedKeyword(const ReservedKeyword&) = default;


  ReservedKeyword& operator=(ReservedKeyword&&) = default;

  ReservedKeyword& operator=(const ReservedKeyword&) = default;
 private:
  ::std::int32_t __fbthrift_field_reserved_field;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ReservedKeyword&) const;
  bool operator<(const ReservedKeyword&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> reserved_field_ref() const& {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> reserved_field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_reserved_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> reserved_field_ref() & {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> reserved_field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_reserved_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> reserved_field() const& {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> reserved_field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_reserved_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> reserved_field() & {
    return {this->__fbthrift_field_reserved_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> reserved_field() && {
    return {static_cast<T&&>(this->__fbthrift_field_reserved_field), __isset.at(0), __isset.bit(0)};
  }

  ::std::int32_t get_reserved_field() const {
    return __fbthrift_field_reserved_field;
  }

  [[deprecated("Use `FOO.reserved_field_ref() = BAR;` instead of `FOO.set_reserved_field(BAR);`")]]
  ::std::int32_t& set_reserved_field(::std::int32_t reserved_field_) {
    reserved_field_ref() = reserved_field_;
    return __fbthrift_field_reserved_field;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ReservedKeyword>;
  friend void swap(ReservedKeyword& a, ReservedKeyword& b);
};

template <class Protocol_>
unsigned long ReservedKeyword::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class UnionToBeRenamed final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::reserved_field
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = UnionToBeRenamed;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    reserved_field = 1,
  } ;

  UnionToBeRenamed()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  UnionToBeRenamed(UnionToBeRenamed&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::reserved_field:
      {
        set_reserved_field(std::move(rhs.value_.reserved_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  UnionToBeRenamed(const UnionToBeRenamed& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::reserved_field:
      {
        set_reserved_field(rhs.value_.reserved_field);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  UnionToBeRenamed& operator=(UnionToBeRenamed&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::reserved_field:
      {
        set_reserved_field(std::move(rhs.value_.reserved_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  UnionToBeRenamed& operator=(const UnionToBeRenamed& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::reserved_field:
      {
        set_reserved_field(rhs.value_.reserved_field);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }


  union storage_type {
    ::std::int32_t reserved_field;

  } ;

  bool operator==(const UnionToBeRenamed&) const;
  bool operator<(const UnionToBeRenamed&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::int32_t& set_reserved_field(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::reserved_field);
    ::new (std::addressof(value_.reserved_field)) T(t);
    return value_.reserved_field;
  }

  ::std::int32_t const& get_reserved_field() const {
    if (getType() != Type::reserved_field) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.reserved_field;
  }

  ::std::int32_t& mutable_reserved_field() {
    assert(getType() == Type::reserved_field);
    return value_.reserved_field;
  }

  ::std::int32_t move_reserved_field() {
    assert(getType() == Type::reserved_field);
    return std::move(value_.reserved_field);
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> reserved_field_ref() const& {
    return {value_.reserved_field, type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> reserved_field_ref() const&& {
    return {std::move(value_.reserved_field), type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> reserved_field_ref() & {
    return {value_.reserved_field, type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> reserved_field_ref() && {
    return {std::move(value_.reserved_field), type_, folly::to_underlying(Type::reserved_field), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<UnionToBeRenamed>;
  friend void swap(UnionToBeRenamed& a, UnionToBeRenamed& b);
};

template <class Protocol_>
unsigned long UnionToBeRenamed::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}} // test::fixtures::basic

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::basic::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::basic::MyUnion::Type> {
  using type = ::test::fixtures::basic::MyUnion::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};

template <> struct TEnumDataStorage<::test::fixtures::basic::UnionToBeRenamed::Type>;

template <> struct TEnumTraits<::test::fixtures::basic::UnionToBeRenamed::Type> {
  using type = ::test::fixtures::basic::UnionToBeRenamed::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
