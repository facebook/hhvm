/**
 * Autogenerated by Thrift for /home/fbthrift/thrift/lib/thrift/metadata.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/lib/thrift/gen-cpp2/ThriftMetadataService.h"
#include "thrift/lib/thrift/gen-cpp2/ThriftMetadataService.tcc"
#include "thrift/lib/thrift/gen-cpp2/metadata_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace apache { namespace thrift { namespace metadata {
std::unique_ptr<apache::thrift::AsyncProcessor> ThriftMetadataServiceSvIf::getProcessor() {
  return std::make_unique<ThriftMetadataServiceAsyncProcessor>(this);
}


void ThriftMetadataServiceSvIf::getThriftServiceMetadata( ::apache::thrift::metadata::ThriftServiceMetadataResponse& /*_return*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getThriftServiceMetadata");
}

folly::SemiFuture<std::unique_ptr< ::apache::thrift::metadata::ThriftServiceMetadataResponse>> ThriftMetadataServiceSvIf::semifuture_getThriftServiceMetadata() {
  return apache::thrift::detail::si::semifuture_returning_uptr([&]( ::apache::thrift::metadata::ThriftServiceMetadataResponse& _return) { getThriftServiceMetadata(_return); });
}

folly::Future<std::unique_ptr< ::apache::thrift::metadata::ThriftServiceMetadataResponse>> ThriftMetadataServiceSvIf::future_getThriftServiceMetadata() {
  return apache::thrift::detail::si::future(semifuture_getThriftServiceMetadata(), getThreadManager());
}

void ThriftMetadataServiceSvIf::async_tm_getThriftServiceMetadata(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::metadata::ThriftServiceMetadataResponse>>> callback) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getThriftServiceMetadata();
  });
}

void ThriftMetadataServiceSvNull::getThriftServiceMetadata( ::apache::thrift::metadata::ThriftServiceMetadataResponse& /*_return*/) {}



const char* ThriftMetadataServiceAsyncProcessor::getServiceName() {
  return "ThriftMetadataService";
}

void ThriftMetadataServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<ThriftMetadataServiceSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void ThriftMetadataServiceAsyncProcessor::processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> ThriftMetadataServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const ThriftMetadataServiceAsyncProcessor::ProcessMap& ThriftMetadataServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const ThriftMetadataServiceAsyncProcessor::ProcessMap ThriftMetadataServiceAsyncProcessor::binaryProcessMap_ {
  {"getThriftServiceMetadata", &ThriftMetadataServiceAsyncProcessor::setUpAndProcess_getThriftServiceMetadata<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const ThriftMetadataServiceAsyncProcessor::ProcessMap& ThriftMetadataServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const ThriftMetadataServiceAsyncProcessor::ProcessMap ThriftMetadataServiceAsyncProcessor::compactProcessMap_ {
  {"getThriftServiceMetadata", &ThriftMetadataServiceAsyncProcessor::setUpAndProcess_getThriftServiceMetadata<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // apache::thrift::metadata
