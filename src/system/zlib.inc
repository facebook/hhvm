// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"readgzfile", T(Variant), S(0), "filename", T(String), NULL, NULL, S(0), "use_include_path", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.readgzfile.php )\n *\n * Reads a file, decompresses it and writes it to standard output.\n *\n * readgzfile() can be used to read a file which is not in gzip format; in\n * this case readgzfile() will directly read from the file without\n * decompression.\n *\n * @filename   string  The file name. This file will be opened from the\n *                     filesystem and its contents written to standard\n *                     output.\n * @use_include_path\n *             bool    You can set this optional parameter to 1, if you\n *                     want to search for the file in the include_path too.\n *\n * @return     mixed   Returns the number of (uncompressed) bytes read from\n *                     the file. If an error occurs, FALSE is returned and\n *                     unless the function was called as @readgzfile, an\n *                     error message is printed.\n */", 
"gzfile", T(Variant), S(0), "filename", T(String), NULL, NULL, S(0), "use_include_path", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzfile.php )\n *\n * This function is identical to readgzfile(), except that it returns the\n * file in an array.\n *\n * @filename   string  The file name.\n * @use_include_path\n *             bool    You can set this optional parameter to 1, if you\n *                     want to search for the file in the include_path too.\n *\n * @return     mixed   An array containing the file, one line per cell.\n */", 
"gzcompress", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "level", T(Int32), "i:-1;", "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzcompress.php )\n *\n * This function compress the given string using the ZLIB data format.\n *\n * For details on the ZLIB compression algorithm see the document \"\273 ZLIB\n * Compressed Data Format Specification version 3.3\" (RFC 1950).\n *\n * This is not the same as gzip compression, which includes some header\n * data. See gzencode() for gzip compression.\n *\n * @data       string  The data to compress.\n * @level      int     The level of compression. Can be given as 0 for no\n *                     compression up to 9 for maximum compression.\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */", 
"gzuncompress", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "limit", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzuncompress.php )\n *\n * This function uncompress a compressed string.\n *\n * @data       string  The data compressed by gzcompress().\n * @limit      int     The maximum length of data to decode.\n *\n * @return     mixed   The original uncompressed data or FALSE on error.\n *\n *                     The function will return an error if the\n *                     uncompressed data is more than 32768 times the\n *                     length of the compressed input data or more than the\n *                     optional parameter length.\n */", 
"gzdeflate", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "level", T(Int32), "i:-1;", "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzdeflate.php )\n *\n * This function compress the given string using the DEFLATE data format.\n *\n * For details on the DEFLATE compression algorithm see the document \"\273\n * DEFLATE Compressed Data Format Specification version 1.3\" (RFC 1951).\n *\n * @data       string  The data to deflate.\n * @level      int     The level of compression. Can be given as 0 for no\n *                     compression up to 9 for maximum compression. If not\n *                     given, the default compression level will be the\n *                     default compression level of the zlib library.\n *\n * @return     mixed   The deflated string or FALSE if an error occurred.\n */", 
"gzinflate", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "limit", T(Int32), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzinflate.php )\n *\n * This function inflate a deflated string.\n *\n * @data       string  The data compressed by gzdeflate().\n * @limit      int     The maximum length of data to decode.\n *\n * @return     mixed   The original uncompressed data or FALSE on error.\n *\n *                     The function will return an error if the\n *                     uncompressed data is more than 32768 times the\n *                     length of the compressed input data or more than the\n *                     optional parameter length.\n */", 
"gzencode", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "level", T(Int32), "i:-1;", "-1", S(0), "encoding_mode", T(Int32), "i:1;", "FORCE_GZIP", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzencode.php )\n *\n * This function returns a compressed version of the input data compatible\n * with the output of the gzip program.\n *\n * For more information on the GZIP file format, see the document: \273 GZIP\n * file format specification version 4.3 (RFC 1952).\n *\n * @data       string  The data to encode.\n * @level      int     The level of compression. Can be given as 0 for no\n *                     compression up to 9 for maximum compression. If not\n *                     given, the default compression level will be the\n *                     default compression level of the zlib library.\n * @encoding_mode\n *             int     The encoding mode. Can be FORCE_GZIP (the default)\n *                     or FORCE_DEFLATE.\n *\n *                     If you use FORCE_DEFLATE, you get a standard zlib\n *                     deflated string (inclusive zlib headers) after the\n *                     gzip file header but without the trailing crc32\n *                     checksum.\n *\n * @return     mixed   The encoded string, or FALSE if an error occurred.\n */", 
"gzdecode", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzdecode.php )\n *\n * This function returns a decoded version of the input data.\n *\n * @data       string  The data to decode, encoded by gzencode().\n *\n * @return     mixed   The decoded string, or FALSE if an error occurred.\n */", 
"zlib_get_coding_type", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.zlib-get-coding-type.php )\n *\n * Returns the coding type used for output compression.\n *\n * @return     string  Possible return values are gzip, deflate, or FALSE.\n */", 
"gzopen", T(Object), S(0), "filename", T(String), NULL, NULL, S(0), "mode", T(String), NULL, NULL, S(0), "use_include_path", T(Boolean), "b:0;", "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzopen.php )\n *\n * Opens a gzip (.gz) file for reading or writing.\n *\n * gzopen() can be used to read a file which is not in gzip format; in\n * this case gzread() will directly read from the file without\n * decompression.\n *\n * @filename   string  The file name.\n * @mode       string  As in fopen() (rb or wb) but can also include a\n *                     compression level (wb9) or a strategy: f for\n *                     filtered data as in wb6f, h for Huffman only\n *                     compression as in wb1h. (See the description of\n *                     deflateInit2 in zlib.h for more information about\n *                     the strategy parameter.)\n * @use_include_path\n *             bool    You can set this optional parameter to 1, if you\n *                     want to search for the file in the include_path too.\n *\n * @return     resource\n *                     Returns a file pointer to the file opened, after\n *                     that, everything you read from this file descriptor\n *                     will be transparently decompressed and what you\n *                     write gets compressed.\n *\n *                     If the open fails, the function returns FALSE.\n */", 
"gzclose", T(Boolean), S(0), "zp", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzclose.php )\n *\n * Closes the given gz-file pointer.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"gzrewind", T(Boolean), S(0), "zp", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzrewind.php )\n *\n * Sets the file position indicator of the given gz-file pointer to the\n * beginning of the file stream.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"gzeof", T(Boolean), S(0), "zp", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzeof.php )\n *\n * Tests the given GZ file pointer for EOF.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     bool    Returns TRUE if the gz-file pointer is at EOF or an\n *                     error occurs; otherwise returns FALSE.\n */", 
"gzgetc", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzgetc.php )\n *\n * Returns a string containing a single (uncompressed) character read from\n * the given gz-file pointer.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     mixed   The uncompressed character or FALSE on EOF (unlike\n *                     gzeof()).\n */", 
"gzgets", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), "length", T(Int64), "i:1024;", "1024", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzgets.php )\n *\n * Gets a (uncompressed) string of up to length - 1 bytes read from the\n * given file pointer. Reading ends when length - 1 bytes have been read,\n * on a newline, or on EOF (whichever comes first).\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @length     int     The length of data to get.\n *\n * @return     mixed   The uncompressed string, or FALSE on error.\n */", 
"gzgetss", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), "length", T(Int64), "i:0;", "0", S(0), "allowable_tags", T(String), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzgetss.php )\n *\n * Identical to gzgets(), except that gzgetss() attempts to strip any HTML\n * and PHP tags from the text it reads.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @length     int     The length of data to get.\n * @allowable_tags\n *             string  You can use this optional parameter to specify tags\n *                     which should not be stripped.\n *\n * @return     mixed   The uncompressed and striped string, or FALSE on\n *                     error.\n */", 
"gzread", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), "length", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzread.php )\n *\n * gzread() reads up to length bytes from the given gz-file pointer.\n * Reading stops when length (uncompressed) bytes have been read or EOF is\n * reached, whichever comes first.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @length     int     The number of bytes to read.\n *\n * @return     mixed   The data that have been read.\n */", 
"gzpassthru", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzpassthru.php )\n *\n * Reads to EOF on the given gz-file pointer from the current position and\n * writes the (uncompressed) results to standard output.\n *\n * You may need to call gzrewind() to reset the file pointer to the\n * beginning of the file if you have already written data to it. Tip\n *\n * If you just want to dump the contents of a file to the output buffer,\n * without first modifying it or seeking to a particular offset, you may\n * want to use the readgzfile() function, which saves you the gzopen()\n * call.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     mixed   The number of uncompressed characters read from gz\n *                     and passed through to the input, or FALSE on error.\n */", 
"gzseek", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), "offset", T(Int64), NULL, NULL, S(0), "whence", T(Int64), "i:0;", "SEEK_SET", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzseek.php )\n *\n * Sets the file position indicator for the given file pointer to the\n * given offset byte into the file stream. Equivalent to calling (in C)\n * gzseek(zp, offset, SEEK_SET).\n *\n * If the file is opened for reading, this function is emulated but can be\n * extremely slow. If the file is opened for writing, only forward seeks\n * are supported; gzseek() then compresses a sequence of zeroes up to the\n * new starting position.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @offset     int     The seeked offset.\n * @whence     int     whence values are: SEEK_SET - Set position equal to\n *                     offset bytes. SEEK_CUR - Set position to current\n *                     location plus offset.\n *\n *                     If whence is not specified, it is assumed to be\n *                     SEEK_SET.\n *\n * @return     mixed   Upon success, returns 0; otherwise, returns -1. Note\n *                     that seeking past EOF is not considered an error.\n */", 
"gztell", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gztell.php )\n *\n * Gets the position of the given file pointer; i.e., its offset into the\n * uncompressed file stream.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n *\n * @return     mixed   The position of the file pointer or FALSE if an\n *                     error occurs.\n */", 
"gzwrite", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), "str", T(String), NULL, NULL, S(0), "length", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzwrite.php )\n *\n * gzwrite() writes the contents of string to the given gz-file.\n *\n * @zp         resource\n *                     The gz-file pointer. It must be valid, and must\n *                     point to a file successfully opened by gzopen().\n * @str        string  The string to write.\n * @length     int     The number of uncompressed bytes to write. If\n *                     supplied, writing will stop after length\n *                     (uncompressed) bytes have been written or the end of\n *                     string is reached, whichever comes first.\n *\n *                     Note that if the length argument is given, then the\n *                     magic_quotes_runtime configuration option will be\n *                     ignored and no slashes will be stripped from string.\n *\n * @return     mixed   Returns the number of (uncompressed) bytes written\n *                     to the given gz-file stream.\n */", 
"gzputs", T(Variant), S(0), "zp", T(Object), NULL, NULL, S(0), "str", T(String), NULL, NULL, S(0), "length", T(Int64), "i:0;", "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gzputs.php )\n *\n *\n * @zp         resource\n *\n * @str        string\n * @length     int\n *\n * @return     mixed\n */", 
"qlzcompress", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "level", T(Int32), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.qlzcompress.php )\n *\n * This function compress the given string using the QuickLZ data format.\n *\n * For details on the QuickLZ compression algorithm go to\n * http://www.quicklz.com/(RFC 1950).\n *\n * @data       string  The data to compress.\n * @level      int     The level of compression. Can be given as 1, 2 or 3.\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */", 
"qlzuncompress", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), "level", T(Int32), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.qlzuncompress.php )\n *\n * This function uncompress a compressed string.\n *\n * @data       string  The data compressed by qlzcompress().\n * @level      int     The level of compression. Can be given as 1, 2 or 3.\n *\n * @return     mixed   The original uncompressed data or FALSE on error.\n */", 
"sncompress", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sncompress.php )\n *\n * This function compress the given string using the Snappy data format.\n *\n * For details on the Snappy compression algorithm go to\n * http://code.google.com/p/snappy/.\n *\n * @data       string  The data to compress.\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */", 
"snuncompress", T(Variant), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.snuncompress.php )\n *\n * This function uncompress a compressed string.\n *\n * @data       string  The data compressed by sncompress().\n *\n * @return     mixed   The compressed string or FALSE if an error occurred.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
