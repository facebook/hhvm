/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

namespace apache::thrift {
namespace ident {
struct weeks;
struct title;
struct employer;
struct compensation;
struct school;
struct min;
struct max;
struct a;
struct b;
struct a;
struct b;
struct c;
struct d;
struct a;
struct b;
struct c;
struct a;
struct b;
struct c;
struct i;
struct d;
struct i;
struct d;
struct s;
struct u;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_weeks
#define APACHE_THRIFT_ACCESSOR_weeks
APACHE_THRIFT_DEFINE_ACCESSOR(weeks);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_title
#define APACHE_THRIFT_ACCESSOR_title
APACHE_THRIFT_DEFINE_ACCESSOR(title);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_employer
#define APACHE_THRIFT_ACCESSOR_employer
APACHE_THRIFT_DEFINE_ACCESSOR(employer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compensation
#define APACHE_THRIFT_ACCESSOR_compensation
APACHE_THRIFT_DEFINE_ACCESSOR(compensation);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_school
#define APACHE_THRIFT_ACCESSOR_school
APACHE_THRIFT_DEFINE_ACCESSOR(school);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_min
#define APACHE_THRIFT_ACCESSOR_min
APACHE_THRIFT_DEFINE_ACCESSOR(min);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_max
#define APACHE_THRIFT_ACCESSOR_max
APACHE_THRIFT_DEFINE_ACCESSOR(max);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_d
#define APACHE_THRIFT_ACCESSOR_d
APACHE_THRIFT_DEFINE_ACCESSOR(d);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_d
#define APACHE_THRIFT_ACCESSOR_d
APACHE_THRIFT_DEFINE_ACCESSOR(d);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_d
#define APACHE_THRIFT_ACCESSOR_d
APACHE_THRIFT_DEFINE_ACCESSOR(d);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_u
#define APACHE_THRIFT_ACCESSOR_u
APACHE_THRIFT_DEFINE_ACCESSOR(u);
#endif
} // namespace detail
} // namespace apache::thrift

// BEGIN declare_enums
namespace cpp2 {

/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "EmptyEnum", "kind": "enum" } */
enum class EmptyEnum {
};

/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "City", "kind": "enum" } */
enum class City {
  NYC = 0,
  MPK = 1,
  SEA = 2,
  LON = 3,
};

/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "Company", "kind": "enum" } */
enum class Company {
  FACEBOOK = 0,
  WHATSAPP = 1,
  OCULUS = 2,
  INSTAGRAM = 3,
  __FRIEND__FEED = 4,
};

} // namespace cpp2

template<> struct std::hash<::cpp2::EmptyEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::EmptyEnum> {};
template<> struct std::hash<::cpp2::City> :
  ::apache::thrift::detail::enum_hash<::cpp2::City> {};
template<> struct std::hash<::cpp2::Company> :
  ::apache::thrift::detail::enum_hash<::cpp2::Company> {};

namespace apache::thrift {

template <> struct TEnumTraits<::cpp2::EmptyEnum> {
  using type = ::cpp2::EmptyEnum;

  static constexpr std::size_t const size = 0;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "EmptyEnum";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static const std::vector<std::any>& annotations() noexcept;
};

template <> struct TEnumTraits<::cpp2::City> {
  using type = ::cpp2::City;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "City";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::NYC; }
  static constexpr type max() { return type::LON; }

  static const std::vector<std::any>& annotations() noexcept;
};

template <> struct TEnumTraits<::cpp2::Company> {
  using type = ::cpp2::Company;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;
  static const std::string_view __fbthrift_module_name_internal_do_not_use;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  FOLLY_ERASE static std::string_view typeName() noexcept {
    return "Company";
  }

  FOLLY_ERASE static constexpr std::string_view moduleName() noexcept {
    return "module";
  }

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::FACEBOOK; }
  static constexpr type max() { return type::__FRIEND__FEED; }

  static const std::vector<std::any>& annotations() noexcept;
};

} // namespace apache::thrift
// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Internship;
class Range;
class struct1;
class struct2;
class struct3;
class struct4;
class union1;
class union2;
} // namespace cpp2
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "MyCompany", "kind": "typedef" } */
using MyCompany = ::cpp2::Company;
/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "MyStringIdentifier", "kind": "typedef" } */
using MyStringIdentifier = ::std::string;
/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "MyIntIdentifier", "kind": "typedef" } */
using MyIntIdentifier = ::std::int32_t;
/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "MyMapIdentifier", "kind": "typedef" } */
using MyMapIdentifier = ::std::map<::std::string, ::std::string>;

/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "Internship", "kind": "struct" } */
class Internship final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 5;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4,5};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::weeks,
    ::apache::thrift::ident::title,
    ::apache::thrift::ident::employer,
    ::apache::thrift::ident::compensation,
    ::apache::thrift::ident::school
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::enum_t<::cpp2::Company>,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Internship;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Internship();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Internship(apache::thrift::FragileConstructor, ::std::int32_t weeks__arg, ::std::string title__arg, ::cpp2::Company employer__arg, double compensation__arg, ::std::string school__arg);

  Internship(Internship&&) noexcept;

  Internship(const Internship& src);


  Internship& operator=(Internship&&) noexcept;
  Internship& operator=(const Internship& src);

  ~Internship();

 private:
  ::std::int32_t __fbthrift_field_weeks;
 private:
  ::std::string __fbthrift_field_title;
 private:
  ::cpp2::Company __fbthrift_field_employer;
 private:
  double __fbthrift_field_compensation;
 private:
  ::std::string __fbthrift_field_school;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const Internship&) const;
  bool operator<(const Internship&) const;

  /** Glean { "field": "weeks" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> weeks_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_weeks};
  }

  /** Glean { "field": "weeks" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> weeks_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_weeks};
  }

  /** Glean { "field": "weeks" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> weeks_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_weeks)};
  }

  /** Glean { "field": "weeks" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> weeks() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_weeks};
  }

  /** Glean { "field": "weeks" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> weeks() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_weeks};
  }

  /** Glean { "field": "weeks" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> weeks() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_weeks)};
  }

  /** Glean { "field": "title" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> title_ref() const& {
    return {this->__fbthrift_field_title, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "title" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> title_ref() & {
    return {this->__fbthrift_field_title, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "title" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> title_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_title), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "title" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> title() const& {
    return {this->__fbthrift_field_title, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "title" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> title() & {
    return {this->__fbthrift_field_title, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "title" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> title() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_title), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "employer" } */
  template <typename..., typename fbthrift_T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> employer_ref() const& {
    return {this->__fbthrift_field_employer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "employer" } */
  template <typename..., typename fbthrift_T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> employer_ref() & {
    return {this->__fbthrift_field_employer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "employer" } */
  template <typename..., typename fbthrift_T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> employer_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_employer), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "employer" } */
  template <typename..., typename fbthrift_T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> employer() const& {
    return {this->__fbthrift_field_employer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "employer" } */
  template <typename..., typename fbthrift_T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> employer() & {
    return {this->__fbthrift_field_employer, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "employer" } */
  template <typename..., typename fbthrift_T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> employer() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_employer), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "compensation" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> compensation_ref() const& {
    return {this->__fbthrift_field_compensation, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "compensation" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> compensation_ref() & {
    return {this->__fbthrift_field_compensation, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "compensation" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> compensation_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_compensation), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "compensation" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> compensation() const& {
    return {this->__fbthrift_field_compensation, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "compensation" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> compensation() & {
    return {this->__fbthrift_field_compensation, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "compensation" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> compensation() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_compensation), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "school" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> school_ref() const& {
    return {this->__fbthrift_field_school, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "school" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> school_ref() & {
    return {this->__fbthrift_field_school, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "school" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> school_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_school), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "school" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> school() const& {
    return {this->__fbthrift_field_school, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "school" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> school() & {
    return {this->__fbthrift_field_school, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "school" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> school() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_school), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "weeks" } */
  [[deprecated("Use `FOO.weeks().value()` instead of `FOO.get_weeks()`")]]
  ::std::int32_t get_weeks() const;

  /** Glean { "field": "weeks" } */
  [[deprecated("Use `FOO.weeks() = BAR` instead of `FOO.set_weeks(BAR)`")]]
  ::std::int32_t& set_weeks(::std::int32_t weeks_);

  /** Glean { "field": "title" } */
  [[deprecated("Use `FOO.title().value()` instead of `FOO.get_title()`")]]
  const ::std::string& get_title() const& {
    return __fbthrift_field_title;
  }

  /** Glean { "field": "title" } */
  [[deprecated("Use `FOO.title().value()` instead of `FOO.get_title()`")]]
  ::std::string get_title() && {
    return static_cast<::std::string&&>(__fbthrift_field_title);
  }

  /** Glean { "field": "title" } */
  template <typename T_Internship_title_struct_setter = ::std::string>
  [[deprecated("Use `FOO.title() = BAR` instead of `FOO.set_title(BAR)`")]]
  ::std::string& set_title(T_Internship_title_struct_setter&& title_) {
    title_ref() = std::forward<T_Internship_title_struct_setter>(title_);
    return __fbthrift_field_title;
  }

  /** Glean { "field": "employer" } */
  [[deprecated("Use `FOO.employer().value()` instead of `FOO.get_employer()`")]]
  const ::cpp2::Company* get_employer() const&;

  /** Glean { "field": "employer" } */
  [[deprecated("Use `FOO.employer().value()` instead of `FOO.get_employer()`")]]
  ::cpp2::Company* get_employer() &;

  ::cpp2::Company* get_employer() && = delete;

  /** Glean { "field": "employer" } */
  [[deprecated("Use `FOO.employer() = BAR` instead of `FOO.set_employer(BAR)`")]]
  ::cpp2::Company& set_employer(::cpp2::Company employer_);

  /** Glean { "field": "compensation" } */
  [[deprecated("Use `FOO.compensation().value()` instead of `FOO.get_compensation()`")]]
  const double* get_compensation() const&;

  /** Glean { "field": "compensation" } */
  [[deprecated("Use `FOO.compensation().value()` instead of `FOO.get_compensation()`")]]
  double* get_compensation() &;

  double* get_compensation() && = delete;

  /** Glean { "field": "compensation" } */
  [[deprecated("Use `FOO.compensation() = BAR` instead of `FOO.set_compensation(BAR)`")]]
  double& set_compensation(double compensation_);

  /** Glean { "field": "school" } */
  [[deprecated("Use `FOO.school().value()` instead of `FOO.get_school()`")]]
  const ::std::string* get_school() const&;

  /** Glean { "field": "school" } */
  [[deprecated("Use `FOO.school().value()` instead of `FOO.get_school()`")]]
  ::std::string* get_school() &;

  ::std::string* get_school() && = delete;

  /** Glean { "field": "school" } */
  template <typename T_Internship_school_struct_setter = ::std::string>
  [[deprecated("Use `FOO.school() = BAR` instead of `FOO.set_school(BAR)`")]]
  ::std::string& set_school(T_Internship_school_struct_setter&& school_) {
    school_ref() = std::forward<T_Internship_school_struct_setter>(school_);
    return __fbthrift_field_school;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Internship>;
  friend void swap(Internship& a, Internship& b);
};

template <class Protocol_>
unsigned long Internship::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "Range", "kind": "struct" } */
class Range final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::min,
    ::apache::thrift::ident::max
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::i32_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Range;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  Range() :
      __fbthrift_field_min(),
      __fbthrift_field_max() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Range(apache::thrift::FragileConstructor, ::std::int32_t min__arg, ::std::int32_t max__arg);

  Range(Range&&) = default;

  Range(const Range&) = default;


  Range& operator=(Range&&) = default;

  Range& operator=(const Range&) = default;
 private:
  ::std::int32_t __fbthrift_field_min;
 private:
  ::std::int32_t __fbthrift_field_max;

 public:

  bool operator==(const Range&) const;
  bool operator<(const Range&) const;

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> min_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_min};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> min_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_min};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> min_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_min)};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> min() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_min};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> min() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_min};
  }

  /** Glean { "field": "min" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> min() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_min)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> max_ref() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_max};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> max_ref() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_max};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> max_ref() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_max)};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const fbthrift_T&> max() const& {
    return ::apache::thrift::required_field_ref<const fbthrift_T&>{this->__fbthrift_field_max};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&> max() & {
    return ::apache::thrift::required_field_ref<fbthrift_T&>{this->__fbthrift_field_max};
  }

  /** Glean { "field": "max" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<fbthrift_T&&> max() && {
    return ::apache::thrift::required_field_ref<fbthrift_T&&>{static_cast<fbthrift_T&&>(this->__fbthrift_field_max)};
  }

  /** Glean { "field": "min" } */
  [[deprecated("Use `FOO.min().value()` instead of `FOO.get_min()`")]]
  ::std::int32_t get_min() const;

  /** Glean { "field": "min" } */
  [[deprecated("Use `FOO.min() = BAR` instead of `FOO.set_min(BAR)`")]]
  ::std::int32_t& set_min(::std::int32_t min_);

  /** Glean { "field": "max" } */
  [[deprecated("Use `FOO.max().value()` instead of `FOO.get_max()`")]]
  ::std::int32_t get_max() const;

  /** Glean { "field": "max" } */
  [[deprecated("Use `FOO.max() = BAR` instead of `FOO.set_max(BAR)`")]]
  ::std::int32_t& set_max(::std::int32_t max_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Range>;
  friend void swap(Range& a, Range& b);
};

template <class Protocol_>
unsigned long Range::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "struct1", "kind": "struct" } */
class struct1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = struct1;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  struct1();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct1(apache::thrift::FragileConstructor, ::std::int32_t a__arg, ::std::string b__arg);

  struct1(struct1&&) noexcept;

  struct1(const struct1& src);


  struct1& operator=(struct1&&) noexcept;
  struct1& operator=(const struct1& src);

  ~struct1();

 private:
  ::std::int32_t __fbthrift_field_a;
 private:
  ::std::string __fbthrift_field_b;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const struct1&) const;
  bool operator<(const struct1&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::std::int32_t get_a() const;

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::std::int32_t& set_a(::std::int32_t a_);

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  const ::std::string& get_b() const& {
    return __fbthrift_field_b;
  }

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  ::std::string get_b() && {
    return static_cast<::std::string&&>(__fbthrift_field_b);
  }

  /** Glean { "field": "b" } */
  template <typename T_struct1_b_struct_setter = ::std::string>
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  ::std::string& set_b(T_struct1_b_struct_setter&& b_) {
    b_ref() = std::forward<T_struct1_b_struct_setter>(b_);
    return __fbthrift_field_b;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct1>;
  friend void swap(struct1& a, struct1& b);
};

template <class Protocol_>
unsigned long struct1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "struct2", "kind": "struct" } */
class struct2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b,
    ::apache::thrift::ident::c,
    ::apache::thrift::ident::d
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::cpp2::struct1>,
    ::apache::thrift::type::list<::apache::thrift::type::i32_t>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = struct2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  struct2();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct2(apache::thrift::FragileConstructor, ::std::int32_t a__arg, ::std::string b__arg, ::cpp2::struct1 c__arg, ::std::vector<::std::int32_t> d__arg);

  struct2(struct2&&) noexcept;

  struct2(const struct2& src);


  struct2& operator=(struct2&&) noexcept;
  struct2& operator=(const struct2& src);

  ~struct2();

 private:
  ::std::int32_t __fbthrift_field_a;
 private:
  ::std::string __fbthrift_field_b;
 private:
  ::cpp2::struct1 __fbthrift_field_c;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_d;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const struct2&) const;
  bool operator<(const struct2&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> c_ref() const& {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> c_ref() & {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> c_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_c), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> c() const& {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> c() & {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> c() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_c), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> d_ref() const& {
    return {this->__fbthrift_field_d, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> d_ref() & {
    return {this->__fbthrift_field_d, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> d_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_d), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> d() const& {
    return {this->__fbthrift_field_d, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> d() & {
    return {this->__fbthrift_field_d, __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename fbthrift_T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> d() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_d), __isset.at(3), __isset.bit(3)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::std::int32_t get_a() const;

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::std::int32_t& set_a(::std::int32_t a_);

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  const ::std::string& get_b() const& {
    return __fbthrift_field_b;
  }

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  ::std::string get_b() && {
    return static_cast<::std::string&&>(__fbthrift_field_b);
  }

  /** Glean { "field": "b" } */
  template <typename T_struct2_b_struct_setter = ::std::string>
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  ::std::string& set_b(T_struct2_b_struct_setter&& b_) {
    b_ref() = std::forward<T_struct2_b_struct_setter>(b_);
    return __fbthrift_field_b;
  }

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c().value()` instead of `FOO.get_c()`")]]
  const ::cpp2::struct1& get_c() const&;

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c().value()` instead of `FOO.get_c()`")]]
  ::cpp2::struct1 get_c() &&;

  /** Glean { "field": "c" } */
  template <typename T_struct2_c_struct_setter = ::cpp2::struct1>
  [[deprecated("Use `FOO.c() = BAR` instead of `FOO.set_c(BAR)`")]]
  ::cpp2::struct1& set_c(T_struct2_c_struct_setter&& c_) {
    c_ref() = std::forward<T_struct2_c_struct_setter>(c_);
    return __fbthrift_field_c;
  }

  /** Glean { "field": "d" } */
  [[deprecated("Use `FOO.d().value()` instead of `FOO.get_d()`")]]
  const ::std::vector<::std::int32_t>& get_d() const&;

  /** Glean { "field": "d" } */
  [[deprecated("Use `FOO.d().value()` instead of `FOO.get_d()`")]]
  ::std::vector<::std::int32_t> get_d() &&;

  /** Glean { "field": "d" } */
  template <typename T_struct2_d_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.d() = BAR` instead of `FOO.set_d(BAR)`")]]
  ::std::vector<::std::int32_t>& set_d(T_struct2_d_struct_setter&& d_) {
    d_ref() = std::forward<T_struct2_d_struct_setter>(d_);
    return __fbthrift_field_d;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct2>;
  friend void swap(struct2& a, struct2& b);
};

template <class Protocol_>
unsigned long struct2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "struct3", "kind": "struct" } */
class struct3 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b,
    ::apache::thrift::ident::c
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::struct_t<::cpp2::struct2>
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = struct3;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  struct3();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct3(apache::thrift::FragileConstructor, ::std::string a__arg, ::std::int32_t b__arg, ::cpp2::struct2 c__arg);

  struct3(struct3&&) noexcept;

  struct3(const struct3& src);


  struct3& operator=(struct3&&) noexcept;
  struct3& operator=(const struct3& src);

  ~struct3();

 private:
  ::std::string __fbthrift_field_a;
 private:
  ::std::int32_t __fbthrift_field_b;
 private:
  ::cpp2::struct2 __fbthrift_field_c;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const struct3&) const;
  bool operator<(const struct3&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> c_ref() const& {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> c_ref() & {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> c_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_c), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> c() const& {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> c() & {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> c() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_c), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  const ::std::string& get_a() const& {
    return __fbthrift_field_a;
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::std::string get_a() && {
    return static_cast<::std::string&&>(__fbthrift_field_a);
  }

  /** Glean { "field": "a" } */
  template <typename T_struct3_a_struct_setter = ::std::string>
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::std::string& set_a(T_struct3_a_struct_setter&& a_) {
    a_ref() = std::forward<T_struct3_a_struct_setter>(a_);
    return __fbthrift_field_a;
  }

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  ::std::int32_t get_b() const;

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  ::std::int32_t& set_b(::std::int32_t b_);

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c().value()` instead of `FOO.get_c()`")]]
  const ::cpp2::struct2& get_c() const&;

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c().value()` instead of `FOO.get_c()`")]]
  ::cpp2::struct2 get_c() &&;

  /** Glean { "field": "c" } */
  template <typename T_struct3_c_struct_setter = ::cpp2::struct2>
  [[deprecated("Use `FOO.c() = BAR` instead of `FOO.set_c(BAR)`")]]
  ::cpp2::struct2& set_c(T_struct3_c_struct_setter&& c_) {
    c_ref() = std::forward<T_struct3_c_struct_setter>(c_);
    return __fbthrift_field_c;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct3>;
  friend void swap(struct3& a, struct3& b);
};

template <class Protocol_>
unsigned long struct3::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "struct4", "kind": "struct" } */
class struct4 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 3;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::a,
    ::apache::thrift::ident::b,
    ::apache::thrift::ident::c
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::byte_t
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = struct4;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  struct4() :
      __fbthrift_field_a(),
      __fbthrift_field_b(),
      __fbthrift_field_c() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct4(apache::thrift::FragileConstructor, ::std::int32_t a__arg, double b__arg, ::std::int8_t c__arg);

  struct4(struct4&&) noexcept;

  struct4(const struct4& src);


  struct4& operator=(struct4&&) noexcept;
  struct4& operator=(const struct4& src);
 private:
  ::std::int32_t __fbthrift_field_a;
 private:
  double __fbthrift_field_b;
 private:
  ::std::int8_t __fbthrift_field_c;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const struct4&) const;
  bool operator<(const struct4&) const;

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a_ref() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a_ref() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const fbthrift_T&> a() const& {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&> a() & {
    return {this->__fbthrift_field_a, __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "a" } */
  template <typename..., typename fbthrift_T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<fbthrift_T&&> a() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_a), __isset.at(0), __isset.bit(0)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> b_ref() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> b_ref() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> b_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> b() const& {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> b() & {
    return {this->__fbthrift_field_b, __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "b" } */
  template <typename..., typename fbthrift_T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> b() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_b), __isset.at(1), __isset.bit(1)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> c_ref() const& {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> c_ref() & {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> c_ref() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_c), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const fbthrift_T&> c() const& {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&> c() & {
    return {this->__fbthrift_field_c, __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "c" } */
  template <typename..., typename fbthrift_T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<fbthrift_T&&> c() && {
    return {static_cast<fbthrift_T&&>(this->__fbthrift_field_c), __isset.at(2), __isset.bit(2)};
  }

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a().value()` instead of `FOO.get_a()`")]]
  ::std::int32_t get_a() const;

  /** Glean { "field": "a" } */
  [[deprecated("Use `FOO.a() = BAR` instead of `FOO.set_a(BAR)`")]]
  ::std::int32_t& set_a(::std::int32_t a_);

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  const double* get_b() const&;

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b().value()` instead of `FOO.get_b()`")]]
  double* get_b() &;

  double* get_b() && = delete;

  /** Glean { "field": "b" } */
  [[deprecated("Use `FOO.b() = BAR` instead of `FOO.set_b(BAR)`")]]
  double& set_b(double b_);

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c().value()` instead of `FOO.get_c()`")]]
  const ::std::int8_t* get_c() const&;

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c().value()` instead of `FOO.get_c()`")]]
  ::std::int8_t* get_c() &;

  ::std::int8_t* get_c() && = delete;

  /** Glean { "field": "c" } */
  [[deprecated("Use `FOO.c() = BAR` instead of `FOO.set_c(BAR)`")]]
  ::std::int8_t& set_c(::std::int8_t c_);

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct4>;
  friend void swap(struct4& a, struct4& b);
};

template <class Protocol_>
unsigned long struct4::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "union1", "kind": "union" } */
class union1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 2;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::i,
    ::apache::thrift::ident::d
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::double_t
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = union1;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    i = 1,
    d = 2,
  } ;

  union1()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  union1(union1&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  union1(const union1& rhs);

  union1& operator=(union1&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  union1& operator=(const union1& rhs);


  union storage_type {
    ::std::int32_t i;
    double d;

  } ;

  bool operator==(const union1&) const;
  bool operator<(const union1&) const;

  /** Glean { "field": "i" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::int32_t& set_i(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::i);
    ::new (std::addressof(value_.i)) T(t);
    return value_.i;
  }


  /** Glean { "field": "d" } */
  template <typename... A> requires (sizeof...(A) == 0)
  double& set_d(double t = double()) {
    using T0 = double;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::d);
    ::new (std::addressof(value_.d)) T(t);
    return value_.d;
  }


  /** Glean { "field": "i" } */
  ::std::int32_t const& get_i() const {
    if (getType() != Type::i) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.i;
  }

  /** Glean { "field": "d" } */
  double const& get_d() const {
    if (getType() != Type::d) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.d;
  }

  ::std::int32_t& mutable_i() {
    assert(getType() == Type::i);
    return value_.i;
  }

  double& mutable_d() {
    assert(getType() == Type::d);
    return value_.d;
  }

  template <typename..., typename T = ::std::int32_t>
  T move_i() {
    assert(getType() == Type::i);
    return std::move(value_.i);
  }

  template <typename..., typename T = double>
  T move_d() {
    assert(getType() == Type::d);
    return std::move(value_.d);
  }

  /** Glean { "field": "i" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i_ref() const& {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i_ref() & {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i_ref() && {
    return {std::move(value_.i), fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int32_t&> i() const& {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&> i() & {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&&> i() && {
    return {std::move(value_.i), fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "d" } */
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> d_ref() const& {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> d_ref() & {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> d_ref() && {
    return {std::move(value_.d), fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const double&> d() const& {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<double&> d() & {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<double&&> d() && {
    return {std::move(value_.d), fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<union1>;
  friend void swap(union1& a, union1& b);
};

template <class Protocol_>
unsigned long union1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


/** Glean {"file": "thrift/compiler/test/fixtures/constants/src/module.thrift", "name": "union2", "kind": "union" } */
class union2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  template <class ...>
  FOLLY_ERASE static constexpr std::string_view __fbthrift_get_module_name() noexcept {
    return "module";
  }
  static constexpr std::size_t __fbthrift_num_fields = 4;

  static constexpr const int16_t __fbthrift_reflection_field_ids[] = {0,1,2,3,4};

  using __fbthrift_reflection_idents = folly::tag_t<
    ::apache::thrift::ident::i,
    ::apache::thrift::ident::d,
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::u
  >;

  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::struct_t<::cpp2::struct1>,
    ::apache::thrift::type::union_t<::cpp2::union1>
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = union2;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum class Type : int {
    __EMPTY__ = 0,
    i = 1,
    d = 2,
    s = 3,
    u = 4,
  } ;

  union2()
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {}

  union2(union2&& rhs) noexcept
      : fbthrift_type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::u:
      {
        set_u(std::move(rhs.value_.u));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  union2(const union2& rhs);

  union2& operator=(union2&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::u:
      {
        set_u(std::move(rhs.value_.u));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  union2& operator=(const union2& rhs);

  ~union2();

  union storage_type {
    ::std::int32_t i;
    double d;
    ::cpp2::struct1 s;
    ::cpp2::union1 u;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const union2&) const;
  bool operator<(const union2&) const;

  /** Glean { "field": "i" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::std::int32_t& set_i(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::i);
    ::new (std::addressof(value_.i)) T(t);
    return value_.i;
  }


  /** Glean { "field": "d" } */
  template <typename... A> requires (sizeof...(A) == 0)
  double& set_d(double t = double()) {
    using T0 = double;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::d);
    ::new (std::addressof(value_.d)) T(t);
    return value_.d;
  }


  /** Glean { "field": "s" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::struct1& set_s(::cpp2::struct1 const &t) {
    using T0 = ::cpp2::struct1;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) T(t);
    return value_.s;
  }

  /** Glean { "field": "s" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::struct1& set_s(::cpp2::struct1&& t) {
    using T0 = ::cpp2::struct1;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) T(std::move(t));
    return value_.s;
  }

  /** Glean { "field": "s" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::struct1, T...>> ::cpp2::struct1& set_s(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) ::cpp2::struct1(std::forward<T>(t)...);
    return value_.s;
  }

  /** Glean { "field": "u" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::union1& set_u(::cpp2::union1 const &t) {
    using T0 = ::cpp2::union1;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::u);
    ::new (std::addressof(value_.u)) T(t);
    return value_.u;
  }

  /** Glean { "field": "u" } */
  template <typename... A> requires (sizeof...(A) == 0)
  ::cpp2::union1& set_u(::cpp2::union1&& t) {
    using T0 = ::cpp2::union1;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::u);
    ::new (std::addressof(value_.u)) T(std::move(t));
    return value_.u;
  }

  /** Glean { "field": "u" } */
  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::union1, T...>> ::cpp2::union1& set_u(T&&... t) {
    __fbthrift_clear();
    fbthrift_type_ = folly::to_underlying(Type::u);
    ::new (std::addressof(value_.u)) ::cpp2::union1(std::forward<T>(t)...);
    return value_.u;
  }

  /** Glean { "field": "i" } */
  ::std::int32_t const& get_i() const {
    if (getType() != Type::i) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.i;
  }

  /** Glean { "field": "d" } */
  double const& get_d() const {
    if (getType() != Type::d) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.d;
  }

  /** Glean { "field": "s" } */
  ::cpp2::struct1 const& get_s() const {
    if (getType() != Type::s) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.s;
  }

  /** Glean { "field": "u" } */
  ::cpp2::union1 const& get_u() const {
    if (getType() != Type::u) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.u;
  }

  ::std::int32_t& mutable_i() {
    assert(getType() == Type::i);
    return value_.i;
  }

  double& mutable_d() {
    assert(getType() == Type::d);
    return value_.d;
  }

  ::cpp2::struct1& mutable_s() {
    assert(getType() == Type::s);
    return value_.s;
  }

  ::cpp2::union1& mutable_u() {
    assert(getType() == Type::u);
    return value_.u;
  }

  template <typename..., typename T = ::std::int32_t>
  T move_i() {
    assert(getType() == Type::i);
    return std::move(value_.i);
  }

  template <typename..., typename T = double>
  T move_d() {
    assert(getType() == Type::d);
    return std::move(value_.d);
  }

  template <typename..., typename T = ::cpp2::struct1>
  T move_s() {
    assert(getType() == Type::s);
    return std::move(value_.s);
  }

  template <typename..., typename T = ::cpp2::union1>
  T move_u() {
    assert(getType() == Type::u);
    return std::move(value_.u);
  }

  /** Glean { "field": "i" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i_ref() const& {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i_ref() & {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i_ref() && {
    return {std::move(value_.i), fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::std::int32_t&> i() const& {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&> i() & {
    return {value_.i, fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "i" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::std::int32_t&&> i() && {
    return {std::move(value_.i), fbthrift_type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "d" } */
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> d_ref() const& {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> d_ref() & {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> d_ref() && {
    return {std::move(value_.d), fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const double&> d() const& {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<double&> d() & {
    return {value_.d, fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "d" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<double&&> d() && {
    return {std::move(value_.d), fbthrift_type_, folly::to_underlying(Type::d), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "s" } */
  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> s_ref() const& {
    return {value_.s, fbthrift_type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> s_ref() & {
    return {value_.s, fbthrift_type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "s" } */
  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> s_ref() && {
    return {std::move(value_.s), fbthrift_type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "s" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::struct1&> s() const& {
    return {value_.s, fbthrift_type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "s" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::struct1&> s() & {
    return {value_.s, fbthrift_type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "s" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::struct1&&> s() && {
    return {std::move(value_.s), fbthrift_type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  /** Glean { "field": "u" } */
  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> u_ref() const& {
    return {value_.u, fbthrift_type_, folly::to_underlying(Type::u), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> u_ref() & {
    return {value_.u, fbthrift_type_, folly::to_underlying(Type::u), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "u" } */
  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> u_ref() && {
    return {std::move(value_.u), fbthrift_type_, folly::to_underlying(Type::u), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "u" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<const ::cpp2::union1&> u() const& {
    return {value_.u, fbthrift_type_, folly::to_underlying(Type::u), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "u" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::union1&> u() & {
    return {value_.u, fbthrift_type_, folly::to_underlying(Type::u), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  /** Glean { "field": "u" } */
  FOLLY_ERASE ::apache::thrift::union_field_ref<::cpp2::union1&&> u() && {
    return {std::move(value_.u), fbthrift_type_, folly::to_underlying(Type::u), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(fbthrift_type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> fbthrift_type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<union2>;
  friend void swap(union2& a, union2& b);
};

template <class Protocol_>
unsigned long union2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace cpp2

namespace apache::thrift {

template <> struct TEnumDataStorage<::cpp2::union1::Type>;

template <> struct TEnumTraits<::cpp2::union1::Type> {
  using type = ::cpp2::union1::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::i; }
  static constexpr type max() { return type::d; }
};

template <> struct TEnumDataStorage<::cpp2::union2::Type>;

template <> struct TEnumTraits<::cpp2::union2::Type> {
  using type = ::cpp2::union2::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }

  static constexpr type min() { return type::i; }
  static constexpr type max() { return type::u; }
};
} // namespace apache::thrift

namespace apache::thrift::detail {
template <> struct TSchemaAssociation<::cpp2::Internship, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x56\xc6\x06\x1e\x58\x66\x71\x1d\x55\x64\x40\x9c\xb2\x70\x7d\x48", 16};
};
template <> struct TSchemaAssociation<::cpp2::Range, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x4b\x38\xfc\x55\x40\x07\x5d\xad\xfb\x8a\x36\x40\x69\xe7\xf5\xd2", 16};
};
template <> struct TSchemaAssociation<::cpp2::struct1, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x82\x8b\x21\x41\x5d\x5c\x2d\xbc\x07\x6a\xf2\x2d\xa6\x5d\x1d\xdd", 16};
};
template <> struct TSchemaAssociation<::cpp2::struct2, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x2a\x24\xce\xc0\xde\x7b\x75\x98\x62\x85\x01\xcf\xeb\x91\xd0\x08", 16};
};
template <> struct TSchemaAssociation<::cpp2::struct3, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\xae\x63\x2c\x85\xcb\xbf\xf7\x6c\xc8\xad\xaf\xb5\xe2\x5e\x62\x55", 16};
};
template <> struct TSchemaAssociation<::cpp2::struct4, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x6e\xbd\xe4\xa9\x8f\xfa\xe2\x1d\x1b\x9a\x4c\x0c\x4b\xff\x4d\xbc", 16};
};
template <> struct TSchemaAssociation<::cpp2::union1, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x0d\xff\x55\x55\x8a\x32\xd4\x79\xe6\x27\x4d\xc2\x5c\xf7\xcc\x49", 16};
};
template <> struct TSchemaAssociation<::cpp2::union2, false> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\xfa\x9c\x19\xdf\x6f\x0d\xd4\x57\x5c\x43\xf0\xdd\xc2\x33\x95\x82", 16};
};
template <> struct TSchemaAssociation<::cpp2::EmptyEnum, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\xb3\xb7\x66\xff\x97\xac\x08\x8b\x58\x1e\x2e\x14\x99\x10\xbb\xd0", 16};
};
template <> struct TSchemaAssociation<::cpp2::City, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x7e\x36\x7c\xc6\xd6\x2b\x98\xec\xba\x5c\x78\x97\x2d\xd0\xd9\x24", 16};
};
template <> struct TSchemaAssociation<::cpp2::Company, true> {
  static constexpr ::folly::Range<const ::std::string_view*>(*bundle)() = nullptr;
  static constexpr int64_t programId = 4490855918149045302;
  static constexpr ::std::string_view definitionKey = {"\x2c\xe7\x73\x35\x7c\x7f\x77\xd1\xd5\x28\x5f\xa3\x2c\x8e\xe9\x54", 16};
};
} // namespace apache::thrift::detail
