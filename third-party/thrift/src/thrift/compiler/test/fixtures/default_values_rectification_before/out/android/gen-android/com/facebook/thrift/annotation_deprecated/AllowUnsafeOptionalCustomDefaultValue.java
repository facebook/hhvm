/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.thrift.annotation_deprecated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

/**
 * Allows the target field of a structured user-defined type (i.e., struct,
 * union or exception), whose qualifier is `optional`, to have a custom default
 * value specified in IDL.
 * 
 * Use of this annotation is strongly DISCOURAGED, as custom default values for
 * optional fields are both non-sensical and dangerous:
 *   - non-sensical because, by definition, the "default" state of an optional
 *     field is to have no value (i.e., be "absent") - as explicitly specified
 *     in the [Thrift Object Model](https://github.com/facebook/fbthrift/blob/main/thrift/doc/object-model/index.md#structured-types).
 *   - dangerous because in practice, the runtime behavior of the generated code
 *     for optional fields with custom default values is inconsistent (sometimes
 *     even for the same programming language!).
 * 
 * This annotation is merely introduced to allow existing use cases to be
 * grandfathered into the new compiler validation logic, which will reject
 * optional fields with custom default values unless this annotation is
 * specified.
 * 
 * This annotation MUST NOT be applied to a field whose qualifier is not
 * optional, or that doesn't have a custom default value.
 */
@SuppressWarnings({ "unused", "serial" })
public class AllowUnsafeOptionalCustomDefaultValue implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AllowUnsafeOptionalCustomDefaultValue");


  public AllowUnsafeOptionalCustomDefaultValue() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AllowUnsafeOptionalCustomDefaultValue(AllowUnsafeOptionalCustomDefaultValue other) {
  }

  public AllowUnsafeOptionalCustomDefaultValue deepCopy() {
    return new AllowUnsafeOptionalCustomDefaultValue(this);
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof AllowUnsafeOptionalCustomDefaultValue))
      return false;
    AllowUnsafeOptionalCustomDefaultValue that = (AllowUnsafeOptionalCustomDefaultValue)_that;

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static AllowUnsafeOptionalCustomDefaultValue deserialize(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    AllowUnsafeOptionalCustomDefaultValue _that;
    _that = new AllowUnsafeOptionalCustomDefaultValue(
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

