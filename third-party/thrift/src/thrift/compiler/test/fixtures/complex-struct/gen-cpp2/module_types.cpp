/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/complex-struct/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::cpp2::MyEnum>::size;
folly::Range<::cpp2::MyEnum const*> const TEnumTraits<::cpp2::MyEnum>::values = folly::range(TEnumDataStorage<::cpp2::MyEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::cpp2::MyEnum>::names = folly::range(TEnumDataStorage<::cpp2::MyEnum>::names);

bool TEnumTraits<::cpp2::MyEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace cpp2 {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES = _MyEnum_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStructFloatFieldThrowExp>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyStructFloatFieldThrowExp>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece MyStructFloatFieldThrowExp::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructFloatFieldThrowExp>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructFloatFieldThrowExp::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructFloatFieldThrowExp>::name;
}

MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp(const MyStructFloatFieldThrowExp&) = default;
MyStructFloatFieldThrowExp& MyStructFloatFieldThrowExp::operator=(const MyStructFloatFieldThrowExp&) = default;
MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp(FOLLY_MAYBE_UNUSED MyStructFloatFieldThrowExp&& other) noexcept :
    __fbthrift_field_myLongField(std::move(other.__fbthrift_field_myLongField)),
    __fbthrift_field_MyByteField(std::move(other.__fbthrift_field_MyByteField)),
    __fbthrift_field_myStringField(std::move(other.__fbthrift_field_myStringField)),
    __fbthrift_field_myFloatField(std::move(other.__fbthrift_field_myFloatField)),
    __isset(other.__isset) {
}

MyStructFloatFieldThrowExp& MyStructFloatFieldThrowExp::operator=(FOLLY_MAYBE_UNUSED MyStructFloatFieldThrowExp&& other) noexcept {
    this->__fbthrift_field_myLongField = std::move(other.__fbthrift_field_myLongField);
    this->__fbthrift_field_MyByteField = std::move(other.__fbthrift_field_MyByteField);
    this->__fbthrift_field_myStringField = std::move(other.__fbthrift_field_myStringField);
    this->__fbthrift_field_myFloatField = std::move(other.__fbthrift_field_myFloatField);
    __isset = other.__isset;
    return *this;
}


MyStructFloatFieldThrowExp::MyStructFloatFieldThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::int8_t MyByteField__arg, ::std::string myStringField__arg, float myFloatField__arg) :
    __fbthrift_field_myLongField(std::move(myLongField__arg)),
    __fbthrift_field_MyByteField(std::move(MyByteField__arg)),
    __fbthrift_field_myStringField(std::move(myStringField__arg)),
    __fbthrift_field_myFloatField(std::move(myFloatField__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructFloatFieldThrowExp::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongField = ::std::int64_t();
  this->__fbthrift_field_MyByteField = ::std::int8_t();
  this->__fbthrift_field_myStringField = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myFloatField = float();
  __isset = {};
}

void MyStructFloatFieldThrowExp::__fbthrift_clear_terse_fields() {
}

bool MyStructFloatFieldThrowExp::__fbthrift_is_empty() const {
  return false;
}

bool MyStructFloatFieldThrowExp::operator==(FOLLY_MAYBE_UNUSED const MyStructFloatFieldThrowExp& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongField_ref() == rhs.myLongField_ref())) {
    return false;
  }
  if (!(lhs.MyByteField_ref() == rhs.MyByteField_ref())) {
    return false;
  }
  if (!(lhs.myStringField_ref() == rhs.myStringField_ref())) {
    return false;
  }
  if (!(lhs.myFloatField_ref() == rhs.myFloatField_ref())) {
    return false;
  }
  return true;
}

bool MyStructFloatFieldThrowExp::operator<(FOLLY_MAYBE_UNUSED const MyStructFloatFieldThrowExp& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongField_ref() == rhs.myLongField_ref())) {
    return lhs.myLongField_ref() < rhs.myLongField_ref();
  }
  if (!(lhs.MyByteField_ref() == rhs.MyByteField_ref())) {
    return lhs.MyByteField_ref() < rhs.MyByteField_ref();
  }
  if (!(lhs.myStringField_ref() == rhs.myStringField_ref())) {
    return lhs.myStringField_ref() < rhs.myStringField_ref();
  }
  if (!(lhs.myFloatField_ref() == rhs.myFloatField_ref())) {
    return lhs.myFloatField_ref() < rhs.myFloatField_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyStructFloatFieldThrowExp& a, FOLLY_MAYBE_UNUSED MyStructFloatFieldThrowExp& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongField, b.__fbthrift_field_myLongField);
  swap(a.__fbthrift_field_MyByteField, b.__fbthrift_field_MyByteField);
  swap(a.__fbthrift_field_myStringField, b.__fbthrift_field_myStringField);
  swap(a.__fbthrift_field_myFloatField, b.__fbthrift_field_myFloatField);
  swap(a.__isset, b.__isset);
}

template void MyStructFloatFieldThrowExp::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructFloatFieldThrowExp::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructFloatFieldThrowExp::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructFloatFieldThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructFloatFieldThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructFloatFieldThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStructMapFloatThrowExp>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyStructMapFloatThrowExp>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece MyStructMapFloatThrowExp::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructMapFloatThrowExp>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructMapFloatThrowExp::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructMapFloatThrowExp>::name;
}

MyStructMapFloatThrowExp::MyStructMapFloatThrowExp(const MyStructMapFloatThrowExp&) = default;
MyStructMapFloatThrowExp& MyStructMapFloatThrowExp::operator=(const MyStructMapFloatThrowExp&) = default;
MyStructMapFloatThrowExp::MyStructMapFloatThrowExp(FOLLY_MAYBE_UNUSED MyStructMapFloatThrowExp&& other) noexcept :
    __fbthrift_field_myLongField(std::move(other.__fbthrift_field_myLongField)),
    __fbthrift_field_mapListOfFloats(std::move(other.__fbthrift_field_mapListOfFloats)),
    __isset(other.__isset) {
}

MyStructMapFloatThrowExp& MyStructMapFloatThrowExp::operator=(FOLLY_MAYBE_UNUSED MyStructMapFloatThrowExp&& other) noexcept {
    this->__fbthrift_field_myLongField = std::move(other.__fbthrift_field_myLongField);
    this->__fbthrift_field_mapListOfFloats = std::move(other.__fbthrift_field_mapListOfFloats);
    __isset = other.__isset;
    return *this;
}


MyStructMapFloatThrowExp::MyStructMapFloatThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> mapListOfFloats__arg) :
    __fbthrift_field_myLongField(std::move(myLongField__arg)),
    __fbthrift_field_mapListOfFloats(std::move(mapListOfFloats__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyStructMapFloatThrowExp::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongField = ::std::int64_t();
  this->__fbthrift_field_mapListOfFloats.clear();
  __isset = {};
}

void MyStructMapFloatThrowExp::__fbthrift_clear_terse_fields() {
}

bool MyStructMapFloatThrowExp::__fbthrift_is_empty() const {
  return false;
}

bool MyStructMapFloatThrowExp::operator==(FOLLY_MAYBE_UNUSED const MyStructMapFloatThrowExp& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongField_ref() == rhs.myLongField_ref())) {
    return false;
  }
  if (!(lhs.mapListOfFloats_ref() == rhs.mapListOfFloats_ref())) {
    return false;
  }
  return true;
}

bool MyStructMapFloatThrowExp::operator<(FOLLY_MAYBE_UNUSED const MyStructMapFloatThrowExp& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongField_ref() == rhs.myLongField_ref())) {
    return lhs.myLongField_ref() < rhs.myLongField_ref();
  }
  if (!(lhs.mapListOfFloats_ref() == rhs.mapListOfFloats_ref())) {
    return lhs.mapListOfFloats_ref() < rhs.mapListOfFloats_ref();
  }
  return false;
}

const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>& MyStructMapFloatThrowExp::get_mapListOfFloats() const& {
  return __fbthrift_field_mapListOfFloats;
}

::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> MyStructMapFloatThrowExp::get_mapListOfFloats() && {
  return std::move(__fbthrift_field_mapListOfFloats);
}


void swap(FOLLY_MAYBE_UNUSED MyStructMapFloatThrowExp& a, FOLLY_MAYBE_UNUSED MyStructMapFloatThrowExp& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongField, b.__fbthrift_field_myLongField);
  swap(a.__fbthrift_field_mapListOfFloats, b.__fbthrift_field_mapListOfFloats);
  swap(a.__isset, b.__isset);
}

template void MyStructMapFloatThrowExp::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructMapFloatThrowExp::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructMapFloatThrowExp::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructMapFloatThrowExp::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructMapFloatThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructMapFloatThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructMapFloatThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructMapFloatThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_MyIntField(),
      __fbthrift_field_myEnum(),
      __fbthrift_field_MyBoolField(),
      __fbthrift_field_MyByteField(),
      __fbthrift_field_MyShortField(),
      __fbthrift_field_MyLongField(),
      __fbthrift_field_MyDoubleField() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept :
    __fbthrift_field_MyIntField(std::move(other.__fbthrift_field_MyIntField)),
    __fbthrift_field_MyStringField(std::move(other.__fbthrift_field_MyStringField)),
    __fbthrift_field_MyDataField(std::move(other.__fbthrift_field_MyDataField)),
    __fbthrift_field_myEnum(std::move(other.__fbthrift_field_myEnum)),
    __fbthrift_field_MyBoolField(std::move(other.__fbthrift_field_MyBoolField)),
    __fbthrift_field_MyByteField(std::move(other.__fbthrift_field_MyByteField)),
    __fbthrift_field_MyShortField(std::move(other.__fbthrift_field_MyShortField)),
    __fbthrift_field_MyLongField(std::move(other.__fbthrift_field_MyLongField)),
    __fbthrift_field_MyDoubleField(std::move(other.__fbthrift_field_MyDoubleField)),
    __fbthrift_field_lDouble(std::move(other.__fbthrift_field_lDouble)),
    __fbthrift_field_lShort(std::move(other.__fbthrift_field_lShort)),
    __fbthrift_field_lInteger(std::move(other.__fbthrift_field_lInteger)),
    __fbthrift_field_lLong(std::move(other.__fbthrift_field_lLong)),
    __fbthrift_field_lString(std::move(other.__fbthrift_field_lString)),
    __fbthrift_field_lBool(std::move(other.__fbthrift_field_lBool)),
    __fbthrift_field_lByte(std::move(other.__fbthrift_field_lByte)),
    __fbthrift_field_mShortString(std::move(other.__fbthrift_field_mShortString)),
    __fbthrift_field_mIntegerString(std::move(other.__fbthrift_field_mIntegerString)),
    __fbthrift_field_mStringMyStruct(std::move(other.__fbthrift_field_mStringMyStruct)),
    __fbthrift_field_mStringBool(std::move(other.__fbthrift_field_mStringBool)),
    __fbthrift_field_mIntegerInteger(std::move(other.__fbthrift_field_mIntegerInteger)),
    __fbthrift_field_mIntegerBool(std::move(other.__fbthrift_field_mIntegerBool)),
    __fbthrift_field_sShort(std::move(other.__fbthrift_field_sShort)),
    __fbthrift_field_sMyStruct(std::move(other.__fbthrift_field_sMyStruct)),
    __fbthrift_field_sLong(std::move(other.__fbthrift_field_sLong)),
    __fbthrift_field_sString(std::move(other.__fbthrift_field_sString)),
    __fbthrift_field_sByte(std::move(other.__fbthrift_field_sByte)),
    __fbthrift_field_mListList(std::move(other.__fbthrift_field_mListList)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_MyIntField = std::move(other.__fbthrift_field_MyIntField);
    this->__fbthrift_field_MyStringField = std::move(other.__fbthrift_field_MyStringField);
    this->__fbthrift_field_MyDataField = std::move(other.__fbthrift_field_MyDataField);
    this->__fbthrift_field_myEnum = std::move(other.__fbthrift_field_myEnum);
    this->__fbthrift_field_MyBoolField = std::move(other.__fbthrift_field_MyBoolField);
    this->__fbthrift_field_MyByteField = std::move(other.__fbthrift_field_MyByteField);
    this->__fbthrift_field_MyShortField = std::move(other.__fbthrift_field_MyShortField);
    this->__fbthrift_field_MyLongField = std::move(other.__fbthrift_field_MyLongField);
    this->__fbthrift_field_MyDoubleField = std::move(other.__fbthrift_field_MyDoubleField);
    this->__fbthrift_field_lDouble = std::move(other.__fbthrift_field_lDouble);
    this->__fbthrift_field_lShort = std::move(other.__fbthrift_field_lShort);
    this->__fbthrift_field_lInteger = std::move(other.__fbthrift_field_lInteger);
    this->__fbthrift_field_lLong = std::move(other.__fbthrift_field_lLong);
    this->__fbthrift_field_lString = std::move(other.__fbthrift_field_lString);
    this->__fbthrift_field_lBool = std::move(other.__fbthrift_field_lBool);
    this->__fbthrift_field_lByte = std::move(other.__fbthrift_field_lByte);
    this->__fbthrift_field_mShortString = std::move(other.__fbthrift_field_mShortString);
    this->__fbthrift_field_mIntegerString = std::move(other.__fbthrift_field_mIntegerString);
    this->__fbthrift_field_mStringMyStruct = std::move(other.__fbthrift_field_mStringMyStruct);
    this->__fbthrift_field_mStringBool = std::move(other.__fbthrift_field_mStringBool);
    this->__fbthrift_field_mIntegerInteger = std::move(other.__fbthrift_field_mIntegerInteger);
    this->__fbthrift_field_mIntegerBool = std::move(other.__fbthrift_field_mIntegerBool);
    this->__fbthrift_field_sShort = std::move(other.__fbthrift_field_sShort);
    this->__fbthrift_field_sMyStruct = std::move(other.__fbthrift_field_sMyStruct);
    this->__fbthrift_field_sLong = std::move(other.__fbthrift_field_sLong);
    this->__fbthrift_field_sString = std::move(other.__fbthrift_field_sString);
    this->__fbthrift_field_sByte = std::move(other.__fbthrift_field_sByte);
    this->__fbthrift_field_mListList = std::move(other.__fbthrift_field_mListList);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::cpp2::MyDataItem MyDataField__arg, ::cpp2::MyEnum myEnum__arg, bool MyBoolField__arg, ::std::int8_t MyByteField__arg, ::std::int16_t MyShortField__arg, ::std::int64_t MyLongField__arg, double MyDoubleField__arg, ::std::vector<double> lDouble__arg, ::std::vector<::std::int16_t> lShort__arg, ::std::vector<::std::int32_t> lInteger__arg, ::std::vector<::std::int64_t> lLong__arg, ::std::vector<::std::string> lString__arg, ::std::vector<bool> lBool__arg, ::std::vector<::std::int8_t> lByte__arg, ::std::map<::std::int16_t, ::std::string> mShortString__arg, ::std::map<::std::int32_t, ::std::string> mIntegerString__arg, ::std::map<::std::string, ::cpp2::MyStruct> mStringMyStruct__arg, ::std::map<::std::string, bool> mStringBool__arg, ::std::map<::std::int32_t, ::std::int32_t> mIntegerInteger__arg, ::std::map<::std::int32_t, bool> mIntegerBool__arg, ::std::set<::std::int16_t> sShort__arg, ::std::set<::cpp2::MyStruct> sMyStruct__arg, ::std::set<::std::int64_t> sLong__arg, ::std::set<::std::string> sString__arg, ::std::set<::std::int8_t> sByte__arg, ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> mListList__arg) :
    __fbthrift_field_MyIntField(std::move(MyIntField__arg)),
    __fbthrift_field_MyStringField(std::move(MyStringField__arg)),
    __fbthrift_field_MyDataField(std::move(MyDataField__arg)),
    __fbthrift_field_myEnum(std::move(myEnum__arg)),
    __fbthrift_field_MyBoolField(std::move(MyBoolField__arg)),
    __fbthrift_field_MyByteField(std::move(MyByteField__arg)),
    __fbthrift_field_MyShortField(std::move(MyShortField__arg)),
    __fbthrift_field_MyLongField(std::move(MyLongField__arg)),
    __fbthrift_field_MyDoubleField(std::move(MyDoubleField__arg)),
    __fbthrift_field_lDouble(std::move(lDouble__arg)),
    __fbthrift_field_lShort(std::move(lShort__arg)),
    __fbthrift_field_lInteger(std::move(lInteger__arg)),
    __fbthrift_field_lLong(std::move(lLong__arg)),
    __fbthrift_field_lString(std::move(lString__arg)),
    __fbthrift_field_lBool(std::move(lBool__arg)),
    __fbthrift_field_lByte(std::move(lByte__arg)),
    __fbthrift_field_mShortString(std::move(mShortString__arg)),
    __fbthrift_field_mIntegerString(std::move(mIntegerString__arg)),
    __fbthrift_field_mStringMyStruct(std::move(mStringMyStruct__arg)),
    __fbthrift_field_mStringBool(std::move(mStringBool__arg)),
    __fbthrift_field_mIntegerInteger(std::move(mIntegerInteger__arg)),
    __fbthrift_field_mIntegerBool(std::move(mIntegerBool__arg)),
    __fbthrift_field_sShort(std::move(sShort__arg)),
    __fbthrift_field_sMyStruct(std::move(sMyStruct__arg)),
    __fbthrift_field_sLong(std::move(sLong__arg)),
    __fbthrift_field_sString(std::move(sString__arg)),
    __fbthrift_field_sByte(std::move(sByte__arg)),
    __fbthrift_field_mListList(std::move(mListList__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
  __isset.set(folly::index_constant<26>(), true);
  __isset.set(folly::index_constant<27>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_MyIntField = ::std::int64_t();
  this->__fbthrift_field_MyStringField = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myEnum = ::cpp2::MyEnum();
  this->__fbthrift_field_MyBoolField = bool();
  this->__fbthrift_field_MyByteField = ::std::int8_t();
  this->__fbthrift_field_MyShortField = ::std::int16_t();
  this->__fbthrift_field_MyLongField = ::std::int64_t();
  this->__fbthrift_field_MyDoubleField = double();
  this->__fbthrift_field_lDouble.clear();
  this->__fbthrift_field_lShort.clear();
  this->__fbthrift_field_lInteger.clear();
  this->__fbthrift_field_lLong.clear();
  this->__fbthrift_field_lString.clear();
  this->__fbthrift_field_lBool.clear();
  this->__fbthrift_field_lByte.clear();
  this->__fbthrift_field_mShortString.clear();
  this->__fbthrift_field_mIntegerString.clear();
  this->__fbthrift_field_mStringMyStruct.clear();
  this->__fbthrift_field_mStringBool.clear();
  this->__fbthrift_field_mIntegerInteger.clear();
  this->__fbthrift_field_mIntegerBool.clear();
  this->__fbthrift_field_sShort.clear();
  this->__fbthrift_field_sMyStruct.clear();
  this->__fbthrift_field_sLong.clear();
  this->__fbthrift_field_sString.clear();
  this->__fbthrift_field_sByte.clear();
  this->__fbthrift_field_mListList.clear();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.MyIntField_ref() == rhs.MyIntField_ref())) {
    return false;
  }
  if (!(lhs.MyStringField_ref() == rhs.MyStringField_ref())) {
    return false;
  }
  if (!(lhs.MyDataField_ref() == rhs.MyDataField_ref())) {
    return false;
  }
  if (!(lhs.myEnum_ref() == rhs.myEnum_ref())) {
    return false;
  }
  if (!(lhs.MyBoolField_ref() == rhs.MyBoolField_ref())) {
    return false;
  }
  if (!(lhs.MyByteField_ref() == rhs.MyByteField_ref())) {
    return false;
  }
  if (!(lhs.MyShortField_ref() == rhs.MyShortField_ref())) {
    return false;
  }
  if (!(lhs.MyLongField_ref() == rhs.MyLongField_ref())) {
    return false;
  }
  if (!(lhs.MyDoubleField_ref() == rhs.MyDoubleField_ref())) {
    return false;
  }
  if (!(lhs.lDouble_ref() == rhs.lDouble_ref())) {
    return false;
  }
  if (!(lhs.lShort_ref() == rhs.lShort_ref())) {
    return false;
  }
  if (!(lhs.lInteger_ref() == rhs.lInteger_ref())) {
    return false;
  }
  if (!(lhs.lLong_ref() == rhs.lLong_ref())) {
    return false;
  }
  if (!(lhs.lString_ref() == rhs.lString_ref())) {
    return false;
  }
  if (!(lhs.lBool_ref() == rhs.lBool_ref())) {
    return false;
  }
  if (!(lhs.lByte_ref() == rhs.lByte_ref())) {
    return false;
  }
  if (!(lhs.mShortString_ref() == rhs.mShortString_ref())) {
    return false;
  }
  if (!(lhs.mIntegerString_ref() == rhs.mIntegerString_ref())) {
    return false;
  }
  if (!(lhs.mStringMyStruct_ref() == rhs.mStringMyStruct_ref())) {
    return false;
  }
  if (!(lhs.mStringBool_ref() == rhs.mStringBool_ref())) {
    return false;
  }
  if (!(lhs.mIntegerInteger_ref() == rhs.mIntegerInteger_ref())) {
    return false;
  }
  if (!(lhs.mIntegerBool_ref() == rhs.mIntegerBool_ref())) {
    return false;
  }
  if (!(lhs.sShort_ref() == rhs.sShort_ref())) {
    return false;
  }
  if (!(lhs.sMyStruct_ref() == rhs.sMyStruct_ref())) {
    return false;
  }
  if (!(lhs.sLong_ref() == rhs.sLong_ref())) {
    return false;
  }
  if (!(lhs.sString_ref() == rhs.sString_ref())) {
    return false;
  }
  if (!(lhs.sByte_ref() == rhs.sByte_ref())) {
    return false;
  }
  if (!(lhs.mListList_ref() == rhs.mListList_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.MyIntField_ref() == rhs.MyIntField_ref())) {
    return lhs.MyIntField_ref() < rhs.MyIntField_ref();
  }
  if (!(lhs.MyStringField_ref() == rhs.MyStringField_ref())) {
    return lhs.MyStringField_ref() < rhs.MyStringField_ref();
  }
  if (!(lhs.MyDataField_ref() == rhs.MyDataField_ref())) {
    return lhs.MyDataField_ref() < rhs.MyDataField_ref();
  }
  if (!(lhs.myEnum_ref() == rhs.myEnum_ref())) {
    return lhs.myEnum_ref() < rhs.myEnum_ref();
  }
  if (!(lhs.MyBoolField_ref() == rhs.MyBoolField_ref())) {
    return lhs.MyBoolField_ref() < rhs.MyBoolField_ref();
  }
  if (!(lhs.MyByteField_ref() == rhs.MyByteField_ref())) {
    return lhs.MyByteField_ref() < rhs.MyByteField_ref();
  }
  if (!(lhs.MyShortField_ref() == rhs.MyShortField_ref())) {
    return lhs.MyShortField_ref() < rhs.MyShortField_ref();
  }
  if (!(lhs.MyLongField_ref() == rhs.MyLongField_ref())) {
    return lhs.MyLongField_ref() < rhs.MyLongField_ref();
  }
  if (!(lhs.MyDoubleField_ref() == rhs.MyDoubleField_ref())) {
    return lhs.MyDoubleField_ref() < rhs.MyDoubleField_ref();
  }
  if (!(lhs.lDouble_ref() == rhs.lDouble_ref())) {
    return lhs.lDouble_ref() < rhs.lDouble_ref();
  }
  if (!(lhs.lShort_ref() == rhs.lShort_ref())) {
    return lhs.lShort_ref() < rhs.lShort_ref();
  }
  if (!(lhs.lInteger_ref() == rhs.lInteger_ref())) {
    return lhs.lInteger_ref() < rhs.lInteger_ref();
  }
  if (!(lhs.lLong_ref() == rhs.lLong_ref())) {
    return lhs.lLong_ref() < rhs.lLong_ref();
  }
  if (!(lhs.lString_ref() == rhs.lString_ref())) {
    return lhs.lString_ref() < rhs.lString_ref();
  }
  if (!(lhs.lBool_ref() == rhs.lBool_ref())) {
    return lhs.lBool_ref() < rhs.lBool_ref();
  }
  if (!(lhs.lByte_ref() == rhs.lByte_ref())) {
    return lhs.lByte_ref() < rhs.lByte_ref();
  }
  if (!(lhs.mShortString_ref() == rhs.mShortString_ref())) {
    return lhs.mShortString_ref() < rhs.mShortString_ref();
  }
  if (!(lhs.mIntegerString_ref() == rhs.mIntegerString_ref())) {
    return lhs.mIntegerString_ref() < rhs.mIntegerString_ref();
  }
  if (!(lhs.mStringMyStruct_ref() == rhs.mStringMyStruct_ref())) {
    return lhs.mStringMyStruct_ref() < rhs.mStringMyStruct_ref();
  }
  if (!(lhs.mStringBool_ref() == rhs.mStringBool_ref())) {
    return lhs.mStringBool_ref() < rhs.mStringBool_ref();
  }
  if (!(lhs.mIntegerInteger_ref() == rhs.mIntegerInteger_ref())) {
    return lhs.mIntegerInteger_ref() < rhs.mIntegerInteger_ref();
  }
  if (!(lhs.mIntegerBool_ref() == rhs.mIntegerBool_ref())) {
    return lhs.mIntegerBool_ref() < rhs.mIntegerBool_ref();
  }
  if (!(lhs.sShort_ref() == rhs.sShort_ref())) {
    return lhs.sShort_ref() < rhs.sShort_ref();
  }
  if (!(lhs.sMyStruct_ref() == rhs.sMyStruct_ref())) {
    return lhs.sMyStruct_ref() < rhs.sMyStruct_ref();
  }
  if (!(lhs.sLong_ref() == rhs.sLong_ref())) {
    return lhs.sLong_ref() < rhs.sLong_ref();
  }
  if (!(lhs.sString_ref() == rhs.sString_ref())) {
    return lhs.sString_ref() < rhs.sString_ref();
  }
  if (!(lhs.sByte_ref() == rhs.sByte_ref())) {
    return lhs.sByte_ref() < rhs.sByte_ref();
  }
  if (!(lhs.mListList_ref() == rhs.mListList_ref())) {
    return lhs.mListList_ref() < rhs.mListList_ref();
  }
  return false;
}

const ::cpp2::MyDataItem& MyStruct::get_MyDataField() const& {
  return __fbthrift_field_MyDataField;
}

::cpp2::MyDataItem MyStruct::get_MyDataField() && {
  return std::move(__fbthrift_field_MyDataField);
}

const ::std::vector<double>& MyStruct::get_lDouble() const& {
  return __fbthrift_field_lDouble;
}

::std::vector<double> MyStruct::get_lDouble() && {
  return std::move(__fbthrift_field_lDouble);
}

const ::std::vector<::std::int16_t>& MyStruct::get_lShort() const& {
  return __fbthrift_field_lShort;
}

::std::vector<::std::int16_t> MyStruct::get_lShort() && {
  return std::move(__fbthrift_field_lShort);
}

const ::std::vector<::std::int32_t>& MyStruct::get_lInteger() const& {
  return __fbthrift_field_lInteger;
}

::std::vector<::std::int32_t> MyStruct::get_lInteger() && {
  return std::move(__fbthrift_field_lInteger);
}

const ::std::vector<::std::int64_t>& MyStruct::get_lLong() const& {
  return __fbthrift_field_lLong;
}

::std::vector<::std::int64_t> MyStruct::get_lLong() && {
  return std::move(__fbthrift_field_lLong);
}

const ::std::vector<::std::string>& MyStruct::get_lString() const& {
  return __fbthrift_field_lString;
}

::std::vector<::std::string> MyStruct::get_lString() && {
  return std::move(__fbthrift_field_lString);
}

const ::std::vector<bool>& MyStruct::get_lBool() const& {
  return __fbthrift_field_lBool;
}

::std::vector<bool> MyStruct::get_lBool() && {
  return std::move(__fbthrift_field_lBool);
}

const ::std::vector<::std::int8_t>& MyStruct::get_lByte() const& {
  return __fbthrift_field_lByte;
}

::std::vector<::std::int8_t> MyStruct::get_lByte() && {
  return std::move(__fbthrift_field_lByte);
}

const ::std::map<::std::int16_t, ::std::string>& MyStruct::get_mShortString() const& {
  return __fbthrift_field_mShortString;
}

::std::map<::std::int16_t, ::std::string> MyStruct::get_mShortString() && {
  return std::move(__fbthrift_field_mShortString);
}

const ::std::map<::std::int32_t, ::std::string>& MyStruct::get_mIntegerString() const& {
  return __fbthrift_field_mIntegerString;
}

::std::map<::std::int32_t, ::std::string> MyStruct::get_mIntegerString() && {
  return std::move(__fbthrift_field_mIntegerString);
}

const ::std::map<::std::string, ::cpp2::MyStruct>& MyStruct::get_mStringMyStruct() const& {
  return __fbthrift_field_mStringMyStruct;
}

::std::map<::std::string, ::cpp2::MyStruct> MyStruct::get_mStringMyStruct() && {
  return std::move(__fbthrift_field_mStringMyStruct);
}

const ::std::map<::std::string, bool>& MyStruct::get_mStringBool() const& {
  return __fbthrift_field_mStringBool;
}

::std::map<::std::string, bool> MyStruct::get_mStringBool() && {
  return std::move(__fbthrift_field_mStringBool);
}

const ::std::map<::std::int32_t, ::std::int32_t>& MyStruct::get_mIntegerInteger() const& {
  return __fbthrift_field_mIntegerInteger;
}

::std::map<::std::int32_t, ::std::int32_t> MyStruct::get_mIntegerInteger() && {
  return std::move(__fbthrift_field_mIntegerInteger);
}

const ::std::map<::std::int32_t, bool>& MyStruct::get_mIntegerBool() const& {
  return __fbthrift_field_mIntegerBool;
}

::std::map<::std::int32_t, bool> MyStruct::get_mIntegerBool() && {
  return std::move(__fbthrift_field_mIntegerBool);
}

const ::std::set<::std::int16_t>& MyStruct::get_sShort() const& {
  return __fbthrift_field_sShort;
}

::std::set<::std::int16_t> MyStruct::get_sShort() && {
  return std::move(__fbthrift_field_sShort);
}

const ::std::set<::cpp2::MyStruct>& MyStruct::get_sMyStruct() const& {
  return __fbthrift_field_sMyStruct;
}

::std::set<::cpp2::MyStruct> MyStruct::get_sMyStruct() && {
  return std::move(__fbthrift_field_sMyStruct);
}

const ::std::set<::std::int64_t>& MyStruct::get_sLong() const& {
  return __fbthrift_field_sLong;
}

::std::set<::std::int64_t> MyStruct::get_sLong() && {
  return std::move(__fbthrift_field_sLong);
}

const ::std::set<::std::string>& MyStruct::get_sString() const& {
  return __fbthrift_field_sString;
}

::std::set<::std::string> MyStruct::get_sString() && {
  return std::move(__fbthrift_field_sString);
}

const ::std::set<::std::int8_t>& MyStruct::get_sByte() const& {
  return __fbthrift_field_sByte;
}

::std::set<::std::int8_t> MyStruct::get_sByte() && {
  return std::move(__fbthrift_field_sByte);
}

const ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>& MyStruct::get_mListList() const& {
  return __fbthrift_field_mListList;
}

::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> MyStruct::get_mListList() && {
  return std::move(__fbthrift_field_mListList);
}


void swap(FOLLY_MAYBE_UNUSED MyStruct& a, FOLLY_MAYBE_UNUSED MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIntField, b.__fbthrift_field_MyIntField);
  swap(a.__fbthrift_field_MyStringField, b.__fbthrift_field_MyStringField);
  swap(a.__fbthrift_field_MyDataField, b.__fbthrift_field_MyDataField);
  swap(a.__fbthrift_field_myEnum, b.__fbthrift_field_myEnum);
  swap(a.__fbthrift_field_MyBoolField, b.__fbthrift_field_MyBoolField);
  swap(a.__fbthrift_field_MyByteField, b.__fbthrift_field_MyByteField);
  swap(a.__fbthrift_field_MyShortField, b.__fbthrift_field_MyShortField);
  swap(a.__fbthrift_field_MyLongField, b.__fbthrift_field_MyLongField);
  swap(a.__fbthrift_field_MyDoubleField, b.__fbthrift_field_MyDoubleField);
  swap(a.__fbthrift_field_lDouble, b.__fbthrift_field_lDouble);
  swap(a.__fbthrift_field_lShort, b.__fbthrift_field_lShort);
  swap(a.__fbthrift_field_lInteger, b.__fbthrift_field_lInteger);
  swap(a.__fbthrift_field_lLong, b.__fbthrift_field_lLong);
  swap(a.__fbthrift_field_lString, b.__fbthrift_field_lString);
  swap(a.__fbthrift_field_lBool, b.__fbthrift_field_lBool);
  swap(a.__fbthrift_field_lByte, b.__fbthrift_field_lByte);
  swap(a.__fbthrift_field_mShortString, b.__fbthrift_field_mShortString);
  swap(a.__fbthrift_field_mIntegerString, b.__fbthrift_field_mIntegerString);
  swap(a.__fbthrift_field_mStringMyStruct, b.__fbthrift_field_mStringMyStruct);
  swap(a.__fbthrift_field_mStringBool, b.__fbthrift_field_mStringBool);
  swap(a.__fbthrift_field_mIntegerInteger, b.__fbthrift_field_mIntegerInteger);
  swap(a.__fbthrift_field_mIntegerBool, b.__fbthrift_field_mIntegerBool);
  swap(a.__fbthrift_field_sShort, b.__fbthrift_field_sShort);
  swap(a.__fbthrift_field_sMyStruct, b.__fbthrift_field_sMyStruct);
  swap(a.__fbthrift_field_sLong, b.__fbthrift_field_sLong);
  swap(a.__fbthrift_field_sString, b.__fbthrift_field_sString);
  swap(a.__fbthrift_field_sByte, b.__fbthrift_field_sByte);
  swap(a.__fbthrift_field_mListList, b.__fbthrift_field_mListList);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyDataItem>,
    "inconsistent use of json option");

} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::SimpleStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::SimpleStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece SimpleStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece SimpleStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleStruct>::name;
}

SimpleStruct::SimpleStruct(const SimpleStruct&) = default;
SimpleStruct& SimpleStruct::operator=(const SimpleStruct&) = default;
SimpleStruct::SimpleStruct(FOLLY_MAYBE_UNUSED SimpleStruct&& other) noexcept :
    __fbthrift_field_age(std::move(other.__fbthrift_field_age)),
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __isset(other.__isset) {
}

SimpleStruct& SimpleStruct::operator=(FOLLY_MAYBE_UNUSED SimpleStruct&& other) noexcept {
    this->__fbthrift_field_age = std::move(other.__fbthrift_field_age);
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    __isset = other.__isset;
    return *this;
}


SimpleStruct::SimpleStruct(apache::thrift::FragileConstructor, ::std::int64_t age__arg, ::std::string name__arg) :
    __fbthrift_field_age(std::move(age__arg)),
    __fbthrift_field_name(std::move(name__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void SimpleStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_age = ::std::int64_t();
  this->__fbthrift_field_name = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void SimpleStruct::__fbthrift_clear_terse_fields() {
}

bool SimpleStruct::__fbthrift_is_empty() const {
  return false;
}

bool SimpleStruct::operator==(FOLLY_MAYBE_UNUSED const SimpleStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.age_ref() == rhs.age_ref())) {
    return false;
  }
  if (!(lhs.name_ref() == rhs.name_ref())) {
    return false;
  }
  return true;
}

bool SimpleStruct::operator<(FOLLY_MAYBE_UNUSED const SimpleStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.age_ref() == rhs.age_ref())) {
    return lhs.age_ref() < rhs.age_ref();
  }
  if (!(lhs.name_ref() == rhs.name_ref())) {
    return lhs.name_ref() < rhs.name_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED SimpleStruct& a, FOLLY_MAYBE_UNUSED SimpleStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_age, b.__fbthrift_field_age);
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__isset, b.__isset);
}

template void SimpleStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::defaultStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::defaultStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece defaultStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<defaultStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece defaultStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<defaultStruct>::name;
}

defaultStruct::defaultStruct(const defaultStruct&) = default;
defaultStruct& defaultStruct::operator=(const defaultStruct&) = default;
defaultStruct::defaultStruct() :
      __fbthrift_field_myLongDFset(static_cast<::std::int64_t>(10)),
      __fbthrift_field_myLongDF(),
      __fbthrift_field_portDFset(static_cast<::std::int32_t>(3456)),
      __fbthrift_field_portNum(),
      __fbthrift_field_myBinaryDFset(apache::thrift::StringTraits<std::string>::fromStringLiteral("abc")),
      __fbthrift_field_myByteDFSet(static_cast<::std::int8_t>(17)),
      __fbthrift_field_myByte(),
      __fbthrift_field_myDoubleDFset(static_cast<double>(99.7678)),
      __fbthrift_field_myDoubleDFZero(static_cast<double>(0)),
      __fbthrift_field_myDouble(),
      __fbthrift_field_field3(std::initializer_list<std::pair<const ::std::int32_t, ::std::string>>{{static_cast<::std::int32_t>(15), apache::thrift::StringTraits<std::string>::fromStringLiteral("a_value")},
  {static_cast<::std::int32_t>(2), apache::thrift::StringTraits<std::string>::fromStringLiteral("b_value")}}),
      __fbthrift_field_myList(std::initializer_list<::cpp2::MyEnum>{ ::cpp2::MyEnum::MyValue1,
   ::cpp2::MyEnum::MyValue1,
   ::cpp2::MyEnum::MyValue2}),
      __fbthrift_field_mySet(std::initializer_list<::std::string>{apache::thrift::StringTraits<std::string>::fromStringLiteral("house"),
  apache::thrift::StringTraits<std::string>::fromStringLiteral("car"),
  apache::thrift::StringTraits<std::string>::fromStringLiteral("dog")}),
      __fbthrift_field_simpleStruct(::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(40)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("John")))),
      __fbthrift_field_listStructDFset(std::initializer_list<::cpp2::SimpleStruct>{::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(40)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("IronMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(999)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("Thanos")))}),
      __fbthrift_field_myUnion(::apache::thrift::detail::make_structured_constant<::cpp2::MyUnion>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::myEnum>( ::cpp2::MyEnum::MyValue2))),
      __fbthrift_field_listUnionDFset(std::initializer_list<::cpp2::MyUnion>{::apache::thrift::detail::make_structured_constant<::cpp2::MyUnion>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::myEnum>( ::cpp2::MyEnum::MyValue2)),
  ::apache::thrift::detail::make_structured_constant<::cpp2::MyUnion>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::intValue>(static_cast<::std::int32_t>(123)))}),
      __fbthrift_field_mapNestlistStructDfSet(std::initializer_list<std::pair<const ::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>{{static_cast<::std::int32_t>(1), std::initializer_list<::cpp2::SimpleStruct>{::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(40)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("IronMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(999)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("Thanos")))}},
  {static_cast<::std::int32_t>(2), std::initializer_list<::cpp2::SimpleStruct>{::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(28)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("BatMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(12)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("Robin")))}},
  {static_cast<::std::int32_t>(5), std::initializer_list<::cpp2::SimpleStruct>{::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(12)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("RatMan"))),
  ::apache::thrift::detail::make_structured_constant<::cpp2::SimpleStruct>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::age>(static_cast<::std::int64_t>(6)), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::name>(apache::thrift::StringTraits<std::string>::fromStringLiteral("Catman")))}}}),
      __fbthrift_field_mapJavaTypeDFset(std::initializer_list<std::pair<const ::std::int64_t, ::std::string>>{{static_cast<::std::int64_t>(15), apache::thrift::StringTraits<std::string>::fromStringLiteral("a_value")},
  {static_cast<::std::int64_t>(2), apache::thrift::StringTraits<std::string>::fromStringLiteral("b_value")}}),
      __fbthrift_field_enumMapDFset(std::initializer_list<std::pair<const ::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>{{apache::thrift::StringTraits<std::string>::fromStringLiteral("SANDY BRIDGE"), std::initializer_list<std::pair<const ::std::int32_t, ::cpp2::MyEnum>>{{static_cast<::std::int32_t>(16),  ::cpp2::MyEnum::MyValue1},
  {static_cast<::std::int32_t>(144),  ::cpp2::MyEnum::MyValue1}}},
  {apache::thrift::StringTraits<std::string>::fromStringLiteral("IVY BRIDGE"), std::initializer_list<std::pair<const ::std::int32_t, ::cpp2::MyEnum>>{{static_cast<::std::int32_t>(32),  ::cpp2::MyEnum::MyValue2},
  {static_cast<::std::int32_t>(144),  ::cpp2::MyEnum::MyValue2}}},
  {apache::thrift::StringTraits<std::string>::fromStringLiteral("HASWELL"), std::initializer_list<std::pair<const ::std::int32_t, ::cpp2::MyEnum>>{{static_cast<::std::int32_t>(32),  ::cpp2::MyEnum::MyValue3},
  {static_cast<::std::int32_t>(128),  ::cpp2::MyEnum::MyValue3},
  {static_cast<::std::int32_t>(256),  ::cpp2::MyEnum::MyValue3}}}}) {
}


defaultStruct::~defaultStruct() {}

defaultStruct::defaultStruct(FOLLY_MAYBE_UNUSED defaultStruct&& other) noexcept :
    __fbthrift_field_myLongDFset(std::move(other.__fbthrift_field_myLongDFset)),
    __fbthrift_field_myLongDF(std::move(other.__fbthrift_field_myLongDF)),
    __fbthrift_field_portDFset(std::move(other.__fbthrift_field_portDFset)),
    __fbthrift_field_portNum(std::move(other.__fbthrift_field_portNum)),
    __fbthrift_field_myBinaryDFset(std::move(other.__fbthrift_field_myBinaryDFset)),
    __fbthrift_field_myBinary(std::move(other.__fbthrift_field_myBinary)),
    __fbthrift_field_myByteDFSet(std::move(other.__fbthrift_field_myByteDFSet)),
    __fbthrift_field_myByte(std::move(other.__fbthrift_field_myByte)),
    __fbthrift_field_myDoubleDFset(std::move(other.__fbthrift_field_myDoubleDFset)),
    __fbthrift_field_myDoubleDFZero(std::move(other.__fbthrift_field_myDoubleDFZero)),
    __fbthrift_field_myDouble(std::move(other.__fbthrift_field_myDouble)),
    __fbthrift_field_field3(std::move(other.__fbthrift_field_field3)),
    __fbthrift_field_myList(std::move(other.__fbthrift_field_myList)),
    __fbthrift_field_mySet(std::move(other.__fbthrift_field_mySet)),
    __fbthrift_field_simpleStruct(std::move(other.__fbthrift_field_simpleStruct)),
    __fbthrift_field_listStructDFset(std::move(other.__fbthrift_field_listStructDFset)),
    __fbthrift_field_myUnion(std::move(other.__fbthrift_field_myUnion)),
    __fbthrift_field_listUnionDFset(std::move(other.__fbthrift_field_listUnionDFset)),
    __fbthrift_field_mapNestlistStructDfSet(std::move(other.__fbthrift_field_mapNestlistStructDfSet)),
    __fbthrift_field_mapJavaTypeDFset(std::move(other.__fbthrift_field_mapJavaTypeDFset)),
    __fbthrift_field_emptyMap(std::move(other.__fbthrift_field_emptyMap)),
    __fbthrift_field_enumMapDFset(std::move(other.__fbthrift_field_enumMapDFset)),
    __isset(other.__isset) {
}

defaultStruct& defaultStruct::operator=(FOLLY_MAYBE_UNUSED defaultStruct&& other) noexcept {
    this->__fbthrift_field_myLongDFset = std::move(other.__fbthrift_field_myLongDFset);
    this->__fbthrift_field_myLongDF = std::move(other.__fbthrift_field_myLongDF);
    this->__fbthrift_field_portDFset = std::move(other.__fbthrift_field_portDFset);
    this->__fbthrift_field_portNum = std::move(other.__fbthrift_field_portNum);
    this->__fbthrift_field_myBinaryDFset = std::move(other.__fbthrift_field_myBinaryDFset);
    this->__fbthrift_field_myBinary = std::move(other.__fbthrift_field_myBinary);
    this->__fbthrift_field_myByteDFSet = std::move(other.__fbthrift_field_myByteDFSet);
    this->__fbthrift_field_myByte = std::move(other.__fbthrift_field_myByte);
    this->__fbthrift_field_myDoubleDFset = std::move(other.__fbthrift_field_myDoubleDFset);
    this->__fbthrift_field_myDoubleDFZero = std::move(other.__fbthrift_field_myDoubleDFZero);
    this->__fbthrift_field_myDouble = std::move(other.__fbthrift_field_myDouble);
    this->__fbthrift_field_field3 = std::move(other.__fbthrift_field_field3);
    this->__fbthrift_field_myList = std::move(other.__fbthrift_field_myList);
    this->__fbthrift_field_mySet = std::move(other.__fbthrift_field_mySet);
    this->__fbthrift_field_simpleStruct = std::move(other.__fbthrift_field_simpleStruct);
    this->__fbthrift_field_listStructDFset = std::move(other.__fbthrift_field_listStructDFset);
    this->__fbthrift_field_myUnion = std::move(other.__fbthrift_field_myUnion);
    this->__fbthrift_field_listUnionDFset = std::move(other.__fbthrift_field_listUnionDFset);
    this->__fbthrift_field_mapNestlistStructDfSet = std::move(other.__fbthrift_field_mapNestlistStructDfSet);
    this->__fbthrift_field_mapJavaTypeDFset = std::move(other.__fbthrift_field_mapJavaTypeDFset);
    this->__fbthrift_field_emptyMap = std::move(other.__fbthrift_field_emptyMap);
    this->__fbthrift_field_enumMapDFset = std::move(other.__fbthrift_field_enumMapDFset);
    __isset = other.__isset;
    return *this;
}


defaultStruct::defaultStruct(apache::thrift::FragileConstructor, ::std::int64_t myLongDFset__arg, ::std::int64_t myLongDF__arg, ::std::int32_t portDFset__arg, ::std::int32_t portNum__arg, ::std::string myBinaryDFset__arg, ::std::string myBinary__arg, ::std::int8_t myByteDFSet__arg, ::std::int8_t myByte__arg, double myDoubleDFset__arg, double myDoubleDFZero__arg, double myDouble__arg, ::std::map<::std::int32_t, ::std::string> field3__arg, ::std::vector<::cpp2::MyEnum> myList__arg, ::std::set<::std::string> mySet__arg, ::cpp2::SimpleStruct simpleStruct__arg, ::std::vector<::cpp2::SimpleStruct> listStructDFset__arg, ::cpp2::MyUnion myUnion__arg, ::std::vector<::cpp2::MyUnion> listUnionDFset__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> mapNestlistStructDfSet__arg, ::std::map<::std::int64_t, ::std::string> mapJavaTypeDFset__arg, ::std::map<::std::int64_t, ::std::int32_t> emptyMap__arg, ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> enumMapDFset__arg) :
    __fbthrift_field_myLongDFset(std::move(myLongDFset__arg)),
    __fbthrift_field_myLongDF(std::move(myLongDF__arg)),
    __fbthrift_field_portDFset(std::move(portDFset__arg)),
    __fbthrift_field_portNum(std::move(portNum__arg)),
    __fbthrift_field_myBinaryDFset(std::move(myBinaryDFset__arg)),
    __fbthrift_field_myBinary(std::move(myBinary__arg)),
    __fbthrift_field_myByteDFSet(std::move(myByteDFSet__arg)),
    __fbthrift_field_myByte(std::move(myByte__arg)),
    __fbthrift_field_myDoubleDFset(std::move(myDoubleDFset__arg)),
    __fbthrift_field_myDoubleDFZero(std::move(myDoubleDFZero__arg)),
    __fbthrift_field_myDouble(std::move(myDouble__arg)),
    __fbthrift_field_field3(std::move(field3__arg)),
    __fbthrift_field_myList(std::move(myList__arg)),
    __fbthrift_field_mySet(std::move(mySet__arg)),
    __fbthrift_field_simpleStruct(std::move(simpleStruct__arg)),
    __fbthrift_field_listStructDFset(std::move(listStructDFset__arg)),
    __fbthrift_field_myUnion(std::move(myUnion__arg)),
    __fbthrift_field_listUnionDFset(std::move(listUnionDFset__arg)),
    __fbthrift_field_mapNestlistStructDfSet(std::move(mapNestlistStructDfSet__arg)),
    __fbthrift_field_mapJavaTypeDFset(std::move(mapJavaTypeDFset__arg)),
    __fbthrift_field_emptyMap(std::move(emptyMap__arg)),
    __fbthrift_field_enumMapDFset(std::move(enumMapDFset__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
}


void defaultStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongDFset = ::std::int64_t();
  this->__fbthrift_field_myLongDF = ::std::int64_t();
  this->__fbthrift_field_portDFset = ::std::int32_t();
  this->__fbthrift_field_portNum = ::std::int32_t();
  this->__fbthrift_field_myBinaryDFset = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myBinary = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myByteDFSet = ::std::int8_t();
  this->__fbthrift_field_myByte = ::std::int8_t();
  this->__fbthrift_field_myDoubleDFset = double();
  this->__fbthrift_field_myDoubleDFZero = double();
  this->__fbthrift_field_myDouble = double();
  this->__fbthrift_field_field3.clear();
  this->__fbthrift_field_myList.clear();
  this->__fbthrift_field_mySet.clear();
  ::apache::thrift::clear(this->__fbthrift_field_simpleStruct);
  this->__fbthrift_field_listStructDFset.clear();
  ::apache::thrift::clear(this->__fbthrift_field_myUnion);
  this->__fbthrift_field_listUnionDFset.clear();
  this->__fbthrift_field_mapNestlistStructDfSet.clear();
  this->__fbthrift_field_mapJavaTypeDFset.clear();
  this->__fbthrift_field_emptyMap.clear();
  this->__fbthrift_field_enumMapDFset.clear();
  __isset = {};
}

void defaultStruct::__fbthrift_clear_terse_fields() {
}

bool defaultStruct::__fbthrift_is_empty() const {
  return false;
}

bool defaultStruct::operator==(FOLLY_MAYBE_UNUSED const defaultStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongDFset_ref() == rhs.myLongDFset_ref())) {
    return false;
  }
  if (!(lhs.myLongDF_ref() == rhs.myLongDF_ref())) {
    return false;
  }
  if (!(lhs.portDFset_ref() == rhs.portDFset_ref())) {
    return false;
  }
  if (!(lhs.portNum_ref() == rhs.portNum_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_myBinaryDFset, rhs.__fbthrift_field_myBinaryDFset)) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_myBinary, rhs.__fbthrift_field_myBinary)) {
    return false;
  }
  if (!(lhs.myByteDFSet_ref() == rhs.myByteDFSet_ref())) {
    return false;
  }
  if (!(lhs.myByte_ref() == rhs.myByte_ref())) {
    return false;
  }
  if (!(lhs.myDoubleDFset_ref() == rhs.myDoubleDFset_ref())) {
    return false;
  }
  if (!(lhs.myDoubleDFZero_ref() == rhs.myDoubleDFZero_ref())) {
    return false;
  }
  if (!(lhs.myDouble_ref() == rhs.myDouble_ref())) {
    return false;
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  if (!(lhs.myList_ref() == rhs.myList_ref())) {
    return false;
  }
  if (!(lhs.mySet_ref() == rhs.mySet_ref())) {
    return false;
  }
  if (!(lhs.simpleStruct_ref() == rhs.simpleStruct_ref())) {
    return false;
  }
  if (!(lhs.listStructDFset_ref() == rhs.listStructDFset_ref())) {
    return false;
  }
  if (!(lhs.myUnion_ref() == rhs.myUnion_ref())) {
    return false;
  }
  if (!(lhs.listUnionDFset_ref() == rhs.listUnionDFset_ref())) {
    return false;
  }
  if (!(lhs.mapNestlistStructDfSet_ref() == rhs.mapNestlistStructDfSet_ref())) {
    return false;
  }
  if (!(lhs.mapJavaTypeDFset_ref() == rhs.mapJavaTypeDFset_ref())) {
    return false;
  }
  if (!(lhs.emptyMap_ref() == rhs.emptyMap_ref())) {
    return false;
  }
  if (!(lhs.enumMapDFset_ref() == rhs.enumMapDFset_ref())) {
    return false;
  }
  return true;
}

bool defaultStruct::operator<(FOLLY_MAYBE_UNUSED const defaultStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongDFset_ref() == rhs.myLongDFset_ref())) {
    return lhs.myLongDFset_ref() < rhs.myLongDFset_ref();
  }
  if (!(lhs.myLongDF_ref() == rhs.myLongDF_ref())) {
    return lhs.myLongDF_ref() < rhs.myLongDF_ref();
  }
  if (!(lhs.portDFset_ref() == rhs.portDFset_ref())) {
    return lhs.portDFset_ref() < rhs.portDFset_ref();
  }
  if (!(lhs.portNum_ref() == rhs.portNum_ref())) {
    return lhs.portNum_ref() < rhs.portNum_ref();
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_myBinaryDFset, rhs.__fbthrift_field_myBinaryDFset)) {
    return apache::thrift::StringTraits<std::string>::isLess(lhs.__fbthrift_field_myBinaryDFset, rhs.__fbthrift_field_myBinaryDFset);
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_myBinary, rhs.__fbthrift_field_myBinary)) {
    return apache::thrift::StringTraits<std::string>::isLess(lhs.__fbthrift_field_myBinary, rhs.__fbthrift_field_myBinary);
  }
  if (!(lhs.myByteDFSet_ref() == rhs.myByteDFSet_ref())) {
    return lhs.myByteDFSet_ref() < rhs.myByteDFSet_ref();
  }
  if (!(lhs.myByte_ref() == rhs.myByte_ref())) {
    return lhs.myByte_ref() < rhs.myByte_ref();
  }
  if (!(lhs.myDoubleDFset_ref() == rhs.myDoubleDFset_ref())) {
    return lhs.myDoubleDFset_ref() < rhs.myDoubleDFset_ref();
  }
  if (!(lhs.myDoubleDFZero_ref() == rhs.myDoubleDFZero_ref())) {
    return lhs.myDoubleDFZero_ref() < rhs.myDoubleDFZero_ref();
  }
  if (!(lhs.myDouble_ref() == rhs.myDouble_ref())) {
    return lhs.myDouble_ref() < rhs.myDouble_ref();
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  if (!(lhs.myList_ref() == rhs.myList_ref())) {
    return lhs.myList_ref() < rhs.myList_ref();
  }
  if (!(lhs.mySet_ref() == rhs.mySet_ref())) {
    return lhs.mySet_ref() < rhs.mySet_ref();
  }
  if (!(lhs.simpleStruct_ref() == rhs.simpleStruct_ref())) {
    return lhs.simpleStruct_ref() < rhs.simpleStruct_ref();
  }
  if (!(lhs.listStructDFset_ref() == rhs.listStructDFset_ref())) {
    return lhs.listStructDFset_ref() < rhs.listStructDFset_ref();
  }
  if (!(lhs.myUnion_ref() == rhs.myUnion_ref())) {
    return lhs.myUnion_ref() < rhs.myUnion_ref();
  }
  if (!(lhs.listUnionDFset_ref() == rhs.listUnionDFset_ref())) {
    return lhs.listUnionDFset_ref() < rhs.listUnionDFset_ref();
  }
  if (!(lhs.mapNestlistStructDfSet_ref() == rhs.mapNestlistStructDfSet_ref())) {
    return lhs.mapNestlistStructDfSet_ref() < rhs.mapNestlistStructDfSet_ref();
  }
  if (!(lhs.mapJavaTypeDFset_ref() == rhs.mapJavaTypeDFset_ref())) {
    return lhs.mapJavaTypeDFset_ref() < rhs.mapJavaTypeDFset_ref();
  }
  if (!(lhs.emptyMap_ref() == rhs.emptyMap_ref())) {
    return lhs.emptyMap_ref() < rhs.emptyMap_ref();
  }
  if (!(lhs.enumMapDFset_ref() == rhs.enumMapDFset_ref())) {
    return lhs.enumMapDFset_ref() < rhs.enumMapDFset_ref();
  }
  return false;
}

const ::std::map<::std::int32_t, ::std::string>& defaultStruct::get_field3() const& {
  return __fbthrift_field_field3;
}

::std::map<::std::int32_t, ::std::string> defaultStruct::get_field3() && {
  return std::move(__fbthrift_field_field3);
}

const ::std::vector<::cpp2::MyEnum>& defaultStruct::get_myList() const& {
  return __fbthrift_field_myList;
}

::std::vector<::cpp2::MyEnum> defaultStruct::get_myList() && {
  return std::move(__fbthrift_field_myList);
}

const ::std::set<::std::string>& defaultStruct::get_mySet() const& {
  return __fbthrift_field_mySet;
}

::std::set<::std::string> defaultStruct::get_mySet() && {
  return std::move(__fbthrift_field_mySet);
}

const ::cpp2::SimpleStruct& defaultStruct::get_simpleStruct() const& {
  return __fbthrift_field_simpleStruct;
}

::cpp2::SimpleStruct defaultStruct::get_simpleStruct() && {
  return std::move(__fbthrift_field_simpleStruct);
}

const ::std::vector<::cpp2::SimpleStruct>& defaultStruct::get_listStructDFset() const& {
  return __fbthrift_field_listStructDFset;
}

::std::vector<::cpp2::SimpleStruct> defaultStruct::get_listStructDFset() && {
  return std::move(__fbthrift_field_listStructDFset);
}

const ::cpp2::MyUnion& defaultStruct::get_myUnion() const& {
  return __fbthrift_field_myUnion;
}

::cpp2::MyUnion defaultStruct::get_myUnion() && {
  return std::move(__fbthrift_field_myUnion);
}

const ::std::vector<::cpp2::MyUnion>& defaultStruct::get_listUnionDFset() const& {
  return __fbthrift_field_listUnionDFset;
}

::std::vector<::cpp2::MyUnion> defaultStruct::get_listUnionDFset() && {
  return std::move(__fbthrift_field_listUnionDFset);
}

const ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>& defaultStruct::get_mapNestlistStructDfSet() const& {
  return __fbthrift_field_mapNestlistStructDfSet;
}

::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> defaultStruct::get_mapNestlistStructDfSet() && {
  return std::move(__fbthrift_field_mapNestlistStructDfSet);
}

const ::std::map<::std::int64_t, ::std::string>& defaultStruct::get_mapJavaTypeDFset() const& {
  return __fbthrift_field_mapJavaTypeDFset;
}

::std::map<::std::int64_t, ::std::string> defaultStruct::get_mapJavaTypeDFset() && {
  return std::move(__fbthrift_field_mapJavaTypeDFset);
}

const ::std::map<::std::int64_t, ::std::int32_t>& defaultStruct::get_emptyMap() const& {
  return __fbthrift_field_emptyMap;
}

::std::map<::std::int64_t, ::std::int32_t> defaultStruct::get_emptyMap() && {
  return std::move(__fbthrift_field_emptyMap);
}

const ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>& defaultStruct::get_enumMapDFset() const& {
  return __fbthrift_field_enumMapDFset;
}

::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> defaultStruct::get_enumMapDFset() && {
  return std::move(__fbthrift_field_enumMapDFset);
}


void swap(FOLLY_MAYBE_UNUSED defaultStruct& a, FOLLY_MAYBE_UNUSED defaultStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongDFset, b.__fbthrift_field_myLongDFset);
  swap(a.__fbthrift_field_myLongDF, b.__fbthrift_field_myLongDF);
  swap(a.__fbthrift_field_portDFset, b.__fbthrift_field_portDFset);
  swap(a.__fbthrift_field_portNum, b.__fbthrift_field_portNum);
  swap(a.__fbthrift_field_myBinaryDFset, b.__fbthrift_field_myBinaryDFset);
  swap(a.__fbthrift_field_myBinary, b.__fbthrift_field_myBinary);
  swap(a.__fbthrift_field_myByteDFSet, b.__fbthrift_field_myByteDFSet);
  swap(a.__fbthrift_field_myByte, b.__fbthrift_field_myByte);
  swap(a.__fbthrift_field_myDoubleDFset, b.__fbthrift_field_myDoubleDFset);
  swap(a.__fbthrift_field_myDoubleDFZero, b.__fbthrift_field_myDoubleDFZero);
  swap(a.__fbthrift_field_myDouble, b.__fbthrift_field_myDouble);
  swap(a.__fbthrift_field_field3, b.__fbthrift_field_field3);
  swap(a.__fbthrift_field_myList, b.__fbthrift_field_myList);
  swap(a.__fbthrift_field_mySet, b.__fbthrift_field_mySet);
  swap(a.__fbthrift_field_simpleStruct, b.__fbthrift_field_simpleStruct);
  swap(a.__fbthrift_field_listStructDFset, b.__fbthrift_field_listStructDFset);
  swap(a.__fbthrift_field_myUnion, b.__fbthrift_field_myUnion);
  swap(a.__fbthrift_field_listUnionDFset, b.__fbthrift_field_listUnionDFset);
  swap(a.__fbthrift_field_mapNestlistStructDfSet, b.__fbthrift_field_mapNestlistStructDfSet);
  swap(a.__fbthrift_field_mapJavaTypeDFset, b.__fbthrift_field_mapJavaTypeDFset);
  swap(a.__fbthrift_field_emptyMap, b.__fbthrift_field_emptyMap);
  swap(a.__fbthrift_field_enumMapDFset, b.__fbthrift_field_enumMapDFset);
  swap(a.__isset, b.__isset);
}

template void defaultStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t defaultStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t defaultStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t defaultStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void defaultStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t defaultStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t defaultStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t defaultStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::structure,
        ::cpp2::SimpleStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::cpp2::SimpleStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::variant,
        ::cpp2::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        defaultStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>,
    "inconsistent use of json option");

} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyStructTypeDef>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyStructTypeDef>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece MyStructTypeDef::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructTypeDef>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructTypeDef::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructTypeDef>::name;
}

MyStructTypeDef::MyStructTypeDef(const MyStructTypeDef&) = default;
MyStructTypeDef& MyStructTypeDef::operator=(const MyStructTypeDef&) = default;
MyStructTypeDef::MyStructTypeDef() :
      __fbthrift_field_myLongField(),
      __fbthrift_field_myLongTypeDef() {
}


MyStructTypeDef::~MyStructTypeDef() {}

MyStructTypeDef::MyStructTypeDef(FOLLY_MAYBE_UNUSED MyStructTypeDef&& other) noexcept :
    __fbthrift_field_myLongField(std::move(other.__fbthrift_field_myLongField)),
    __fbthrift_field_myLongTypeDef(std::move(other.__fbthrift_field_myLongTypeDef)),
    __fbthrift_field_myStringField(std::move(other.__fbthrift_field_myStringField)),
    __fbthrift_field_myStringTypedef(std::move(other.__fbthrift_field_myStringTypedef)),
    __fbthrift_field_myMapField(std::move(other.__fbthrift_field_myMapField)),
    __fbthrift_field_myMapTypedef(std::move(other.__fbthrift_field_myMapTypedef)),
    __fbthrift_field_myListField(std::move(other.__fbthrift_field_myListField)),
    __fbthrift_field_myListTypedef(std::move(other.__fbthrift_field_myListTypedef)),
    __fbthrift_field_myMapListOfTypeDef(std::move(other.__fbthrift_field_myMapListOfTypeDef)),
    __isset(other.__isset) {
}

MyStructTypeDef& MyStructTypeDef::operator=(FOLLY_MAYBE_UNUSED MyStructTypeDef&& other) noexcept {
    this->__fbthrift_field_myLongField = std::move(other.__fbthrift_field_myLongField);
    this->__fbthrift_field_myLongTypeDef = std::move(other.__fbthrift_field_myLongTypeDef);
    this->__fbthrift_field_myStringField = std::move(other.__fbthrift_field_myStringField);
    this->__fbthrift_field_myStringTypedef = std::move(other.__fbthrift_field_myStringTypedef);
    this->__fbthrift_field_myMapField = std::move(other.__fbthrift_field_myMapField);
    this->__fbthrift_field_myMapTypedef = std::move(other.__fbthrift_field_myMapTypedef);
    this->__fbthrift_field_myListField = std::move(other.__fbthrift_field_myListField);
    this->__fbthrift_field_myListTypedef = std::move(other.__fbthrift_field_myListTypedef);
    this->__fbthrift_field_myMapListOfTypeDef = std::move(other.__fbthrift_field_myMapListOfTypeDef);
    __isset = other.__isset;
    return *this;
}


MyStructTypeDef::MyStructTypeDef(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::cpp2::longTypeDef myLongTypeDef__arg, ::std::string myStringField__arg, ::cpp2::stringTypedef myStringTypedef__arg, ::std::map<::std::int16_t, ::std::string> myMapField__arg, ::cpp2::mapTypedef myMapTypedef__arg, ::std::vector<double> myListField__arg, ::cpp2::listTypedef myListTypedef__arg, ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> myMapListOfTypeDef__arg) :
    __fbthrift_field_myLongField(std::move(myLongField__arg)),
    __fbthrift_field_myLongTypeDef(std::move(myLongTypeDef__arg)),
    __fbthrift_field_myStringField(std::move(myStringField__arg)),
    __fbthrift_field_myStringTypedef(std::move(myStringTypedef__arg)),
    __fbthrift_field_myMapField(std::move(myMapField__arg)),
    __fbthrift_field_myMapTypedef(std::move(myMapTypedef__arg)),
    __fbthrift_field_myListField(std::move(myListField__arg)),
    __fbthrift_field_myListTypedef(std::move(myListTypedef__arg)),
    __fbthrift_field_myMapListOfTypeDef(std::move(myMapListOfTypeDef__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void MyStructTypeDef::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_myLongField = ::std::int64_t();
  this->__fbthrift_field_myLongTypeDef = ::cpp2::longTypeDef();
  this->__fbthrift_field_myStringField = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myStringTypedef = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myMapField.clear();
  this->__fbthrift_field_myMapTypedef.clear();
  this->__fbthrift_field_myListField.clear();
  this->__fbthrift_field_myListTypedef.clear();
  this->__fbthrift_field_myMapListOfTypeDef.clear();
  __isset = {};
}

void MyStructTypeDef::__fbthrift_clear_terse_fields() {
}

bool MyStructTypeDef::__fbthrift_is_empty() const {
  return false;
}

bool MyStructTypeDef::operator==(FOLLY_MAYBE_UNUSED const MyStructTypeDef& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongField_ref() == rhs.myLongField_ref())) {
    return false;
  }
  if (!(lhs.myLongTypeDef_ref() == rhs.myLongTypeDef_ref())) {
    return false;
  }
  if (!(lhs.myStringField_ref() == rhs.myStringField_ref())) {
    return false;
  }
  if (!(lhs.myStringTypedef_ref() == rhs.myStringTypedef_ref())) {
    return false;
  }
  if (!(lhs.myMapField_ref() == rhs.myMapField_ref())) {
    return false;
  }
  if (!(lhs.myMapTypedef_ref() == rhs.myMapTypedef_ref())) {
    return false;
  }
  if (!(lhs.myListField_ref() == rhs.myListField_ref())) {
    return false;
  }
  if (!(lhs.myListTypedef_ref() == rhs.myListTypedef_ref())) {
    return false;
  }
  if (!(lhs.myMapListOfTypeDef_ref() == rhs.myMapListOfTypeDef_ref())) {
    return false;
  }
  return true;
}

bool MyStructTypeDef::operator<(FOLLY_MAYBE_UNUSED const MyStructTypeDef& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.myLongField_ref() == rhs.myLongField_ref())) {
    return lhs.myLongField_ref() < rhs.myLongField_ref();
  }
  if (!(lhs.myLongTypeDef_ref() == rhs.myLongTypeDef_ref())) {
    return lhs.myLongTypeDef_ref() < rhs.myLongTypeDef_ref();
  }
  if (!(lhs.myStringField_ref() == rhs.myStringField_ref())) {
    return lhs.myStringField_ref() < rhs.myStringField_ref();
  }
  if (!(lhs.myStringTypedef_ref() == rhs.myStringTypedef_ref())) {
    return lhs.myStringTypedef_ref() < rhs.myStringTypedef_ref();
  }
  if (!(lhs.myMapField_ref() == rhs.myMapField_ref())) {
    return lhs.myMapField_ref() < rhs.myMapField_ref();
  }
  if (!(lhs.myMapTypedef_ref() == rhs.myMapTypedef_ref())) {
    return lhs.myMapTypedef_ref() < rhs.myMapTypedef_ref();
  }
  if (!(lhs.myListField_ref() == rhs.myListField_ref())) {
    return lhs.myListField_ref() < rhs.myListField_ref();
  }
  if (!(lhs.myListTypedef_ref() == rhs.myListTypedef_ref())) {
    return lhs.myListTypedef_ref() < rhs.myListTypedef_ref();
  }
  if (!(lhs.myMapListOfTypeDef_ref() == rhs.myMapListOfTypeDef_ref())) {
    return lhs.myMapListOfTypeDef_ref() < rhs.myMapListOfTypeDef_ref();
  }
  return false;
}

const ::std::map<::std::int16_t, ::std::string>& MyStructTypeDef::get_myMapField() const& {
  return __fbthrift_field_myMapField;
}

::std::map<::std::int16_t, ::std::string> MyStructTypeDef::get_myMapField() && {
  return std::move(__fbthrift_field_myMapField);
}

const ::cpp2::mapTypedef& MyStructTypeDef::get_myMapTypedef() const& {
  return __fbthrift_field_myMapTypedef;
}

::cpp2::mapTypedef MyStructTypeDef::get_myMapTypedef() && {
  return std::move(__fbthrift_field_myMapTypedef);
}

const ::std::vector<double>& MyStructTypeDef::get_myListField() const& {
  return __fbthrift_field_myListField;
}

::std::vector<double> MyStructTypeDef::get_myListField() && {
  return std::move(__fbthrift_field_myListField);
}

const ::cpp2::listTypedef& MyStructTypeDef::get_myListTypedef() const& {
  return __fbthrift_field_myListTypedef;
}

::cpp2::listTypedef MyStructTypeDef::get_myListTypedef() && {
  return std::move(__fbthrift_field_myListTypedef);
}

const ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>& MyStructTypeDef::get_myMapListOfTypeDef() const& {
  return __fbthrift_field_myMapListOfTypeDef;
}

::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> MyStructTypeDef::get_myMapListOfTypeDef() && {
  return std::move(__fbthrift_field_myMapListOfTypeDef);
}


void swap(FOLLY_MAYBE_UNUSED MyStructTypeDef& a, FOLLY_MAYBE_UNUSED MyStructTypeDef& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_myLongField, b.__fbthrift_field_myLongField);
  swap(a.__fbthrift_field_myLongTypeDef, b.__fbthrift_field_myLongTypeDef);
  swap(a.__fbthrift_field_myStringField, b.__fbthrift_field_myStringField);
  swap(a.__fbthrift_field_myStringTypedef, b.__fbthrift_field_myStringTypedef);
  swap(a.__fbthrift_field_myMapField, b.__fbthrift_field_myMapField);
  swap(a.__fbthrift_field_myMapTypedef, b.__fbthrift_field_myMapTypedef);
  swap(a.__fbthrift_field_myListField, b.__fbthrift_field_myListField);
  swap(a.__fbthrift_field_myListTypedef, b.__fbthrift_field_myListTypedef);
  swap(a.__fbthrift_field_myMapListOfTypeDef, b.__fbthrift_field_myMapListOfTypeDef);
  swap(a.__isset, b.__isset);
}

template void MyStructTypeDef::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructTypeDef::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructTypeDef::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructTypeDef::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructTypeDef::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructTypeDef::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructTypeDef::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructTypeDef::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyDataItem>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyDataItem>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece MyDataItem::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItem>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataItem::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItem>::name;
}


MyDataItem::MyDataItem(apache::thrift::FragileConstructor) {}


void MyDataItem::__fbthrift_clear() {
  // clear all fields
}

void MyDataItem::__fbthrift_clear_terse_fields() {
}

bool MyDataItem::__fbthrift_is_empty() const {
  return true;
}

bool MyDataItem::operator==(FOLLY_MAYBE_UNUSED const MyDataItem& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool MyDataItem::operator<(FOLLY_MAYBE_UNUSED const MyDataItem& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return false;
}


void swap(FOLLY_MAYBE_UNUSED MyDataItem& a, FOLLY_MAYBE_UNUSED MyDataItem& b) {
  using ::std::swap;
}

template void MyDataItem::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataItem::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::cpp2::MyUnion::Type>::size;
folly::Range<::cpp2::MyUnion::Type const*> const TEnumTraits<::cpp2::MyUnion::Type>::values = folly::range(TEnumDataStorage<::cpp2::MyUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::cpp2::MyUnion::Type>::names = folly::range(TEnumDataStorage<::cpp2::MyUnion::Type>::names);

bool TEnumTraits<::cpp2::MyUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

const folly::StringPiece MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::myEnum:
      destruct(value_.myEnum);
      break;
    case Type::myStruct:
      destruct(value_.myStruct);
      break;
    case Type::myDataItem:
      destruct(value_.myDataItem);
      break;
    case Type::complexNestedStruct:
      destruct(value_.complexNestedStruct);
      break;
    case Type::longValue:
      destruct(value_.longValue);
      break;
    case Type::intValue:
      destruct(value_.intValue);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool MyUnion::operator==(const MyUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::myEnum:
      return value_.myEnum == rhs.value_.myEnum;
    case Type::myStruct:
      return value_.myStruct == rhs.value_.myStruct;
    case Type::myDataItem:
      return value_.myDataItem == rhs.value_.myDataItem;
    case Type::complexNestedStruct:
      return value_.complexNestedStruct == rhs.value_.complexNestedStruct;
    case Type::longValue:
      return value_.longValue == rhs.value_.longValue;
    case Type::intValue:
      return value_.intValue == rhs.value_.intValue;
    default:
      return true;
  }
}

bool MyUnion::operator<(FOLLY_MAYBE_UNUSED const MyUnion& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::myEnum:
      return lhs.value_.myEnum < rhs.value_.myEnum;
    case Type::myStruct:
      return lhs.value_.myStruct < rhs.value_.myStruct;
    case Type::myDataItem:
      return lhs.value_.myDataItem < rhs.value_.myDataItem;
    case Type::complexNestedStruct:
      return lhs.value_.complexNestedStruct < rhs.value_.complexNestedStruct;
    case Type::longValue:
      return lhs.value_.longValue < rhs.value_.longValue;
    case Type::intValue:
      return lhs.value_.intValue < rhs.value_.intValue;
    default:
      return false;
  }
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyDataItem>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::cpp2::ComplexNestedStruct>,
    "inconsistent use of json option");

} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::MyUnionFloatFieldThrowExp>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::MyUnionFloatFieldThrowExp>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::size;
folly::Range<::cpp2::MyUnionFloatFieldThrowExp::Type const*> const TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::values = folly::range(TEnumDataStorage<::cpp2::MyUnionFloatFieldThrowExp::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::names = folly::range(TEnumDataStorage<::cpp2::MyUnionFloatFieldThrowExp::Type>::names);

bool TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

const folly::StringPiece MyUnionFloatFieldThrowExp::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionFloatFieldThrowExp>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyUnionFloatFieldThrowExp::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnionFloatFieldThrowExp>::name;
}

void MyUnionFloatFieldThrowExp::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::myEnum:
      destruct(value_.myEnum);
      break;
    case Type::setFloat:
      destruct(value_.setFloat);
      break;
    case Type::myDataItem:
      destruct(value_.myDataItem);
      break;
    case Type::complexNestedStruct:
      destruct(value_.complexNestedStruct);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool MyUnionFloatFieldThrowExp::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool MyUnionFloatFieldThrowExp::operator==(const MyUnionFloatFieldThrowExp& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::myEnum:
      return value_.myEnum == rhs.value_.myEnum;
    case Type::setFloat:
      return value_.setFloat == rhs.value_.setFloat;
    case Type::myDataItem:
      return value_.myDataItem == rhs.value_.myDataItem;
    case Type::complexNestedStruct:
      return value_.complexNestedStruct == rhs.value_.complexNestedStruct;
    default:
      return true;
  }
}

bool MyUnionFloatFieldThrowExp::operator<(FOLLY_MAYBE_UNUSED const MyUnionFloatFieldThrowExp& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (lhs.getType() != rhs.getType()) {
    return lhs.getType() < rhs.getType();
  }
  switch (lhs.getType()) {
    case Type::myEnum:
      return lhs.value_.myEnum < rhs.value_.myEnum;
    case Type::setFloat:
      return lhs.value_.setFloat < rhs.value_.setFloat;
    case Type::myDataItem:
      return lhs.value_.myDataItem < rhs.value_.myDataItem;
    case Type::complexNestedStruct:
      return lhs.value_.complexNestedStruct < rhs.value_.complexNestedStruct;
    default:
      return false;
  }
}

void swap(MyUnionFloatFieldThrowExp& a, MyUnionFloatFieldThrowExp& b) {
  MyUnionFloatFieldThrowExp temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnionFloatFieldThrowExp::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionFloatFieldThrowExp::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionFloatFieldThrowExp::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionFloatFieldThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionFloatFieldThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionFloatFieldThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFloatFieldThrowExp,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyDataItem>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFloatFieldThrowExp,
        ::apache::thrift::type_class::structure,
        ::cpp2::ComplexNestedStruct>,
    "inconsistent use of json option");

} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::ComplexNestedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::ComplexNestedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece ComplexNestedStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComplexNestedStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ComplexNestedStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComplexNestedStruct>::name;
}

ComplexNestedStruct::ComplexNestedStruct(const ComplexNestedStruct&) = default;
ComplexNestedStruct& ComplexNestedStruct::operator=(const ComplexNestedStruct&) = default;
ComplexNestedStruct::ComplexNestedStruct() {
}


ComplexNestedStruct::~ComplexNestedStruct() {}

ComplexNestedStruct::ComplexNestedStruct(FOLLY_MAYBE_UNUSED ComplexNestedStruct&& other) noexcept :
    __fbthrift_field_setOfSetOfInt(std::move(other.__fbthrift_field_setOfSetOfInt)),
    __fbthrift_field_listofListOfListOfListOfEnum(std::move(other.__fbthrift_field_listofListOfListOfListOfEnum)),
    __fbthrift_field_listOfListOfMyStruct(std::move(other.__fbthrift_field_listOfListOfMyStruct)),
    __fbthrift_field_setOfListOfListOfLong(std::move(other.__fbthrift_field_setOfListOfListOfLong)),
    __fbthrift_field_setOfSetOfsetOfLong(std::move(other.__fbthrift_field_setOfSetOfsetOfLong)),
    __fbthrift_field_mapStructListOfListOfLong(std::move(other.__fbthrift_field_mapStructListOfListOfLong)),
    __fbthrift_field_mKeyStructValInt(std::move(other.__fbthrift_field_mKeyStructValInt)),
    __fbthrift_field_listOfMapKeyIntValInt(std::move(other.__fbthrift_field_listOfMapKeyIntValInt)),
    __fbthrift_field_listOfMapKeyStrValList(std::move(other.__fbthrift_field_listOfMapKeyStrValList)),
    __fbthrift_field_mapKeySetValLong(std::move(other.__fbthrift_field_mapKeySetValLong)),
    __fbthrift_field_mapKeyListValLong(std::move(other.__fbthrift_field_mapKeyListValLong)),
    __fbthrift_field_mapKeyMapValMap(std::move(other.__fbthrift_field_mapKeyMapValMap)),
    __fbthrift_field_mapKeySetValMap(std::move(other.__fbthrift_field_mapKeySetValMap)),
    __fbthrift_field_NestedMaps(std::move(other.__fbthrift_field_NestedMaps)),
    __fbthrift_field_mapKeyIntValList(std::move(other.__fbthrift_field_mapKeyIntValList)),
    __fbthrift_field_mapKeyIntValSet(std::move(other.__fbthrift_field_mapKeyIntValSet)),
    __fbthrift_field_mapKeySetValInt(std::move(other.__fbthrift_field_mapKeySetValInt)),
    __fbthrift_field_mapKeyListValSet(std::move(other.__fbthrift_field_mapKeyListValSet)),
    __isset(other.__isset) {
}

ComplexNestedStruct& ComplexNestedStruct::operator=(FOLLY_MAYBE_UNUSED ComplexNestedStruct&& other) noexcept {
    this->__fbthrift_field_setOfSetOfInt = std::move(other.__fbthrift_field_setOfSetOfInt);
    this->__fbthrift_field_listofListOfListOfListOfEnum = std::move(other.__fbthrift_field_listofListOfListOfListOfEnum);
    this->__fbthrift_field_listOfListOfMyStruct = std::move(other.__fbthrift_field_listOfListOfMyStruct);
    this->__fbthrift_field_setOfListOfListOfLong = std::move(other.__fbthrift_field_setOfListOfListOfLong);
    this->__fbthrift_field_setOfSetOfsetOfLong = std::move(other.__fbthrift_field_setOfSetOfsetOfLong);
    this->__fbthrift_field_mapStructListOfListOfLong = std::move(other.__fbthrift_field_mapStructListOfListOfLong);
    this->__fbthrift_field_mKeyStructValInt = std::move(other.__fbthrift_field_mKeyStructValInt);
    this->__fbthrift_field_listOfMapKeyIntValInt = std::move(other.__fbthrift_field_listOfMapKeyIntValInt);
    this->__fbthrift_field_listOfMapKeyStrValList = std::move(other.__fbthrift_field_listOfMapKeyStrValList);
    this->__fbthrift_field_mapKeySetValLong = std::move(other.__fbthrift_field_mapKeySetValLong);
    this->__fbthrift_field_mapKeyListValLong = std::move(other.__fbthrift_field_mapKeyListValLong);
    this->__fbthrift_field_mapKeyMapValMap = std::move(other.__fbthrift_field_mapKeyMapValMap);
    this->__fbthrift_field_mapKeySetValMap = std::move(other.__fbthrift_field_mapKeySetValMap);
    this->__fbthrift_field_NestedMaps = std::move(other.__fbthrift_field_NestedMaps);
    this->__fbthrift_field_mapKeyIntValList = std::move(other.__fbthrift_field_mapKeyIntValList);
    this->__fbthrift_field_mapKeyIntValSet = std::move(other.__fbthrift_field_mapKeyIntValSet);
    this->__fbthrift_field_mapKeySetValInt = std::move(other.__fbthrift_field_mapKeySetValInt);
    this->__fbthrift_field_mapKeyListValSet = std::move(other.__fbthrift_field_mapKeyListValSet);
    __isset = other.__isset;
    return *this;
}


ComplexNestedStruct::ComplexNestedStruct(apache::thrift::FragileConstructor, ::std::set<::std::set<::std::int32_t>> setOfSetOfInt__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> listofListOfListOfListOfEnum__arg, ::std::vector<::std::vector<::cpp2::MyStruct>> listOfListOfMyStruct__arg, ::std::set<::std::vector<::std::vector<::std::int64_t>>> setOfListOfListOfLong__arg, ::std::set<::std::set<::std::set<::std::int64_t>>> setOfSetOfsetOfLong__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> mapStructListOfListOfLong__arg, ::std::map<::cpp2::MyStruct, ::std::int32_t> mKeyStructValInt__arg, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> listOfMapKeyIntValInt__arg, ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> listOfMapKeyStrValList__arg, ::std::map<::std::set<::std::int32_t>, ::std::int64_t> mapKeySetValLong__arg, ::std::map<::std::vector<::std::string>, ::std::int32_t> mapKeyListValLong__arg, ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> mapKeyMapValMap__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> mapKeySetValMap__arg, ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> NestedMaps__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> mapKeyIntValList__arg, ::std::map<::std::int32_t, ::std::set<bool>> mapKeyIntValSet__arg, ::std::map<::std::set<bool>, ::cpp2::MyEnum> mapKeySetValInt__arg, ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> mapKeyListValSet__arg) :
    __fbthrift_field_setOfSetOfInt(std::move(setOfSetOfInt__arg)),
    __fbthrift_field_listofListOfListOfListOfEnum(std::move(listofListOfListOfListOfEnum__arg)),
    __fbthrift_field_listOfListOfMyStruct(std::move(listOfListOfMyStruct__arg)),
    __fbthrift_field_setOfListOfListOfLong(std::move(setOfListOfListOfLong__arg)),
    __fbthrift_field_setOfSetOfsetOfLong(std::move(setOfSetOfsetOfLong__arg)),
    __fbthrift_field_mapStructListOfListOfLong(std::move(mapStructListOfListOfLong__arg)),
    __fbthrift_field_mKeyStructValInt(std::move(mKeyStructValInt__arg)),
    __fbthrift_field_listOfMapKeyIntValInt(std::move(listOfMapKeyIntValInt__arg)),
    __fbthrift_field_listOfMapKeyStrValList(std::move(listOfMapKeyStrValList__arg)),
    __fbthrift_field_mapKeySetValLong(std::move(mapKeySetValLong__arg)),
    __fbthrift_field_mapKeyListValLong(std::move(mapKeyListValLong__arg)),
    __fbthrift_field_mapKeyMapValMap(std::move(mapKeyMapValMap__arg)),
    __fbthrift_field_mapKeySetValMap(std::move(mapKeySetValMap__arg)),
    __fbthrift_field_NestedMaps(std::move(NestedMaps__arg)),
    __fbthrift_field_mapKeyIntValList(std::move(mapKeyIntValList__arg)),
    __fbthrift_field_mapKeyIntValSet(std::move(mapKeyIntValSet__arg)),
    __fbthrift_field_mapKeySetValInt(std::move(mapKeySetValInt__arg)),
    __fbthrift_field_mapKeyListValSet(std::move(mapKeyListValSet__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
}


void ComplexNestedStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_setOfSetOfInt.clear();
  this->__fbthrift_field_listofListOfListOfListOfEnum.clear();
  this->__fbthrift_field_listOfListOfMyStruct.clear();
  this->__fbthrift_field_setOfListOfListOfLong.clear();
  this->__fbthrift_field_setOfSetOfsetOfLong.clear();
  this->__fbthrift_field_mapStructListOfListOfLong.clear();
  this->__fbthrift_field_mKeyStructValInt.clear();
  this->__fbthrift_field_listOfMapKeyIntValInt.clear();
  this->__fbthrift_field_listOfMapKeyStrValList.clear();
  this->__fbthrift_field_mapKeySetValLong.clear();
  this->__fbthrift_field_mapKeyListValLong.clear();
  this->__fbthrift_field_mapKeyMapValMap.clear();
  this->__fbthrift_field_mapKeySetValMap.clear();
  this->__fbthrift_field_NestedMaps.clear();
  this->__fbthrift_field_mapKeyIntValList.clear();
  this->__fbthrift_field_mapKeyIntValSet.clear();
  this->__fbthrift_field_mapKeySetValInt.clear();
  this->__fbthrift_field_mapKeyListValSet.clear();
  __isset = {};
}

void ComplexNestedStruct::__fbthrift_clear_terse_fields() {
}

bool ComplexNestedStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComplexNestedStruct::operator==(FOLLY_MAYBE_UNUSED const ComplexNestedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.setOfSetOfInt_ref() == rhs.setOfSetOfInt_ref())) {
    return false;
  }
  if (!(lhs.listofListOfListOfListOfEnum_ref() == rhs.listofListOfListOfListOfEnum_ref())) {
    return false;
  }
  if (!(lhs.listOfListOfMyStruct_ref() == rhs.listOfListOfMyStruct_ref())) {
    return false;
  }
  if (!(lhs.setOfListOfListOfLong_ref() == rhs.setOfListOfListOfLong_ref())) {
    return false;
  }
  if (!(lhs.setOfSetOfsetOfLong_ref() == rhs.setOfSetOfsetOfLong_ref())) {
    return false;
  }
  if (!(lhs.mapStructListOfListOfLong_ref() == rhs.mapStructListOfListOfLong_ref())) {
    return false;
  }
  if (!(lhs.mKeyStructValInt_ref() == rhs.mKeyStructValInt_ref())) {
    return false;
  }
  if (!(lhs.listOfMapKeyIntValInt_ref() == rhs.listOfMapKeyIntValInt_ref())) {
    return false;
  }
  if (!(lhs.listOfMapKeyStrValList_ref() == rhs.listOfMapKeyStrValList_ref())) {
    return false;
  }
  if (!(lhs.mapKeySetValLong_ref() == rhs.mapKeySetValLong_ref())) {
    return false;
  }
  if (!(lhs.mapKeyListValLong_ref() == rhs.mapKeyListValLong_ref())) {
    return false;
  }
  if (!(lhs.mapKeyMapValMap_ref() == rhs.mapKeyMapValMap_ref())) {
    return false;
  }
  if (!(lhs.mapKeySetValMap_ref() == rhs.mapKeySetValMap_ref())) {
    return false;
  }
  if (!(lhs.NestedMaps_ref() == rhs.NestedMaps_ref())) {
    return false;
  }
  if (!(lhs.mapKeyIntValList_ref() == rhs.mapKeyIntValList_ref())) {
    return false;
  }
  if (!(lhs.mapKeyIntValSet_ref() == rhs.mapKeyIntValSet_ref())) {
    return false;
  }
  if (!(lhs.mapKeySetValInt_ref() == rhs.mapKeySetValInt_ref())) {
    return false;
  }
  if (!(lhs.mapKeyListValSet_ref() == rhs.mapKeyListValSet_ref())) {
    return false;
  }
  return true;
}

bool ComplexNestedStruct::operator<(FOLLY_MAYBE_UNUSED const ComplexNestedStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.setOfSetOfInt_ref() == rhs.setOfSetOfInt_ref())) {
    return lhs.setOfSetOfInt_ref() < rhs.setOfSetOfInt_ref();
  }
  if (!(lhs.listofListOfListOfListOfEnum_ref() == rhs.listofListOfListOfListOfEnum_ref())) {
    return lhs.listofListOfListOfListOfEnum_ref() < rhs.listofListOfListOfListOfEnum_ref();
  }
  if (!(lhs.listOfListOfMyStruct_ref() == rhs.listOfListOfMyStruct_ref())) {
    return lhs.listOfListOfMyStruct_ref() < rhs.listOfListOfMyStruct_ref();
  }
  if (!(lhs.setOfListOfListOfLong_ref() == rhs.setOfListOfListOfLong_ref())) {
    return lhs.setOfListOfListOfLong_ref() < rhs.setOfListOfListOfLong_ref();
  }
  if (!(lhs.setOfSetOfsetOfLong_ref() == rhs.setOfSetOfsetOfLong_ref())) {
    return lhs.setOfSetOfsetOfLong_ref() < rhs.setOfSetOfsetOfLong_ref();
  }
  if (!(lhs.mapStructListOfListOfLong_ref() == rhs.mapStructListOfListOfLong_ref())) {
    return lhs.mapStructListOfListOfLong_ref() < rhs.mapStructListOfListOfLong_ref();
  }
  if (!(lhs.mKeyStructValInt_ref() == rhs.mKeyStructValInt_ref())) {
    return lhs.mKeyStructValInt_ref() < rhs.mKeyStructValInt_ref();
  }
  if (!(lhs.listOfMapKeyIntValInt_ref() == rhs.listOfMapKeyIntValInt_ref())) {
    return lhs.listOfMapKeyIntValInt_ref() < rhs.listOfMapKeyIntValInt_ref();
  }
  if (!(lhs.listOfMapKeyStrValList_ref() == rhs.listOfMapKeyStrValList_ref())) {
    return lhs.listOfMapKeyStrValList_ref() < rhs.listOfMapKeyStrValList_ref();
  }
  if (!(lhs.mapKeySetValLong_ref() == rhs.mapKeySetValLong_ref())) {
    return lhs.mapKeySetValLong_ref() < rhs.mapKeySetValLong_ref();
  }
  if (!(lhs.mapKeyListValLong_ref() == rhs.mapKeyListValLong_ref())) {
    return lhs.mapKeyListValLong_ref() < rhs.mapKeyListValLong_ref();
  }
  if (!(lhs.mapKeyMapValMap_ref() == rhs.mapKeyMapValMap_ref())) {
    return lhs.mapKeyMapValMap_ref() < rhs.mapKeyMapValMap_ref();
  }
  if (!(lhs.mapKeySetValMap_ref() == rhs.mapKeySetValMap_ref())) {
    return lhs.mapKeySetValMap_ref() < rhs.mapKeySetValMap_ref();
  }
  if (!(lhs.NestedMaps_ref() == rhs.NestedMaps_ref())) {
    return lhs.NestedMaps_ref() < rhs.NestedMaps_ref();
  }
  if (!(lhs.mapKeyIntValList_ref() == rhs.mapKeyIntValList_ref())) {
    return lhs.mapKeyIntValList_ref() < rhs.mapKeyIntValList_ref();
  }
  if (!(lhs.mapKeyIntValSet_ref() == rhs.mapKeyIntValSet_ref())) {
    return lhs.mapKeyIntValSet_ref() < rhs.mapKeyIntValSet_ref();
  }
  if (!(lhs.mapKeySetValInt_ref() == rhs.mapKeySetValInt_ref())) {
    return lhs.mapKeySetValInt_ref() < rhs.mapKeySetValInt_ref();
  }
  if (!(lhs.mapKeyListValSet_ref() == rhs.mapKeyListValSet_ref())) {
    return lhs.mapKeyListValSet_ref() < rhs.mapKeyListValSet_ref();
  }
  return false;
}

const ::std::set<::std::set<::std::int32_t>>& ComplexNestedStruct::get_setOfSetOfInt() const& {
  return __fbthrift_field_setOfSetOfInt;
}

::std::set<::std::set<::std::int32_t>> ComplexNestedStruct::get_setOfSetOfInt() && {
  return std::move(__fbthrift_field_setOfSetOfInt);
}

const ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>& ComplexNestedStruct::get_listofListOfListOfListOfEnum() const& {
  return __fbthrift_field_listofListOfListOfListOfEnum;
}

::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> ComplexNestedStruct::get_listofListOfListOfListOfEnum() && {
  return std::move(__fbthrift_field_listofListOfListOfListOfEnum);
}

const ::std::vector<::std::vector<::cpp2::MyStruct>>& ComplexNestedStruct::get_listOfListOfMyStruct() const& {
  return __fbthrift_field_listOfListOfMyStruct;
}

::std::vector<::std::vector<::cpp2::MyStruct>> ComplexNestedStruct::get_listOfListOfMyStruct() && {
  return std::move(__fbthrift_field_listOfListOfMyStruct);
}

const ::std::set<::std::vector<::std::vector<::std::int64_t>>>& ComplexNestedStruct::get_setOfListOfListOfLong() const& {
  return __fbthrift_field_setOfListOfListOfLong;
}

::std::set<::std::vector<::std::vector<::std::int64_t>>> ComplexNestedStruct::get_setOfListOfListOfLong() && {
  return std::move(__fbthrift_field_setOfListOfListOfLong);
}

const ::std::set<::std::set<::std::set<::std::int64_t>>>& ComplexNestedStruct::get_setOfSetOfsetOfLong() const& {
  return __fbthrift_field_setOfSetOfsetOfLong;
}

::std::set<::std::set<::std::set<::std::int64_t>>> ComplexNestedStruct::get_setOfSetOfsetOfLong() && {
  return std::move(__fbthrift_field_setOfSetOfsetOfLong);
}

const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>& ComplexNestedStruct::get_mapStructListOfListOfLong() const& {
  return __fbthrift_field_mapStructListOfListOfLong;
}

::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> ComplexNestedStruct::get_mapStructListOfListOfLong() && {
  return std::move(__fbthrift_field_mapStructListOfListOfLong);
}

const ::std::map<::cpp2::MyStruct, ::std::int32_t>& ComplexNestedStruct::get_mKeyStructValInt() const& {
  return __fbthrift_field_mKeyStructValInt;
}

::std::map<::cpp2::MyStruct, ::std::int32_t> ComplexNestedStruct::get_mKeyStructValInt() && {
  return std::move(__fbthrift_field_mKeyStructValInt);
}

const ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& ComplexNestedStruct::get_listOfMapKeyIntValInt() const& {
  return __fbthrift_field_listOfMapKeyIntValInt;
}

::std::vector<::std::map<::std::int32_t, ::std::int32_t>> ComplexNestedStruct::get_listOfMapKeyIntValInt() && {
  return std::move(__fbthrift_field_listOfMapKeyIntValInt);
}

const ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>& ComplexNestedStruct::get_listOfMapKeyStrValList() const& {
  return __fbthrift_field_listOfMapKeyStrValList;
}

::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> ComplexNestedStruct::get_listOfMapKeyStrValList() && {
  return std::move(__fbthrift_field_listOfMapKeyStrValList);
}

const ::std::map<::std::set<::std::int32_t>, ::std::int64_t>& ComplexNestedStruct::get_mapKeySetValLong() const& {
  return __fbthrift_field_mapKeySetValLong;
}

::std::map<::std::set<::std::int32_t>, ::std::int64_t> ComplexNestedStruct::get_mapKeySetValLong() && {
  return std::move(__fbthrift_field_mapKeySetValLong);
}

const ::std::map<::std::vector<::std::string>, ::std::int32_t>& ComplexNestedStruct::get_mapKeyListValLong() const& {
  return __fbthrift_field_mapKeyListValLong;
}

::std::map<::std::vector<::std::string>, ::std::int32_t> ComplexNestedStruct::get_mapKeyListValLong() && {
  return std::move(__fbthrift_field_mapKeyListValLong);
}

const ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& ComplexNestedStruct::get_mapKeyMapValMap() const& {
  return __fbthrift_field_mapKeyMapValMap;
}

::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> ComplexNestedStruct::get_mapKeyMapValMap() && {
  return std::move(__fbthrift_field_mapKeyMapValMap);
}

const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& ComplexNestedStruct::get_mapKeySetValMap() const& {
  return __fbthrift_field_mapKeySetValMap;
}

::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> ComplexNestedStruct::get_mapKeySetValMap() && {
  return std::move(__fbthrift_field_mapKeySetValMap);
}

const ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& ComplexNestedStruct::get_NestedMaps() const& {
  return __fbthrift_field_NestedMaps;
}

::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> ComplexNestedStruct::get_NestedMaps() && {
  return std::move(__fbthrift_field_NestedMaps);
}

const ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>& ComplexNestedStruct::get_mapKeyIntValList() const& {
  return __fbthrift_field_mapKeyIntValList;
}

::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> ComplexNestedStruct::get_mapKeyIntValList() && {
  return std::move(__fbthrift_field_mapKeyIntValList);
}

const ::std::map<::std::int32_t, ::std::set<bool>>& ComplexNestedStruct::get_mapKeyIntValSet() const& {
  return __fbthrift_field_mapKeyIntValSet;
}

::std::map<::std::int32_t, ::std::set<bool>> ComplexNestedStruct::get_mapKeyIntValSet() && {
  return std::move(__fbthrift_field_mapKeyIntValSet);
}

const ::std::map<::std::set<bool>, ::cpp2::MyEnum>& ComplexNestedStruct::get_mapKeySetValInt() const& {
  return __fbthrift_field_mapKeySetValInt;
}

::std::map<::std::set<bool>, ::cpp2::MyEnum> ComplexNestedStruct::get_mapKeySetValInt() && {
  return std::move(__fbthrift_field_mapKeySetValInt);
}

const ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>& ComplexNestedStruct::get_mapKeyListValSet() const& {
  return __fbthrift_field_mapKeyListValSet;
}

::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> ComplexNestedStruct::get_mapKeyListValSet() && {
  return std::move(__fbthrift_field_mapKeyListValSet);
}


void swap(FOLLY_MAYBE_UNUSED ComplexNestedStruct& a, FOLLY_MAYBE_UNUSED ComplexNestedStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_setOfSetOfInt, b.__fbthrift_field_setOfSetOfInt);
  swap(a.__fbthrift_field_listofListOfListOfListOfEnum, b.__fbthrift_field_listofListOfListOfListOfEnum);
  swap(a.__fbthrift_field_listOfListOfMyStruct, b.__fbthrift_field_listOfListOfMyStruct);
  swap(a.__fbthrift_field_setOfListOfListOfLong, b.__fbthrift_field_setOfListOfListOfLong);
  swap(a.__fbthrift_field_setOfSetOfsetOfLong, b.__fbthrift_field_setOfSetOfsetOfLong);
  swap(a.__fbthrift_field_mapStructListOfListOfLong, b.__fbthrift_field_mapStructListOfListOfLong);
  swap(a.__fbthrift_field_mKeyStructValInt, b.__fbthrift_field_mKeyStructValInt);
  swap(a.__fbthrift_field_listOfMapKeyIntValInt, b.__fbthrift_field_listOfMapKeyIntValInt);
  swap(a.__fbthrift_field_listOfMapKeyStrValList, b.__fbthrift_field_listOfMapKeyStrValList);
  swap(a.__fbthrift_field_mapKeySetValLong, b.__fbthrift_field_mapKeySetValLong);
  swap(a.__fbthrift_field_mapKeyListValLong, b.__fbthrift_field_mapKeyListValLong);
  swap(a.__fbthrift_field_mapKeyMapValMap, b.__fbthrift_field_mapKeyMapValMap);
  swap(a.__fbthrift_field_mapKeySetValMap, b.__fbthrift_field_mapKeySetValMap);
  swap(a.__fbthrift_field_NestedMaps, b.__fbthrift_field_NestedMaps);
  swap(a.__fbthrift_field_mapKeyIntValList, b.__fbthrift_field_mapKeyIntValList);
  swap(a.__fbthrift_field_mapKeyIntValSet, b.__fbthrift_field_mapKeyIntValSet);
  swap(a.__fbthrift_field_mapKeySetValInt, b.__fbthrift_field_mapKeySetValInt);
  swap(a.__fbthrift_field_mapKeyListValSet, b.__fbthrift_field_mapKeyListValSet);
  swap(a.__isset, b.__isset);
}

template void ComplexNestedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexNestedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexNestedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexNestedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ComplexNestedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexNestedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexNestedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexNestedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::vector<::std::vector<::cpp2::MyStruct>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>,
        ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>,
        ::std::map<::cpp2::MyStruct, ::std::int32_t>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>,
        ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexNestedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
        ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>,
    "inconsistent use of json option");

} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::TypeRemapped>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::TypeRemapped>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece TypeRemapped::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TypeRemapped>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece TypeRemapped::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TypeRemapped>::name;
}

TypeRemapped::TypeRemapped(const TypeRemapped&) = default;
TypeRemapped& TypeRemapped::operator=(const TypeRemapped&) = default;
TypeRemapped::TypeRemapped(FOLLY_MAYBE_UNUSED TypeRemapped&& other) noexcept :
    __fbthrift_field_lsMap(std::move(other.__fbthrift_field_lsMap)),
    __fbthrift_field_ioMap(std::move(other.__fbthrift_field_ioMap)),
    __fbthrift_field_BigInteger(std::move(other.__fbthrift_field_BigInteger)),
    __fbthrift_field_binaryTestBuffer(std::move(other.__fbthrift_field_binaryTestBuffer)),
    __isset(other.__isset) {
}

TypeRemapped& TypeRemapped::operator=(FOLLY_MAYBE_UNUSED TypeRemapped&& other) noexcept {
    this->__fbthrift_field_lsMap = std::move(other.__fbthrift_field_lsMap);
    this->__fbthrift_field_ioMap = std::move(other.__fbthrift_field_ioMap);
    this->__fbthrift_field_BigInteger = std::move(other.__fbthrift_field_BigInteger);
    this->__fbthrift_field_binaryTestBuffer = std::move(other.__fbthrift_field_binaryTestBuffer);
    __isset = other.__isset;
    return *this;
}


TypeRemapped::TypeRemapped(apache::thrift::FragileConstructor, ::std::map<::std::int64_t, ::std::string> lsMap__arg, ::std::map<::std::int32_t, ::cpp2::FMap> ioMap__arg, ::std::int32_t BigInteger__arg, ::std::string binaryTestBuffer__arg) :
    __fbthrift_field_lsMap(std::move(lsMap__arg)),
    __fbthrift_field_ioMap(std::move(ioMap__arg)),
    __fbthrift_field_BigInteger(std::move(BigInteger__arg)),
    __fbthrift_field_binaryTestBuffer(std::move(binaryTestBuffer__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void TypeRemapped::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_lsMap.clear();
  this->__fbthrift_field_ioMap.clear();
  this->__fbthrift_field_BigInteger = ::std::int32_t();
  this->__fbthrift_field_binaryTestBuffer = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void TypeRemapped::__fbthrift_clear_terse_fields() {
}

bool TypeRemapped::__fbthrift_is_empty() const {
  return false;
}

bool TypeRemapped::operator==(FOLLY_MAYBE_UNUSED const TypeRemapped& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.lsMap_ref() == rhs.lsMap_ref())) {
    return false;
  }
  if (!(lhs.ioMap_ref() == rhs.ioMap_ref())) {
    return false;
  }
  if (!(lhs.BigInteger_ref() == rhs.BigInteger_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_binaryTestBuffer, rhs.__fbthrift_field_binaryTestBuffer)) {
    return false;
  }
  return true;
}

bool TypeRemapped::operator<(FOLLY_MAYBE_UNUSED const TypeRemapped& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.lsMap_ref() == rhs.lsMap_ref())) {
    return lhs.lsMap_ref() < rhs.lsMap_ref();
  }
  if (!(lhs.ioMap_ref() == rhs.ioMap_ref())) {
    return lhs.ioMap_ref() < rhs.ioMap_ref();
  }
  if (!(lhs.BigInteger_ref() == rhs.BigInteger_ref())) {
    return lhs.BigInteger_ref() < rhs.BigInteger_ref();
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.__fbthrift_field_binaryTestBuffer, rhs.__fbthrift_field_binaryTestBuffer)) {
    return apache::thrift::StringTraits<std::string>::isLess(lhs.__fbthrift_field_binaryTestBuffer, rhs.__fbthrift_field_binaryTestBuffer);
  }
  return false;
}

const ::std::map<::std::int64_t, ::std::string>& TypeRemapped::get_lsMap() const& {
  return __fbthrift_field_lsMap;
}

::std::map<::std::int64_t, ::std::string> TypeRemapped::get_lsMap() && {
  return std::move(__fbthrift_field_lsMap);
}

const ::std::map<::std::int32_t, ::cpp2::FMap>& TypeRemapped::get_ioMap() const& {
  return __fbthrift_field_ioMap;
}

::std::map<::std::int32_t, ::cpp2::FMap> TypeRemapped::get_ioMap() && {
  return std::move(__fbthrift_field_ioMap);
}


void swap(FOLLY_MAYBE_UNUSED TypeRemapped& a, FOLLY_MAYBE_UNUSED TypeRemapped& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_lsMap, b.__fbthrift_field_lsMap);
  swap(a.__fbthrift_field_ioMap, b.__fbthrift_field_ioMap);
  swap(a.__fbthrift_field_BigInteger, b.__fbthrift_field_BigInteger);
  swap(a.__fbthrift_field_binaryTestBuffer, b.__fbthrift_field_binaryTestBuffer);
  swap(a.__isset, b.__isset);
}

template void TypeRemapped::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TypeRemapped::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TypeRemapped::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TypeRemapped::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TypeRemapped::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TypeRemapped::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TypeRemapped::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TypeRemapped::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::emptyXcep>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::emptyXcep>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece emptyXcep::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<emptyXcep>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece emptyXcep::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<emptyXcep>::name;
}

emptyXcep::emptyXcep(const emptyXcep&) = default;
emptyXcep& emptyXcep::operator=(const emptyXcep&) = default;
emptyXcep::emptyXcep() {
}


emptyXcep::~emptyXcep() {}

emptyXcep::emptyXcep(FOLLY_MAYBE_UNUSED emptyXcep&& other) noexcept{}
emptyXcep& emptyXcep::operator=(FOLLY_MAYBE_UNUSED emptyXcep&& other) noexcept {
    return *this;
}


emptyXcep::emptyXcep(apache::thrift::FragileConstructor) {}


void emptyXcep::__fbthrift_clear() {
  // clear all fields
}

void emptyXcep::__fbthrift_clear_terse_fields() {
}

bool emptyXcep::__fbthrift_is_empty() const {
  return true;
}

bool emptyXcep::operator==(FOLLY_MAYBE_UNUSED const emptyXcep& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool emptyXcep::operator<(FOLLY_MAYBE_UNUSED const emptyXcep& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return false;
}


void swap(FOLLY_MAYBE_UNUSED emptyXcep& a, FOLLY_MAYBE_UNUSED emptyXcep& b) {
  using ::std::swap;
}

template void emptyXcep::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t emptyXcep::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t emptyXcep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t emptyXcep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void emptyXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t emptyXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t emptyXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t emptyXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::reqXcep>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::reqXcep>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece reqXcep::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<reqXcep>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece reqXcep::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<reqXcep>::name;
}

reqXcep::reqXcep(const reqXcep&) = default;
reqXcep& reqXcep::operator=(const reqXcep&) = default;
reqXcep::reqXcep() :
      __fbthrift_field_errorCode() {
}


reqXcep::~reqXcep() {}

reqXcep::reqXcep(FOLLY_MAYBE_UNUSED reqXcep&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_errorCode(std::move(other.__fbthrift_field_errorCode)) {
}

reqXcep& reqXcep::operator=(FOLLY_MAYBE_UNUSED reqXcep&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_errorCode = std::move(other.__fbthrift_field_errorCode);
    return *this;
}


reqXcep::reqXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg) :
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_errorCode(std::move(errorCode__arg)) {
}


void reqXcep::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_errorCode = ::std::int32_t();
}

void reqXcep::__fbthrift_clear_terse_fields() {
}

bool reqXcep::__fbthrift_is_empty() const {
  return false;
}

bool reqXcep::operator==(FOLLY_MAYBE_UNUSED const reqXcep& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return false;
  }
  if (!(lhs.errorCode_ref() == rhs.errorCode_ref())) {
    return false;
  }
  return true;
}

bool reqXcep::operator<(FOLLY_MAYBE_UNUSED const reqXcep& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return lhs.message_ref() < rhs.message_ref();
  }
  if (!(lhs.errorCode_ref() == rhs.errorCode_ref())) {
    return lhs.errorCode_ref() < rhs.errorCode_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED reqXcep& a, FOLLY_MAYBE_UNUSED reqXcep& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_errorCode, b.__fbthrift_field_errorCode);
}

template void reqXcep::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t reqXcep::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t reqXcep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t reqXcep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void reqXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t reqXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t reqXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t reqXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::optXcep>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::optXcep>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece optXcep::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<optXcep>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece optXcep::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<optXcep>::name;
}

optXcep::optXcep(const optXcep&) = default;
optXcep& optXcep::operator=(const optXcep&) = default;
optXcep::optXcep() :
      __fbthrift_field_errorCode() {
}


optXcep::~optXcep() {}

optXcep::optXcep(FOLLY_MAYBE_UNUSED optXcep&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_errorCode(std::move(other.__fbthrift_field_errorCode)),
    __isset(other.__isset) {
}

optXcep& optXcep::operator=(FOLLY_MAYBE_UNUSED optXcep&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_errorCode = std::move(other.__fbthrift_field_errorCode);
    __isset = other.__isset;
    return *this;
}


optXcep::optXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg) :
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_errorCode(std::move(errorCode__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void optXcep::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_errorCode = ::std::int32_t();
  __isset = {};
}

void optXcep::__fbthrift_clear_terse_fields() {
}

bool optXcep::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1));
}

bool optXcep::operator==(FOLLY_MAYBE_UNUSED const optXcep& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return false;
  }
  if (!(lhs.errorCode_ref() == rhs.errorCode_ref())) {
    return false;
  }
  return true;
}

bool optXcep::operator<(FOLLY_MAYBE_UNUSED const optXcep& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return lhs.message_ref() < rhs.message_ref();
  }
  if (!(lhs.errorCode_ref() == rhs.errorCode_ref())) {
    return lhs.errorCode_ref() < rhs.errorCode_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED optXcep& a, FOLLY_MAYBE_UNUSED optXcep& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_errorCode, b.__fbthrift_field_errorCode);
  swap(a.__isset, b.__isset);
}

template void optXcep::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t optXcep::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t optXcep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t optXcep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void optXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t optXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t optXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t optXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::complexException>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::complexException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const folly::StringPiece complexException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<complexException>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece complexException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<complexException>::name;
}

complexException::complexException(const complexException&) = default;
complexException& complexException::operator=(const complexException&) = default;
complexException::complexException() :
      __fbthrift_field_errorEnum() {
}


complexException::~complexException() {}

complexException::complexException(FOLLY_MAYBE_UNUSED complexException&& other) noexcept :
    __fbthrift_field_message(std::move(other.__fbthrift_field_message)),
    __fbthrift_field_listStrings(std::move(other.__fbthrift_field_listStrings)),
    __fbthrift_field_errorEnum(std::move(other.__fbthrift_field_errorEnum)),
    __fbthrift_field_unionError(std::move(other.__fbthrift_field_unionError)),
    __fbthrift_field_structError(std::move(other.__fbthrift_field_structError)),
    __fbthrift_field_lsMap(std::move(other.__fbthrift_field_lsMap)),
    __isset(other.__isset) {
}

complexException& complexException::operator=(FOLLY_MAYBE_UNUSED complexException&& other) noexcept {
    this->__fbthrift_field_message = std::move(other.__fbthrift_field_message);
    this->__fbthrift_field_listStrings = std::move(other.__fbthrift_field_listStrings);
    this->__fbthrift_field_errorEnum = std::move(other.__fbthrift_field_errorEnum);
    this->__fbthrift_field_unionError = std::move(other.__fbthrift_field_unionError);
    this->__fbthrift_field_structError = std::move(other.__fbthrift_field_structError);
    this->__fbthrift_field_lsMap = std::move(other.__fbthrift_field_lsMap);
    __isset = other.__isset;
    return *this;
}


complexException::complexException(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::vector<::std::string> listStrings__arg, ::cpp2::MyEnum errorEnum__arg, ::cpp2::MyUnion unionError__arg, ::cpp2::MyStruct structError__arg, ::std::map<::std::int64_t, ::std::string> lsMap__arg) :
    __fbthrift_field_message(std::move(message__arg)),
    __fbthrift_field_listStrings(std::move(listStrings__arg)),
    __fbthrift_field_errorEnum(std::move(errorEnum__arg)),
    __fbthrift_field_unionError(std::move(unionError__arg)),
    __fbthrift_field_structError(std::move(structError__arg)),
    __fbthrift_field_lsMap(std::move(lsMap__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void complexException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_message = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_listStrings.clear();
  this->__fbthrift_field_errorEnum = ::cpp2::MyEnum();
  ::apache::thrift::clear(this->__fbthrift_field_unionError);
  ::apache::thrift::clear(this->__fbthrift_field_structError);
  this->__fbthrift_field_lsMap.clear();
  __isset = {};
}

void complexException::__fbthrift_clear_terse_fields() {
}

bool complexException::__fbthrift_is_empty() const {
  return false;
}

bool complexException::operator==(FOLLY_MAYBE_UNUSED const complexException& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return false;
  }
  if (!(lhs.listStrings_ref() == rhs.listStrings_ref())) {
    return false;
  }
  if (!(lhs.errorEnum_ref() == rhs.errorEnum_ref())) {
    return false;
  }
  if (!(lhs.unionError_ref() == rhs.unionError_ref())) {
    return false;
  }
  if (!(lhs.structError_ref() == rhs.structError_ref())) {
    return false;
  }
  if (!(lhs.lsMap_ref() == rhs.lsMap_ref())) {
    return false;
  }
  return true;
}

bool complexException::operator<(FOLLY_MAYBE_UNUSED const complexException& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return lhs.message_ref() < rhs.message_ref();
  }
  if (!(lhs.listStrings_ref() == rhs.listStrings_ref())) {
    return lhs.listStrings_ref() < rhs.listStrings_ref();
  }
  if (!(lhs.errorEnum_ref() == rhs.errorEnum_ref())) {
    return lhs.errorEnum_ref() < rhs.errorEnum_ref();
  }
  if (!(lhs.unionError_ref() == rhs.unionError_ref())) {
    return lhs.unionError_ref() < rhs.unionError_ref();
  }
  if (!(lhs.structError_ref() == rhs.structError_ref())) {
    return lhs.structError_ref() < rhs.structError_ref();
  }
  if (!(lhs.lsMap_ref() == rhs.lsMap_ref())) {
    return lhs.lsMap_ref() < rhs.lsMap_ref();
  }
  return false;
}

const ::std::vector<::std::string>& complexException::get_listStrings() const& {
  return __fbthrift_field_listStrings;
}

::std::vector<::std::string> complexException::get_listStrings() && {
  return std::move(__fbthrift_field_listStrings);
}

const ::cpp2::MyUnion* complexException::get_unionError() const& {
  return unionError_ref().has_value() ? std::addressof(__fbthrift_field_unionError) : nullptr;
}

::cpp2::MyUnion* complexException::get_unionError() & {
  return unionError_ref().has_value() ? std::addressof(__fbthrift_field_unionError) : nullptr;
}

const ::cpp2::MyStruct& complexException::get_structError() const& {
  return __fbthrift_field_structError;
}

::cpp2::MyStruct complexException::get_structError() && {
  return std::move(__fbthrift_field_structError);
}

const ::std::map<::std::int64_t, ::std::string>& complexException::get_lsMap() const& {
  return __fbthrift_field_lsMap;
}

::std::map<::std::int64_t, ::std::string> complexException::get_lsMap() && {
  return std::move(__fbthrift_field_lsMap);
}


void swap(FOLLY_MAYBE_UNUSED complexException& a, FOLLY_MAYBE_UNUSED complexException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_message, b.__fbthrift_field_message);
  swap(a.__fbthrift_field_listStrings, b.__fbthrift_field_listStrings);
  swap(a.__fbthrift_field_errorEnum, b.__fbthrift_field_errorEnum);
  swap(a.__fbthrift_field_unionError, b.__fbthrift_field_unionError);
  swap(a.__fbthrift_field_structError, b.__fbthrift_field_structError);
  swap(a.__fbthrift_field_lsMap, b.__fbthrift_field_lsMap);
  swap(a.__isset, b.__isset);
}

template void complexException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t complexException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t complexException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t complexException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void complexException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t complexException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t complexException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t complexException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        complexException,
        ::apache::thrift::type_class::variant,
        ::cpp2::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        complexException,
        ::apache::thrift::type_class::structure,
        ::cpp2::MyStruct>,
    "inconsistent use of json option");

} // cpp2

namespace cpp2 { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
}
}} // cpp2
